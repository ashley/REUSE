(dp0
I4096
(iPull
Pull
p1
(dp2
S'body'
p3
S"First part of converting the OnSubscribe operators of `Observable` into direct implementors of `Observable` - saves allocation.\r\n\r\nDon't worry about the unnecessary parenthesis, will be removed in a future PR."
p4
sS'title'
p5
S'2.x: convert Observable OnSubscribe to direct implementation'
p6
sS'labels'
p7
(lp8
S'Enhancement'
p9
asS'number'
p10
I4096
sS'comments'
p11
(lp12
S':+1:'
p13
asS'headLabel'
p14
S'akarnokd:NbpObservableDirectPart1'
p15
sbsI4097
(iPull
Pull
p16
(dp17
g3
S'This change reduces the indirection and allocation count when using `map` or `filter`.'
p18
sg5
S'1.x: update map() and filter() to implement OnSubscribe directly'
p19
sg7
(lp20
S'Enhancement'
p21
asg10
I4097
sg11
(lp22
S'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4097][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4097   diff @@\n==========================================\n  Files           259        260     +1   \n  Lines         16821      16852    +31   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2555     +1   \n==========================================\n+ Hits          13500      13530    +30   \n+ Misses         2408       2405     -3   \n- Partials        913        917     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...abbd11d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...abbd11d45259a3f0447c73075403db3c36ea114d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4097?src=pr'
p23
aS'Thanks @stevegury ! Could you give your opinion about #4098 as well?'
p24
asg14
S'akarnokd:MapFilterDirect'
p25
sbsI4099
(iPull
Pull
p26
(dp27
g3
S"Continuing from #3164 .\r\n\r\nParsing the generated Findbugs output file it not as trivial as with PMD since it does contain some meta information. \r\n\r\nLet me know whether this is wanted or not and if so how it can be pursued. \r\n\r\nBy default all rules from Findbugs are enabled and one can opt out using `excludeFilter = file('findbugs-filter.xml)` inside the `findbugs` block, which will then contain something alone the lines of [this](http://findbugs.sourceforge.net/manual/filter.html)."
p28
sg5
S'1.x: Add Findbugs'
p29
sg7
(lp30
S'Build'
p31
asg10
I4099
sg11
(lp32
S"Thanks! I'd like to merge #4091 and #4092 first as rebasing this PR is much easier."
p33
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4099][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4099   diff @@\n==========================================\n  Files           258        258          \n  Lines         16834      16834          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n- Hits          13529      13515    -14   \n- Misses         2400       2408     +8   \n- Partials        905        911     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d855a29...4af7438][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d855a292d6afcb754d664bff475fd40c30776171...4af743828866620c061e50f28f790134647438a6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4099?src=pr'
p34
aS"Running FindBugs locally shows me 31 problems. Half of them look valid, the other half can be ignored (although I don't see any obvious way of suppressing a warning at a specific source line)."
p35
aS"Suppressing them is kind of weird AFAIK you can't use `@SuppressWarnings`, however there's a package, `com.google.code.findbugs:annotations:3.0.1` which gives you [`@SuppressFBWarnings`](http://findbugs.sourceforge.net/api/edu/umd/cs/findbugs/annotations/SuppressFBWarnings.html)."
p36
aS'AFAIK you can just use the `excludeFilter` and then inside ignore certain things (the same way we did it in QualityMatters with Butterknife).'
p37
aS'Could you rebase this?'
p38
aS'Done.'
p39
aS':+1:'
p40
asg14
S'vanniktech:1.x_findbugs'
p41
sbsI4100
(iPull
Pull
p42
(dp43
g3
S'Basically taken from the 1.x branch'
p44
sg5
S'2.x: Add PMD'
p45
sg7
(lp46
S'Build'
p47
asg10
I4100
sg11
(lp48
S':+1:'
p49
asg14
S'vanniktech:2.x_pmd'
p50
sbsI4101
(iPull
Pull
p51
(dp52
g3
S''
p53
sg5
S'2.x: Switch a SerialResource use to SerialDisposable.'
p54
sg7
(lp55
S'Cleanup'
p56
asg10
I4101
sg11
(lp57
S'## [Current coverage][cc-pull] is **70.05%**\n> Merging [#4101][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4101   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      26985          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4331          \n==========================================\n- Hits          18908      18903     -5   \n- Misses         6169       6171     +2   \n- Partials       1908       1911     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1dd141d...b41ce53][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1dd141dfb2d86871a049dc80fd8ee30bffec5210...b41ce532f77ae1cbf48c9f39668daf077453d949\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4101?src=pr'
p58
aS':+1:'
p59
asg14
S'JakeWharton:jw/low-hanging-fruit'
p60
sbsI4102
(iPull
Pull
p61
(dp62
g3
S'This is a fairly "dumb" addition. There\'s lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state management.\r\n\r\nCloses #4075.'
p63
sg5
S'2.x: Expose isDisposed method on Disposable.'
p64
sg7
(lp65
S'Enhancement'
p66
asg10
I4102
sg11
(lp67
S'There are a bunch of compilation errors: https://travis-ci.org/ReactiveX/RxJava/builds/139948754#L315'
p68
aS'## [Current coverage][cc-pull] is **69.85%**\n> Merging [#4102][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.28%**\n\n```diff\n@@                2.x      #4102   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      27087   +102   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4356    +25   \n==========================================\n- Hits          18928      18921     -7   \n- Misses         6144       6252   +108   \n- Partials       1913       1914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [7ffed1b...9abd7a6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7ffed1b36a184242830f58d66e683bc4664eb75e...9abd7a6ac2f4b6105414696fdd86a5a6d8de72e5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4102?src=pr'
p69
aS':+1: Thanks. '
p70
asg14
S'JakeWharton:jw/is-disposed'
p71
sbsI4103
(iPull
Pull
p72
(dp73
g3
S'This PR adds 3 operator-fusion related interfaces: \r\n\r\n  - `QueueSubscription` will support fusion for `Flowable` - avoid creating queues, avoid cost of multiple enqueue-dequeue, reduce `request()` overhead\r\n  - `QueueDisposable` will support fusion for `Observable` - avoid creating queues, avoid cost of multiple enqueue-dequeue\r\n  - `ScalarCallable` - indicate a scalar constant source\r\n\r\nIn addition `ConditionalSubscriber` is marked and will be moved to the new package and its method renamed to `tryOnNext`.\r\n\r\nUnlike Reactor-Core (and Rsc), there is no `Fuseable` marker interface. The ability of fusing is indicated by calling `onSubscribe` with the above `QueueX` enabled instances and then called back via `requestFusion`. This allows having less duplicated code compared to Reactor/Rsc - at the cost of usually one extra field to store the `QueueX` value that may be null.'
p74
sg5
S'2.x: prepare the operator-fusion enhancement'
p75
sg7
(lp76
S'Enhancement'
p77
asg10
I4103
sg11
(lp78
S'## [Current coverage][cc-pull] is **70.09%**\n> Merging [#4103][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4103   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      26985          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4331          \n==========================================\n- Hits          18919      18916     -3   \n- Misses         6155       6159     +4   \n+ Partials       1911       1910     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e9fad24...97801d4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e9fad2483026ece4853078e47b5fb93bc8cbf0fb...97801d404ac89fc84ebd730d7e35b746de9bcb2a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4103?src=pr'
p79
aS'Nice :+1:'
p80
asg14
S'akarnokd:Fuseable'
p81
sbsI4105
(iPull
Pull
p82
(dp83
g3
g53
sg5
S'2.x: Remove some superfluous reads before writes.'
p84
sg7
(lp85
S'Cleanup'
p86
asg10
I4105
sg11
(lp87
S'## [Current coverage][cc-pull] is **69.88%**\n> Merging [#4105][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                2.x      #4105   diff @@\n==========================================\n  Files           380        380          \n  Lines         27087      27076    -11   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4356       4345    -11   \n==========================================\n+ Hits          18909      18923    +14   \n+ Misses         6266       6241    -25   \n  Partials       1912       1912          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b40b124...89cb999][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b40b124c135bed4eea4dd0374d0fb62a79361cfa...89cb999f35f527a7635e1af741a396f60e7c63ef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4105?src=pr'
p88
aS':+1:'
p89
asg14
S'JakeWharton:jw/superfluous-reads'
p90
sbsI4106
(iPull
Pull
p91
(dp92
g3
S"I suspect there's quite a few of these all over. These are just the ones I noted while doing other changes."
p93
sg5
S'2.x: Remove explicit cancel flags where it can be inferred.'
p94
sg7
(lp95
S'Enhancement'
p96
asg10
I4106
sg11
(lp97
S'## [Current coverage][cc-pull] is **69.84%**\n> Merging [#4106][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4106   diff @@\n==========================================\n  Files           380        380          \n  Lines         27076      27053    -23   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4343     -2   \n==========================================\n- Hits          18910      18895    -15   \n+ Misses         6264       6241    -23   \n- Partials       1902       1917    +15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c9bb518...cb9d60a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c9bb518df5991a65c2f97b8ed7ba5458233963ea...cb9d60a6a01e6e589bd4459da76642212188b7a8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4106?src=pr'
p98
aS':+1:'
p99
asg14
S'JakeWharton:jw/start-deleting-code'
p100
sbsI4107
(iPull
Pull
p101
(dp102
g3
S"The original behavior was somewhat inconsistent: if the target was null before the cancel/dispose, the method didn't return true indicating a successful swap for the current thread. Now that many `cancelled` flag has been removed, it has to consistently trigger the remaining cleanup actions."
p103
sg5
S'2.x: make sure the helper returns true if the pre-swap value was null'
p104
sg7
(lp105
S'Bug'
p106
asg10
I4107
sg11
(lp107
S':+1:'
p108
asg14
S'akarnokd:HelperReportTrueOnNull'
p109
sbsI4108
(iPull
Pull
p110
(dp111
g3
g53
sg5
S'2.x: Invert subscription validation return type for better semantics.'
p112
sg7
(lp113
S'Cleanup'
p114
asg10
I4108
sg11
(lp115
S'Similar to #4095.'
p116
aS'## [Current coverage][cc-pull] is **70.02%**\n> Merging [#4108][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.09%**\n\n```diff\n@@                2.x      #4108   diff @@\n==========================================\n  Files           380        380          \n  Lines         27053      27003    -50   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4343       4343          \n==========================================\n- Hits          18919      18910     -9   \n+ Misses         6238       6181    -57   \n- Partials       1896       1912    +16   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [34d5c96...0ce2d65][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/34d5c96bfc7e89fdb840ee6c568cd4d2421f7be6...0ce2d65daf024197fd8db397584054c4d2c894d5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4108?src=pr'
p117
aS':+1:'
p118
asg14
S'JakeWharton:jw/invert-validate'
p119
sbsI4110
(iPull
Pull
p120
(dp121
g3
g53
sg5
S'2.x: Remove explicit cancel flags where it can be inferred.'
p122
sg7
(lp123
S'Cleanup'
p124
asg10
I4110
sg11
(lp125
S'Code looks ok, but is the CI failure related to your changes?'
p126
aS'I see it locally so it must be. Will look later tonight and try to figure out which is the cause.'
p127
aS'## [Current coverage][cc-pull] is **69.96%**\n> Merging [#4110][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4110   diff @@\n==========================================\n  Files           382        382          \n  Lines         26972      26960    -12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4338       4339     +1   \n==========================================\n- Hits          18879      18862    -17   \n- Misses         6196       6198     +2   \n- Partials       1897       1900     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ecdd8bb...506a75d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ecdd8bb39bb35d07590a5579794bc302a5e00389...506a75df8a9decb89f2240d68283e5a448d86c8d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4110?src=pr'
p128
asg14
S'JakeWharton:jw/cancel-cancelled'
p129
sbsI4111
(iPull
Pull
p130
(dp131
g3
g53
sg5
S'2.x: Simplify boolean disposables which run code on dispose.'
p132
sg7
(lp133
S'Enhancement'
p134
asg10
I4111
sg11
(lp135
S"There's some classes in `internal` which could probably also extend from this type, so we might want to move it to `internal.disposables` and make it public for their use in the future."
p136
aS'Another option to make this more widely applicable would be to have a single class and accept a `Consumer<T> disposer`. That might open it up for use in more places internally.'
p137
aS'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4111][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4111   diff @@\n==========================================\n  Files           380        383     +3   \n  Lines         27005      26987    -18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4340     -5   \n==========================================\n- Hits          18894      18893     -1   \n+ Misses         6203       6192    -11   \n+ Partials       1908       1902     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...e8963e2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...e8963e2099d5e20272435e6ea657405d07d54499\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4111?src=pr'
p138
aS'You can experiment with that if you wish.\r\n:+1:'
p139
asg14
S'JakeWharton:jw/disposables-simplification'
p140
sbsI4112
(iPull
Pull
p141
(dp142
g3
g53
sg5
S'2.x: Switch the last SerialResource to manual resource management.'
p143
sg7
(lp144
S'Enhancement'
p145
asg10
I4112
sg11
(lp146
S'Test failure is flake #4054.'
p147
aS"New one? Doesn't fail locally.\r\n```\r\nio.reactivex.internal.operators.flowable.FlowableReplayTest > testAsyncComeAndGo FAILED\r\n    java.lang.AssertionError: Error(s) present: [io.reactivex.exceptions.MissingBackpressureException: Can't deliver value 184 due to lack of requests]\r\n        at io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:355)\r\n        at io.reactivex.subscribers.TestSubscriber.assertNoErrors(TestSubscriber.java:418)\r\n        at io.reactivex.internal.operators.flowable.FlowableReplayTest.testAsyncComeAndGo(FlowableReplayTest.java:1022)\r\n        Caused by:\r\n        io.reactivex.exceptions.CompositeException\r\n            at io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:356)\r\n            ... 2 more\r\n            Caused by:\r\n            io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain: Chain of Causes for CompositeException In Order Received =>\r\n                Caused by:\r\n                io.reactivex.exceptions.MissingBackpressureException: Can't deliver value 184 due to lack of requests\r\n```"
p148
aS'## [Current coverage][cc-pull] is **70.04%**\n> Merging [#4112][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4112   diff @@\n==========================================\n  Files           380        379     -1   \n  Lines         27005      26990    -15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4343     -2   \n==========================================\n+ Hits          18894      18904    +10   \n+ Misses         6203       6192    -11   \n+ Partials       1908       1894    -14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...5faf608][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...5faf6089050fe86b21440298fbc4275314b3a75b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4112?src=pr'
p149
asg14
S'JakeWharton:jw/last-serial-resource'
p150
sbsI4113
(iPull
Pull
p151
(dp152
g3
S'This gives me a 57% reduction in execution time.'
p153
sg5
S'2.x: Parallelize unit test execution for speed!'
p154
sg7
(lp155
S'Build'
p156
aS'Test'
p157
asg10
I4113
sg11
(lp158
S"Looks like Travis can't handle it. I can disable it for CI builds where build speed isn't really important."
p159
aS'## [Current coverage][cc-pull] is **69.93%**\n> Merging [#4113][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4113   diff @@\n==========================================\n  Files           380        380          \n  Lines         27005      27005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4345          \n==========================================\n- Hits          18894      18887     -7   \n- Misses         6203       6206     +3   \n- Partials       1908       1912     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...c1b607c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...c1b607c4eb3ae6c547351a46d2b9a2b2f1aee54a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4113?src=pr'
p160
aS'This increases the likelihood of timeouts during heavy times. Maybe later.'
p161
aS"In addition, some tests may conflict because they may change the global hooks. I'm guessing there isn't a JUnit annotation that allows some tests to run in parallel with others while forbidding for others?"
p162
aS"Okay, let's try it."
p163
asg14
S'JakeWharton:jw/must-go-faster'
p164
sbsI4114
(iPull
Pull
p165
(dp166
g3
S'This is already being done in the library, and is fairly [standard practice][1].\r\n\r\n [1]: https://google.github.io/styleguide/javaguide.html#s5.3-camel-case'
p167
sg5
S'2.x: Case IO acronym like a word.'
p168
sg7
(lp169
S'Cleanup'
p170
asg10
I4114
sg11
(lp171
S'## [Current coverage][cc-pull] is **69.97%**\n> Merging [#4114][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4114   diff @@\n==========================================\n  Files           380        380          \n  Lines         27005      27005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4345          \n==========================================\n+ Hits          18894      18896     +2   \n+ Misses         6203       6199     -4   \n- Partials       1908       1910     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...bb7448f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...bb7448f6fe19051dc0891677a75dbc16048b6532\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4114?src=pr'
p172
asg14
S'JakeWharton:jw/casing'
p173
sbsI4116
(iPull
Pull
p174
(dp175
g3
S'Taken from the 1.x branch'
p176
sg5
S'2.x: Add Findbugs'
p177
sg7
(lp178
S'Build'
p179
asg10
I4116
sg11
(lp180
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4116][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4116   diff @@\n==========================================\n  Files           382        382          \n  Lines         26960      26960          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4339          \n==========================================\n- Hits          18886      18861    -25   \n- Misses         6172       6198    +26   \n+ Partials       1902       1901     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ecdd563...6c743c8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ecdd5639bba63af8ab21f11d66de65317883f9a6...6c743c8669129213611ba88668bc2e9b243bc003\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4116?src=pr'
p181
asg14
S'vanniktech:2.x_add_findbugs'
p182
sbsI4117
(iPull
Pull
p183
(dp184
g3
S'Increase coverage of `XProudcer`s.'
p185
sg5
S'1.x: increase coverage of producers'
p186
sg7
(lp187
S'Test'
p188
asg10
I4117
sg11
(lp189
S'## [Current coverage][cc-pull] is **80.67%**\n> Merging [#4117][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.39%**\n\n```diff\n@@                1.x      #4117   diff @@\n==========================================\n  Files           258        258          \n  Lines         16834      16835     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n+ Hits          13515      13582    +67   \n+ Misses         2408       2341    -67   \n- Partials        911        912     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a6d6ba9...bd7c676][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a6d6ba98c84dc70fe3c117f69ad554e11ad3c2d4...bd7c676ef00a36163da34e69f80c418651e8cb11\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4117?src=pr'
p190
asg14
S'akarnokd:ProducersCoveragePlusPlus'
p191
sbsI4118
(iPull
Pull
p192
(dp193
g3
S"During code reading I've found some tests that are ignored but don't have a record why they are being ignored. Some of them have meaningful explanations present as line comments, so I decided to make them the parameters of `@Ignore` annotation, so it will be correct."
p194
sg5
S'1.x: provide an explanation why certain tests are ignored'
p195
sg7
(lp196
S'Test'
p197
asg10
I4118
sg11
(lp198
S'## [Current coverage][cc-pull] is **80.64%**\n> Merging [#4118][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4118   diff @@\n==========================================\n  Files           258        258          \n  Lines         16835      16835          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n- Hits          13588      13576    -12   \n- Misses         2336       2350    +14   \n+ Partials        911        909     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4210577...beae70b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4210577aed9d7b2efb9c51305f02d2c846b558c3...beae70b291a4666a711d4df30d85af633e632e5b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4118?src=pr'
p199
asg14
S'DmitriyZaitsev:dz/1.x/explain_ignored_tests'
p200
sbsI4119
(iPull
Pull
p201
(dp202
g3
S'Increase coverage of internal utils, remove unused and unnecessary items.'
p203
sg5
S'1.x: increase coverage of internal utils, remove unused/unnecessary items'
p204
sg7
(lp205
S'Cleanup'
p206
asg10
I4119
sg11
(lp207
S'## [Current coverage][cc-pull] is **81.17%**\n> Merging [#4119][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.57%**\n\n```diff\n@@                1.x      #4119   diff @@\n==========================================\n  Files           258        257     -1   \n  Lines         16835      16811    -24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2547     -2   \n==========================================\n+ Hits          13569      13647    +78   \n+ Misses         2350       2266    -84   \n+ Partials        916        898    -18   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1d75f4a...2bc0d21][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1d75f4ae08ac8cf468ae86adcf02a566a727f59d...2bc0d218c1b29986a4bae34019a938f70fbacbb1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4119?src=pr'
p208
asg14
S'akarnokd:UtilCoveragePlusPlus'
p209
sbsI4120
(iPull
Pull
p210
(dp211
g3
S'The same as #4118, but for 2.x'
p212
sg5
S'2.x: provide an explanation why certain tests are ignored'
p213
sg7
(lp214
S'Cleanup'
p215
aS'Test'
p216
asg10
I4120
sg11
(lp217
S'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4120][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4120   diff @@\n==========================================\n  Files           382        382          \n  Lines         26960      26960          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4339          \n==========================================\n+ Hits          18862      18872    +10   \n+ Misses         6198       6191     -7   \n+ Partials       1900       1897     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5350508...b5eb1f0][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5350508ba82fc11fd12068eedd33b5febefeebe0...b5eb1f03d5450fbeabb7db2c326df46083813b41\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4120?src=pr'
p218
asg14
S'DmitriyZaitsev:dz/2.x/explain_ignored_tests'
p219
sbsI4122
(iPull
Pull
p220
(dp221
g3
S'This PR refactors `ConditionalSubscriber` and renames its method to `tryOnNext`. In addition, two new abstract subscriber types were added: `BasicFuseableSubscriber` and `BasicFuseableConditionalSubscriber` to help writing operators that support fusion (queue and/or conditional).'
p222
sg5
S'Refactor ConditionalSubscriber, add base fuseable Subscribers'
p223
sg7
(lp224
S'Enhancement'
p225
asg10
I4122
sg11
(lp226
S'## [Current coverage][cc-pull] is **69.67%**\n> Merging [#4122][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.38%**\n\n```diff\n@@                2.x      #4122   diff @@\n==========================================\n  Files           382        384     +2   \n  Lines         26960      27089   +129   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4360    +21   \n==========================================\n- Hits          18888      18875    -13   \n- Misses         6183       6321   +138   \n- Partials       1889       1893     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [0287d55...ad3c466][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/0287d550e38613acac41efdfb51daa69d6f1872d...ad3c466fc4347145a535488084bc5998b0185805\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4122?src=pr'
p227
asg14
S'akarnokd:FuseableHelpers'
p228
sbsI4124
(iPull
Pull
p229
(dp230
g3
S'  - Switch a few `Observable` operators to direct implementations (reduces allocation)\r\n  - Update `map` to support operator fusion; there are no sources or consumer yet though.\r\n  - Adjust `BasicFuseableX` to have different default conveniences\r\n  - Modify `CompositeResource` to indicate success of the mutator methods\r\n  - increase timeout of `FlowableOnBackpressureDropTest.testFixBackpressureWithBuffer`'
p231
sg5
S'Switch some Observable ops to direct, map fuseable'
p232
sg7
(lp233
S'Cleanup'
p234
aS'Enhancement'
p235
asg10
I4124
sg11
(lp236
S'## [Current coverage][cc-pull] is **69.68%**\n> Merging [#4124][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4124   diff @@\n==========================================\n  Files           384        384          \n  Lines         27089      27125    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4360       4364     +4   \n==========================================\n+ Hits          18880      18903    +23   \n- Misses         6317       6325     +8   \n- Partials       1892       1897     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [109c8c2...b22c53b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/109c8c2cd5c3cb2db61286cb3eb59150a9d5f746...b22c53b8791c7736c08ec1053ca1f474641ba9fc\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4124?src=pr'
p237
asg14
S'akarnokd:ObservableDirect625_1'
p238
sbsI4125
(iPull
Pull
p239
(dp240
g3
g53
sg5
S'1.x: Test all private Constructors'
p241
sg7
(lp242
S'Test'
p243
asg10
I4125
sg11
(lp244
S'## [Current coverage][cc-pull] is **81.33%**\n> Merging [#4125][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.28%**\n\n```diff\n@@                1.x      #4125   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13626      13674    +48   \n+ Misses         2277       2239    -38   \n+ Partials        908        898    -10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ed92ba8...ae01993][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ed92ba833f05b7eb04ff7d592040656f9bcbcf32...ae019935d8bfe6adf7be389a4839cb0a8061a008\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4125?src=pr'
p245
aS':+1: Great!\r\n\r\n/cc @artem-zinnatullin '
p246
aS'Can I suggest in the spirit of DRY that you make a static method available somewhere (a new class `TestingUtil`, say) like this:\r\n\r\n```java\r\npublic static void checkConstructorPrivate(Class<?> cls)  {\r\n    PrivateConstructorChecker\r\n         .forClass(cls)\r\n        .expectedTypeOfException(IllegalStateException.class)\r\n        .expectedExceptionMessage("No instances!").check();\r\n}\r\n```\r\nand call that instead?'
p247
aS"Thanks!\r\n\r\n@davidmoten I'll refactor those checks into a simple call as you and [I](https://github.com/ReactiveX/RxJava/pull/4125#discussion_r68494047) suggested."
p248
asg14
S'vanniktech:1.x_test_private_constructors'
p249
sbsI4126
(iPull
Pull
p250
(dp251
g3
S'This PR removes the `XResource` types and replaces them with `XDisposable` or `XSubscription` where necessary.'
p252
sg5
S'Remove XResource classes'
p253
sg7
(lp254
S'Cleanup'
p255
asg10
I4126
sg11
(lp256
S'## [Current coverage][cc-pull] is **69.56%**\n> Merging [#4126][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4126   diff @@\n==========================================\n  Files           384        383     -1   \n  Lines         27125      27074    -51   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4364       4355     -9   \n==========================================\n- Hits          18896      18834    -62   \n- Misses         6327       6349    +22   \n+ Partials       1902       1891    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [05e160c...28b7449][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/05e160c7cfd2212a0b9a985c5294c7de5c844d90...28b744970481774c56ff49bd3e135059a5257aef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4126?src=pr'
p257
asg14
S'akarnokd:XResourceRemove'
p258
sbsI4127
(iPull
Pull
p259
(dp260
g3
g53
sg5
S'2.x: Correct method name for Flowable-->Observable.'
p261
sg7
(lp262
S'Cleanup'
p263
asg10
I4127
sg11
(lp264
S'## [Current coverage][cc-pull] is **69.63%**\n> Merging [#4127][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                2.x      #4127   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4355          \n==========================================\n+ Hits          18830      18852    +22   \n+ Misses         6352       6329    -23   \n- Partials       1892       1893     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [68a9a66...858e3d8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/68a9a66d27386e0fce7196f2797446676f1206a6...858e3d8e5740316fb25a8084d724f05ac573bde0\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4127?src=pr'
p265
asg14
S'JakeWharton:jw/naming'
p266
sbsI4128
(iPull
Pull
p267
(dp268
g3
g53
sg5
S'2.x: Reduce the visibility of internal methods.'
p269
sg7
(lp270
S'Cleanup'
p271
asg10
I4128
sg11
(lp272
S'## [Current coverage][cc-pull] is **69.50%**\n> Merging [#4128][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4128   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4355          \n==========================================\n- Hits          18830      18819    -11   \n- Misses         6352       6359     +7   \n- Partials       1892       1896     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [68a9a66...9524f46][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/68a9a66d27386e0fce7196f2797446676f1206a6...9524f46ec7614131a0c4cda32f75fc999646fb55\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4128?src=pr'
p273
asg14
S'JakeWharton:jw/visibility-reduction'
p274
sbsI4129
(iPull
Pull
p275
(dp276
g3
S'This PR adjusts the PMD rules and fixes about 300 suggestions.'
p277
sg5
S'2.x: cleanup of PMD suggestions'
p278
sg7
(lp279
S'Cleanup'
p280
asg10
I4129
sg11
(lp281
S'## [Current coverage][cc-pull] is **69.60%**\n> Merging [#4129][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4129   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27037    -37   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4340    -15   \n==========================================\n- Hits          18862      18820    -42   \n- Misses         6320       6329     +9   \n+ Partials       1892       1888     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c9c772f...1c797b3][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c9c772fbefecafc5fcb600fab7e16c7657a798b3...1c797b3a0a5ed30e5d28c15787acb5fae6e0c8ef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4129?src=pr'
p282
asg14
S'akarnokd:PMDFixes626'
p283
sbsI4130
(iPull
Pull
p284
(dp285
g3
S"Don't run findbugs for the perf and test packages."
p286
sg5
S'2.x: run Findbugs on main only'
p287
sg7
(lp288
S'Build'
p289
asg10
I4130
sg11
(lp290
S'This should also be adjusted in 1.x right?'
p291
aS'Yes, running on test sometimes takes so long travis kills the build.'
p292
asg14
S'akarnokd:FindBugsMain'
p293
sbsI4131
(iPull
Pull
p294
(dp295
g3
g53
sg5
S'1.x: run Findbugs on main only'
p296
sg7
(lp297
S'Build'
p298
asg10
I4131
sg11
(lp299
S'## [Current coverage][cc-pull] is **81.08%**\n> Merging [#4131][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4131   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13626      13631     +5   \n+ Misses         2277       2276     -1   \n+ Partials        908        904     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ed92ba8...bb38578][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ed92ba833f05b7eb04ff7d592040656f9bcbcf32...bb3857818607eb0109b725be809118d3503e938b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4131?src=pr'
p300
asg14
S'vanniktech:1.x_findbugs_main_only'
p301
sbsI4133
(iPull
Pull
p302
(dp303
g3
S'Move into `TestUtil.checkUtilityClass()`.'
p304
sg5
S'Refactor private constructor checker into a utility class'
p305
sg7
(lp306
S'Cleanup'
p307
aS'Test'
p308
asg10
I4133
sg11
(lp309
S'## [Current coverage][cc-pull] is **81.25%**\n> Merging [#4133][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4133   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n- Hits          13666      13659     -7   \n- Misses         2243       2245     +2   \n- Partials        902        907     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5c74757...c568e9d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5c747577e910b5eda657bc9f825914965fb2f1c4...c568e9db169ee22992af8421dcebeda21b634202\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4133?src=pr'
p310
aS'/cc @davidmoten '
p311
aS':+1: '
p312
asg14
S'akarnokd:PrivateCheckerUtil'
p313
sbsI4134
(iPull
Pull
p314
(dp315
g3
S'This PR adds the missing `@Override` annotations and renames the `Observable` unit tests to conform a single name pattern.'
p316
sg5
S'2.x: cleanup and test renames'
p317
sg7
(lp318
S'Cleanup'
p319
asg10
I4134
sg11
(lp320
S'## [Current coverage][cc-pull] is **69.59%**\n> Merging [#4134][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4134   diff @@\n==========================================\n  Files           383        383          \n  Lines         27037      27037          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4340          \n==========================================\n+ Hits          18804      18816    +12   \n+ Misses         6349       6331    -18   \n- Partials       1884       1890     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [9228137...5eaddd9][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/92281376dbf8b75bc9b310ab10a4a9be30cde54f...5eaddd9609d6cde62e7945c379cc135f976d32ce\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4134?src=pr'
p321
asg14
S'akarnokd:CleanupAndRenames'
p322
sbsI4135
(iPull
Pull
p323
(dp324
g3
S'Target 2.x and (C) 2016.'
p325
sg5
S'2.x update branch and year in contributing and readme md'
p326
sg7
(lp327
S'Documentation'
p328
asg10
I4135
sg11
(lp329
S'## [Current coverage][cc-pull] is **69.55%**\n> Merging [#4135][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4135   diff @@\n==========================================\n  Files           383        383          \n  Lines         27037      27037          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4340          \n==========================================\n+ Hits          18797      18805     +8   \n+ Misses         6354       6348     -6   \n+ Partials       1886       1884     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d572419...36af68d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d5724198e2be3d1101a26cff40654f6eb30fee72...36af68dcc018a43a7221e39655eca9479731ae00\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4135?src=pr'
p330
asg14
S'akarnokd:ContributingUpdate'
p331
sbsI4136
(iPull
Pull
p332
(dp333
g3
S'  - adds an operator `hide` to allow hiding and breaking optimizations\r\n  - update `filter` to support fusions: queue and conditional\r\n  - `range` now supports fusion: sync-queue and conditional\r\n  - `fromArray` now supports fusion: sync-queue and conditional\r\n  - `fromIterable` now supports fusion: sync-queue and conditional\r\n  - enhanced `TestSubscriber` methods to return this - allows chaining the assertions\r\n  - extended `TestSubscriber` to act as a consumer for queue-fusion\r\n  - introduced `FlowableSource` as an intermediate type for operators: allows discovering the upstream in a standard way, allows the IDE to generate a constructor with a source value.\r\n  - added `BasicQueueSubscription` that locks down unused `Queue` methods plus is a container for an atomic long value useful for request/wip tracking.'
p334
sg5
S'2.x: enable fuseable sources, adjust operators'
p335
sg7
(lp336
S'Enhancement'
p337
asg10
I4136
sg11
(lp338
S'## [Current coverage][cc-pull] is **69.22%**\n> Merging [#4136][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.30%**\n\n```diff\n@@                2.x      #4136   diff @@\n==========================================\n  Files           383        386     +3   \n  Lines         27037      27277   +240   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4410    +70   \n==========================================\n+ Hits          18797      18882    +85   \n- Misses         6354       6506   +152   \n- Partials       1886       1889     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d572419...cbe8432][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d5724198e2be3d1101a26cff40654f6eb30fee72...cbe84323ea79a2b0a60aca1985d514c60e2318a0\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4136?src=pr'
p339
asg14
S'akarnokd:RangeArrayIterableFuseable'
p340
sbsI4139
(iPull
Pull
p341
(dp342
g3
S'This PR should fix some test timing out otherwise sensitive to thread hiccups.\r\n\r\n#4138\r\n#4109\r\n#4054'
p343
sg5
S'2.x: fix flaky tests'
p344
sg7
(lp345
S'Test-Failures'
p346
asg10
I4139
sg11
(lp347
S':+1:'
p348
aS'## [Current coverage][cc-pull] is **69.20%**\n> Merging [#4139][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4139   diff @@\n==========================================\n  Files           386        386          \n  Lines         27277      27277          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n- Hits          18879      18876     -3   \n  Misses         6508       6508          \n- Partials       1890       1893     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [13df09b...eb8242a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3...eb8242a44298bfafb62118b075f91f390431f6f9\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4139?src=pr'
p349
asg14
S'akarnokd:FixFlakyTests'
p350
sbsI4140
(iPull
Pull
p351
(dp352
g3
S'Closes #3851, closes #4137.'
p353
sg5
S'1.x: Change Completable.subscribe(onError, onComplete) to (onComplete, onError)'
p354
sg7
(lp355
S'Enhancement'
p356
asg10
I4140
sg11
(lp357
S'Actually, I can deprecate old one and add new one as overload, it will have less impact on user code because only calls like `subscribe(Actions.empty(), Actions.empty())` will be ambiguous to the compiler.\r\n\r\nThoughts?'
p358
aS'## [Current coverage][cc-pull] is **81.33%**\n> Merging [#4140][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4140   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13666      13673     +7   \n+ Misses         2243       2238     -5   \n+ Partials        902        900     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5c74757...55723da][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5c747577e910b5eda657bc9f825914965fb2f1c4...55723da4b83365611d103a5e0971a198fcafbea1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4140?src=pr'
p359
aS':+1:'
p360
aS"Dynamic languages have trouble with the two methods, let's only have 1 method."
p361
asg14
S'artem-zinnatullin:1x/az/completable-subscribe'
p362
sbsI4141
(iPull
Pull
p363
(dp364
g3
S'Upgrade to 2.14.'
p365
sg5
S'2.x: upgrade to Gradle 2.14'
p366
sg7
(lp367
S'Build'
p368
asg10
I4141
sg11
(lp369
S'Wait!'
p370
aS'## [Current coverage][cc-pull] is **69.20%**\n> Merging [#4141][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4141   diff @@\n==========================================\n  Files           386        386          \n  Lines         27277      27277          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n- Hits          18882      18878     -4   \n- Misses         6507       6508     +1   \n- Partials       1888       1891     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [64cda78...305ef3e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/64cda78bc6a49b767adb20deb25eefa459a3d7ae...305ef3eb5b6e9efcfda83a91e9c81bf5a2d1f33c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4141?src=pr'
p371
aS"You just updated link to gradle wrapper, but you haven't run any gradle task and it didn't download new `gradlew` shell flies and new `gradle-wrapper.jar`\r\n\r\nJust run gradle, ie: `./gradlew --version`, it should update wrapper files and then you need to add them to PR."
p372
aS'https://travis-ci.org/ReactiveX/RxJava/builds/140744064#L274'
p373
aS'```\r\nC:\\Users\\akarnokd\\git\\RxJava>gradlew --version\r\n\r\n------------------------------------------------------------\r\nGradle 2.14\r\n------------------------------------------------------------\r\n\r\nBuild time:   2016-06-14 07:16:37 UTC\r\nRevision:     cba5fea19f1e0c6a00cc904828a6ec4e11739abc\r\n\r\nGroovy:       2.4.4\r\nAnt:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015\r\nJVM:          1.8.0_92 (Oracle Corporation 25.92-b14)\r\nOS:           Windows 7 6.1 amd64\r\n\r\nC:\\Users\\akarnokd\\git\\RxJava>\r\n```'
p374
aS'Right, but for next PR gradle wrapper files will be marked as changed and will have to be commited.\r\n\r\nCan you check what `git status` shows for you now? `gradle/wrapper/gradle-wrapper.jar` should be marked as changed, `./gradlew` and `./gradlew.bat` can be changed too.'
p375
aS'You have to run `./gradlew wrapper` to update the wrapper files.'
p376
aS'Okay.'
p377
asg14
S'akarnokd:Gradle214'
p378
sbsI4142
(iPull
Pull
p379
(dp380
g3
S"This PR adds unit tests for the new `RxJavaHooks` facility and fixes\r\n\r\n  - Small mistakes in calling the right hook.\r\n  - Dealing with constant `Completable` sources such as `complete()` and `never()`: they executed the hook on class initialization so they couldn't be properly overridden later via an `onCreate` hook. (This could affect the other constants and will be addressed separately.)"
p381
sg5
S'1.x: add RxJavaHooks tests, fix small bugs'
p382
sg7
(lp383
S'Bug'
p384
aS'Test'
p385
asg10
I4142
sg11
(lp386
S'## [Current coverage][cc-pull] is **81.47%**\n> Merging [#4142][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.23%**\n\n```diff\n@@                1.x      #4142   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16823    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2550     +3   \n==========================================\n+ Hits          13658      13707    +49   \n+ Misses         2247       2218    -29   \n+ Partials        906        898     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d66d931...6d5473a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d66d9313d8580b56a53b28dba32fb1ccacd606b6...6d5473aaad6f06c3707acbd6ae8f776731503012\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4142?src=pr'
p387
aS'Updated.'
p388
asg14
S'akarnokd:HooksTests'
p389
sbsI4143
(iPull
Pull
p390
(dp391
g3
S'This is a semantics-preserving refactoring.\r\n\r\n- We are evaluating a research prototype automated refactoring Eclipse plug-in called [Migrate Skeletal Implementation to Interface](https://github.com/khatchad/Migrate-Skeletal-Implementation-to-Interface-Refactoring). We have applied the tool to your project in the hopes of receiving feedback.\r\n- The approach is very conservative and you should not observe many source code changes.\r\n- The source code should be semantically equivalent to the original.\r\n- We have run tests prior to applying to the tool and following the application. All tests pass.\r\n\r\nThank you for your help in this evaluation!'
p392
sg5
S'Applied skeletal implementation to interface migration refactoring'
p393
sg7
(lp394
S'Question'
p395
asg10
I4143
sg11
(lp396
S"I'm sorry, these are unacceptable changes. RxJava is a library, targeting Java 6, so even beyond the `default` changes, we want those methods to be implemented."
p397
aS'@akarnokd Thank you for the feedback!'
p398
asg14
S'khatchadourian-lab:1.x'
p399
sbsI4145
(iPull
Pull
p400
(dp401
g3
S'This concludes the architecture switch for 2.x.'
p402
sg5
S'Observable direct rest'
p403
sg7
(lp404
S'Enhancement'
p405
asg10
I4145
sg11
(lp406
S'## [Current coverage][cc-pull] is **69.27%**\n> Merging [#4145][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4145   diff @@\n==========================================\n  Files           386        387     +1   \n  Lines         27277      27333    +56   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n+ Hits          18888      18935    +47   \n+ Misses         6502       6501     -1   \n- Partials       1887       1897    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a09f5a4...2ddb055][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a09f5a48da7b1f9874fff0382d5da92d116bde39...2ddb055f9608802f206828ade4ee78412b9d3717\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4145?src=pr'
p407
aS'@JakeWharton do you want to review this?'
p408
aS'lgtm :+1:'
p409
aS'Thanks @JakeWharton !'
p410
asg14
S'akarnokd:ObservableDirectRest'
p411
sbsI4146
(iPull
Pull
p412
(dp413
g3
S'I forgot to invert the noHook -> useHook change.'
p414
sg5
S'Fix the initialization of Completable.complete()'
p415
sg7
(lp416
S'Test'
p417
asg10
I4146
sg11
(lp418
S'The related tests failed for me due to test ordering; if they were the very first encounters of `Completable`.'
p419
aS'## [Current coverage][cc-pull] is **81.43%**\n> Merging [#4146][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4146   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n+ Hits          13684      13699    +15   \n+ Misses         2236       2226    -10   \n+ Partials        903        898     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ee63aff...c636f6a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ee63affc1c237ecabccbdc2a7d9398e3d5c39372...c636f6a07a7929d2681db57a876d62a8b8f52b8c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4146?src=pr'
p420
asg14
S'akarnokd:CompletableHookFlagFix'
p421
sbsI4151
(iPull
Pull
p422
(dp423
g3
S'This PR enables operator fusion for scalar and knowingly single-element sources.\r\n\r\nThere are no fusion-consumers yet.'
p424
sg5
S'2.x: enable scalar and async fuseable sources and intermediates'
p425
sg7
(lp426
S'Enhancement'
p427
asg10
I4151
sg11
(lp428
S'## [Current coverage][cc-pull] is **69.16%**\n> Merging [#4151][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.18%**\n\n```diff\n@@                2.x      #4151   diff @@\n==========================================\n  Files           387        388     +1   \n  Lines         27333      27387    +54   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4393    -17   \n==========================================\n- Hits          18955      18942    -13   \n- Misses         6488       6564    +76   \n+ Partials       1890       1881     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d4f041b...4f2eece][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d4f041bd1d7944ee467f3cbe04d6f1371e8f312b...4f2eecee404238b49c4ac0f2f074ed6d63938231\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4151?src=pr'
p429
aS'@JakeWharton, @artem-zinnatullin want to take a look?'
p430
aS"Yes, in 24 hours if you don't mind"
p431
aS'lgtm :+1:'
p432
aS'Thanks to everyone for the review.'
p433
asg14
S'akarnokd:OpFusion630_1'
p434
sbsI4154
(iPull
Pull
p435
(dp436
g3
S"based on #4115\r\n\r\nAllows the use of operators for controlling the timing around when actions scheduled on workers are actually done. This makes it possible to layer additional behavior on an existing `Scheduler`. The main parameter is a function that flattens an `Observable<Completable>` into just one `Completable`. There must be a chain of operators connecting the returned value to the source Observable otherwise any work scheduled on the Scheduler will not be executed.\r\n\r\nWhen `scheduler.createWorker()` is invoked a `Completable` is onNext'd to the combinator to be flattened. If the `Completable` is not immediately subscribed to an calls to `worker.schedule(...)` are buffered. Once the `Completable` is subscribed to actions are then scheduled on the actual Scheduler. When the `Worker` is unsubscribed the `Completable` emits an onComplete and triggers any behavior in the flattening operator. The `Observable<Completable>` and all `Completable`s give to the flattening function never onError.\r\n\r\nSlowing down the rate to no more than than 1 a second.\r\n\r\n```java\r\n Scheduler slowSched = new ScheduleWhen(workers -> {\r\n \t// use concatenate to make each worker happen one at a time.\r\n \treturn Completable.concat(workers.map(worker -> {\r\n \t\t// delay the starting of the next worker by 1 second.\r\n \t\treturn worker.delay(1, TimeUnit.SECONDS);\r\n \t}));\r\n }, Schedulers.computation());\r\n```\r\nLimit the amount concurrency two at a time without creating a new fix size thread pool:\r\n\r\n```java\r\n Scheduler limitSched = new ScheduleWhen(workers -> {\r\n \t// use merge max concurrent to two at a time\r\n \treturn Completable.merge(workers, 2);\r\n }, Schedulers.computation());\r\n ```"
p437
sg5
S'Ability to create custom schedulers with behavior based on composing operators.'
p438
sg7
(lp439
S'Feature-Request'
p440
asg10
I4154
sg11
(lp441
S'This test changes its timing pattern when run on one of the merging-customization of this scheduler:\r\n\r\n```java\r\n@Test\r\npublic void fastTasks() {\r\n    final Scheduler sched = new ScheduleWhen(new Func1<Observable<Completable>, Completable>() {\r\n        @Override\r\n        public Completable call(Observable<Completable> workers) {\r\n            return Completable.merge(workers, 2);\r\n        }\r\n    }, Schedulers.computation());\r\n    \r\n    \r\n    Observable.range(1, 4).flatMap(new Func1<Integer, Observable<String>>() {\r\n        @Override\r\n        public Observable<String> call(final Integer v) {\r\n            return Observable.interval(500, TimeUnit.MILLISECONDS, sched)\r\n            .take(10).map(new Func1<Long, String>() {\r\n                @Override\r\n                public String call(Long u) {\r\n                    return v + " refresh " + u;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    )\r\n    .timeInterval()\r\n    .toBlocking()\r\n    .subscribe(new Action1<TimeInterval<String>>() {\r\n        @Override\r\n        public void call(TimeInterval<String> v) {\r\n            System.out.println(v);\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nWhat I get is that for the first 5 seconds, I get `1 refresh x` and `2 refresh x` in 500 ms intervals, but after thet, all the `3 refresh x` and `4 refresh x` gets printed instantly.\r\n\r\n```\r\nTimeInterval [intervalInMilliseconds=515, value=2 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 0]\r\nTimeInterval [intervalInMilliseconds=500, value=1 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 1]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 2]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 3]\r\nTimeInterval [intervalInMilliseconds=485, value=2 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 4]\r\nTimeInterval [intervalInMilliseconds=516, value=2 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 5]\r\nTimeInterval [intervalInMilliseconds=486, value=1 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 6]\r\nTimeInterval [intervalInMilliseconds=500, value=1 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 7]\r\nTimeInterval [intervalInMilliseconds=499, value=2 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 8]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 9]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 9]\r\nTimeInterval [intervalInMilliseconds=516, value=3 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 9]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 9]\r\n```\r\n\r\nIf I understand the purpose of this scheduler, especially with the `merge(workers, 2)` case, you want to limit the number of concurrently running tasks. However, the implementation blocks out further workers from executing anything until a previous worker is released. \r\n\r\nFor example, given a service that accepts 2 connections per client, if I have to periodically execute 3 or more tasks against this service (via the `interval()` above), only the first two would execute periodically. In addition, the other 2 would slowly pile up tasks in the internal queue and if the associated sequence uses timeout, this will make it timeout.\r\n\r\nI think the solution is to use a fixed thread pool instead: it limits the number of concurrent tasks while allowing all workers to make progress.\r\n\r\nMy second reservation is that since the `ScheduleWhen` is a self-contained class (unlike operators that need a method in `Observable`) this can live in any external library (just like `AndroidSchedulers`).'
p442
aS"This isn't intended for long running Observables. Your example is a pathological case. Rather than scheduling on the outer timer if flatMap and schedule on the inner Observables it would not block and all three would be able to run.\r\n\r\nThere are many was to misuse this but if used in a controlled setting of a service library it can be use to protect service from bursts of traffic. \r\n\r\nThe main point is to be able to reuse an existing scheduler with some additional behavior rather than having to create new thread pools to enforce rate limits."
p443
aS"To address your concern I've changed the API from `Ob<Comp> -> Comp` to `Ob<Ob<Comp>> -> Comp`. This is a more direct mapping of Scheduler of Workers of Actions that give the user complete control how and when the actions are done. In the example above the actions from all workers can be merged into one stream of actions and then the merge max (N) concurrent could be applied to the actions to better simulate running on a N threads.\r\n"
p444
aS'## [Current coverage][cc-pull] is **83.12%**\n> Merging [#4154][cc-pull] into [1.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4154   diff @@\n==========================================\n  Files           261        262     +1   \n  Lines         16918      16986    +68   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2562     +7   \n==========================================\n+ Hits          14062      14119    +57   \n- Misses         1982       1988     +6   \n- Partials        874        879     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [97c4e53...f3777df][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/97c4e537867efd4c9411c14bda0a40de76e83218...f3777dfd04ba1817a2923648346caa1f09aa3f28?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4154?src=pr'
p445
aS"@akarnokd I think I've addressed all the concerns regrading this PR. What can I do help get this experiment merged?"
p446
aS"Oh, sorry; was busy with something else.\r\n\r\nOkay, let's continue with the experiment. :+1:\r\n\r\n/cc @zsxwing @artem-zinnatullin "
p447
aS"Let's wait for at least one of them."
p448
aS"I don't know how I would draw the marble diagram for this one."
p449
aS'@abersnaze If all feedback is resolved, feel free to merge this PR and if you want, post any short description of this addition beyond the ref to this PR.'
p450
aS'Thanks for the feed back'
p451
aS"As far as I'm concerned the feedback cycle hadn't really finished on this. I'm hoping that api changes etc are not out of scope if I raise an issue."
p452
aS'My comment about the use of `subscribe()` in the constructor was not addressed. Should be `unsafeSubscribe()` I think.'
p453
aS"@davidmoten If you have further concerns, don't hesitate to open an issue or post a PR. The file needs some javadoc tidying up anyway..."
p454
asg14
S'abersnaze:sched'
p455
sbsI4157
(iPull
Pull
p456
(dp457
g3
S'This PR enables fusion-consumers such as `observeOn`, `flatMap`, `zip`, `concatMap`; makes `UnicastProcessor` async-fuseable (used by `window`); fixes a few hidden issues with operators and has convenience renames of `SubscriptionHelper.validateX`. In addition, it features the new `FlowableFlattenIterable` used by `flatMapIterable` and `concatMapIterable`.'
p458
sg5
S'2.x: Enable fusion-consumers'
p459
sg7
(lp460
S'Enhancement'
p461
asg10
I4157
sg11
(lp462
S'## [Current coverage][cc-pull] is **68.29%**\n> Merging [#4157][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.84%**\n\n```diff\n@@                2.x      #4157   diff @@\n==========================================\n  Files           388        390     +2   \n  Lines         27387      28242   +855   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4393       4569   +176   \n==========================================\n+ Hits          18934      19287   +353   \n- Misses         6571       7016   +445   \n- Partials       1882       1939    +57   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4dbd735...474a010][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4dbd7351c9b514e2661930c2a9dea222cd91748e...474a01063f235ed00c5b73b4b0aa0f8fe2e24611\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4157?src=pr'
p463
aS"Wow this was dense! I tried my best to parse a lot of the queue/drain changes, but I definitely didn't get a full mental model going of each one since there were so many. I started pattern matching and just checking for more simple issues. I have confidence in the present and future tests for these as well, which helps.\r\n\r\n:+1:"
p464
aS'Thanks @JakeWharton. \r\n\r\nIt is really simple concept: instead of creating a queue, operators reuse the queue-view of their upstream, which could be queue views themselves. The drain algorithms hardly change except when `request()` has to be suppressed. The difficulty is the need to know **all** operator internals over the entire library.'
p465
aS"> The difficulty is the need to know all operator internals over the entire library.\r\n\r\nI haven't had a chance to go through your changes in any detail. Just have a question. What will this mean for `lift`, `extend`, and general extensibility use cases?"
p466
aS'@stealthcode `lift`, `to` and `compose` are still usable. There is no `extend` in 2.x because the 1.x is just simply too restrictive on its function-input; `to(Function<Flowable, X>)` gives access to all operators and you can have your favorite leave-transform function with it:\r\n\r\n```java\r\nFunction<Flowable<Integer>, Integer> conv = f -> f.map(a -> a + 1).toBlocking().last();\r\n\r\nSystem.out.println(source.to(conv))\r\n```\r\n\r\nImplementing operators is now generally harder because the lifecycle of Reactive-Streams is different. Operator-fusion adds an extra requirement that you should not forward an upstream `Subscription`:\r\n\r\n```java\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n         child.onSubscribe(s); // <- not allowed, may break the operator or fusion around it\r\n    }\r\n```'
p467
aS"It looks like `to` offers at least all of the functionality of `extend`. Clearly as there is no `OnSubscribe` the same API isn't possible. \r\n\r\n> you should not forward an upstream `Subscription`\r\n\r\nIn 2.x the disposable model forced changes in this area but not such that subscriptions couldn't be forwarded down the chain. AFAIK this was a common optimization pattern in 1.x for some operators. @abersnaze and I talked and I think my understanding is that a fuseable operator will pass along a subscription but a non-fusable operator will create it's own, is that correct?"
p468
aS"> In 2.x the disposable model forced changes in this area but not such that subscriptions couldn't be forwarded down the chain. \r\n\r\nThat was true before operator-fusion came into picture.\r\n\r\n> AFAIK this was a common optimization pattern in 1.x for some operators.\r\n\r\nThe architecture change induced by Reactive-Streams and operator-fusion added a lot of optimizations, surpassing those in 1.x.\r\n\r\n> @abersnaze and I talked and I think my understanding is that a fuseable operator will pass along a subscription but a non-fusable operator will create it's own, is that correct?\r\n\r\nNo, every intermediate `Subscriber` implements `Subscription` should pass itself along, at least. If the operator doesn't want to support fusion, that's the minimum.\r\n\r\n```java\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n         if (SubscriptionHelper.validate(this.s, s)) {\r\n             this.s = s;\r\n             child.onSubscribe(this);\r\n         }\r\n    }\r\n\r\n    @Override\r\n    public void request(long n) {\r\n         s.request(n);\r\n    }\r\n\r\n    @Override\r\n    public void cancel() {\r\n         s.cancel();\r\n    }\r\n```\r\n\r\nOtherwise, if an operator would pass the `Subscription` along, it could cut itself out from the dataflow as the `QueueSubscription.poll` skips over it."
p469
aS'@artem-zinnatullin I guess you want to review this as well?'
p470
aS'@akarnokd yup, looking'
p471
aS'Thanks @artem-zinnatullin . \r\n\r\nMost of the time, I start small but then a change activates cascading effects: fixing a base structure exposes a bug in another operator that has to be updated.'
p472
asg14
S'akarnokd:OpFusion701_1'
p473
sbsI4160
(iPull
Pull
p474
(dp475
g3
S'This short PR enables operator fusion on `groupBy` and on the `doOnNext`, `doOnError`, `doOnComplete` and `doOnEach` operators.\r\n\r\nIn addition, it fixes small mistakes in `map` and `filter` and adds a method to `TestSubscriber` to print better fusion-assertion failure message.'
p476
sg5
S'2.x: enable op-fusion on GroupBy, doOnX, fix mistakes in map and filter'
p477
sg7
(lp478
S'Enhancement'
p479
asg10
I4160
sg11
(lp480
S'## [Current coverage][cc-pull] is **68.20%**\n> Merging [#4160][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4160   diff @@\n==========================================\n  Files           390        390          \n  Lines         28242      28410   +168   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4569       4607    +38   \n==========================================\n+ Hits          19257      19377   +120   \n- Misses         7043       7074    +31   \n- Partials       1942       1959    +17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [af3107c...b399afc][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/af3107cd4c0c848d6956a1a1082cd0b3180ac5d4...b399afcfb8b21e9f06744cf743654079decd0c91\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4160?src=pr'
p481
aS'Thanks @artem-zinnatullin! @JakeWharton or anybody else wants to review this?'
p482
aS':+1:'
p483
asg14
S'akarnokd:GroupByFusion'
p484
sbsI4165
(iPull
Pull
p485
(dp486
g3
S'This was due to bad rewrite of field updater to atomic reference.'
p487
sg5
S'2.x: fix wrong reference check in FlattenIterable'
p488
sg7
(lp489
S'Bug'
p490
asg10
I4165
sg11
(lp491
sg14
S'akarnokd:FlattenIterableFix'
p492
sbsI4166
(iPull
Pull
p493
(dp494
g3
S'This updates the perf classes a bit and adds a blocking benchmark.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16580974/5ff08e54-42a7-11e6-889e-cfbb5c0bdecb.png)\r\n'
p495
sg5
S'2.x: measure overhead of toBlocking() first and last'
p496
sg7
(lp497
S'Performance'
p498
asg10
I4166
sg11
(lp499
S'## [Current coverage][cc-pull] is **68.45%**\n> Merging [#4166][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4166   diff @@\n==========================================\n  Files           390        390          \n  Lines         28411      28411          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4607       4607          \n==========================================\n+ Hits          19441      19449     +8   \n+ Misses         6988       6983     -5   \n+ Partials       1982       1979     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4c7e62c...1736e5d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4c7e62cfe92990ba5fd8d954cbd4364f291b986e...1736e5d1f24e2bd12c54e5998bdd10cab7fafad4\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4166?src=pr'
p500
asg14
S'akarnokd:BlockingFirstLastPerf'
p501
sbsI4167
(iPull
Pull
p502
(dp503
g3
S'Optimize the reception, less allocation, less overhead in general.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16583761/065268fc-42b8-11e6-86a1-4ac91da80c97.png)\r\n'
p504
sg5
S'2.x: reduce overhead of blocking first/last/single'
p505
sg7
(lp506
S'Performance'
p507
asg10
I4167
sg11
(lp508
S'## [Current coverage][cc-pull] is **68.40%**\n> Merging [#4167][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4167   diff @@\n==========================================\n  Files           390        396     +6   \n  Lines         28411      28395    -16   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4607       4612     +5   \n==========================================\n- Hits          19457      19425    -32   \n- Misses         6962       6987    +25   \n+ Partials       1992       1983     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [868dc0f...fff5ad0][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/868dc0fedb7564601227c96e1954a053ae8345ba...fff5ad02414570103b1bc56f2c2801caca8fcd04\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4167?src=pr'
p509
aS'lgtm :+1:'
p510
asg14
S'akarnokd:BlockingFirstLastImprovement'
p511
sbsI4169
(iPull
Pull
p512
(dp513
g3
S"We've recently faced `MissingBackpressureException` which actually was not related to backpressure. \r\n\r\nAfter investigation it appeared that we were writing to `PublishSubject` from multiple threads which broke queue in `observeOn`: `queue.offer()` returned false not because it reached capacity limit but because another thread already written to exact same index.\r\n\r\nThis PR throws `IllegalStateException` instead of `MissingBackpressureException` in case if it has detected concurrent data emission + suggests user to serialize data emission to avoid this problem."
p514
sg5
S'1.x: Detect concurrent emission in observeOn and throw ISE instead of MBE'
p515
sg7
(lp516
sg10
I4169
sg11
(lp517
S"No. :-1:. Don't change `observeOn`. Your detection is fragile anyway."
p518
aS'That sounds reasonable, but would require all places that use Spsc queues to be updated; plus it could be still totally misleading.'
p519
aS'This is an issue with the use of the library. There is the `Subject.toSerialized()` that allows concurrent calls to its front.'
p520
aS'Sure, I\'ve fixed it with serializing the subject. Reason why I posted it is to show that `MBE` hides the actual error and in our case we didn\'t even crash the app (I\'d prefer that) and "handled" it as backpressure.\r\n\r\nI can add another way to detect concurrent emission to `observeOn`, but it\'ll add a little bit overhead and I guess @akarnokd won\'t be happy about that so I\'m closing this for now.'
p521
aS"I think the problem is that queuing operator (like observeOn) doesn't know if the chain supplying data supports back pressure or not. If is does then it is a concurrency issue if not then it's a back pressure issue.\r\n\r\nIn 1.x how about adding a 'boolean supportsBackpressure' to Observable and an overload to create() to allow setting it to true otherwise it's false?"
p522
aS"I don't think adding those to `Observable` is a good idea; people will happily lie about their `OnSubscribe`'s backpressure support.\r\n\r\nInstead, maybe it's time `PublishSubject`, `BehaviorSubject`, `timer()` and `interval()` (anybody else?) to start request tracking and signal `MissingBackpressureException` themselves and not rely on some queueing operator to fail later on.\r\n\r\nIn addition, depending on how severe the misuse of `PublishSubject` is, I'm willing to force serialization on its input side. Basically, I'd copy `PublishSubject` to `DirectSubject` or something for those who want to keep the overhead low and then retrofit `PublishSubject` to serialize its inputs."
p523
asg14
S'artem-zinnatullin:az/1.x/concurrent-observeOn'
p524
sbsI4172
(iPull
Pull
p525
(dp526
g3
S'This PR adds or updates places where the `Backpressure:` description was missing or outdated.\r\n\r\nUnfortunately, GitHub has a hard limit on diff size per file so reviewers have to use their own local diff.'
p527
sg5
S'1.x: add missing backpressure descriptions and update old ones'
p528
sg7
(lp529
S'Documentation'
p530
asg10
I4172
sg11
(lp531
S'"...it &lt;t&gt;may&lt;/i&gt; lead to IllegalStateException being throw..."\r\n=> "...it **&lt;em&gt;**may**&lt;/em&gt;** lead to IllegalStateException being **thrown**..."\r\n\r\n...but better yet would be to avoid the passive voice and indicate what entity throws the exception, e.g. "If any of the source Observables violate this, XXX may throw an IllegalStateException when the source Observable completes."'
p532
aS'"...no backpressue applied to them..." => "...no **backpressure** applied to them..."'
p533
aS'"The other Observables supplied by the function is consumed..." => "The other Observables supplied by the function **are** consumed..."'
p534
aS"I notice that some of the `<dd>`s aren't being closed with `</dd>` also."
p535
aS'typo: "...apply any of the `onBackpressureXXX` opertors &lt;b&gt;before&lt;/b&gt; applying `observeOn` itself..." => "...apply any of the `onBackpressureXXX` **operators** **&lt;strong&gt;**before**&lt;/strong&gt;** applying `observeOn` itself..."'
p536
aS'For operators that both accept and return an Observable (most of them), I find the phrase "this Observable" in the documentation to be ambiguous: does it mean the Observable about to be operated on, or the Observable that results from the operation?  I\'d recommend replacing it with "the source Observable" or "the resulting Observable" or something like that, depending on which one you\'re talking about.'
p537
aS'typo: "...the output\'s backpressure behavior is derermined by..." => "...the output\'s backpressure behavior is **determined** by..."'
p538
aS'```\r\n+     *  <dt><b>Backpressure:</b></dt>\r\n+     *  <dd>The operator honors backpressure from downstream and consumes this {@code Observable} in an\r\n+     *  unbounded manner (i.e., no backpressure is applied to it).</dd>\r\n+     *  behavior.</dd>\r\n```\r\nThat last line seems to be extraneous.'
p539
aS"Some of those typos appear in multiple places in the file.\r\n\r\nIt's great to see these sections getting filled out and made more precise!"
p540
aS"Thanks for the review. I've updated the text."
p541
aS'## [Current coverage][cc-pull] is **81.46%**\n> Merging [#4172][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4172   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n+ Hits          13697      13705     +8   \n+ Misses         2226       2225     -1   \n+ Partials        900        893     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cec8915...4428b29][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cec891510bb4cdb379d11691eaf004289a50d044...4428b29ab4d49f7a1805a184f6b36b23f42104a5?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4172?src=pr'
p542
aS"I'm merging this so work touching `Observable.java` can commence. Anybody let me know if you find something else (or better yet, post a PR)."
p543
aS'Thank you for this @akarnokd!'
p544
aS'Beaut!'
p545
asg14
S'akarnokd:ObservableJavadoc707'
p546
sbsI4173
(iPull
Pull
p547
(dp548
g3
S"This PR adds a customization point to  `RxJavaHooks` that let's one create different `ScheduledExecutorService` instances for the `GenericScheduledExecutorService` utility.\r\n\r\nTo apply the hook (or remove it), one has to restart the `Schedulers` via `shutdown()` and then `start()`. Note that the latter had to be made public as well.\r\n\r\nRelated #4171."
p549
sg5
S'1.x: allow customizing GenericScheduledExecutorService via RxJavaHooks'
p550
sg7
(lp551
S'Enhancement'
p552
asg10
I4173
sg11
(lp553
S'## [Current coverage][cc-pull] is **84.08%**\n> Merging [#4173][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.51%**\n\n```diff\n@@                1.x      #4173   diff @@\n==========================================\n  Files           262        263     +1   \n  Lines         17048      17057     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2574       2574          \n==========================================\n+ Hits          14247      14342    +95   \n+ Misses         1938       1872    -66   \n+ Partials        863        843    -20   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cf154b1...4064799][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cf154b1a07dce719cf36d2977e81c06b5cd3cd8c...4064799704efe05bdca3c42585414c0197aadaf3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4173?src=pr'
p554
aS'/cc @JakeWharton @artem-zinnatullin @zsxwing @stevegury '
p555
aS"I'll have to redo this once #4182 is merged so please don't merge yet."
p556
aS'Rebased.'
p557
asg14
S'akarnokd:RxJavaHookGenericSvc'
p558
sbsI4174
(iPull
Pull
p559
(dp560
g3
S'Adds benchmarks to measure the overhead of `reduce()`, `takeLast(1)` and `collect()`.\r\n\r\nResults (i7 4770K, Windows 7 x64, Java 8u92) ops/s, larger is better.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16664818/2f0235f4-4482-11e6-8844-8e294bbcabd9.png)\r\n'
p561
sg5
S'1.x: benchmark reduce and takeLast(1)'
p562
sg7
(lp563
S'Performance'
p564
asg10
I4174
sg11
(lp565
S'## [Current coverage][cc-pull] is **81.41%**\n> Merging [#4174][cc-pull] into [1.x][cc-base-branch] will not change coverage\n\n```diff\n@@                1.x      #4174   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n  Hits          13697      13697          \n+ Misses         2226       2225     -1   \n- Partials        900        901     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cec8915...449f365][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cec891510bb4cdb379d11691eaf004289a50d044...449f365f1e4fa219006db506894ae791e79305ba?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4174?src=pr'
p566
asg14
S'akarnokd:DeferredScalarOpsPerf'
p567
sbsI4176
(iPull
Pull
p568
(dp569
g3
S'This PR reduces the overhead with `collect`, `reduce` and `takeLast` and introduces the `DeferredScalarSubscriber` to support similar unbounded-in single-out scenarios.\r\n\r\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16669829/ba5541cc-4497-11e6-9827-097ac686bcf2.png)\r\n\r\nRelative to each other: (each practically returning the very last value)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16669793/a35183fa-4497-11e6-9a93-36f7effe7e3b.png)\r\n'
p570
sg5
S'1.x: optimize collect, reduce and takeLast(1)'
p571
sg7
(lp572
S'Performance'
p573
asg10
I4176
sg11
(lp574
S'Updated header year, @JakeWharton .'
p575
aS'lgtm :+1:'
p576
aS'## [Current coverage][cc-pull] is **81.42%**\n> Merging [#4176][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4176   diff @@\n==========================================\n  Files           257        261     +4   \n  Lines         16823      16921    +98   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2554     +4   \n==========================================\n+ Hits          13701      13778    +77   \n- Misses         2224       2247    +23   \n+ Partials        898        896     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [20ef857...3da558a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/20ef8579a0d7c9bafb7bc4dcd127ddb0476df883...3da558a147d4a8cb60628731e218036fce4bead0?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4176?src=pr'
p577
aS'/cc @artem-zinnatullin was it you that wanted more [unit test coverage](https://codecov.io/gh/ReactiveX/RxJava/src/eb9d9b3aab160e56086b2465109f664d07dc4624/src/main/java/rx/internal/operators/DeferredScalarSubscriber.java) for the deferred-scalar algorithm?'
p578
asg14
S'akarnokd:DeferredScalarOpt'
p579
sbsI4178
(iPull
Pull
p580
(dp581
g3
S"This PR improves the coverage of `rx.Observable` methods plus \r\n\r\n  - fixes a javadoc issue \r\n  - fixes an enum-coverage anomaly in Notification (now it is simply biased towards onNext signals)\r\n  - removes `equals()` from `TestException` as it caused anomalies with deduplication inside `CompositeException`\r\n  - fixes 3 PMD rule violations (2 suppressed, 1 corrected)\r\n  - `timestamp` and `timeInterval` now use the `Schedulers.computation()` as the source for the current time instead of `Schedulers.immediate()` which can't be properly hooked. By default, they both return `System.currentTimeMillis()`."
p582
sg5
S'1.x: improve coverage of rx.Observable methods'
p583
sg7
(lp584
S'Coverage'
p585
aS'Test'
p586
asg10
I4178
sg11
(lp587
S'## [Current coverage][cc-pull] is **83.04%**\n> Merging [#4178][cc-pull] into [1.x][cc-base-branch] will increase coverage by **1.64%**\n\n```diff\n@@                1.x      #4178   diff @@\n==========================================\n  Files           261        261          \n  Lines         16921      16918     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2555     +1   \n==========================================\n+ Hits          13773      14049   +276   \n+ Misses         2251       1993   -258   \n+ Partials        897        876    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [978825e...e594d06][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/978825eafa7e99c4817640c47161dd83d1162d91...e594d068b78e080392b24c2ddd9640a8fafb8793?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4178?src=pr'
p588
aS'lgtm :+1:'
p589
aS'Updated.'
p590
aS"Thanks for the review. I'm merging this as it may contain the cure for the memory-kill on Travis. Let me know if there are tests that need more tidying up."
p591
asg14
S'akarnokd:Coverage708'
p592
sbsI4179
(iPull
Pull
p593
(dp594
g3
S"This PR adds a new source operator: `fromAsync()` that let's bridge the callback-style world with the reactive world by providing a push surface and offers options to handle backpressure."
p595
sg5
S'1.x: new fromAsync to bridge the callback world with the reactive'
p596
sg7
(lp597
S'Enhancement'
p598
asg10
I4179
sg11
(lp599
S'These errors, i.e., Travis running out of memory and killing tests, gets annoying...'
p600
aS'Updated.'
p601
aS"LGTM :+1: !\r\n\r\nI'm surprised you couldn't reuse more of the existing infrastructure for the various backpressure modes here and instead need to have a full implementation of the whole queue/drain stuff."
p602
aS'The codebase spans over several years now and there is no current "best toolset" for building operators. Besides, this inline saves allocation and overhead from applying other operators.'
p603
aS'/cc @stevegury @zsxwing as this is a new operator proposed to the public API'
p604
aS"@JakeWharton how eager are you about this. I'd really love to merge all remaining PRs so 1.1.7 is as complete API-vise as possible. Otherwise, we may have to wait till 1.1.8 and 1.2 is also delayed."
p605
aS"I would, of course, prefer that it made it. Releases are few and far between here so missing the boat might mean 3 months before it sees the light of day.\r\n\r\nThat said, if no one from Netflix is available to review the API and it's the only thing blocking 1.1.7 then I'm fine with it missing the boat."
p606
aS'I see low risk as this is a completely new operator.'
p607
aS'I wonder should this method be used instead of `create` in cases like RxBinding present?'
p608
asg14
S'akarnokd:FromAsync'
p609
sbsI4180
(iPull
Pull
p610
(dp611
g3
S"It appears that since we added jacoco to the build, it fails sometimes with error 137 which is the code for the system killing the JVM for running out of memory. It is likely the coverage data plus some test's excessive memory use (I don't know which ones) try to go above the current 2GB limit.\r\n\r\nThis is an experiment."
p612
sg5
S'1.x: change test heap size to avoid 137'
p613
sg7
(lp614
S'Test-Failures'
p615
asg10
I4180
sg11
(lp616
S'## [Current coverage][cc-pull] is **83.17%**\n> Merging [#4180][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                1.x      #4180   diff @@\n==========================================\n  Files           261        261          \n  Lines         16918      16918          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2555          \n==========================================\n+ Hits          14062      14071     +9   \n+ Misses         1982       1969    -13   \n- Partials        874        878     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [97c4e53...9129b99][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/97c4e537867efd4c9411c14bda0a40de76e83218...9129b99d381b9c3e86bf2bf37ffe16f263ba4aca?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4180?src=pr'
p617
aS'I will rerun this in 8 hours to see how it behaves then (different travis load).'
p618
asg14
S'akarnokd:Test3GiB'
p619
sbsI4181
(iPull
Pull
p620
(dp621
g3
S'The problem with deprecated API is that it pulls down the coverage percentage.'
p622
sg5
S'1.x: increase Coverage of some classes'
p623
sg7
(lp624
S'Coverage'
p625
aS'Test'
p626
asg10
I4181
sg11
(lp627
S'## [Current coverage][cc-pull] is **83.59%**\n> Merging [#4181][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.53%**\n\n```diff\n@@                1.x      #4181   diff @@\n==========================================\n  Files           261        261          \n  Lines         16918      16913     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2553     -2   \n==========================================\n+ Hits          14053      14139    +86   \n+ Misses         1985       1924    -61   \n+ Partials        880        850    -30   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1354c34...b415345][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1354c3483a56c8a58f29956a13b3821111bf1bf8...b415345664080f43e0e0d41ae8c80d63daa16080?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4181?src=pr'
p628
asg14
S'akarnokd:Coverage709'
p629
sbsI4182
(iPull
Pull
p630
(dp631
g3
S"These PR adds the remaining hooks which weren't even tested with the original RxJavaPlugins plus a full coverage of the RxJavaHooks itself.\r\n\r\nThis is a mandatory addition and 1.1.7 can't be released without it (i.e., with an incomplete RxJavaHooks that is)."
p632
sg5
S'1.x: add missing RxJavaHooks options, fix bugs'
p633
sg7
(lp634
S'Enhancement'
p635
asg10
I4182
sg11
(lp636
S'Lgtm :+1:'
p637
aS"Thanks @JakeWharton . Travis CI doesn't execute the build for like 30 minutes now..."
p638
asg14
S'akarnokd:RxJavaHooksAddMissing'
p639
sbsI4183
(iPull
Pull
p640
(dp641
g3
S"By default, Travis runs `gradle assemble` and if it fails, there seems to be no way to specify `--stacktrace` for it other than disabling it entirely. The `buildViaTravis.sh` does a full build anyway.\r\n\r\nI'm posting this as Nebula fails in the assembly phase for some reason but by default, nothing else is printed."
p642
sg5
S'1.x: no need to run gradle assembe by travis'
p643
sg7
(lp644
S'Build'
p645
asg10
I4183
sg11
(lp646
S"lgtm :+1:\r\n\r\nTheir idea is to do full compilation of all modules before running tests, but in a single-module repo it doesn't make much sense anyway."
p647
aS"```\r\norg.eclipse.jgit.errors.MissingObjectException: Missing commit 4e5f6aae88a0993d528077dce3df19c630d825d0\r\n```\r\n\r\n[This](https://netbeans.org/bugzilla/show_bug.cgi?id=257422) says the stash is corrupt; I'm assuming the cache we use for building could be corrupt after today's massive outage."
p648
aS'Hmm, looks like [limiting the clone](https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth) depth went past that odd commit number (which is available here on GitHub).'
p649
aS'Now we are killed with out of memory - probably due to the container-backlog.'
p650
asg14
S'akarnokd:NoDefaultTravisAssemble'
p651
sbsI4184
(iPull
Pull
p652
(dp653
g3
S'Applying #4149 to CHANGES.md'
p654
sg5
S'Release 1.1.7 changes.md update'
p655
sg7
(lp656
S'Information'
p657
asg10
I4184
sg11
(lp658
S'## [Current coverage][cc-pull] is **84.17%**\n> Merging [#4184][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.12%**\n\n```diff\n@@                1.x      #4184   diff @@\n==========================================\n  Files           262        265     +3   \n  Lines         17043      17281   +238   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2572       2617    +45   \n==========================================\n+ Hits          14325      14546   +221   \n- Misses         1876       1886    +10   \n- Partials        842        849     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b9af588...da19c27][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b9af588a2cf75d57e85c4f8677943eedbb03f03c...da19c277df0b85f1a873c601aa290e245b4fadde?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4184?src=pr'
p659
asg14
S'akarnokd:Release117changes'
p660
sbsI4187
(iPull
Pull
p661
(dp662
g3
S"Plus, this should also fix the snapshot versions which were broken (they are with 0.0.1-SNAPSHOT on bintray) because of yesterday's Nebula plugin problems."
p663
sg5
S'Move status icons to top, add maven version badge.'
p664
sg7
(lp665
S'Documentation'
p666
asg10
I4187
sg11
(lp667
S'Looks like the versioning works again: https://travis-ci.org/ReactiveX/RxJava/builds/143695889#L157'
p668
asg14
S'ReactiveX:akarnokd-patch-1'
p669
sbsI4188
(iPull
Pull
p670
(dp671
g3
S'I still forget about these sometimes.'
p672
sg5
S'1.x: add missing headers, add SuppressWarnings'
p673
sg7
(lp674
S'Cleanup'
p675
asg10
I4188
sg11
(lp676
S'## [Current coverage][cc-pull] is **84.20%**\n> Merging [#4188][cc-pull] into [1.x][cc-base-branch] will not change coverage\n\n```diff\n@@                1.x      #4188   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17281          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n  Hits          14552      14552          \n+ Misses         1883       1882     -1   \n- Partials        846        847     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [76182a7...896a735][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/76182a7e4d939b7d83b02e93abe36ec7d2c16788...896a735e4ccb4799f6edb9f38deef743d53c858a?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4188?src=pr'
p677
asg14
S'akarnokd:HeadersAndDocFix'
p678
sbsI4189
(iPull
Pull
p679
(dp680
g3
S"I've extracted the javadoc.jar from the release into a subdir 1.1.7 and replaced the root files as well.\r\n\r\n/cc @DavidMGross "
p681
sg5
S'Update 1.1.7 javadoc files'
p682
sg7
(lp683
S'Documentation'
p684
asg10
I4189
sg11
(lp685
sg14
S'ReactiveX:Javadoc1.1.7'
p686
sbsI4190
(iPull
Pull
p687
(dp688
g3
S'Started a syncing process between 1.x and 2.x operators (based on [this diff](https://gist.github.com/akarnokd/4a391527e099412cad87d3dffbfef762)). The first set is the addition of the eager version of `concat` and `concatMap`. In addition, all of them get a `XDelayError` overloads as well.'
p689
sg5
S'2.x: implement concat(Map)Eager(DelayError) and expose concat(Map)DelayError overload'
p690
sg7
(lp691
S'Enhancement'
p692
asg10
I4190
sg11
(lp693
S'## [Current coverage][cc-pull] is **68.21%**\n> Merging [#4190][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.16%**\n\n```diff\n@@                2.x      #4190   diff @@\n==========================================\n  Files           396        402     +6   \n  Lines         28395      28898   +503   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4612       4687    +75   \n==========================================\n+ Hits          19419      19714   +295   \n- Misses         6981       7183   +202   \n- Partials       1995       2001     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [7a5320f...2bf22b2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7a5320f85c7000469e3b997f5810573a3967f0f9...2bf22b287c78c49709db098aea2dcd4ca858a5a1?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4190?src=pr'
p694
aS'Also I\'ve expanded Flowable with a `test()` method. Should give a nice answer to the question "How do you test a Flowable?".'
p695
aS'Updated the `if`s'
p696
aS"I'm thinking if there is a way to test such [`if (!cancelled)`](https://github.com/ReactiveX/RxJava/pull/4190/commits/2bf22b287c78c49709db098aea2dcd4ca858a5a1) errors, java debuggers allows suspending a Thread on a particular breakpoint and allow other threads to run at the same time, maybe such mechanism will allow us to simulate and test concurrent access in particular parts of code (drain loops and so on). \r\n\r\nSomething like:\r\n\r\n```java\r\n@Test\r\npublic void concurrentCancel() {\r\n  TestThread thread1 = testThread({\r\n     disposable = Flowable.just(1).concatMap(v -> Flowable.just(2)).subscribe();\r\n  });\r\n\r\n  TestThread thread2 = testThread({\r\n    disposable.dispose();\r\n  });\r\n\r\n  TestThreads.builder()\r\n    .start(thread1) // One or multiple.\r\n    .thenSuspend(thread1, FlowableConcatMapEager.class, 128) // Thread; Source class; Line.\r\n    .thenStart(thread2)\r\n    .thenResume(thread1)\r\n    .run(); // Run and wait all test threads to complete.\r\n\r\n  // Assert behavior.\r\n}\r\n```\r\n\r\nJust thoughts"
p697
aS':+1: for PR'
p698
aS'Thanks @artem-zinnatullin !'
p699
asg14
S'akarnokd:ConcatEagerAndDelayError'
p700
sbsI4191
(iPull
Pull
p701
(dp702
g3
g53
sg5
S'Fix grammar error in RxJavaHooks javadocs'
p703
sg7
(lp704
S'Documentation'
p705
asg10
I4191
sg11
(lp706
S'## [Current coverage][cc-pull] is **84.23%**\n> Merging [#4191][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4191   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17281          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n+ Hits          14552      14557     +5   \n+ Misses         1884       1878     -6   \n- Partials        845        846     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [6b72d8a...b8cc33e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/6b72d8ac246e2c071e6f7c45c946f6886c3a5c6b...b8cc33e6163daf6f8726fa9f60ad3e92b5274fc1?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4191?src=pr'
p707
aS'Thanks!'
p708
asg14
S'bryant1410:patch-3'
p709
sbsI4192
(iPull
Pull
p710
(dp711
g3
S'This PR adds a few operators and overloads from 1.x\r\n\r\n  - `fromAsync`\r\n  - `just` - 10 arguments\r\n  - `distinctUntilChanged(BiPredicate<? super T, ? super T> comparer)`\r\n  - `skip` timed - default scheduler\r\n  - `take` timed - default scheduler\r\n  - `toCompletable`\r\n\r\nIn addition, this PR fixes the API of TestSubscriber by making the initial value primitive `long` and having 0 as no initial request instead of the trickery with `null`.'
p712
sg5
S'2.x: +fromAsync, distinctUC, skip, take overloads, fix TestSubscriber API'
p713
sg7
(lp714
S'Cleanup'
p715
aS'Enhancement'
p716
asg10
I4192
sg11
(lp717
S'## [Current coverage][cc-pull] is **68.36%**\n> Merging [#4192][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.12%**\n\n```diff\n@@                2.x      #4192   diff @@\n==========================================\n  Files           402        405     +3   \n  Lines         28898      29230   +332   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4687       4749    +62   \n==========================================\n+ Hits          19720      19984   +264   \n- Misses         7180       7209    +29   \n- Partials       1998       2037    +39   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [fca5a8e...a751617][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/fca5a8e1517e007cc41fe022f9572973e8470e21...a75161745b979fbf8725d9bc616d8de3d93ebb84?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4192?src=pr'
p718
aS'/cc @artem-zinnatullin @JakeWharton \r\n\r\nIf this could me merged soon, I could start on syncing the unit tests in which there are [roughly 1500](https://gist.github.com/akarnokd/693866d6b4453ca8c66b866584163e5e) methods to check - some of them are simple relocations. Once done, I have to sync the flowable-observable tests (which have a more symmetric layout luckily).'
p719
aS'@artem-zinnatullin fixing what you discovered so far. Notify me when you are done.\r\n\r\n`BiPredicate` conforms with (and thus conflicts with) Java 8 functional interface naming conventions. Calling it `Pred2` is possible but then `Func1...FuncN` would conflict with RxJava 1 if in the same project.'
p720
aS"> They won't conflict because package names are different,\r\n\r\nSure, but when you type in `Function` then CTRL+SPACE in IDE, you get the Java version and RxJava 2 version. Sometimes you copy-paste a `Function f = ...` and get a squiggly line saying `Function` is not compatible with `Function`."
p721
aS'Thanks @artem-zinnatullin !'
p722
asg14
S'akarnokd:MissingOps712'
p723
sbsI4195
(iPull
Pull
p724
(dp725
g3
S"Don't worry about not all things tested in this PR, anything extra relative to 1.x will be covered after the sync."
p726
sg5
S'2.x: sync unit tests of Completable, add missing features'
p727
sg7
(lp728
S'Enhancement'
p729
aS'Test'
p730
asg10
I4195
sg11
(lp731
S'## [Current coverage][cc-pull] is **68.22%**\n> Merging [#4195][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.14%**\n\n```diff\n@@                2.x      #4195   diff @@\n==========================================\n  Files           405        409     +4   \n  Lines         29230      29450   +220   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4749       4763    +14   \n==========================================\n+ Hits          19984      20093   +109   \n- Misses         7220       7330   +110   \n- Partials       2026       2027     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [458933f...d89813d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/458933f4796c35d74b436c0c133bf79b4d8d411d...d89813d89f937ab73f5727e6dbc765780f699433?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4195?src=pr'
p732
asg14
S'akarnokd:TestSync713_1'
p733
sbsI4204
(iPull
Pull
p734
(dp735
g3
S"  - More unit tests ported;\r\n  - `TestObserver` cleanup and sync with `TestSubscriber`;\r\n  - fix travis to run with Java 7 instead of 8;\r\n  - added AnimalSniffer;\r\n  - cleaned up `combineLatest`, introduced `combineLatestDelayError`;\r\n  - test names are as in 1.x, please don't complain about the `test` prefix in the method names!"
p736
sg5
S'2.x: test sync + cleanup'
p737
sg7
(lp738
S'Enhancement'
p739
aS'Test'
p740
asg10
I4204
sg11
(lp741
S'## [Current coverage][cc-pull] is **68.54%**\n> Merging [#4204][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.32%**\n\n```diff\n@@                2.x      #4204   diff @@\n==========================================\n  Files           409        411     +2   \n  Lines         29450      29486    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4763       4777    +14   \n==========================================\n+ Hits          20092      20211   +119   \n+ Misses         7331       7262    -69   \n+ Partials       2027       2013    -14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [0705001...0be4534][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/0705001df0b52334829b2e4963469533618f14cb...0be45349c1b5c02b14c34c9f36711e37439c232c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4204?src=pr'
p742
aS'Anybody wants to review this?'
p743
aS"I'm merging this so we can progress with other tasks that would affect the same files. I'll address the review feedback in a separate PR if necessary."
p744
asg14
S'akarnokd:TestSync714_1'
p745
sbsI4209
(iPull
Pull
p746
(dp747
g3
S'This PR changes flatmap to make sure there is no element reordering happening on the fast-paths.\r\n\r\nRelated: #4206.'
p748
sg5
S'1.x: merge/flatMap to keep scalar/inner element relative order'
p749
sg7
(lp750
S'Bug'
p751
aS'Enhancement'
p752
asg10
I4209
sg11
(lp753
S'## [Current coverage][cc-pull] is **84.31%**\n> Merging [#4209][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4209   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17291    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2619     +2   \n==========================================\n+ Hits          14558      14579    +21   \n+ Misses         1881       1869    -12   \n- Partials        842        843     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...95daa74][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...95daa741dd56ec24ce6a4ee4ada08b5b0d2133c3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4209?src=pr'
p754
aS"Thanks @akarnokd for quick fix. I haven't reviewed yet but I'm keen to see the issue resolved in a release soon (I also was suprised `flatMap` didn't honour individual observable order). "
p755
aS'reviewed :+1: '
p756
aS'Updated, thanks @davidmoten !'
p757
asg14
S'akarnokd:FlatMapStrictInnerOrder'
p758
sbsI4211
(iPull
Pull
p759
(dp760
g3
S'As discussed in https://github.com/ReactiveX/RxJava/issues/1277#issuecomment-233357354\r\n\r\nThis PR gives a stricter type signature for `combineLatest`, `zip`, `zipArray` and `zipIterable`. It replaces occurrences of `Object` with its generic type `T`. In practice users will not need to type-cast arrays in the combine function anymore.'
p761
sg5
S'2.x: use generic type instead of Object in combineLatest and zip'
p762
sg7
(lp763
S'Enhancement'
p764
asg10
I4211
sg11
(lp765
S'## [Current coverage][cc-pull] is **68.56%**\n> Merging [#4211][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4211   diff @@\n==========================================\n  Files           411        411          \n  Lines         29486      29486          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4777          \n==========================================\n+ Hits          20208      20216     +8   \n+ Misses         7256       7250     -6   \n+ Partials       2022       2020     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [487a0ba...17a249f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/487a0ba52137e13d996ad12fc73bfeabb03c4fb7...17a249f175a4ef27d38769b3d3a30f6b5a23a03c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4211?src=pr'
p766
aS':+1:'
p767
aS':+1: '
p768
aS'Thanks for the contribution.'
p769
asg14
S'bobvanderlinden:pr-generictype'
p770
sbsI4213
(iPull
Pull
p771
(dp772
g3
S'Part of #4212.'
p773
sg5
S'1.x: Do not hide original exception with RxJavaHooks.enableAssemblyTracking()'
p774
sg7
(lp775
sg10
I4213
sg11
(lp776
S'## [Current coverage][cc-pull] is **84.26%**\n> Merging [#4213][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4213   diff @@\n==========================================\n  Files           265        264     -1   \n  Lines         17281      17279     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n+ Hits          14558      14560     +2   \n+ Misses         1881       1876     -5   \n- Partials        842        843     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...09fdee3][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...09fdee3291c073ba16446beeecc77e28db687655?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4213?src=pr'
p777
aS'See #4215 for a less invasive change.'
p778
aS'Closing in favor of #4215.'
p779
asg14
S'artem-zinnatullin:az/1.x/fix-enableAssemblyTracking'
p780
sbsI4215
(iPull
Pull
p781
(dp782
g3
S'Modify the assembly tracking logic to not replace the exception flowing through but to attach the tracking exception to the end of the causal chain (if possible).\r\n\r\nFixes #4212'
p783
sg5
S'1.x: fix assembly tracking replacing original exception'
p784
sg7
(lp785
S'Bug'
p786
asg10
I4215
sg11
(lp787
S'## [Current coverage][cc-pull] is **84.27%**\n> Merging [#4215][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4215   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17305    +24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2624     +7   \n==========================================\n+ Hits          14558      14583    +25   \n+ Misses         1881       1873     -8   \n- Partials        842        849     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...4853282][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...485328223e8de398edda21317ba20c0b1fd2c31c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4215?src=pr'
p788
asg14
S'akarnokd:AssemblyTrackingDontHideException'
p789
sbsI4217
(iPull
Pull
p790
(dp791
g3
S'  - add `groupJoin`, `join`, `onTerminateDetach`\r\n  - fix missing cancellation in `FlowableFlattenIterable`\r\n  - fix `fromIterable` error handling\r\n  - added several unit test methods and classes from 1.x'
p792
sg5
S'2.x: Test sync, +groupJoin, +join, +onTerminateDetach'
p793
sg7
(lp794
S'Enhancement'
p795
asg10
I4217
sg11
(lp796
S'## [Current coverage][cc-pull] is **69.29%**\n> Merging [#4217][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.75%**\n\n```diff\n@@                2.x      #4217   diff @@\n==========================================\n  Files           411        417     +6   \n  Lines         29486      30388   +902   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4883   +106   \n==========================================\n+ Hits          20208      21057   +849   \n- Misses         7256       7285    +29   \n- Partials       2022       2046    +24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [487a0ba...bff5614][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/487a0ba52137e13d996ad12fc73bfeabb03c4fb7...bff561492ac7588d92fc6385625a04c1f445e209?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4217?src=pr'
p797
aS'Thanks @stevegury and @artem-zinnatullin .'
p798
asg14
S'akarnokd:TestSync719_1'
p799
sbsI4220
(iPull
Pull
p800
(dp801
g3
g53
sg5
S'1.x: Optimize hot path in OnSubscribeOnAssembly'
p802
sg7
(lp803
sg10
I4220
sg11
(lp804
S"Sorry @akarnokd, I'm not against keeping `String`, but capturing stacktrace is already heavy operation. \r\n\r\nI've removed allocations for `StringBuilder` and searching through each stack line from hot path.\r\n\r\n`RxJavaHooks.enableAssemblyTracking()` is a flag that will be used in production because there is nothing worse than a crash that doesn't point to your own code, performance impact should be as low as possible."
p805
aS"I still don't approve changing the string to stacktrace array. The large cost is getting the stacktrace, its string representation is low cost then on - probably takes up less memory even."
p806
aS"Having the string field helps in debugging as it gives immediate info about the trimmed assembly location. Debug watches with expressions don't work sometimes and looking at the unfiltered array of stacktrace elements are even more of an inconvenience."
p807
aS"Goal here is to minimize allocations and CPU time in hot path.\r\n\r\nWith enabled `RxJavaHooks.enableAssemblyTracking()` each creation of `Observable/Single/Completable` will go through this path.\r\n\r\nImagine you're creating 1000s of observables per second and none of them fail, why spend time on allocations, GC and filtering strings? I don't understand."
p808
aS'## [Current coverage][cc-pull] is **84.18%**\n> Merging [#4220][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4220   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17304     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2624          \n==========================================\n- Hits          14580      14567    -13   \n- Misses         1879       1887     +8   \n- Partials        846        850     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a45de22...f083b54][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a45de22ca3a847584c1a7640c138a89ac52d6f58...f083b54fb45bd222692e2e302067391a7981d4ea?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4220?src=pr'
p809
aS'>Having the string field helps in debugging as it gives immediate info about the trimmed assembly location. Debug watches with expressions don\'t work sometimes and looking at the unfiltered array of stacktrace elements are even more of an inconvenience.\r\n\r\nI belive most of users of this API just want better crash reports. Modern IDEs should work fine with "debug watches". I could be wrong of course, but that\'s my point of view.'
p810
aS"You enable tracking to hunt down bugs at which point app perf is secondary. You don't run with it enabled by default. Plus you are worrying on a ~1kB allocation while getting a current thread stacktrace is like 3000 cycles or so and would take up more RAM if left as array.\r\n\r\nThis API is there to help figure out which of the similar sequences crashen and link it to your code, not just to Rx operators.\r\n\r\nThe API was born out of an annoying RxNetty bug hunting session where I had trouble finding which of the dozen concatMap using sequence am I stepping through."
p811
aS">You enable tracking to hunt down bugs at which point app perf is secondary. You don't run with it enabled by default.\r\n\r\nI would and will enable it for production to get more meaningful stacktraces for crashes. That's why I'm talking about hot path.\r\n\r\n>Plus you are worrying on a ~1kB allocation while getting a current thread stacktrace is like 3000 cycles or so and would take up more RAM if left as array.\r\n\r\nIt's a tradeoff, of course, but you need to get this array no matter if you convert it to strings or not, so I don't see big problem in holding reference to it.\r\n\r\nThis PR may eat more memory for long running observables but it keeps code as fast as possible."
p812
aS"You don't have to use the standard tracking but roll your own hook classes and apply those in `RxJavaHooks`."
p813
aS"Closing this since we didn't come to agreement :)"
p814
asg14
S'artem-zinnatullin:az/1.x/optimize-onsubsribe-assembly'
p815
sbsI4222
(iPull
Pull
p816
(dp817
g3
S'This PR fixes the `subscribeOn` operator to allow cancellation before the actual subscription to the source takes place - just like how 1.x works.'
p818
sg5
S'2.x: subscribeOn allow cancelling before the actual subscription happens (just like 1.x)'
p819
sg7
(lp820
S'Bug'
p821
asg10
I4222
sg11
(lp822
S'## [Current coverage][cc-pull] is **68.55%**\n> Merging [#4222][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4222   diff @@\n==========================================\n  Files           411        411          \n  Lines         29486      29490     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4779     +2   \n==========================================\n+ Hits          20212      20216     +4   \n+ Misses         7252       7251     -1   \n- Partials       2022       2023     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4577f1a...d896729][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4577f1abc585611f83be86efd279c4d135acd0ab...d896729ed17055bf43f0940bf29dca4c000b28e3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4222?src=pr'
p823
asg14
S'akarnokd:SubscribeOnClassic'
p824
sbsI4224
(iPull
Pull
p825
(dp826
g3
S'This PR benchmarks the overhead in `PublishSubject` to give a baseline for upcoming behavior correction (backpressure fail-fast, more eager child isUnsubscribed() checking).\r\n\r\nBenchmark (i7 4790, Windows 7 x64, Java 8u102, ops/s - bigger is better):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17049741/617b9386-4fef-11e6-9d08-27352d676221.png)\r\n'
p827
sg5
S'1.x: PublishSubject perf'
p828
sg7
(lp829
S'Performance'
p830
asg10
I4224
sg11
(lp831
S'## [Current coverage][cc-pull] is 84.24% (diff: 100%)\n> Merging [#4224][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4224   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17305          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2624          \n==========================================\n- Hits          14580      14578     -2   \n- Misses         1879       1880     +1   \n- Partials        846        847     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a45de22...13962f6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a45de22ca3a847584c1a7640c138a89ac52d6f58...13962f6cb7a475faa9e2bc2e63275387508223cb?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4224?src=pr'
p832
asg14
S'akarnokd:PublishSubjectPerf'
p833
sbsI4225
(iPull
Pull
p834
(dp835
g3
S"This PR modifies the `PublishSubject` to fail fast if the child Subscriber can't keep up. Therefore, instead of some other operator failing somewhere downstream, the `MissingBackpressureException` now points to the `PublishSubject` instead. \r\n\r\nIn addition, there were complaints in #3850 that cross-unsubscription doesn't stop another Subscriber from receiving events if it comes after the unsubscribe() call in the dispatch loop. Since `PublishSubject` now tracks request - which is the main extra overhead - it is trivial to add the necessary eager check for the unsubscribed state.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17052414/a30acf84-4ffd-11e6-88ae-1fc5d28a6d12.png)\r\n\r\nAs expected, this adds some overhead although most noticeably for the mid-range only. Short-lived publishing is now slightly faster even.\r\n\r\nInterestingly, many benchmarks behave oddly in these 1000s range - we could be hitting some JIT threshold. While in other benchmarks, the warmup iteration numbers keep increasing as JIT does its work but here, it starts out quite nicely then drops 25% and stays that way. I'm on windows so JMH -perfasm doesn't work.\r\n\r\nIf this direction is accepted, I'll update `BehaviorSubject`, `timer()` and `interval()` do do the same tracking."
p836
sg5
S'1.x: PublishSubject fail-fast when backpressured'
p837
sg7
(lp838
S'Enhancement'
p839
asg10
I4225
sg11
(lp840
S'## [Current coverage][cc-pull] is 84.12% (diff: 100%)\n> Merging [#4225][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4225   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17377    +72   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2643    +19   \n==========================================\n+ Hits          14559      14619    +60   \n+ Misses         1893       1891     -2   \n- Partials        853        867    +14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...b094b0b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...b094b0b3cf9e933b37d26fe37fd85e298b82ae02?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4225?src=pr'
p841
aS'The recent changes to `ReplaySubject`after v1.1.5 broke my unit tests. \r\nNot sure if caused by this PR (#4225), #4023 or #3918. Probably #3918 since it started after I upgraded to 1.1.6.\r\nIn my specific case, I was reusing the same `TestSubscriber` after unsubscribing and then subscribing again. In this case, I\'m no longer getting events on the `TestSubscriber` after resubscribing it. This is roughly what I\'m doing:\r\n\r\n```java\r\nReplaySubject<String> subject = ReplaySubject.create();\r\nTestSubscriber subscriber = new TestSubscriber();\r\nSubscription subscription = subject.subscribe(subscriber);\r\nsubscription.unsubscribe();\r\nsubject.onNext("foo");\r\nsubject.onCompleted();\r\nsubject.subscribe(subscriber);\r\n// Assertions below pass with v1.1.5 but fail with 1.1.6 and above\r\nsubscriber.assertCompleted();\r\nsubscriber.assertValue("foo");\r\n```\r\n\r\nQuestions: \r\n1. Is this the expected behavior or a bug?\r\n2. If expected, is there any way I can reuse the same subscriber again after it has been unsubscribed?\r\n\r\nThanks!'
p842
aS"Alright apparently using `TestObserver` instead of `TestSubscriber` fixes the problem, although that one is deprecated. Looks like you're not supposed to reuse a `TestSubscriber`?\r\nI ended up rolling my own `TestObserver` that has the same convenience methods as `TestSubscriber`, like `assertNoErrors()`, `assertCompleted()`, etc.\r\nIt seems to me that `TestObserver` should not be deprecated because it seems useful in such cases. What do you think?"
p843
aS'You are not supposed to reuse `Subscriber` ever. Subscribe with a new `TestSubscriber` and assert on that.'
p844
asg14
S'akarnokd:PublishSubjectBackpressureFailFast'
p845
sbsI4226
(iPull
Pull
p846
(dp847
g3
S'Addresses #4216 \r\n\r\nHappy to receive feedback on the implementation. Also should I take the documentation from `flatMapObservable` and adjust it?'
p848
sg5
S'1.x: Single.flatMapCompletable'
p849
sg7
(lp850
S'Enhancement'
p851
asg10
I4226
sg11
(lp852
S'## [Current coverage][cc-pull] is 84.19% (diff: 100%)\n> Merging [#4226][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #4226   diff @@\n==========================================\n  Files           265        266     +1   \n  Lines         17305      17335    +30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2625     +1   \n==========================================\n+ Hits          14559      14596    +37   \n+ Misses         1893       1887     -6   \n+ Partials        853        852     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...3aad33f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...3aad33fffbee0e50f22d898a6b57dc4b6395b558?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4226?src=pr'
p853
aS'The unsubscription is not properly linked, the possible exception thrown by the mapper is not handled.\r\n\r\nSee [this](https://gist.github.com/akarnokd/260ea8b121ec4071401808c1594f2230).\r\n\r\n> Also should I take the documentation from flatMapObservable and adjust it?\r\n\r\nYes.'
p854
aS"Updated the documentation. I hope the wording is okay now. Also I'm pointing to https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapCompletable.png which does not exist yet but  @DavidMGross already tracked it at https://github.com/ReactiveX/reactivex.github.io/issues/289, I hope that's okay.\r\n\r\nthanks for the `CompletableFlatMapSingleToCompletable` I knew something was missing. I also created two more tests that cover some of the previously missing behaviour."
p855
aS':+1:'
p856
aS'Would it be possible to get this one into 1.1.8?'
p857
aS'If @zsxwing or anyone from Netflix approves it in time.'
p858
asg14
S'vanniktech:1.x_Single_flatMapCompletable'
p859
sbsI4229
(iPull
Pull
p860
(dp861
g3
S'In #3470, a flat cache of Subscribers has been introduced that is versioned and gets only updated if there are new Subscribers coming, old Subscribers leaving *and* a value comes through - improving performance if lots of Subscribers come and go between main onNext signals. This cache is not cleared but rebuilt therefore child Subscribers unsubscribing were still referenced through it and everything beyond - leading to memory leak on sensitive systems.\r\n\r\nThe fix is to cut the link to the child Subscriber in `InnerProducer` on unsubscription. A secondary action also empties the cache if all Subscribers are gone.\r\n\r\nReported in #4228 .'
p862
sg5
S'1.x: fix replay() retaining reference to the child Subscriber'
p863
sg7
(lp864
S'Bug'
p865
asg10
I4229
sg11
(lp866
S'## [Current coverage][cc-pull] is 84.20% (diff: 61.53%)\n> Merging [#4229][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4229   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17314     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2627     +3   \n==========================================\n+ Hits          14559      14579    +20   \n+ Misses         1893       1884     -9   \n+ Partials        853        851     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...0101c36][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...0101c36a13ff32711115d11abd1796206e07ae49?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4229?src=pr'
p867
aS"This is a medium impact bug so it would be great if it made into tomorrow's release. /cc @artem-zinnatullin @zsxwing "
p868
asg14
S'akarnokd:ReplaySubscriberCacheFix'
p869
sbsI4231
(iPull
Pull
p870
(dp871
g3
g53
sg5
g53
sg7
(lp872
S'Bug'
p873
asg10
I4231
sg11
(lp874
S'## [Current coverage][cc-pull] is 84.14% (diff: 100%)\n> Merging [#4231][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.14%**\n\n```diff\n@@                1.x      #4231   diff @@\n==========================================\n  Files           265        265          \n  Lines         17314      17316     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14595      14571    -24   \n- Misses         1875       1890    +15   \n- Partials        844        855    +11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2284d4f...6afe4e7][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/2284d4ffad2c063e9478b7b685b350fc2c0d49a3...6afe4e7fb002b4f47f1c58137487cb3b718bda43?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4231?src=pr'
p875
aS':+1: \r\n\r\nGiven a misbehaving task, this at least prevents other work to be scheduled on the same pool.'
p876
asg14
S'csabakos:1.x'
p877
sbsI4232
(iPull
Pull
p878
(dp879
g3
S'`Selection` class can extend `AtomicReference` to save an allocation'
p880
sg5
S'save allocation in OnSubscribeAmb'
p881
sg7
(lp882
S'Enhancement'
p883
aS'Performance'
p884
asg10
I4232
sg11
(lp885
S'## [Current coverage][cc-pull] is 84.23% (diff: 25.00%)\n> Merging [#4232][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4232   diff @@\n==========================================\n  Files           265        265          \n  Lines         17314      17312     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14595      14582    -13   \n- Misses         1875       1883     +8   \n- Partials        844        847     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2284d4f...753df21][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/2284d4ffad2c063e9478b7b685b350fc2c0d49a3...753df21541e6f7f33e69dfb7ea2ef5814d554d67?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4232?src=pr'
p886
aS':+1:'
p887
asg14
S'davidmoten:amb-reduce-alloc'
p888
sbsI4233
(iPull
Pull
p889
(dp890
g3
S'Another one. I\'ll keep rolling through the operators to pick up more. \r\n\r\n@akarnokd Are you ok with `@SuppressWarnings("serial")` instead of ```private static final long serialVersionUID = ...```? '
p891
sg5
S'save allocation in OnSubscribeAutoConnect'
p892
sg7
(lp893
S'Performance: allocation'
p894
asg10
I4233
sg11
(lp895
S"I prefer `serialVersionUID` but I'm not nitpicky like some..."
p896
aS':+1:'
p897
asg14
S'davidmoten:autoconnect-reduce-alloc'
p898
sbsI4234
(iPull
Pull
p899
(dp900
g3
g53
sg5
S'1.x: Fix some typos'
p901
sg7
(lp902
S'Cleanup'
p903
aS'Documentation'
p904
asg10
I4234
sg11
(lp905
S'## [Current coverage][cc-pull] is 84.28% (diff: 100%)\n> Merging [#4234][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                1.x      #4234   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14583      14593    +10   \n+ Misses         1880       1873     -7   \n+ Partials        850        847     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [791379d...045f658][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/791379d855ae0b9c9b2067ce5167f900d126bc32...045f658a901e10fe8cc1555c645a99deda3b0cd9?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4234?src=pr'
p906
aS':+1:'
p907
asg14
S'vanniktech:1.x_typos'
p908
sbsI4236
(iPull
Pull
p909
(dp910
g3
S'as per title.\r\n\r\nWould have been nicer to extend `CompositeSubscription` but is final.\r\n'
p911
sg5
S'save allocations in OnSubscribeJoin'
p912
sg7
(lp913
S'Performance: allocation'
p914
asg10
I4236
sg11
(lp915
S'## [Current coverage][cc-pull] is 84.16% (diff: 78.57%)\n> Merging [#4236][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4236   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14572     -6   \n- Misses         1886       1887     +1   \n- Partials        849        854     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7d42628...dbf6b04][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7d42628e3be0dd9b885f13fdfbc61627945b86b1...dbf6b04b251bf319fe897c2e1c714677d69441bf?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4236?src=pr'
p916
aS':+1:'
p917
asg14
S'davidmoten:join-reduce-alloc'
p918
sbsI4237
(iPull
Pull
p919
(dp920
g3
S'as per title'
p921
sg5
S'reduce allocations in OnSubscribeGroupJoin'
p922
sg7
(lp923
S'Performance: allocation'
p924
asg10
I4237
sg11
(lp925
S'## [Current coverage][cc-pull] is 84.17% (diff: 77.27%)\n> Merging [#4237][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4237   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14574     -4   \n  Misses         1886       1886          \n- Partials        849        853     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7d42628...84e301f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7d42628e3be0dd9b885f13fdfbc61627945b86b1...84e301f72d03b81c908daac755968cadd635beb2?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4237?src=pr'
p926
aS'.+1:'
p927
asg14
S'davidmoten:group-join-reduce-alloc'
p928
sbsI4238
(iPull
Pull
p929
(dp930
g3
S'Found another one'
p931
sg5
S'1.x: Fix typo eigth to eighth'
p932
sg7
(lp933
S'Cleanup'
p934
asg10
I4238
sg11
(lp935
S'## [Current coverage][cc-pull] is 84.24% (diff: 100%)\n> Merging [#4238][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4238   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14580      14585     +5   \n+ Misses         1882       1881     -1   \n+ Partials        851        847     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c3a3d1a...ff425d8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c3a3d1ad38311226382411c6f470984dffb63947...ff425d8b812c80a24e3027b2149269984558478e?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4238?src=pr'
p936
aS':+1:'
p937
asg14
S'vanniktech:1.x_eighth_typo'
p938
sbsI4239
(iPull
Pull
p939
(dp940
g3
S'as per title, combined `AtomicBoolean` with an `Action`.'
p941
sg5
S'save allocation in OperatorSkipTimed'
p942
sg7
(lp943
S'Performance: allocation'
p944
asg10
I4239
sg11
(lp945
S'## [Current coverage][cc-pull] is 84.06% (diff: 100%)\n> Merging [#4239][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.13%**\n\n```diff\n@@                1.x      #4239   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17319     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14560    -18   \n- Misses         1885       1901    +16   \n- Partials        850        858     +8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...8d4eff8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...8d4eff87c18cdba06f0f602b1c6aac6f593453d4?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4239?src=pr'
p946
aS"Good point, thanks @JakeWharton, I'll do that."
p947
aS'Ah, the trouble with that idea @JakeWharton is that I need to create a non-anonymous class to subclass `Subscriber` and implement `Action0` and that class needs to hold a reference to the `child` subscriber. Thus I end up with the same number of allocations.'
p948
aS"happy to switch to `onSubscribe` while I'm here. I'll do that."
p949
aS'Got rid of `AtomicBoolean`, subscriber implements `Action0`, converted to `OnSubscribe`'
p950
aS"@JakeWharton  upon reflection I realize there's no cost moving from anonymous to non-anonymous class because the anonymous class would have included at least one implicit external reference to access the `child` object. So thanks for the suggestion."
p951
aS':+1:'
p952
asg14
S'davidmoten:skip-timed-reduce-alloc'
p953
sbsI4241
(iPull
Pull
p954
(dp955
g3
S"When the function's returned Observable signals the resubscription in the operator `redo` (which is the base for `repeatWhen` and `retryWhen`). It is possible an asyncronous source triggers the function (and thus the same `Observable`) from another thread while the first is still coming back from the resubscription itself.\r\n\r\nThis PR serializes the dispatching `BehaviorSubject` to prevent such concurrent execution of the when chain.\r\n\r\nThis may or may not be the source of the failure of #4175 but I can't reproduce the failure with the 1.x branch. /cc @davidmoten.\r\n\r\n"
p956
sg5
S'Fix retryWhen/repeatWhen potential concurrent reentry when resubscribing'
p957
sg7
(lp958
S'Bug'
p959
asg10
I4241
sg11
(lp960
S'## [Current coverage][cc-pull] is 84.23% (diff: 100%)\n> Merging [#4241][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4241   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14578      14583     +5   \n+ Misses         1885       1880     -5   \n  Partials        850        850          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...05ca826][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...05ca82638eec15d3cda7dbf62be5eb6d8863bb20?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4241?src=pr'
p961
aS'Worth a shot, gnarly bug :+1: '
p962
asg14
S'akarnokd:RedoConcurrentSignalFix'
p963
sbsI4243
(iPull
Pull
p964
(dp965
g3
S'a bit of cleanup'
p966
sg5
S'rename Map and Filter test classes now that have moved to OnSubscribe'
p967
sg7
(lp968
S'Cleanup'
p969
asg10
I4243
sg11
(lp970
S'## [Current coverage][cc-pull] is 84.28% (diff: 100%)\n> Merging [#4243][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4243   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14578      14592    +14   \n+ Misses         1885       1873    -12   \n+ Partials        850        848     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...e29443c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...e29443caf7d2d6b7a75e1c801a541e64f91ce12a?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4243?src=pr'
p971
asg14
S'davidmoten:rename-test-classes'
p972
sbsI4244
(iPull
Pull
p973
(dp974
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.'
p975
sg5
S'OperatorAll - prevent multiple terminal events'
p976
sg7
(lp977
S'Bug'
p978
aS'Cleanup'
p979
asg10
I4244
sg11
(lp980
S'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added unit tests for `(onNext, onNext)` and `(onNext, onError)` cases'
p981
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4244?src=pr) is 84.17% (diff: 100%)\n> Merging [#4244](https://codecov.io/gh/ReactiveX/RxJava/pull/4244?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4244   diff @@\n==========================================\n  Files           265        265          \n  Lines         17319      17324     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2629     +2   \n==========================================\n+ Hits          14572      14583    +11   \n+ Misses         1893       1889     -4   \n+ Partials        854        852     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1e147fb...473eced](https://codecov.io/gh/ReactiveX/RxJava/compare/1e147fb629c76b39f795ce79791725a52187899f...473ecedd51d016e182c4e48610cd4e0596efe3a3?src=pr)'
p982
aS':+1:'
p983
asg14
S'davidmoten:operator-all-prevent-multiple-terminal-events'
p984
sbsI4245
(iPull
Pull
p985
(dp986
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.'
p987
sg5
S'OperatorAny - prevent multiple terminal events'
p988
sg7
(lp989
S'Bug'
p990
aS'Cleanup'
p991
asg10
I4245
sg11
(lp992
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4245?src=pr) is 84.21% (diff: 100%)\n> Merging [#4245](https://codecov.io/gh/ReactiveX/RxJava/pull/4245?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4245   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17431     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2651     +2   \n==========================================\n+ Hits          14676      14679     +3   \n+ Misses         1893       1890     -3   \n- Partials        857        862     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...ed8caed](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...ed8caed2c07f4b586c189d44626a55d602d3683c?src=pr)'
p993
aS'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added two unit tests for `(onNext, onNext)` and one for `(onNext, onError)` cases'
p994
asg14
S'davidmoten:operator-any-prevent-multiple-terminal-events'
p995
sbsI4246
(iPull
Pull
p996
(dp997
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.\r\n\r\nAlso renamed test class to match tested class.'
p998
sg5
S'OperatorReduce - prevent multiple terminal events'
p999
sg7
(lp1000
S'Bug'
p1001
aS'Cleanup'
p1002
asg10
I4246
sg11
(lp1003
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4246?src=pr) is 84.30% (diff: 100%)\n> Merging [#4246](https://codecov.io/gh/ReactiveX/RxJava/pull/4246?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4246   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17434     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2652     +3   \n==========================================\n+ Hits          14676      14697    +21   \n+ Misses         1893       1873    -20   \n- Partials        857        864     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...586d9f7](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...586d9f7b4e65afe2534e57b172158e55b077504a?src=pr)'
p1004
aS'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added unit tests including coverage of calling `.reduce` on an empty stream'
p1005
asg14
S'davidmoten:operator-reduce-prevent-multiple-terminal-events'
p1006
sbsI4248
(iPull
Pull
p1007
(dp1008
g3
g53
sg5
S'1.x: SyncOnSubscribe fix typo and java doc'
p1009
sg7
(lp1010
S'Cleanup'
p1011
aS'Documentation'
p1012
asg10
I4248
sg11
(lp1013
S':+1:'
p1014
asg14
S'vanniktech:1.x_synconsubscribe_typo_javadoc'
p1015
sbsI4249
(iPull
Pull
p1016
(dp1017
g3
S'Hi,\r\nthere is a simple implementation for an observable value, in the mutable or immutable form.\r\nThis helps me to share some state (like configuration) when in some case is important to catch every change (using normal subscription) and in other case is useful get only the current value.\r\n\r\nI hope this helps,\r\nthanks for software,\r\nFrancesco'
p1018
sg5
S'Value, Variable and Immutable first implementation'
p1019
sg7
(lp1020
sg10
I4249
sg11
(lp1021
S"Hi and thanks for the contribution but I'm not convinced that these additions belong to RxJava itself. Since the PR doesn't need operators on `Observable` or `Flowable`, they can live in any other library external to RxJava."
p1022
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4249?src=pr) is 69.26% (diff: 0.00%)\n> Merging [#4249](https://codecov.io/gh/ReactiveX/RxJava/pull/4249?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4249   diff @@\n==========================================\n  Files           417        419     +2   \n  Lines         30392      30425    +33   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4885       4887     +2   \n==========================================\n- Hits          21087      21074    -13   \n- Misses         7247       7296    +49   \n+ Partials       2058       2055     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [708310a...1812064](https://codecov.io/gh/ReactiveX/RxJava/compare/708310aca4d1168a7121edbd1690753396acc391...18120641400263b6b91153e12dabd6622ce46d10?src=pr)'
p1023
aS"Thank you for your response,\r\nI'm not interested to do that.\r\n\r\nI will continue to use my Kotlin personal implementation."
p1024
asg14
S'fvasco:2.x'
p1025
sbsI4250
(iPull
Pull
p1026
(dp1027
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes three unit tests that failed on the original code and another that gives coverage of the onBackpressureDrop action being called.'
p1028
sg5
S'onBackpressureDrop - prevent multiple terminal events'
p1029
sg7
(lp1030
S'Bug'
p1031
aS'Cleanup'
p1032
asg10
I4250
sg11
(lp1033
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4250?src=pr) is 84.24% (diff: 100%)\n> Merging [#4250](https://codecov.io/gh/ReactiveX/RxJava/pull/4250?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4250   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17433     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2652     +3   \n==========================================\n+ Hits          14676      14686    +10   \n+ Misses         1893       1883    -10   \n- Partials        857        864     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...de52c6b](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...de52c6b60da220bcd7237658fd0f2d01e90982e5?src=pr)'
p1034
asg14
S'davidmoten:onbackp-drop-prevent-multiple-terminal-events'
p1035
sbsI4251
(iPull
Pull
p1036
(dp1037
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes three unit tests that failed on the original code. The fix also has the side effect of enabling gc of `map` when the factory fails (`onError` was called on the child, not `this` so `map` was not set to null).'
p1038
sg5
S'toMap - prevent multiple terminal events, support backpressure'
p1039
sg7
(lp1040
S'Bug'
p1041
aS'Cleanup'
p1042
asg10
I4251
sg11
(lp1043
S'I thought it supported backpressure. Could you rewrite it by using `DeferredScalarSubscription`?'
p1044
aS'unrelated test failure:\r\n\r\n```\r\nrx.schedulers.ComputationSchedulerTests > testHandledErrorIsNotDeliveredToThreadHandler FAILED\r\n    java.lang.AssertionError: Handler should not have received anything expected:<0> but was:<1>\r\n        at org.junit.Assert.fail(Assert.java:88)\r\n        at org.junit.Assert.failNotEquals(Assert.java:834)\r\n        at org.junit.Assert.assertEquals(Assert.java:645)\r\n        at rx.schedulers.SchedulerTests.testHandledErrorIsNotDeliveredToThreadHandler(SchedulerTests.java:102)\r\n        at rx.schedulers.ComputationSchedulerTests.testHandledErrorIsNotDeliveredToThreadHandler(ComputationSchedulerTests.java:153)\r\n```'
p1045
aS'>I thought it supported backpressure. Could you rewrite it by using DeferredScalarSubscription?\r\n\r\nSure.'
p1046
aS"What I might do is fix multiple terminal emissions in  `OnSubscribeCollect` first and make necessary `done` changes to `DeferredScalarSubscriber` in that PR. I'll follow that with the backpressure fix for `OperatorToMap`."
p1047
aS"@akarnokd \r\n\r\nIn terms of releasing a value so can be gc'd I thought to modify `DeferredScalarSubscriber` in this method so that the field `this.value` is set to null just before the call to `a.onNext()`:\r\n```java\r\nprotected final void complete(R value) {\r\n        Subscriber<? super R> a = actual;\r\n        for (;;) {\r\n            int s = state.get();\r\n            \r\n            if (s == NO_REQUEST_HAS_VALUE || s == HAS_REQUEST_HAS_VALUE || a.isUnsubscribed()) {\r\n                return;\r\n            }\r\n            if (s == HAS_REQUEST_NO_VALUE) {\r\n                R v = value; // <--------------------------------\r\n                value = null; // <--------------------------------\r\n                a.onNext(v);\r\n                if (!a.isUnsubscribed()) {\r\n                    a.onCompleted();\r\n                }\r\n                state.lazySet(HAS_REQUEST_HAS_VALUE);\r\n                return;\r\n            }\r\n            this.value = value;\r\n            if (state.compareAndSet(NO_REQUEST_NO_VALUE, NO_REQUEST_HAS_VALUE)) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nIs that ok?"
p1048
aS"don't review latest change, just committed so could work on it from another location"
p1049
aS"I'm not sure if it's worth it. Many operators don't really do that because it is also likely the whole chain gets forgotten and GC claims all of them on its own. If you want to make sure there is no leak, use `onTerminateDetach`."
p1050
aS'Could you rebase the whole thing? Somehow, you picked up changes to master and they show up in the diff.'
p1051
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4251?src=pr) is 84.39% (diff: 100%)\n> Merging [#4251](https://codecov.io/gh/ReactiveX/RxJava/pull/4251?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4251   diff @@\n==========================================\n  Files           267        267          \n  Lines         17460      17460          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2660       2662     +2   \n==========================================\n+ Hits          14732      14735     +3   \n- Misses         1865       1869     +4   \n+ Partials        863        856     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0577b4c...37da430](https://codecov.io/gh/ReactiveX/RxJava/compare/0577b4c49f744ae6a49505ffeb8937e6a0730f3b...37da4301560988479160d2a40d3fbd46138d10f5?src=pr)'
p1052
aS'* Rebased\r\n* Rewrote to use `DeferredScalarSubscriberSafe`\r\n* use singleton of `DefaultMapFactory`\r\n* moved to `OnSubscribe` to save allocations\r\n* added backpressure test '
p1053
aS':+1:'
p1054
aS"Good idea, I've updated the PR."
p1055
aS':+1:'
p1056
asg14
S'davidmoten:to-map-prevent-multiple-terminal-events'
p1057
sbsI4252
(iPull
Pull
p1058
(dp1059
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about another event being sent from upstream even if upstream has been unsubscribed.\r\n\r\n* `DeferredScalarSubscriber` has been updated with a `done` flag\r\n* moved tests from `ObservableTests` to new class `OnSubscribeCollectTest`\r\n* added three tests of post error emissions\r\n* added factory failure test  \r\n'
p1060
sg5
S'collect, DeferredScalarSubscriber - prevent multiple terminal emissions'
p1061
sg7
(lp1062
S'Bug'
p1063
aS'Cleanup'
p1064
asg10
I4252
sg11
(lp1065
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4252?src=pr) is 84.36% (diff: 100%)\n> Merging [#4252](https://codecov.io/gh/ReactiveX/RxJava/pull/4252?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4252   diff @@\n==========================================\n  Files           266        267     +1   \n  Lines         17446      17460    +14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2660     +3   \n==========================================\n+ Hits          14713      14731    +18   \n+ Misses         1873       1867     -6   \n- Partials        860        862     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [888560e...204f26f](https://codecov.io/gh/ReactiveX/RxJava/compare/888560edb055d297822c8e1021fe9ef224e31352...204f26f2d63585bf2bcd21ceea11d9a73b0997dc?src=pr)'
p1066
aS"* Created a new class `DeferredScalarSubscriberSafe` that extends `DeferredScalarSubscriber` and offers the `done` checks. `done` is available as a protected field and `OnSubscribeCollect` uses it in its `onNext` method.\r\n* Replaced the calls in tests to `RxJavaHooks.setOnError(null)` with calls to `RxJavaHooks.reset()` in this PR and in recent similar PRs for operators `any`, `all` and `reduce`.\r\n* I'll submit another PR to fix the javadoc of `RxJavaHooks.setOnError` \r\n"
p1067
aS':+1:'
p1068
asg14
S'davidmoten:collect-prevent-multiple-terminal-events'
p1069
sbsI4253
(iPull
Pull
p1070
(dp1071
g3
S"Finally we have `Observable.fromAsync()` and it's time to prevent users from using `Observable.create()`."
p1072
sg5
S'1.x: Deprecate Observable.create()'
p1073
sg7
(lp1074
sg10
I4253
sg11
(lp1075
S"Don't. Makes all legitimate uses now show up as warnings, including all RxJava!"
p1076
aS"But we have to. It's too dangerous and people keep using it in tutorials for **beginners**! \r\n@JakeWharton is trying to teach them all not to do so (:+1:) but `@Deprecate` is a much more efficient and better way to do it.\r\n\r\n>Makes all legitimate uses now show up as warnings\r\n\r\nPretty sure most of them don't support backpressure -> `legitimate == false`!"
p1077
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4253?src=pr) is 84.24% (diff: 100%)\n> Merging [#4253](https://codecov.io/gh/ReactiveX/RxJava/pull/4253?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                1.x      #4253   diff @@\n==========================================\n  Files           266        266          \n  Lines         17446      17446          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2657          \n==========================================\n- Hits          14715      14698    -17   \n- Misses         1870       1883    +13   \n- Partials        861        865     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [41959f7...ea7300d](https://codecov.io/gh/ReactiveX/RxJava/compare/41959f71b33e71b41c0d6130216e5e6a0f98bfb6...ea7300d06f7bc1e44f0e6b67af65e3bb05448a7f?src=pr)'
p1078
aS'If so should not SyncOnSubscribe & AsyncOnSubscribe be mentioned too?'
p1079
aS"This I why I use Eclipse: it's immediately obvious what the cascading effects of changes are:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17214880/33901546-54db-11e6-8c05-2c37fc4cad16.png)\r\n\r\nThe javadoc contains the warning about using the method:\r\n\r\n> This method requires advanced knowledge about building operators and data sources; please consider other standard methods first; \r\n"
p1080
aS'You may not care about the impact but I have to. This change is too radical; a small deprecation now amplified to 400+ warnings and would need to suppress several hundred places - all legitimate (operators) or acceptable uses (unit tests for corner cases).\r\n\r\n:-1:'
p1081
aS"Still you don't just deprecate something and leave the fallout to other maintainer(s).\r\n\r\nInstead of just deprecating `create` this is what I'd do:\r\n\r\n  - refactor-rename `create` to `build` in the entire project -> keeps all our use places intact, no suppressing needed\r\n  - copy the `build` method back to `create`\r\n  - mark `create` as deprecated, add pointers to the alternative methods in the Javadoc"
p1082
aS'That sounds better to me, I was thinking about package private method inside `Observable`, like `createInternal()` + `rx.Internal.createObservable()`, if it would be required, to completely hide it from users (and deprecate `Observable.create()`).\r\n\r\nDoes it sound good to you @akarnokd?\r\n\r\n>If so should not SyncOnSubscribe & AsyncOnSubscribe be mentioned too?\r\n\r\nUp to @akarnokd.'
p1083
aS"Just making it package-private does not work. We have accesses from other packages that require the create feature. It means we'd have to dump them into the main `rx`, all their tests. With `Internal`, now you have a publicly accessible class and just switched `Observable.create` with `Internal.createObservable`. Java 6's visibility rules are simply not powerful enough to hide `create`.\r\n"
p1084
aS"So, after discussing that in Twitter looks like our steps could be:\r\n\r\n1. Teach users to use `fromAsync()` in their apps but not in libraries yet because it's `@Experimental`.\r\n2. Collect feedback.\r\n3. Stabilise `fromAsync()` and promote it to `@Beta` or stable.\r\n4. Deprecate `create()`.\r\n\r\nRegarding hiding it, I think `internalCreate()` or `unsafeCreate()` will do the work.\r\n\r\nIf that sounds good to you, I'll close this pr and start working on things from list."
p1085
aS'That sounds good.'
p1086
aS">Regarding hiding it, I think internalCreate() or unsafeCreate() will do the work.\r\n\r\nDeprecating `create` seems like  a good idea to get users to consider what they're doing but the `create` functionality still needs to be part of the public API. `unsafeCreate` may be a useful name to make people think twice about it.\r\n\r\nRe `fromAsync` teaching, one outstanding issue with it was request batching. @akarnokd submitted an operator that we can use for that (`rebatchRequests`)  and I suspect it should be covered as part of the  documentation of `fromAsync` usage. "
p1087
asg14
S'artem-zinnatullin:az/1.x/deprecate-observable.create'
p1088
sbsI4254
(iPull
Pull
p1089
(dp1090
g3
S'This fixes the generics warnings in the new `Single.flatMapCompletable` unit tests.'
p1091
sg5
S'1.x: fix SingleTest generics warnings'
p1092
sg7
(lp1093
S'Cleanup'
p1094
aS'Test'
p1095
asg10
I4254
sg11
(lp1096
S"I'm using Eclipse which turned out to be an excellent tool to warn about these things. Are you using IntelliJ? I've noticed that people using IntelliJ end up with such hidden problems (while IntelliJ for me complained about almost everything else when I loaded RxJava into it once)."
p1097
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4254?src=pr) is 84.30% (diff: 100%)\n> Merging [#4254](https://codecov.io/gh/ReactiveX/RxJava/pull/4254?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4254   diff @@\n==========================================\n  Files           266        266          \n  Lines         17446      17446          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2657          \n==========================================\n- Hits          14715      14707     -8   \n- Misses         1870       1879     +9   \n+ Partials        861        860     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [41959f7...acfdde2](https://codecov.io/gh/ReactiveX/RxJava/compare/41959f71b33e71b41c0d6130216e5e6a0f98bfb6...acfdde2bee03dc7e0322ab3df889de7a5618631e?src=pr)'
p1098
aS"Yes I'm using Android Studio which is based on IntelliJ. That's weird I had no problems loading the project into AS."
p1099
asg14
S'akarnokd:TestCleanup728'
p1100
sbsI4257
(iPull
Pull
p1101
(dp1102
g3
S'as per title'
p1103
sg5
S'Fix javadoc on RxJavaHooks.setOnError'
p1104
sg7
(lp1105
S'Documentation'
p1106
asg10
I4257
sg11
(lp1107
S"Don't know what happened but I suppose it's unrelated:\r\n\r\n```\r\nCaused by: org.eclipse.jgit.errors.MissingObjectException: Missing commit 75ffcbb01cae042f5b715060622154794f39a690\r\n```"
p1108
aS":+1:\r\n\r\nBy default, Travis checks out the last N commits. If that last N doesn't contain a version tag, the Nebula plugins' version inference freaks out. I have to keep increasing that value if there are too many commits between releases."
p1109
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4257?src=pr) is 84.28% (diff: 100%)\n\n\n> No coverage report found for **1.x** at 2a50c2f.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2a50c2f...59218d9](https://codecov.io/gh/ReactiveX/RxJava/compare/2a50c2fe34d06fad199d097b9ee3352f3a5ce2f8...59218d90921cc3313392b8e29462ac0f1ec76264?src=pr)'
p1110
asg14
S'davidmoten:rxjavahooks-setonerror-javadoc-fix'
p1111
sbsI4261
(iPull
Pull
p1112
(dp1113
g3
S'This PR adds multiple arguments to concatDelayError operator\r\n\r\nRelated to: #4152 '
p1114
sg5
S'1.x: concatDelayError multiple arguments'
p1115
sg7
(lp1116
S'Enhancement'
p1117
asg10
I4261
sg11
(lp1118
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4261?src=pr) is 84.37% (diff: 100%)\n> Merging [#4261](https://codecov.io/gh/ReactiveX/RxJava/pull/4261?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4261   diff @@\n==========================================\n  Files           267        267          \n  Lines         17460      17468     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14735      14738     +3   \n- Misses         1866       1875     +9   \n+ Partials        859        855     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [969d94c...0d0cd28](https://codecov.io/gh/ReactiveX/RxJava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae...0d0cd281747fdb1851d97c6b9c7cff8fbcb5a28f?src=pr)'
p1119
aS':+1:'
p1120
aS'/cc @artem-zinnatullin @stevegury @zsxwing '
p1121
asg14
S'SherifMakhlouf:multiple-args-concatDelayError'
p1122
sbsI4262
(iPull
Pull
p1123
(dp1124
g3
S'as discussed in #4260 \r\n* call `RxJavaHooks.onError` for secondary errors\r\n* reduced allocations (`ActionSubscriber` -> `ActionObserver`, `Operator` -> `OnSubscribe`)\r\n* added 5 unit tests\r\n'
p1125
sg5
S'doOnEach - reduce allocations, report to RxJavaHooks'
p1126
sg7
(lp1127
S'Cleanup'
p1128
asg10
I4262
sg11
(lp1129
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4262?src=pr) is 84.41% (diff: 100%)\n> Merging [#4262](https://codecov.io/gh/ReactiveX/RxJava/pull/4262?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4262   diff @@\n==========================================\n  Files           267        268     +1   \n  Lines         17460      17477    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14735      14753    +18   \n  Misses         1866       1866          \n+ Partials        859        858     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [969d94c...771d859](https://codecov.io/gh/ReactiveX/RxJava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae...771d859c701608a655c2b32e7fc4a0dc840a20e9?src=pr)'
p1130
aS'fixed ActionSubscriber usage and removed empty test, ta'
p1131
aS':+1:'
p1132
asg14
S'davidmoten:doOnEach-optimize-and-fix'
p1133
sbsI4264
(iPull
Pull
p1134
(dp1135
g3
S'This PR Observable.sorted Method, I hope it addresses this #4263 correctly. '
p1136
sg5
S'Adds Observable.sorted method'
p1137
sg7
(lp1138
S'Enhancement'
p1139
aS'Feature-Request'
p1140
asg10
I4264
sg11
(lp1141
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4264?src=pr) is 84.48% (diff: 100%)\n> Merging [#4264](https://codecov.io/gh/ReactiveX/RxJava/pull/4264?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4264   diff @@\n==========================================\n  Files           268        268          \n  Lines         17477      17477          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14761      14765     +4   \n+ Misses         1861       1856     -5   \n- Partials        855        856     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3639e73...26ebeeb](https://codecov.io/gh/ReactiveX/RxJava/compare/3639e731b0b749ba864674d6971a00ee4a812496...26ebeebd5e5ac653830a3d0cabf6950eacecd795?src=pr)'
p1142
aS"I'd have implemented a single operator for it but this will also do."
p1143
aS"Looks generally okay but I can't tell how often this shortcut is needed. I hope for some community feedback on this."
p1144
aS':+1:'
p1145
aS':+1: '
p1146
asg14
S'SherifMakhlouf:observable_sorted'
p1147
sbsI4265
(iPull
Pull
p1148
(dp1149
g3
S'This PR is a performance improvement in `sequenceEquals` where I removed a call to `map` that appears unnecessary.\r\n'
p1150
sg5
S'remove unnecessary map call in sequenceEquals operator'
p1151
sg7
(lp1152
S'Cleanup'
p1153
asg10
I4265
sg11
(lp1154
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4265?src=pr) is 84.41% (diff: 100%)\n> Merging [#4265](https://codecov.io/gh/ReactiveX/RxJava/pull/4265?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4265   diff @@\n==========================================\n  Files           268        268          \n  Lines         17477      17475     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n- Hits          14761      14751    -10   \n- Misses         1861       1864     +3   \n- Partials        855        860     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3639e73...a259866](https://codecov.io/gh/ReactiveX/RxJava/compare/3639e731b0b749ba864674d6971a00ee4a812496...a259866bccce4817f5049aa94cacf10a809f10c8?src=pr)'
p1155
aS':+1:'
p1156
asg14
S'davidmoten:sequenceEquals-remove-unnecessary-map'
p1157
sbsI4266
(iPull
Pull
p1158
(dp1159
g3
S"This PR adds a dedicated `concat` implementation that works with the source array. The main benefit is that there is no need to serialize emissions because the source array can't throw (unlike `concatMap` where there could be an onError from the main source while an inner source is running). Plus, there is a new `concatArrayDelayError` version."
p1160
sg5
S'2.x: add dedicated concat for array of publishers'
p1161
sg7
(lp1162
S'Enhancement'
p1163
asg10
I4266
sg11
(lp1164
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4266?src=pr) is 69.29% (diff: 84.50%)\n> Merging [#4266](https://codecov.io/gh/ReactiveX/RxJava/pull/4266?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4266   diff @@\n==========================================\n  Files           417        418     +1   \n  Lines         30392      30460    +68   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4885       4898    +13   \n==========================================\n+ Hits          21087      21107    +20   \n- Misses         7247       7294    +47   \n- Partials       2058       2059     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [708310a...4c891ef](https://codecov.io/gh/ReactiveX/RxJava/compare/708310aca4d1168a7121edbd1690753396acc391...4c891efabf3c78269e4b38324ad45d03893d098c?src=pr)'
p1165
aS'lgtm :+1:'
p1166
asg14
S'akarnokd:ConcatArrayDedicated'
p1167
sbsI4268
(iPull
Pull
p1168
(dp1169
g3
S'  - rename `finallyDo` (deprecated in 1.x) to `doAfterTerminate`\r\n  - upgrade sized `buffer()`, fix backpressure bug\r\n  - add post-complete helper methods\r\n  - fix `toSingle` not complaining about an empty/longer source\r\n  - `RxJavaPlugins` to reset the base-type lifecycle callbacks as well'
p1170
sg5
S'2.x: test sync and operator fixes'
p1171
sg7
(lp1172
S'Bug'
p1173
aS'Test'
p1174
asg10
I4268
sg11
(lp1175
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4268?src=pr) is 69.64% (diff: 63.35%)\n> Merging [#4268](https://codecov.io/gh/ReactiveX/RxJava/pull/4268?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.22%**\n\n```diff\n@@                2.x      #4268   diff @@\n==========================================\n  Files           418        418          \n  Lines         30460      30608   +148   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4898       4933    +35   \n==========================================\n+ Hits          21144      21317   +173   \n+ Misses         7258       7217    -41   \n- Partials       2058       2074    +16   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3f324c6...d6f49b3](https://codecov.io/gh/ReactiveX/RxJava/compare/3f324c6889b5369b79bdd3dfb8b4854b650a90be...d6f49b3808243a4e9e639745478f0a6125eb47b8?src=pr)'
p1176
aS'lgtm :+1:'
p1177
aS'Thanks @JakeWharton !'
p1178
asg14
S'akarnokd:TestSync801'
p1179
sbsI4269
(iPull
Pull
p1180
(dp1181
g3
g53
sg5
S'Remove needless static field for initialization.'
p1182
sg7
(lp1183
S'Cleanup'
p1184
asg10
I4269
sg11
(lp1185
S':+1:'
p1186
aS':+1:'
p1187
asg14
S'JakeWharton:jw/cleanup'
p1188
sbsI4270
(iPull
Pull
p1189
(dp1190
g3
S'* switched to `OnSubscribe`\r\n* switched to use `DeferredScalarSubscriberSafe`\r\n* previous source failed to handle post terminal emissions \r\n* added 4 unit tests'
p1191
sg5
S'toMultimap - prevent post terminal emissions, reduce allocations'
p1192
sg7
(lp1193
S'Bug'
p1194
aS'Cleanup'
p1195
asg10
I4270
sg11
(lp1196
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4270?src=pr) is 84.43% (diff: 100%)\n> Merging [#4270](https://codecov.io/gh/ReactiveX/RxJava/pull/4270?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4270   diff @@\n==========================================\n  Files           268        268          \n  Lines         17475      17474     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2664     +2   \n==========================================\n+ Hits          14750      14755     +5   \n+ Misses         1867       1860     -7   \n- Partials        858        859     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c95c650...3b74be6](https://codecov.io/gh/ReactiveX/RxJava/compare/c95c6507e542a3082868c44c0c9ccc5f287183d6...3b74be66a31b388eb4f014fcb906039b8f0e6d2d?src=pr)'
p1197
aS':+1:'
p1198
asg14
S'davidmoten:toMultimap-prevent-post-terminal-emissions'
p1199
sbsI4273
(iPull
Pull
p1200
(dp1201
g3
S"  - Add `rebatchRequests` which delegates to `observeOn` with the help of an internal `ImmediateThinScheduler` that only executes tasks immediately. Still not planning to expose an immediate scheduler.\r\n  - Fix `FlowableMapNotification`'s type signature, no need to restrict it to return `Publisher<R>` but can go with `R` itself.\r\n  - Make sure `flatMap` doesn't reorder scalars and elements of the same inner source.\r\n  - Change parameter ordering on `mergeDelayError(Iterator)` overloads."
p1202
sg5
S'2.x: test sync and missing operators (8/02)'
p1203
sg7
(lp1204
S'Bug'
p1205
aS'Enhancement'
p1206
aS'Test'
p1207
asg10
I4273
sg11
(lp1208
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4273?src=pr) is 69.68% (diff: 78.78%)\n> Merging [#4273](https://codecov.io/gh/ReactiveX/RxJava/pull/4273?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4273   diff @@\n==========================================\n  Files           418        419     +1   \n  Lines         30608      30632    +24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4933       4935     +2   \n==========================================\n+ Hits          21283      21345    +62   \n+ Misses         7235       7201    -34   \n+ Partials       2090       2086     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9099f90...eae1d8e](https://codecov.io/gh/ReactiveX/RxJava/compare/9099f90e2281e388385663c37eeaf4b5917987ae...eae1d8ec28f0dbc66099ce2ff57924e2c5a703ec?src=pr)'
p1209
asg14
S'akarnokd:TestSync802_2'
p1210
sbsI4276
(iPull
Pull
p1211
(dp1212
g3
g53
sg5
S'1.x: distinctUntilChanged change erroneous behavior'
p1213
sg7
(lp1214
sg10
I4276
sg11
(lp1215
S"Omg, I'm from phone at the moment, but it looks very critical, right? \r\n\r\nAs far as I see it won't compare old value with new if old is `null`"
p1216
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4276?src=pr) is 84.43% (diff: 100%)\n> Merging [#4276](https://codecov.io/gh/ReactiveX/RxJava/pull/4276?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4276   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14768      14756    -12   \n- Misses         1854       1861     +7   \n- Partials        854        859     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...87b3255](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...87b3255439b9f867888fa4990183185ded771643?src=pr)'
p1217
aS"ok, I'm with computer now and I don't see what's the problem with previous code. Can you please explain?"
p1218
aS'@artem-zinnatullin My guess is that he has a bug in his `equals` implementation and wants to change the library for a workaround.'
p1219
aS"@akarnokd Yes it's the case, it permitted me to pinpoint a bug on my side and I fixed it. But I though that if we could avoid people this behavior change it would be great"
p1220
aS'After this change, all you need to do is reverse `t1` and `t2` to get the same failure again.'
p1221
asg14
S'heetch:fix/distinctUntilChanged'
p1222
sbsI4278
(iPull
Pull
p1223
(dp1224
g3
S'It had a bit of a cascading effect.'
p1225
sg5
S'2.x: Functional interfaces now throw'
p1226
sg7
(lp1227
S'Enhancement'
p1228
asg10
I4278
sg11
(lp1229
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4278?src=pr) is 69.46% (diff: 55.45%)\n> Merging [#4278](https://codecov.io/gh/ReactiveX/RxJava/pull/4278?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.17%**\n\n```diff\n@@                2.x      #4278   diff @@\n==========================================\n  Files           419        418     -1   \n  Lines         30632      30752   +120   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21331      21361    +30   \n- Misses         7219       7307    +88   \n- Partials       2082       2084     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...e60ecd4](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...e60ecd425933e53579c1d233e4f418bae5e9e28e?src=pr)'
p1230
aS"@akarnokd jfyi I'm reviewing this, but it takes a lot of time, will try to finish today"
p1231
aS'Holy long PR batman! :+1:'
p1232
aS'Merged it so Jake & I can progress on other things; just shout out if you found something wrong.'
p1233
asg14
S'akarnokd:FunctionalThrows'
p1234
sbsI4279
(iPull
Pull
p1235
(dp1236
g3
S'Was released a while ago and since it\'s an "important update to v2.14", here it is.\r\n\r\nRelease notes: https://docs.gradle.org/2.14.1/release-notes'
p1237
sg5
S'1.x: update gradle to v2.14.1'
p1238
sg7
(lp1239
S'Build'
p1240
asg10
I4279
sg11
(lp1241
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4279?src=pr) is 84.50% (diff: 100%)\n> Merging [#4279](https://codecov.io/gh/ReactiveX/RxJava/pull/4279?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will not change coverage\n\n```diff\n@@                1.x      #4279   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n  Hits          14768      14768          \n+ Misses         1854       1847     -7   \n- Partials        854        861     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...2c17068](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...2c170685202486e1cca9deeaf778ef33cd9e91d7?src=pr)'
p1242
aS'We had no build issues as far as I know but the known issues on that link worries me.'
p1243
aS'Well, we can try to upgrade, but for example for our Android app written in Kotlin neither 2.14 nor 2.14.1 build correctly in non-clean mode.'
p1244
aS'If you feel like 2.14 is okay for now since no issues happened feel free to close this one. \r\nI just saw that an "old" Gradle version was used in the build, but we can surely wait for one of the next Gradle releases.'
p1245
aS"Thanks for the contribution but we'll wait out this one."
p1246
asg14
S'Mauin:gradle_2.14.1'
p1247
sbsI4281
(iPull
Pull
p1248
(dp1249
g3
S'Equivalent of #4269 '
p1250
sg5
S'1.x: Remove needless static field for initialization in IndexedRingBuffer.'
p1251
sg7
(lp1252
S'Cleanup'
p1253
asg10
I4281
sg11
(lp1254
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4281?src=pr) is 84.48% (diff: 100%)\n> Merging [#4281](https://codecov.io/gh/ReactiveX/RxJava/pull/4281?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4281   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14768      14764     -4   \n- Misses         1854       1855     +1   \n- Partials        854        857     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...56c165b](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...56c165be6c3177fc6e9aa3e3e4de766c487e0f01?src=pr)'
p1255
aS':+1:'
p1256
asg14
S'vanniktech:1.x_cleanup'
p1257
sbsI4282
(iPull
Pull
p1258
(dp1259
g3
g53
sg5
S'1.x: Make Observable takeUntil documentation more explicit'
p1260
sg7
(lp1261
S'Documentation'
p1262
asg10
I4282
sg11
(lp1263
S':+1:'
p1264
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4282?src=pr) is 84.45% (diff: 100%)\n> Merging [#4282](https://codecov.io/gh/ReactiveX/RxJava/pull/4282?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                1.x      #4282   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n+ Hits          14741      14760    +19   \n+ Misses         1874       1853    -21   \n- Partials        861        863     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3690bd7...69cfb2d](https://codecov.io/gh/ReactiveX/RxJava/compare/3690bd77157f31ec15c7cc02f8eb5ac28765e197...69cfb2d6ed9a6df68325ce1e6840ec5a6105e0b6?src=pr)'
p1265
asg14
S'vanniktech:1.x_takeUntil_docs'
p1266
sbsI4285
(iPull
Pull
p1267
(dp1268
g3
g53
sg5
S"2.x: Remove defunct 'Nbp' prefix from Observable interfaces."
p1269
sg7
(lp1270
S'Cleanup'
p1271
asg10
I4285
sg11
(lp1272
S"All other 'Nbp' references are in tests which I'll clean up next."
p1273
aS"Also worth noting that these names are the same now as those in `Flowable`, but you're not only unlikely to use both in the same file, the disambiguation of the two is trivial with an `Observable.` or `Flowable.` qualifier."
p1274
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4285?src=pr) is 69.67% (diff: 100%)\n> Merging [#4285](https://codecov.io/gh/ReactiveX/RxJava/pull/4285?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4285   diff @@\n==========================================\n  Files           419        419          \n  Lines         30632      30632          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21331      21342    +11   \n+ Misses         7219       7203    -16   \n- Partials       2082       2087     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...09b4344](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...09b434434352fef5c8ae533c2546ca9e2e20fc9e?src=pr)'
p1275
aS':+1:'
p1276
aS'What about `NbpFullArbiter` & `NbpQueueDrain`? They are not in the test scope.'
p1277
asg14
S'JakeWharton:jw/nbp-no-more'
p1278
sbsI4287
(iPull
Pull
p1279
(dp1280
g3
g53
sg5
S'2.x: Elide ObservableWrapper for empty and never.'
p1281
sg7
(lp1282
S'Cleanup'
p1283
asg10
I4287
sg11
(lp1284
S"Not sure whether the use of `create` is intentional or not internally. As of right now it's just a trampoline/indirection to `subscribeActual` so if extending `Observable` is fine, I can go through and eliminate all of these."
p1285
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4287?src=pr) is 69.61% (diff: 100%)\n> Merging [#4287](https://codecov.io/gh/ReactiveX/RxJava/pull/4287?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4287   diff @@\n==========================================\n  Files           419        419          \n  Lines         30632      30632          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21331      21325     -6   \n- Misses         7219       7227     +8   \n+ Partials       2082       2080     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...66abf1d](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...66abf1df801c04bc92d1611dddb37614e979b4a1?src=pr)'
p1286
aS':+1:'
p1287
asg14
S'JakeWharton:jw/elide-wrapper'
p1288
sbsI4288
(iPull
Pull
p1289
(dp1290
g3
S'Related: #4280.\r\n\r\nThe `Exceptions.propagate` and `Exceptions.throwIfFatal` are too useful to be hidden in an internal package so this PR moves them into the public `io.reactivex.exceptions` package. The terminal atomics related to Throwable containers lives in the `ExceptionHelper` enum.'
p1291
sg5
S'2.x: move Exceptions to public area, + ExceptionHelper'
p1292
sg7
(lp1293
S'Cleanup'
p1294
asg10
I4288
sg11
(lp1295
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4288?src=pr) is 69.44% (diff: 42.66%)\n> Merging [#4288](https://codecov.io/gh/ReactiveX/RxJava/pull/4288?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4288   diff @@\n==========================================\n  Files           418        419     +1   \n  Lines         30752      30754     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21348      21358    +10   \n+ Misses         7317       7311     -6   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2d36c7b...b8f3884](https://codecov.io/gh/ReactiveX/RxJava/compare/2d36c7b32d90b0d8e04a7e1b1a56ed09883df73a...b8f38842a0351b49b15c7c009b47e62568c2faa4?src=pr)'
p1296
aS'lgtm :+1:'
p1297
asg14
S'akarnokd:ExceptionsSplit'
p1298
sbsI4289
(iPull
Pull
p1299
(dp1300
g3
g53
sg5
S'2.x: Elide more create/callback wrappers in favor of direct Observables.'
p1301
sg7
(lp1302
S'Cleanup'
p1303
asg10
I4289
sg11
(lp1304
S':+1:'
p1305
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4289?src=pr) is 69.51% (diff: 76.92%)\n> Merging [#4289](https://codecov.io/gh/ReactiveX/RxJava/pull/4289?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4289   diff @@\n==========================================\n  Files           419        419          \n  Lines         30754      30755     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21354      21378    +24   \n+ Misses         7311       7292    -19   \n+ Partials       2089       2085     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d4e8f29...fd2d0e9](https://codecov.io/gh/ReactiveX/RxJava/compare/d4e8f29730350efc763521f94f7ea23cf417b0e4...fd2d0e90c8a53680f3395ccc8f115a81e1cf4946?src=pr)'
p1306
aS':+1:'
p1307
asg14
S'JakeWharton:jw/elide-more-create'
p1308
sbsI4290
(iPull
Pull
p1309
(dp1310
g3
g53
sg5
S'2.x: Eliminate an extra allocation and indirection in periodic scheduling.'
p1311
sg7
(lp1312
sg10
I4290
sg11
(lp1313
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4290?src=pr) is 69.46% (diff: 100%)\n> Merging [#4290](https://codecov.io/gh/ReactiveX/RxJava/pull/4290?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4290   diff @@\n==========================================\n  Files           419        419          \n  Lines         30754      30753     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21354      21363     +9   \n+ Misses         7311       7309     -2   \n+ Partials       2089       2081     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d4e8f29...9c4682b](https://codecov.io/gh/ReactiveX/RxJava/compare/d4e8f29730350efc763521f94f7ea23cf417b0e4...9c4682ba91f7fc56681676abc14dc17fbdb40534?src=pr)'
p1314
asg14
S'JakeWharton:jw/eliminate-allocation'
p1315
sbsI4291
(iPull
Pull
p1316
(dp1317
g3
g53
sg5
S'2.x: Promote anonymous Observables to top-level types.'
p1318
sg7
(lp1319
S'Cleanup'
p1320
asg10
I4291
sg11
(lp1321
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4291?src=pr) is 69.40% (diff: 52.94%)\n> Merging [#4291](https://codecov.io/gh/ReactiveX/RxJava/pull/4291?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4291   diff @@\n==========================================\n  Files           420        424     +4   \n  Lines         30761      30778    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4938     +1   \n==========================================\n- Hits          21378      21362    -16   \n- Misses         7296       7331    +35   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...2453679](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...24536793fb4a950e04d0f1056ecf7f5a5011b658?src=pr)'
p1322
aS'I think this is ready. I have another one following it to normalize the implementations of never+empty for all types (they vary slightly currently).'
p1323
aS'This needs rebasing.'
p1324
aS':+1:'
p1325
asg14
S'JakeWharton:jw/top-level-types'
p1326
sbsI4292
(iPull
Pull
p1327
(dp1328
g3
S'Correct annotatoin declaration as well.'
p1329
sg5
S'2.x: Actually apply custom scheduler when applying future.'
p1330
sg7
(lp1331
S'Bug'
p1332
asg10
I4292
sg11
(lp1333
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr) is 69.53% (diff: 100%)\n> Merging [#4292](https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4292   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30755          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21372      21387    +15   \n+ Misses         7296       7282    -14   \n+ Partials       2087       2086     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...28402ef](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...28402eff1b92078605e7169cf5950148cd9812e3?src=pr)'
p1334
asg14
S'JakeWharton:jw/single-scheduler'
p1335
sbsI4293
(iPull
Pull
p1336
(dp1337
g3
g53
sg5
S'2.x: Correct default subscriber name.'
p1338
sg7
(lp1339
S'Cleanup'
p1340
asg10
I4293
sg11
(lp1341
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4293?src=pr) is 69.45% (diff: 25.00%)\n> Merging [#4293](https://codecov.io/gh/ReactiveX/RxJava/pull/4293?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4293   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30755          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21372      21360    -12   \n- Misses         7296       7312    +16   \n+ Partials       2087       2083     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...cb5c64f](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...cb5c64f5602fe54fc6e9f683060f36d70ffde8c7?src=pr)'
p1342
asg14
S'JakeWharton:jw/rename'
p1343
sbsI4294
(iPull
Pull
p1344
(dp1345
g3
g53
sg5
S'2.x: Inline generic-free runnable and long consumer method.'
p1346
sg7
(lp1347
S'Cleanup'
p1348
asg10
I4294
sg11
(lp1349
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4294?src=pr) is 69.42% (diff: 59.25%)\n> Merging [#4294](https://codecov.io/gh/ReactiveX/RxJava/pull/4294?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4294   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30753     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21372      21351    -21   \n- Misses         7296       7314    +18   \n- Partials       2087       2088     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...05c5e0f](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...05c5e0f8cfd5e3f5d2adb5b571ee7d6889cfae93?src=pr)'
p1350
asg14
S'JakeWharton:jw/inline'
p1351
sbsI4295
(iPull
Pull
p1352
(dp1353
g3
S"There's already one for observer, subscriber, and completable subscriber."
p1354
sg5
S'2.x: Add serialized single subscriber wrapper.'
p1355
sg7
(lp1356
S'Enhancement'
p1357
asg10
I4295
sg11
(lp1358
S"This is copy/paste from the completable one which is untested at this point. Tests for both can be added later, I just didn't want to forget about it."
p1359
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4295?src=pr) is 69.41% (diff: 0.00%)\n> Merging [#4295](https://codecov.io/gh/ReactiveX/RxJava/pull/4295?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4295   diff @@\n==========================================\n  Files           419        420     +1   \n  Lines         30755      30767    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4937     +2   \n==========================================\n- Hits          21372      21357    -15   \n- Misses         7296       7326    +30   \n+ Partials       2087       2084     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...143b4b9](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...143b4b9b06ee051f0d3c4cac55dc7515a9a966a5?src=pr)'
p1360
aS"Single and Completable are so simple to serialize that operators do it themselves. For the sake of symmetry, let's have it."
p1361
asg14
S'JakeWharton:jw/serialized-single'
p1362
sbsI4296
(iPull
Pull
p1363
(dp1364
g3
g53
sg5
S'2.x: Observable.range fix Exception message'
p1365
sg7
(lp1366
S'Cleanup'
p1367
asg10
I4296
sg11
(lp1368
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4296?src=pr) is 69.47% (diff: 0.00%)\n> Merging [#4296](https://codecov.io/gh/ReactiveX/RxJava/pull/4296?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4296   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30765          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21379      21373     -6   \n- Misses         7309       7311     +2   \n- Partials       2077       2081     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7beda2a...26c9d4a](https://codecov.io/gh/ReactiveX/RxJava/compare/7beda2a8fac656e468add42f7524a65dbed3c4db...26c9d4ab5a3e01a4b8dec46d4681006def307a54?src=pr)'
p1369
asg14
S'vanniktech:2.x_exception_message_Fix'
p1370
sbsI4297
(iPull
Pull
p1371
(dp1372
g3
S'Addresses #4044'
p1373
sg5
S'2.x: Rename Single Base Interface Types for consistency'
p1374
sg7
(lp1375
S'Cleanup'
p1376
asg10
I4297
sg11
(lp1377
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4297?src=pr) is 69.41% (diff: 46.59%)\n> Merging [#4297](https://codecov.io/gh/ReactiveX/RxJava/pull/4297?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4297   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30764     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21379      21354    -25   \n- Misses         7309       7319    +10   \n- Partials       2077       2091    +14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7beda2a...fa2eef3](https://codecov.io/gh/ReactiveX/RxJava/compare/7beda2a8fac656e468add42f7524a65dbed3c4db...fa2eef39749abd2f718184868ce7082ecfcc9282?src=pr)'
p1378
aS'lgtm :+1:'
p1379
aS':+1:'
p1380
aS"@JakeWharton if you want me to and you haven't started yet I'd continue on that list and rename the other classes / interfaces as well"
p1381
asg14
S'vanniktech:2.x_single_base_interface_type'
p1382
sbsI4298
(iPull
Pull
p1383
(dp1384
g3
S'Noticed in RxAndroid https://github.com/ReactiveX/RxAndroid/pull/316#discussion_r73783555'
p1385
sg5
S'2.x: Clarify behavior of RxJavaPlugins.reset() in javadoc'
p1386
sg7
(lp1387
S'Documentation'
p1388
asg10
I4298
sg11
(lp1389
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4298?src=pr) is 69.35% (diff: 100%)\n> Merging [#4298](https://codecov.io/gh/ReactiveX/RxJava/pull/4298?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.13%**\n\n```diff\n@@                2.x      #4298   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30765          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21380      21337    -43   \n- Misses         7295       7334    +39   \n- Partials       2090       2094     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4aa80cd...879374d](https://codecov.io/gh/ReactiveX/RxJava/compare/4aa80cd444caaa05e91a12db3f1beda2fe158e12...879374dd3dd46429cc3541b5506c0098bc95e66e?src=pr)'
p1390
asg14
S'artem-zinnatullin:patch-1'
p1391
sbsI4299
(iPull
Pull
p1392
(dp1393
g3
S'Addresses #4044'
p1394
sg5
S'2.x: Rename Flowable Base Interface Types for consistency'
p1395
sg7
(lp1396
S'Cleanup'
p1397
asg10
I4299
sg11
(lp1398
S'lgtm :+1:'
p1399
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4299?src=pr) is 69.44% (diff: 100%)\n> Merging [#4299](https://codecov.io/gh/ReactiveX/RxJava/pull/4299?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4299   diff @@\n==========================================\n  Files           420        420          \n  Lines         30764      30763     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21375      21363    -12   \n- Misses         7303       7318    +15   \n+ Partials       2086       2082     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ed9a2c4...d5941bb](https://codecov.io/gh/ReactiveX/RxJava/compare/ed9a2c4b9de311929f2d8d5e37c3e078cb85db07...d5941bb6aa887727f4974e0b4fc5254ef3b9d984?src=pr)'
p1400
aS':+1:'
p1401
asg14
S'vanniktech:2.x_flowable_base_interface_type'
p1402
sbsI4300
(iPull
Pull
p1403
(dp1404
g3
S'Addresses #4044.'
p1405
sg5
S'2.x: Rename Observable Base Interface Types for consistency'
p1406
sg7
(lp1407
S'Cleanup'
p1408
asg10
I4300
sg11
(lp1409
S'There are a large amount of compilation errors.'
p1410
aS'Rebased against 2.x and re-did the last changes.'
p1411
aS'looks good this time :+1:'
p1412
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4300?src=pr) is 69.42% (diff: 98.00%)\n> Merging [#4300](https://codecov.io/gh/ReactiveX/RxJava/pull/4300?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4300   diff @@\n==========================================\n  Files           420        420          \n  Lines         30762      30761     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21358      21357     -1   \n- Misses         7319       7322     +3   \n+ Partials       2085       2082     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e81d399...59f3a25](https://codecov.io/gh/ReactiveX/RxJava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f...59f3a259b1d7340db085c1fd11ad6a7a39285f2c?src=pr)'
p1413
aS':+1:'
p1414
asg14
S'vanniktech:2.x_observable_base_interface_type'
p1415
sbsI4301
(iPull
Pull
p1416
(dp1417
g3
S'To unblock #4300 '
p1418
sg5
S'2.x: Rename ObservableSource to ObservableWithUpstream'
p1419
sg7
(lp1420
S'Cleanup'
p1421
asg10
I4301
sg11
(lp1422
S'lgtm :+1:'
p1423
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4301?src=pr) is 69.40% (diff: 100%)\n> Merging [#4301](https://codecov.io/gh/ReactiveX/RxJava/pull/4301?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4301   diff @@\n==========================================\n  Files           420        420          \n  Lines         30763      30763          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21349      21350     +1   \n- Misses         7326       7327     +1   \n+ Partials       2088       2086     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2037399...ce8d871](https://codecov.io/gh/ReactiveX/RxJava/compare/20373999c6ef718878e40769b27bb787f70c5938...ce8d871d1b2728e6864d3289f9588c16bdfbe498?src=pr)'
p1424
asg14
S'vanniktech:2.x_rename_ObservableSource'
p1425
sbsI4302
(iPull
Pull
p1426
(dp1427
g3
S'Addresses #4044 '
p1428
sg5
S'2.x: Rename Completable Base Interface Types for consistency'
p1429
sg7
(lp1430
S'Cleanup'
p1431
asg10
I4302
sg11
(lp1432
S':+1:'
p1433
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4302?src=pr) is 69.37% (diff: 93.75%)\n> Merging [#4302](https://codecov.io/gh/ReactiveX/RxJava/pull/4302?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4302   diff @@\n==========================================\n  Files           420        420          \n  Lines         30763      30762     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21349      21341     -8   \n- Misses         7326       7330     +4   \n- Partials       2088       2091     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2037399...5521f99](https://codecov.io/gh/ReactiveX/RxJava/compare/20373999c6ef718878e40769b27bb787f70c5938...5521f996085a6c73b7aa6d5d5e48e73624ed253c?src=pr)'
p1434
aS':+1:'
p1435
asg14
S'vanniktech:2.x_completable_base_interface_type'
p1436
sbsI4303
(iPull
Pull
p1437
(dp1438
g3
g53
sg5
S'2.x: Move single and completable observers to correct package.'
p1439
sg7
(lp1440
S'Cleanup'
p1441
asg10
I4303
sg11
(lp1442
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4303?src=pr) is 69.44% (diff: 100%)\n> Merging [#4303](https://codecov.io/gh/ReactiveX/RxJava/pull/4303?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4303   diff @@\n==========================================\n  Files           420        420          \n  Lines         30762      30762          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21358      21362     +4   \n- Misses         7319       7322     +3   \n+ Partials       2085       2078     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e81d399...93b4a6b](https://codecov.io/gh/ReactiveX/RxJava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f...93b4a6bf4ff03cee944fa93c451031496bea7305?src=pr)'
p1443
asg14
S'JakeWharton:jw/correct-package'
p1444
sbsI4304
(iPull
Pull
p1445
(dp1446
g3
S'Now every file has a license header.'
p1447
sg5
S'2.x: Add missing license headers'
p1448
sg7
(lp1449
S'Cleanup'
p1450
asg10
I4304
sg11
(lp1451
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4304?src=pr) is 69.36% (diff: 100%)\n> Merging [#4304](https://codecov.io/gh/ReactiveX/RxJava/pull/4304?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4304   diff @@\n==========================================\n  Files           420        420          \n  Lines         30761      30761          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21372      21338    -34   \n- Misses         7299       7329    +30   \n- Partials       2090       2094     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b575565...d54aa56](https://codecov.io/gh/ReactiveX/RxJava/compare/b575565fdebd48c28ef13e9aad03bf01b4ccd96e...d54aa56c8ccebdf3bee56c9b6bea20c5dd1e7d93?src=pr)'
p1452
asg14
S'vanniktech:2.x_missing_licenses'
p1453
sbsI4305
(iPull
Pull
p1454
(dp1455
g3
g53
sg5
S"2.x: Rename source/publisher wrapper class to more semantic 'from' name."
p1456
sg7
(lp1457
S'Cleanup'
p1458
asg10
I4305
sg11
(lp1459
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4305?src=pr) is 69.41% (diff: 79.16%)\n> Merging [#4305](https://codecov.io/gh/ReactiveX/RxJava/pull/4305?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4305   diff @@\n==========================================\n  Files           420        420          \n  Lines         30761      30761          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21372      21353    -19   \n- Misses         7299       7319    +20   \n+ Partials       2090       2089     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b575565...9e42e92](https://codecov.io/gh/ReactiveX/RxJava/compare/b575565fdebd48c28ef13e9aad03bf01b4ccd96e...9e42e92596fb19865a8e3b47084622a67e34a8e4?src=pr)'
p1460
aS':+1:'
p1461
asg14
S'JakeWharton:jw/from-source'
p1462
sbsI4307
(iPull
Pull
p1463
(dp1464
g3
g53
sg5
S'2.x: Promote lift implementations to top-level types.'
p1465
sg7
(lp1466
S'Cleanup'
p1467
asg10
I4307
sg11
(lp1468
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4307?src=pr) is 69.53% (diff: 100%)\n> Merging [#4307](https://codecov.io/gh/ReactiveX/RxJava/pull/4307?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4307   diff @@\n==========================================\n  Files           420        424     +4   \n  Lines         30761      30778    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21378      21403    +25   \n+ Misses         7296       7289     -7   \n+ Partials       2087       2086     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...226e178](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...226e178e5a9249bd04b01cf4decdcf4438286c35?src=pr)'
p1469
asg14
S'JakeWharton:jw/lift-to-top-level'
p1470
sbsI4308
(iPull
Pull
p1471
(dp1472
g3
g53
sg5
S'2.x: Promote Observable to Single/Flowable adapters to top-level types.'
p1473
sg7
(lp1474
S'Cleanup'
p1475
asg10
I4308
sg11
(lp1476
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4308?src=pr) is 69.40% (diff: 0.00%)\n> Merging [#4308](https://codecov.io/gh/ReactiveX/RxJava/pull/4308?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4308   diff @@\n==========================================\n  Files           420        422     +2   \n  Lines         30761      30771    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21378      21358    -20   \n- Misses         7296       7328    +32   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...565099c](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...565099c20ee0471bd8b25057d975cbc935bc6463?src=pr)'
p1477
asg14
S'JakeWharton:jw/more-top-level-types'
p1478
sbsI4309
(iPull
Pull
p1479
(dp1480
g3
S'As wanted in #4306 '
p1481
sg5
S'2.x: Remove unused exceptions in public API'
p1482
sg7
(lp1483
S'Cleanup'
p1484
asg10
I4309
sg11
(lp1485
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4309?src=pr) is 69.45% (diff: 0.00%)\n> Merging [#4309](https://codecov.io/gh/ReactiveX/RxJava/pull/4309?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                2.x      #4309   diff @@\n==========================================\n  Files           426        422     -4   \n  Lines         30788      30768    -20   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4927    -10   \n==========================================\n+ Hits          21365      21371     +6   \n+ Misses         7335       7324    -11   \n+ Partials       2088       2073    -15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fe2445d...71f28a0](https://codecov.io/gh/ReactiveX/RxJava/compare/fe2445d0009f000cb9173cd97a74c0455fed1fc1...71f28a0cec1ddf7e32b8493d6801c759c51d4208?src=pr)'
p1486
aS'/cc @JakeWharton '
p1487
aS':+1: if the test changes are acceptable for your setup'
p1488
aS':+1:'
p1489
asg14
S'vanniktech:2.x_cleanup_exceptions'
p1490
sbsI4310
(iPull
Pull
p1491
(dp1492
g3
S'This PR fixes the case when a call to request() prevented cancellation of the arbiter if the call never returned, thus locking out the drain loop from the cancellation call.\r\n\r\nThe PR makes sure `request()` is only called outside the guarded region.\r\n\r\n1.x is not affected because unsubscription and requesting go on separate "channels".\r\n\r\nThe PR also fixes `FlowableRedo` by serializing the repeat signal `Processor`.'
p1493
sg5
S'2.x: fix SubscriptionArbiter reentrancy/cancel bug'
p1494
sg7
(lp1495
S'Bug'
p1496
asg10
I4310
sg11
(lp1497
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4310?src=pr) is 69.38% (diff: 94.73%)\n> Merging [#4310](https://codecov.io/gh/ReactiveX/RxJava/pull/4310?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4310   diff @@\n==========================================\n  Files           426        426          \n  Lines         30788      30792     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4938     +1   \n==========================================\n+ Hits          21365      21366     +1   \n- Misses         7335       7338     +3   \n  Partials       2088       2088          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fe2445d...6422b01](https://codecov.io/gh/ReactiveX/RxJava/compare/fe2445d0009f000cb9173cd97a74c0455fed1fc1...6422b01c6f2b75893301a10691c879e596934361?src=pr)'
p1498
aS':+1:'
p1499
asg14
S'akarnokd:SubscriptionArbiterFix'
p1500
sbsI4311
(iPull
Pull
p1501
(dp1502
g3
S'The `ExecutorScheduler` wrapper did not call the `RxJavaHooks.onScheduledAction()` to decorate actions sent to a custom scheduler.'
p1503
sg5
S'1.x: Schedulers.from() to call RxJavaHooks.onScheduleAction'
p1504
sg7
(lp1505
S'Bug'
p1506
asg10
I4311
sg11
(lp1507
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4311?src=pr) is 84.43% (diff: 100%)\n> Merging [#4311](https://codecov.io/gh/ReactiveX/RxJava/pull/4311?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4311   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17478     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14766      14757     -9   \n- Misses         1851       1863    +12   \n+ Partials        859        858     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [27c782d...970a609](https://codecov.io/gh/ReactiveX/RxJava/compare/27c782dc4536ca318ffe0b698df6e5479e8ae4e9...970a6092c39010fab65c09004c379ec8db0df10a?src=pr)'
p1508
aS':+1:'
p1509
asg14
S'akarnokd:CustomSchedulerHookFix'
p1510
sbsI4313
(iPull
Pull
p1511
(dp1512
g3
g53
sg5
S'2.x: Update observable wrapper to correct name to fix compilation.'
p1513
sg7
(lp1514
sg10
I4313
sg11
(lp1515
S'Thanks, already hotfixed in https://github.com/ReactiveX/RxJava/commit/bf1cfcb5fee96c0c2c342a298a540ee59eb1233f'
p1516
aS'Perfect. Thanks!'
p1517
asg14
S'JakeWharton:jw/fix-build'
p1518
sbsI4314
(iPull
Pull
p1519
(dp1520
g3
g53
sg5
S'2.x: Rename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream.'
p1521
sg7
(lp1522
S'Cleanup'
p1523
asg10
I4314
sg11
(lp1524
S':+1:'
p1525
asg14
S'JakeWharton:jw/with-upstream'
p1526
sbsI4315
(iPull
Pull
p1527
(dp1528
g3
g53
sg5
S'2.x: Use ArrayListSupplier in more places, add HashMapSupplier.'
p1529
sg7
(lp1530
S'Enhancement'
p1531
asg10
I4315
sg11
(lp1532
sg14
S'JakeWharton:jw/collection-suppliers'
p1533
sbsI4316
(iPull
Pull
p1534
(dp1535
g3
g53
sg5
S'2.x: Normalize empty and never sources.'
p1536
sg7
(lp1537
S'Cleanup'
p1538
asg10
I4316
sg11
(lp1539
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4316?src=pr) is 69.37% (diff: 75.00%)\n> Merging [#4316](https://codecov.io/gh/ReactiveX/RxJava/pull/4316?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4316   diff @@\n==========================================\n  Files           427        428     +1   \n  Lines         30777      30784     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21364      21357     -7   \n- Misses         7334       7348    +14   \n  Partials       2079       2079          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0e0edb5...ab99ab1](https://codecov.io/gh/ReactiveX/RxJava/compare/0e0edb57287fbe7adeb1617fd1f713fed5dbeb53...ab99ab1a1153a7113a969499c7203abf0413cac0?src=pr)'
p1540
asg14
S'JakeWharton:jw/normalize-empty-and-never'
p1541
sbsI4317
(iPull
Pull
p1542
(dp1543
g3
S'This is a proposal to solve #4255 but for 2.x and closes #4286 built around one goal: make the `create` methods actually usable by developers!\r\n\r\nCurrently the advice given to most developers using 1.x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation, and even then avoid it if possible. This method is a trap that most new developers fall into. _The method is named "create", after all, so it must be how I create these things!_ I want to make that statement not only correct, but advisable (at least when the still-convenient "from" methods are not suitable, such as when wrapping callback-based APIs).\r\n\r\nBecause `Observable`, `Single`, and `Completable` are backpressure-free, this amounts to just suppressing downstream notifications when disposed. This doesn\'t seem too controversial.\r\n\r\nThe most controversial part is that I have renamed `Flowable.fromAsync` to `Flowable.create` thus making it the canonical way for users to create `Flowable`s directly. I\'m much less opinionated on this change, but it felt wrong to have an `Flowable.unsafeCreate` with no associated `create` and `fromAsync` is the "safest" version we have.'
p1544
sg5
S'2.x: Rename create to unsafeCreate, add "safe" create methods.'
p1545
sg7
(lp1546
S'Cleanup'
p1547
aS'Enhancement'
p1548
asg10
I4317
sg11
(lp1549
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4317?src=pr) is 69.31% (diff: 32.38%)\n> Merging [#4317](https://codecov.io/gh/ReactiveX/RxJava/pull/4317?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.18%**\n\n```diff\n@@                2.x      #4317   diff @@\n==========================================\n  Files           428        431     +3   \n  Lines         30784      30866    +82   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4940    +11   \n==========================================\n  Hits          21395      21395          \n- Misses         7315       7394    +79   \n- Partials       2074       2077     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...1c051b8](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...1c051b8c330e8368a6240ff3985237cc1960ad37?src=pr)'
p1550
aS'I think it\'s also important to point out I replaced `Consumer<AsynEmitter<T>>` with `FlowableSource<T>` for parity with other "safe" `create` method parameter types. The unsafe variant still takes a raw `Publisher<T>`, however.'
p1551
aS':heart::heart::heart:'
p1552
aS':+1:'
p1553
asg14
S'JakeWharton:jw/safe-create-methods'
p1554
sbsI4318
(iPull
Pull
p1555
(dp1556
g3
g53
sg5
S'2.x: Switch (almost) all chain operators to FlowableWithUpstream.'
p1557
sg7
(lp1558
S'Cleanup'
p1559
asg10
I4318
sg11
(lp1560
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4318?src=pr) is 69.42% (diff: 100%)\n> Merging [#4318](https://codecov.io/gh/ReactiveX/RxJava/pull/4318?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4318   diff @@\n==========================================\n  Files           428        428          \n  Lines         30784      30718    -66   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21395      21325    -70   \n- Misses         7315       7326    +11   \n+ Partials       2074       2067     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...fa51182](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...fa51182b3a3e73d2ed2a78309822e2490adfb0c6?src=pr)'
p1561
asg14
S'JakeWharton:jw/flowable-with-upstream'
p1562
sbsI4319
(iPull
Pull
p1563
(dp1564
g3
g53
sg5
S'2.x: Switch (almost) all remaining chain operators to ObservableWithUpstream.'
p1565
sg7
(lp1566
S'Cleanup'
p1567
asg10
I4319
sg11
(lp1568
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4319?src=pr) is 69.48% (diff: 90.47%)\n> Merging [#4319](https://codecov.io/gh/ReactiveX/RxJava/pull/4319?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4319   diff @@\n==========================================\n  Files           428        428          \n  Lines         30784      30769    -15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21395      21379    -16   \n- Misses         7315       7327    +12   \n+ Partials       2074       2063    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...8f11890](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...8f1189056f8d568202e76ca9f484968c271c04ff?src=pr)'
p1569
asg14
S'JakeWharton:jw/observable-with-upstream'
p1570
sbsI4322
(iPull
Pull
p1571
(dp1572
g3
S'This PR adds an ~~`assertAndConsume`~~ `assertValuesAndClear` method to `TestSubscriber` to assert on value content and then clear the internal value list. This helps asserting on received values without the need to list all previously seen values in `assertValues`. \r\n\r\nOn a sidenote, `getOnNextEvents()` returns the internal list and one can call `clear()` on it.'
p1573
sg5
S'1.x: add TestSubscriber.assertValuesAndClear'
p1574
sg7
(lp1575
S'Enhancement'
p1576
aS'Test'
p1577
asg10
I4322
sg11
(lp1578
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4322?src=pr) is 84.31% (diff: 80.00%)\n> Merging [#4322](https://codecov.io/gh/ReactiveX/RxJava/pull/4322?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.15%**\n\n```diff\n@@                1.x      #4322   diff @@\n==========================================\n  Files           268        270     +2   \n  Lines         17478      17517    +39   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2678    +14   \n==========================================\n+ Hits          14764      14770     +6   \n- Misses         1853       1892    +39   \n+ Partials        861        855     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...7fc11a3](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...7fc11a392949a8c0d7a61860e762e987c19e8462?src=pr)'
p1579
aS':+1:'
p1580
aS'@JakeWharton / @zsxwing / @vanniktech can you PTAL? Would be great if we could include it in 1.1.9.'
p1581
aS'Old method name was better'
p1582
asg14
S'akarnokd:TestAssertConsume'
p1583
sbsI4323
(iPull
Pull
p1584
(dp1585
g3
g53
sg5
S'2.x: No scheduler change happens for timeInterval() and timestamp().'
p1586
sg7
(lp1587
S'Cleanup'
p1588
asg10
I4323
sg11
(lp1589
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4323?src=pr) is 69% (diff: 100%)\n> Merging [#4323](https://codecov.io/gh/ReactiveX/RxJava/pull/4323?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<1%**\n\n```diff\n@@                2.x      #4323   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n+ Hits          21295      21300     +5   \n- Misses         7410       7411     +1   \n+ Partials       2080       2074     -6   \n```\n\n\n![Sunburst](https://codecov.io/gh/ReactiveX/RxJava/pull/4323/graphs/sunburst.svg?size=150&src=pr)\n\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3a3d4df...c3d1c23](https://codecov.io/gh/ReactiveX/RxJava/compare/3a3d4df907f8e54d628b827a65f4869df3329e98...c3d1c23ab3317f23fc7ed7a209d71ee2d40c441b?src=pr)'
p1590
asg14
S'JakeWharton:jw/scheduler-none'
p1591
sbsI4324
(iPull
Pull
p1592
(dp1593
g3
S'Also rename Publisher->Completable factory method and operator implementation to match other stream types.'
p1594
sg5
S'2.x: Skip static factories when converting between stream types.'
p1595
sg7
(lp1596
S'Cleanup'
p1597
asg10
I4324
sg11
(lp1598
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4324?src=pr) is 69.17% (diff: 87.50%)\n> Merging [#4324](https://codecov.io/gh/ReactiveX/RxJava/pull/4324?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4324   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21305      21294    -11   \n- Misses         7400       7419    +19   \n+ Partials       2080       2072     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7518541...d0759f7](https://codecov.io/gh/ReactiveX/RxJava/compare/7518541a3dc68347a9bff146fefeab951c6669ae...d0759f7c2772db55a0dd581549936ae19b69922a?src=pr)'
p1599
asg14
S'JakeWharton:jw/skip-static-factories'
p1600
sbsI4325
(iPull
Pull
p1601
(dp1602
g3
g53
sg5
S'2.x: Switch the connected stream types to track their upstream.'
p1603
sg7
(lp1604
S'Cleanup'
p1605
asg10
I4325
sg11
(lp1606
S'Also there is a compilation error with this.'
p1607
asg14
S'JakeWharton:jw/connectable-with-upstream'
p1608
sbsI4326
(iPull
Pull
p1609
(dp1610
g3
S'This allows use with types that do not extend directly from their base stream types.'
p1611
sg5
S"2.x: Extract 'WithUpstream' interfaces."
p1612
sg7
(lp1613
S'Cleanup'
p1614
asg10
I4326
sg11
(lp1615
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4326?src=pr) is 69.12% (diff: 75.00%)\n> Merging [#4326](https://codecov.io/gh/ReactiveX/RxJava/pull/4326?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4326   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21283      21281     -2   \n+ Misses         7425       7424     -1   \n- Partials       2077       2080     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [344453f...7945189](https://codecov.io/gh/ReactiveX/RxJava/compare/344453fe06842ff1c91b0a981c50056ce5531d18...7945189c94cfda13bbae733299424d4d5c46aa3f?src=pr)'
p1616
asg14
S'JakeWharton:jw/extract-with-upstream-interfaces'
p1617
sbsI4328
(iPull
Pull
p1618
(dp1619
g3
S"This PR reduces the allocation in `MultipleAssignmentSubscription` and `SerialSubscription` by introducing a shared, compact underlying container `SequentialSubscription`.\r\n\r\nI've updated `Worker.schedulePeriodically` to use it directly.\r\n\r\nIn addition, there is a behavior change with `MultipleAssignmentSubscription`: it no longer retains the last `Subscription` as it was likely to cause retention problems (and otherwise didn't make sense to me).\r\n\r\nThe `SequentialSubscription` feature weak versions of the mutation methods that don't retry if there was a concurrent mutation: for some operations, not winning such races is fine.\r\n\r\n/cc @JakeWharton @davidmoten @artem-zinnatullin "
p1620
sg5
S'1.x: compact MultipleAssignment- and Serial-Subscriptions'
p1621
sg7
(lp1622
S'Performance: allocation'
p1623
asg10
I4328
sg11
(lp1624
S':+1:'
p1625
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4328?src=pr) is 84.38% (diff: 56.57%)\n> Merging [#4328](https://codecov.io/gh/ReactiveX/RxJava/pull/4328?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4328   diff @@\n==========================================\n  Files           268        270     +2   \n  Lines         17478      17500    +22   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2677    +13   \n==========================================\n+ Hits          14764      14768     +4   \n- Misses         1853       1876    +23   \n+ Partials        861        856     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...cccf0ad](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...cccf0ad1d3b0cbe672afaf8715c8b4c1e40c38ae?src=pr)'
p1626
asg14
S'akarnokd:SubscriptionLowAlloc'
p1627
sbsI4330
(iPull
Pull
p1628
(dp1629
g3
S'See #4329 \r\n\r\nI also adjusted the test as it was testing the wrong thing before.'
p1630
sg5
S'Added Observable.concat(Iterable)'
p1631
sg7
(lp1632
S'Enhancement'
p1633
asg10
I4330
sg11
(lp1634
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4330?src=pr) is 84.51% (diff: 100%)\n> Merging [#4330](https://codecov.io/gh/ReactiveX/RxJava/pull/4330?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4330   diff @@\n==========================================\n  Files           268        268          \n  Lines         17478      17479     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n+ Hits          14764      14773     +9   \n+ Misses         1853       1847     -6   \n+ Partials        861        859     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...404f4fd](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...404f4fd1dde17186d8c65b36ef9ec0c411fef56d?src=pr)'
p1635
aS':+1:'
p1636
aS'Thanks!'
p1637
asg14
S'PaulWoitaschek:1.x'
p1638
sbsI4333
(iPull
Pull
p1639
(dp1640
g3
g53
sg5
S"2.x: Add 'WithUpstream' interfaces to connectable implementations."
p1641
sg7
(lp1642
S'Enhancement'
p1643
asg10
I4333
sg11
(lp1644
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4333?src=pr) is 69.15% (diff: 0.00%)\n> Merging [#4333](https://codecov.io/gh/ReactiveX/RxJava/pull/4333?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4333   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30789     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21309      21291    -18   \n- Misses         7397       7428    +31   \n+ Partials       2079       2070     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d37f29e...890c9f6](https://codecov.io/gh/ReactiveX/RxJava/compare/d37f29e420003c8e040669e76f99e1f9c2de4876...890c9f69269a2c65058a06bbc74ac95b1fd2110a?src=pr)'
p1645
asg14
S'JakeWharton:jw/connectable-with-upstream'
p1646
sbsI4337
(iPull
Pull
p1647
(dp1648
g3
S'Move `DisposableObserver` to `io.reactivex.observers` + some documentation.\r\n\r\nRelated: #4082.'
p1649
sg5
S'2.x: move DisposableObserver to public area, add some javadocs'
p1650
sg7
(lp1651
S'Cleanup'
p1652
asg10
I4337
sg11
(lp1653
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4337?src=pr) is 69.16% (diff: 100%)\n> Merging [#4337](https://codecov.io/gh/ReactiveX/RxJava/pull/4337?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4337   diff @@\n==========================================\n  Files           431        431          \n  Lines         30789      30789          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n+ Hits          21283      21295    +12   \n+ Misses         7428       7409    -19   \n- Partials       2078       2085     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [125cf73...30b1b4a](https://codecov.io/gh/ReactiveX/RxJava/compare/125cf735be19e6410f95474ec18886d78385e3a5...30b1b4ae08e1949cc2e9a761e51f7145b4fbbe29?src=pr)'
p1654
aS":+1:\r\n\r\nHaving these in the public API make it seem like `AsyncObserver` becomes obsolete in the case where it's not managing any additional resources. Should we rename it to `ResourceObserver` (or something) and have it always manage resources?"
p1655
aS'Sure, will you do it?'
p1656
aS'Yep!'
p1657
asg14
S'akarnokd:DisposableObserverMove'
p1658
sbsI4338
(iPull
Pull
p1659
(dp1660
g3
S"Rename them to have a 'Resource' prefix."
p1661
sg5
S'2.x: Remove conditional resource management from async listeners.'
p1662
sg7
(lp1663
S'Cleanup'
p1664
asg10
I4338
sg11
(lp1665
S"The value of and distinction between the 'Resource' listeners, 'Default' listeners, and 'Disposable' listeners seems very low. Do we need all these individual types?"
p1666
aS"I believe the minimum we require is the ability to dispose a `Subscriber` because that's expected the most. I don't think associating resources with or allowing async requesting is that common."
p1667
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4338?src=pr) is 69.17% (diff: 30.00%)\n> Merging [#4338](https://codecov.io/gh/ReactiveX/RxJava/pull/4338?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4338   diff @@\n==========================================\n  Files           431        431          \n  Lines         30789      30775    -14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4934     -6   \n==========================================\n- Hits          21291      21290     -1   \n+ Misses         7422       7403    -19   \n- Partials       2076       2082     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2c3ec38...054d24a](https://codecov.io/gh/ReactiveX/RxJava/compare/2c3ec3802ef27e1cb2b66c87f51a1aab427b2bba...054d24a34bcf2e444a91d71eaf9765a56487b236?src=pr)'
p1668
aS'I leave it to you to remove the unnecessary; we can add them back later or better yet, they can live in a separate library.'
p1669
aS'I have a 2.x "dumping ground" for leftovers: https://github.com/akarnokd/RxJava2Extensions so we don\'t lose things.'
p1670
asg14
S'JakeWharton:jw/async-to-resource'
p1671
sbsI4342
(iPull
Pull
p1672
(dp1673
g3
S"This PR adds the Javadoc to the `Flowable` plus removes some deprecated or unnecessary operator overloads.\r\n\r\nBy the sheer amount of documentation, `Flowable` can't be reviewed on GitHub. Once the CI passes, I'll merge it and people who wish to review it can immediately start a PR to fix any documentation mistakes."
p1674
sg5
S'2.x: sync javadoc of Flowable'
p1675
sg7
(lp1676
S'Cleanup'
p1677
aS'Documentation'
p1678
asg10
I4342
sg11
(lp1679
sg14
S'akarnokd:JavadocSync'
p1680
sbsI4343
(iPull
Pull
p1681
(dp1682
g3
S'- Remove tabs indent and redundant space.\r\n  - Currently tabs and spaces are mixed up in the code so just unify them.'
p1683
sg5
S'Remove tabs indent and redundant space.'
p1684
sg7
(lp1685
S'Cleanup'
p1686
asg10
I4343
sg11
(lp1687
S'Thanks!'
p1688
asg14
S'hotchemi:tweak_indent'
p1689
sbsI4344
(iPull
Pull
p1690
(dp1691
g3
g53
sg5
S'2.x: Fix some typos in Flowable + Observer documentation'
p1692
sg7
(lp1693
S'Cleanup'
p1694
asg10
I4344
sg11
(lp1695
sg14
S'vanniktech:2.x_typos'
p1696
sbsI4345
(iPull
Pull
p1697
(dp1698
g3
S'Update CHANGES.md with the release log.'
p1699
sg5
S'Release 1.1.9 update changes.md'
p1700
sg7
(lp1701
S'Information'
p1702
asg10
I4345
sg11
(lp1703
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4345?src=pr) is 84.36% (diff: 100%)\n> Merging [#4345](https://codecov.io/gh/ReactiveX/RxJava/pull/4345?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4345   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17517          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2678          \n==========================================\n- Hits          14786      14779     -7   \n- Misses         1876       1884     +8   \n+ Partials        855        854     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3c7f41c...64d94f5](https://codecov.io/gh/ReactiveX/RxJava/compare/3c7f41cd20d36b2e2e32141eaddbc1628d4667db...64d94f54458b3575dc366d0797ba1485af37c1b4?src=pr)'
p1704
asg14
S'akarnokd:Release119Changes'
p1705
sbsI4346
(iPull
Pull
p1706
(dp1707
g3
S"This PR adds Javadoc to `Observable` by mainly copying and adjusting `Flowable`'s documentation.\r\n\r\nIn addition, the method set was synced as well and placeholders added for unported 1.x operators.\r\n\r\nThe drill is the same as before: after CI, I merge this and reviewers can post PRs with necessary fixes."
p1708
sg5
S"2.x: sync Javadoc of Observable (copy&adjust Flowable's)"
p1709
sg7
(lp1710
S'Cleanup'
p1711
aS'Documentation'
p1712
asg10
I4346
sg11
(lp1713
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4346?src=pr) is 68.97% (diff: 100%)\n> Merging [#4346](https://codecov.io/gh/ReactiveX/RxJava/pull/4346?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4346   diff @@\n==========================================\n  Files           432        432          \n  Lines         30780      30809    +29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4934       4935     +1   \n==========================================\n- Hits          21254      21251     -3   \n- Misses         7445       7489    +44   \n+ Partials       2081       2069    -12   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [44720f9...ded9cfd](https://codecov.io/gh/ReactiveX/RxJava/compare/44720f92278e1bab75cbebe1b5c191f9255c7a91...ded9cfd429707bcbe18878bf9f0d82d8969bf7e3?src=pr)'
p1714
asg14
S'akarnokd:JavadocSyncObservable'
p1715
sbsI4349
(iPull
Pull
p1716
(dp1717
g3
g53
sg5
S'2.x: Observable + Flowable fix some typos'
p1718
sg7
(lp1719
S'Cleanup'
p1720
asg10
I4349
sg11
(lp1721
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4349?src=pr) is 68.93% (diff: 100%)\n> Merging [#4349](https://codecov.io/gh/ReactiveX/RxJava/pull/4349?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4349   diff @@\n==========================================\n  Files           432        432          \n  Lines         30809      30809          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21232      21237     +5   \n  Misses         7508       7508          \n+ Partials       2069       2064     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [991ae34...abc9dd4](https://codecov.io/gh/ReactiveX/RxJava/compare/991ae3486ba9509f114a7645429126ef1322634a...abc9dd4b87d6f8daa5e7f1ac8a5ec951b49e6420?src=pr)'
p1722
asg14
S'vanniktech:2.x_typos'
p1723
sbsI4351
(iPull
Pull
p1724
(dp1725
g3
S'When do JUnit testing with RxRingBuffer, we may have Android platform\r\nclasses defined, but contains no Android environment.\r\n\r\nSo when we call PlatformDependent.resolveAndroidApiVersion in JUnit\r\ntesting, an UnsatisfiedLinkError will throw when calling\r\nSystemProperties.native_get(String, String).\r\n\r\nThe UnsatisfiedLinkError is not an Exception, so the test failed because\r\nof an uncatched exception.\r\n\r\nFix this by catch the Throwable instead of Exception to catch Error.'
p1726
sg5
S'Use Throwable to catch Error when get Android version'
p1727
sg7
(lp1728
S'Android'
p1729
asg10
I4351
sg11
(lp1730
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4351?src=pr) is 84.40% (diff: 100%)\n> Merging [#4351](https://codecov.io/gh/ReactiveX/RxJava/pull/4351?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                1.x      #4351   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17517          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2678          \n==========================================\n+ Hits          14767      14786    +19   \n+ Misses         1895       1876    -19   \n  Partials        855        855          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [72c0519...cd8b26b](https://codecov.io/gh/ReactiveX/RxJava/compare/72c051974e68dd08cb93019feacc777ebd98373c...cd8b26b6132cb7b53fdd07407b855138d5cfe3ba?src=pr)'
p1731
aS"Hm, that's strange. What is your testing configuration? I haven't seen such problem with and without Robolectric."
p1732
aS"Finally I found out the root cause of my issue.\r\nI'm using RxJava on our System App, which have using some hidden API in framework. So we 'provided' a dependency for the framework jar file to let build pass.\r\n\r\nBut this breaks the mock of Android Studio when doing JUnit test. Android Studio no longer mock the Build.VERSION.SDK_INT, and calling the real method which will drive to a native method. So the UnsatisfiedLinkError has been throw.\r\n\r\nSorry for the mistake. :)"
p1733
asg14
S'tankery:catch-throwable-get-android-version'
p1734
sbsI4352
(iPull
Pull
p1735
(dp1736
g3
S'This PR adds javadoc to the `Single` methods, fixes a few API differences.'
p1737
sg5
S'2.x: Sync Single javadoc with 1.x'
p1738
sg7
(lp1739
S'Cleanup'
p1740
aS'Documentation'
p1741
asg10
I4352
sg11
(lp1742
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4352?src=pr) is 68.94% (diff: 100%)\n> Merging [#4352](https://codecov.io/gh/ReactiveX/RxJava/pull/4352?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4352   diff @@\n==========================================\n  Files           432        432          \n  Lines         30809      30819    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4936     +1   \n==========================================\n+ Hits          21210      21249    +39   \n+ Misses         7522       7495    -27   \n+ Partials       2077       2075     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [18cef96...ebcd84f](https://codecov.io/gh/ReactiveX/RxJava/compare/18cef96091b60942e2a9dc85aef3eb97bf70f309...ebcd84fae97c9b1ad927d803f20673232c9f898f?src=pr)'
p1743
asg14
S'akarnokd:SingleJavadocSync'
p1744
sbsI4353
(iPull
Pull
p1745
(dp1746
g3
g53
sg5
S'2.x: Accept subclasses of Throwable for asserting failure.'
p1747
sg7
(lp1748
S'Cleanup'
p1749
asg10
I4353
sg11
(lp1750
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4353?src=pr) is 68.99% (diff: 100%)\n> Merging [#4353](https://codecov.io/gh/ReactiveX/RxJava/pull/4353?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4353   diff @@\n==========================================\n  Files           432        432          \n  Lines         30819      30819          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4936          \n==========================================\n+ Hits          21249      21265    +16   \n+ Misses         7498       7486    -12   \n+ Partials       2072       2068     -4   \n```\n\n\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [040345f...5211590](https://codecov.io/gh/ReactiveX/RxJava/compare/040345f604b67d85b76e9540aa601648d048d2d4...5211590f2df09959a68596ae362c3ef9855d70d5?src=pr)'
p1751
asg14
S'JakeWharton:jw/extends'
p1752
sbsI4354
(iPull
Pull
p1753
(dp1754
g3
g53
sg5
S'2.x: Expose values and errors as unmodifiable snapshots not shared mutable lists.'
p1755
sg7
(lp1756
sg10
I4354
sg11
(lp1757
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4354?src=pr) is 68.94% (diff: 100%)\n> Merging [#4354](https://codecov.io/gh/ReactiveX/RxJava/pull/4354?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4354   diff @@\n==========================================\n  Files           432        432          \n  Lines         30819      30819          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4936          \n==========================================\n- Hits          21249      21247     -2   \n- Misses         7498       7502     +4   \n+ Partials       2072       2070     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [040345f...5695b6b](https://codecov.io/gh/ReactiveX/RxJava/compare/040345f604b67d85b76e9540aa601648d048d2d4...5695b6beb5672651bf7e41df9f44c618f138d74e?src=pr)'
p1758
aS'Why?'
p1759
aS"Expose a list which is not only mutable but whose contents may change while you're iterating and/or asserting its contents seems like a recipe for flaky tests."
p1760
aS'If you assert without first making sure the source terminated is also likely to cause test failures. There is the `getValueCount` in 1.x which gives a volatile view of the available number of onNext values that can be safely read from `values()`.'
p1761
aS'I see that you do a snapshot but then why prevent any change to it? Besides, I have tests that have thousands elements which are then [checked for a particular pattern](https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java#L473) by iterating over the shared list (or just sloppily do a [size() on it](https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java#L946)).'
p1762
aS"I'm willing to accept such change if you introduce it as a separate method (or rename-refactor the current `values()` to something else, like `liveValues()` or whatever)."
p1763
aS'Copying may be expensive -> more GC during tests -> more likely CI will be shot down.'
p1764
aS"@JakeWharton I see. In most case, I think the user just checks the list at once. So I think changing it to an immutable list should cover most of cases and it's still a good idea."
p1765
aS'You can extend `TestSubscriber` locally or have an utility method that does what you need:\r\n\r\n```java\r\npublic static <T> List<T> valuesOf(TestSubscriber<T> ts) {\r\n    return Collections.unmodifiableList(new ArrayList<>(ts.values()));\r\n}\r\n```\r\n\r\nI guess IntelliJ will gladly do a static import of the method above.'
p1766
aS'Aaaaand we just hit it.\r\n\r\nProblem:\r\n\r\n```java\r\nts.assertValues("a", "b")\r\n```\r\n\r\nMultithreaded test without proper `await` may result in such message:\r\n\r\n```\r\nNumber of items does not match. Provided: 2 Actual: 2  (!!!!)\r\nProvided values: a, b\r\nActual values: a, b (!!!!!)\r\n```\r\n\r\nSince we operate over mutable list instead of immutable snapshots we have this very interesting exception message that totally confuses user.\r\n\r\nSo I\'m joining Jake\'s side here and vote for immutable snapshots.'
p1767
asg14
S'JakeWharton:jw/unmodifiable'
p1768
sbsI4355
(iPull
Pull
p1769
(dp1770
g3
S'This PR mainly adds `Scheduler:` descriptions to `Completable`, removes deprecated operators or unnecessary aliases. In addition, blocking methods now are named `blockingAwait` and `blockingGet`.'
p1771
sg5
S'2.x: sync Completable javadoc and related changes'
p1772
sg7
(lp1773
S'Cleanup'
p1774
asg10
I4355
sg11
(lp1775
sg14
S'akarnokd:CompletableJavadocSync'
p1776
sbsI4357
(iPull
Pull
p1777
(dp1778
g3
S"Notable changes:\r\n\r\n  - Replace the use of `Runnable` in the base reactive types to `Action` whose `run` method can throw a checked exception.\r\n  - Fix javadoc referencing 1.x types no longer available.\r\n  - The `switchMap` operator has been enhanced to support delaying errors.\r\n  - Update `concat(Iterable)` to use `concatMapDelayError` because Iterable can't throw just anytime but on the boundary, reducing the per-element overhead.\r\n  - `FlowableEmitter` has been enhanced with a `serialize()` method that serializes calls to `onXXX` methods.\r\n  - Factored out `FlowableEmitter.Cancellable` into `io.reactivex.functions` as it will be used by the other base reactive types with their `XEmitter` implementations.\r\n  - Added `AtomicThrowable` with convenience methods that use `ExceptionHelper`'s terminal atomics with `Throwable`s."
p1779
sg5
S'2.x: switch to throwing Action, switchMapDelayError, other cleanup'
p1780
sg7
(lp1781
S'Cleanup'
p1782
aS'Enhancement'
p1783
asg10
I4357
sg11
(lp1784
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4357?src=pr) is 68.65% (diff: 44.48%)\n> Merging [#4357](https://codecov.io/gh/ReactiveX/RxJava/pull/4357?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.21%**\n\n```diff\n@@                2.x      #4357   diff @@\n==========================================\n  Files           432        434     +2   \n  Lines         30815      30952   +137   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4968    +32   \n==========================================\n+ Hits          21224      21251    +27   \n- Misses         7524       7615    +91   \n- Partials       2067       2086    +19   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [059c7e6...c361712](https://codecov.io/gh/ReactiveX/RxJava/compare/059c7e6264de04e2251ea77e39e3fa9d7ac47625...c361712514c11c55f63f983c780567fc0bac429e?src=pr)'
p1785
aS':+1:'
p1786
asg14
S'akarnokd:MissingOps816'
p1787
sbsI4358
(iPull
Pull
p1788
(dp1789
g3
S"This annotation has been accidentally omitted when resolving a conflict during the merging of:\r\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\r\ninto:\r\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\r\n\r\nWe made PRs for both versions 1.x and 2.x.\r\n\r\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html"
p1790
sg5
S'Add missing @Test annotation'
p1791
sg7
(lp1792
S'Test'
p1793
asg10
I4358
sg11
(lp1794
S'Looks like a double post with #4359.'
p1795
aS'The two PRs are for two different versions: 1.x and 2.x. Is one PR really enough?'
p1796
aS'Sorry, overlooked the version tag.'
p1797
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4358?src=pr) is 68.65% (diff: 100%)\n> Merging [#4358](https://codecov.io/gh/ReactiveX/RxJava/pull/4358?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4358   diff @@\n==========================================\n  Files           434        434          \n  Lines         30952      30952          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4968       4968          \n==========================================\n- Hits          21251      21250     -1   \n+ Misses         7628       7626     -2   \n- Partials       2073       2076     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5688cc8...cff0e20](https://codecov.io/gh/ReactiveX/RxJava/compare/5688cc8ad6fb20dde449ba71138de278baba86ea...cff0e20d023c72bedeeeb4e146bb45058e0252fd?src=pr)'
p1798
asg14
S'dimitar-asenov:2.x'
p1799
sbsI4359
(iPull
Pull
p1800
(dp1801
g3
S"This annotation has been accidentally omitted when resolving a conflict during the merging of:\r\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\r\ninto:\r\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\r\n\r\nWe made PRs for both versions 1.x and 2.x.\r\n\r\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html"
p1802
sg5
S'Add missing @Test annotation'
p1803
sg7
(lp1804
S'Test'
p1805
asg10
I4359
sg11
(lp1806
sg14
S'dimitar-asenov:1.x'
p1807
sbsI4360
(iPull
Pull
p1808
(dp1809
g3
S'This PR factors out the anonymous inner classes from the base reactive types and introduces the appropriate classes and methods in `*Helper` enums.'
p1810
sg5
S'2.x: factor out inner classes from the base reactive types'
p1811
sg7
(lp1812
S'Cleanup'
p1813
asg10
I4360
sg11
(lp1814
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4360?src=pr) is 68.65% (diff: 71.45%)\n> Merging [#4360](https://codecov.io/gh/ReactiveX/RxJava/pull/4360?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4360   diff @@\n==========================================\n  Files           434        439     +5   \n  Lines         30952      31116   +164   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4968       4971     +3   \n==========================================\n+ Hits          21252      21363   +111   \n- Misses         7626       7669    +43   \n- Partials       2074       2084    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [176346a...3e474d0](https://codecov.io/gh/ReactiveX/RxJava/compare/176346a8adce3ce1a2eccfd7eb5f6e4305e51587...3e474d06a589ca0cbcb116893241c53ee365e227?src=pr)'
p1815
aS':+1:'
p1816
asg14
S'akarnokd:NoInnerClassesInMain'
p1817
sbsI4361
(iPull
Pull
p1818
(dp1819
g3
S'Notable changes:\r\n\r\n  - Implement the `onBackpressureBuffer` with overflow strategy; change the strategy to plain enum.\r\n  - Additional unit tests from 1.x\r\n  - Implement `publish(Function)` properly to support latecommers.\r\n  - Split `FlowableRedo` into `FlowableRetryWhen` and `FlowableRepeatWhen`.\r\n  - Make sure `take(0)` still triggers upstream subscription that is immediately cancelled.\r\n'
p1820
sg5
S'2.x: test sync, fix retryWhen/redoWhen/publish(Function)'
p1821
sg7
(lp1822
S'Cleanup'
p1823
aS'Enhancement'
p1824
aS'Test'
p1825
asg10
I4361
sg11
(lp1826
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4361?src=pr) is 68.59% (diff: 59.65%)\n> Merging [#4361](https://codecov.io/gh/ReactiveX/RxJava/pull/4361?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4361   diff @@\n==========================================\n  Files           439        442     +3   \n  Lines         31116      31488   +372   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4971       5042    +71   \n==========================================\n+ Hits          21368      21599   +231   \n- Misses         7678       7797   +119   \n- Partials       2070       2092    +22   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6291f59...febf3e4](https://codecov.io/gh/ReactiveX/RxJava/compare/6291f5908f57e271caba226f0c3dbeaecb602794...febf3e4bac19b00b7d29b671b0b3affd166d5a11?src=pr)'
p1827
asg14
S'akarnokd:MissingOps817'
p1828
sbsI4364
(iPull
Pull
p1829
(dp1830
g3
S'Just looking at moving some recent 1.x bug fixes and tests over to 2.x.\r\n\r\nThis is my first PR in 2.x so before I proceed adding more tests from 1.x (to this PR) I want to get some feedback on my approach. In particular in the test `testCollectorFailureDoesNotResultInTwoErrorEmissions` is the `Flowable` creation method ok?'
p1831
sg5
S'2.x collect - handle post terminal events'
p1832
sg7
(lp1833
S'Bug'
p1834
asg10
I4364
sg11
(lp1835
S"If you'd make it more concise, that would be great. Also note that most Flowable operators have an Observable counterpart so it would be nice if such changes would contain the fix & tests for both."
p1836
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4364?src=pr) is 69.33% (diff: 100%)\n> Merging [#4364](https://codecov.io/gh/ReactiveX/RxJava/pull/4364?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4364   diff @@\n==========================================\n  Files           454        454          \n  Lines         32483      32492     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5204       5207     +3   \n==========================================\n+ Hits          22504      22529    +25   \n+ Misses         7776       7764    -12   \n+ Partials       2203       2199     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7a1a4af...2931f24](https://codecov.io/gh/ReactiveX/RxJava/compare/7a1a4afad2984fb95265ec0af061fd1e87f0b75b...2931f242aa3d305ce5642be7320620d24b3638df?src=pr)'
p1837
aS">If you'd make it more concise, that would be great. Also note that most Flowable operators have an Observable counterpart so it would be nice if such changes would contain the fix & tests for both.\r\n\r\nCan do."
p1838
aS'I was trying to avoid this class till now. Will you be able to finish what you wanted till Thursday or may I do it?'
p1839
aS"@akarnokd I rebased but io.reactivex.Optional disappeared and I was using it in tests. I'll add it back in internal test package."
p1840
aS'@akarnokd the work is done for `Flowable` and I have done the work for `Observable` as well but is on my laptop at home so will finish PR tonight (in about 11 hours time).'
p1841
aS"@akarnokd I'm noticing that RxJava 2.x is really slow to compile (2 minutes) in Eclipse 4.5.1 and 4.6 (say after switching branches). Have you noticed that? Got any tips?"
p1842
aS"Please try without `Optional`. Yes Eclipse is slow if you change `Observable` and `Flowable`, it doesn't like the cycle between the base classes and their implementations. Not sure why, maybe collecting metadata makes is much slower."
p1843
aS"I've removed `Optional`. Would you like to assess this PR as it stands without the Observable fix that I can do in another PR? You guys are moving fast (as usual) and keeping PRs open a while is a bit of an obstacle."
p1844
aS':+1:'
p1845
asg14
S'davidmoten:2.x-collect-handle-post-terminal-events'
p1846
sbsI4368
(iPull
Pull
p1847
(dp1848
g3
S'Notable changes:\r\n\r\n  - implemented `withLatestFrom` with multiple other sources (both `Flowable` and `Observable`)\r\n  - added missing `Exceptions.throwIfFatal()` after catching throwables\r\n  - added `SequentialDisposable` and replaced internal use of `SerialDisposable` with it\r\n  - added `package-info.java` to public packages\r\n  - added javadoc to some interfaces and methods\r\n  - removed `@Experimental` tags and set those methods to `@since 2.0`\r\n  - added `HalfSerializer` to deal with single onNext and multiple onError/onComplete callers'
p1849
sg5
S'2.x: add withLatestFrom many, cleanups and other enhancements'
p1850
sg7
(lp1851
S'Cleanup'
p1852
aS'Documentation'
p1853
aS'Enhancement'
p1854
asg10
I4368
sg11
(lp1855
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4368?src=pr) is 68.45% (diff: 62.87%)\n> Merging [#4368](https://codecov.io/gh/ReactiveX/RxJava/pull/4368?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.12%**\n\n```diff\n@@                2.x      #4368   diff @@\n==========================================\n  Files           442        446     +4   \n  Lines         31488      32154   +666   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5042       5092    +50   \n==========================================\n+ Hits          21595      22012   +417   \n- Misses         7797       8033   +236   \n- Partials       2096       2109    +13   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4aab4eb...c2df8ed](https://codecov.io/gh/ReactiveX/RxJava/compare/4aab4ebe3bfca585d370d78b1a6493844854181b...c2df8edb8bde789b4bb207ac52420a1a55b39b22?src=pr)'
p1856
aS':+1:'
p1857
aS'Thanks @JakeWharton !'
p1858
asg14
S'akarnokd:MissingOpsNCleanup818'
p1859
sbsI4370
(iPull
Pull
p1860
(dp1861
g3
S'This PR removes the `Try` and `Optional` classes and (re)introduces `Notification<T>`.\r\n\r\nThere are several ways to implement it. This PR uses the abstract class + private subclasses approach that saves on instance size.\r\n\r\nRelated discussion: #4365.'
p1862
sg5
S'2.x: remove Try+Optional, introduce Notification'
p1863
sg7
(lp1864
S'Enhancement'
p1865
asg10
I4370
sg11
(lp1866
S'> This PR uses the abstract class + private subclasses approach that saves on instance size.\r\n\r\nThis seems like it would prevent a lot of inlining of the simple "is"ers and "get"ers because the callsites become polymorphic instead of monomorphic.\r\n\r\nWhen I check the object layout having two fields in a root object doesn\'t increase the size because of object padding.\r\n\r\n```\r\n$ cat Notification.java\r\nfinal class Notification<T> {\r\n  private static final Object COMPLETED = new Object();\r\n\r\n  private final T value;\r\n  private final Throwable error;\r\n\r\n  Notification(T value, Throwable error) {\r\n    this.value = value;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n$ javac Notification.java\r\n\r\n$ java -cp .:/Users/jw/Downloads/jol-cli-0.5-full.jar org.openjdk.jol.Main internals Notification\r\nobjc[95020]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined.\r\n# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\r\n# Running 64-bit HotSpot VM.\r\n# Using compressed oop with 3-bit shift.\r\n# Using compressed klass with 3-bit shift.\r\n# WARNING | Compressed references base/shifts are guessed by the experiment!\r\n# WARNING | Therefore, computed addresses are just guesses, and ARE NOT RELIABLE.\r\n# WARNING | Make sure to attach Serviceability Agent to get the reliable addresses.\r\n# Objects are 8 bytes aligned.\r\n# Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n# Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n\r\nVM fails to invoke the default constructor, falling back to class-only introspection.\r\n\r\nNotification object internals:\r\n OFFSET  SIZE      TYPE DESCRIPTION                    VALUE\r\n      0    12           (object header)                N/A\r\n     12     4    Object Notification.value             N/A\r\n     16     4 Throwable Notification.error             N/A\r\n     20     4           (loss due to the next object alignment)\r\nInstance size: 24 bytes\r\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\r\n```'
p1867
aS"Oops I wrote my comparison wrong (and left it out of the comment).\r\n\r\nYou're right, the individual classes are only 16 bytes (12 header + 4 field). That said, 24 vs 16 isn't that big of a deal to gain guaranteed monomorphism."
p1868
aS'There are other ways of doing it, i.e., single object field + private wrapper for Throwables: 16 bytes per onNext and 32 bytes per onError'
p1869
aS"True. I'll leave it up to you though.\r\n\r\n:+1:"
p1870
aS'Or getting at least bimorphic by having value == null represent onComplete.'
p1871
aS'Updated. Now we have the smaller size but an instanceof check for every isOnNext() and getValue calls.'
p1872
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4370?src=pr) is 68.60% (diff: 77.44%)\n> Merging [#4370](https://codecov.io/gh/ReactiveX/RxJava/pull/4370?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4370   diff @@\n==========================================\n  Files           446        443     -3   \n  Lines         32154      32081    -73   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5092       5073    -19   \n==========================================\n- Hits          22026      22010    -16   \n+ Misses         8011       7975    -36   \n+ Partials       2117       2096    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ec4eb4f...cc0a786](https://codecov.io/gh/ReactiveX/RxJava/compare/ec4eb4f3bcd0a0c2d4e17571c8f4320ee864fd5c...cc0a78632b8e5e1b0141441e75e12d7b906a93b5?src=pr)'
p1873
aS'Looks good!'
p1874
asg14
S'akarnokd:Notification2x'
p1875
sbsI4371
(iPull
Pull
p1876
(dp1877
g3
S'This PR removes the `BlockingFlowable` and `BlockingObservable` classes and moves the blocking operators into the respective reactive classes and names prefixed with `blocking`.\r\n\r\nIn addition, many of the mentions of `Flowable` has been replaced with `Observable` in `Observable`.\r\n\r\nRelated: #4366.'
p1878
sg5
S'2.x: move blocking operators into the base classes'
p1879
sg7
(lp1880
S'Cleanup'
p1881
aS'Enhancement'
p1882
asg10
I4371
sg11
(lp1883
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4371?src=pr) is 68.58% (diff: 49.66%)\n> Merging [#4371](https://codecov.io/gh/ReactiveX/RxJava/pull/4371?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4371   diff @@\n==========================================\n  Files           443        449     +6   \n  Lines         32081      32123    +42   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5073       5080     +7   \n==========================================\n+ Hits          22015      22031    +16   \n- Misses         7971       7996    +25   \n- Partials       2095       2096     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a6bbf46...58874f6](https://codecov.io/gh/ReactiveX/RxJava/compare/a6bbf4630e9f3678ac56e96f9aa156f3d03ffc56...58874f6d4cf044b1bfea05fea559df4a7efc4db8?src=pr)'
p1884
asg14
S'akarnokd:InlinedBlockingOps'
p1885
sbsI4372
(iPull
Pull
p1886
(dp1887
g3
g53
sg5
S'2.x: Implement ObservableHide for also masking the Disposable.'
p1888
sg7
(lp1889
S'Enhancement'
p1890
asg10
I4372
sg11
(lp1891
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4372?src=pr) is 68.60% (diff: 80.95%)\n> Merging [#4372](https://codecov.io/gh/ReactiveX/RxJava/pull/4372?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4372   diff @@\n==========================================\n  Files           449        450     +1   \n  Lines         32123      32143    +20   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5080       5081     +1   \n==========================================\n+ Hits          22030      22052    +22   \n+ Misses         7986       7985     -1   \n+ Partials       2107       2106     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [23461ee...64cce97](https://codecov.io/gh/ReactiveX/RxJava/compare/23461ee40ec28b206c435530d53ffc59563087f9...64cce97a97f092c5feb641a2ee626f8d4863ac5f?src=pr)'
p1892
asg14
S'JakeWharton:jw/observable-hide'
p1893
sbsI4375
(iPull
Pull
p1894
(dp1895
g3
S'Notable changes:\r\n\r\n  - renamed and added safe `create` support to `Observable`, `Single` and `Completable`\r\n  - added some javadoc\r\n  - added `test()` method to `Single` and `Completable`\r\n  - factored out `ErrorMode` into `internal.util` (used by various `concat` operators)'
p1896
sg5
S'2.x: added missing ops, cleanup 8/19-1'
p1897
sg7
(lp1898
S'Cleanup'
p1899
aS'Documentation'
p1900
aS'Enhancement'
p1901
asg10
I4375
sg11
(lp1902
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4375?src=pr) is 68.64% (diff: 62.27%)\n> Merging [#4375](https://codecov.io/gh/ReactiveX/RxJava/pull/4375?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4375   diff @@\n==========================================\n  Files           450        452     +2   \n  Lines         32143      32405   +262   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5081       5129    +48   \n==========================================\n+ Hits          22051      22245   +194   \n- Misses         7988       8020    +32   \n- Partials       2104       2140    +36   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f0d1d34...d49d30b](https://codecov.io/gh/ReactiveX/RxJava/compare/f0d1d34874980ea508328aba5665a8ba1212e1f8...d49d30b3f83f554f2ed93567b3434b944371cf7c?src=pr)'
p1903
aS':+1:'
p1904
asg14
S'akarnokd:MissingOps819'
p1905
sbsI4378
(iPull
Pull
p1906
(dp1907
g3
S'Notable changes:\r\n\r\n  - use JMH 1.13\r\n  - fix javadoc generator exclude pattern\r\n  - add javadoc to many components\r\n  - remove `Observers` and `Subscribers` - all their function is available via subscribe() and/or by implementing the abstract `XObserver`/`XSubscriber` provided\r\n  - remove `Schedulers.immediate()`\r\n  - remove `Single.subscribe(Subscriber)`, `Single.subscribe(Observer)`, `Completable.subscribe(Subscriber)` and `Completable.subscribe(Observer)`\r\n  - remove `CompletableSerializedObserver` and `SingleSerializedObserver` and their parent package\r\n  - implement `Single.takeUntil`, `Single.flatMapCompletable`\r\n  - update the time-shift handling in the default `Scheduler.schedulePeriodically()` to match 1.x\r\n  - fix `Single.subscribeOn` disposable management\r\n  - renamed `Subject.hasSubscribers` to `Subject.hasObservers`'
p1908
sg5
S'2.x: implement ops, add javadoc, remove unused components 8/19-2'
p1909
sg7
(lp1910
S'Cleanup'
p1911
aS'Documentation'
p1912
aS'Enhancement'
p1913
asg10
I4378
sg11
(lp1914
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4378?src=pr) is 69.61% (diff: 76.77%)\n> Merging [#4378](https://codecov.io/gh/ReactiveX/RxJava/pull/4378?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.96%**\n\n```diff\n@@                2.x      #4378   diff @@\n==========================================\n  Files           452        450     -2   \n  Lines         32405      32007   -398   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5129       5108    -21   \n==========================================\n+ Hits          22244      22281    +37   \n+ Misses         8014       7577   -437   \n- Partials       2147       2149     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [60bf4fc...dcdf77a](https://codecov.io/gh/ReactiveX/RxJava/compare/60bf4fc559bac80ae5d53793ec008cfee067f29f...dcdf77a7e2fd6bc836ba63e443424b405321ebcc?src=pr)'
p1915
aS':+1: to code changes. Skimmed the Javadoc for formatting only, not content.'
p1916
aS"I'm not worried about javadoc; the community is great at finding errors in there that can be trivially fixed."
p1917
asg14
S'akarnokd:MissingStuff819_2'
p1918
sbsI4379
(iPull
Pull
p1919
(dp1920
g3
g53
sg5
S'2.x: Move single-use top-level type to nested class of its only use.'
p1921
sg7
(lp1922
S'Cleanup'
p1923
asg10
I4379
sg11
(lp1924
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4379?src=pr) is 69.67% (diff: 100%)\n> Merging [#4379](https://codecov.io/gh/ReactiveX/RxJava/pull/4379?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4379   diff @@\n==========================================\n  Files           450        449     -1   \n  Lines         32007      32006     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22311      22299    -12   \n- Misses         7562       7567     +5   \n- Partials       2134       2140     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...2e1f2c7](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...2e1f2c705d4318296c73e017b86c0941df9da4ca?src=pr)'
p1925
asg14
S'JakeWharton:jw/remove'
p1926
sbsI4380
(iPull
Pull
p1927
(dp1928
g3
S"This method is misleading in that it's a factory next to a bunch of accessor methods to shared resources. The TestScheduler constructor is public and can be used directly."
p1929
sg5
S'2.x: Remove test scheduler factory.'
p1930
sg7
(lp1931
S'Cleanup'
p1932
asg10
I4380
sg11
(lp1933
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4380?src=pr) is 69.63% (diff: 100%)\n> Merging [#4380](https://codecov.io/gh/ReactiveX/RxJava/pull/4380?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4380   diff @@\n==========================================\n  Files           450        450          \n  Lines         32007      32006     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22311      22286    -25   \n- Misses         7562       7577    +15   \n- Partials       2134       2143     +9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...64dc7fa](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...64dc7fad490da928591e2e2d0feded62f0c2471d?src=pr)'
p1934
asg14
S'JakeWharton:jw/drop-test-factory'
p1935
sbsI4381
(iPull
Pull
p1936
(dp1937
g3
g53
sg5
S'2.x: Correct factory method name for converting an RS Publisher.'
p1938
sg7
(lp1939
S'Cleanup'
p1940
asg10
I4381
sg11
(lp1941
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4381?src=pr) is 69.75% (diff: 100%)\n> Merging [#4381](https://codecov.io/gh/ReactiveX/RxJava/pull/4381?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4381   diff @@\n==========================================\n  Files           450        450          \n  Lines         32007      32007          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22311      22326    +15   \n+ Misses         7562       7545    -17   \n- Partials       2134       2136     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...497a394](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...497a3940192db1777c7bb1e90c25a1adef9189cf?src=pr)'
p1942
asg14
S'JakeWharton:jw/factory-name'
p1943
sbsI4382
(iPull
Pull
p1944
(dp1945
g3
g53
sg5
S'2.x: Correctly dereference subscription before comparing against null.'
p1946
sg7
(lp1947
S'Bug'
p1948
asg10
I4382
sg11
(lp1949
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4382?src=pr) is 69.72% (diff: 0.00%)\n> Merging [#4382](https://codecov.io/gh/ReactiveX/RxJava/pull/4382?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4382   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22300      22315    +15   \n+ Misses         7566       7557     -9   \n+ Partials       2139       2133     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...76bd1d9](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...76bd1d967dfdff341b4a5027f1edd20b913a191b?src=pr)'
p1950
asg14
S'JakeWharton:jw/dereference-subscription'
p1951
sbsI4383
(iPull
Pull
p1952
(dp1953
g3
S'Also optimize name creation to avoid `StringBuilder` having to expand its underlying `char[]`.'
p1954
sg5
S'2.x: Remove double dash on RxThreadFactory thread names.'
p1955
sg7
(lp1956
S'Cleanup'
p1957
asg10
I4383
sg11
(lp1958
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4383?src=pr) is 69.64% (diff: 100%)\n> Merging [#4383](https://codecov.io/gh/ReactiveX/RxJava/pull/4383?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4383   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32004     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22300      22290    -10   \n- Misses         7566       7575     +9   \n  Partials       2139       2139          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...4e3194b](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...4e3194beaf708e993046f1e4c233862744df45b0?src=pr)'
p1959
asg14
S'JakeWharton:jw/redundant-dash'
p1960
sbsI4384
(iPull
Pull
p1961
(dp1962
g3
g53
sg5
S'2.x: Do not promise a new instance where we return a singleton.'
p1963
sg7
(lp1964
S'Cleanup'
p1965
asg10
I4384
sg11
(lp1966
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4384?src=pr) is 69.63% (diff: 100%)\n> Merging [#4384](https://codecov.io/gh/ReactiveX/RxJava/pull/4384?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4384   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22300      22287    -13   \n  Misses         7566       7566          \n- Partials       2139       2152    +13   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...6475742](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...6475742db1a55298c9f0aa94f9758a9fb13b4cb7?src=pr)'
p1967
asg14
S'JakeWharton:jw/not-new'
p1968
sbsI4385
(iPull
Pull
p1969
(dp1970
g3
g53
sg5
S'2.x: Free upstream resources when default observer/subscriber is canceled.'
p1971
sg7
(lp1972
S'Cleanup'
p1973
asg10
I4385
sg11
(lp1974
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4385?src=pr) is 69.62% (diff: 80.00%)\n> Merging [#4385](https://codecov.io/gh/ReactiveX/RxJava/pull/4385?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4385   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32008     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5109     +1   \n==========================================\n+ Hits          22283      22287     +4   \n- Misses         7578       7579     +1   \n+ Partials       2143       2142     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...76d1bd8](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...76d1bd8cb478489b3a4d1686213d5b7dd351d9a2?src=pr)'
p1975
asg14
S'JakeWharton:jw/free-upstream'
p1976
sbsI4386
(iPull
Pull
p1977
(dp1978
g3
g53
sg5
S'2.x: Move error consumer helper to internal API.'
p1979
sg7
(lp1980
S'Cleanup'
p1981
asg10
I4386
sg11
(lp1982
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4386?src=pr) is 69.64% (diff: 69.23%)\n> Merging [#4386](https://codecov.io/gh/ReactiveX/RxJava/pull/4386?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4386   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32003     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22283      22290     +7   \n+ Misses         7578       7573     -5   \n+ Partials       2143       2140     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...6947b0f](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...6947b0f74031e388f031756937c4647ed02728e4?src=pr)'
p1983
asg14
S'JakeWharton:jw/error-consumer-private'
p1984
sbsI4387
(iPull
Pull
p1985
(dp1986
g3
g53
sg5
S'2.x: Remove unused test methods from safe observer/subscriber.'
p1987
sg7
(lp1988
S'Cleanup'
p1989
asg10
I4387
sg11
(lp1990
S'I\'m not a huge fan of the word "safe" here. What about calling these `ContractObserver` and `ContractSubscriber` to more accurately describe what they do?'
p1991
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4387?src=pr) is 69.62% (diff: 100%)\n> Merging [#4387](https://codecov.io/gh/ReactiveX/RxJava/pull/4387?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4387   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32002     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22283      22282     -1   \n+ Misses         7578       7575     -3   \n- Partials       2143       2145     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...294b059](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...294b059467b1d5a086cf36c4280d1ef5b51453b8?src=pr)'
p1992
asg14
S'JakeWharton:jw/unused-methods'
p1993
sbsI4388
(iPull
Pull
p1994
(dp1995
g3
S'This is a very specific use case to provide as a first-party type which can always be added back later should there be sufficient demand.'
p1996
sg5
S'2.x: Remove reference counted Disposable public type.'
p1997
sg7
(lp1998
S'Cleanup'
p1999
asg10
I4388
sg11
(lp2000
S"Happy to hear arguments for keeping it, but I couldn't come up with any that were convincing enough."
p2001
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4388?src=pr) is 69.61% (diff: 100%)\n> Merging [#4388](https://codecov.io/gh/ReactiveX/RxJava/pull/4388?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4388   diff @@\n==========================================\n  Files           449        448     -1   \n  Lines         32004      31983    -21   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5105     -3   \n==========================================\n- Hits          22306      22266    -40   \n- Misses         7557       7575    +18   \n- Partials       2141       2142     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e8ff934...a54ad0f](https://codecov.io/gh/ReactiveX/RxJava/compare/e8ff93464ecb83d33596dae1ddd6143b3e590914...a54ad0f07aa62ca8548b9ba615c97cc84c0f97bd?src=pr)'
p2002
aS'I never saw an use of it; it is a remnant from Rx.NET where it is part of the inner `Observable` management in the `groupBy` and `window` operator. We have inlined custom `Observable`/`Flowable` there.'
p2003
asg14
S'JakeWharton:jw/nuke-ref-count-disposable'
p2004
sbsI4390
(iPull
Pull
p2005
(dp2006
g3
S'Looks like [the linked comment][1] was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.\r\n\r\n [1]: https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495'
p2007
sg5
S'1.x: Remove explicit StackOverflow check as its a VirtualMachineError.'
p2008
sg7
(lp2009
S'Cleanup'
p2010
asg10
I4390
sg11
(lp2011
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4390?src=pr) is 84.27% (diff: 100%)\n> Merging [#4390](https://codecov.io/gh/ReactiveX/RxJava/pull/4390?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4390   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17515     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2677     -1   \n==========================================\n- Hits          14775      14760    -15   \n- Misses         1884       1894    +10   \n- Partials        858        861     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a57741b...496ceba](https://codecov.io/gh/ReactiveX/RxJava/compare/a57741b5895d775e51753ebc5a67d26f400f49e3...496ceba783df06d1af0307d38b3cd71d4356e43c?src=pr)'
p2012
asg14
S'JakeWharton:jw/stack-overflow-v1'
p2013
sbsI4391
(iPull
Pull
p2014
(dp2015
g3
S'Looks like [the linked comment][1] was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.\r\n\r\n [1]: https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495'
p2016
sg5
S'2.x: Remove explicit StackOverflow check as its a VirtualMachineError.'
p2017
sg7
(lp2018
S'Cleanup'
p2019
asg10
I4391
sg11
(lp2020
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4391?src=pr) is 69.71% (diff: 0.00%)\n> Merging [#4391](https://codecov.io/gh/ReactiveX/RxJava/pull/4391?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4391   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32002     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5107     -1   \n==========================================\n+ Hits          22306      22311     +5   \n+ Misses         7557       7550     -7   \n  Partials       2141       2141          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e8ff934...b91d9dc](https://codecov.io/gh/ReactiveX/RxJava/compare/e8ff93464ecb83d33596dae1ddd6143b3e590914...b91d9dc546bb01679deec686f21a5192de6429bf?src=pr)'
p2021
asg14
S'JakeWharton:jw/stack-overflow'
p2022
sbsI4393
(iPull
Pull
p2023
(dp2024
g3
S'Also should not `cancelled` be renamed to `shouldDispose`? Also the java doc might need a repolish then.'
p2025
sg5
S'2.x: Completable.test cancel TestSubscriber when wanted'
p2026
sg7
(lp2027
sg10
I4393
sg11
(lp2028
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4393?src=pr) is 69.62% (diff: 0.00%)\n> Merging [#4393](https://codecov.io/gh/ReactiveX/RxJava/pull/4393?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4393   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22267    -14   \n- Misses         7561       7572    +11   \n- Partials       2140       2144     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...4e3cf88](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...4e3cf8844e30ae14a8faeda4668c02afc300033e?src=pr)'
p2029
asg14
S'vanniktech:2.x_completable_test'
p2030
sbsI4394
(iPull
Pull
p2031
(dp2032
g3
g53
sg5
S'2.x: Single.test cancel TestSubscriber when wanted'
p2033
sg7
(lp2034
S'Cleanup'
p2035
asg10
I4394
sg11
(lp2036
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4394?src=pr) is 69.65% (diff: 0.00%)\n> Merging [#4394](https://codecov.io/gh/ReactiveX/RxJava/pull/4394?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4394   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22277     -4   \n- Misses         7561       7567     +6   \n+ Partials       2140       2139     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...32ed1b8](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...32ed1b82e653088a52be83f80ef93fe45e509701?src=pr)'
p2037
asg14
S'vanniktech:2.x_single_test'
p2038
sbsI4395
(iPull
Pull
p2039
(dp2040
g3
g53
sg5
S'2.x: Completable.test cancel TestSubscriber when wanted'
p2041
sg7
(lp2042
S'Cleanup'
p2043
asg10
I4395
sg11
(lp2044
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4395?src=pr) is 69.57% (diff: 0.00%)\n> Merging [#4395](https://codecov.io/gh/ReactiveX/RxJava/pull/4395?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4395   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22253    -28   \n- Misses         7561       7586    +25   \n- Partials       2140       2144     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...6485480](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...64854802b1ecda983ae954e9a2ab9e36004cf566?src=pr)'
p2045
asg14
S'vanniktech:2.xcompletable_test'
p2046
sbsI4396
(iPull
Pull
p2047
(dp2048
g3
g53
sg5
S'2.x: Observable test change dispose to cancel'
p2049
sg7
(lp2050
S'Cleanup'
p2051
asg10
I4396
sg11
(lp2052
S'Oh right cancel does not exist on `TestObserver` yet it should though, right?'
p2053
aS"Yes, it should be conditionally disposed. Didn't your IDE warn about the missing method?"
p2054
aS"It did but I somehow managed to ignore it and didn't run the tests locally. Should I create the cancel method on `TestObserver` or just leave it as is and close this PR?"
p2055
aS'Just use `dispose`.'
p2056
aS'Alright then this can be closed.'
p2057
asg14
S'vanniktech:2.x_observable_dispose_cancel_swap'
p2058
sbsI4397
(iPull
Pull
p2059
(dp2060
g3
S"When throttleFirst was operating on a TestScheduler, it delivered all items passed to it untill TestScheduler's time would change to a non-zero value."
p2061
sg5
S'1.x: Fix multiple values produced by throttleFirst with TestScheduler'
p2062
sg7
(lp2063
S'Bug'
p2064
asg10
I4397
sg11
(lp2065
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4397?src=pr) is 84.29% (diff: 100%)\n> Merging [#4397](https://codecov.io/gh/ReactiveX/RxJava/pull/4397?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4397   diff @@\n==========================================\n  Files           270        270          \n  Lines         17515      17516     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14770      14765     -5   \n- Misses         1885       1897    +12   \n+ Partials        860        854     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1a7de42...d6014ec](https://codecov.io/gh/ReactiveX/RxJava/compare/1a7de42630959085d9bd89d039dce51c02a4214a...d6014ec7ba5b4132b3ce8be91ed47f379d843453?src=pr)'
p2066
aS':+1:  and thanks for the fix.'
p2067
asg14
S'AntonRutkevich:fix-throttle-first-test-scheduler'
p2068
sbsI4398
(iPull
Pull
p2069
(dp2070
g3
S't2 was only initialized if canceling threw an exception. In the happy path it would have never been initialized so when onError threw the call to suppress() would NPE.'
p2071
sg5
S'2.x: Avoid potential NPE when onError throws.'
p2072
sg7
(lp2073
S'Bug'
p2074
asg10
I4398
sg11
(lp2075
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4398?src=pr) is 69.63% (diff: 0.00%)\n> Merging [#4398](https://codecov.io/gh/ReactiveX/RxJava/pull/4398?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4398   diff @@\n==========================================\n  Files           448        448          \n  Lines         31984      31986     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5107       5108     +1   \n==========================================\n+ Hits          22267      22273     +6   \n+ Misses         7577       7574     -3   \n+ Partials       2140       2139     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e1cec33...eb2d3bd](https://codecov.io/gh/ReactiveX/RxJava/compare/e1cec337e0778adbc75efe6c226242cb7df62d61...eb2d3bda8e2a37ea966458e0f5b5e8fc2391ba71?src=pr)'
p2076
asg14
S'JakeWharton:jw/npe'
p2077
sbsI4403
(iPull
Pull
p2078
(dp2079
g3
S"Notable changes:\r\n\r\n  - Implement `concatEager` and its variants\r\n  - Implement `onTerminateDetach`\r\n  - Implement `distinctUntilChanged(BiPredicate)`\r\n  - Replace `EmptyDisposable.INSTANCE` with `Disposables.empty()` due to clash with fusion (sending an INSTANCE tells a fusion-enabled source to not expect onNext values yet the test still send those - this was a problem with EmptySubscription.INSTANCE a while back too). Also added javadoc warning about its use\r\n  - add `ObservableScalarXMap` optimization to `Observable.xMap(Function)` and their operator's `subscribeActual`\r\n  - Make `ObservableJust` `ScalarCallable` and sync-fuseable with `ScalarDisposable` (similar to `Flowable.just()`)\r\n  - Make `Observable.bufferSize()` public for convenience.\r\n  - Fix `flatMap` fused `Callable` handling\r\n  - Renamed `Objects` to `ObjectHelper` to avoid accidental bad imports of `java.util.Objects` of Java 8."
p2080
sg5
S'2.x: add missing ops, cleanup, fusion fixes'
p2081
sg7
(lp2082
S'Bug'
p2083
aS'Cleanup'
p2084
aS'Enhancement'
p2085
asg10
I4403
sg11
(lp2086
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4403?src=pr) is 69.30% (diff: 65.89%)\n> Merging [#4403](https://codecov.io/gh/ReactiveX/RxJava/pull/4403?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.32%**\n\n```diff\n@@                2.x      #4403   diff @@\n==========================================\n  Files           448        454     +6   \n  Lines         31986      32483   +497   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5204    +96   \n==========================================\n+ Hits          22274      22513   +239   \n- Misses         7568       7775   +207   \n- Partials       2144       2195    +51   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5b8845d...7cdb19e](https://codecov.io/gh/ReactiveX/RxJava/compare/5b8845d4cfdbc2d563b90ce27db978b7e383d9e0...7cdb19eedab11edfb2af7afcbf3139939493d01a?src=pr)'
p2087
asg14
S'akarnokd:MissingOps822_1'
p2088
sbsI4410
(iPull
Pull
p2089
(dp2090
g3
S'Notable changes:\r\n\r\n  - Introduce `Emitter<T>` as a base interface for `FlowableEmitter` and `ObservableEmitter`, use it for the `generate()` operators to be the push surface.\r\n  - Hide fusion-related methods in `TestSubscriber` and `TestObserver`, remove `test()` method overload from the base reactive classes, introduce `SubscriberFusion` and `ObserverFusion` helper in the test source set\r\n  - Enable fusion on `Observable.range()`.\r\n  - Move `Observer`-related tests into the `observers` test package.'
p2091
sg5
S'2.x: cleanup, enhancements 8/23-1'
p2092
sg7
(lp2093
S'Cleanup'
p2094
aS'Enhancement'
p2095
asg10
I4410
sg11
(lp2096
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4410?src=pr) is 69.42% (diff: 76.00%)\n> Merging [#4410](https://codecov.io/gh/ReactiveX/RxJava/pull/4410?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4410   diff @@\n==========================================\n  Files           454        454          \n  Lines         32483      32509    +26   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5204       5206     +2   \n==========================================\n+ Hits          22504      22569    +65   \n+ Misses         7776       7740    -36   \n+ Partials       2203       2200     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7a1a4af...2dbc4fd](https://codecov.io/gh/ReactiveX/RxJava/compare/7a1a4afad2984fb95265ec0af061fd1e87f0b75b...2dbc4fdd3e836118af339a9e00f2deb322369317?src=pr)'
p2097
aS':+1:'
p2098
asg14
S'akarnokd:Cleanup823'
p2099
sbsI4413
(iPull
Pull
p2100
(dp2101
g3
S'Notable changes:\r\n\r\n  - delete `concat` 5-9 arguments, use `concat(just(...))` or `concatArray(...)` instead\r\n  - delete `withLatestFrom` 5-8 arguments\r\n  - rename `merge(Publisher...)` into `mergeArray(Publisher...)` to disambiguate\r\n  - rename `merge(int, int, Publisher...)` into `mergeArray(int, int, Publisher...)` to disambiguate\r\n  - delete `merge(int, Publisher...)` overload\r\n  - rename `mergeDelayError(Publisher...)` into `mergeArrayDelayError(Publisher...)` to disambiguate\r\n  - rename `mergeDelayError(int, int, Publisher...)` into `mergeArrayDelayError(int, int, Publisher...)` to disambiguate\r\n  - delete `mergeDelayError(int, Publisher...)` overload\r\n  - delete `takeLatestBuffer` overloads\r\n  '
p2102
sg5
S'2.x: API removals and renames'
p2103
sg7
(lp2104
S'Cleanup'
p2105
asg10
I4413
sg11
(lp2106
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4413?src=pr) is 69.44% (diff: 100%)\n> Merging [#4413](https://codecov.io/gh/ReactiveX/RxJava/pull/4413?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4413   diff @@\n==========================================\n  Files           454        454          \n  Lines         32518      32359   -159   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5209          \n==========================================\n- Hits          22619      22471   -148   \n+ Misses         7706       7688    -18   \n- Partials       2193       2200     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7db9f95...3e9ae2c](https://codecov.io/gh/ReactiveX/RxJava/compare/7db9f958bcc4d6a5d4e062d823bbbdd1ecbf9aed...3e9ae2c32ad2b30d5f7a0d9ebe26d5ce4382f4af?src=pr)'
p2107
aS'/cc @zsxwing '
p2108
asg14
S'akarnokd:APICut823'
p2109
sbsI4417
(iPull
Pull
p2110
(dp2111
g3
S"Notable changes:\r\n\r\n  - renamed `amb(sources...)` to `ambArray(sources...)` to be consistent with the naming of other operators with varargs input\r\n  - Renamed some other varargs operators ot `xArray` to be consistent\r\n  - Added `RxJavaPlugins.onAssembly()` to operators, note that no other infrastructure (such as `enableAssemblyTracking` was added; companion libraries may later utilize these hooks to inject the necessary wrapper classes.\r\n  - Extended `RxJavaPlugins.onAssembly()` to support `ConnectableX` operators\r\n  - Renamed `FlowProcessor` into `FlowableProcessor` to avoid future confusion with JDK 9's `Flow.Processor`\r\n  - Removed common value extraction methods from `Subject` and `FlowableProcessor` and left them in the implementations\r\n  - Made common terminal state checking methods of `Subject` and `FlowableProcessor` as abstract since all subtypes can implement them reasonably\r\n  - fixed copy-paste errors in javadocs, such as wrong class named, referencing non-existent backpressure"
p2112
sg5
S'2.x: add assembly tracking, minor fixes and cleanup'
p2113
sg7
(lp2114
S'Cleanup'
p2115
aS'Enhancement'
p2116
asg10
I4417
sg11
(lp2117
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4417?src=pr) is 69.44% (diff: 85.17%)\n> Merging [#4417](https://codecov.io/gh/ReactiveX/RxJava/pull/4417?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4417   diff @@\n==========================================\n  Files           454        454          \n  Lines         32359      32372    +13   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5214     +5   \n==========================================\n+ Hits          22472      22480     +8   \n- Misses         7691       7694     +3   \n- Partials       2196       2198     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9fb4040...074d187](https://codecov.io/gh/ReactiveX/RxJava/compare/9fb40403385d520b80bf9e1cf491b1f1a197ea56...074d187e44bebaa97cc75413e4b8c0d2ac0d1513?src=pr)'
p2118
aS'Merged so some fine cleanup can be done before release.'
p2119
aS':+1:'
p2120
aS'and i did _just_ get through it'
p2121
aS"Great concurrency in practice! I'm preparing a cleanup PR with, among other things, that private member checks of IntelliJ."
p2122
asg14
S'akarnokd:AssemblyTracking'
p2123
sbsI4418
(iPull
Pull
p2124
(dp2125
g3
S'The other `doOnEach` function has the right java doc. Terminal events such as `onCompleted` / `onError` are also included in `doOnEach`.'
p2126
sg5
S'1.x: Sync doOnEach java doc'
p2127
sg7
(lp2128
S'Documentation'
p2129
asg10
I4418
sg11
(lp2130
S':+1:'
p2131
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4418?src=pr) is 84.30% (diff: 100%)\n> Merging [#4418](https://codecov.io/gh/ReactiveX/RxJava/pull/4418?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #4418   diff @@\n==========================================\n  Files           270        270          \n  Lines         17516      17516          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n+ Hits          14756      14767    +11   \n+ Misses         1896       1886    -10   \n+ Partials        864        863     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3aaed26...2e90948](https://codecov.io/gh/ReactiveX/RxJava/compare/3aaed2673d3732f8c6c015c04576cbb9491cb72b...2e90948f2d90b73e74b611cefa7982ef1a975826?src=pr)'
p2132
asg14
S'vanniktech:1.x_dooneach_sync'
p2133
sbsI4419
(iPull
Pull
p2134
(dp2135
g3
S'Matches `Observable.extend()`. These are all `@Experimental` (including `Observable`). Perhaps we want to rename them all `to()` to match 2.x?'
p2136
sg5
S'1.x: Add extend() for Single and Completable.'
p2137
sg7
(lp2138
sg10
I4419
sg11
(lp2139
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4419?src=pr) is 84.29% (diff: 100%)\n> Merging [#4419](https://codecov.io/gh/ReactiveX/RxJava/pull/4419?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.15%**\n\n```diff\n@@                1.x      #4419   diff @@\n==========================================\n  Files           270        272     +2   \n  Lines         17516      17528    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14792      14775    -17   \n- Misses         1869       1898    +29   \n  Partials        855        855          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a5c9453...ac3c291](https://codecov.io/gh/ReactiveX/RxJava/compare/a5c945399ff7325d91d109b607fe6406a27ca838...ac3c2912a365ac4d76b196588e20daafefb263de?src=pr)'
p2140
asg14
S'JakeWharton:jw/single-completable-extend'
p2141
sbsI4421
(iPull
Pull
p2142
(dp2143
g3
S"Changes:\r\n\r\n  - fix spelling mistakes\r\n  - more consistent parameter naming scheme based on #1353 (but incomplete, RC2)\r\n  - fix bugs due to wrong variable naming\r\n  - compact logic expressions\r\n  - fix `Completable.doAfterTerminate` not called the right time\r\n  - `onErrorReturnValue` renamed to `onErrorReturnItem`\r\n\r\n@DavidMGross once this PR has been merged, it would be great you submitted one that has `//TODO` markers on those lines that need attention. The naming scheme you suggested doesn't come intuitively to me so I may skip many of them without the markers."
p2144
sg5
S'2.x: fixes, cleanups, renames'
p2145
sg7
(lp2146
S'Bug'
p2147
aS'Cleanup'
p2148
aS'Documentation'
p2149
asg10
I4421
sg11
(lp2150
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4421?src=pr) is 69.48% (diff: 73.27%)\n> Merging [#4421](https://codecov.io/gh/ReactiveX/RxJava/pull/4421?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4421   diff @@\n==========================================\n  Files           454        454          \n  Lines         32372      32323    -49   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5214          \n==========================================\n- Hits          22482      22459    -23   \n+ Misses         7692       7662    -30   \n- Partials       2198       2202     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [35c8da6...b05aa63](https://codecov.io/gh/ReactiveX/RxJava/compare/35c8da6ca2f0c446d9e50d1c5507cc80e5ccb996...b05aa630a9a8eda6007863512395b642cca98a62?src=pr)'
p2151
aS':+1:'
p2152
asg14
S'akarnokd:CleanupIntelliJ'
p2153
sbsI4422
(iPull
Pull
p2154
(dp2155
g3
S'This PR adds the `subscribeWith` methods to the base reactive types to mainly help with the 1.x to 2.x changeover as 2.x `subscribe(Subscriber)` return void instead of the resource/cancellation/unsubscription type `Disposable`. See the javadocs and the unit test for example use.\r\n\r\nRelated: #4400'
p2156
sg5
S'2.x: add subscribeWith to get back the subscriber/observer fluently'
p2157
sg7
(lp2158
S'Enhancement'
p2159
asg10
I4422
sg11
(lp2160
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4422?src=pr) is 69.56% (diff: 100%)\n> Merging [#4422](https://codecov.io/gh/ReactiveX/RxJava/pull/4422?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4422   diff @@\n==========================================\n  Files           454        454          \n  Lines         32323      32331     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5214          \n==========================================\n+ Hits          22470      22491    +21   \n+ Misses         7651       7640    -11   \n+ Partials       2202       2200     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7aa0b34...2f68644](https://codecov.io/gh/ReactiveX/RxJava/compare/7aa0b347cea8aa0e395a7f9ec488d7006647a329...2f686449a6173a80713fe418e95819237fd5b90b?src=pr)'
p2161
aS':+1:'
p2162
asg14
S'akarnokd:SubscribeWith'
p2163
sbsI4423
(iPull
Pull
p2164
(dp2165
g3
S'This deprecates extend() on Observable, which is a less powerful version of these functions.'
p2166
sg5
S'1.x: Add to() conversion function to all stream types.'
p2167
sg7
(lp2168
S'Enhancement'
p2169
asg10
I4423
sg11
(lp2170
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4423?src=pr) is 84.33% (diff: 100%)\n> Merging [#4423](https://codecov.io/gh/ReactiveX/RxJava/pull/4423?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                1.x      #4423   diff @@\n==========================================\n  Files           270        270          \n  Lines         17516      17518     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14792      14773    -19   \n- Misses         1869       1892    +23   \n+ Partials        855        853     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a5c9453...68ff636](https://codecov.io/gh/ReactiveX/RxJava/compare/a5c945399ff7325d91d109b607fe6406a27ca838...68ff636a5ba3a13c67549e2c70ed3a6e913a44e7?src=pr)'
p2171
aS':+1:'
p2172
asg14
S'JakeWharton:jw/too'
p2173
sbsI4424
(iPull
Pull
p2174
(dp2175
g3
S"  - Moved old javadocs under `/1.x/javadoc/version_number`\r\n  - Added `/2.x/javadoc/`\r\n  - Updated `/javadoc` to have the 1.1.9 documentation\r\n\r\nThere was a small hiccup with the 2.x release as the javadoc didn't properly generate (bad link and missing css). I've included the locally generated javadoc here which is titled 2.0.0-DP0-SNAPSHOT at the moment."
p2176
sg5
S'Update javadoc 1.1.9, add dirs and 2.0.0-RC1 doc'
p2177
sg7
(lp2178
S'Documentation'
p2179
asg10
I4424
sg11
(lp2180
sg14
S'akarnokd:Javadoc119and200RC1'
p2181
sbsI4425
(iPull
Pull
p2182
(dp2183
g3
S'This is only the `Completable` part of #4420. It does not make `CompletableSubscriber` an abstract class nor create `Single.Operator`.'
p2184
sg5
S"1.x: Remove 'Completable' prefix from nested interfaces, move its subscription to top-level."
p2185
sg7
(lp2186
S'Enhancement'
p2187
asg10
I4425
sg11
(lp2188
S'[Compiler error](https://travis-ci.org/ReactiveX/RxJava/builds/155096130#L200).'
p2189
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4425?src=pr) is 84.23% (diff: 68.04%)\n> Merging [#4425](https://codecov.io/gh/ReactiveX/RxJava/pull/4425?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.16%**\n\n```diff\n@@                1.x      #4425   diff @@\n==========================================\n  Files           270        270          \n  Lines         17518      17548    +30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14785      14781     -4   \n- Misses         1877       1909    +32   \n- Partials        856        858     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [743f164...55bf5e7](https://codecov.io/gh/ReactiveX/RxJava/compare/743f164b1b2f20ed34ae97a48872a0c548375911...55bf5e7a678b67d4d98880529055a78143e502b7?src=pr)'
p2190
aS'Looks okay. What about the `@Deprecated` markers?'
p2191
aS"Oh, sure. I'll add them in real quick. I wasn't sure on your stance on them, but I think it'll make migration easier."
p2192
aS"Yes, having deprecated markers is more forgiveable than lacking the entire type. I don't know how extensively `Completable` is in use by other libraries right now (beyond RxJavaReactiveStreams, Reactor's converter, Retrofit`)."
p2193
aS'Updated!'
p2194
aS'https://travis-ci.org/ReactiveX/RxJava/builds/155134046#L200'
p2195
aS'Compilation issue resolved.'
p2196
aS'I know,  still waiting for a second approval.'
p2197
aS"Okay, let's have this. One can complain anytime later."
p2198
asg14
S'JakeWharton:jw/start-normalization'
p2199
sbsI4427
(iPull
Pull
p2200
(dp2201
g3
S'`fromAsync` did not handle post-terminal events properly when overflow occurs.\r\n\r\nAdded three unit tests that failed on original logic.\r\n'
p2202
sg5
S'1.x: fromAsync - handle post-terminal events'
p2203
sg7
(lp2204
S'Bug'
p2205
asg10
I4427
sg11
(lp2206
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4427?src=pr) is 84.26% (diff: 73.33%)\n> Merging [#4427](https://codecov.io/gh/ReactiveX/RxJava/pull/4427?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.12%**\n\n```diff\n@@                1.x      #4427   diff @@\n==========================================\n  Files           270        270          \n  Lines         17518      17533    +15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2680     +3   \n==========================================\n- Hits          14785      14775    -10   \n- Misses         1877       1897    +20   \n- Partials        856        861     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [743f164...ed0dae4](https://codecov.io/gh/ReactiveX/RxJava/compare/743f164b1b2f20ed34ae97a48872a0c548375911...ed0dae4a862d32000c37be648fc06ca71adc4848?src=pr)'
p2207
asg14
S'davidmoten:fromAsync-handle-post-terminal-events'
p2208
sbsI4428
(iPull
Pull
p2209
(dp2210
g3
S'Post-terminal event handling for `Observable.collect`.\r\n\r\nAdded three unit tests that failed on original logic.'
p2211
sg5
S'2.x: collect - handle post terminal events  - Observable'
p2212
sg7
(lp2213
S'Bug'
p2214
aS'Cleanup'
p2215
asg10
I4428
sg11
(lp2216
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4428?src=pr) is 69.51% (diff: 100%)\n> Merging [#4428](https://codecov.io/gh/ReactiveX/RxJava/pull/4428?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4428   diff @@\n==========================================\n  Files           454        454          \n  Lines         32331      32340     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5217     +3   \n==========================================\n+ Hits          22468      22482    +14   \n+ Misses         7664       7653    -11   \n- Partials       2199       2205     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d37bb20...3b7bea3](https://codecov.io/gh/ReactiveX/RxJava/compare/d37bb20a44fae19b572775deb3abf8fac18efffb...3b7bea3d25c0df72f0b3499bc84e9c3b4203b118?src=pr)'
p2217
asg14
S'davidmoten:2.x-collect-handle-post-terminal-events-observable'
p2218
sbsI4430
(iPull
Pull
p2219
(dp2220
g3
S'The new tests revealed some bugs (nothing major).'
p2221
sg5
S'2.x Improve coverage, fix bugs'
p2222
sg7
(lp2223
S'Bug'
p2224
aS'Test'
p2225
asg10
I4430
sg11
(lp2226
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4430?src=pr) is 70.49% (diff: 60.29%)\n> Merging [#4430](https://codecov.io/gh/ReactiveX/RxJava/pull/4430?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.98%**\n\n```diff\n@@                2.x      #4430   diff @@\n==========================================\n  Files           454        454          \n  Lines         32340      32371    +31   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5217       5223     +6   \n==========================================\n+ Hits          22481      22820   +339   \n+ Misses         7663       7422   -241   \n+ Partials       2196       2129    -67   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6dbeff4...57eda49](https://codecov.io/gh/ReactiveX/RxJava/compare/6dbeff4b58a7fcfdc088751210aa2b84f0831634...57eda4942c9cd020b4e689d884949d4585666a6d?src=pr)'
p2227
aS':+1:'
p2228
aS'Updated those in the first commit in this PR and all other places that used `Exceptions.propagate`.'
p2229
aS'Looks good'
p2230
asg14
S'akarnokd:Coverage826'
p2231
sbsI4431
(iPull
Pull
p2232
(dp2233
g3
S'  - updated `Single.cache()` to be lock-free, to allocate less and work properly\r\n  - added test coverage to some classes\r\n  - remove unused internal `EmptyObserver`\r\n  - update `PublishSubject` to support cross-cancellation\r\n  - update `TestHelper.race` to use the current thread for one of the tasks'
p2234
sg5
S'2.x: coverage, fixes, cleanup 8/27-1'
p2235
sg7
(lp2236
S'Bug'
p2237
aS'Cleanup'
p2238
asg10
I4431
sg11
(lp2239
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4431?src=pr) is 70.90% (diff: 87.77%)\n> Merging [#4431](https://codecov.io/gh/ReactiveX/RxJava/pull/4431?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.51%**\n\n```diff\n@@                2.x      #4431   diff @@\n==========================================\n  Files           454        453     -1   \n  Lines         32371      32383    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5223       5233    +10   \n==========================================\n+ Hits          22786      22962   +176   \n+ Misses         7447       7303   -144   \n+ Partials       2138       2118    -20   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0094304...4cce05b](https://codecov.io/gh/ReactiveX/RxJava/compare/0094304aecbbf9cd9b9b6cb1b7fe524a4b2ccb75...4cce05b5d3617517ae6558e84c74de066c2234b0?src=pr)'
p2240
aS':+1:'
p2241
asg14
S'akarnokd:Coverage827_1'
p2242
sbsI4432
(iPull
Pull
p2243
(dp2244
g3
g53
sg5
S'Fix typo.'
p2245
sg7
(lp2246
sg10
I4432
sg11
(lp2247
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4432?src=pr) is 84.40% (diff: 100%)\n> Merging [#4432](https://codecov.io/gh/ReactiveX/RxJava/pull/4432?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4432   diff @@\n==========================================\n  Files           270        270          \n  Lines         17533      17533          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2680       2680          \n==========================================\n- Hits          14801      14799     -2   \n+ Misses         1878       1877     -1   \n- Partials        854        857     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5ac4d2a...877ed4a](https://codecov.io/gh/ReactiveX/RxJava/compare/5ac4d2aed5d8ed93c6835e26ddfb0f0b944d5c89...877ed4ad7c6e533b36fce41e8b4a1b5cd4c131a1?src=pr)'
p2248
aS'This one is also present in the 2.x branch'
p2249
aS'Addressed.'
p2250
asg14
S'hotchemi:hotchemi/typo'
p2251
sbsI4433
(iPull
Pull
p2252
(dp2253
g3
g53
sg5
S'Fix typo.'
p2254
sg7
(lp2255
sg10
I4433
sg11
(lp2256
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4433?src=pr) is 70.97% (diff: 100%)\n> Merging [#4433](https://codecov.io/gh/ReactiveX/RxJava/pull/4433?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4433   diff @@\n==========================================\n  Files           453        453          \n  Lines         32383      32383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5233       5233          \n==========================================\n+ Hits          22977      22984     +7   \n+ Misses         7288       7285     -3   \n+ Partials       2118       2114     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4c0f93b...c5d9453](https://codecov.io/gh/ReactiveX/RxJava/compare/4c0f93be9e85d77a90ad4dc877e475621fc7ccd3...c5d94538802f35ff0a86a18d76973dbfeda9da8d?src=pr)'
p2257
asg14
S'hotchemi:hotchemi/typo2'
p2258
sbsI4434
(iPull
Pull
p2259
(dp2260
g3
S'  - Remove unused code\r\n  - Improve coverage of `Single`, `Completable` and `Observable`\r\n  - Fix minor bugs in operators'
p2261
sg5
S'2.x: cleanup, bugfixes, coverage 8/27-2'
p2262
sg7
(lp2263
S'Bug'
p2264
aS'Cleanup'
p2265
aS'Coverage'
p2266
asg10
I4434
sg11
(lp2267
S':+1:'
p2268
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4434?src=pr) is 73.67% (diff: 92.59%)\n> Merging [#4434](https://codecov.io/gh/ReactiveX/RxJava/pull/4434?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **2.74%**\n\n```diff\n@@                2.x      #4434   diff @@\n==========================================\n  Files           453        453          \n  Lines         32383      32373    -10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5233       5220    -13   \n==========================================\n+ Hits          22969      23852   +883   \n+ Misses         7300       6437   -863   \n+ Partials       2114       2084    -30   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [70d36fb...ff7d7ff](https://codecov.io/gh/ReactiveX/RxJava/compare/70d36fbdfcb75e607e7512616205ab6fdd557e96...ff7d7ff67123f4d1f0cd80432d8006c1635b90b3?src=pr)'
p2269
asg14
S'akarnokd:Coverage827_2'
p2270
sbsI4435
(iPull
Pull
p2271
(dp2272
g3
S"  - Add tests\r\n  - fix mistakes in `TestObserver`\r\n  - Combine `DisposableHelper` and its inner `Disposed` enum\r\n  - Compact `NotificationLite` and its inner `Complete` enum\r\n  - Fix NPE in `ListCompositeDisposable` constructor\r\n  - Fix `DeferredScalarObserver` fusion and state management\r\n  - Turned a few empty enums into classes with private constructor: coverage can't cover them 100% otherwise. These empty enums have a constructor in their bytecode which never gets called and thus there's always 10 instructions / 2 method calls missing.\r\n  - Removed `TestObserver.awaitDone()`, one should always await with timeout"
p2273
sg5
S'2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1'
p2274
sg7
(lp2275
S'Bug'
p2276
aS'Cleanup'
p2277
aS'Coverage'
p2278
aS'Test'
p2279
asg10
I4435
sg11
(lp2280
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4435?src=pr) is 75.11% (diff: 94.80%)\n> Merging [#4435](https://codecov.io/gh/ReactiveX/RxJava/pull/4435?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **1.43%**\n\n```diff\n@@                2.x      #4435   diff @@\n==========================================\n  Files           453        453          \n  Lines         32373      32399    +26   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5220       5216     -4   \n==========================================\n+ Hits          23852      24337   +485   \n+ Misses         6435       6037   -398   \n+ Partials       2086       2025    -61   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [25e78c5...021a001](https://codecov.io/gh/ReactiveX/RxJava/compare/25e78c553a079bd84a4d8ae827c6dad899de625c...021a00180fa307afa4c3af0648bc32120a72be83?src=pr)'
p2281
aS"> Turned a few empty enums into classes with private constructor\r\n\r\nThis saves methods for Android as well. I wanted to see how many were being added before pressing the issue about this convention, but nice to see there's another motivation for not using enums here."
p2282
aS':+1:'
p2283
asg14
S'akarnokd:Coverage828_1'
p2284
sbsI4436
(iPull
Pull
p2285
(dp2286
g3
S'In #4321 I hit on the problem of needing a lazy object that could either be zero or one value. In that issue the idea of switching the return value of `reduce(R, Func2<R,T,R>)` from `Observable<R>` to `Single<R>` because that operator can only ever produce an Observable that emits exactly one value. The problem was that `reduce(Func2<T,T,T>)` could not be changed to `Single<T>` because the source Observable could be empty and therefore not produce one and only one value.\r\n\r\nTo solve this problem I mentioned we could create a lazy type that represents either 1 or no value could fill the gap between `Completable` and `Single<T>`.\r\n\r\nThis PR is for the introduction of the `Maybe<T>` type.'
p2287
sg5
S'2.x: Maybe for lazy Optional'
p2288
sg7
(lp2289
S'Feature-Request'
p2290
asg10
I4436
sg11
(lp2291
S'You referenced Java 8 types in your code.'
p2292
aS'My problem with adding another base type is the increased maintenance cost. Currently we have 3 + 4 types in the major versions and it is likely adding a new operator, overload or making a fix has to be done for all of them. I\'m one-man armying RxJava for a considerable time now but I have my limits. Therefore my suggestion is that you have this `Maybe` as a separate library that depends on RxJava 2 but RxJava 2 doesn\'t depend on it. Since RxJava 2 offers fluent conversion method(s), it should be only a small inconvenience to convert to `Maybe`:\r\n\r\n```java\r\nFlowable<Integer> source = Flowable.range(1, 10);\r\n\r\nMaybe<Integer> mb = source.to(Maybe.reduceFlowable((a, b) -> a + b));\r\n\r\nmb.filter(v -> false).subscribe(\r\n    System.out::println, Throwable::printStackTrace, () -> System.out.println("Done"));\r\n\r\nmb.toFlowable().subscribe(\r\n    System.out::println, Throwable::printStackTrace, () -> System.out.println("Done"));\r\n```'
p2293
aS'As I mentioned my plans were to greatly increase the coupling between Observable & Flowable to Single & Maybe by having the various operators that return exactly 1 or sometimes 1 value to these two types.'
p2294
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4436?src=pr) is 71.96% (diff: 0.07%)\n> Merging [#4436](https://codecov.io/gh/ReactiveX/RxJava/pull/4436?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **3.14%**\n\n```diff\n@@                2.x      #4436   diff @@\n==========================================\n  Files           453        499     +46   \n  Lines         32399      33691   +1292   \n  Methods           0          0           \n  Messages          0          0           \n  Branches       5216       5299     +83   \n==========================================\n- Hits          24336      24246     -90   \n- Misses         6034       7431   +1397   \n+ Partials       2029       2014     -15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f97c50d...118f21a](https://codecov.io/gh/ReactiveX/RxJava/compare/f97c50dadcb40a0f6f41734087a1c52d9df55d08...118f21adcabde87b393bb7155a148308ec20de78?src=pr)'
p2295
aS"I'm willing to accept `Maybe` as the 5th reactive type but the class needs javadoc and unit tests that verify the most basic behavior of each operator in it.\r\n\r\n/cc @artem-zinnatullin @JakeWharton @zsxwing "
p2296
aS"How about you just contribute `Maybe` with operators throwing `UnsupportedOperationException` and I'll add optimized implementations and tests for them as I go?"
p2297
aS'Also Reactor has the [Mono](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Mono.java) type exactly for this purpose, I suggest you try that first.'
p2298
aS"I'm not strictly opposed because\r\n\r\n> my plans were to greatly increase the coupling between Observable & Flowable to Single & Maybe by having the various operators that return exactly 1 or sometimes 1 value to these two types.\r\n\r\nappeals to me, but I don't have a really strong feeling without using it more."
p2299
aS"Okay then, let's merge this and see how it works out."
p2300
aS"Please don't post PRs targeting Maybe - I'm working on cleaning it up a bit (plus a few other classes if I find something wrong); the code copied from an older commit of the other types."
p2301
asg14
S'abersnaze:maybe'
p2302
sbsI4437
(iPull
Pull
p2303
(dp2304
g3
S'  - open up `verifyPositive` as protected for validation convenience in subclasses\r\n  - improve size and state handling of `DeferredScalarSubscription`\r\n  - enable async-fusion on `AsyncSubject` and `AsyncProcessor`, compact the classes\r\n  - **behavior change** `AsyncX.hasValue()` returns false until the terminal state has been reached\r\n  - compact the classes `PublishSubject`, `PublishProcessor`, `BehaviorSubject`, `BehaviorProcessor`, `ReplaySubject` and `ReplayProcessor`\r\n  - enable async-fusion on `UnicastSubject`, compact the class\r\n  - rename `BaseXQueueDisposable` to `BasicXQueueDisposable` to match `BasicXQueueSubscription`\r\n  - introduce `DeferredScalarDisposable`, refactor `DeferredScalarObserver`\r\n  - adjust tests that asserted on the former parameter names\r\n  - subjects and processors can now be created with newing up their constructor: `new PublishSubject<>()`; there is no mandatory shared state between the `Observer` part and the `Observable` part because both are now stateless on their own.\r\n  '
p2305
sg5
S'2.x: Subject/Processor improvements & small cleanup'
p2306
sg7
(lp2307
S'Cleanup'
p2308
aS'Enhancement'
p2309
asg10
I4437
sg11
(lp2310
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4437?src=pr) is 75.02% (diff: 80.16%)\n> Merging [#4437](https://codecov.io/gh/ReactiveX/RxJava/pull/4437?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4437   diff @@\n==========================================\n  Files           453        454     +1   \n  Lines         32399      32271   -128   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5216       5208     -8   \n==========================================\n- Hits          24336      24212   -124   \n- Misses         6034       6039     +5   \n+ Partials       2029       2020     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f97c50d...09a3448](https://codecov.io/gh/ReactiveX/RxJava/compare/f97c50dadcb40a0f6f41734087a1c52d9df55d08...09a344879852dd2604947429a1656f0b91da271a?src=pr)'
p2311
aS'thanks :+1:'
p2312
asg14
S'akarnokd:CleanupAndImprovements829_1'
p2313
sbsI4441
(iPull
Pull
p2314
(dp2315
g3
S'Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy\r\nFix drop strategy logic in FlowableOnBackpressureBufferStrategy\r\nAdd unit test for FlowableOnBackpressureBufferStrategy, copied from FlowableOnBackpressureBufferTest, there is still some work needed to have a better coverage'
p2316
sg5
S'Fix FlowableOnBackpressureBufferStrategy'
p2317
sg7
(lp2318
S'Bug'
p2319
asg10
I4441
sg11
(lp2320
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4441?src=pr) is 75.32% (diff: 66.66%)\n> Merging [#4441](https://codecov.io/gh/ReactiveX/RxJava/pull/4441?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.17%**\n\n```diff\n@@                2.x      #4441   diff @@\n==========================================\n  Files           454        454          \n  Lines         32271      32274     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5208       5209     +1   \n==========================================\n+ Hits          24249      24309    +60   \n+ Misses         6002       5928    -74   \n- Partials       2020       2037    +17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a856572...1617087](https://codecov.io/gh/ReactiveX/RxJava/compare/a856572327528ee05c1d1ab05426343aa0c5224b...16170870a1c3c051cb759b1e82f95c5a78878439?src=pr)'
p2321
aS'Thanks! :+1:'
p2322
asg14
S'matgabriel:2.x'
p2323
sbsI4442
(iPull
Pull
p2324
(dp2325
g3
S'  - Add javadoc to `AsyncEmitter.BackpressureMode` (#4199)\r\n  - Deprecate `Observable.fromAsync`, add `Observable.fromEmitter` instead (#4255)\r\n  - Add `Completable.fromEmitter()` (#4356)\r\n  - Add missing placeholder `@since` tags\r\n  - Fix some generics error `RxJavaHooks`\r\n  - Add race helper to `TestUtil`\r\n  - Fix javadoc warnings'
p2326
sg5
S'1.x: cleanup, javadoc, Completable.fromEmitter'
p2327
sg7
(lp2328
S'Cleanup'
p2329
aS'Documentation'
p2330
aS'Enhancement'
p2331
asg10
I4442
sg11
(lp2332
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4442?src=pr) is 84.19% (diff: 97.50%)\n> Merging [#4442](https://codecov.io/gh/ReactiveX/RxJava/pull/4442?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.05%**\n\n```diff\n@@                1.x      #4442   diff @@\n==========================================\n  Files           270        271     +1   \n  Lines         17563      17599    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2680       2683     +3   \n==========================================\n+ Hits          14797      14817    +20   \n- Misses         1909       1919    +10   \n- Partials        857        863     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [db3ff46...fdba5ed](https://codecov.io/gh/ReactiveX/RxJava/compare/db3ff46c7ad37cca4224f07d517f108357201220...fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?src=pr)'
p2333
aS':+1:'
p2334
asg14
S'akarnokd:Cleanup1x830_1'
p2335
sbsI4447
(iPull
Pull
p2336
(dp2337
g3
g53
sg5
S"Fix withLatestFrom's tparam"
p2338
sg7
(lp2339
S'Bug'
p2340
asg10
I4447
sg11
(lp2341
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4447?src=pr) is 84.23% (diff: 100%)\n> Merging [#4447](https://codecov.io/gh/ReactiveX/RxJava/pull/4447?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4447   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17599          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14818      14825     +7   \n+ Misses         1919       1916     -3   \n+ Partials        862        858     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0ee2e61...c9086eb](https://codecov.io/gh/ReactiveX/RxJava/compare/0ee2e61aa43545a134d9bf210f92df76d3baa045...c9086ebb863910b4ca3f617f117a11e0f1fc9ac1?src=pr)'
p2342
asg14
S'zsxwing:withLatestFrom-tparam'
p2343
sbsI4450
(iPull
Pull
p2344
(dp2345
g3
S'  - Improve coverage of internal classes\r\n  - Turn more empty enums into classes with private constructors\r\n  - Fix `Single.subscribeOn` and `Completable.subscribeOn` disposable management.\r\n  - Create a compact `FutureSubscriber` and `FutureObserver` classes, drop their former enums\r\n  - Deprecate `Disposables.from` methods, add `Disposables.fromX` methods where X = argument type\r\n  - Fix error management in `Completable.mergeX` operators.\r\n  - Remove unused methods from internal classes'
p2346
sg5
S'2.x: fixes, cleanup, coverage 8/31-1'
p2347
sg7
(lp2348
S'Bug'
p2349
aS'Cleanup'
p2350
aS'Coverage'
p2351
aS'Test'
p2352
asg10
I4450
sg11
(lp2353
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4450?src=pr) is 75.82% (diff: 69.75%)\n> Merging [#4450](https://codecov.io/gh/ReactiveX/RxJava/pull/4450?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.46%**\n\n```diff\n@@                2.x      #4450   diff @@\n==========================================\n  Files           454        454          \n  Lines         32274      32200    -74   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5178    -31   \n==========================================\n+ Hits          24322      24417    +95   \n+ Misses         5914       5769   -145   \n+ Partials       2038       2014    -24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [81badc3...0c30b08](https://codecov.io/gh/ReactiveX/RxJava/compare/81badc3aa4732664614c160941eaabbcb668e060...0c30b087277850f637ae156b582bce8858580b17?src=pr)'
p2354
aS':+1:'
p2355
asg14
S'akarnokd:CleanupFixes831'
p2356
sbsI4452
(iPull
Pull
p2357
(dp2358
g3
S'`Func1<Throwable,...>` parameter should be `Func1<? super Throwable, ...>`'
p2359
sg5
S'enhance generics on onErrorResumeNext and onErrorReturn'
p2360
sg7
(lp2361
S'Cleanup'
p2362
asg10
I4452
sg11
(lp2363
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4452?src=pr) is 84.28% (diff: 100%)\n> Merging [#4452](https://codecov.io/gh/ReactiveX/RxJava/pull/4452?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4452   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17599          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14831      14833     +2   \n+ Misses         1916       1910     -6   \n- Partials        852        856     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1be73de...a642def](https://codecov.io/gh/ReactiveX/RxJava/compare/1be73dec2be38ac662b416bccc727b3e49888481...a642def233b6d57e39c6ccd4a7d84d231efa08d0?src=pr)'
p2364
asg14
S'davidmoten:on-error-resume-return-generics-fix'
p2365
sbsI4453
(iPull
Pull
p2366
(dp2367
g3
S'In its current form, `awaitValueCount()` is the only `TestSubscriber#await*`method that throws a checked exception (that is, `InterruptedException`), whereas the others wrap it with a `IllegalStateException`. This spreads a try-catch disease throughout the entire code base where `awaitValueCount()` is used. One can argue that why not just declaring the exception in the caller method footprint: Because you might be implementing an interface (e.g. `Runnable`) which does not allow any exceptions in its footprint. This patch wraps the `InterruptedException` with an unchecked exception in `TestSubscriber#awaitValueCount()`.'
p2368
sg5
S'Wrap InterruptedException with an unchecked exception in TestSubscriber#awaitValueCount().'
p2369
sg7
(lp2370
S'Enhancement'
p2371
asg10
I4453
sg11
(lp2372
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4453?src=pr) is 84.25% (diff: 50.00%)\n> Merging [#4453](https://codecov.io/gh/ReactiveX/RxJava/pull/4453?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4453   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17602     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14825      14831     +6   \n  Misses         1915       1915          \n+ Partials        859        856     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [70bb06a...d0294c9](https://codecov.io/gh/ReactiveX/RxJava/compare/70bb06af350a7f6f611985f9b61e48ce200d6219...d0294c9970b7657e90f27684ddcdab3b5c92950a?src=pr)'
p2373
aS':+1:'
p2374
asg14
S'vy:1.x'
p2375
sbsI4454
(iPull
Pull
p2376
(dp2377
g3
S"This PR reimplements the `Maybe` with more up-to-date algorithms (the original was a copy-paste of some older Single and Completable code it seems) and adds javadoc and tests along the way. Not all operators have been rewritten yet (and no placeholders). Early adopters should refer to the `toX` methods on the base reactive types. The PR also adds the `RxJavaPlugins` hooks to support `Maybe`.\r\n\r\nIn addition, I've fixed javadoc mistakes in the other base reactive types (referring to the wrong types)."
p2378
sg5
S'2.x: start reimplementing Maybe with up-to-date javadoc, tests and algo'
p2379
sg7
(lp2380
S'Cleanup'
p2381
aS'Enhancement'
p2382
asg10
I4454
sg11
(lp2383
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4454?src=pr) is 75.96% (diff: 77.49%)\n> Merging [#4454](https://codecov.io/gh/ReactiveX/RxJava/pull/4454?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **3.26%**\n\n```diff\n@@                2.x      #4454   diff @@\n==========================================\n  Files           499        485     -14   \n  Lines         33620      33041    -579   \n  Methods           0          0           \n  Messages          0          0           \n  Branches       5269       5240     -29   \n==========================================\n+ Hits          24439      25098    +659   \n+ Misses         7181       5907   -1274   \n- Partials       2000       2036     +36   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b8a3320...cebbe6d](https://codecov.io/gh/ReactiveX/RxJava/compare/b8a3320cb594f291191fa4a6bee6ed12eff62ffe...cebbe6dc7d68da9e6cbd5cc3d6e7e0ec1ecce920?src=pr)'
p2384
aS':+1:'
p2385
aS'Thanks @JakeWharton !'
p2386
asg14
S'akarnokd:Cleanup901_1'
p2387
sbsI4458
(iPull
Pull
p2388
(dp2389
g3
S'#4456 \r\n\r\nCompletable already used .doOnDispose() however I renamed the arguments to match Observable and Single'
p2390
sg5
S'2.x: rename Observable and Single #doOnCancel to #doOnDispose'
p2391
sg7
(lp2392
S'Cleanup'
p2393
asg10
I4458
sg11
(lp2394
S"The diff for observable doesn't show but the offline-comparison only lists 30-40 lines changes. Did you run some whitespace cleanup?"
p2395
aS"@akarnokd Whoops, you're right. Sorry. Auto formatter seems to have changed some whitespaces. I'll revert that."
p2396
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4458?src=pr) is 75.94% (diff: 100%)\n> Merging [#4458](https://codecov.io/gh/ReactiveX/RxJava/pull/4458?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4458   diff @@\n==========================================\n  Files           485        485          \n  Lines         33042      33042          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5240       5240          \n==========================================\n+ Hits          25082      25093    +11   \n+ Misses         5915       5909     -6   \n+ Partials       2045       2040     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [52dc050...04a61cb](https://codecov.io/gh/ReactiveX/RxJava/compare/52dc0500c9e7fea96d614d847f3a04eb1afd91dd...04a61cba0851446919edd312d6c303f7da82f854?src=pr)'
p2397
aS':+1:'
p2398
asg14
S'Mauin:doOnDispose'
p2399
sbsI4460
(iPull
Pull
p2400
(dp2401
g3
S"First part of #4457 \r\n\r\nIs it okay that I reused Notification like that?\r\n\r\nAlso are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6, as my default seems to be Java 8 and I don't get any errors shown in the IDE."
p2402
sg5
S'1.x: Completable add doOnEach'
p2403
sg7
(lp2404
S'Enhancement'
p2405
asg10
I4460
sg11
(lp2406
S'Okay but you have [generics problem](https://travis-ci.org/ReactiveX/RxJava/builds/156916384#L166).'
p2407
aS"Alright it's fixed now."
p2408
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4460?src=pr) is 84.23% (diff: 100%)\n> Merging [#4460](https://codecov.io/gh/ReactiveX/RxJava/pull/4460?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4460   diff @@\n==========================================\n  Files           271        271          \n  Lines         17602      17610     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2684     +1   \n==========================================\n+ Hits          14826      14833     +7   \n- Misses         1918       1921     +3   \n+ Partials        858        856     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [30da1aa...eacbf59](https://codecov.io/gh/ReactiveX/RxJava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354...eacbf59a11f6758239012c4edd0baa07a502b7fc?src=pr)'
p2409
aS':+1:'
p2410
asg14
S'vanniktech:1.x_completable_do_on_each'
p2411
sbsI4461
(iPull
Pull
p2412
(dp2413
g3
S"Really not that happy with `onNotification.call(Notification.<T>createOnNext(t));` do you guys have any other way of doing this? There's no way of creating a Notification that has the `onCompleted` plus a value. A new one could be introduced there though. Also the `doOnEachSuccess` test feels clunky.\r\n\r\nAlso why does Single when using the `do` methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.\r\n\r\nJavadoc will follow once we sorted out the few nits here.\r\n\r\nFixes #4457 "
p2414
sg5
S'1.x: Single add doOnEach'
p2415
sg7
(lp2416
S'Enhancement'
p2417
asg10
I4461
sg11
(lp2418
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4461?src=pr) is 84.28% (diff: 100%)\n> Merging [#4461](https://codecov.io/gh/ReactiveX/RxJava/pull/4461?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.09%**\n\n```diff\n@@                1.x      #4461   diff @@\n==========================================\n  Files           271        272     +1   \n  Lines         17607      17647    +40   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2684       2687     +3   \n==========================================\n+ Hits          14824      14874    +50   \n+ Misses         1923       1913    -10   \n  Partials        860        860          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [11343ae...0ea399f](https://codecov.io/gh/ReactiveX/RxJava/compare/11343ae031feb01d3d08ba5cd0e5f275ed798e68...0ea399fc6f8f3cab60a2baa3763882ac67d0fd77?src=pr)'
p2419
aS"I'll continue this on Monday and make all suggested changes"
p2420
aS"[ExceptionsTest#testOnErrorExceptionIsThrownFromSingleDoOnSuccess](https://github.com/ReactiveX/RxJava/blob/11343ae031feb01d3d08ba5cd0e5f275ed798e68/src/test/java/rx/exceptions/ExceptionsTest.java#L288) fails although I'm not quite sure what the purpose of that test is. Also it seems a bit off to me. Can you give some insights there?"
p2421
aS'Looks like removing the toObservable.toSingle no longer wraps the subscriber into a SafeSubscriber and the test just crashes with a different exception.'
p2422
aS'No exception is being thrown at all.'
p2423
aS'Can you single step the test? In the orginal DoOnEach, it has throwifFatal an throwOrReport you missed btw.'
p2424
aS':+1:'
p2425
asg14
S'vanniktech:1.x_single_do_on_each'
p2426
sbsI4463
(iPull
Pull
p2427
(dp2428
g3
g53
sg5
S'1.x: Remove some unused fields'
p2429
sg7
(lp2430
S'Cleanup'
p2431
asg10
I4463
sg11
(lp2432
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4463?src=pr) is 84.23% (diff: 100%)\n> Merging [#4463](https://codecov.io/gh/ReactiveX/RxJava/pull/4463?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4463   diff @@\n==========================================\n  Files           271        271          \n  Lines         17602      17599     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n- Hits          14826      14824     -2   \n+ Misses         1918       1917     -1   \n  Partials        858        858          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [30da1aa...8ec7591](https://codecov.io/gh/ReactiveX/RxJava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354...8ec7591cb45121c8f09476d68ef02efb39a56960?src=pr)'
p2433
asg14
S'vanniktech:1.x_unused_fields'
p2434
sbsI4466
(iPull
Pull
p2435
(dp2436
g3
S'Fix #4462 \r\n\r\nIt might just as well shine some light into which method should be used and explain why there are 2'
p2437
sg5
S'1.x: Deprecate Notification.createOnCompleted'
p2438
sg7
(lp2439
S'Cleanup'
p2440
asg10
I4466
sg11
(lp2441
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4466?src=pr) is 84.26% (diff: 100%)\n> Merging [#4466](https://codecov.io/gh/ReactiveX/RxJava/pull/4466?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4466   diff @@\n==========================================\n  Files           271        271          \n  Lines         17607      17607          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2684       2684          \n==========================================\n+ Hits          14823      14836    +13   \n+ Misses         1920       1918     -2   \n+ Partials        864        853    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7593247...561b5df](https://codecov.io/gh/ReactiveX/RxJava/compare/75932471eda6c7c972a40b0560a65c75ffd8cbc2...561b5df99d7a88947ecbe12dac0dee1e9f8b1d8b?src=pr)'
p2442
asg14
S'vanniktech:1.x_deprecate'
p2443
sbsI4467
(iPull
Pull
p2444
(dp2445
g3
S'  - Move `verifyPositive` into `ObjectHelper`\r\n  - Fix javadoc of `Flowable.subscribe()` and `Observable.subscribe()` mentioning `Subscription` from 1.x\r\n  - `Maybe`: add `amb`, `concat`, `concatArray`, `merge`, `mergeArray`, `concatMap`, `subscribe`, `subscribeWith`, `doOnEvent`'
p2446
sg5
S'2.x: add more Maybe operators, fix a few javadoc mistakes'
p2447
sg7
(lp2448
S'Documentation'
p2449
aS'Enhancement'
p2450
asg10
I4467
sg11
(lp2451
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4467?src=pr) is 76.00% (diff: 83.80%)\n> Merging [#4467](https://codecov.io/gh/ReactiveX/RxJava/pull/4467?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4467   diff @@\n==========================================\n  Files           485        493     +8   \n  Lines         33042      33546   +504   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5240       5310    +70   \n==========================================\n+ Hits          25079      25496   +417   \n- Misses         5920       5983    +63   \n- Partials       2043       2067    +24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [88fafd8...d5bd37a](https://codecov.io/gh/ReactiveX/RxJava/compare/88fafd82aeec802e0e4b2a3595ffd0ba2f6901b6...d5bd37a46a9ad53d5a3f0cffa611af8da4a7098c?src=pr)'
p2452
aS':+1:'
p2453
asg14
S'akarnokd:MaybeOps902_1'
p2454
sbsI4468
(iPull
Pull
p2455
(dp2456
g3
S'  - Fixed bugs in `Flowable.sequenceEqual`, `Flowable.zip` when errors are delayed, `Flowable.onBackpressureBuffer` when errors are delayed\r\n  - Fixed mentions of `NbpX` in some places\r\n  - Synchronized unit tests between `Observable` and `Flowable`'
p2457
sg5
S'2.x: coverage, bugfixes, 9/03-1'
p2458
sg7
(lp2459
S'Bug'
p2460
aS'Cleanup'
p2461
aS'Coverage'
p2462
asg10
I4468
sg11
(lp2463
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4468?src=pr) is 76.91% (diff: 79.07%)\n> Merging [#4468](https://codecov.io/gh/ReactiveX/RxJava/pull/4468?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.89%**\n\n```diff\n@@                2.x      #4468   diff @@\n==========================================\n  Files           493        493          \n  Lines         33546      33684   +138   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5310       5315     +5   \n==========================================\n+ Hits          25502      25907   +405   \n+ Misses         5980       5711   -269   \n- Partials       2064       2066     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b15df98...4617b1f](https://codecov.io/gh/ReactiveX/RxJava/compare/b15df9899183ecce0f40b132a47be5700a7c7a32...4617b1fcea50b37fee315155c2eebc2bcc168a74?src=pr)'
p2464
asg14
S'akarnokd:Coverage902_2'
p2465
sbsI4469
(iPull
Pull
p2466
(dp2467
g3
S'  - enable fusion with `Observable.map`\r\n  - remove impossible branches in some classes\r\n  - add more tests to cover tool classes\r\n  - fix `Observable.range()` entering regular emission if fusion-drain is interrupted\r\n  - fix `FullArbiter` and `ObservableFullArbiter` not cancelling/disposing the incoming Subscription/Disposable in some cases'
p2468
sg5
S'2.x: coverage and fixes 9/03-2'
p2469
sg7
(lp2470
S'Bug'
p2471
aS'Cleanup'
p2472
aS'Coverage'
p2473
asg10
I4469
sg11
(lp2474
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4469?src=pr) is 78.18% (diff: 94.44%)\n> Merging [#4469](https://codecov.io/gh/ReactiveX/RxJava/pull/4469?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **1.17%**\n\n```diff\n@@                2.x      #4469   diff @@\n==========================================\n  Files           493        493          \n  Lines         33684      33629    -55   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5315       5290    -25   \n==========================================\n+ Hits          25939      26293   +354   \n+ Misses         5690       5370   -320   \n+ Partials       2055       1966    -89   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f59ce00...52dc276](https://codecov.io/gh/ReactiveX/RxJava/compare/f59ce00934a65b880cbe5b7e06436f85e73187d9...52dc27674d2b13f3645b2be92cb8c93a3cb57b13?src=pr)'
p2475
asg14
S'akarnokd:Coverage903_2'
p2476
sbsI4474
(iPull
Pull
p2477
(dp2478
g3
S'Update Javadoc 1.1.10 on gh-pages'
p2479
sg5
S'1.1.10 javadoc'
p2480
sg7
(lp2481
S'Documentation'
p2482
asg10
I4474
sg11
(lp2483
sg14
S'akarnokd:Javadoc-1-1-10'
p2484
sbsI4478
(iPull
Pull
p2485
(dp2486
g3
g53
sg5
S'Fix typo Javadocs TestObserver'
p2487
sg7
(lp2488
S'Documentation'
p2489
asg10
I4478
sg11
(lp2490
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4478?src=pr) is 78.14% (diff: 100%)\n> Merging [#4478](https://codecov.io/gh/ReactiveX/RxJava/pull/4478?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4478   diff @@\n==========================================\n  Files           493        493          \n  Lines         33629      33629          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26312      26280    -32   \n- Misses         5365       5385    +20   \n- Partials       1952       1964    +12   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ebaeee5...ddcddfb](https://codecov.io/gh/ReactiveX/RxJava/compare/ebaeee5e169063462c1bc55c9b18fe9fa942af57...ddcddfbb9b59cabd9fda2f210c7ec520f6e3dd20?src=pr)'
p2491
aS'Thanks!'
p2492
asg14
S'VictorAlbertos:2.x'
p2493
sbsI4479
(iPull
Pull
p2494
(dp2495
g3
g53
sg5
S'2.x: Add doOnEvent to Single & Completable'
p2496
sg7
(lp2497
S'Enhancement'
p2498
asg10
I4479
sg11
(lp2499
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4479?src=pr) is 78.10% (diff: 78.12%)\n> Merging [#4479](https://codecov.io/gh/ReactiveX/RxJava/pull/4479?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.05%**\n\n```diff\n@@                2.x      #4479   diff @@\n==========================================\n  Files           493        494     +1   \n  Lines         33629      33661    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n+ Hits          26283      26290     +7   \n- Misses         5383       5401    +18   \n- Partials       1963       1970     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [12ca280...dda26ce](https://codecov.io/gh/ReactiveX/RxJava/compare/12ca280008885611dc342b888c29cbbd11708c82...dda26ce572e21eccf72a7d304ac8f8a5b8b0aa2b?src=pr)'
p2500
asg14
S'vanniktech:2.x_do_on_event'
p2501
sbsI4480
(iPull
Pull
p2502
(dp2503
g3
S"I've been working on the this for too long in the background and want to get this out for review even though many of the units tests don't pass yet.\r\n\r\nIts a bit rough at the moment but there was a couple of things that I wanted to talk about.\r\n\r\n1. does it make sense to have `ignoreElements` where there is a `toCompletable`.\r\n2. the same goes for `single` when there is a `toSingle`.\r\n3. moved `toFuture` to Single since it seems to fit better."
p2504
sg5
S'Integrate Maybe and Single into Observable. *** DO NOT MERGE ***'
p2505
sg7
(lp2506
sg10
I4480
sg11
(lp2507
sg14
S'abersnaze:interop_obs'
p2508
sbsI4482
(iPull
Pull
p2509
(dp2510
g3
g53
sg5
S'2.x: Fix Generic issue in Single'
p2511
sg7
(lp2512
sg10
I4482
sg11
(lp2513
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4482?src=pr) is 78.12% (diff: 100%)\n> Merging [#4482](https://codecov.io/gh/ReactiveX/RxJava/pull/4482?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4482   diff @@\n==========================================\n  Files           494        494          \n  Lines         33661      33661          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26319      26298    -21   \n- Misses         5381       5395    +14   \n- Partials       1961       1968     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...e53a337](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...e53a33701dc56f98bd81cbaf5f43ab4d1f493173?src=pr)'
p2514
asg14
S'vanniktech:2.x_single_generics_fix'
p2515
sbsI4483
(iPull
Pull
p2516
(dp2517
g3
g53
sg5
S'2.x: Reuse SingleDoOnEvent'
p2518
sg7
(lp2519
sg10
I4483
sg11
(lp2520
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4483?src=pr) is 78.19% (diff: 100%)\n> Merging [#4483](https://codecov.io/gh/ReactiveX/RxJava/pull/4483?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4483   diff @@\n==========================================\n  Files           494        492     -2   \n  Lines         33661      33632    -29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26319      26298    -21   \n+ Misses         5381       5374     -7   \n+ Partials       1961       1960     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...bce1224](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...bce122465f973d9c2087490bcbbc025e44a98bd3?src=pr)'
p2521
asg14
S'vanniktech:2.x_reuse_SingleDoOnEvent'
p2522
sbsI4484
(iPull
Pull
p2523
(dp2524
g3
S'This PR adds the baseline for changing `Flowable` and `Observable` operators to return `Single`, `Completable` or `Maybe` but in case the user wants to go back to the original type via `toFlowable` or `toObservable` we switch to a natively `Flowable`/`Observable` operator (macro-fusion).\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/18269896/98ffbf80-742a-11e6-91b7-23b03bec8b8c.png)\r\n\r\nNo changes were applied to `Observable` yet hence the roughly same result there. `Flowable.reduce()` has been updated plus there is a new `FlowableReduce` instead of `scan().last()`.'
p2525
sg5
S'2.x: Flowable.reduce() to return Single, macro fusion'
p2526
sg7
(lp2527
S'Enhancement'
p2528
aS'Performance'
p2529
asg10
I4484
sg11
(lp2530
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4484?src=pr) is 78.12% (diff: 68.08%)\n> Merging [#4484](https://codecov.io/gh/ReactiveX/RxJava/pull/4484?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4484   diff @@\n==========================================\n  Files           494        496     +2   \n  Lines         33661      33754    +93   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5303    +13   \n==========================================\n+ Hits          26319      26371    +52   \n- Misses         5381       5415    +34   \n- Partials       1961       1968     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...b997011](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...b99701135c968566115ee471c145e105ebdfb749?src=pr)'
p2531
aS':+1:'
p2532
asg14
S'akarnokd:MacroFuseBack'
p2533
sbsI4486
(iPull
Pull
p2534
(dp2535
g3
g53
sg5
S'2.x: Completable enhance doOnEvent to reduce allocations'
p2536
sg7
(lp2537
S'Enhancement'
p2538
asg10
I4486
sg11
(lp2539
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4486?src=pr) is 78.19% (diff: 70.83%)\n> Merging [#4486](https://codecov.io/gh/ReactiveX/RxJava/pull/4486?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4486   diff @@\n==========================================\n  Files           494        495     +1   \n  Lines         33661      33679    +18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n+ Hits          26319      26335    +16   \n+ Misses         5381       5377     -4   \n- Partials       1961       1967     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...b8ec13f](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...b8ec13fc1ec7cba37a5908b66ea545d90b0a57ea?src=pr)'
p2540
aS'@akarnokd this is the way it is desired now, correct?'
p2541
aS'Great! :+1:'
p2542
asg14
S'vanniktech:2.x_enhance_completable_do_on'
p2543
sbsI4488
(iPull
Pull
p2544
(dp2545
g3
S'This PR adds just the new methods from #4481 to allow a much cleaner change of return types later on.'
p2546
sg5
S'2.x: add new methods to Maybe, Observable and Single from 4481'
p2547
sg7
(lp2548
S'Enhancement'
p2549
asg10
I4488
sg11
(lp2550
S':+1:'
p2551
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4488?src=pr) is 77.79% (diff: 8.16%)\n> Merging [#4488](https://codecov.io/gh/ReactiveX/RxJava/pull/4488?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.36%**\n\n```diff\n@@                2.x      #4488   diff @@\n==========================================\n  Files           497        500     +3   \n  Lines         33772      33909   +137   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5303       5325    +22   \n==========================================\n- Hits          26396      26378    -18   \n- Misses         5409       5554   +145   \n- Partials       1967       1977    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [928e437...344af8d](https://codecov.io/gh/ReactiveX/RxJava/compare/928e4379f6ea2086b4418cc64c3382e204a04ae2...344af8dfcb8498b6a590290199bbaf50476d966e?src=pr)'
p2552
aS'Updated with corrections.'
p2553
asg14
S'akarnokd:MaybeOps906_1'
p2554
sbsI4490
(iPull
Pull
p2555
(dp2556
g3
S'Renames Observable/Single/CompletableEmitter#isCancelled to #isDisposed.\r\n\r\nThis now causes a bit of a weird situation where most (not all) Emitter classes implement `Disposable` as well, so both interfaces expose the same `#isDisposed` method. Before the `#isCancelled` methods were basically just calling `#isDisposed` or had the same implementation. \r\n\r\nSuggestions on how to improve this?'
p2557
sg5
S'2.x: rename emitters #isCancelled to #isDisposed'
p2558
sg7
(lp2559
S'Cleanup'
p2560
asg10
I4490
sg11
(lp2561
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4490?src=pr) is 77.91% (diff: 0.00%)\n> Merging [#4490](https://codecov.io/gh/ReactiveX/RxJava/pull/4490?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4490   diff @@\n==========================================\n  Files           500        500          \n  Lines         33909      33905     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5325       5325          \n==========================================\n+ Hits          26392      26416    +24   \n+ Misses         5547       5517    -30   \n- Partials       1970       1972     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ff3c5d0...80ebe35](https://codecov.io/gh/ReactiveX/RxJava/compare/ff3c5d0aa45494c90f3b83505315ed73835f67a9...80ebe3551a00164b73a3ee0ffffa436aff5de3d4?src=pr)'
p2562
aS"I'm tempted to remove `setDisposable` from the emitter and keep this method named `isCanceled()`. If you want to set a disposable why not use `unsafeCreate` and `ObservableSource` directly?"
p2563
aS'@JakeWharton these are the safe versions that also manages a resource for you without the need to worry about (and lose) backpressure or cancellation in general from `unsafeCreate`.'
p2564
aS'Otherwise :+1:'
p2565
aS"I'm not sure how that is an argument against what I said. Having both `setCancelable` and `setDisposable` in the API is ugly and redundant."
p2566
aS"If you believe users don't really need the Disposable overload then I'm open to remove them. Also consider dropping Disposables.from variants not in use and adding Cancellables.from."
p2567
aS'As for `setCancelable` and `setDisposable` I agree with @JakeWharton. Would probably be best to somehow merge them or get rid of one to clean the API. But that would be a separate issue/PR, I guess?'
p2568
aS"Yes, let's have a separate PR for that."
p2569
asg14
S'Mauin:emitters_isDisposed'
p2570
sbsI4491
(iPull
Pull
p2571
(dp2572
g3
S'This PR compacts the `blockingX` operators by extending `CountDownLatch` and implementing `SingleObserver`, `CompletableObserver` and `MaybeObserver` with the necessary blocking await mechanics.\r\n\r\nBenchmark comparison (i7 4770, Windows 7 x64, Java 8u102):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/18291535/868c4d6a-7488-11e6-99f7-43415f79e5e4.png)\r\n\r\nIn addition, the internal package `subscribers.single` and `subscribers.completable` has been removed and the classes moved into `io.reactivex.internal.observers` package. The old blocking enum helpers were removed as well.\r\n\r\nThe `BlockingSingleSubscriber` and `BlockingSingleObserver` abstract classes have been renamed to `BlockingBaseX` to avoid name confusion (they have nothing to do with the `Single` type).'
p2573
sg5
S'2.x: reduce blockingX overhead, move internal observers to common pkg'
p2574
sg7
(lp2575
S'Cleanup'
p2576
aS'Performance'
p2577
asg10
I4491
sg11
(lp2578
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4491?src=pr) is 77.88% (diff: 58.49%)\n> Merging [#4491](https://codecov.io/gh/ReactiveX/RxJava/pull/4491?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4491   diff @@\n==========================================\n  Files           500        498     -2   \n  Lines         33905      33875    -30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5325       5326     +1   \n==========================================\n- Hits          26394      26382    -12   \n+ Misses         5541       5519    -22   \n- Partials       1970       1974     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [10f727f...1129263](https://codecov.io/gh/ReactiveX/RxJava/compare/10f727f97efed67e33c4ec5cf6644267a9a9bed6...112926355feb4950ed0ba2850ab6d9db7cab4e9e?src=pr)'
p2579
aS':+1:'
p2580
asg14
S'akarnokd:BlockingXCompact906_1'
p2581
sbsI4493
(iPull
Pull
p2582
(dp2583
g3
S'  - minor Javadoc corrections\r\n  - Note: some Maybe operators shifted within the file\r\n  - add to `Maybe`: `concatArrayDelayError`, `concatArrayEager`, `concatEager`, `concatDelayError`, `mergeArrayDelayError`, `mergeDelayError`, `sequenceEqual`, `timer`, `using`, `zip`, `zipArray`\r\n  - improve coverage of `Observable`, `Single` and `Maybe`.\r\n  - Move tests from `ObservableTests` into `ObservableTest` drop the former.'
p2584
sg5
S'2.x: more Maybe operators, minor cleanups 9/07-1'
p2585
sg7
(lp2586
S'Cleanup'
p2587
aS'Coverage'
p2588
aS'Enhancement'
p2589
asg10
I4493
sg11
(lp2590
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4493?src=pr) is 78.02% (diff: 72.61%)\n> Merging [#4493](https://codecov.io/gh/ReactiveX/RxJava/pull/4493?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.16%**\n\n```diff\n@@                2.x      #4493   diff @@\n==========================================\n  Files           498        505     +7   \n  Lines         33875      34357   +482   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5326       5383    +57   \n==========================================\n+ Hits          26373      26806   +433   \n- Misses         5536       5547    +11   \n- Partials       1966       2004    +38   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1f0a116...2bd7c79](https://codecov.io/gh/ReactiveX/RxJava/compare/1f0a116dc176cdce4e76192edba4b92e3e3a8eb4...2bd7c79f30726b930313902ce3d03e42e0f7bdd3?src=pr)'
p2591
aS':+1:'
p2592
asg14
S'akarnokd:MaybeOps907_1'
p2593
sbsI4496
(iPull
Pull
p2594
(dp2595
g3
S'Removed them like this:\r\n\r\n`find . -type f -name "*.java" | xargs sed -i \'\' -e\'s/[ \\t]*$//\' "$1"`\r\n\r\nI think it\'s best to review this locally or by appending `?w=1` to this URL to let GitHub ignore white space changes.'
p2596
sg5
S'2.x: Remove trailing whitespace'
p2597
sg7
(lp2598
S'Cleanup'
p2599
asg10
I4496
sg11
(lp2600
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4496?src=pr) is 77.97% (diff: 100%)\n> Merging [#4496](https://codecov.io/gh/ReactiveX/RxJava/pull/4496?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4496   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34357          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n- Hits          26802      26790    -12   \n- Misses         5550       5566    +16   \n+ Partials       2005       2001     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d2d7f69...92e1114](https://codecov.io/gh/ReactiveX/RxJava/compare/d2d7f6920b605d7acf90d440d3744e9e7e1249da...92e1114ae07af69482f805de8c80a576b9d9140e?src=pr)'
p2601
asg14
S'vanniktech:2.x_trailing_space'
p2602
sbsI4497
(iPull
Pull
p2603
(dp2604
g3
S'This will add checkstyle though it should not be executed together with Travis and hence does not fail the PR if there are. Also running `./gradlew checkstyleMain` gives a list of places where trailing whitespace exists.'
p2605
sg5
S'2.x: Add Checkstyle for Trailing Whitespace'
p2606
sg7
(lp2607
S'Cleanup'
p2608
asg10
I4497
sg11
(lp2609
S'> it should not be executed together with Travis and hence does not fail the PR\r\n\r\nSeems pointless to add then.'
p2610
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4497?src=pr) is 78.01% (diff: 100%)\n> Merging [#4497](https://codecov.io/gh/ReactiveX/RxJava/pull/4497?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4497   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34357          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n+ Hits          26791      26802    +11   \n- Misses         5551       5561    +10   \n+ Partials       2015       1994    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [35281d5...154fe6b](https://codecov.io/gh/ReactiveX/RxJava/compare/35281d57811dc5fad372b599db57129d40db05f7...154fe6b8cf01da5ff33b9bbb7a068eb66713c3ba?src=pr)'
p2611
aS"Yeah having the same opinion but David doesn't want it to fail the PR. "
p2612
aS'For now, just run it with `./gradlew checkstyleMain` sometimes.'
p2613
aS'Yet it does fail it https://travis-ci.org/ReactiveX/RxJava/builds/158395672#L205'
p2614
aS'Alright my bad #4505\r\n\r\nI thought the checkstyle tasks would not be executed automatically though `build` executes `check` and `checkstyle` task hooked itself into `check` task.'
p2615
asg14
S'vanniktech:2.x_checkstyle'
p2616
sbsI4499
(iPull
Pull
p2617
(dp2618
g3
S'I just do a test!\r\ni am so sorry..'
p2619
sg5
S'2.x'
p2620
sg7
(lp2621
sg10
I4499
sg11
(lp2622
S'What are you testing and why in this repo?'
p2623
aS'i am learning how to pull request on GitHub.so do that test\r\nmy English is poor so it is very difficult to learn on English web\r\nfinally,  sorry for that and thank you for your generosity.\r\n'
p2624
asg14
S'ReactiveX:2.x'
p2625
sbsI4500
(iPull
Pull
p2626
(dp2627
g3
S'Dunno whether this is wanted or not in 1.x. If not just close this PR. '
p2628
sg5
S'1.x: Remove trailing whitespace'
p2629
sg7
(lp2630
S'Cleanup'
p2631
asg10
I4500
sg11
(lp2632
S"I haven't seen IDEs adding them back but only remove them so let's have this to avoid future unneccessary removals from unrelated changes in files."
p2633
aS'Alright sounds good and then #4123 can be closed'
p2634
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4500?src=pr) is 84.34% (diff: 65.38%)\n> Merging [#4500](https://codecov.io/gh/ReactiveX/RxJava/pull/4500?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4500   diff @@\n==========================================\n  Files           272        272          \n  Lines         17647      17647          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2687       2687          \n==========================================\n- Hits          14899      14884    -15   \n- Misses         1899       1908     +9   \n- Partials        849        855     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d86cf19...0cf0c02](https://codecov.io/gh/ReactiveX/RxJava/compare/d86cf19e918152ea71d895aef5f1ee2d05f5a67f...0cf0c02155764a47816fedc96de4365e840762c5?src=pr)'
p2635
asg14
S'vanniktech:1.x_trailing_space'
p2636
sbsI4502
(iPull
Pull
p2637
(dp2638
g3
S'This should be less confusing.'
p2639
sg5
S'2.x: Replace `finallyDo` references with `doAfterTerminate`'
p2640
sg7
(lp2641
S'Cleanup'
p2642
aS'Documentation'
p2643
asg10
I4502
sg11
(lp2644
S'Great, thanks! :+1:'
p2645
aS'The test failure looks unrelated.'
p2646
aS"No problem, I've rerun the check."
p2647
asg14
S'ikesyo:remove-finallydo-references'
p2648
sbsI4503
(iPull
Pull
p2649
(dp2650
g3
S"This PR adds the ability to specify the default thread priorities of `computation()`, `io()`, `newThread()` and `single()` schedulers via system properties. I've added the property names to the `Schedulers` javadoc.\r\n\r\nRelated: #4389."
p2651
sg5
S'2.x: add system properties to adjust thread priorities of Schedulers'
p2652
sg7
(lp2653
S'Enhancement'
p2654
asg10
I4503
sg11
(lp2655
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4503?src=pr) is 77.97% (diff: 100%)\n> Merging [#4503](https://codecov.io/gh/ReactiveX/RxJava/pull/4503?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4503   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34367    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n- Hits          26800      26797     -3   \n- Misses         5559       5568     +9   \n- Partials       1998       2002     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [935ae3c...c4031f7](https://codecov.io/gh/ReactiveX/RxJava/compare/935ae3cc4caae373c83c6ae89550a55999f1231d...c4031f78c6cfb0e24a05fdc42bdfc40e1a7db8bd?src=pr)'
p2656
aS'Thanks! :+1:'
p2657
asg14
S'akarnokd:ThreadFactoryPriority'
p2658
sbsI4504
(iPull
Pull
p2659
(dp2660
g3
S'Also any reason the Dispoable is called `s`? Is it still from the Subscription time?\r\n\r\nFixes #4501 '
p2661
sg5
S'2.x: Add Disposable Observer for Maybe, Completable & Single'
p2662
sg7
(lp2663
S'Enhancement'
p2664
asg10
I4504
sg11
(lp2665
S'Seems unrelated:\r\n\r\n```\r\nio.reactivex.internal.operators.observable.ObservableRefCountTest > testRepeat FAILED\r\n    java.lang.AssertionError: Error(s) present: [java.lang.IllegalStateException: onSubscribe not called in proper order] (latch = 1, values = 51, errors = 1, completions = 0)\r\n        at io.reactivex.observers.TestObserver.fail(TestObserver.java:363)\r\n        at io.reactivex.observers.TestObserver.assertNoErrors(TestObserver.java:411)\r\n        at io.reactivex.internal.operators.observable.ObservableRefCountTest.testRepeat(ObservableRefCountTest.java:195)\r\n\r\n        Caused by:\r\n        io.reactivex.exceptions.CompositeException\r\n            at io.reactivex.observers.TestObserver.fail(TestObserver.java:364)\r\n            ... 2 more\r\n\r\n            Caused by:\r\n            io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain: Chain of Causes for CompositeException In Order Received =>\r\n\r\n                Caused by:\r\n                java.lang.IllegalStateException: onSubscribe not called in proper order\r\n```'
p2666
aS"Yep, I'll fix that next - started to become annoying to me too."
p2667
asg14
S'vanniktech:2.x_reactive_disposable_observers'
p2668
sbsI4505
(iPull
Pull
p2669
(dp2670
g3
g53
sg5
S'2.x: Ignore Checkstyle failures'
p2671
sg7
(lp2672
S'Build'
p2673
asg10
I4505
sg11
(lp2674
sg14
S'vanniktech:2.x_ignore_checkstyle_failures'
p2675
sbsI4506
(iPull
Pull
p2676
(dp2677
g3
S'This PR fixes the operators `refCount` (ensure proper call order to onXXX), disables FindBugs due to out-of-memory kills on Travis and increases the half-time sleep of a flaky unit-test.'
p2678
sg5
S'2.x: fix operator RefCount, disable FindBugs (due to Travis OOM)'
p2679
sg7
(lp2680
S'Bug'
p2681
aS'Build'
p2682
asg10
I4506
sg11
(lp2683
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4506?src=pr) is 78.00% (diff: 92.85%)\n\n\n\n\n> No coverage report found for **2.x** at 043f37d.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [043f37d...c1bdbeb](https://codecov.io/gh/ReactiveX/RxJava/compare/043f37ddc057158788da647ee7a8ebbf172ad21c...c1bdbebdce985072d1dcd4fdc92dbaf56c8f8f3f?src=pr)'
p2684
asg14
S'akarnokd:ObservableRefCountFix'
p2685
sbsI4507
(iPull
Pull
p2686
(dp2687
g3
S"This PR sets up the build to run TestNG tests as well and adds the Reactive-Streams TCK to allow validating our operators.\r\n\r\nIncluded tests are: `just`, `fromArray`, `fromIterable`, `concat`, `merge`.\r\n\r\nNote that the TCK tests for invalid `request()` amount which, according to the spec, should be reported to the running `Subscriber` via `onError`. Unfortunately, this is a very expensive requirement (requiring half-serialization all the time) and we are not going to support it in RxJava 2. Negative requests are bugs in operators and should be fixed, we only provide a notification about such situations in the `RxJavaPlugins.onError` for those who want to check for such errors. \r\n\r\nTherefore, the `FlowableTCK` has been added with does the required behavior by the TCK and can be used as `FlowableTCK.wrap(flowable)` when returning from the TCK's `createPublisher(long)`."
p2688
sg5
S'2.x: add Reactive-Streams TCK infrastructure and couple of tests'
p2689
sg7
(lp2690
S'Test'
p2691
asg10
I4507
sg11
(lp2692
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4507?src=pr) is 77.92% (diff: 100%)\n> Merging [#4507](https://codecov.io/gh/ReactiveX/RxJava/pull/4507?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4507   diff @@\n==========================================\n  Files           508        508          \n  Lines         34383      34383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n- Hits          26799      26794     -5   \n- Misses         5587       5596     +9   \n+ Partials       1997       1993     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4ce25cb...3279670](https://codecov.io/gh/ReactiveX/RxJava/compare/4ce25cb968179460f9bc1ef75fd2e071921add01...3279670ff13c81816d788ddea7f8a0390de553ea?src=pr)'
p2693
asg14
S'akarnokd:ReactiveStreamsTCK'
p2694
sbsI4508
(iPull
Pull
p2695
(dp2696
g3
g53
sg5
S'2.x: Add exception message in SingleFromCallable'
p2697
sg7
(lp2698
S'Cleanup'
p2699
asg10
I4508
sg11
(lp2700
S'@akarnokd what do you think about a custom exception that explains why null is not allowed anymore? And if someone goes and wants to emit null that one will be thrown instead of NullPointerException'
p2701
aS"You mean like\r\n\r\n`The callable returned a null value. Null values are generally not allowed in 2.x operators and sources.`\r\n\r\nIf you manually change all locations then okay, but don't try to factor this out into some parametric method because that extra amount of conditional code might prevent some JIT optimizations due to dept/code size increase."
p2702
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4508?src=pr) is 77.96% (diff: 100%)\n> Merging [#4508](https://codecov.io/gh/ReactiveX/RxJava/pull/4508?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4508   diff @@\n==========================================\n  Files           508        508          \n  Lines         34383      34383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n+ Hits          26799      26807     +8   \n+ Misses         5587       5579     -8   \n  Partials       1997       1997          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4ce25cb...fa18cff](https://codecov.io/gh/ReactiveX/RxJava/compare/4ce25cb968179460f9bc1ef75fd2e071921add01...fa18cff4e37e9ddd2232f0e2087fc04763c19b5f?src=pr)'
p2703
asg14
S'vanniktech:2.x_better_exception_message_SingleFromCallable'
p2704
sbsI4509
(iPull
Pull
p2705
(dp2706
g3
g53
sg5
S'2.x: Adjust some JavaDoc in Emitters'
p2707
sg7
(lp2708
S'Cleanup'
p2709
asg10
I4509
sg11
(lp2710
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4509?src=pr) is 77.99% (diff: 100%)\n\n\n> No coverage report found for **2.x** at eade864.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eade864...28df01b](https://codecov.io/gh/ReactiveX/RxJava/compare/eade864d3c167adb4a3384576d533c44f68da123...28df01b862bb124ab69de9a3614f6c7c87b63c47?src=pr)'
p2711
aS':+1:'
p2712
asg14
S'vanniktech:2.x_javadoc'
p2713
sbsI4513
(iPull
Pull
p2714
(dp2715
g3
S"Both `switchMap` implementations didn't properly cancel the current inner consumer (but instead cancelled the outer 'connection' only).\r\n\r\nReported in #4512."
p2716
sg5
S'2.x: fix switchMap bad cancellation'
p2717
sg7
(lp2718
S'Bug'
p2719
asg10
I4513
sg11
(lp2720
S':+1:'
p2721
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4513?src=pr) is 77.91% (diff: 100%)\n> Merging [#4513](https://codecov.io/gh/ReactiveX/RxJava/pull/4513?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4513   diff @@\n==========================================\n  Files           508        508          \n  Lines         34393      34395     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n+ Hits          26796      26800     +4   \n- Misses         5597       5600     +3   \n+ Partials       2000       1995     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [939f172...8b55f5d](https://codecov.io/gh/ReactiveX/RxJava/compare/939f172b5fd39fdc83e353fa0b4626a8a61e3ee4...8b55f5dd1b05ebc7a7ea5a63d8f539978bf8de04?src=pr)'
p2722
asg14
S'akarnokd:SwitchMapCancelFix'
p2723
sbsI4516
(iPull
Pull
p2724
(dp2725
g3
S"I've forgotten to create a branch so the first part of todays coverage work [landed in 2.x direct](https://github.com/ReactiveX/RxJava/commit/1145819b658983807e0cede5ba2c7d5ac1117baa)\r\n\r\n  - removed unused methods from various classes\r\n  - compacted `SpscArrayQueue`\r\n  - added null checks to `SpscLinkedArrayQueue.offer()` and `MpscLinkedQueue.offer()`\r\n  - fixed `ResourceObserver` not calling `onStart`\r\n  - Added direct NotificationLite-emission methods to `AppendOnlyLinkedArrayList`, updated `SerializedObserver` and `SerializedSubscriber` to use it directly instead of the former indirection\r\n  - `TestObserver.isDisposed` now reports true if terminal events were received (#4514)\r\n  - `ResourceSubscriber` to use `SubscriptionHelper`'s deferred Subscription/requesting management\r\n  - added unit tests to cover `DisposableXObserver`s\r\n  - `SerializedObserver` and `SerializedSubscriber` now have proper unit tests each\r\n\r\nThis current PR fixes `Single.using` not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements."
p2726
sg5
S'2.x: fix Single.using, add unit tests and coverage'
p2727
sg7
(lp2728
S'Bug'
p2729
aS'Cleanup'
p2730
aS'Coverage'
p2731
asg10
I4516
sg11
(lp2732
S':+1:'
p2733
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4516?src=pr) is 78.64% (diff: 96.92%)\n> Merging [#4516](https://codecov.io/gh/ReactiveX/RxJava/pull/4516?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.36%**\n\n```diff\n@@                2.x      #4516   diff @@\n==========================================\n  Files           507        507          \n  Lines         34371      34386    +15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5391       5395     +4   \n==========================================\n+ Hits          26904      27042   +138   \n+ Misses         5480       5374   -106   \n+ Partials       1987       1970    -17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1145819...0ee4580](https://codecov.io/gh/ReactiveX/RxJava/compare/1145819b658983807e0cede5ba2c7d5ac1117baa...0ee4580c6235aadd210693bae3cd024add6295df?src=pr)'
p2734
asg14
S'akarnokd:Coverage908_2'
p2735
sbsI4518
(iPull
Pull
p2736
(dp2737
g3
S'Fixes #4517'
p2738
sg5
S'2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc'
p2739
sg7
(lp2740
S'Enhancement'
p2741
asg10
I4518
sg11
(lp2742
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4518?src=pr) is 78.60% (diff: 100%)\n> Merging [#4518](https://codecov.io/gh/ReactiveX/RxJava/pull/4518?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4518   diff @@\n==========================================\n  Files           507        510     +3   \n  Lines         34386      34424    +38   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5395       5401     +6   \n==========================================\n+ Hits          27003      27059    +56   \n+ Misses         5411       5401    -10   \n+ Partials       1972       1964     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4f878d5...120d760](https://codecov.io/gh/ReactiveX/RxJava/compare/4f878d56988d572257309dad1a1d0c9fe601f3d8...120d760b71d46181a7ac36db11a934543f75f53e?src=pr)'
p2743
aS"It might be worth considering removing the protected `cancel()` methods as they are duplicates of `dispose`. For `ResourceSubscriber` I don't know because it works with `Subscription.cancel()` but also is a `Disposable` so `dispose()` is there as well."
p2744
aS'So should I remove the `cancel()` method on all `Resource*Observer`?'
p2745
aS'@JakeWharton your opinion on the removal?'
p2746
aS"I'm supportive of removing `cancel()`. I much prefer when there's only one way to do something!"
p2747
aS':+1:'
p2748
asg14
S'vanniktech:reactive_resource_observers'
p2749
sbsI4519
(iPull
Pull
p2750
(dp2751
g3
S'This PR adds some more `Maybe` operators:\r\n\r\n  - `ambWith`\r\n  - `cache`\r\n  - `concatWith`\r\n  - `contains`\r\n  - `count`\r\n  - `defaultIfEmpty`\r\n  - `delay`\r\n  - `switchIfEmpty`\r\n  - `zipWith`\r\n\r\nPlus a small cleanup and additional `TestHelper` test support (check double onSubscribe calls, dispose() state management).'
p2752
sg5
S'2.x: add more Maybe operators 9/09-1'
p2753
sg7
(lp2754
S'Enhancement'
p2755
asg10
I4519
sg11
(lp2756
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4519?src=pr) is 78.73% (diff: 98.21%)\n> Merging [#4519](https://codecov.io/gh/ReactiveX/RxJava/pull/4519?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.20%**\n\n```diff\n@@                2.x      #4519   diff @@\n==========================================\n  Files           507        512     +5   \n  Lines         34386      34609   +223   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5395       5425    +30   \n==========================================\n+ Hits          27003      27250   +247   \n+ Misses         5411       5392    -19   \n+ Partials       1972       1967     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4f878d5...8f8fce7](https://codecov.io/gh/ReactiveX/RxJava/compare/4f878d56988d572257309dad1a1d0c9fe601f3d8...8f8fce7de54c6e356b96b040799125e0771a78b3?src=pr)'
p2757
aS':+1:'
p2758
asg14
S'akarnokd:MaybeOps909_1'
p2759
sbsI4522
(iPull
Pull
p2760
(dp2761
g3
S'Fixes #4521 '
p2762
sg5
S'Observable/Flowable/Completable/Single.delay should always call onError on the provided Scheduler'
p2763
sg7
(lp2764
S'Enhancement'
p2765
asg10
I4522
sg11
(lp2766
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4522?src=pr) is 78.72% (diff: 100%)\n> Merging [#4522](https://codecov.io/gh/ReactiveX/RxJava/pull/4522?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                2.x      #4522   diff @@\n==========================================\n  Files           515        515          \n  Lines         34647      34643     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5431       5431          \n==========================================\n+ Hits          27255      27273    +18   \n+ Misses         5417       5402    -15   \n+ Partials       1975       1968     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [63c4451...4e874a3](https://codecov.io/gh/ReactiveX/RxJava/compare/63c4451dec13ce83665323694883f9b933f779b1...4e874a3ce6abd265488222dd9d035e25208243d7?src=pr)'
p2767
aS':+1:'
p2768
aS'Great job applying the changes to all of the base types!'
p2769
asg14
S'nsk-mironov:fix-delay'
p2770
sbsI4525
(iPull
Pull
p2771
(dp2772
g3
S'Fixes #4524\r\n\r\nTest for combineLatest fill follow'
p2773
sg5
S'2.x: Fix Generics T[] in Zip & CombineLatest'
p2774
sg7
(lp2775
S'Bug'
p2776
asg10
I4525
sg11
(lp2777
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4525?src=pr) is 78.71% (diff: 100%)\n> Merging [#4525](https://codecov.io/gh/ReactiveX/RxJava/pull/4525?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4525   diff @@\n==========================================\n  Files           515        515          \n  Lines         34643      34644     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5431       5431          \n==========================================\n+ Hits          27268      27269     +1   \n+ Misses         5409       5408     -1   \n- Partials       1966       1967     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [44c5705...4a972f2](https://codecov.io/gh/ReactiveX/RxJava/compare/44c5705b45af3733d8180cd47cdc16146ad9dda2...4a972f2ad4ec11397d6eee147b44bb3e6ab050bb?src=pr)'
p2778
aS'This should be it now'
p2779
aS'Single has exactly 1 and Maybe at most 1 item, so there is only 1 latest that can happen thus there is no difference between combineLatest and zip for these sources.'
p2780
aS':+1:'
p2781
aS"Yup I immediately noticed it after I wrote my comment :D that's also why I deleted it"
p2782
asg14
S'vanniktech:2.x_generics_object_fix'
p2783
sbsI2767
(iPull
Pull
p2784
(dp2785
g3
S'Redone #2603.\r\n\r\nRun on i7 920, 2.6GHz, Windows 7 x64, JDK 1.8u31\r\n```\r\nBenchmark      (size)       this   Score error       1.x   Score error\r\nobserveOn           1  160377,408     3091,205  140913,081     7097,415\r\nobserveOn          10  132990,049     1477,661  125288,149    14304,259\r\nobserveOn         100   43701,203     2342,570   43840,921      944,682\r\nobserveOn        1000   11603,952     2377,205   11400,340     1400,628\r\nobserveOn        2000    6769,716      220,476    6853,283       71,276\r\nobserveOn        3000    4753,876      326,497    4741,108      120,612\r\nobserveOn        4000    3616,782      212,285    3632,433      433,754\r\nobserveOn       10000    1544,141       28,796    1548,504       61,419\r\nobserveOn      100000     149,573       14,974     150,924        8,331\r\nobserveOn     1000000      14,909        2,079      13,658        7,702\r\nsubscribeOn         1  160639,801    16463,799  156911,862     2463,637\r\nsubscribeOn        10  148883,172     6885,684  151514,397     9425,348\r\nsubscribeOn       100  133756,358     3329,421  133327,933     3479,124\r\nsubscribeOn      1000   56411,785    22525,962   52902,999    19948,305\r\nsubscribeOn      2000   35471,110    12240,514   34272,374    16515,454\r\nsubscribeOn      3000   25868,564     2755,244   26291,293     2435,165\r\nsubscribeOn      4000   20453,512     2996,777   19598,400     4643,195\r\nsubscribeOn     10000    8817,797      465,195    5389,428      272,784\r\nsubscribeOn    100000     958,665       22,157     900,036      320,547\r\nsubscribeOn   1000000      91,606        2,462      91,396        3,407\r\n```\r\nNote that since the tests create a lot of garbage, some perf numbers have quite some error margin: some appear to be faster with this PR while others appear to be slower, even if they are not affected by the changes.'
p2786
sg5
S'Optimized scalar observeOn/subscribeOn'
p2787
sg7
(lp2788
S'Enhancement'
p2789
asg10
I2767
sg11
(lp2790
S'Am I reading it correctly that this should really only benefit this case? =>\r\n\r\n```\r\nBenchmark      (size)       this   Score error       1.x   Score error\r\nobserveOn           1  160377,408     3091,205  140913,081     7097,415\r\n```'
p2791
aS'Yes, it optimizes for the scalar observing of a value. I assume this is a common enough case to warrant an optimized code path.'
p2792
aS'This is exactly the case I need :).'
p2793
aS'Code looks good. All internal changes. Thanks @akarnokd '
p2794
asg14
S'akarnokd:ScalarScheduleOn'
p2795
sbsI2769
(iPull
Pull
p2796
(dp2797
g3
S'Use ```BackpressureUtils.getAndAddRequest(requested, n)``` instead of  ```requested.getAndAdd(n)``` so that an overflow check takes place. '
p2798
sg5
S'OperatorCombineLatest request overflow check'
p2799
sg7
(lp2800
sg10
I2769
sg11
(lp2801
S'Thanks!'
p2802
asg14
S'davidmoten:combineLatest-request-overflow'
p2803
sbsI2770
(iPull
Pull
p2804
(dp2805
g3
S'Use ```BackpressureUtils.getAndAddRequest(requested, n)``` instead of ```requested.getAndAdd(n)``` so that an overflow check takes place. Includes a unit test that failed on original code (but passes with this PR).'
p2806
sg5
S'OperatorOnBackpressureDrop request overflow check'
p2807
sg7
(lp2808
S'Bug'
p2809
asg10
I2770
sg11
(lp2810
S'Thanks!'
p2811
asg14
S'davidmoten:onBackpressureDrop-request-overflow'
p2812
sbsI2771
(iPull
Pull
p2813
(dp2814
g3
S'One more:\r\n\r\nUse ```BackpressureUtils.getAndAddRequest(requested, n)``` instead of ```requested.getAndAdd(n)``` so that an overflow check takes place. Includes a unit test that failed on original code (but passes with this PR).'
p2815
sg5
S'OnSubscribeRange request overflow check'
p2816
sg7
(lp2817
sg10
I2771
sg11
(lp2818
S'Excellent!'
p2819
asg14
S'davidmoten:range-request-overflow'
p2820
sbsI2772
(iPull
Pull
p2821
(dp2822
g3
S'ExecutorService. Replaces #2761.\r\n\r\nBy default, io() and newThread() schedules interruptible tasks, computation() schedules non-interruptible tasks.'
p2823
sg5
S'Helper methods to schedule tasks (non-)interruptibly on an'
p2824
sg7
(lp2825
S'Enhancement'
p2826
asg10
I2772
sg11
(lp2827
S"I think this looks good ... but I'm trying to decouple in my head the API changes versus functional related to interrupt, as those are complicated and nuanced.\r\n\r\nBefore we proceed with this I'd like to have a clear description somewhere about our logic and thinking around interruption. \r\n\r\nAdditionally, let's mark the API additions as Experimental.\r\n\r\n"
p2828
aS'Okay.'
p2829
aS"I'm closing this, let's revisit the problem later."
p2830
asg14
S'akarnokd:ScheduleActionHelper0225'
p2831
sbsI2773
(iPull
Pull
p2832
(dp2833
g3
S"Further optimizations to ```observeOn```.\r\n\r\n  - Using SpscArrayQueue directly in observeOn instead of ```RingBuffer``` to avoid the synchronization block\r\n  - Split tracking structure to serial (SubscriptionList) and timed (CompositeSubscription) in ```EventLoopsScheduler``` which improves the sequential scheduling performance because a completing task's subscription will be most likely the first item in the underlying LinkedList.\r\n\r\nBenchmark: (i7 920, Window 7 x64, Java 1.8u31, 5x1s warmup, 5x5s iteration)\r\n```\r\nBenchmark      (size)         1.x    1.x error      this PR   this error\r\nobserveOn           1  162326,012     2458,085   166536,559     3154,174\r\nobserveOn          10  132471,205     1857,434   142517,407     3734,424 ++\r\nobserveOn         100   43282,527     2145,910   112238,179     2270,103 ++\r\nobserveOn        1000   11779,482      173,370    25726,564      309,193 ++\r\nobserveOn        2000    6756,211       89,196    12123,276      276,470 ++\r\nobserveOn        3000    4736,893      253,796     9342,673      263,667 ++\r\nobserveOn        4000    3661,874       51,359     7346,015      123,049 ++\r\nobserveOn       10000    1519,282      108,503     1546,547       21,885\r\nobserveOn      100000     151,193        2,569      156,160        1,974\r\nobserveOn     1000000      15,373        1,310       15,660        0,153\r\nsubscribeOn         1  161290,037     2867,882   164952,259      797,408\r\nsubscribeOn        10  151842,821     2448,734   147906,491     4373,682\r\nsubscribeOn       100  136418,065     1773,558   136889,052     2362,203\r\nsubscribeOn      1000   58389,066     4559,030    59482,225     1372,692\r\nsubscribeOn      2000   34089,152     9318,205    36581,203     1264,100\r\nsubscribeOn      3000   26712,331     1265,442    26519,320     1319,293\r\nsubscribeOn      4000   20118,326     2018,439    20163,395      839,709\r\nsubscribeOn     10000    8914,213      677,164     9059,934      200,158\r\nsubscribeOn    100000     958,038       43,349      965,663       60,708\r\nsubscribeOn   1000000      91,849        2,148       92,706        1,202\r\n```\r\nNotes:\r\n  - At ```size = 1```, the throughput varies in a +/- 3000 range on each run, and since the changes don't touch the scalar optimization, there is no real improvement there.\r\n  - At ```size = 10.000``` my system reached either the cache capacity or the OS scheduler's time resolution so there no improvement there on.\r\n  - At ```size = 100.000``` and ```size = 1.000.000``` the throughput doubles if I introduce some extra delay (i.e., via sleep(1) or some extra work).\r\n  - The benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput ```subscribeOn(1.000.000)``` from 91 to 136. \r\n\r\nSince it conflicts with #2772 anyway, this is PR is to let others verify the optimizations actually work on other OSes, because on my Windows, I sometimes get significant variance in the throughput during iterations. Increased iteration time may be required as well."
p2834
sg5
S'ObserveOn performance improvements'
p2835
sg7
(lp2836
S'Enhancement'
p2837
asg10
I2773
sg11
(lp2838
S"Benchmark (i7 4770K, Windows 7 x64, Java 1.8u31) PR up to 366598a\r\n```\r\nBenchmark      (size)         1.x      1.x error      this PR    this error\r\nobserveOn           1    204372,986    45147,750    207462,343     3348,429\r\nobserveOn          10    170321,219    30519,528    180349,729     9635,029\r\nobserveOn         100     66150,820     3911,887    151773,980     8819,016\r\nobserveOn        1000     11387,782     3620,545     28427,477     8108,015\r\nobserveOn        2000      7180,268      899,369     15044,075     2107,491\r\nobserveOn        3000      4458,529     1949,745     10050,448     1945,057\r\nobserveOn        4000      3294,942     2865,810      4627,753      369,396\r\nobserveOn       10000      1509,448      646,732      3331,416      302,650\r\nobserveOn      100000       184,213       21,344       385,208        4,621\r\nobserveOn     1000000        18,447        1,594        21,572        0,221\r\nsubscribeOn         1    198566,731    26191,145    204882,731     7505,171\r\nsubscribeOn        10    194194,868     7907,757    193459,202     8645,835\r\nsubscribeOn       100    160472,849    75535,431    147738,528    61057,919\r\nsubscribeOn      1000     69123,783    51116,790     88955,619    25329,057\r\nsubscribeOn      2000     41765,423    58779,642     54281,820    25307,480\r\nsubscribeOn      3000     42094,519    14935,575     46571,429     3136,216\r\nsubscribeOn      4000     28593,237    31337,648     35484,209     5793,749\r\nsubscribeOn     10000     11492,688     7818,150     13295,895     5687,375\r\nsubscribeOn    100000       911,157      311,834       973,503       33,258\r\nsubscribeOn   1000000       169,743       37,696       176,479       22,568\r\n```\r\n\r\nStrangely, adding an innocent isUnsubscribed check breaks 4 tests, don't know why yet.\r\n"
p2839
aS'Switching to j.u.c.Lock in SubscriptionList benefits the observeOn because its spinning behavior (less likely to park/unpark a thread which may take 3ms on Windows). But unfortunately, it introduces higher variance on small subscribeOn runs.\r\n```\r\nBenchmark      (size)         1.x      1.x error      this PR    this error\r\nobserveOn           1    204372,986    45147,750    202173,732    12320,313\r\nobserveOn          10    170321,219    30519,528    182154,095    11144,205\r\nobserveOn         100     66150,820     3911,887    153120,079    10437,195\r\nobserveOn        1000     11387,782     3620,545     29951,053     3853,397\r\nobserveOn        2000      7180,268      899,369     13866,119     4136,655\r\nobserveOn        3000      4458,529     1949,745      9109,964     2767,763\r\nobserveOn        4000      3294,942     2865,810      7439,672      781,102\r\nobserveOn       10000      1509,448      646,732      1893,761      165,063\r\nobserveOn      100000       184,213       21,344       221,382        7,028\r\nobserveOn     1000000        18,447        1,594        43,000        0,351\r\nsubscribeOn         1    198566,731    26191,145    204402,609     4919,448\r\nsubscribeOn        10    194194,868     7907,757    183619,836    28797,890\r\nsubscribeOn       100    160472,849    75535,431    147244,447   101925,905\r\nsubscribeOn      1000     69123,783    51116,790     84392,086    55782,068\r\nsubscribeOn      2000     41765,423    58779,642     60341,991    17596,950\r\nsubscribeOn      3000     42094,519    14935,575     42439,368    11841,639\r\nsubscribeOn      4000     28593,237    31337,648     35660,124     5625,456\r\nsubscribeOn     10000     11492,688     7818,150     13021,675     1460,180\r\nsubscribeOn    100000       911,157      311,834      1664,599      332,131\r\nsubscribeOn   1000000       169,743       37,696       180,759       21,844\r\n```'
p2840
aS"These are the results if the range is replaced by a [value repeater](https://gist.github.com/akarnokd/fdac1948f34c0a0b991d):\r\n```\r\nBenchmark      (size)         1.x      1.x error    1.x no box       error    this no box     error\r\nobserveOn           1    204372,986    45147,750    188819,849    15431,568    181595,983    14377,740\r\nobserveOn          10    170321,219    30519,528    177593,605    12877,222    175087,705    18256,765\r\nobserveOn         100     66150,820     3911,887     68652,045     1711,296    144814,588    20151,322\r\nobserveOn        1000     11387,782     3620,545     14779,159      989,993     19994,914     2982,607\r\nobserveOn        2000      7180,268      899,369      8075,593      929,669      9877,035      560,081\r\nobserveOn        3000      4458,529     1949,745      5235,137      463,936      6393,597      605,021\r\nobserveOn        4000      3294,942     2865,810      4017,062      247,366      5045,878      133,408\r\nobserveOn       10000      1509,448      646,732      1644,436      301,704      3714,585      270,400\r\nobserveOn      100000       184,213       21,344       185,625        7,409       235,961       18,194\r\nobserveOn     1000000        18,447        1,594        20,052        1,631        24,297        0,232\r\nsubscribeOn         1    198566,731    26191,145    190542,030    87491,106    194069,237    13380,697\r\nsubscribeOn        10    194194,868     7907,757    192794,548    30258,019    183716,766    22495,251\r\nsubscribeOn       100    160472,849    75535,431    148739,487    47300,117    154242,613    63197,068\r\nsubscribeOn      1000     69123,783    51116,790     98292,952    34497,158     90132,783    54405,704\r\nsubscribeOn      2000     41765,423    58779,642     72655,350     9218,318     72559,922    14591,547\r\nsubscribeOn      3000     42094,519    14935,575     55371,153    11954,736     53789,237    12727,973\r\nsubscribeOn      4000     28593,237    31337,648     46864,543     3127,864     45835,097     4896,779\r\nsubscribeOn     10000     11492,688     7818,150     19685,490     9422,445     18831,519     7730,286\r\nsubscribeOn    100000       911,157      311,834      2225,610      154,474      2201,344      318,462\r\nsubscribeOn   1000000       169,743       37,696       257,446        7,753       257,803       11,236\r\n```\r\n\r\nNote that size = 1 doesn't run the optimized scalar scheduling code."
p2841
aS"Do you mind rebasing this so we don't have the development path in the log?"
p2842
aS'I see significant performance testing on my machine:\r\n\r\n```\r\n1.x\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   113223.051     9007.330    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    13108.671      740.532    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       15.414        0.988    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5 10813751.080   943281.316    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   227083.165     9356.767    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      193.273       21.516    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    16307.144     1100.723    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     8365.615      235.292    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       16.573        0.892    ops/s\r\n\r\n\r\nThis PR\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5   113905.358    32165.659    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    28618.423      507.627    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       32.166        2.736    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5  8402487.179   456209.469    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   217228.990     9486.298    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      198.274       13.425    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5    16996.020     2524.557    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5    11612.989      487.775    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       34.498        1.914    ops/s\r\n```'
p2843
aS'Sure.'
p2844
aS'@akarnokd great work on all those enhancements!'
p2845
asg14
S'akarnokd:Perf0225'
p2846
sbsI2776
(iPull
Pull
p2847
(dp2848
g3
g53
sg5
S'issue-2764: add new operator onBackpressureDrop(Action1 onDrop)'
p2849
sg7
(lp2850
S'Enhancement'
p2851
asg10
I2776
sg11
(lp2852
S'added super to generic type T'
p2853
aS'I will manually add Experimental to it after merging.'
p2854
aS'Thanks @stevenzwu '
p2855
aS'thanks. looks like I missed a lot of details :)'
p2856
asg14
S'stevenzwu:issues-2764'
p2857
sbsI2777
(iPull
Pull
p2858
(dp2859
g3
g53
sg5
S'fix several typos'
p2860
sg7
(lp2861
sg10
I2777
sg11
(lp2862
S'Can you please rebase these 3 commits into 1?'
p2863
aS'first time does rebase/squash. seems to get it correct with one commit now'
p2864
aS'Thanks.'
p2865
asg14
S'stevenzwu:typo'
p2866
sbsI2779
(iPull
Pull
p2867
(dp2868
g3
S'See discussion in  #2774 \r\n\r\nChanges include \r\n\r\n* fix for #2774 just for ```OperatorMulticast``` (will do ```OperatorPublish``` in another PR once have sorted this one out)\r\n* made fields private that had default visibility\r\n* renamed ```OnSubscribeMulticastTest``` to ```OperatorMulticastTest```\r\n* addressed a possible race condition that could provoke an IAE when ```Observable.subscribe(sub)``` is called with sub=null (unsubscription occurs between L144 and L145 on old code).'
p2869
sg5
S'OperatorMulticast.connect(connection) should not return null'
p2870
sg7
(lp2871
S'Bug'
p2872
asg10
I2779
sg11
(lp2873
S"Thanks @akarnokd, sharp-eyed as ever. I used a final  AtomicReference to help with the == this check, is this the idiom you'd use in this situation?"
p2874
aS'Thanks!'
p2875
asg14
S'davidmoten:connect-returns-null'
p2876
sbsI2788
(iPull
Pull
p2877
(dp2878
g3
S'Fixed #2775 and #2596'
p2879
sg5
S"Fix the bug that 'publish' will cache items when no subscriber"
p2880
sg7
(lp2881
S'Bug'
p2882
asg10
I2788
sg11
(lp2883
S'Thanks @zsxwing It looks like a good change to me. Thread-safety seems fine as it is all within the WIP checks. '
p2884
asg14
S'zsxwing:publish-no-subscriber'
p2885
sbsI2804
(iPull
Pull
p2886
(dp2887
g3
S"Squashed commits of #2773.\r\n\r\n---------------\r\n\r\nFurther optimizations to ```observeOn```.\r\n\r\n  - Using SpscArrayQueue directly in observeOn instead of ```RingBuffer``` to avoid the synchronization block\r\n  - Split tracking structure to serial (SubscriptionList) and timed (CompositeSubscription) in ```EventLoopsScheduler``` which improves the sequential scheduling performance because a completing task's subscription will be most likely the first item in the underlying LinkedList.\r\n\r\nBenchmark: (i7 920, Window 7 x64, Java 1.8u31, 5x1s warmup, 5x5s iteration)\r\n```\r\nBenchmark      (size)         1.x    1.x error      this PR   this error\r\nobserveOn           1  162326,012     2458,085   166536,559     3154,174\r\nobserveOn          10  132471,205     1857,434   142517,407     3734,424 ++\r\nobserveOn         100   43282,527     2145,910   112238,179     2270,103 ++\r\nobserveOn        1000   11779,482      173,370    25726,564      309,193 ++\r\nobserveOn        2000    6756,211       89,196    12123,276      276,470 ++\r\nobserveOn        3000    4736,893      253,796     9342,673      263,667 ++\r\nobserveOn        4000    3661,874       51,359     7346,015      123,049 ++\r\nobserveOn       10000    1519,282      108,503     1546,547       21,885\r\nobserveOn      100000     151,193        2,569      156,160        1,974\r\nobserveOn     1000000      15,373        1,310       15,660        0,153\r\nsubscribeOn         1  161290,037     2867,882   164952,259      797,408\r\nsubscribeOn        10  151842,821     2448,734   147906,491     4373,682\r\nsubscribeOn       100  136418,065     1773,558   136889,052     2362,203\r\nsubscribeOn      1000   58389,066     4559,030    59482,225     1372,692\r\nsubscribeOn      2000   34089,152     9318,205    36581,203     1264,100\r\nsubscribeOn      3000   26712,331     1265,442    26519,320     1319,293\r\nsubscribeOn      4000   20118,326     2018,439    20163,395      839,709\r\nsubscribeOn     10000    8914,213      677,164     9059,934      200,158\r\nsubscribeOn    100000     958,038       43,349      965,663       60,708\r\nsubscribeOn   1000000      91,849        2,148       92,706        1,202\r\n```\r\nNotes:\r\n  - At ```size = 1```, the throughput varies in a +/- 3000 range on each run, and since the changes don't touch the scalar optimization, there is no real improvement there.\r\n  - At ```size = 10.000``` my system reached either the cache capacity or the OS scheduler's time resolution so there no improvement there on.\r\n  - At ```size = 100.000``` and ```size = 1.000.000``` the throughput doubles if I introduce some extra delay (i.e., via sleep(1) or some extra work).\r\n  - The benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput ```subscribeOn(1.000.000)``` from 91 to 136. \r\n\r\nSince it conflicts with #2772 anyway, this is PR is to let others verify the optimizations actually work on other OSes, because on my Windows, I sometimes get significant variance in the throughput during iterations. Increased iteration time may be required as well."
p2888
sg5
S'ObserveOn throughput enhancements'
p2889
sg7
(lp2890
S'Enhancement'
p2891
asg10
I2804
sg11
(lp2892
sg14
S'akarnokd:Perf0225'
p2893
sbsI2806
(iPull
Pull
p2894
(dp2895
g3
S'Added backpressure support to ```buffer(time)``` and ```buffer(time, size)``` non-overlapping variants as requested in #2797.\r\n\r\nA request of ```n | n < Long.MAX_VALUE``` is converted to a request of ```n * size``` for the upstream. Every time the buffer\'s size reaches the specified amount, the timer is "paused". The remaining time for it to fire is calculated and stored so the next time the timer is started again with this remaining time, either by a downstream request 0 -> !0 transition or by the ```onNext``` itself because downstream request is not null.\r\n\r\nNote that this start-stop behavior is of millisecond accuracy regardless of the original time unit specified because our scheduler\'s now() return the time in millisecond resolution.\r\n\r\nI\'ve also added some new assert methods and constructors to ```TestSubscriber``` to make state checks more convenient and support a common zero request at subscription directly (so no need to extend the class just for this anymore).\r\n\r\n\r\n'
p2896
sg5
S'Operator buffer(time) and buffer(time, size) now support backpressure.'
p2897
sg7
(lp2898
S'Enhancement'
p2899
asg10
I2806
sg11
(lp2900
S"I don't think we should be changing the behavior of 'buffer(time)', since time is specifically using a temporal approach to flow control. \r\n\r\nThe 'buffer(size)' variant can definitely have backpressure though as per #2797 \r\n\r\nI'm not sure how 'buffer(time, count)' should work. One way of looking at that is that it is a temporal operator wih max size. Another is it is a size operator with timeout. If it is temporal then it shouldn't have backpressure. If it is size with timeout then backpressure makes sense. "
p2901
aS'Because how this "stops" the timer and resumes it, the changes introduce some additional timing-related jitter. I\'d say buffers and windows with time won\'t support backpressure at all.'
p2902
aS"Then this PR should not be pursued, correct?\r\n\r\nWe do need an answer though for the 'buffer(count, timeout)' use case. That one is common in scenarios where it wants backpressure and time is just a timeout. \r\n\r\nIt's almost like there are:\r\n\r\n- buffer(count, timeout)\r\n- buffer(time, maxSize)\r\n\r\nThey are basically the same without backpressure, but including backpressure makes them have different behaviors when backpressure occurs. "
p2903
aS"Currently in the buffer(time, size), time is a periodic indicator to emit what's in the buffer and start a new one. What you suggest is that restart the timer whenever the buffer is full or timeout happened. I did this at first, but then one or two tests failed because they expect the periodicity mentioned above."
p2904
aS'Can you separate out the `TestSubscriber` changes?'
p2905
aS'Sure.'
p2906
asg14
S'akarnokd:OperatorBufferSizeTimeBackpressure'
p2907
sbsI2807
(iPull
Pull
p2908
(dp2909
g3
S"Just little Java syntax fix for interfaces\r\n\r\nI checked all interfaces in RxJava.\r\n\r\n@benjchristensen I can add and configure `Checkstyle` gradle plugin for RxJava if you don't mind, mm? "
p2910
sg5
S'Corrected all Java interfaces declarations'
p2911
sg7
(lp2912
S'Enhancement'
p2913
asg10
I2807
sg11
(lp2914
S"I like the changes. However, we don't have a style guideline because we don't want to enforce one particular coding style on contributors: the functionality is first, the style is secondary."
p2915
aS"@akarnokd great\r\n\r\nAbout code style: project is actively developing and code style can be problem in future, I think it will be good to have small amount of `Checkstyle` rules integrated with build process\r\n\r\nYou can ping me if you'll decide to do it with my help\r\n\r\n"
p2916
aS"I agree on the necessity of `Checkstyle`, but may be it's already not the right time to remove `public` from interface methods. See: https://bugs.openjdk.java.net/browse/JDK-8071453. It's pretty distant future, but why do additional work that sums up to zero in this future."
p2917
aS"@colriot as I see, they won't break source compatibility and `empty` modifier in interface will be `public abstract` as before, if you would like to add implementation to interface, you'll have to write `default` modifier or `private`, also there is 100% no need in declaring `static interface` it's like writing `extends Object` in each class :smile: \r\n\r\n"
p2918
aS'@artem-zinnatullin yeah, completely agree on `static`, I was talking about `public` only. Speaking of compatibility, what you\'ve said is true, but I personally prefer either to hide all the implicits if they are unambigous and ubiquitous, or to write them explicitly if there are other "theoretical" options, like `private`. Obviously, all that has sense if the library is targeting Java 8 or 9. '
p2919
aS"> I can add and configure Checkstyle gradle plugin\r\n\r\nI have a general aversion to `Checkstyle` as it is generally just unnecessary purely subjective opinions imposed upon people and causing otherwise fine code to fail a build. \r\n\r\nIn the 2+ years of this project taking pull requests style has rarely been a topic of discussion or issue. \r\n\r\nWhat legit problems that affect behavior or safety will Checkstyle solve? \r\n\r\nAs for the changes in these pull request, a brief review seems like they are okay but I'll spend more time when I have it to review in depth. "
p2920
aS'+1 for Ben.'
p2921
aS'`What legit problems that affect behavior or safety will Checkstyle solve?` None of them, just code style.\r\n\r\nI got your point, okay.\r\n\r\nP.S. Not a fan of Airbnb, just want to quote their ["nerds" post](http://nerds.airbnb.com/maintaining-quality-scale/):\r\n\r\n![screen shot 2015-03-07 at 16 48 46](https://cloud.githubusercontent.com/assets/967132/6541550/f6e1e7d2-c4e9-11e4-847b-4db8c6e63327.png)\r\n\r\nBut I can\'t say, that it applicable to RxJava, code style is good in most of files :+1: '
p2922
asg14
S'artem-zinnatullin:correct-interfaces'
p2923
sbsI2809
(iPull
Pull
p2924
(dp2925
g3
S'of a terminal condition.\r\n\r\nThis issue came up in [a group discussion](https://groups.google.com/forum/#!topic/rxjava/sF2hy5sV5ck) (but is unrelated to the actual problem there). The problem was that takeUntil was unsafeSubscribed to, there was no one to terminate either the main or the other observable on a terminal condition, leaving the connection to upstream active indefinitely.'
p2926
sg5
S'Fixed takeUntil not unsubscribing from either of the observables in case'
p2927
sg7
(lp2928
S'Bug'
p2929
asg10
I2809
sg11
(lp2930
S'Thanks for figuring this out and fixing. '
p2931
asg14
S'akarnokd:TakeUntilTerminationFix'
p2932
sbsI2813
(iPull
Pull
p2933
(dp2934
g3
S"Proposed replacement for ```AbstractProducer``` which gives access to the requested amount allowing batch or fast-path value emission.\r\n\r\nI've skipped the detailed javadoc until the feedback about using this instead of ```AbstractOnSubscribe```."
p2935
sg5
S'Proposed AbstractProducer to replace AbstractOnSubscribe'
p2936
sg7
(lp2937
S'Enhancement'
p2938
asg10
I2813
sg11
(lp2939
S"I really like the AbstractOnSubscribe helper for making backpressure-aware Observables, but I've avoided writing a RxScala wrapper for it since it still seems to be in a bit of a flux.\r\n\r\nWill this refactoring, or something like it, be merged soon or am I better off writing a RxScala wrapper for the existing AbstractOnSubscribe in the short term?"
p2940
aS'This is not a refactoring but a potential replacement to it to allow exploiting a case of batched requesting and infinite requests and reduce the infrastructure overhead of ```AbstractOnSubscribe```. I personally like ```AbstractOnSubscribe``` better because you only need to think about producing a one element at a time.'
p2941
aS"FWIW, I went ahead and made a RxScala wrapper for this. Didn't run into any issues other than the inevitable generics compiler errors (managed to crash scalac without much issue), which are now handled. Looking forward to this getting merged so I can use it my Scala code."
p2942
aS'Related to https://github.com/ReactiveX/RxJava/issues/3003\r\n\r\nTrying to figure out async batching ...'
p2943
aS'Waiting on proposal from @stealthcode (in https://github.com/ReactiveX/RxJava/issues/3003) to compare options.'
p2944
aS'PR #3118 has much lower overhead and apart from slight API concerns it is a better replacement for `AbstractOnSubscribe` than this.'
p2945
asg14
S'akarnokd:AbstractProducer'
p2946
sbsI2814
(iPull
Pull
p2947
(dp2948
g3
S'Complete rewrite of ```publish()``` and fixed bugs of #2810 and #2803.'
p2949
sg5
S'Operator Publish full rewrite'
p2950
sg7
(lp2951
S'Enhancement'
p2952
asg10
I2814
sg11
(lp2953
S"Wow. Will have to come back to this one :-) that's a pretty epic fix of my bad code!"
p2954
aS'@davidmoten have you by chance tried this and been able to confirm it fixes your issues?'
p2955
aS'Ah, it was easy; you only need to dualize merge :).'
p2956
aS"@benjchristensen the original issue is covered by the rewrite, thanks @akarnokd . I've given the code a once over but not thorough, would take me a while and have little time at the moment. "
p2957
aS"@akarnokd I have had another brief foray into the code and I have every faith in your ability to create correct code but I'm not having a great time following it in the short slots of time I have between kid juggling. For longevity's sake I'm wondering if this beautiful looking bit of code could be bulked up with comments to lead me through and to lead future maintainers through. Of course if @benjchristensen or @zsxwing or another of the usual suspects think it's clear as day then further comments may be unnecessary. "
p2958
aS'Sure.'
p2959
aS"I've rebased, squashed and added comments to this PR."
p2960
aS'In `OperatorPublishTest.testPublish` (old code, you made no changes), would be nice to have an assert between the calls to `subscribe` and the call to `connect` just to ensure that subscription has occured but nothing is emitted before the call to `connect`. This may be covered by other tests but not explicitly so I think could be worthwhile addition. '
p2961
aS'Thanks! Updated tests accordingly and fixed a case with clients starting with 0 requests.'
p2962
aS'Perhaps add a `connect` idempotency test?'
p2963
aS'Done.'
p2964
aS'By the way thanks for the comments in the code, they are just what I need!'
p2965
aS"I'm preparing a JMH benchmark and it seems the current master fails with MissingBackpressureException on simple chains such as:\r\n```java\r\n@Test\r\npublic void testObserveOn() {\r\n    ConnectableObservable<Integer> co = Observable.range(0, 1000).publish();\r\n    Observable<Integer> obs = co.observeOn(Schedulers.computation());\r\n    for (int i = 0; i < 100; i++) {\r\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\r\n        obs.subscribe(ts);\r\n        Subscription s = co.connect();\r\n        ts.awaitTerminalEvent(2, TimeUnit.SECONDS);\r\n        ts.assertTerminalEvent();\r\n        ts.assertNoErrors();\r\n        assertEquals(1000, ts.getOnNextEvents().size());\r\n        s.unsubscribe();\r\n    }\r\n}\r\n```\r\nI'll post and merge the PR for the perf test so it can be run independent of this PR."
p2966
aS"I'll post its benchmark result but it takes a looong time. So far, I'm impressed (sync, 1 batch, 1 child, 1M elements):\r\nmaster: 3.822 ops/s\r\nthis: 18.810 ops/s"
p2967
aS"[Here is](https://gist.github.com/akarnokd/8e4591bd4441cedb600e) the benchmark result for this PR in [JMH Comparison GUI](https://github.com/akarnokd/jmh-compare-gui) format. This PR outperforms the current master by 1.5 - 4x most of the time. However, some async parameter combination timed out despite the high CPU usage; I'll look into those cases.\r\n\r\nEdit:\r\nThe performance degradation appears to be due to the ```ReentrantLock``` unparking its successor in ```SubscriptionList```, similar to #2857."
p2968
aS"Excellent code. Excellent comments. Very well done @akarnokd. This is a very hard piece of code. I can only imagine how much time you spent on this.\r\n\r\nAs best as I can tell it's all correct. It's complicated enough I may be missing something, but everything seems correct and matches what I wish I had coded this to be originally!"
p2969
asg14
S'akarnokd:OperatorPublishRewrite'
p2970
sbsI2816
(iPull
Pull
p2971
(dp2972
g3
S'Added overload to ```mergeDelayError``` to take a ```maxConcurrent``` parameter as well.\r\n\r\n```OperatorMapNotification``` had to be fixed because it disregarded backpressure on its ```onError``` and ```onCompleted``` paths: these produce value that may lack of an associated request and have to be buffered. The downside is the extra overhead due to serialization via ```drain()``` instead of write-through, but it is required for correctness.'
p2973
sg5
S'Merged merge, mergeDelayError and mergeMaxConcurrent into a single merge'
p2974
sg7
(lp2975
S'Enhancement'
p2976
asg10
I2816
sg11
(lp2977
S'Thanks for tackling this ...\r\n\r\nThis will take a while to test. It took several days over a couple weeks to get the current implementation to work in our production environments. \r\n\r\nWe will need to analyze how this impacts GC behavior and other such things.'
p2978
aS'cc @abersnaze @mattrjacobs to look at'
p2979
aS'Closing because it conflicts with #2878 and has the same bugs the newer PR fixes.'
p2980
asg14
S'akarnokd:OperatorMergeMerge'
p2981
sbsI2817
(iPull
Pull
p2982
(dp2983
g3
S'It is possible the synchronized block inside RxRingBuffer blocks out the firehose thread long enough that there will be enough requests cumulating up and no values have to be dropped. The change increases the taken value count and should decrease the likelihood of such no-drop situation.'
p2984
sg5
S'Fix for non-deterministic: testOnBackpressureDropWithAction'
p2985
sg7
(lp2986
S'Test-Failures'
p2987
asg10
I2817
sg11
(lp2988
sg14
S'akarnokd:OnBackpressureDropWithActionFix'
p2989
sbsI2818
(iPull
Pull
p2990
(dp2991
g3
g53
sg5
S'Small fix for the getValue javadoc in AsyncSubject and BehaviorSubject'
p2992
sg7
(lp2993
sg10
I2818
sg11
(lp2994
sg14
S'akarnokd:SubjectJavadocFix'
p2995
sbsI2820
(iPull
Pull
p2996
(dp2997
g3
S"Changes to the ```window(size)``` operator to respect the backpressure on its *outer* Observable: asking for 1 window will request ```size``` values from upstream. \r\n\r\nBackpressure is ignored on the inner Observable for now, partially because the ```BufferUntilSubscriber``` doesn't support it, partially because coordinating the inner requests with the outer requests needs more thoughts. The problem is that the outer has to request at least 1 element from upstream in order to open the window, but the inner subscriber may not want that single element just yet or would request more than the remaining window size and it would trigger new windows whose value it can't receive but would overflow the next window's observers.\r\n\r\n```window(size, skip)``` is not changed as I need to think about it more."
p2998
sg5
S'Backpressure for window(size)'
p2999
sg7
(lp3000
S'Enhancement'
p3001
asg10
I2820
sg11
(lp3002
S'Could you change the javadoc for this operator  in Observable.java as well: http://reactivex.io/RxJava/javadoc/rx/Observable.html#window(int)\r\n\r\nIt currently reads:\r\n\r\nBackpressure Support:\r\nThis operator does not support backpressure as it uses count to control data flow.'
p3003
aS'Sure.'
p3004
aS"Isn't supporting backpressure on the inner effectively the same as 'onBackpressureBuffer'?"
p3005
aS'Yes. BufferUntilSubscriber would need to be smartened to do proper backpressure.'
p3006
aS"What has happened recently causing tests to fail? I don't see any recent commits at should do it. Ideas?"
p3007
aS"I have no idea. I thought it was my commit for testOnBackpressureDropWithAction but reverting that didn't fix the master. My best guess is that something changed in the Travis-CI environment; perhaps we don't get 3GB memory anymore (on Windows, the tests take up to 1GB of memory)."
p3008
aS'So to confirm, merging this would be adding back pressure on the outer but still need us to come back later and fix the inner?'
p3009
aS'Yes.'
p3010
asg14
S'akarnokd:WindowWithSizeBackpressure'
p3011
sbsI2821
(iPull
Pull
p3012
(dp3013
g3
S'Added an match operator that constructs chain of predicates mapped to a function. The predicate will be applied to what an Observable emits, and if the predicate returns true the function mapped to the predicate will be applied.\r\n\r\nThe match operator creates a MatchBuilder which can either chain subsequent matches or return the Observable back when the defaultMatch method is called. This ensures there is a default match provided.\r\n'
p3014
sg5
S'match operator'
p3015
sg7
(lp3016
sg10
I2821
sg11
(lp3017
S"Based on the conversation in #2811, I don't think this is worth adding to the core library."
p3018
aS'There were a couple of assertions being made. The first that pattern is complicated. I took about 4 - 5 hours and wrote this. There are operators in RX today that are far more sophisticated.\r\n\r\nThe other assertion was pattern matching has nothing to do with functional programming/useless. I find that point confusing as scala, haskell, ML*, Lisp, Erlang, F#, etc all have pattern matching. The most intuitive and easiest choice would be a construct that matches other functional languages, not having developer to know to use a flatMap and if and elses. \r\n\r\nI think this more intuitive:\r\n```\r\nObservable<Void>\r\n        .create(kafkaConsumer())\r\n        .match(i -> i instanceof Foo.class, processor::foo)\r\n        .match(i -> i instanceof Bar.class, processor::bar)\r\n        .match(i -> i instanceof Baz.class, processor::baz)\r\n        .defaultCase(processor::handleUnknowMessage)\r\n        .map(i -> i.ack())\r\n```\r\n\r\nThen this:\r\n```\r\nObservable<Void>\r\n        .create(kafkaConsumer())\r\n        .flatMap(i -> {\r\n            if (i instanceof Foo.class) {\r\n                return processor.foo(i);\r\n            } else if (i instanceof Bar.class) {\r\n                return processor.bar(i);\r\n            } else if (i instance if Baz.class) {\r\n                return processor.baz(i);\r\n            } else {\r\n                return processor.handleUknowMessage(i);\r\n            }\r\n        })\r\n        .map(i->i.ack());\r\n```\r\n\r\n\r\n'
p3019
aS'IMHO it makes no sense to duplicate functionality that is already available directly in the language. That adds unnecessary weight.\r\n\r\nAlso, it is a far stretch to call this pattern matching. Pattern matching binds variables. This is just different syntax for conditionals.'
p3020
asg14
S'robertroeser:switchcase_noloop'
p3021
sbsI2823
(iPull
Pull
p3022
(dp3023
g3
g53
sg5
S'Enable maven central sync via bintray'
p3024
sg7
(lp3025
sg10
I2823
sg11
(lp3026
S'Thank you!'
p3027
aS'@rspieldenner I got this error, is it an issue with config or just a transient issue?\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/57801257#L3427\r\n\r\n\r\nLast Sync Errors: Could not sync artifact rxjava-1.0.9-benchmarks.jar. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-benchmarks.jar.sha1. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-sources.jar. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-sources.jar.sha1. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.pom.asc. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-javadoc.jar. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-javadoc.jar.sha1. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.jar.asc. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-javadoc.jar.asc. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.jar. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.jar.sha1. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-sources.jar.asc. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.pom. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.pom.sha1. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-benchmarks.jar.asc. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-benchmarks.jar.md5. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-sources.jar.md5. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9-javadoc.jar.md5. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.jar.md5. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html> Could not sync artifact rxjava-1.0.9.pom.md5. Server response: <html> <head> <title>403 - Forbidden</title> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/> <link rel="icon" type="image/png" href="https://oss.sonatype.org/favicon.png"> <!--[if IE]> <link rel="SHORTCUT ICON" href="https://oss.sonatype.org/favicon.ico"/> <![endif]--> <link rel="stylesheet" href="https://oss.sonatype.org/static/css/Sonatype-content.css?2.11.2-06" type="text/css" media="screen" title="no title" charset="utf-8"> </head> <body> <h1>403 - Forbidden</h1> <p>User \'jryan_netflix\' missing \'stage\' permission for staging profile: 6e7dce69b90173</p> </body> </html>\r\n'
p3028
aS"I was able to manually sync from Bintray, but I want to know if it is something about the Gradle sync that we don't have configured right."
p3029
aS'Is this the first release since I added the sonatypeUsername?'
p3030
aS"And I have a theory, I probably used another set of sonatype Credentials that don't have permission to push to io.reactivex. Do you know if RxGroovy or RxScala have been able to publish with what I setup?"
p3031
asg14
S'rspieldenner:maven_sync'
p3032
sbsI2825
(iPull
Pull
p3033
(dp3034
g3
S'Removed wrong link inside of JavaDoc for Observable.repeat() method'
p3035
sg5
S'Fixed javadoc for Observable.repeat() method'
p3036
sg7
(lp3037
S'Documentation'
p3038
asg10
I2825
sg11
(lp3039
S"Travis failed on this trivial change without giving any hint on why. Re-running it doesn't seem to help."
p3040
aS"We've fixed the main build, but this still fails and I don't get why. Could you rebase this to the current master?"
p3041
aS'@akarnokd done'
p3042
aS'Thanks!'
p3043
asg14
S'fatroom:repeat_javadoc'
p3044
sbsI2827
(iPull
Pull
p3045
(dp3046
g3
S"For #2826\r\nThe `ScalarSynchronousObservable` and `OperatorRetryWithPredicate` both assume that everyone else obey the rules so they don't have to.  Bad things happen when they are used together."
p3047
sg5
S"The retry with predicate wasn't behaving correctly when it used unsafeSubscribe"
p3048
sg7
(lp3049
S'Bug'
p3050
asg10
I2827
sg11
(lp3051
S"To clarify the underlying issue, the problem is that map captures the error and pushes it downstream, which schedules a resubscription. However, just doesn't know about this case, and happily sends out onCompleted which then reaches the subscriber after the retry operator."
p3052
aS"We've fixed the main build, but this still fails and I don't get why. Could you rebase this to the current master?"
p3053
aS"I found [this](http://stackoverflow.com/questions/29324886/retrywhen-operator-never-retries) question on StackOverflow which reflects on a similar problem; the fix I suggested instead of this should solve both problems.\r\n\r\n> Instead of this, I'd add a done flag to the inner Subscriber to ignore any subsequent events; should be more lightweight."
p3054
aS"I'm closing this, see #2852 for an extended fix."
p3055
asg14
S'abersnaze:retry-safe-subscriber'
p3056
sbsI2830
(iPull
Pull
p3057
(dp3058
g3
S'Not for merge. Diagnosing build failures.'
p3059
sg5
S'Disable MySQL and PostgreSQL on travis'
p3060
sg7
(lp3061
sg10
I2830
sg11
(lp3062
S"Closing. It appears travis won't start the build unless ```sudo: false``` is set."
p3063
aS'Yes we need sudo:false to use their new infrastructure.'
p3064
asg14
S'akarnokd:BuildFix0317'
p3065
sbsI2831
(iPull
Pull
p3066
(dp3067
g3
S'Not for merge. Diagnosing travis build failure.'
p3068
sg5
S'testOnBackpressureDropWithAction restored original test count'
p3069
sg7
(lp3070
sg10
I2831
sg11
(lp3071
sg14
S'akarnokd:OnBackpressureDropWithActionReduced'
p3072
sbsI2834
(iPull
Pull
p3073
(dp3074
g3
S"Not for merge. Trying to find what's causing SIGKILL."
p3075
sg5
S'Figuring out why the build fails'
p3076
sg7
(lp3077
S'Build'
p3078
asg10
I2834
sg11
(lp3079
S"This is extremely strange. The tests still get killed, but  it succeeded on the ```linux-4``` building machine once.\r\n\r\nI've added memory leak detection which calls GC after each test which (tests like 3x slower) appears to not trigger the condition to sigkill the test. Either the build environments are corrupted or a JVM GC bug is triggered."
p3080
aS"The test run out of memory not so gracefully. I'll close this PR after I moved a few fixes out into another PR."
p3081
asg14
S'akarnokd:BuildFailureChecks'
p3082
sbsI2837
(iPull
Pull
p3083
(dp3084
g3
g53
sg5
S'Fixed a non-deterministic test and a few scheduler leaks.'
p3085
sg7
(lp3086
sg10
I2837
sg11
(lp3087
sg14
S'akarnokd:TestFixes0318'
p3088
sbsI2838
(iPull
Pull
p3089
(dp3090
g3
g53
sg5
S"Fix typo in OnSubscribe interface's Javadoc"
p3091
sg7
(lp3092
sg10
I2838
sg11
(lp3093
S'Merged. Thank you.'
p3094
asg14
S'avram:patch-1'
p3095
sbsI2845
(iPull
Pull
p3096
(dp3097
g3
S'Fixes #2844.'
p3098
sg5
S'Fix for repeat: wrong target of request'
p3099
sg7
(lp3100
S'Bug'
p3101
asg10
I2845
sg11
(lp3102
sg14
S'akarnokd:Issue2844Fix'
p3103
sbsI2847
(iPull
Pull
p3104
(dp3105
g3
S"I've made a couple of changes to the where the execution hooks are used.\r\n* Moved the `onCreate()` from the create method to the constructor to capture things going on with other subclasses of `Observable` like `GroupedObservable` and `ScalarSynchronousObservable`.\r\n* Moved the `onLift()` hook outside of the closure so as to capture information about where/when the operators lifted rather than when/where they were subscribed.\r\n\r\nI also made a change to the `ScalarSynchronousObservable.get()` have a slow path to allow hooks know when the data is pulled as if it was subscribed to normally."
p3106
sg5
S'More execution hook support'
p3107
sg7
(lp3108
S'Enhancement'
p3109
asg10
I2847
sg11
(lp3110
S'Can we merge this or is there more you want to discus?'
p3111
aS"I don't like the changes in the scalar."
p3112
aS'Could you be a little more specific so that I can counter or fix them? @benjchristensen you want to weigh in on this as a tiebreaker?'
p3113
aS'The get() is now possibly blocking if hooks are applied and makes any optimization based on the availability of the scalar value non-blockingly mute.'
p3114
aS"First `get()` by definition is blocking.  Second the `CountDownLatch` will only be put the thread to sleep if the new `onSubscribe` set by the `RxJavaObservableExecutionHook` changes the implementation to something async which for most part I would assume they don't.  This code can't make that assumption.\r\n\r\nTo settle this here are some numbers measuring the performance of `flatMap()` of synchronous Observables.  All runs with this command `./gradlew benchmarks '-Pjmh=-f 1 -tu ns -bm avgt -wi 5 -i 5 -r 1 .*flatMapIntPassthruSync.*'`\r\n\r\nBefore\r\n```\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync         1   avgt         5      206.682        8.275    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync      1000   avgt         5    30602.662     1086.577    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync   1000000   avgt         5 34499052.273  1042145.398    ns/op\r\n```\r\n\r\nWith this code change and instanceof check evaluating to fast path.\r\n```\r\n# Run complete. Total time: 00:00:37\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync         1   avgt         5      224.155        5.730    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync      1000   avgt         5    42361.367     4907.785    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync   1000000   avgt         5 38511919.011 13512306.519    ns/op\r\n```\r\n\r\nWith this code change and instanceof check forced to the new slow path but still using the original `ScalarSynchronousObservableOnSubscribe`\r\n```\r\n# Run complete. Total time: 00:00:37\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync         1   avgt         5      301.834       27.519    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync      1000   avgt         5   125380.888     1180.281    ns/op\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync   1000000   avgt         5 131494888.889  6862333.809    ns/op\r\n```"
p3115
aS'I don\'t see why you say ```get``` is blocking: the original has no locks in it and is probably JIT compiled to a field access; and there was no "definition" not even in the form of a javadoc.  Based on your perf, this change has a cost of about 10% which may negate the direct-scheduler optimization of the scalar observable.'
p3116
aS'I mean blocking in that the method can not return until it has a value for `t`.'
p3117
aS'I suggest adding a method ```isNonblockingGet()``` which should return true with the original scalar and false otherwise: this way, optimizations expecting get() to be non-blocking can still work and there is no need to alter ```get()```.'
p3118
aS"@benjchristensen suggested adding a new method to `RxJavaObservableExecutionHook` for creation of the `ScalarSynchronousObservable` so that the debug hook could override to return an equivalent that wouldn't be optimized out (like `Observable.from(Collections.signleton(item)`)\r\n\r\nI haven't thought too much about what the new hook method would like but probably something like \r\n```\r\npublic <T> Observable<T> onCreateEmpty();\r\npublic <T> Observable<T> onCreateJust(T item);\r\n```"
p3119
aS"I'm going to refactor and rebase this."
p3120
asg14
S'abersnaze:exec-hook'
p3121
sbsI2849
(iPull
Pull
p3122
(dp3123
g3
S'Reverts ReactiveX/RxJava#2807\r\n\r\nRevert because they are breaking changes. RxScala needs the `public` modifier so that it can wrap them into Scala classes.'
p3124
sg5
S'Revert "Corrected all Java interfaces declarations"'
p3125
sg7
(lp3126
sg10
I2849
sg11
(lp3127
S':-1:\r\n\r\nAll interface methods are public and abstract regardless of whether you declare them.\r\nAll interfaces are static when nested regardless of whether you declare it.'
p3128
aS'Is this some kind of Scala compiler bug?'
p3129
aS"> Is this some kind of Scala compiler bug?\r\n\r\nNo. I thought they were different. But since the byte codes are same, it won't break RxScala."
p3130
aS'LOL, it just can\'t be true, many Scala apps depend on Java code without `public abstract` modifiers in interfaces, I think it\'s a problem of mixing concepts "Interface" in Java and "Trait" in Scala, everything should work without these modifiers'
p3131
aS'> LOL, it just can\'t be true, many Scala apps depend on Java code without public abstract modifiers in interfaces, I think it\'s a problem of mixing concepts "Interface" in Java and "Trait" in Scala, everything should work without these modifiers\r\n\r\nRight. Thank you.'
p3132
asg14
S'ReactiveX:revert-2807-correct-interfaces'
p3133
sbsI2851
(iPull
Pull
p3134
(dp3135
g3
S"Fixed #2850.\r\n\r\nThe issue is because OperatorDebounceWithTime will swallow values but not request more items. Just add `request(Long.MAX_VALUE)` since it doesn't support backpressure."
p3136
sg5
S"Add 'request(Long.MAX_VALUE)' in 'onStart' to fix the backpressure issue of debounce"
p3137
sg7
(lp3138
S'Bug'
p3139
asg10
I2851
sg11
(lp3140
S"I'm not sure: why not request(1) for each dropped value similar to ```filter()```?"
p3141
aS'I just followed OperatorDebounceWithSelector.'
p3142
aS'@akarnokd other comments?'
p3143
aS'None.'
p3144
asg14
S'zsxwing:fix-debounce'
p3145
sbsI2852
(iPull
Pull
p3146
(dp3147
g3
S'Fixes both issue #2826 and [this StackOverflow](http://stackoverflow.com/questions/29324886/retrywhen-operator-never-retries) problem.'
p3148
sg5
S"Change retryWhen to eagerly ignore an error'd source's subsequent events"
p3149
sg7
(lp3150
S'Bug'
p3151
asg10
I2852
sg11
(lp3152
S'Should I release 1.0.9 with current 1.x branch?'
p3153
aS'Yes.'
p3154
asg14
S'akarnokd:RetryOldSubscribeFix'
p3155
sbsI2854
(iPull
Pull
p3156
(dp3157
g3
S'Fixes #2853.'
p3158
sg5
S'Fixes wrong request accounting in AbstractOnSubscribe'
p3159
sg7
(lp3160
S'Bug'
p3161
asg10
I2854
sg11
(lp3162
S'LGTM beyond trivial changes mentioned above. Thanks @akarnokd for fixing quickly (as usual)!'
p3163
aS'Done.'
p3164
asg14
S'akarnokd:AbstractOnSubscribeRequestFix'
p3165
sbsI2855
(iPull
Pull
p3166
(dp3167
g3
S'When ```observable.toBlocking().single()``` was called the number requested from ```observable``` was ```Long.MAX_VALUE``` due to ```OperatorSingle``` not overriding the request number.\r\n'
p3168
sg5
S'toBlocking.single should not request more than needed'
p3169
sg7
(lp3170
sg10
I2855
sg11
(lp3171
S"I'm going to change tack on this because the problem is really with ```OperatorSingle``` in that it should override requests using ```setProducer```.  The methods in ```BlockingObservable``` that don't use ```OperatorSingle``` should be unaffected. I'll update the PR shortly."
p3172
asg14
S'davidmoten:toBlocking-single-request'
p3173
sbsI2859
(iPull
Pull
p3174
(dp3175
g3
S'When ```Observable.doOnRequest``` is used it does not pass unsubscription upstream. This PR fixes that and also adds a unit test of the base functionality for ```doOnRequest``` (no unit tests were present for this operator at all).'
p3176
sg5
S'OperatorDoOnRequest should unsubscribe from upstream'
p3177
sg7
(lp3178
S'Bug'
p3179
asg10
I2859
sg11
(lp3180
S'Travis failure is unrelated:\r\n\r\n```rx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel```'
p3181
aS'Thanks.'
p3182
asg14
S'davidmoten:doOnRequest-fix-2'
p3183
sbsI2860
(iPull
Pull
p3184
(dp3185
g3
S'I noticed that ```observable.single().subscribe()``` requested ```Long.MAX_VALUE``` from ```observable``` which is more than it needs to come up with one item or an error. This PR sets a ```Producer``` for ```OperatorSingle``` so that it requests no more or less than it needs.'
p3186
sg5
S'OperatorSingle should request exactly what it needs'
p3187
sg7
(lp3188
S'Enhancement'
p3189
asg10
I2860
sg11
(lp3190
S"yep, indeed. I got a bit caught up preserving the existing logic. I'll clean it up."
p3191
aS"there's a bit of a cleanup, have another look, thanks."
p3192
aS'Thanks.'
p3193
asg14
S'davidmoten:OperatorSingle-request-accounting'
p3194
sbsI2861
(iPull
Pull
p3195
(dp3196
g3
S'The test ```OperatorZipTest.testZipRace``` fails every time on my pretty fast desktop due to not achieving the desired number of iterations within the timeout. It also fails every time on my slow laptop. This PR adds a time limit for the iterations of one second less than the test timeout so that the test will fail if a zip hangs but not if the machine is slow.'
p3197
sg5
S'Ensure OperatorZipTest.testZipRace does not fail on slower machines'
p3198
sg7
(lp3199
S'Test-Failures'
p3200
asg10
I2861
sg11
(lp3201
S'Thanks.'
p3202
asg14
S'davidmoten:zipRace-fix'
p3203
sbsI2862
(iPull
Pull
p3204
(dp3205
g3
S'Made changes to test source to avoid or suppress these warnings:\r\n\r\n* raw types \r\n* unused imports\r\n* unused variables'
p3206
sg5
S'Cleanup warnings in test source'
p3207
sg7
(lp3208
sg10
I2862
sg11
(lp3209
S'Looks good. Thanks.'
p3210
asg14
S'davidmoten:test-warnings'
p3211
sbsI2864
(iPull
Pull
p3212
(dp3213
g3
S'Added type to IndexedRingBuffer.POOL (to get rid of raw types warning) and changed signature of ```IndexedRingBuffer.getInstance``` so that it infers type. Means that 13 ```unchecked``` warnings in the code base can be removed.'
p3214
sg5
S'IndexedRingBuffer.getInstance can infer type'
p3215
sg7
(lp3216
S'Enhancement'
p3217
asg10
I2864
sg11
(lp3218
S'Thanks!'
p3219
asg14
S'davidmoten:main-warnings'
p3220
sbsI2866
(iPull
Pull
p3221
(dp3222
g3
S"Use simpler naming in ```Action1```, ```Func1``` because is used as a default for IDEs when generating implementing methods. For instance,  in Eclipse when auto-generating the implementing methods for an ```Action1``` I get by default:\r\n\r\n```java\r\nnew Action1<Integer>() {\r\n\r\n    @Override\r\n    public void call(Integer t1) {\r\n         //TODO auto-generated\r\n    }\r\n}\r\n```\r\n\r\nI can't count the number of times I've removed the trailing 1 from the parameter before continuing and I'd appreciate not having to do it! (unfortunately I can't use Java 8 lambdas in all my code).\r\n\r\nI'd also be open to a name other than ```t``` like ```value``` but would be happy just to see the 1 go."
p3223
sg5
S'Use simpler naming in Action1, Func1 to assist IDEs'
p3224
sg7
(lp3225
S'Enhancement'
p3226
asg10
I2866
sg11
(lp3227
S':+1:'
p3228
asg14
S'davidmoten:Action1-argument-name'
p3229
sbsI2867
(iPull
Pull
p3230
(dp3231
g3
S'* removed unused constructors that were the subject of varargs warnings\r\n* removed unused import\r\n\r\nI think that cleans up all java source warnings (not including javadoc issues).'
p3232
sg5
S'More warnings cleanup'
p3233
sg7
(lp3234
sg10
I2867
sg11
(lp3235
S'Thanks.'
p3236
asg14
S'davidmoten:remove-unused'
p3237
sbsI2868
(iPull
Pull
p3238
(dp3239
g3
S'Should fix the test recent test failures.'
p3240
sg5
S'Fixed reentrancy issue with the error producer.'
p3241
sg7
(lp3242
sg10
I2868
sg11
(lp3243
sg14
S'akarnokd:RetryWithBackpressureFix'
p3244
sbsI2871
(iPull
Pull
p3245
(dp3246
g3
S'When a release is created the tagged version should build deterministically at any time. The wildcard dependency on ```gradle-rxjava-project-plugin``` in ```build.gradle``` means this will not be the case. This PR sets the version at 2.2.3 (the latest on Maven Central). '
p3247
sg5
S'Use explicit versioning for gradle-rxjava-project-plugin'
p3248
sg7
(lp3249
S'Build'
p3250
asg10
I2871
sg11
(lp3251
S"I'm curious to the delay on this PR, seems straightforward. @JakeWarton I'm going to quote you here from your [gist ](https://gist.github.com/JakeWharton/2066f5e4f08fbaaa68fd):\r\n\r\n>Prevent wildcard versions in your Gradle project. These undermine deterministic and hermetic builds and are generally considered bad practice.\r\n\r\n@quidryan Thought I'd check with you here seeing as you have done a lot of gradle build work with RxJava."
p3252
aS"> I'm curious to the delay on this PR\r\n\r\nJust me.\r\n\r\n> wildcard versions in your Gradle project\r\n\r\nWe avoid them in actual project dependencies (of which we have none), but for the Gradle project plugins itself we were okay with it as we controlled both of them and it simplified build fixes.\r\n\r\nI'm okay either way. Have you run into issues with the plugin?"
p3253
asg14
S'davidmoten:explicit-version'
p3254
sbsI2872
(iPull
Pull
p3255
(dp3256
g3
g53
sg5
S'Use the correct accounts for sonatype sync'
p3257
sg7
(lp3258
S'Build'
p3259
asg10
I2872
sg11
(lp3260
S'@benjchristensen could you merge this one before releasing the next version? So that you can test the account.'
p3261
aS"I thought we already had this solved. This changes all 4 encrypted values, why? Because we don't know which one is which?"
p3262
asg14
S'rspieldenner:sonatype_sync'
p3263
sbsI2875
(iPull
Pull
p3264
(dp3265
g3
S'Fixes NPE reported in #2874.'
p3266
sg5
S'Fix: NPE in requestFromChild method.'
p3267
sg7
(lp3268
S'Bug'
p3269
asg10
I2875
sg11
(lp3270
sg14
S'akarnokd:ConcatNPEFix'
p3271
sbsI2878
(iPull
Pull
p3272
(dp3273
g3
S'FlatMapping over a sequence of scalar observable values while observing them from a different thread did not work: items in the scalar queue where ignored by some terminal checks.'
p3274
sg5
S'flatMap: fixed scalar-merging.'
p3275
sg7
(lp3276
S'Bug'
p3277
asg10
I2878
sg11
(lp3278
S'Is this a replacement for your significant rewrite of `merge`? Are you still trying to rewrite it or just incrementally adjust it as done here? '
p3279
aS'No, this is still incremental. The full rewrite will only happen for 2.0.'
p3280
aS"Cool, I like that approach better. That context helps me review this. \r\n\r\nDon't spend too much time on the 2.0 rewrite quite yet though until we figure out some of the foundational abstractions and contracts."
p3281
aS"I'm not ready to proceed with this PR. I've added some comments above. The key part that concerns me is that we are changing to always route through a queue for scalar values when request(n) < Long.MAX_VALUE is happening. "
p3282
aS"Apparently a full rewrite can't be avoided."
p3283
aS"If you're going to pursue a full rewrite, make sure to pay attention not just to the JMH throughput numbers, but also the object allocation rates. \r\n\r\nI expect a rewrite of merge to take some non-trivial time to write, review and test considering the history and attempts made. It is a far more important operator performance-wise than most."
p3284
asg14
S'akarnokd:flatMapJustFix'
p3285
sbsI2880
(iPull
Pull
p3286
(dp3287
g3
S'Every call to Observable.count() and countLong() instantiated a new Func2 which I have now made a singleton in the interests of minimizing GC pressure. \r\n\r\nCan anyone in the know confirm for me that there is GC benefit from this one because I assume a sophisticated enough compiler could replace the new Func2 call with a singleton during its optimizations.\r\n\r\nIf this one is worthwhile then there are heaps more of these in ```Observable.java``` and possibly elsewhere.'
p3288
sg5
S'Use singleton reduction functions in count and countLong'
p3289
sg7
(lp3290
S'Enhancement'
p3291
asg10
I2880
sg11
(lp3292
S"Since we are Java 6+, we can't assume a bunch of optimizations happen so what's left is manual optimization/inlining."
p3293
aS"I'd instead do this directly with a long counting Subscriber and for int, I'd map it to min(count, Integer.MAX_VALUE) at the end saving the duplications."
p3294
aS'I guess this is an opportunity to decide what overflow behaviour we desire. I see three options:\r\n\r\n1.  be consistent with Integer/Long overflow behaviour\r\n2. return Integer.MAX_VALUE/Long.MAX_VALUE on overflow\r\n3. throw an error on overflow\r\n\r\nMy preference is 3.'
p3295
aS"I think both `2` and `3` will be a breaking change so it's not acceptable. `1` is not a big deal since it's consistent with Java, which all Java users should be familiar with it."
p3296
aS'@davidmoten thoughts?'
p3297
aS'Thanks.'
p3298
asg14
S'davidmoten:reduce-optimization'
p3299
sbsI2881
(iPull
Pull
p3300
(dp3301
g3
S'Syntactic simplification for the `assertReceivedOnNext(List<T> items)`.\r\nInstead of \r\n```\r\ntestSubscriber.assertReceivedOnNext(Arrays.asList(1, 2, 3))\r\n```\r\n(almost all existing calls use Arrays.asList())\r\n proposed vararg method \r\n```\r\ntestSubscriber.assertReceivedOnNext(1, 2, 3)\r\n```\r\n looks simplier and nicer.'
p3302
sg5
S'VarArg parameters for the assertReceivedOnNext(T... items)'
p3303
sg7
(lp3304
S'Enhancement'
p3305
asg10
I2881
sg11
(lp3306
S"Hi. First of all, this is an incompatible change since the TestSubscriber is a public API and needs to maintain its method signatures. Second, varargs in Java 6 is problematic and we can't use the SafeVarargs annotation: the moment you try to assert an array of list of values, you get the unchecked warning."
p3307
aS'@akarnokd, regarding the change incompatibility: I have only introduced new method with varargs, the method with list remains available, so should not break anything.\r\nAs for your second point: I see the problem with Java 6. Is compiler warning a blocker?'
p3308
aS"You're right, I've misread the diff page. The warning isn't a real blocker but we'd like to avoid much of it as possible.\r\n\r\nAs a matter of fact, I happen to have a [PR](https://github.com/ReactiveX/RxJava/pull/2806/files) in which the TestSubscriber is also expanded with lots of useful methods.\r\n\r\nRegardless, I wouldn't have changed tests to use the new method since we usually don't look at test unless there is a problem with them. In that case or with new tests, the developers are free to use the more convenient methods."
p3309
aS"@akarnokd I'm trying to figure out if this will cause any of the issues that made us move away from varargs in the past. You seem to have concluded that it won't?\r\n\r\nAlso I need to make sure the overload won't conflict with dynamic languages like Groovy and Clojure. \r\n\r\n@Unisay Can you add the method without changing all the unit tests so this doesn't affect 30 files that don't need to be changed? Please rebase the change so it is a single commit just touching TestSubscriber."
p3310
aS"I'm not sure about dynamic languages but I'd prefer a shorter ```assertValues(Object... values)```."
p3311
aS'Handling in https://github.com/ReactiveX/RxJava/pull/2948 without changing the other 30 files.'
p3312
asg14
S'Unisay:assertReceivedOnNext'
p3313
sbsI2882
(iPull
Pull
p3314
(dp3315
g3
S'title says it all'
p3316
sg5
S"OperatorScan - don't call onNext after onError is called"
p3317
sg7
(lp3318
sg10
I2882
sg11
(lp3319
S'Added ```Exceptions.throwIfFatal``` as suggested by @zsxwing '
p3320
aS'Thanks.'
p3321
aS':+1: '
p3322
asg14
S'davidmoten:scan-fix'
p3323
sbsI2883
(iPull
Pull
p3324
(dp3325
g3
S'This PR modifies the ```Subject``` class to host the union of the state-peeking methods of the various ```Subject``` implementations and fixes the inconsistent behavior of ```ReplaySubject.getValues(T[])```.\r\n\r\nThe changes enable the ```SerializedSubject``` to relay such state-peeking method calls into the wrapped subject and allows future ```Subject``` wrappers to do the same (#2458).'
p3326
sg5
S'Proposal: standardized Subject state-peeking methods.'
p3327
sg7
(lp3328
S'Enhancement'
p3329
asg10
I2883
sg11
(lp3330
S'Seems to make sense. The additions to `Subject` all should be non-breaking.'
p3331
aS"Due to the Experimental marking of these I'm being a little less stringent in discussing the addition to public APIs, but it seems to me that the precedent set on the BehaviorSubject shows the value of these methods. Additionally, Subjects are the stateful, side-effecting types and these methods seem to make sense for them."
p3332
asg14
S'akarnokd:ExtendedSubjectAPI'
p3333
sbsI2886
(iPull
Pull
p3334
(dp3335
g3
S'The ```RangeProducer.request``` method may be called from different threads so the mutable field ```index``` that is read and written by this method should be volatile. '
p3336
sg5
S'OnSubscribeRange Producer field should be volatile'
p3337
sg7
(lp3338
sg10
I2886
sg11
(lp3339
S"No, because it is encapsulated between the ```BackpressureUtils.getAndAddRequest()``` and ```REQUESTED_UPDATER.addAndGet``` which act as full barriers. Since the emission is only entered by one thread at a time, the above two points create a happens-before relationship and the ```index``` variable is properly published; you don't even need to worry about word tearing on 32bit."
p3340
aS'I see, good info thanks. '
p3341
asg14
S'davidmoten:range-volatile'
p3342
sbsI2892
(iPull
Pull
p3343
(dp3344
g3
S'In `RangeProducer` if the first two requests come concurrently and are both for `Long.MAX_VALUE` then there is a possible race condition where the fast path is started twice thus emitting some or all elements twice.\r\n\r\nThis PR fixes the race by only allowing the fast path if the current request count is 0 (using ```compareAndSet```).'
p3345
sg5
S'Fix Observable.range race condition'
p3346
sg7
(lp3347
S'Bug'
p3348
asg10
I2892
sg11
(lp3349
S"If this is right I'll submit another PR for `OnSubscribeFromIterable` which has the same problem."
p3350
aS'Looks good. Thanks.'
p3351
asg14
S'davidmoten:range-race'
p3352
sbsI2894
(iPull
Pull
p3353
(dp3354
g3
S'Fixes issue #2890.'
p3355
sg5
S'Concat: fixed reentrancy problem in completeInner'
p3356
sg7
(lp3357
S'Bug'
p3358
asg10
I2894
sg11
(lp3359
sg14
S'akarnokd:ConcatOverflowFix'
p3360
sbsI2895
(iPull
Pull
p3361
(dp3362
g3
S'In `IterableProducer` if the first two requests come concurrently and are both for `Long.MAX_VALUE` then there is a possible race condition where the fast path is started twice thus emitting some or all elements twice.\r\n\r\nThis PR fixes the race by only allowing the fast path if the current request count is 0 (using ```compareAndSet```).'
p3363
sg5
S'Fix Observable.from(Iterable) race condition'
p3364
sg7
(lp3365
sg10
I2895
sg11
(lp3366
S'Thanks!'
p3367
asg14
S'davidmoten:from-iter-race'
p3368
sbsI2897
(iPull
Pull
p3369
(dp3370
g3
S'Source was emitting t multiple times while holding queue.\r\n\r\nFixes #2896'
p3371
sg5
S'Fix for overlapping windows. '
p3372
sg7
(lp3373
S'Bug'
p3374
asg10
I2897
sg11
(lp3375
S'Could you add the unit test from your gist as well?'
p3376
aS"Ah, someone else's gist. Still, as the unit test is there may as well chuck it in."
p3377
aS"Thanks for the feedback. Is it kosher to do a sleep in the test? Its the\r\nonly way I've been able to get the windows to overlap and reproduce the\r\ncondition.\r\n\r\nAlso, it doesn't seem too reliable to depend upon sleep."
p3378
aS"Good catch! An unit test would be great, but you don't really need concurrency: reentrancy will do just fine:\r\n```java\r\n    @Test\r\n    public void testWindowNoDuplication() {\r\n        final PublishSubject<Integer> source = PublishSubject.create();\r\n        final TestSubscriber<Integer> tsw = new TestSubscriber<Integer>() {\r\n            boolean once;\r\n            @Override\r\n            public void onNext(Integer t) {\r\n                if (!once) {\r\n                    once = true;\r\n                    source.onNext(2);\r\n                }\r\n                super.onNext(t);\r\n            }\r\n        };\r\n        TestSubscriber<Observable<Integer>> ts = new TestSubscriber<Observable<Integer>>() {\r\n            @Override\r\n            public void onNext(Observable<Integer> t) {\r\n                t.subscribe(tsw);\r\n                super.onNext(t);\r\n            }\r\n        };\r\n        source.window(new Func0<Observable<Object>>() {\r\n            @Override\r\n            public Observable<Object> call() {\r\n                return Observable.never();\r\n            }\r\n        }).subscribe(ts);\r\n        \r\n        source.onNext(1);\r\n        source.onCompleted();\r\n        \r\n        assertEquals(1, ts.getOnNextEvents().size());\r\n        assertEquals(Arrays.asList(1, 2), tsw.getOnNextEvents());\r\n    }\r\n```\r\n"
p3379
aS'Thanks @akarnokd - great test!'
p3380
aS'Thanks!'
p3381
aS'Should I push a patch release with this today?'
p3382
aS'A verification on #2878 would be great. After that, the patch release can commence.'
p3383
asg14
S'alexwen:window_overlap'
p3384
sbsI2898
(iPull
Pull
p3385
(dp3386
g3
S'As per discussion in #2884, it turns out that `range` does emit `onComplete` even when zero is requested because `Observable.range` does not use `OperatorRange` when the count is zero but rather returns an `Observable.empty()`. This PR adds a unit test confirming this fact.'
p3387
sg5
S'Observable.range - add unit test for eager completion on empty'
p3388
sg7
(lp3389
sg10
I2898
sg11
(lp3390
S'Looks good. Thanks!'
p3391
asg14
S'davidmoten:range-eager-complete'
p3392
sbsI2899
(iPull
Pull
p3393
(dp3394
g3
S'As per discussion in #2884, `Observable.from(iterable)` is preferred to emit `onCompleted` when `iterable` is empty even when nothing has been requested.\r\n\r\nThis PR adds a check on `iterator.hasNext` before the `Producer` is assigned and emits `onCompleted` immediately if `hasNext` returns false.\r\n\r\nIncludes unit test that failed on existing code base.\r\n\r\n'
p3395
sg5
S'Observable.from(empty) to emit onComplete even when 0 requested'
p3396
sg7
(lp3397
sg10
I2899
sg11
(lp3398
S'ah erk I need to rebase'
p3399
aS'rebased now'
p3400
aS'Thanks!'
p3401
asg14
S'davidmoten:from-iter-eager-complete'
p3402
sbsI2901
(iPull
Pull
p3403
(dp3404
g3
S'Added support for backpressure in ```toList``` and ```toSortedList```: they emit their buffered content only when downstream actually requested it.\r\n\r\nFew other notes:\r\n  - Added overload to ```toSortedList``` taking a ```initialCapacity``` argument which should help reduce the number of times the buffer needs to be resized.\r\n  - The Func2 parameter of ```toSortedList``` is now wrapped once per operator instead of once per subscriber.\r\n  - Using non-final list buffers which are set to null on completion to not hold onto the buffer.\r\n  - ```toSortedList```now returns a modifiable ```ArrayList```: since it is a handoff procedure, there is no value in forcing a non-modification constraint on the emitted list (similar to ```toList``` even before this PR).'
p3405
sg5
S'Operators toList and toSortedList now support backpressure'
p3406
sg7
(lp3407
S'Enhancement'
p3408
asg10
I2901
sg11
(lp3409
S"Cool. I'll be using that `initialCapacity` and `SingleDelayedProducer` will be useful too."
p3410
aS'Good changes.'
p3411
asg14
S'akarnokd:ToSortedListBackpressure'
p3412
sbsI2902
(iPull
Pull
p3413
(dp3414
g3
S"On my i5 laptop `ExceptionsTest.testStackOverflowIsThrow` hangs. This PR changes the test so that it confirms that significant stack depth occurs and in another test ensures that the fatal `StackOverflowError` is thrown by `subscribe` when it occurs in `onNext`.\r\n\r\nI also removed some unused code from the original test and some extra subscriptions that didn't seem to serve a particular function."
p3415
sg5
S'Prevent ExceptionsTest from hanging when testing stack overflow'
p3416
sg7
(lp3417
sg10
I2902
sg11
(lp3418
S'Looks good. Thanks!'
p3419
asg14
S'davidmoten:exceptions-test'
p3420
sbsI2903
(iPull
Pull
p3421
(dp3422
g3
S'Logic is fine, can replace a block of code with a call to `BackpressureUtils.getAndAddRequest`.'
p3423
sg5
S'OperatorPublish - use BackpressureUtils'
p3424
sg7
(lp3425
sg10
I2903
sg11
(lp3426
S"Looks good, but I'd be more glad you could review #2814 instead."
p3427
aS"Ah right, I'll chuck this in preference to your rewrite."
p3428
asg14
S'davidmoten:use-backpressure-utils'
p3429
sbsI2904
(iPull
Pull
p3430
(dp3431
g3
S'Added request overflow check to `TakeLastQueueProducer` and associated unit test (that failed on existing code base).'
p3432
sg5
S'TakeLast - add request overflow check'
p3433
sg7
(lp3434
S'Bug'
p3435
asg10
I2904
sg11
(lp3436
S'Excellent!'
p3437
asg14
S'davidmoten:take-last-queue-producer-request-overflow'
p3438
sbsI2905
(iPull
Pull
p3439
(dp3440
g3
S'To reduce GC pressure use singleton `Operator`s for `Observable.single`, `distinct`, `distinctUntilChanged`,  `onBackpressureBuffer`,  `isEmpty`.'
p3441
sg5
S'Use singleton Operators where we can'
p3442
sg7
(lp3443
S'Enhancement'
p3444
asg10
I2905
sg11
(lp3445
S'Could you please do ```never()``` as well?'
p3446
aS'Updated javadoc and renamed `create` methods to `instance`, added singleton for `never` as well.'
p3447
aS"unrelated CI failure. I'll open an issue for it."
p3448
aS'Looks good!'
p3449
asg14
S'davidmoten:single-singleton'
p3450
sbsI2907
(iPull
Pull
p3451
(dp3452
g3
S'Fixes a race condition with the timed schedule (first potentially overwriting the result of the untimed schedule in mas) and a scheduled task retention problem due to not tracking those.'
p3453
sg5
S'Fixed schedule race and task retention with ExecutorScheduler.'
p3454
sg7
(lp3455
S'Bug'
p3456
asg10
I2907
sg11
(lp3457
S"I've discovered another retention problem and updated the PR to fix it as well."
p3458
aS'Thanks for the explanation.'
p3459
aS"@akarnokd @benjchristensen  \r\n\r\nIs this fixed? I still see the following exception on 1.0.14. Below is the stack from our service's log:\r\n\r\nERROR [2015-09-23 20:54:00,640] com.mycompany.mobile.dropwizard.exception.AbstractExceptionMapper: Error handling request: \r\n! java.util.concurrent.RejectedExecutionException: Task rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker@5e731de2 rejected from java.util.concurrent.ThreadPoolExecutor@500df7b6[Running, pool size = 25, active threads = 5, queued tasks = 25, completed tasks = 6741988]\r\n! at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047) ~[na:1.8.0_51]\r\n! at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823) ~[na:1.8.0_51]\r\n! at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369) ~[na:1.8.0_51]\r\n! at com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(MoreExecutors.java:550) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.schedule(ExecutorScheduler.java:78) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.internal.operators.OperatorSubscribeOn$1.onNext(OperatorSubscribeOn.java:57) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.internal.operators.OperatorSubscribeOn$1.onNext(OperatorSubscribeOn.java:43) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.internal.util.ScalarSynchronousObservable$1.call(ScalarSynchronousObservable.java:46) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.internal.util.ScalarSynchronousObservable$1.call(ScalarSynchronousObservable.java:35) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:162) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:154) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:162) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:154) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:162) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:154) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:162) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable$2.call(Observable.java:154) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable.subscribe(Observable.java:7804) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.Observable.subscribe(Observable.java:7772) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:432) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at rx.observables.BlockingObservable.first(BlockingObservable.java:159) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.mycompany.mobile.common.concurrency.ObservableUtil.asList(ObservableUtil.java:27) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.mycompany.mobile.token.PushDeviceTokenResource.getTokenByDeviceToken(PushDeviceTokenResource.java:261) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at sun.reflect.GeneratedMethodAccessor23.invoke(Unknown Source) ~[na:na]\r\n! at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_51]\r\n! at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_51]\r\n! at com.sun.jersey.spi.container.JavaMethodInvokerFactory$1.invoke(JavaMethodInvokerFactory.java:60) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.model.method.dispatch.AbstractResourceMethodDispatchProvider$ResponseOutInvoker._dispatch(AbstractResourceMethodDispatchProvider.java:205) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.model.method.dispatch.ResourceJavaMethodDispatcher.dispatch(ResourceJavaMethodDispatcher.java:75) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.codahale.metrics.jersey.InstrumentedResourceMethodDispatchProvider$ExceptionMeteredRequestDispatcher.dispatch(InstrumentedResourceMethodDispatchProvider.java:69) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jersey.guava.OptionalResourceMethodDispatchAdapter$OptionalRequestDispatcher.dispatch(OptionalResourceMethodDispatchAdapter.java:37) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.uri.rules.HttpMethodRule.accept(HttpMethodRule.java:302) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.uri.rules.ResourceObjectRule.accept(ResourceObjectRule.java:100) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.uri.rules.RightHandPathRule.accept(RightHandPathRule.java:147) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.uri.rules.RootResourceClassesRule.accept(RootResourceClassesRule.java:84) ~[push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1542) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.application.WebApplicationImpl._handleRequest(WebApplicationImpl.java:1473) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1419) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.server.impl.application.WebApplicationImpl.handleRequest(WebApplicationImpl.java:1409) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.spi.container.servlet.WebComponent.service(WebComponent.java:409) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:540) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.sun.jersey.spi.container.servlet.ServletContainer.service(ServletContainer.java:715) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at javax.servlet.http.HttpServlet.service(HttpServlet.java:770) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jetty.NonblockingServletHolder.handle(NonblockingServletHolder.java:49) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1515) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlets.UserAgentFilter.doFilter(UserAgentFilter.java:83) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlets.GzipFilter.doFilter(GzipFilter.java:348) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jetty.BiDiGzipFilter.doFilter(BiDiGzipFilter.java:127) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1486) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.servlets.ThreadNameFilter.doFilter(ThreadNameFilter.java:29) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1486) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.handle(AllowedMethodsFilter.java:44) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jersey.filter.AllowedMethodsFilter.doFilter(AllowedMethodsFilter.java:39) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1486) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:519) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1097) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:448) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1031) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at com.codahale.metrics.jetty9.InstrumentedHandler.handle(InstrumentedHandler.java:175) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at io.dropwizard.jetty.RoutingHandler.handle(RoutingHandler.java:51) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:92) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.StatisticsHandler.handle(StatisticsHandler.java:162) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.Server.handle(Server.java:446) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:271) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:246) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532) [push-token-server-0.0.99-shaded.jar:0.0.99]\r\n! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_51]\r\n\r\n"
p3460
aS'@zhiyanshao You seem to have a different problem than what this PR fixes. Either your pool has been shutdown in the middle or you are running with a bounded internal queue that gets overflown.'
p3461
aS'@akarnokd , thank you for your reply. \r\n\r\nDo you know under what circumstances the pool will be shutdown in the middle and how I can tell if I am running with a bounded internal queue? Are these two scenarios by design and can be fixed in my code?'
p3462
aS'It appears you are using some Google threadpool-helper classes. Look where the Executor or ExecutorService is configured in your project.'
p3463
asg14
S'akarnokd:SchedulerFromFix'
p3464
sbsI2909
(iPull
Pull
p3465
(dp3466
g3
S'Reported in #2908. The bug is on line [113](https://github.com/ReactiveX/RxJava/blob/5ac4448873c09cd806ae73a37727a299cbaee2ba/src/test/java/rx/internal/util/RxRingBufferWithoutUnsafeTest.java#L113). If the drainer is delayed after a poll returning null and the emitter producing & terminating before the getCount(), the queue is non empty but the drainer quits and hence the value difference. It comes up almost always if you put a sleep before L113.'
p3467
sg5
S'Fix the drainer to check if the queue is empty before quitting.'
p3468
sg7
(lp3469
S'Test-Failures'
p3470
asg10
I2909
sg11
(lp3471
S'Pleased to hear just a problem with the test. Thanks for quick resolution @akarnokd'
p3472
asg14
S'akarnokd:RxRingBufferTestFix'
p3473
sbsI2911
(iPull
Pull
p3474
(dp3475
g3
S'Benchmarks the behavior of ```publish()``` in face of number of child subscribers, batching effect in request(), length of the source and whether or not each child observes values on a separate thread.\r\n\r\n [Benchmark results](https://gist.github.com/akarnokd/cccc31312125d8636d3d)\r\n\r\nRemarks:\r\n- With no subscribers, the operator seems to fill its queue and then do nothing unless someone subscribes. There is no test to check for this behavior so it might be a bug or a feature.\r\n- In async mode, the benchmark threw ```MissingBackpressureException``` a lot of times which can happen with a single subscriber as well, so it might be some concurrency bug in the operator.\r\n'
p3476
sg5
S'OperatorPublish benchmark'
p3477
sg7
(lp3478
S'Enhancement'
p3479
asg10
I2911
sg11
(lp3480
S'> The operator seems to fill its queue and then do nothing unless someone subscribes\r\n\r\nI remember this being talked about at some point and an agreement that this is wrong behavior. If there are no subscribers it should just ignore/drop the data.'
p3481
aS'Agreed that throwing a `MissingBackpressureException` a lot sounds like a problem.'
p3482
aS"There shouldn't be any MBE because every component supports backpressure. There is a request accounting problem somewhere but this is now irrelevant. The new OperatorPublish works without throwing MBE."
p3483
asg14
S'akarnokd:OperatorPublishPerf'
p3484
sbsI2912
(iPull
Pull
p3485
(dp3486
g3
S"SubscriptionList.add() and thread unparking.\r\n\r\nThis PR partially reverts some changes from earlier scheduler optimizations and fixes a case where if multiple concurrent schedule() calls happen, the order in the SubscriptionList might be different from the actual execution order which degrades performance on task termination due to remove() being O(n).\r\n\r\nThis might be the source of degradation in #2857 as well.\r\n\r\nI'll post the ```ComputationSchedulerPerf``` results later."
p3487
sg5
S'Fix the performance degradation due to different schedule execution and'
p3488
sg7
(lp3489
S'Bug'
p3490
asg10
I2912
sg11
(lp3491
S"```\r\nBenchmark      (size)        2912   2912 error       1.0.9  1.0.9 error\r\nobserveOn           1  198785,487    59066,518  203658,175     2162,208\r\nobserveOn          10  153990,002    79263,702  178839,814    17425,416\r\nobserveOn         100  150333,481    20749,482  148706,965    15169,371\r\nobserveOn        1000   25568,884    24718,878   16911,025     7937,752\r\nobserveOn        2000   14914,879    17179,009   10022,748    12460,449\r\nobserveOn        3000   11238,118     2400,207   10359,226     2868,300\r\nobserveOn        4000    8172,019     1370,653    7084,573     1460,569\r\nobserveOn       10000    3491,021      606,603    3412,501      527,199\r\nobserveOn      100000     398,684       20,607     400,360       14,743\r\nobserveOn     1000000      41,865        1,884      43,887        0,746\r\nsubscribeOn         1  209443,261     8593,857  169965,326   104264,868\r\nsubscribeOn        10  175152,648    79449,091  151055,057   152837,825\r\nsubscribeOn       100  150042,891    84189,199  140177,447   128390,130\r\nsubscribeOn      1000   72804,521    29222,089   57929,258    19364,337\r\nsubscribeOn      2000   61834,990    14148,419   36040,899     8608,854\r\nsubscribeOn      3000   44148,878     4653,713   44982,855     3551,646\r\nsubscribeOn      4000   35494,660     3338,209   30343,790    24747,587\r\nsubscribeOn     10000   14890,534     6229,533   13920,062     1897,708\r\nsubscribeOn    100000    1691,786      230,978    1661,187      141,518\r\nsubscribeOn   1000000     193,028       22,564     191,835       16,975\r\n```\r\n\r\nThere doesn't seem to be any performance degradation, however, small sized measurements are quite hectic for some reason."
p3492
asg14
S'akarnokd:FixEventLoopsPerfDegradation'
p3493
sbsI2914
(iPull
Pull
p3494
(dp3495
g3
S'This is an optimization for `takeLast` when called with parameter 1. Using `OperatorTakeLast` carries unnecessary overhead for the `takeLast(1)` case and a decent throughput improvement (x2) for streams of 100 elements or more is seen in the benchmarks below.\r\n\r\n`takeLast(1)` is used by the following operators which will also demonstrate a throughput improvement:\r\n\r\n* `last`, `lastOrDefault`\r\n* `reduce`\r\n* `collect`\r\n* `count`, `countLong`\r\n\r\nBenchmarks comparing using the new `OperatorTakeLastOne` and `OperatorTakeLast`:\r\n\r\n```\r\nBenchmark                                                        Mode   Samples        Score  Score error    Units\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Few     thrpt         5  2235516.141   129091.019    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Many    thrpt         5      103.980        9.233    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Some    thrpt         5   984689.481    48560.897    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Few        thrpt         5  2187421.223    93550.379    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Many       thrpt         5       54.575        2.054    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Some       thrpt         5   466892.497     9267.405    ops/s\r\n\r\n```'
p3496
sg5
S'Optimization - use OperatorTakeLastOne for takeLast(1)'
p3497
sg7
(lp3498
S'Enhancement'
p3499
asg10
I2914
sg11
(lp3500
S"Thanks @akarnokd for the review, I appreciate the lessons!\r\n\r\nI've incorporated the changes except for the `ignoreElements` optimization which I'll leave for another PR.\r\n\r\nI wrote this up before you submitted the `SingleDelayedProducer` in #2901 but had spotted its usefulness. It's very close to being reusable here, just have to handle the empty stream case which is allowed by `takeLast`. I submitted this anyway because it helps me learn, thanks.\r\n\r\nUp to you of course if you want to merge this or wait for #2901 to be merged then get another PR that uses a modified `SingleDelayedProducer` (might have its name changed if it allows single or none).\r\n\r\nUpdated benchmarks (that's a nifty trick using Params):\r\n\r\n```\r\nBenchmark                                                  (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast            5  thrpt         5  2233452.067    81630.798    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast          100  thrpt         5   444353.711   224920.714    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast      1000000  thrpt         5       56.947        2.630    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne         5  thrpt         5  2372577.831    76820.729    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne       100  thrpt         5  1012528.600    75674.064    ops/s\r\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne   1000000  thrpt         5      108.284        4.965    ops/s\r\n```\r\n"
p3501
aS"Thanks @akarnokd.  I've added your suggestions:\r\n* shortcut to completion when empty\r\n* test for `takeLast(0)`"
p3502
aS'Thanks!'
p3503
aS':+1: '
p3504
asg14
S'davidmoten:take-last-one'
p3505
sbsI2915
(iPull
Pull
p3506
(dp3507
g3
S'As suggested by @akarnokd, instead of `filter(alwaysFalse)` use a custom operator and a singleton instance of it.\r\n\r\nAlso snuck in the removal of an unused import from `OperatorTakeLastOneTest.java`.'
p3508
sg5
S'Observable.ignoreElements - optimize '
p3509
sg7
(lp3510
S'Enhancement'
p3511
asg10
I2915
sg11
(lp3512
S"Ah thanks. Now I understand the difference between those two approaches to connecting the subscribers. Simple really. I might add that bit of info to the javadoc on the Subscriber constructor I used in another PR, I was thinking of adding  bit more doco to Subscriber anyway because it gets stepped through a lot when you debug and it's a bit terse (confusing variable names and stuff)."
p3513
aS"changes made including a unit test of the request problem (doesn't hang by the way, just terminates early, without processing all upstream)."
p3514
aS'Great, thanks!'
p3515
asg14
S'davidmoten:ignore-elements-singleton'
p3516
sbsI2921
(iPull
Pull
p3517
(dp3518
g3
S'Use `BackpressureUtils.getAndAddRequest` in the `Producer` in `OperatorObserveOn`.\r\n\r\nIncludes unit test that failed on codebase before this change.'
p3519
sg5
S'OperatorObserveOn - handle request overflow correctly'
p3520
sg7
(lp3521
S'Bug'
p3522
asg10
I2921
sg11
(lp3523
S"Looks good, but I don't like what happens in the ```ObserveOnSubscriber``` constructor since the half-constructed ```this``` may escape through the ```setProducer``` call. \r\n\r\nIf you could just move the code from the line ```child.add(scheduledUnsubscribe);``` up until the constructor's end into some ```init()``` method and make sure it is called after the object is constucted (near ```return new ObserveOnSubscriber<T>(scheduler, child);```), that would be great."
p3524
aS"Ok, done. Haven't squashed commits because I think worthwhile having as a separate entry in the history."
p3525
aS'Great, thanks!'
p3526
asg14
S'davidmoten:observe-on-request-overflow'
p3527
sbsI2923
(iPull
Pull
p3528
(dp3529
g3
S'This is essentially the pair of the ```OnBackpressureDrop```. While ```OnBackpressureDrop``` emits the first value requested and then drops the rest, ```OnBackpressureLatest``` drops values but the latest and emits that when requested. One can also think of this operator as a sample with backpressure.\r\n\r\nOne mentionable property is that since it holds onto the very last value, downstream has to request at least one to receive ```onCompleted()```.'
p3530
sg5
S'OnBackpressureLatest: Non-blocking version of the toBlocking().latest() operator.'
p3531
sg7
(lp3532
S'Enhancement'
p3533
asg10
I2923
sg11
(lp3534
S'I like this feature. Been wanting something like this for a while. '
p3535
asg14
S'akarnokd:OnBackpressureLatest'
p3536
sbsI2927
(iPull
Pull
p3537
(dp3538
g3
S'Very minor cleanup. A Subscription was being checked twice for a null value before unsubscribe.'
p3539
sg5
S'SubscriptionIndexedRingBuffer - remove redundant check'
p3540
sg7
(lp3541
sg10
I2927
sg11
(lp3542
S"Thanks, but this class won't be in use once my merge rewrite PR #2928 is accepted."
p3543
aS"No worries, I'll close"
p3544
asg14
S'davidmoten:redundant-code'
p3545
sbsI2928
(iPull
Pull
p3546
(dp3547
g3
S"I've rewritten ```merge``` and ```mergeMaxConcurrent``` together from scratch.\r\n\r\n  - Added experimental ```maxConcurrent``` overloads to the array-merge and the mergeDelayError\r\n  - Fixed ```OperatorMapNotification``` beause it disregarded backpressure on its terminal emissions.\r\n  - While debugging some merge test failures, I've encountered a bug in OperatorPublish with the same underlying logical error (see comment) and fixed it here.\r\n  - Accidentally introduced a few tabs, therefore, I went in and replaced all tabs with spaces.\r\n  - I've changed ```OperatorMergeTest.shouldNotCompleteIfThereArePendingScalarSynchronousEmissionsWhenTheLastInnerSubscriberCompletes``` because it is legal to get onCompleted without any request.\r\n"
p3548
sg5
S'Merge and MergeMaxConcurrent unified and rewritten'
p3549
sg7
(lp3550
S'Bug'
p3551
aS'Enhancement'
p3552
asg10
I2928
sg11
(lp3553
S"I haven't benchmarked this because my current, old laptop where I wrote this PR is prone to overheating."
p3554
aS"I'm stoked you've taken this on. Merge has been a thorn in our side for a while. I've only had a cursory look so far, looks great but can you break up the `emitLoop` method, it's super long (>200 lines)?"
p3555
aS"I've updated this PR and added safeguard against onNext before request() and made sure the queues are released if the stream is unsubscribed before completing normally."
p3556
aS'Here is a benchmark comparison on an Intel Celeron 1005M @ 1.9GHz, Windows 7 x64, Java 8u45 (this is not the overheating laptop of mine).\r\n\r\n![mergeperf](https://cloud.githubusercontent.com/assets/1269832/7429057/129c032c-effb-11e4-8538-c15f911f0805.png)\r\n\r\nIt seems the single-shot overhead is greater in general, but note that the baseline merge has bugs especially with scalar sources: such merges may terminate much earlier and not deliver all values.\r\n\r\n```\r\nBenchmark                    (size)      Master     Master err           PR     PR error\r\nflatMapIntPassthruAsync             1  498695,426   259249,193   412488,433   257250,017\r\nflatMapIntPassthruAsync        1000       628,490      325,556      826,485     1030,174\r\nflatMapIntPassthruAsync     1000000         0,372        0,144        0,845        0,266\r\nflatMapIntPassthruSync            1   2413250,773   340583,441  1380370,980   268957,879\r\nflatMapIntPassthruSync         1000     16731,496     5159,943    16374,699     6581,767\r\nflatMapIntPassthruSync      1000000        17,016        4,609       15,445        4,289\r\nflatMapTwoNestedSync              1   1809099,547   314275,657  1074829,348   214620,187\r\nflatMapTwoNestedSync           1000      8908,864     1665,210    12105,668     4147,721\r\nflatMapTwoNestedSync        1000000         8,553        4,492       13,661        3,763\r\nmerge1SyncStreamOfN               1   2073223,271   624706,196  1340920,111   321874,624\r\nmerge1SyncStreamOfN            1000     15583,667     5675,705    24295,187      741,011\r\nmerge1SyncStreamOfN         1000000        16,086        3,177       30,617       14,407\r\nmergeNAsyncStreamsOfN             1     53251,280     1821,052    77537,033    63762,352\r\nmergeNAsyncStreamsOfN          1000         6,258        2,367        7,633        4,073\r\nmergeNSyncStreamsOf1              1   1814390,194   250905,669  1221128,575   523755,940\r\nmergeNSyncStreamsOf1            100    221860,250    69297,969   149696,874    13363,647\r\nmergeNSyncStreamsOf1           1000     20576,165     2416,898    16998,408     2414,499\r\nmergeNSyncStreamsOfN              1   2076685,785   558323,104  1382133,163   931994,488\r\nmergeNSyncStreamsOfN           1000        16,458        3,175       28,144       15,014\r\nmergeTwoAsyncStreamsOfN           1     45570,075     8864,806    62306,327    23355,026\r\nmergeTwoAsyncStreamsOfN        1000      1086,413      260,172     3059,881      554,938\r\noneStreamOfNthatMergesIn1         1   1894495,101   373234,431  1430870,599   883644,992\r\noneStreamOfNthatMergesIn1      1000     18433,963     6341,333    18367,707    12874,644\r\noneStreamOfNthatMergesIn1   1000000        17,750        2,938       17,197        8,896\r\n```'
p3557
aS"@davidmoten  Can't really do because I need to return two values: the remaining request and how many main elements to request."
p3558
aS"i7 4790, Windows 7 x64, Java 8u45:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/7453819/931c834a-f26d-11e4-8a94-459da997a9d2.png)\r\n\r\nI've tried my best to close the gap with size = 1 cases, but couldn't figure out why it is that slower: even if I remove the emitter loop because of the trivial case, it is still 10% slower. Perhaps someone else can spot some unnecessary operation I missed.\r\n"
p3559
aS'Fixed a potential concurrency problem in ```MergeProducer.request()```.'
p3560
aS"@akarnokd I've got this on my list to spend time on ... but it will take several hours to review and some non-trivial time to profile and test, including against our applications. \r\n\r\nThank you very much for pursuing this.\r\n\r\n@davidmoten You mention it's been a thorn in your side. What issues have you been having and are there test cases for them that we can use to assert this fixes them?"
p3561
aS"Hi Ben, I haven't got any problems with merge at the moment but I have considered it a thorn in our side because it's such an important operator and yet the code isn't pretty (and has stuff in there now that is disabled like batching because we couldn't get it to work). It's no doubt suffered through RxJava's evolution and a nice clean fresh start from @akarnokd would be a great contribution.\r\n\r\nIn terms of prettiness, and this might be for @akarnokd to consider in his rewrite, is that there are decisions made in the merge operator about how much to request from each source (the initial and subsequent requests) that I found hard to understand and I suspect would be nice to base on research /perfs or even make customizable. To this end I'd like to see decoupling of this sort of logic into a MergeRequestStrategy class say. I guess my aims would be \r\n\r\n* to be able to customize the requesting behaviour  of the merge operator under backpressure for my use cases to increase performance\r\n* to optimise the RxJava default request behaviour for the most common use cases (I guess we'd take a wild stab at what they are)\r\n\r\n"
p3562
aS'> optimise the RxJava default request behaviour for the most common use cases\r\n\r\nThe choice of 128 for server (and 16 for Android) was made after testing various different settings: https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/internal/util/RxRingBuffer.java#L162\r\n\r\nWhat do you recommend doing differently?\r\n\r\n> to be able to customize the requesting behaviour of the merge operator under backpressure for my use cases to increase performance\r\n\r\nWhat do you want to see done?'
p3563
aS"I think I can simplify what I want having thought about it a little bit. I'm happy with 128 as an initial request   and would like further requests to also be for the same number. "
p3564
aS"> would like further requests to also be for the same number.\r\n\r\nAh, that makes sense. I tried that at one point but couldn't get it to work as it got ridiculously complicated and I never went back to solve it. I definitely would like as well."
p3565
aS'While rewatching old Rx videos, I remembered one can implement flatMap in terms of merge and vice versa. I think if merge was be implemented via flatMap, one could save the allocation cost of the lifted map. Then merge == flatMap(o -> o). Any interest in pursuing this?'
p3566
aS'That should be easy to check.'
p3567
aS'Perf testing on my MacBook Pro show this PR to be very good in most cases, with small hits in single item usage.\r\n\r\n```\r\nBenchmark                                          (size)      Existing            PR    \r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1   4488176.832   3797359.176  -  \r\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000     41297.217     66490.338  ++  \r\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000        38.634        79.525  ++  \r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1    102128.738    108055.722    \r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000         5.216        13.558  +  \r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1   4390861.330   4299418.343    \r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100    471690.468    599665.596  ++  \r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000     52613.616     60820.047  + \r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1   4363837.871   4116988.261  -  \r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000        38.733        65.728  ++  \r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1     80926.413     86795.725  +  \r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000      2183.016      6377.939  ++  \r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1   4622062.299   4015324.624  -  \r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000     38870.489     61401.234  ++  \r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000        36.085        63.094  ++  \r\n\r\n\r\nBenchmark                                          (size)      Existing           PR\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1    361714.683   394960.426 +\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000       368.362      422.990 +\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000         0.331        0.423 +\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync          1   5372884.569  4637892.778 -\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync       1000     38254.799    59231.991 ++\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync    1000000        34.971       59.548 ++\r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync            1   3850581.086  3783613.293 \r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync         1000     20510.271    34840.826 ++\r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync      1000000        19.049       39.653 ++\r\n```'
p3568
aS"I've updated the PR to include some scalar merge optimizations:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8101689/d4cbdfb0-1019-11e5-8c7b-28baf28d1172.png)\r\n\r\nThe biggest overhead reduction is in `flatMapIntPassthruSync:1`. Unfortunately, these changes couldn't help much with the `OperatorMergePerf` tests of size 1."
p3569
aS"I've also tried various inlining:\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8103007/3cd257fa-1025-11e5-8f06-f376345e4a2f.png)\r\n\r\n  - In ScalarMap, I've inlined the mapping over a scalar.\r\n  - In InlineMap, I've changed the code to calculate `func` in map at construction time for a scalar source (which is incorrect if the `func` depends upon the environment as well)\r\n  - In FixedMerge, I've added checks to merge(Iterable) for a 1 element Iterable.\r\n\r\nI measured improvements but either the approach was too special or performance degradation appeared in n > 1 cases."
p3570
aS"Since you're updating this PR, can you rebase it and remove all the unrelated changes that touched whitespace in various files?\r\n\r\nI'm in process of reviewing this code and we'll do a production canary test with our systems at Netflix due to the high impact of these changes."
p3571
aS'Done.'
p3572
aS'Thank you.\r\n\r\n@abersnaze Use https://github.com/benjchristensen/RxJava/tree/merge-rewrite-from-2928 as a clean merge of this PR on top of 1.x to production canary this code.'
p3573
aS"I don't see a change in perf results with the updated code.\r\n\r\n```\r\nBenchmark                                          (size)      Existing            PR        PR Update\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1   4488176.832   3797359.176  -   3793580.516\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000     41297.217     66490.338  ++    67796.814\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000        38.634        79.525  ++       75.695\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1    102128.738    108055.722        94091.453\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000         5.216        13.558  +        13.106\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1   4390861.330   4299418.343      3710019.659\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100    471690.468    599665.596  ++   546427.145\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000     52613.616     60820.047  +     60663.164\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1   4363837.871   4116988.261  -   3865008.834 --\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000        38.733        65.728  ++       61.194\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1     80926.413     86795.725  +     78765.125\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000      2183.016      6377.939  ++     6060.544\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1   4622062.299   4015324.624  -   3935245.004 --\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000     38870.489     61401.234  ++    57938.065\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000        36.085        63.094  ++       58.667\r\n\r\n\r\nBenchmark                                          (size)      Existing           PR        Updated PR\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1    361714.683   394960.426 +      389851.694\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000       368.362      422.990 +         423.083\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000         0.331        0.423 +           0.430\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync          1   5372884.569  4637892.778 -     4672089.981\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync       1000     38254.799    59231.991 ++      60356.703\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync    1000000        34.971       59.548 ++         61.814\r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync            1   3850581.086  3783613.293       3913069.169\r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync         1000     20510.271    34840.826 ++      33852.646\r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync      1000000        19.049       39.653 ++         39.805\r\n```"
p3574
aS"It appears I've accidentally overwritten the scalarMerge optimization with the 3rd try version when I fixed the whitespaces."
p3575
aS"I've readded the optimization: The results on my i7 4770K, Windows 7 x64, JDK8u45 (the one with ~38M was an i7 4790) running 5 iterations of 5 seconds:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8167559/5b9c81c4-139f-11e5-880d-08c451418ae0.png)\r\n\r\nThe drop in `flatMapTwoNestedSync:1` is due to the branch introduced by the optimization. If I change it to use `instanceof`, I get the following picture:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8167862/4f9a85b8-13a1-11e5-9fc1-ba0839623142.png)\r\n\r\n"
p3576
aS'With that change perf looks good across the board:\r\n\r\n```\r\n\r\nBenchmark                                          (size)      Existing            PR       Updated PR\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1   4488176.832   3797359.176  -   4159885.024 (variability within Score Error)\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000     41297.217     66490.338  ++    68923.081 ++\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000        38.634        79.525  ++       81.282 ++\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1    102128.738    108055.722       106696.532\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000         5.216        13.558  +        13.258 +\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1   4390861.330   4299418.343      3989522.580 (variability within Score Error)\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100    471690.468    599665.596  ++   551513.541 ++\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000     52613.616     60820.047  +     59881.347 +\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1   4363837.871   4116988.261  -   3894283.923 (variability within Score Error)\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000        38.733        65.728  ++       58.229 ++\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1     80926.413     86795.725  +     87696.276 +\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000      2183.016      6377.939  ++     6114.703 ++\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1   4622062.299   4015324.624  -   3858413.960 (variability within Score Error)\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000     38870.489     61401.234  ++    60379.171 ++\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000        36.085        63.094  ++       60.046 ++\r\n\r\n\r\nBenchmark                                          (size)      Existing           PR       Updated PR  \r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1    361714.683   394960.426 +     445826.696 ++\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000       368.362      422.990 +        430.198 + \r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000         0.331        0.423 +          0.426 + \r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync          1   5372884.569  4637892.778 -   27905012.198 +++ \r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync       1000     38254.799    59231.991 ++     59401.089 ++ \r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruSync    1000000        34.971       59.548 ++        59.818 ++ \r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync            1   3850581.086  3783613.293      3673091.400  \r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync         1000     20510.271    34840.826 ++     32466.541 ++ \r\nr.o.OperatorFlatMapPerf.flatMapTwoNestedSync      1000000        19.049       39.653 ++        36.963 ++ \r\n```'
p3577
aS"The problem with these:\r\n```\r\nBenchmark                                          (size)      Existing            PR       Updated PR\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1   4488176.832   3797359.176  -   4159885.024 (variability within Score Error)\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1   4390861.330   4299418.343      3989522.580 (variability within Score Error)\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1   4363837.871   4116988.261  -   3894283.923 (variability within Score Error)\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1   4622062.299   4015324.624  -   3858413.960 (variability within Score Error)\r\n```\r\n\r\nIs that the scalar merge optimization can't apply because they are:\r\n`merge(just(1).map(v -> just(1)))` so the merge() receives an arbitrary Observable instead of a scalar; the map() hides the first just's scalar nature."
p3578
aS"I finally spent the hours to review this thoroughly ... very well written code @akarnokd \r\n\r\nI'm going to now add inline comments and questions on the code. Most are clarifications, though there is at least one bug I think I found. "
p3579
aS'Pulling comments on optimization into the main comments rather than the diffs which are getting hidden as code changes.\r\n\r\nModified comment from https://github.com/ReactiveX/RxJava/pull/2928#discussion_r32748363:\r\n\r\n----------------\r\n\r\nThe downstream requesting unbounded data does not necessarily mean unbounded up. The `merge` operator is an async operator, just like `zip` and `observeOn` since it does queueing. This means the `merge` operator itself IS an async operator and thus has buffered, `request(n)` semantics regardless of whether the downstream requests `Long.MAX_VALUE` or not.\r\n\r\nThe only cases I\'m aware of where it doesn\'t need to buffer are the following where no concurrent emission occurs:\r\n\r\n1) When `merge` has only a single stream to merge (not a real merge, so not an interesting case)\r\n2) When `maxConcurrent==1` which is the same as `concat` or effectively the same as usecase 1 above.\r\n3) When each Observable being merged is synchronous, which can\'t be known by `merge` ahead of time. In this case it again behaves like `concat`. \r\n\r\nSince (3) is the common case to optimize for (ie. many short synchronous streams), we would have to determine this at runtime. Basically we assume that if we never have `missed` occur due to concurrent emission, we stay on the "fast path", but as soon as we see concurrency occur we have to use queues.\r\n\r\nThis is why the current implementation has an optimization to skip the queues: https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/internal/operators/OperatorMerge.java#L612 and https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/internal/operators/OperatorMerge.java#L686\r\n\r\nBut it uses the queues as soon as concurrent emissions happen.\r\n\r\nSo we can\'t have an unbounded buffer as an optimization, but we can try to skip use of the buffer when we don\'t have concurrent emissions. As soon as we have concurrent emissions though we must use the buffer. And we must maintain `request(n)` semantics. \r\n\r\n'
p3580
aS'Okay. I\'ll remove the unbounded paths and add a fast-path to the InnerSubscribers.\r\n\r\nHowever, I found a few cases that needs further decisions:\r\n\r\nIn `OperatorMergeDelayErrorTest.testErrorDelayed1` expects the source to emit "six" which doesn\'t happen in the normal path of this PR because I shut the source down. The test indicates the original merge allowed value emissions after error from the same source.\r\n\r\nIn the same test class in `testMergeSourceWhichDoesntPropagateExceptionBack` if the child subscriber\'s onNext throws, why do we want to keep emitting the subsequent values if delayErrors == true? If the child crashed while trying to work with the value why do we think the next value won\'t crash it or find it in an inconsistent state?\r\n\r\nThe `OperatorFlatMapPerf.flatMapIntPassthruAsync` has a logical error. It runs an async observation but doesn\'t wait for the completion of it. Basically it floods the system with scheduled tasks. If I add a latched observer, I get ~ 200k ops/s with both 1.x and this PR.'
p3581
aS'> I\'ll remove the unbounded paths and add a fast-path to the InnerSubscribers.\r\n\r\nThank you.\r\n\r\n> The test indicates the original merge allowed value emissions after error from the same source.\r\n\r\nThat sounds wrong. A given `Observable` can\'t emit after an `onError` so that test would be invalid. \r\n\r\n> If the child crashed while trying to work with the value why do we think the next value won\'t crash it or find it in an inconsistent state?\r\n\r\nThat\'s a hard one. I can see your point, but `mergeDelayError` asks to "delay errors", so we delay them. If we change that behavior we will almost certainly break usage. This unit test came from user requirements for `mergeDelayError`.\r\n\r\n> The OperatorFlatMapPerf.flatMapIntPassthruAsync has a logical error\r\n\r\nThen let\'s fix it in 1.x and rebase this PR on top so we are comparing the right metrics.\r\n'
p3582
aS"> Then let's fix it in 1.x\r\n\r\nI'm busy with the changes to this PR. Could you do this?"
p3583
aS'> Could you do this?\r\n\r\nSure.'
p3584
aS'Well, my first try is mostly a disaster:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8239035/a7196aa2-15f9-11e5-8d89-ab9b2abf646b.png)\r\n'
p3585
aS':-)'
p3586
aS"I did recover most of the performance, but still some cases lag behind:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8241049/2cb463c6-1607-11e5-82c7-486e76617302.png)\r\n\r\nI managed this by adding a batching request to the InnerSubscriber (same logic as in #3030). I think the remaining performance loss is due to requesting from the main source one by one, but I'm not sure if I want to batch those as well because the maxConcurrent nature. The duplicate tryEmit is due to avoid a bimorphic dispatch: if I implement a common base class, I lose ~5% from the throughput values.\r\n\r\nI'm finished for today but I'll try to get back to the 1.x performance in the remaining clases."
p3587
aS"It seems the merge is quite sensitive to method structuring: just by refactoring the scalar emission path I got some notable performance back, but still, the single-value merge are a bit slower than 1.x. I think, however, that the green improvements are quite worth it.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8254716/f793a302-169a-11e5-951f-9e421a3afc1a.png)\r\n\r\nThese are the two 1000 sized tests with their error range:\r\n```\r\n   flatMapIntPassthruSync       1000  thrpt         5    53754,733     4624,880    ops/s\r\noneStreamOfNthatMergesIn1      1000  thrpt         5    55004,627      772,675    ops/s\r\n```\r\nThey never got closer to the 1.x line. At one point, I changed merge() to assume MAX_VALUE requests all the time but it didn't affect the number and I have no idea where the performance leaks. They both merge 1000 scalar values which don't touch any queue, don't account the production and just request another value before they return."
p3588
aS'Nothing stands out when I do a Flight Recorder profiling ... reviewing code changes.'
p3589
aS"@akarnokd Do the new unit tests in this PR cover the things that were broken in the current merge impl? If not, what other use cases are broken today that this fixes?\r\n\r\nNote that I'm still digging into this revised code and exploring various perf tests."
p3590
aS'Yes, there was a potential hang when merging only scalar values and when merging a mixture of scalar and non-scalar values.'
p3591
aS'Were you ever able to reproduce that with a unit test? Do you have that code?'
p3592
aS"They are the 'flatMapRangeMixedAsyncLoop' and 'testFastMergeFullScalar' tests."
p3593
aS"I did another pass on this and think it's good for merging and building a snapshot for a few days of final testing before release.\r\n\r\nI still question the subscribe/unsafeSubscribe thing above, but can discuss that further."
p3594
aS'> I still question the subscribe/unsafeSubscribe thing above, but can discuss that further.\r\n\r\nThat was a simple oversight, it was already fixed before you merged this.'
p3595
asg14
S'akarnokd:OperatorMergeFullRewrite'
p3596
sbsI2929
(iPull
Pull
p3597
(dp3598
g3
S'This is a fix for a race condition in `OperatorObserveOn` where if thread A gets to L164 and thread B starts the pollQueue loop then it will act as if the stream had completed normally instead of with an error. \r\n\r\nThe effect is that a stream could appear to complete normally when in fact an error had occurred.\r\n\r\nUsing two boolean volatiles `completed` and `failed` that as a pair were not atomically updated/read exposed us to this race condition. \r\n\r\nThe fix is to use a single volatile integer `status` to represent the  states ACTIVE, COMPLETED, ERRORED to replace `completed` and `failed`.\r\n\r\n\r\n'
p3599
sg5
S'OperatorObserveOn onComplete can be emitted despite onError being called'
p3600
sg7
(lp3601
S'Bug'
p3602
aS'Enhancement'
p3603
asg10
I2929
sg11
(lp3604
S"seeing as I don't use AtomicInteger methods on `status` I may as well just use a byte to store these. I'll update the PR"
p3605
aS"I expect also that the lines below in `onCompleted` and `onError` methods are not required because those methods will not be run at the same time and the methods are not reentrant (I hope that's the right term):\r\n\r\n```java\r\n if (error != null) {\r\n    return;\r\n }\r\n```\r\n\r\nI'll remove them in an update to the PR now"
p3606
aS"Nice catch, but you don't need to introduce that state variable. Remove ```failure``` and make ```error``` volatile. In the ```pollQueue```, if ```completed``` is true, read error and if it is nonnull, report it and return. Otherwise, check if queue is empty and if so, send onComplete(). I'm not sure about why there is the ```requested == 0``` because, I think, it will just make the loop spin until the request value reaches zero by the getAndDecrement below it.\r\n"
p3607
aS"Ok I'll have a look at that. I agree that the `pollQueue` logic is weird and needs review. I wanted to leave it basically untouched to just review the race condition fix."
p3608
aS"Righto, I've run with your suggestion. I also removed the `requested == 0` check because it seems pointless. Apart from that the logic is equivalent. I'm not very keen on the second `if (finished)` block, I'd prefer it to loop around again but might be slightly more performant.\r\n\r\nBy the way I renamed `completed` to `finished` so it could carry the sense of either `onComplete` or `onError`. If that is inconsistent with naming elsewhere I can change it back."
p3609
aS'Looks good. Could you do a perf comparison?'
p3610
aS'Sure'
p3611
aS"Benchmarks improved a few percent in general:\r\n\r\n```\r\n1.x branch:\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    70535.751    15423.954    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    10852.111     3038.402    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       29.313        3.500    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5  8477545.925   290748.417    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   130930.008     8774.301    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      119.666        2.875    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     9045.354     1739.331    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     5090.723      359.544    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       27.364        1.785    ops/s\r\n\r\nobserve-on-race branch:\r\n\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    73963.037    20044.651    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    11155.981     7426.208    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       29.820        1.742    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5  9136674.653   428898.037    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   136164.981     3340.247    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      119.388        2.231    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     8476.745     1586.126    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     5129.316      586.046    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       31.284        2.868    ops/s\r\n```\r\n\r\nRan using \r\n\r\n`./gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 1 .*OperatorObserveOn.*'`\r\n"
p3612
aS"I'll just fix a comment and I don't think `onNext` needs to check `finished`. Might rerun perfs after that change."
p3613
aS"The variability in perfs is pretty large. I'll run the full benchmarks and report back on those."
p3614
aS'i usually run observeOn perf with -r 5 .'
p3615
aS"Thanks, I used \r\n\r\n```\r\n./gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 5 .*OperatorObserveOn.*'\r\n```\r\n\r\nI'd call it a draw:\r\n\r\n```\r\n1.x branch:\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    79456.426    36108.380    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    11094.927     2290.069    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       28.735        3.461    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5  8387544.528   589105.152    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   134932.398     3153.000    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      118.703       13.585    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     8418.924      423.795    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     4879.297      213.291    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       29.267        0.362    ops/s\r\n\r\nobserve-on-race branch:\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    71650.362     7807.887    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5    10936.904     1868.829    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5       29.325        2.208    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5  8297987.180   437741.592    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5   135453.628     2471.897    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5      121.683       12.504    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     9304.443      381.064    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     4957.975     1897.498    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5       27.492        0.897    ops/s\r\n```"
p3616
aS'I think the main cause of the fluctuation is the thread hopping of the emission of the source. If it hops to the observation thread, that is less traffic I guess. If you have time, you could modify the perf by adding subscribeOn which guarantees there is alway a thread boundary crossed.'
p3617
aS'I added `subscribeOn(computation())` (did you want modified perfs or extra perfs?) to the existing `ObserveOn` perfs on 1.x and observe-on-race branches and these are the results:\r\n\r\n```\r\n1.x branch:\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    39023.468    10714.207    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     5815.699      607.484    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        8.863        0.779    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5    73664.638    15363.977    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5    28392.278     2229.074    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5       75.900        9.994    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     9634.822     5069.338    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     5222.449     2559.225    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5        8.931        1.078    ops/s\r\n\r\nobserve-on-race branch:\r\n\r\nBenchmark                                         (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation         1  thrpt         5    35758.208     2014.403    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation      1000  thrpt         5     5797.158      455.773    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation   1000000  thrpt         5        9.390        0.509    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate           1  thrpt         5    73051.368     5076.367    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate        1000  thrpt         5    20619.434     3587.966    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate     1000000  thrpt         5       77.932        6.377    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread           1  thrpt         5     9311.025      542.003    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread        1000  thrpt         5     3754.341      271.638    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread     1000000  thrpt         5        9.473        0.219    ops/s\r\n```'
p3618
aS'Extra perfs so they can be compared with the old anytime.'
p3619
aS'Righto, here are the perfs including new onSubscribe ones:\r\n\r\n```\r\n1.x branch:\r\n\r\nBenchmark                                                                (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation                                1  thrpt         5    70251.688     8961.723    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                             1000  thrpt         5     9280.779     8214.742    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                          1000000  thrpt         5       28.990        3.447    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation         1  thrpt         5    36056.035     2511.357    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation      1000  thrpt         5     5677.334      735.949    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation   1000000  thrpt         5        9.674        0.382    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                                  1  thrpt         5  8480014.275   172973.770    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                               1000  thrpt         5   135104.525     1579.495    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                            1000000  thrpt         5      122.858       13.194    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation           1  thrpt         5    72785.494     2701.185    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation        1000  thrpt         5    19612.208     4703.085    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation     1000000  thrpt         5       73.333       13.677    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                                  1  thrpt         5     9007.205      571.124    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                               1000  thrpt         5     5971.174      192.781    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                            1000000  thrpt         5       31.180        1.258    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation           1  thrpt         5     9540.089      363.964    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation        1000  thrpt         5     3790.601      188.191    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation     1000000  thrpt         5       10.008        0.328    ops/s\r\n\r\nobserve-on-race branch:\r\n\r\nBenchmark                                                                (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation                                1  thrpt         5    39214.570   158345.016    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                             1000  thrpt         5    10669.899     1337.330    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                          1000000  thrpt         5       29.230        1.805    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation         1  thrpt         5    36179.648     6840.388    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation      1000  thrpt         5     5844.341      185.774    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation   1000000  thrpt         5        9.566        0.294    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                                  1  thrpt         5  8283063.707   317079.693    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                               1000  thrpt         5   134060.544     5573.792    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                            1000000  thrpt         5      120.713       15.779    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation           1  thrpt         5   106156.191    43942.564    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation        1000  thrpt         5    27984.472     3232.294    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation     1000000  thrpt         5       76.865        8.196    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                                  1  thrpt         5     8890.780     1062.994    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                               1000  thrpt         5     5024.608      180.168    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                            1000000  thrpt         5       32.990        2.758    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation           1  thrpt         5     9114.271      314.387    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation        1000  thrpt         5     4271.852      977.703    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation     1000000  thrpt         5        9.647        0.831    ops/s\r\n```'
p3620
aS"@akarnokd I can maybe get a few percent improvement in most of the benchmarks by touching the volatile `requested` less in the loop but I'm thinking I should make a new PR out of that if we are happy with the correctness and performance of the current PR.\r\n\r\n```\r\nobserve-on-race branch:\r\n\r\nBenchmark                                                                (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation                                1  thrpt         5    39214.570   158345.016    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                             1000  thrpt         5    10669.899     1337.330    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                          1000000  thrpt         5       29.230        1.805    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation         1  thrpt         5    36179.648     6840.388    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation      1000  thrpt         5     5844.341      185.774    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation   1000000  thrpt         5        9.566        0.294    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                                  1  thrpt         5  8283063.707   317079.693    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                               1000  thrpt         5   134060.544     5573.792    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                            1000000  thrpt         5      120.713       15.779    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation           1  thrpt         5   106156.191    43942.564    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation        1000  thrpt         5    27984.472     3232.294    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation     1000000  thrpt         5       76.865        8.196    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                                  1  thrpt         5     8890.780     1062.994    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                               1000  thrpt         5     5024.608      180.168    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                            1000000  thrpt         5       32.990        2.758    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation           1  thrpt         5     9114.271      314.387    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation        1000  thrpt         5     4271.852      977.703    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation     1000000  thrpt         5        9.647        0.831    ops/s\r\n\r\nobserve-on-race branch, touch requested less:\r\n\r\nBenchmark                                                                (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorObserveOnPerf.observeOnComputation                                1  thrpt         5    72839.461    11872.361    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                             1000  thrpt         5    10953.971     3684.071    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputation                          1000000  thrpt         5       30.553        1.772    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation         1  thrpt         5    34296.824     2049.160    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation      1000  thrpt         5     6084.331      577.669    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnComputationSubscribedOnComputation   1000000  thrpt         5       10.296        0.272    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                                  1  thrpt         5  8622340.209    78646.722    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                               1000  thrpt         5   136452.092     3432.061    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediate                            1000000  thrpt         5      122.923       15.274    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation           1  thrpt         5    72631.043     3254.035    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation        1000  thrpt         5    27904.731     5882.644    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnImmediateSubscribedOnComputation     1000000  thrpt         5       79.129        7.015    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                                  1  thrpt         5     8623.913      898.953    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                               1000  thrpt         5     5256.389      197.299    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThread                            1000000  thrpt         5       33.302        1.333    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation           1  thrpt         5     9287.645      468.941    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation        1000  thrpt         5     3916.492      176.669    ops/s\r\nr.o.OperatorObserveOnPerf.observeOnNewThreadSubscribedOnComputation     1000000  thrpt         5       10.401        0.743    ops/s\r\n```"
p3621
aS'Almost good and the performance is mostly okay:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/7449353/c979a514-f234-11e4-8a5b-68cb9c9661bf.png)\r\n'
p3622
aS"Don't need to update the perfs because the error path not taken. Are you happy with perfs as they are or would you like to add testing of the error path?"
p3623
aS"I'm happy with the perf."
p3624
aS"Looks good to me, but I'd like to invite @benjchristensen to review it as well."
p3625
aS'@akarnokd Seeing as error bypasses the queue do you think I should add `queue.clear()` just before calling `child.onError()` so that the entries in the queue can be garbage collected?'
p3626
aS'In fact could clear the queue in `onError` method so that gc can happen before next scheduled `pollQueue`.'
p3627
aS'That would break the queue. Instead, clear the queue on the pollQueue side before emitting onError.'
p3628
aS'PR updated with clearing the queue on the pollQueue side before emitting onError.'
p3629
aS"I've got this on my list to review."
p3630
aS'One more race condition. We need to increment `requested` with care because if is Long.MAX_VALUE and gets decremented then a request for one comes in (which uses BackpressureUtils to take us back up to Long.MAX_VALUE) then the increment on request happens and overflows. Fix is to use BackpresureUtils to increment.'
p3631
aS'I never understood why it does that many request updates. Here is a simpler version:\r\n```java\r\nint emitted = 0;\r\ndo {\r\n    counter = 1;\r\n    long produced = 0;\r\n    long r = requested;\r\n    while (!child.isUnsubscribed()) {\r\n        Throwable error;\r\n        if (completed) {\r\n            if ((error = this.error) != null) {\r\n                child.onError(error);\r\n                return;\r\n            } else\r\n            if (queue.isEmpty()) {\r\n                child.onCompleted();\r\n                return;\r\n            }\r\n        }\r\n        if (r > 0) {\r\n            Object o = queue.poll();\r\n            if (o != null) {\r\n                child.onNext(on.getValue(o));\r\n                r--;\r\n                emitted++;\r\n                produced++;\r\n            } else {\r\n                break;\r\n            }\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    if (produced > 0) {\r\n        REQUESTED.addAndGet(this, -produced);\r\n    }\r\n} while (COUNTER_UPDATER.decrementAndGet(this) > 0);\r\nif (emitted > 0) {\r\n    request(emitted);\r\n}\r\n```'
p3632
aS'Pada 01/05/2015 8:53 AM, "Dave Moten" <notifications@github.com> menulis:\n>\n> seeing as I don\'t use AtomicInteger methods on status I may as well just\nuse a byte to store these. I\'ll update the PR\n>\n> --\n> Reply to this email directly or view it on GitHub.\n'
p3633
aS"I've updated the PR with the new `pollQueue` implementation from @akarnokd and added the `queue.clear()` before calling `child.onError()`."
p3634
aS'Rebased into 2 commits'
p3635
aS"@akarnokd I was thinking of changing the last lines in the `pollQueue()` method from \r\n```java\r\nif (emitted > 0)\r\n    request(emitted);\r\n```\r\nto \r\n```java\r\nif (emitted > 0) {\r\n    request(Math.min(RxRingBuffer.SIZE - queue.size(), emitted));\r\n}\r\n```\r\nThis was just to reduce the probability of an overflow of the RingBuffer. I haven't seen it happen but it looks to me that it is possible for `emitted` to reach any value you like and we may as well be defensive about it."
p3636
aS'In `pollQueue` we should only reduce `requested` by `produced` if it is not already at `Long.MAX_VALUE`'
p3637
aS"There is no need for that because the queue is bounded and you'd produce up to the capacity and request only replacements after. Even though the downstream requests more, it isn't directly translated to requests for upstream.\r\n\r\nFor example, imagine the queue is full and there are plenty requests available. Now the inner loop can drain the queue completely and exit when it becomes empty. Since the upstream honors backpressure, there won't be any new enqueueing of values during this time and you get ```emitting``` to equal to the queue capacity."
p3638
aS'> I never understood why it does that many request updates\r\n\r\nI think that\'s my fault. I had a version that did batching at one point but it was buggy so I got it "working" and left that for later optimization. It is far better if we can request in batches.'
p3639
aS"Ah, wrong `request` piece. I thought it was about batching of requests, which this still doesn't fully do.\r\n\r\nChanges look good. "
p3640
asg14
S'davidmoten:observe-on-race'
p3641
sbsI2930
(iPull
Pull
p3642
(dp3643
g3
S"While searching for the cause of #2863 I bumped into this race condition (which doesn't fix #2863):\r\n\r\nIf a request is made between L238 and L239 then `consumerCapacity` may become `Long.MAX_VALUE` on arriving at L239 in which case we don't wish to decrement it. To fix, used `compareAndSet`.\r\n\r\nWhat is interesting about this fix is that in the test loop of 5000 in `OperatorRetryTest` I see many more occurrences of the failure on average (3 -> 50) presumably because the extra time to perform the  `compareAndSet` action has expanded the window for the race condition causing the failures."
p3644
sg5
S'OnSubscribeRedo - fix race conditions'
p3645
sg7
(lp3646
S'Bug'
p3647
asg10
I2930
sg11
(lp3648
S"Awesome, for once I'm happy to see a CI failure! Tilll now #2863  hasn't been repeatable except on my laptop but now has reappeared in the Travis build."
p3649
aS'If I put in this, I get the missing emission problem:\r\n```java\r\nlong cc = consumerCapacity.get();\r\nif (cc < Long.MAX_VALUE) {\r\n    consumerCapacity.compareAndSet(cc, cc - 1);\r\n}\r\n\r\nif (rnd.nextDouble() < 0.25) {\r\n    try {\r\n        Thread.sleep(1);\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n}\r\n\r\nchild.onNext(v);\r\n```\r\n\r\nIf I swap the operations, the test passes for me again.\r\n\r\nCould you also update the helper method in the test?\r\n\r\n```java\r\nstatic <T> StringBuilder sequenceFrequency(Iterable<T> it) {\r\n        StringBuilder sb = new StringBuilder();\r\n        \r\n        Object prev = null;\r\n        int cnt = 0;\r\n        \r\n        for (Object curr : it) {\r\n            if (sb.length() > 0) {\r\n                if (!curr.equals(prev)) {\r\n                    if (cnt > 1) {\r\n                        sb.append(" x ").append(cnt);\r\n                        cnt = 1;\r\n                    }\r\n                    sb.append(", ");\r\n                    sb.append(curr);\r\n                } else {\r\n                    cnt++;\r\n                }\r\n            } else {\r\n                sb.append(curr);\r\n                cnt++;\r\n            }\r\n            prev = curr;\r\n        }\r\n        if (cnt > 1) {\r\n            sb.append(" x ").append(cnt);\r\n        }\r\n        \r\n        return sb;\r\n    }\r\n```'
p3650
aS"@akarnokd while you were putting your last comment up I synchronized the reads and writes of consumerCapacity as in the attached commit and the failures have stopped. Doesn't explain it yet but seems like consumerCapacity is important to this.\r\n\r\nI'll add your changes and revert the synchronization once you've had a quick look."
p3651
aS"I thought as much given our previous conversations and figured that if this is the solution you'd have suggestions for doing it properly. Anyway probably need to figure out the why still I suppose."
p3652
aS"I'm confused by this `resumeBoundary` business, I hope you fare better, off to bed for me."
p3653
aS"I've committed the CAS loop. We can drop it as an optimization later based on perfs if we want or of course now if you think"
p3654
aS"Can you devise a benchmark that checks the throughput on a non-throwing source?\r\n\r\nIf I remember correctly, the resumeBoundary is there because an exception can happen just after the capacity reached zero but we don't immediately resubscribe until an actual request comes in."
p3655
aS"I've added some more comments to the code as my understanding improves. I also have marked three places with //TODO, two of which I think are potential race conditions and the third is just a marker for some of the usual optimizations done in the `request`. \r\n\r\nAnother addition in the last commit is a check to ensure that the `consumerCapacity` decrement doesn't go below zero which now provokes a `MissingBackpressureException`.\r\n\r\nI'm sure @akarnokd will have the red pen out on this stuff then if any of the race conditions stand scrutiny I'll fix them."
p3656
aS"unrelated test failure `OperatorPublishTest.testObserveOn`. I've raised #2933.\r\n"
p3657
aS"I've ruled out one race condition (and left comments explaining why all is ok)"
p3658
aS"I'd say if the change makes your test failure go away, that should be enough for now. I'd defer the full rewrite to 2.0."
p3659
aS"Righto, I'll concentrate on the fix for the #2863 test failure.  Part of that is probably ruling out surprises like decrementing `consumerCapacity` when it is already 0. My approach in that was to throw a `MissingBackpressureException` because in backpressure mode an operator should not emit more than requested. I would be concerned that this might appear as a breaking change to some though because previously it happily passed them through (with who knows what consequences in the operator). A compromise might be to not decrement when 0 but also not emit an error and then revisit this part of the contract in 2.0. Which way do you think we should go?"
p3660
aS"Hmm I just realized that if not emitting MissingBackpressureException then I should decrement otherwise the accounting is stuffed when more requests come through. I'll avoid the MissingBackpressureException for now but it should probably be part of some future milestone (2.0?)."
p3661
aS"Sorry to say, no progress made. I've protected all reads and writes to `currentProducer` and `consumerCapacity` by a single guard object (without holding a lock on emission or on request or on `worker.schedule` which could be run synchronously using `Schedulers.immediate()` or `Schedulers.trampoline()`) and still get the `OperatorRetryTest.testRetryWithBackpressureParallel` failure on my laptop. I give up for the moment. I'm leaning towards there being something fundamentally wrong that will probably only be fixed by a rewrite."
p3662
aS"I've pared this PR right down (after the unsuccessful hunt for the cause of #2863) so that it addresses just the race conditions that I can see and can confirm.\r\n\r\nThe changes are:\r\n\r\n* The original code to decrement `consumerCapacity` had a race condition, now we use a CAS loop to update\r\n* the `c == 0` check at [L342](https://github.com/ReactiveX/RxJava/blob/0a6e26de73c3707dbd9903c166b7be0f6499b6b7/src/main/java/rx/internal/operators/OnSubscribeRedo.java#L342) can cause a stall in the stream because if `request` gets called just before [L320](https://github.com/ReactiveX/RxJava/blob/0a6e26de73c3707dbd9903c166b7be0f6499b6b7/src/main/java/rx/internal/operators/OnSubscribeRedo.java#L320) then no restart will occur in that call and it is possible that no further calls to request will be made after L320 has been performed (a common pattern is a request followed by another request only once emissions have occurred).\r\n* update `sequenceFrequency` helper method in the test as per @akarnokd  request\r\n\r\n#2863 is NOT fixed by these changes."
p3663
aS"I applied some random sleep around the resumeBoundary and these changes worked for me (on top of your changes):\r\nIn the method with the locked check:\r\n```java\r\nif (!isLocked.get() && !child.isUnsubscribed()) {\r\n    if (consumerCapacity.get() > 0) {\r\n        worker.schedule(subscribeToSource);\r\n    }\r\n}\r\n```\r\nand in the child's producer:\r\n```java\r\nlong c = BackpressureUtils.getAndAddRequest(consumerCapacity, n);\r\nProducer producer = currentProducer.get();\r\nif (producer != null) {\r\n    producer.request(n);\r\n} else\r\nif (c == 0) {\r\n    worker.schedule(subscribeToSource);\r\n}\r\n```\r\n\r\nSo if there is capacity available, the source will be restarted. If there is no capacity remaining, the first 0 -> n transition will restart the source."
p3664
aS"I'll try it out, thanks! I'll also include a `n>0` check in the producer so that calls of request(0) are no-ops."
p3665
aS'Nice simplification. Still getting `testRetryWithBackpressureParallel` failure on my laptop (first time).'
p3666
aS'3 out of 3 failures on laptop, 1 out of 25 failures on fast desktop running all tests in `OperatorRetryTest`. I just run this in a loop:\r\n\r\n`./gradlew -q   -Dtest.single=OperatorRetry cleanTest test`\r\n'
p3667
aS'Apparently, the ```resumeBoundary``` served to prevent unwanted resubscription.\r\nOne final try:\r\nwrap the above places into ```synchronized (consumerCapacity)``` plus the contents of ```terminalDelegatingSubscriber.setProducer``` and see if it still fails. If not, start moving out operations from this synchronized block and see which one triggers the failure.\r\n\r\nEdit: forgot to mention: readd resumeBoundary as well.'
p3668
aS'This is as far as I got. No failures when everything in the synch blocks.  Then started moving out the baddies for synchronization being calls to `producer.request` and `worker.schedule` (because could be a synchronous worker). Everything ok till I pulled `worker.schedule` out of `onNext` synch block. \r\n\r\n```java\r\n                    @Override\r\n                    public void onNext(Object t) {\r\n                        if (!isLocked.get() && !child.isUnsubscribed()) {\r\n                            final boolean scheduleNow;\r\n                            synchronized (consumerCapacity) {\r\n                                if (consumerCapacity.get() > 0) {\r\n                                    scheduleNow = true;\r\n                                } else {\r\n                                    scheduleNow = false;\r\n                                    resumeBoundary.compareAndSet(false, true);\r\n                                }\r\n                            }\r\n                            if (scheduleNow)\r\n                                worker.schedule(subscribeToSource);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void setProducer(Producer producer) {\r\n                        producer.request(Long.MAX_VALUE);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        child.setProducer(new Producer() {\r\n\r\n            @Override\r\n            public void request(final long n) {\r\n                final Producer producer;\r\n                final boolean requestNow;\r\n                final boolean scheduleNow;\r\n                synchronized (consumerCapacity) {\r\n                    BackpressureUtils.getAndAddRequest(consumerCapacity, n);\r\n                    producer = currentProducer.get();\r\n                    if (producer != null) {\r\n                        requestNow = true;\r\n                        scheduleNow = false;\r\n                    } else {\r\n                        requestNow = false;\r\n                        scheduleNow = resumeBoundary.compareAndSet(true, false);\r\n                    }\r\n                }\r\n                if (requestNow)\r\n                    producer.request(n);\r\n                else if (scheduleNow)\r\n                    worker.schedule(subscribeToSource);\r\n            }\r\n        })\r\n```\r\n\r\n\r\n'
p3669
aS'When the test fails, how many elements are missing from the output. Does it print beginningEveryTime x 256 ?'
p3670
aS'Yep:\r\n\r\n`java.lang.AssertionError: Data content mismatch: 2315={beginningEveryTime x 256}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:763)\r\n`'
p3671
aS"I'm rewriting just the retry(n) variant and see if there is a general logical error with request accounting or just the OnSubscribeRedo has problems."
p3672
aS'[Here is a retry implementation](https://gist.github.com/akarnokd/3b110055414a44d320b9) that serializes out the changing of producers and accounting the capacity. Could you try this implementation?\r\n(Dont forget to change both factory methods in OnSubscribeRedo:\r\n```java\r\n    public static <T> Observable<T> retry(Observable<T> source) {\r\n//        return retry(source, REDO_INIFINITE);\r\n        return retry(source, Long.MAX_VALUE);\r\n    }\r\n\r\n    public static <T> Observable<T> retry(Observable<T> source, final long count) {\r\n        if (count < 0)\r\n            throw new IllegalArgumentException("count >= 0 expected");\r\n        if (count == 0)\r\n            return source;\r\n//        return retry(source, new RedoFinite(count));\r\n        return create(new OnSubscribeRetry<T>(source, count));\r\n    }\r\n```\r\n**Edit:**\r\n[Here is an alternative](https://gist.github.com/akarnokd/5cb99c6062cea0b23d8b) which doesn\'t use List as the work queue but instead accounts the changes separately and is a bit faster.'
p3673
aS'Cool, thanks. Got this exception:\r\n```\r\nrx.internal.operators.OperatorRetryWithPredicateTest > testJustAndRetry FAILED\r\n    java.util.NoSuchElementException: Sequence contains no elements\r\n        at rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:131)\r\n        at rx.internal.operators.OnSubscribeRetry$1$1.onCompleted(OnSubscribeRetry.java:66)\r\n        at rx.internal.operators.OperatorMap$1.onCompleted(OperatorMap.java:44)\r\n        at rx.internal.util.ScalarSynchronousObservable$1.call(ScalarSynchronousObservable.java:44)\r\n        at rx.internal.util.ScalarSynchronousObservable$1.call(ScalarSynchronousObservable.java:32)\r\n        at rx.Observable$1.call(Observable.java:144)\r\n        at rx.Observable$1.call(Observable.java:136)\r\n        at rx.Observable.unsafeSubscribe(Observable.java:7507)\r\n        at rx.internal.operators.OnSubscribeRetry$1.call(OnSubscribeRetry.java:75)\r\n        at rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:80)\r\n        at rx.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:59)\r\n        at rx.internal.operators.OnSubscribeRetry.call(OnSubscribeRetry.java:86)\r\n        at rx.internal.operators.OnSubscribeRetry.call(OnSubscribeRetry.java:28)\r\n        at rx.Observable$1.call(Observable.java:144)\r\n        at rx.Observable$1.call(Observable.java:136)\r\n        at rx.Observable.subscribe(Observable.java:7597)\r\n        at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:442)\r\n        at rx.observables.BlockingObservable.single(BlockingObservable.java:341)\r\n        at rx.internal.operators.OperatorRetryWithPredicateTest.testJustAndRetry(OperatorRetryWithPredicateTest.java:296)\r\n```\r\n'
p3674
aS'I went a bit light on the safeguards in OnSubscribeRetry (i.e., not bouncing back any exceptions thrown when calling currentProducer.request()). How does the code work with testRetryWithBackpressureParallel?'
p3675
aS"I've [updated the gist](https://gist.github.com/akarnokd/5cb99c6062cea0b23d8b) so it passes the unit tests."
p3676
aS"Good so far. I'll stick the test in a loop for ten minutes or so on the laptop."
p3677
aS'3rd time through:\r\n```\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel FAILED\r\n    java.lang.AssertionError: Data content mismatch: 3628={beginningEveryTime x 256}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:763)\r\n```\r\n'
p3678
aS"For your info I tried using `SynchronizedQueue` instead of `SpscArrayQueue` in `OperatorObserveOn` and got the failure on 30th run on fast desktop (so I'm glad to rule out `SpscArrayQueue` as being the cause):\r\n\r\n```\r\njava.lang.AssertionError: Data content mismatch: 1940={beginningEveryTime x 254}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:763)\r\n```\r\n"
p3679
aS'There is a race in observeOn in main being fixed by #2929 that might attribute to lost onNexts but can\'t be sure from the AssertionError.\r\nThe simple fix for observeOn is to replace\r\n```java\r\nObject o = queue.poll();\r\nif (o == null) {\r\n    if (completed) {\r\n```\r\nwith\r\n```java\r\nboolean c = completed;\r\nObject o = queue.poll();\r\nif (o == null) {\r\n    if (c) {\r\n```\r\n\r\nThis updated test method should print out any additional onCompleted events if they are there:\r\n```java\r\n@Test//(timeout = 15000)\r\npublic void testRetryWithBackpressureParallel() throws InterruptedException {\r\n    final int NUM_RETRIES = RxRingBuffer.SIZE * 2;\r\n    int ncpu = Runtime.getRuntime().availableProcessors();\r\n    ExecutorService exec = Executors.newFixedThreadPool(Math.max(ncpu / 2, 2));\r\n    try {\r\n        for (int r = 0; r < 1000; r++) {\r\n            if (r % 10 == 0) {\r\n                System.out.println("testRetryWithBackpressureParallelLoop -> " + r);\r\n            }\r\n        \r\n            final AtomicInteger timeouts = new AtomicInteger();\r\n            final Map<Integer, List<String>> data = new ConcurrentHashMap<Integer, List<String>>();\r\n            \r\n            int m = 5000;\r\n            final CountDownLatch cdl = new CountDownLatch(m);\r\n            for (int i = 0; i < m; i++) {\r\n                final int j = i;\r\n                exec.execute(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        final AtomicInteger nexts = new AtomicInteger();\r\n                        try {\r\n                            Observable<String> origin = Observable.create(new FuncWithErrors(NUM_RETRIES));\r\n                            TestSubscriber<String> ts = new TestSubscriber<String>();\r\n                            origin.retry()\r\n                            .observeOn(Schedulers.computation()).unsafeSubscribe(ts);\r\n                            ts.awaitTerminalEvent(2500, TimeUnit.MILLISECONDS);\r\n                            \r\n                            List<String> onNextEvents = new ArrayList<String>(ts.getOnNextEvents());\r\n                            List<Throwable> onErrorEvents = new ArrayList<Throwable>(ts.getOnErrorEvents());\r\n                            List<Notification<String>> onCompletedEvents = new ArrayList<Notification<String>>(ts.getOnCompletedEvents());\r\n                            \r\n                            if (onNextEvents.size() != NUM_RETRIES + 2\r\n                                    || !onErrorEvents.isEmpty() || onCompletedEvents.isEmpty()) {\r\n                                for (Throwable t : onErrorEvents) {\r\n                                    onNextEvents.add(t.toString());\r\n                                }\r\n                                for (Object o : onCompletedEvents) {\r\n                                    onNextEvents.add("onCompleted");\r\n                                }\r\n                                data.put(j, onNextEvents);\r\n                            }\r\n                        } catch (Throwable t) {\r\n                            timeouts.incrementAndGet();\r\n                            System.out.println(j + " | " + cdl.getCount() + " !!! " + nexts.get());\r\n                        }\r\n                        cdl.countDown();\r\n                    }\r\n                });\r\n            }\r\n            cdl.await();\r\n            assertEquals(0, timeouts.get());\r\n            if (data.size() > 0) {\r\n                fail("Data content mismatch: " + allSequenceFrequency(data));\r\n            }\r\n        }\r\n    } finally {\r\n        exec.shutdown();\r\n    }\r\n}\r\n```'
p3680
aS"I've added the suggested changes to this commit but should have mentioned that I tried the fixes from #2929 with your OperatorRetry and had no effect (still get failures)."
p3681
aS'What does the failure report as the received events? Could you also check whether replacing the TrampolineScheduler with io scheduler still exhibits the failure?'
p3682
aS'29th run on desktop:\r\n```\r\njava.lang.AssertionError: Data content mismatch: 1828={beginningEveryTime x 109}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:759)\r\n```'
p3683
aS"I'm running the test on a virtualized ubuntu without CPU virtualization support to emulate a slow machine but it is working so far. What are the specs of your machine which fails the test so often?"
p3684
aS'The quick fix for observeOn that you mention above still has the race condition that #2929 was reported on so I might paste in #2929 version of OperatorObserveOn and continue testing with that.'
p3685
aS'Might #2907 have any bearing on this?'
p3686
aS"No, because it is a completely separate scheduler.\r\n\r\nI'm running the test on some real debian linux and I the test fails within the first run:\r\n```\r\n4882={}, 4871={}, 4860={}, 4838={beginningEveryTime x 51}, 4849={}\r\n```"
p3687
aS"David I don't understand the quick fix in OperatorObserveOn you mentioned above. Is that something new to be added to #2929?  Can you explain it if so?"
p3688
aS"Never mind, I didn't notice the queue.isEmpty() check after it."
p3689
aS"I've put in doOnNext() between the operators. In case of a test failure, the emission count after the source and retry() match but are less after observeOn() which makes me think observeOn doesn't pick up the values emitted (and it doesn't request for replacements either)."
p3690
aS"The latest commit including #2929 doesn't fail for me on three different machines including the old laptop. 200 runs on i7, 100 runs on laptop and 200 runs on another i7. Did you use the last commit for the failures on the debian machine?"
p3691
aS"With #2929 the test fails after 15 runs:\r\n\r\nData: \r\n  - 4875={Loops:128, Request:0, B/A:[128, 128, 0, 637676, 0]}, 4842={Loops:128, Request:0, B/A:[128, 128, 0, 664205, 0]}, \r\n  - 4831={beginningEveryTime x 139, Loops:258, Request:10, B/A:[258, 258, 139, 2491693, 1720371]}, \r\n  - 4853={Loops:128, Request:0, B/A:[128, 128, 0, 670982, 0]}, 4864={Loops:128, Request:0, B/A:[128, 128, 0, 664584, 0]}\r\n\r\nWhere B/A means [after source count, after retry count, after observeOn count, latest emission after retry in nanoseconds, latest emission after observeOn in nanoseconds]. Both time values are relative to when the entire stream started.\r\n\r\nI've completely rewritten the emission loop in observeOn but the test still fails on my linux machine. "
p3692
aS"I've increased the timeout and added ```timeInterval``` to the source data and it seems there is a large, seconds-scale hiccup in the stream. Since I'm using SSH, I can't use flight recorder or jvisualvm to see how the threads behave."
p3693
aS"I've lost the ability to induce failures. Tests ran all night without inducing failure. I might try reverting to an earlier version of the test method."
p3694
aS"May as well give the latest commit from here a spin again @akarnokd now that it incorporates the request overflow fix from #2929 I just added. I still can't induce failure so the baton is passed to you!"
p3695
aS'So the observeOn changes + my ProducerArbiter works. Great! Now it would be better to remove OnSubscribeRetry and apply its logic on OnSubscribeRedo directly.'
p3696
aS'I meant you apply the ProducerArbiter and the calls to OnSubscribeRedo.'
p3697
aS"Hmm not quite out of the woods. I've adjusted the code to use `ProducerArbiter` (please look it over) but saw our old friend on  the first run on my i7 desktop which also seemed to lock the machine up for me for a minute. Subsequent runs did not fail (150 runs). The latest commit includes the latest version of `OperatorObserveOn` from #2929.\r\n\r\n```\r\njava.lang.AssertionError: Data content mismatch: 1763={beginningEveryTime x 128, onCompleted}, 1767={beginningEveryTime x 21, onCompleted}, 1756={beginningEveryTime x 10, onCompleted}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:759)\r\n```\r\n\r\n"
p3698
aS'I forgot to mention that the last failure also included a timeout failure of `OperatorRetryTest. testIssue1900`. '
p3699
aS'Can you monitor the test with JVisualVM and see if there are thread stalls or excess GC?'
p3700
aS"Yeah I'll try that. 28th run on laptop gave \r\n```\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel FAILED\r\n    java.lang.AssertionError: Data content mismatch: 3724={onCompleted}, 3720={beginningEveryTime x 17, onCompleted}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:759)\r\n```"
p3701
aS"I can see another race condition in `OnSubscribeRedo`. `restarts` must be subscribed to before the first request subscribes to source. I don't think it affects our current test because the `worker` is synchronous but if it was async we would be exposed to it. To fix this in a non-blocking way would require `terminals` to be a slightly different beast than a `PublishSubject` in that it would buffer events till the first subscriber (there should be only one subscriber for `terminals` though the `notificationHandler` could do something weird in theory) and then play all the buffered events to the subscriber. `ReplaySubject` might help out here but I'm not sure what idiom we could use yet. A custom `Subject` would probably be straightforward to build but I'd like to see what ideas you have @akarnokd.\r\n\r\nI tried a blocking fix for this using a latch just to play with it but as expected still get our normal failure.\r\n\r\nIncidentally I can't seem to break `testRetryWithBackpressureParallel` but just looping it in Eclipse. It only fails looping the gradle command line call. This makes monitoring difficult but I could enable gc logging I suppose.\r\n\r\n"
p3702
aS'I think I have addressed the race condition mentioned in the previous comment. By using a `BehaviorSubject` instead of a `PublishSubject` and subscribing with a dummy subscriber immediately after creating then an emission between subscribing to source and subscribing to `restarts` will be replayed on subscribe to `restarts` so it is not lost.'
p3703
aS'Failed on run 111 on desktop i7:\r\n\r\n```\r\njava.lang.AssertionError: Data content mismatch: 237={beginningEveryTime x 128}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:759)\r\n```'
p3704
aS"The race condition I thought had found was what `isLocked` was to prevent. I'm not sure that ignoring a restart instruction because `isLocked` is true is the way to go so I'm going to remove the `isLocked` checks and retest using only the `BehaviorSubject` logic."
p3705
aS'Three hours without failure on three machines (i7,i7 and i5 laptop). Can you try this commit @akarnokd?'
p3706
aS'Took 5 hours but got failure on laptop only:\r\n```\r\njava.lang.AssertionError: Data content mismatch: 883={beginningEveryTime x 138}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRet\r\n```\r\n\r\nThis is going to make testing difficult!'
p3707
aS'Using jacoco as per #2937 I noticed that the subscriber to `restarts` never completes so never unsubscribes (though `child` does). To achieve this  (and to simplify `OnSubscribeRedo` a little bit) I ensured that all events are routed through to `filteredTerminals` instead of just the `onNext` events.'
p3708
aS"I've added the fix to `ProducerArbiter` to not reduce the request if already `Long.MAX_VALUE`. Before applying this fix I ran the test which failed on run 207 but in this test I confirmed that count upstream of  `observeOn` was same as downstream so I think the problem is not with `OperatorSubscribeOn` anymore. I'll rerun now we have a fix in `ProducerArbiter`."
p3709
aS'The fix to `ProducerArbiter` could help the failure because concurrent requests to `FuncWithErrors` one of `Long.MAX_VALUE` and one of less than `Long.MAX_VALUE` could initiate the fast path and the backpressure path simultaneously. '
p3710
aS'Added more concurrency protection to `FuncWithErrors` to prevent fast path and backpressure path from running concurrently'
p3711
aS'Got this 74th run on laptop:\r\n```\r\norg.mockito.exceptions.verification.VerificationInOrderFailure: \r\nVerification in order failure:\r\nobserver.onNext("beginningEveryTime");\r\nWanted 257 times:\r\n-> at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressure(OperatorRetryTest.java:702)\r\nBut was 240 times:\r\n-> at rx.observers.TestObserver.onNext(TestObserver.java:78)\r\n\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressure(OperatorRetryTest.java:702)\r\n```'
p3712
aS'Added another race condition fix for `FuncWithErrors` that prevents the subscriber `o` being passed more signals after a terminal signal has been sent to it.'
p3713
aS'54th run on desktop:\r\n```\r\njava.lang.AssertionError: Data content mismatch: 2408={beginningEveryTime x 128}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:764)\r\n```\r\n'
p3714
aS'despite last commit, 22nd run on desktop:\r\n```\r\njava.lang.AssertionError: Data content mismatch: 4501={beginningEveryTime x 128}\r\n\tat org.junit.Assert.fail(Assert.java:93)\r\n\tat rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:768)\r\n```'
p3715
aS'Try disabling transparent hugepages.'
p3716
aS'With the purpose of making the test fail more often?'
p3717
aS'In the contrary. Linux transparent hugepages (default: on) is known to introduce latency spikes, maybe so extreme our test times out just by that.'
p3718
aS'The catch is that we have a low probability (for the test as it stands) race condition somewhere. If I make the test fail less often then we lose the ability to find that race condition. Which timeout are you thinking  of? The individual timeouts for the tests are commented out, are there scheduler timeouts?'
p3719
aS"I think there is no race condition but your linux system gets overwhelmed by the test and it simply times out. This is why I suggested looking at JVisualVM's thread graph to detect some gaps in the execution that can be attributed to the system."
p3720
aS"Inspecting with jvisualvm is  tricky because I have only got failures to happen using the gradle command line which means jvm restarts every thirty seconds or so.  I've dug around pretty much everywhere now and may dig around a bit more in the future but perhaps we have achieved enough with this operator for it to be accepted back into the code base. The hunt certainly unearthed a few race conditions in `retry`, its tests, and in `observeOn` so was pretty useful and the original very frequent failure (for me) is now very infrequent.\r\n\r\nI can rebase the commits and remove the updates to OperatorObserveOn from this commit so that it's ready for merge once you and Ben and whoever else has reviewed it. It will be good to get the fixes in #2929 merged as well of course as otherwise there will be some test flakiness on this commit. \r\n\r\nIs that a reasonable plan or would you like to keep digging?"
p3721
aS"I've rebased commits. Ready for a hopefully final review."
p3722
aS"I'm quite a bit lost; don't know what worked and what not or did the changes work on your system or not. If the test fails with the outer pool of 1 thread, which should pose the least amount of work, then my suspect is that there is something wrong with Java on Linux or with Linux itself. Perhaps this is just another case of the [recent futex bug](https://groups.google.com/forum/#!topic/mechanical-sympathy/QbmpZxp6C64)."
p3723
aS"The futex stuff is interesting, I'll have a close look at that soon. One thing I'm wondering is should we break the retries when a `java.lang.Error` is signalled? At the moment I assume if one occurs it will be suppressed and may have the side effects we see."
p3724
aS"I did a little test and see that the sort of `Error`s that we care about do stop the retries, so that's not it.\r\n\r\nThe futex stuff shouldn't be an issue because it turned up in linux kernel 3.14 and I'm running 3.2.0-80 on my laptop and 3.13.0-49 on my desktop. I'll turn off transparent hugepages on my home desktop and see if the error happens."
p3725
aS"Turned off transparent hugepages and failed on 18th run of this command:\r\n\r\n```\r\n./gradlew -i -Dtest.single=OperatorRetry cleanTest test\r\n```\r\n\r\nThe run times are below. You'll notice that the runtime is not significantly larger for the final failing test which may rule out some types of OS behaviour being involved. \r\n\r\nI think we can rule out the futex bug because I run either Ubuntu 12.04 or 14.04:\r\n\r\n>Ubuntu 14.04/Debian 8: have the fix for a long time [0] [1]\r\nUbuntu 12.04/Debian 7: was never affected [3] [2]. Newer enablement stack kernels for Ubuntu has the same fix as [1].\r\n[0] http://kernel.ubuntu.com/git/ubuntu/linux.git/log/?showmsg=1&qt=grep&q=Avoid+taking+the+hb-%3Elock&h=linux-3.13.y\r\n[1] http://kernel.ubuntu.com/git/ubuntu/linux.git/log/?showmsg=1&qt=grep&q=Avoid+taking+the+hb-%3Elock&h=linux-3.16.y\r\n[2] https://git.kernel.org/cgit/linux/kernel/git/stable/linux-stable.git/tree/kernel/futex.c?h=linux-3.2.y&id=refs/tags/v3.2.69\r\n[3] http://kernel.ubuntu.com/git/ubuntu/ubuntu-precise.git/tree/kernel/futex.c#n186\r\n\r\n```\r\nTotal time: 33.624 secs\r\nTotal time: 25.215 secs\r\nTotal time: 25.204 secs\r\nTotal time: 27.108 secs\r\nTotal time: 25.532 secs\r\nTotal time: 27.042 secs\r\nTotal time: 26.061 secs\r\nTotal time: 26.199 secs\r\nTotal time: 26.177 secs\r\nTotal time: 26.294 secs\r\nTotal time: 25.974 secs\r\nTotal time: 26.123 secs\r\nTotal time: 25.983 secs\r\nTotal time: 26.475 secs\r\nTotal time: 26.321 secs\r\nTotal time: 26.268 secs\r\nTotal time: 26.459 secs\r\nTotal time: 27.076 secs\r\n```\r\n\r\n```\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel FAILED\r\n    java.lang.AssertionError: Data content mismatch: 118={beginningEveryTime x 128}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:768)\r\n```"
p3726
aS'I suggest closing this PR and start with a fresh new PR and perhaps a new discussion.'
p3727
aS'Continuing issue in #2997.'
p3728
asg14
S'davidmoten:redo-fix'
p3729
sbsI2934
(iPull
Pull
p3730
(dp3731
g3
S'Fixes the cause of #2933.'
p3732
sg5
S'Fix termination race condition in OperatorPublish.dispatch'
p3733
sg7
(lp3734
S'Bug'
p3735
asg10
I2934
sg11
(lp3736
sg14
S'akarnokd:OperatorPublishRaceFix'
p3737
sbsI2935
(iPull
Pull
p3738
(dp3739
g3
S"I've written a ```cache()``` alternative that supports backpressure on its client side and can be disconnected from the upstream.\r\n\r\nI've omitted the Experimental annotation for now because I'd like to have some feedback:\r\n\r\n  - Should this replace ```cache()``` completely? Note that this implies changing the return type of ```cache()```.\r\n  - Are the method names satisfactory?\r\n  - Should I add state-peeking methods similar to ReplaySubject?"
p3740
sg5
S'CachedObservable that supports backpressure and disconnection.'
p3741
sg7
(lp3742
S'Enhancement'
p3743
asg10
I2935
sg11
(lp3744
S'Related to https://github.com/ReactiveX/RxJava/issues/1483'
p3745
aS"I don't understand why it needs a new `CachedObservable` type. A normal `Observable` type can be returned and support backpressure. I don't see any methods on `CachedObservable` that are required for `cache()` to work correctly. What am I missing?"
p3746
aS"The ```cache()``` operators docs say that you have to trade off the ability to unsubscribe, but you don't have to if the ```Observable``` returned can be used for this. Same thing happens in ```StoppableObservable``` of RxJavaAsyncUtils."
p3747
aS"> trade off the ability to unsubscribe\r\n\r\nThat seems to break the semantics of what caching is doing. Caching is done for multicasting/replaying. Why should one subscriber unsubscribing early affect a second subscriber so they don't get all the data?\r\n\r\nIf more control is wanted that can be achieved with `replay` and its many overloads, particularly since it already returns `ConnectableObservable` which offers that ability. \r\n\r\nI agree with the need for the cache to be drained with backpressure support, but I don't think the semantics should change for unsubscribe behavior."
p3748
aS"I'll update the code that cache() will have the same capabilities as before plus backpressure."
p3749
asg14
S'akarnokd:OperatorCacheRewrite'
p3750
sbsI2936
(iPull
Pull
p3751
(dp3752
g3
S'## Info \r\n\r\nProblem is in TestSubject.onNext()\r\nwhen is called on current time that is not 0 it will be delayed by current time.\r\ncalling TestSubject.onNext() should execute immediately.\r\n\r\n## Tests\r\n* TestSubjectTest.testObserverPropagateValueAfterTriggeringActions - represent already working behavior\r\n\r\n* TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions - represent a bug that is fixed by this commit'
p3753
sg5
S'Fix TestSubject bug'
p3754
sg7
(lp3755
S'Bug'
p3756
asg10
I2936
sg11
(lp3757
S'The same error is present on ```onError()``` and ```onCompleted()```. Could you fix those as well?'
p3758
aS'@akarnokd  Yep... hold a second'
p3759
aS'Looks good. Thanks!'
p3760
asg14
S'jacek-marchwicki:fix-observer-bug'
p3761
sbsI2937
(iPull
Pull
p3762
(dp3763
g3
S"This is one thing I've missed for a while so I figured out how to get gradle to provide them. This PR enables production of Jacoco coverage reports and Findbugs reports as html in the build directory. It doesn't happen by default, the plugins are run like this (instructions in comments in `build.gradle`):\r\n\r\nTo run Findbugs:\r\n```./gradlew check```\r\n\r\nTo run Jacoco test coverage:\r\n```./gradlew test jacocoTestReport```\r\n\r\nTo run Jacoco on a single test:\r\n```./gradlew -Dtest.single=OperatorRetry test jacocoTestReport```\r\n\r\nThen open up the reports in `build/reports`.\r\n\r\n"
p3764
sg5
S'Add code quality plugins to build.gradle (jacoco, findbugs)'
p3765
sg7
(lp3766
sg10
I2937
sg11
(lp3767
S"Looks like reasonable additions, and safe since they don't affect normal builds.\r\n\r\nThanks."
p3768
asg14
S'davidmoten:findbugs'
p3769
sbsI2938
(iPull
Pull
p3770
(dp3771
g3
S'RxRingBuffer size is not a constant and on Android is\r\nless then 128 (16). So it causing silent issues when\r\nthere were given 16 < Observers < 128.'
p3772
sg5
S'Fixed Observable.combineLatest overflow bug on Android'
p3773
sg7
(lp3774
sg10
I2938
sg11
(lp3775
S'Thanks!'
p3776
asg14
S'jacek-marchwicki:combine-last-overflow'
p3777
sbsI2939
(iPull
Pull
p3778
(dp3779
g3
S'Yet another fix to the race condition in publish().'
p3780
sg5
S'publish: Fix another race between terminalEvent and the queue being empty.'
p3781
sg7
(lp3782
S'Bug'
p3783
asg10
I2939
sg11
(lp3784
sg14
S'akarnokd:OperatorPublishFix0508'
p3785
sbsI2940
(iPull
Pull
p3786
(dp3787
g3
S'Due to !hasValue check (line 120), localHasValue field is always true'
p3788
sg5
S'Remove unnecessary localHasValue check'
p3789
sg7
(lp3790
sg10
I2940
sg11
(lp3791
S'Thanks!'
p3792
asg14
S'tomrozb:localHasValue-always-true'
p3793
sbsI2942
(iPull
Pull
p3794
(dp3795
g3
g53
sg5
S'Pull 1'
p3796
sg7
(lp3797
sg10
I2942
sg11
(lp3798
sg14
S'nish2292:1.x'
p3799
sbsI2948
(iPull
Pull
p3800
(dp3801
g3
S'Additional asserts for TestSubscriber and the option to specify the initial request via a constructor.'
p3802
sg5
S'More assertions for TestSubscriber'
p3803
sg7
(lp3804
S'Enhancement'
p3805
asg10
I2948
sg11
(lp3806
sg14
S'ReactiveX:TestSubscriberPlus'
p3807
sbsI2949
(iPull
Pull
p3808
(dp3809
g3
S"Apologies for the PR that added these to build.gradle. My claim that they were not run by default was wrong (`./gradlew build` runs them). Let's remove till I figure out how to do this properly."
p3810
sg5
S'Remove findbugs+jacoco from build.gradle'
p3811
sg7
(lp3812
sg10
I2949
sg11
(lp3813
S':-)'
p3814
asg14
S'davidmoten:jacoco-disable'
p3815
sbsI2950
(iPull
Pull
p3816
(dp3817
g3
S'Added request overflow check to `OperatorGroupBy` (using `BackpressureUtils`) and prevented `requested` counters from being decremented if they were at `Long.MAX_VALUE`.\r\n\r\nIncludes unit test that failed on current codebase.'
p3818
sg5
S"OperatorGroupBy - check for request overflow and don't decrement when at Long.MAX_VALUE"
p3819
sg7
(lp3820
sg10
I2950
sg11
(lp3821
S'Thanks!'
p3822
asg14
S'davidmoten:group-by-request-overflow'
p3823
sbsI2951
(iPull
Pull
p3824
(dp3825
g3
S'Used `BackpressureUtils` to prevent request overflow and added an `n > 0` check for requests to ensure that `subscribeNext` is not called concurrently (race condition).\r\n\r\nNo unit tests written. Let me know if you think worth the effort.'
p3826
sg5
S'OperatorConcat - prevent request overflow and fix race condition'
p3827
sg7
(lp3828
sg10
I2951
sg11
(lp3829
S'Could you add your usual unit test for this?'
p3830
aS'Sure'
p3831
aS"Done, added unit test that failed on original codebase for request overflow. Didn't add a unit test for `n>0` check though (want that too?)."
p3832
aS'Not necessary.'
p3833
aS'Thanks!'
p3834
asg14
S'davidmoten:concat-request-overflow'
p3835
sbsI2953
(iPull
Pull
p3836
(dp3837
g3
S"Instead of using a queue of `Notification<T>` we can use a queue of `T` and when `t` is null place a singleton `NULL_SENTINEL` object on the queue (which we get away with because of type erasure).\r\n\r\nThis means we don't need to wrap every `onNext` arrival as a `Notification` and thus reduce object allocations."
p3838
sg5
S'OperatorObserveOn - reduce object allocations '
p3839
sg7
(lp3840
sg10
I2953
sg11
(lp3841
S"I'm a bit surprised by this PR.\r\n\r\n  - Saving the size of one reference of the static-valued ```NotificationLite.instace()``` is not much of a gain and you can't be sure how each JVM will pack the particular ```ObserveOnSubscriber``` class.\r\n  - Casting an exaclty Object NULL_SENTINEL reference to T looks fishy.\r\n  - I don't see any performance benefit either because the ```NotificationLite.getValue()``` and ```next()``` does exactly the same.\r\n"
p3842
aS"Ah that's hilarious, I completely forgot that `NotificationLite` already does this stuff! And no I don't care about the `on` reference. The cast works because T is a generic type and erasure takes care of it. I agree no performance benefit, I'll close."
p3843
aS'> The cast works because T is a generic type and erasure takes care of it.\r\n\r\nYes, true, but I find the pattern itself dangerous: an accidental leak of the Object and now you have ClassCastException somewhere else.'
p3844
asg14
S'davidmoten:observe-on-alloc'
p3845
sbsI2956
(iPull
Pull
p3846
(dp3847
g3
S'In existing code if unsubscription happens immediately after a `child.onNext` call from `pollQueue` then the number of emissions made in the loop will be requested of upstream despite `child` being unsubscribed.\r\n\r\nThis PR adds a local variable `isUnsubscribed` and when set to true no further requests will be made.\r\n\r\nThis PR includes a unit test that failed on the existing codebase.'
p3848
sg5
S'OperatorObserveOn should not request more after child is unsubscribed'
p3849
sg7
(lp3850
sg10
I2956
sg11
(lp3851
S'Less verbose:\r\n```java\r\nfor (;;) {\r\n    if (child.isUnsubscribed()) {\r\n        return;\r\n    }\r\n    // ...\r\n```'
p3852
aS"Yeah, that's better. Done"
p3853
aS'Thanks!'
p3854
asg14
S'davidmoten:observe-on-unsub'
p3855
sbsI2960
(iPull
Pull
p3856
(dp3857
g3
S'If a request arrives while `ConcatInnerSubscriber` is being constructed ([L199-201](https://github.com/ReactiveX/RxJava/blob/bad4d40a7b59cb443c3cb19d00ab80000e017a5f/src/main/java/rx/internal/operators/OperatorConcat.java#L199-L201)) then that additional request does not induce a request from the subscriber and could stall the stream. The fix is not to pass `requested` value in the constructor but to call `ConcatInnerSubscriber.requestMore` with `requested` only once `currentSubscriber` is set.'
p3858
sg5
S'fix OperatorConcat race condition where request lost'
p3859
sg7
(lp3860
S'Bug'
p3861
asg10
I2960
sg11
(lp3862
S"Yeah my focus was very narrow. Similar situation to retry so 'ProducerArbiter` will be the go. Those producers sound great, thanks."
p3863
aS'The new producers have been merged into 1.x.'
p3864
aS'Could you also see if #2876 passes as well?'
p3865
aS"Ok, I've introduced the joys of `ProducerArbiter` to `OperatorConcat`. Tests pass and I've added the test from #2876 which doesn't fail after running for tens of minutes. There is one catch though, I changed the #2876 test to use `Observable.from(Arrays.asList(t))` instead of `Observable.just(t)` so would be backpressure aware. Using `ProducerArbiter` means that sources that emit more than requested like `Observable.just` may induce an `IllegalStateException` from `ProducerArbiter`.\r\n\r\nI'm supposing at some stage in the future (2.0?) we will be strict about our sources but till then perhaps we should allow a `ProducerArbiter` to be created in non-strict mode so that if a source emits more than requested it is forgiving about it?"
p3866
aS'No, because it would derail the state validation.'
p3867
aS'Changed the test duration to 2 seconds and added error message to `ProducerArbiter` so users will have a bit more of an idea what went wrong if the produced-more-than-requested IllegalStateException occcurs.'
p3868
aS'Unrelated CI failure, issue #2870 covers it.\r\n```\r\nrx.internal.operators.OperatorSerializeTest > testMultiThreadedWithNPEinMiddle FAILED\r\n    java.lang.AssertionError\r\n        at org.junit.Assert.fail(Assert.java:92)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertTrue(Assert.java:54)\r\n        at rx.internal.operators.OperatorSerializeTest.testMultiThreadedWithNPEinMiddle(OperatorSerializeTest.java:134)\r\n```'
p3869
aS"Maybe it is time to make just() do backpressure properly.\r\n\r\nWould you like to pursue a fix for ```testMultiThreadedWithNPEinMiddle```? I think if the exception itself is created way upfront and not new'd in place, the chance of it delayed quite to the end should decrease significantly."
p3870
aS"Sure, I can look at it. \r\n\r\nBy the way I've removed unused imports from `OperatorConcatTest` and also changed the `onStart` so that it only requests as many inner observables as it needs. Do you think this is ok?"
p3871
aS"I'd love to see `just` support backpressure though I assume we will take a biggish performance hit if we do."
p3872
aS"I think requesting 2 was no accident: while working on the current, the next can be 'created' asynchronously. Otherwise, once the current is processed, you need to wait more for the next Observable source to arrive."
p3873
aS"The only catch is that by requesting 2 we make the assumption that creating this spare in advance doesn't require significant resources. If an unsubscribe occurs while the first inner is emitting then the act of creating the second is wasted (and may have been demanding)."
p3874
aS"There's a compromise either way for sure. Perhaps we could request 2 inners if `Long.MAX_VALUE` is requested and otherwise 1."
p3875
aS"I'd say, let's have it 2 on default and have another PR which offers an overload to ```concat()``` and ```concatMap()``` where the 'prefetch' amount can be specified."
p3876
aS'Sounds good. We can discuss further in another PR.'
p3877
aS'Looks okay to me now. Thanks!'
p3878
asg14
S'davidmoten:concat-race'
p3879
sbsI2961
(iPull
Pull
p3880
(dp3881
g3
S'The Amb operator has a backpressure bug:\r\n\r\n* if `m` requests were made before the first emission then `m` subscriptions were started on each source observable. We only want once subscription on each.\r\n\r\nThis PR adds fix code to  `OnSubscribeAmb` and two unit tests.'
p3882
sg5
S'fix Amb backpressure bug'
p3883
sg7
(lp3884
S'Bug'
p3885
asg10
I2961
sg11
(lp3886
S"yeah I like your first suggestion, I'll look at that"
p3887
aS"I've moved the subscription to sources loop into the call method as suggested."
p3888
aS"I've done that and reduced volatile reads a bit too. Given that `selection` and `selection.choice` are both final fields what is the interaction with the memory barriers? (sorry, a bit of a general question this for my education)"
p3889
aS"Variables tend to be re-read around volatiles and the JIT *may* be smart enough to optimize it and pull them upfront, but you can't be sure."
p3890
aS'added `ambSubscribers` final variable'
p3891
aS'ok, done'
p3892
aS"I'd like to review the whole operator but I don't have the time and the focus to do it now. I'll come back to this in a few hours."
p3893
aS'> if m requests were made before the first emission then m subscriptions were started on each source observable. We only want once subscription on each.\r\n\r\nMaybe I missed some discussion about this case. So now we support calling `request` in `onStart` multiple times?'
p3894
aS'>Maybe I missed some discussion about this case. So now we support calling request in onStart multiple times?\r\n\r\nYes we do, multiple requests in `onStart` are additive but this is about what happens between subscriptions starting and first emission occurring. The new test `testSubscriptionOnlyHappensOnce` demos the problem in that by subscribing to an `amb` of async sources with an `onStart` request of one and then immediately (post subscription) calling `request(1)` we get a bunch of extra subscriptions.'
p3895
aS'Interesting point but I assume async operators downstream of the `amb` could do what we are trying to simulate with `TestSubscriber`.\r\n\r\nSaying that requests between between `onStart` and first emission are forbidden is not something I see documented anywhere, let me know if you see it. '
p3896
aS"> Saying that requests between between onStart and first emission are forbidden is not something I see documented anywhere, let me know if you see it.\r\n\r\nI don't mean it. I mean `request` is `protected` to avoid calling out of `Subscriber`."
p3897
aS'LGTM for the fix. Just some minor comments for the tests.'
p3898
aS"@zsxwing I've updated the test that called `ts.requestMore(1)` before subscription so that it uses the `onStart` method of `TestSubscriber` instead. Thanks for the review.  \r\n\r\n\r\n"
p3899
aS"LGTM. Let's wait for @akarnokd to take a final look."
p3900
aS'I found a few places for possible optimizations:\r\n\r\n  - in ```AmbSubscriber```, you can have a plain ```boolean chosen``` field to avoid the reference comparison:\r\n```\r\nboolean chosen;\r\n...\r\n    private boolean isSelected() {\r\n        if (chosen) {\r\n            return true;\r\n        }\r\n        if (selection.choice.get() == this) {\r\n            // fast-path\r\n            chosen = true;\r\n            return true;\r\n        } else {\r\n            if (selection.choice.compareAndSet(null, this)) {\r\n                selection.unsubscribeOthers(this);\r\n                chosen = true;\r\n                return true;\r\n            } else {\r\n                // we lost so unsubscribe ... and force cleanup again due to possible race conditions\r\n                selection.unsubscribeLosers();\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n```\r\n- There is a race between the unsubscription logic at L360 and the loop at L381: while the loop is busy creating and subscribing ```AmbSubscriber```s, a concurrent unsubscribe will start cancelling that have reached the queue but any subsequent. Possible solutions:\r\n   - Move the creation and enqueueing of ```AmbSubscriber```s at the beginning, then create the unsubscription logic and finally loop and subscribe the ```AmbSubscribers```. This way, the queue will contain all that need to be unsubscribed.\r\n   - Instead of quitting after the ```subscriber.isUnsubscribed()```, drain the queue and unsubscribe its contents, do a similar check after the loop as well to clean up any stragglers.\r\n   - Have a custom subscription manager, similar to what the subjects use that can unsubscribe latecommers and keep the current one-loop approach (I have plans to cover such custom container in my blog soon.)'
p3901
aS"I like the optimization for `isSelected`. I've also committed the first approach for the unsub race but I think we can do better as you imply. Might go for the second."
p3902
aS">Instead of quitting after the subscriber.isUnsubscribed(), drain the queue and unsubscribe its contents, do a similar check after the loop as well to clean up any stragglers.\r\n\r\nI've implemented this suggestion @akarnokd. Ready for (another) review, thanks."
p3903
aS'Looks good. Thanks!'
p3904
asg14
S'davidmoten:amb-bug'
p3905
sbsI2963
(iPull
Pull
p3906
(dp3907
g3
S'platform-safe variants.'
p3908
sg5
S'Set of standard producers and updated queue implementations with some'
p3909
sg7
(lp3910
sg10
I2963
sg11
(lp3911
S'This looks like good additions. If I understand correctly there are two things happening here:\r\n\r\n1) Abstract Producers to simplify building Observables/Operators\r\n2) New impls of queues that use Atomics rather than Unsafe so they work on Android, Google App Engine, etc?\r\n\r\nThe only thing I would like changed before merging is to include correct attribution to where the code comes from.'
p3912
aS"Sure, I'll add the link. These aren't all the android-compatible variants so I plan to do a separate PR on the remaining and updating all platform-checked places."
p3913
aS'> I plan to do a separate PR on the remaining and updating all platform-checked places.\r\n\r\nThen should the producers and queues be separated into different PRs?'
p3914
aS'The default constructor of ```QueuedProducer``` uses ```SpscLinkedQueue``` so at least they need to be in the same PR, but ```MpscLinkedQueue``` can be added after if you wish.'
p3915
aS"Since these don't change any existing code and are all internal, let's merge and move forward."
p3916
aS'Okay.'
p3917
asg14
S'ReactiveX:StandardProducers'
p3918
sbsI2966
(iPull
Pull
p3919
(dp3920
g3
g53
sg5
S'The usual anally-retentive javadoc edits.'
p3921
sg7
(lp3922
sg10
I2966
sg11
(lp3923
S'Looks good, thanks!'
p3924
asg14
S'ReactiveX:javadocs'
p3925
sbsI2968
(iPull
Pull
p3926
(dp3927
g3
S"I've removed the controversial features and made the backing CachedObservable internal."
p3928
sg5
S'Operator cache() now supports backpressure'
p3929
sg7
(lp3930
S'Enhancement'
p3931
asg10
I2968
sg11
(lp3932
sg14
S'ReactiveX:OperatorCacheRewrite2'
p3933
sbsI2969
(iPull
Pull
p3934
(dp3935
g3
S"I've removed the controversial features and made the backing CachedObservable internal.\r\n\r\nRelated issue #1483."
p3936
sg5
S'Operator cache() now supports backpressure'
p3937
sg7
(lp3938
S'Enhancement'
p3939
asg10
I2969
sg11
(lp3940
S'Does it really need to be returning a new type of Observable?  It seems the methods `isConnected()`, `hasObservers()` and `cachedEventCount()` are only used by the unit tests.'
p3941
aS'Yes. Otherwise one would need ugly reflection magic to get inside the state of this observable.'
p3942
aS'I checked out the branch and took a shot at making it an OnSubscribe function again.\r\nhttps://github.com/abersnaze/RxJava/tree/OperatorCacheRewrite2'
p3943
aS"Cache had originally more functionality, i.e., the ability to terminate it manually, like a disconnect, but was downwoted. I forgot about the `toCached()` methods which are just relics and I'll update this PR.\r\n\r\nOtherwise, I don't really see why I shouldn't extend Observable, especially if one day, there will be a real need to support disconnection of cache()."
p3944
aS"I've rebased it and I'm going to merge this. If there has concern about it being implemented as a Observable, a PR can always be submitted with the suggested changes."
p3945
asg14
S'akarnokd:OperatorCacheRewrite2'
p3946
sbsI2970
(iPull
Pull
p3947
(dp3948
g3
S'See #2799 for reasons to deprecate.'
p3949
sg5
S'Deprecated onBackpressureBlock'
p3950
sg7
(lp3951
S'Documentation'
p3952
asg10
I2970
sg11
(lp3953
sg14
S'akarnokd:BackpressureBlockDeprecated'
p3954
sbsI2971
(iPull
Pull
p3955
(dp3956
g3
S'See #2793.'
p3957
sg5
S'Added experimental to() method for fluent type conversions.'
p3958
sg7
(lp3959
S'Enhancement'
p3960
asg10
I2971
sg11
(lp3961
S'I second this PR.'
p3962
aS"I would prefer if the Func1 were from OnSubscribe<T> to O. There isn't really any reason that a conversion func should have to call subscribe. I would really like to build on top of this. I'll post a link with more examples shortly."
p3963
aS'I have been working on a proof of concept using a similar mechanism to the `to` method. The API actually defines a class that takes an `OnSubscribe<T>` and returns an O. \r\n\r\n```java\r\npublic interface MonoConversion<O, T> {\r\n    public O convert(OnSubscribe<T> onSubscribe);\r\n}\r\n```\r\n\r\nI would really like to be able to use this to method in a similar way. Here is a link to the [project](https://github.com/stealthcode/RxJavaExtensible) and an example implementation of a [conversion](https://github.com/stealthcode/RxJavaExtensible/blob/master/src/main/java/rx/simple/SimpleMonoConversion.java).'
p3964
aS'```to``` is an instance method whereas your convert method looks like a factory method without any relation to an Observable.'
p3965
aS'The `MonoConversion` interface is alpha equivalent with the Func1 interface as it has 1 method (call vs convert). The POC project linked has an observable class that exposes a method `extend` that takes a MonoConversion but it would be pretty much equivalent to the Func1. My only concern with this pull request was that your Func1 took an `Observable<T>` and I think it would be better to take an `OnSubscribe<T>` in order to make the method agnostic as to the type of observable. This would enable projects with their own implementations of the `to` method to accept the same underlying `OnSubscribe` and have general applicability across any kind of observable that uses an OnSubscribe. '
p3966
aS"I don't see why you'd want access to the OnSubscribe inside an Observable."
p3967
aS'Sorry, let me try to start from the top. I am trying to write an API for an extensible Observable that allows for more functionality than member methods and one-off lifted operators. I intend to use the `to()` method to convert from one kind of observable to another kind. For instance, convert from an `rx.Observable` class to something like a `rx.TemporalObservable` for part of the operator chain.\r\n\r\nSo if someone were to write a class Observable that followed the same interface as the `rx.Observable` (and at some point its feasible that there might be an interface to uphold an Observable contract) then the `to` member method on the observable would accept a `Func1<rx.Observable<T>, R>` which does not allow for anything else than an `rx.Observable`. The Observable as it is today carries with it much more functionality than a simple `rx.OnSubscribe<T>`. \r\n\r\nThis also means that in order to use that conversion function for any other kind of observable (ParallelObservable, BiObservable, TemporalObservable, etc.) then someone would have to use a shim class to subscribe to the Observable or the function would have a concrete import to the Observable variant class so that it can reach in to access the `this.onSubscribe` func directly. However, if the derived observables were to both agree to use an underlying `OnSubscribe` func then any other Observable class would be able to use the (much lighter weight) `OnSubscribe` func and get immediate reuse out of any conversion function written for any observable.'
p3968
aS"> if the derived observables were to both agree to use an underlying OnSubscribe func then any other Observable class would be able to use the (much lighter weight) OnSubscribe func and get immediate reuse out of any conversion function written for any observable.\r\n\r\nI don't think this is even doable. For example the ```BiObservable``` would use a ```BiOnSubscribe<T>``` with a single method of ```call(BiSubscriber<? super T>)``` which has the ```onNext(A a, B b)``` method. The types are incompatible with OnSubscribe.\r\n\r\nIn addition, Observable is the base class for fluent operations with final methods and from API perspective, it is unfeasible and unnecessary to extract an interface for these methods: interface evolution isn't really possible in pre-Java 8. Even if both ```Observable``` and ```BiObservable``` have common method signatures, their non-zero parameter ```subscribe()``` can't be shared and thus can't be consumed independently of the underlying type."
p3969
aS"To convert from an `Observable` to a `BiObservable` you have to provide a `Subscriber` that can be subscribed to the observable. The `SingleToDyadOperator` shows how this is done and can illustrate how this works. The operator extends `Func1<DyadSubscriber<? super R0, ? super R1>, Subscriber<T>>`. That is to say that it emits an `rx.Subscriber` that can be subscribed to the `rx.Observable`. Converting from an Observable would work in a similar way. I'm not sure that you understand the point that I am making. "
p3970
aS"Still I don't see the point. You can call ```subscribe``` or ```unsafeSubscribe``` with a subscriber in the callback of ```to```, where in the latter case you need to call ```unsubscribe()``` manually."
p3971
aS"I'm fine with having a conversion function call the `subscribe` method. This makes a lot of sense in order to preserve the unsubuscribe on terminal event and the hooks callsites. However I don't want for a conversion function to have access to the full kitchen sink of the `Observable`. This kind of api is open for abuse. "
p3972
aS'@akarnokd thanks for hearing my feedback. Would you like for me to try and implement this? '
p3973
aS'"Code wins arguments", so if you show me the code, I might be convinced.'
p3974
aS"@stealthcode Do you have examples to show? I'm leaning towards merging this since it is marked as `@Experimental` and it seems very clean and usable. "
p3975
aS'@benjchristensen yes please take a look at #3082. I had to make package visible static method encapsulating the work of `Observable.subscribe` in order to expose the subscribe behavior for `OnSubscribe` values that are not `this.onSubscribe`. '
p3976
aS"I'm closing this PR since #3082 has been merged (which I find over-convoluted in contrast to this PR)."
p3977
aS'@akarnokd I really do want to hear from you regarding implementation and design decisions. You had no comments regarding convoluted implementation before the pull request was merged. Do you want to comment or open an issue? '
p3978
asg14
S'akarnokd:ObservableConvertTo'
p3979
sbsI2972
(iPull
Pull
p3980
(dp3981
g3
S'backpressure support to window(size, skip).\r\n\r\nSee #1880.'
p3982
sg5
S'Fixed window(time) to work properly with unsubscription, added'
p3983
sg7
(lp3984
S'Bug'
p3985
aS'Enhancement'
p3986
asg10
I2972
sg11
(lp3987
sg14
S'akarnokd:WindowUnsubscribeToComplete'
p3988
sbsI2973
(iPull
Pull
p3989
(dp3990
g3
S'I measured +10% improvement in some cases, but -20% in others:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/7726981/2dcd0cee-ff06-11e4-8bef-5bfb36c4a824.png)\r\n\r\nHere is the scan of various batching sizes and number of source elements:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/7726990/40d3ecae-ff06-11e4-8d70-b0db51cda8a8.png)\r\n\r\nThe benchmarks fluctuate quite a bit on their own, probably due to frequent biased-lock revocation.'
p3991
sg5
S'observeOn: option to batch-request instead of at end of a drain-run.'
p3992
sg7
(lp3993
S'Enhancement'
p3994
asg10
I2973
sg11
(lp3995
S'The idea that I had at one point was rather than picking a batch size as a fixed percentage was to compute the batch size as the number of items that can be processed in the latency between the `request` is called and `onNext` is called.  For example if the last time we made a `request` it took 100ms before the first `onNext` came back and the consumer takes 10ms to process one value then the next `request` should be made when there are about (100ms/10ms =) 10 items left in the ring buffer.\r\n\r\nThe overhead of the book keeping might be too high for many small items.  Maybe a fast path if either the numerator or denominator gets too close to zero.'
p3996
aS'Because it still requests at the end of pollQueue, this seems like it could result in more requests being made. For example, batchSize=50, it emits 55, it would request 50 then 5, correct?\r\n\r\nIt seems more efficient to just leave it as is. What would be more interesting to me is figuring out a safe way to accumulate small requests across `pollQueue` invocations. So if we end up with 5+3+6+4 we could accumulate that into a single request(18) which would be more efficient. \r\n\r\nWe tried that once but caused deadlocks in edge cases. \r\n\r\nLeaving open as this needs more discussion and the perf results are too variable to make a decision right now.'
p3997
aS"> Because it still requests at the end of pollQueue, this seems like it could result in more requests being made. For example, batchSize=50, it emits 55, it would request 50 then 5, correct?\r\n\r\nYes, the request outside of the loop turned out to be necessary as I've experienced hangs due to missing requests.\r\n\r\nI'm not too keen to pursue this any further, my interest was mostly the performance profile and the effect of batching."
p3998
aS'Do you think the variable performance results warrant merging this?'
p3999
aS'The variance is too high and to inconsistent for my taste so I rather close this PR for now.'
p4000
asg14
S'akarnokd:ObserveOnBatching'
p4001
sbsI2975
(iPull
Pull
p4002
(dp4003
g3
S"The existing six methods below didn't make sense and caused some confusion.\r\n\r\n```\r\ntimer(delay, timeUnit[, scheduler]);  --> emits 0 after delay and completes\r\ntimer(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\r\ninterval(period, timeUnit[, schduler); --> emits i++ after every period forever\r\n```\r\n\r\nI felt that the middle method acted more like the third method `interval` than first method `timer`.  This PR is to make this change.\r\n\r\n```\r\n timer(delay, timeUnit[, scheduler]);  --> emits 0 after delay and completes\r\n+@Deprecated\r\n timer(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\r\n+interval(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\r\n interval(period, timeUnit[, schduler); --> emits i++ after every period forever\r\n```\r\n\r\nPS: yes, I understand that we can't delete the deprecated timer method.\r\n@davgross and if this PR is merged will have to change the images."
p4004
sg5
S'Deprecate and rename two timer overloads to interval'
p4005
sg7
(lp4006
S'Documentation'
p4007
asg10
I2975
sg11
(lp4008
S"Okay, I think I'm done changing the PR unless there are other comments."
p4009
aS"I'm not in favor of these changes."
p4010
aS'any particular reason?'
p4011
aS"If it were only a matter of aliasing, I wouldn't see any problem, but you deprecate a historical method just because the name. Every use place need to be changed to avoid deprecation warnings in RxJava and outside it."
p4012
aS'I think it improved clarity of API and is directly related to a bug we had here.  This PR already takes care of migrating the RxJava usages of timer to interval.'
p4013
aS"The timer-interval confusion apparently is quite common so I'm going to merge this. Thanks for the changes."
p4014
asg14
S'abersnaze:interval'
p4015
sbsI2978
(iPull
Pull
p4016
(dp4017
g3
S'wrap the onSubscribe/Operator as soon as possible in lift.\r\nwrap the onSubscribe in the constructor to get subclasses.\r\nadd code to the scalar synchronous observable to detect exec hook usage.'
p4018
sg5
S'Changes to support execution hooks'
p4019
sg7
(lp4020
S'Enhancement'
p4021
asg10
I2978
sg11
(lp4022
S"I'm willing to accept these changes but it is going to conflict with #2928."
p4023
aS"i'll rebase"
p4024
aS"I added a bunch of unit tests to show it was working as well. I had to do some funny things to the hook registration to make the test not so flaky.  @benjchristensen was concerned that the performance of would suffer.  I'm still working out that part.\r\n\r\nBefore\r\n```\r\nBenchmark                                 (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorMapPerf.mapPassThru                1  thrpt         5 20861710.150  2528216.623    ops/s\r\nr.o.OperatorMapPerf.mapPassThru             1000  thrpt         5   144703.043    16183.258    ops/s\r\nr.o.OperatorMapPerf.mapPassThru          1000000  thrpt         5      144.271        8.701    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift         1  thrpt         5 22885527.107   995464.251    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift      1000  thrpt         5   145704.353     9729.424    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift   1000000  thrpt         5      138.445       17.020    ops/s\r\nBenchmark                                          (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  4839482.480   239709.614    ops/s\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    28336.689     2016.760    ops/s\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       33.909        0.547    ops/s\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    97959.393     4014.184    ops/s\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        4.924        1.077    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4437187.814   167833.354    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   351315.999    44526.813    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    37121.316     3895.097    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  5021914.272   412909.787    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       32.252        5.023    ops/s\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    76855.583      958.621    ops/s\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     1717.848      855.387    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  4643618.830   215086.259    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    24258.258      612.329    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       30.282        1.005    ops/s\r\n```\r\n\r\nAfter\r\n```\r\nBenchmark                                 (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorMapPerf.mapPassThru                1  thrpt         5 21350752.203  1037602.046    ops/s\r\nr.o.OperatorMapPerf.mapPassThru             1000  thrpt         5   146674.940     5320.446    ops/s\r\nr.o.OperatorMapPerf.mapPassThru          1000000  thrpt         5      146.099        2.902    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift         1  thrpt         5 22679101.907   333070.139    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift      1000  thrpt         5   144797.255     6644.360    ops/s\r\nr.o.OperatorMapPerf.mapPassThruViaLift   1000000  thrpt         5      146.210        6.251    ops/s\r\nBenchmark                                          (size)   Mode   Samples        Score  Score error    Units\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  4415320.588   156926.619    ops/s\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    28327.275      953.037    ops/s\r\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       32.374        1.956    ops/s\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    92374.205     4680.405    ops/s\r\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        4.881        0.489    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4486377.199    73753.728    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   352662.487    14879.412    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    46931.354     2035.109    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  4788335.318   487569.791    ops/s\r\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       32.847        1.320    ops/s\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    77044.016      501.663    ops/s\r\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     1737.993      751.681    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  4630445.306    39953.022    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    23478.427     2397.959    ops/s\r\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       27.596        1.443    ops/s\r\n```"
p4025
aS'Merge conflicts, so closing. Fix up and resubmit.'
p4026
asg14
S'abersnaze:exec-hook'
p4027
sbsI2981
(iPull
Pull
p4028
(dp4029
g3
g53
sg5
S'Add example of dependency for Gradle'
p4030
sg7
(lp4031
S'Documentation'
p4032
asg10
I2981
sg11
(lp4033
S'Too many ```and``` for my taste:\r\n\r\n```\r\nExample for Maven:\r\n...\r\nand for Ivy:\r\n...\r\nand for Gradle:\r\n...\r\n```'
p4034
aS"I'm closing this due to no response."
p4035
asg14
S'Fi5t:patch-1'
p4036
sbsI2982
(iPull
Pull
p4037
(dp4038
g3
S"Since we use this so much I've added factory methods so we can infer types. \r\n\r\nInstead of \r\n\r\n```java\r\nTestSubscriber<Integer> ts = new TestSubscriber<Integer>();\r\n```\r\n\r\nWe can write\r\n```java\r\nTestSubscriber<Integer> ts = TestSubscriber.create();\r\n```\r\n\r\nI changed the tests in `OnSubscribeRangeTest` to demo the usage."
p4039
sg5
S'TestSubscriber - add factory methods'
p4040
sg7
(lp4041
S'Enhancement'
p4042
asg10
I2982
sg11
(lp4043
S'Looks handy. @benjchristensen what do you think?'
p4044
aS"I'm going to merge these as they come in handy while RxJava requires Java 6 to compile."
p4045
aS"I'm okay with these additions"
p4046
asg14
S'davidmoten:test-sub-factory-methods'
p4047
sbsI2983
(iPull
Pull
p4048
(dp4049
g3
S"Started investigating multiple calls to onStart based on #2979 and found a bunch, but since onStart can be overridden, I might have missed cases. In addition, I've found a single place where a producer is set twice on a subscriber but again, many other places may exist."
p4050
sg5
S'Fixed multiple calls to onStart.'
p4051
sg7
(lp4052
S'Bug'
p4053
asg10
I2983
sg11
(lp4054
S'(I know that is easy to complain :wink:) This decorator strategy is not very memory friendly, you have this annoying (gwt compatibility perspective) AtomicXxxFieldUpdater in a lot of places to reduce memory usage, and you end up adding this decorators to only disable one method call.\r\n\r\nWhat do you think?. Thanks to solve the problem anyway :smile:.'
p4055
aS"Yikes! There's a lot of stuffed up backpressure fixed here. I'm hoping we can release soon."
p4056
asg14
S'akarnokd:MultiOnStartFix'
p4057
sbsI2985
(iPull
Pull
p4058
(dp4059
g3
S'to address #2870, have made it much more improbable that the error emission is the last thread to complete by only failing the test if the error emission is the last for `n` repeats. I chose `n` = 3 to keep the runtime low (average <2s).'
p4060
sg5
S'improve OperatorSerializeTest.testMultiThreadedWithNPEinMiddle '
p4061
sg7
(lp4062
S'Test-Failures'
p4063
asg10
I2985
sg11
(lp4064
S'Thanks!'
p4065
asg14
S'davidmoten:serialize-fix'
p4066
sbsI2986
(iPull
Pull
p4067
(dp4068
g3
S'Implemented backpressure using `SingleDelayedProducer` (thanks @akarnokd) and while I was there ensured that the last value is in the exception cause when the predicate throws an exception.\r\n'
p4069
sg5
S'OperatorAll  - implement backpressure and include last value in exception cause'
p4070
sg7
(lp4071
S'Enhancement'
p4072
asg10
I2986
sg11
(lp4073
S'oops, fixed.'
p4074
aS"Thanks, I've updated the commit with that change."
p4075
aS'Looks good now. Thanks!'
p4076
asg14
S'davidmoten:all-backp'
p4077
sbsI2987
(iPull
Pull
p4078
(dp4079
g3
S'`OperatorSkip` suffered from this race condition:\r\n\r\nSuppose we wanted to skip 5 elements, then\r\n\r\n* two concurrent requests of say 1 between onStart request of 0 and first emission would request 1+ (5-0) and 1 + (5-0) elements = 12 elements. To deliver the two requested we only need 7 from upstream so we have overrequested.\r\n\r\nIt also lacked protection from request overflow.\r\n\r\nTwo unit tests have been added that failed on previous code and now pass.'
p4080
sg5
S'fix skip() race condition and request overflow'
p4081
sg7
(lp4082
S'Bug'
p4083
asg10
I2987
sg11
(lp4084
S'A shorter solution would be:\r\n\r\n```java\r\n@Override\r\npublic void setProducer(Producer producer) {\r\n    super.setProducer(producer);\r\n    producer.request(toSkip);\r\n}\r\n```\r\nwhich, in theory, should retain the ability to run unbounded and trigger the fast-paths.\r\n'
p4085
aS"Beautiful solution! I've updated the commit."
p4086
aS"Sorry, I wasn't completely right and one slight change is required: replace ```super``` with ```child``` to avoid the possibility of interference from the Subscriber (because unspecified initial request is turned into MAX_VALUE request in some cases). The reactive-streams API is so much better/clearer in this regard..."
p4087
aS'righto, have done.'
p4088
aS'Thanks!'
p4089
aS'> The reactive-streams API is so much better/clearer in this regard...\r\n\r\nYes it is.'
p4090
asg14
S'davidmoten:skip-bug'
p4091
sbsI2988
(iPull
Pull
p4092
(dp4093
g3
S'Implemented backpressure using `SingleDelayedProducer`  and while I was there ensured that the last value is in the exception cause when the predicate throws an exception.'
p4094
sg5
S'Operator exists() - implement backpressure and include last value in exception cause'
p4095
sg7
(lp4096
S'Enhancement'
p4097
asg10
I2988
sg11
(lp4098
sg14
S'davidmoten:any-backp'
p4099
sbsI2989
(iPull
Pull
p4100
(dp4101
g3
S'The `request` method used logic that could overrequest upstream if multiple small requests were made before the next item arrived.\r\n\r\nAdded a unit test that failed on previous code.\r\n'
p4102
sg5
S'prevent take() from requesting more than needed'
p4103
sg7
(lp4104
S'Bug'
p4105
asg10
I2989
sg11
(lp4106
S'Thanks @akarnokd. Changes made.'
p4107
aS'Great job!'
p4108
asg14
S'davidmoten:take-request-bug'
p4109
sbsI2990
(iPull
Pull
p4110
(dp4111
g3
S"The `Subscriber` class is something I encounter frequently when debug stepping through code and is hard to read. This PR improves the names of variables and makes the `request` method more readable in particular by moving some code off into another method. \r\n\r\nI've also put in a `return` straight after the `addToRequested(n)` call so that we don't need to make an unnecessary test of `producerToRequestFrom != null`. Very minor saving I'm sure but why not.\r\n\r\nJavadoc is still missing and I thought to leave that for another PR (because it will require a bit more thought)."
p4112
sg5
S'Improve Subscriber readability'
p4113
sg7
(lp4114
sg10
I2990
sg11
(lp4115
sg14
S'davidmoten:subscriber-readability'
p4116
sbsI2991
(iPull
Pull
p4117
(dp4118
g3
S'As per title, unit test included.'
p4119
sg5
S'takeUntil(predicate) - include last value in error cause'
p4120
sg7
(lp4121
S'Enhancement'
p4122
asg10
I2991
sg11
(lp4123
S'Thanks!'
p4124
asg14
S'davidmoten:take-until-predicate-last-cause'
p4125
sbsI2992
(iPull
Pull
p4126
(dp4127
g3
S'When an error occurs some `Operator`s (like `map`) include the value in the exception cause to help debugging. The intent is that for the 9 primitive types (int/Integer, double/Double, byte/Byte, char/Character etc) we render the value using `value.toString` but the test for being a primitive does not work because `.isPrimitive` always returns false (primitives have always been autoboxed by the time they get here).\r\n\r\nThe fix is to create a lazy loaded singleton set of the primitive classes (Integer.class, Double.class, etc) and check for membership in that set.\r\n\r\nUnit tests included for each primitive type.'
p4128
sg5
S'Fix value rendering in error last cause for primitive types'
p4129
sg7
(lp4130
S'Bug'
p4131
asg10
I2992
sg11
(lp4132
S'Good catch!'
p4133
asg14
S'davidmoten:error-cause-primitives'
p4134
sbsI2993
(iPull
Pull
p4135
(dp4136
g3
S'As per title, unit test included.'
p4137
sg5
S'takeWhile(predicate) - include last value in error cause'
p4138
sg7
(lp4139
S'Enhancement'
p4140
asg10
I2993
sg11
(lp4141
sg14
S'davidmoten:take-while-cause'
p4142
sbsI2995
(iPull
Pull
p4143
(dp4144
g3
S"`OperatorSwitch` didn't record the total of requests before first inner subscription occurring and had problems with request overflow. \r\n\r\nIncludes 4 unit tests that failed on the original code."
p4145
sg5
S'switchOnNext - ensure initial requests additive and fix request overflow'
p4146
sg7
(lp4147
S'Bug'
p4148
asg10
I2995
sg11
(lp4149
S"I'd like to review the whole operator (can't do it today) because I have a feeling a complex serialization is required (i.e., a ```ProducerObserverArbiter``` level)."
p4150
aS"Yeah I'm not surprised at that, I suspected the same but put off a full head scratch till later."
p4151
aS"I'm merging this as is and perhaps come back later to think about corner cases remaining."
p4152
asg14
S'davidmoten:switch-overflow'
p4153
sbsI2996
(iPull
Pull
p4154
(dp4155
g3
S'`OperatorSwitchIfEmpty` suffered from these conditions:\r\n\r\n* Backpressure was not enabled for the source observable (as opposed to the altenate) because `setProducer` called `super.setProducer` instead of `child.setProducer`\r\n* Requests could be lost\r\n\r\nBot the of the above problems are solved by using `ProducerArbiter` from @akarnokd.\r\n\r\nIncluded two unit tests that failed on previous code.'
p4156
sg5
S'switchIfEmpty - fix backpressure bug and lost requests'
p4157
sg7
(lp4158
S'Bug'
p4159
asg10
I2996
sg11
(lp4160
S'Made those changes, ta.'
p4161
aS'Cleaned up a bit, made the parent subscriber class a static class and improved names'
p4162
aS'Well spotted, thanks. Updated.'
p4163
aS'Erk, thanks for noticing that. Updated.'
p4164
aS'Great, thanks!'
p4165
asg14
S'davidmoten:switch-if-empty-request-bug'
p4166
sbsI2997
(iPull
Pull
p4167
(dp4168
g3
S"This is the continuation of #2930 with a rebased PR.\r\n\r\nThere are sporadic testing failures with this PR so not ready for merge. I'll note some failures with this one soon."
p4169
sg5
S'Fix retry() race conditions'
p4170
sg7
(lp4171
S'Bug'
p4172
asg10
I2997
sg11
(lp4173
S"I still don't understand the cause of the failure. The best thing we can do is to increase that await timeout in the test to 5-7 seconds because this seems to be some transient hiccup rather than a hang. Otherwise, support this PR but defer the judgement to @benjchristensen ."
p4174
aS'removed last comment, ran on wrong branch'
p4175
aS"I bumped up await timeout to 5 minutes and the 54th run failed in  5 mins 9.9 seconds (on home desktop):\r\n\r\n```java\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel FAILED\r\n    java.lang.AssertionError: Data content mismatch: 950={beginningEveryTime x 136}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTes\r\nt.java:768)\r\n```\r\n\r\n5 minutes is a long time for some OS hiccup and makes me think that the freeze is occurring because of our code.\r\n\r\nI'll run another test and dump all threads after the freeze."
p4176
aS"Then we need a full rewrite, but I don't have time for it for at least 3 months."
p4177
aS'Thread dump after freeze occuring on 84th run on home desktop:\r\n\r\n```\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel STANDARD_OUT\r\n    testRetryWithBackpressureParallelLoop -> 0\r\n    "pool-1-thread-4" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "pool-1-thread-3" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "pool-1-thread-2" \r\n       java.lang.Thread.State: RUNNABLE\r\n            at sun.management.ThreadImpl.getThreadInfo1(Native Method)\r\n            at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:174)\r\n            at rx.internal.operators.OperatorRetryTest.dumpAllThreads(OperatorRetryTest.java:913)\r\n            at rx.internal.operators.OperatorRetryTest.access$300(OperatorRetryTest.java:44)\r\n            at rx.internal.operators.OperatorRetryTest$14.run(OperatorRetryTest.java:751)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "pool-1-thread-1" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-8" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-7" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-6" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-5" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-4" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-3" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1081)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-2" \r\n       java.lang.Thread.State: TIMED_WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "RxComputationThreadPool-1" \r\n       java.lang.Thread.State: TIMED_WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)\r\n            at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\r\n            at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "/0:0:0:0:0:0:0:1:51855 to /0:0:0:0:0:0:0:1%lo:50738 workers Thread 3" \r\n       java.lang.Thread.State: RUNNABLE\r\n            at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)\r\n            at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)\r\n            at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:79)\r\n            at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)\r\n            at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)\r\n            at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:101)\r\n            at org.gradle.messaging.remote.internal.inet.SocketConnection$SocketInputStream.read(SocketConnection.java:149)\r\n            at com.esotericsoftware.kryo.io.Input.fill(Input.java:139)\r\n            at com.esotericsoftware.kryo.io.Input.require(Input.java:159)\r\n            at com.esotericsoftware.kryo.io.Input.readByte(Input.java:255)\r\n            at org.gradle.messaging.serialize.kryo.KryoBackedDecoder.readByte(KryoBackedDecoder.java:80)\r\n            at org.gradle.messaging.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:69)\r\n            at org.gradle.messaging.remote.internal.hub.InterHubMessageSerializer$MessageReader.read(InterHubMessageSerializer.java:58)\r\n            at org.gradle.messaging.remote.internal.inet.SocketConnection.receive(SocketConnection.java:74)\r\n            at org.gradle.messaging.remote.internal.hub.MessageHub$ConnectionReceive.run(MessageHub.java:235)\r\n            at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "/0:0:0:0:0:0:0:1:51855 to /0:0:0:0:0:0:0:1%lo:50738 workers Thread 2" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\r\n            at org.gradle.messaging.remote.internal.hub.queue.EndPointQueue.take(EndPointQueue.java:49)\r\n            at org.gradle.messaging.remote.internal.hub.MessageHub$ConnectionDispatch.run(MessageHub.java:278)\r\n            at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "Test worker" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\r\n            at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\r\n            at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:771)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n            at java.lang.reflect.Method.invoke(Method.java:497)\r\n            at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\r\n            at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\r\n            at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\r\n            at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\r\n            at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\r\n            at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\r\n            at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\r\n            at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\r\n            at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\r\n            at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\r\n            at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\r\n            at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\r\n            at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\r\n            at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)\r\n            at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)\r\n            at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)\r\n            at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n            at java.lang.reflect.Method.invoke(Method.java:497)\r\n            at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n            at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n            at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\r\n            at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\r\n            at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n            at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n            at java.lang.reflect.Method.invoke(Method.java:497)\r\n            at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n            at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n            at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)\r\n            at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)\r\n            at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n            at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n            at java.lang.Thread.run(Thread.java:745)\r\n\r\n    "Signal Dispatcher" \r\n       java.lang.Thread.State: RUNNABLE\r\n\r\n    "Finalizer" \r\n       java.lang.Thread.State: WAITING\r\n            at java.lang.Object.wait(Native Method)\r\n            at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)\r\n            at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)\r\n            at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\r\n\r\n    "Reference Handler" \r\n       java.lang.Thread.State: WAITING\r\n            at java.lang.Object.wait(Native Method)\r\n            at java.lang.Object.wait(Object.java:502)\r\n            at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:157)\r\n\r\n    "main" \r\n       java.lang.Thread.State: WAITING\r\n            at sun.misc.Unsafe.park(Native Method)\r\n            at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\r\n            at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\r\n            at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\r\n            at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:68)\r\n            at org.gradle.api.internal.tasks.testing.worker.TestWorker.execute(TestWorker.java:44)\r\n            at org.gradle.process.internal.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:78)\r\n            at org.gradle.process.internal.child.ActionExecutionWorker.execute(ActionExecutionWorker.java:35)\r\n            at org.gradle.process.internal.child.ImplementationClassLoaderWorker.execute(ImplementationClassLoaderWorker.java:85)\r\n            at org.gradle.process.internal.child.ImplementationClassLoaderWorker.execute(ImplementationClassLoaderWorker.java:41)\r\n            at org.gradle.process.internal.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:43)\r\n            at org.gradle.process.internal.child.SystemApplicationClassLoaderWorker.call(SystemApplicationClassLoaderWorker.java:32)\r\n            at org.gradle.process.internal.launcher.BootstrapClassLoaderWorker.call(BootstrapClassLoaderWorker.java:46)\r\n            at org.gradle.process.internal.launcher.BootstrapClassLoaderWorker.call(BootstrapClassLoaderWorker.java:32)\r\n            at jarjar.org.gradle.process.internal.launcher.GradleWorkerMain.run(GradleWorkerMain.java:32)\r\n            at jarjar.org.gradle.process.internal.launcher.GradleWorkerMain.main(GradleWorkerMain.java:37)\r\n\r\n\r\n\r\nrx.internal.operators.OperatorRetryTest > testRetryWithBackpressureParallel FAILED\r\n    java.lang.AssertionError: Data content mismatch: 4208={beginningEveryTime x 128}\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at rx.internal.operators.OperatorRetryTest.testRetryWithBackpressureParallel(OperatorRetryTest.java:774)\r\n\r\n```'
p4178
aS'@akarnokd I suspect that the retry when code base is exposing a race condition somewhere in the merge, producer, subscriber interactions. I think that we should hold off on any kind of a rewrite until #2928 is resolved. '
p4179
aS"At the moment I don't suspect problems with the `OnSubscribeRedo` class and\r\n* `OperatorObserveOn` has been improved and inspected pretty closely (a little more to do there with unsubscribe)\r\n* I don't suspect `PublishSubject` after trying simpler single subscriber versions of `PublishSubject` \r\n* I scanned further into `Scheduler`s and the subscriber hook-up and found nothing\r\n\r\nI've been looking elsewhere and now my suspicions lie with the gradle infrastructure. I believe the tests for `retry` (redo) don't fail when jammed in a loop and left for a long time, it is only when gradle is repeatedly asked to clean and test that it fails infrequently and perhaps because of some NIO lockup. \r\n\r\nThis is an unusual case inasmuch as we don't normally rely on tests looping on gradle tests but rather run loops in a single JVM. A fresh JVM can sometimes expose race conditions that aren't as easily exposed by a warmed-up JVM but I think this is being pushed a bit far and might be exposing us to rarely encountered gradle bugs too.\r\n\r\nI think `OnSubscribeRedo` is ready for review (it certainly fixes known bugs with `retry` so there is some imperative to get this in).\r\n"
p4180
aS'I think it is as good as it can get for now. I think we can return to the case when we port things over to RxJava 2.0. Thanks!'
p4181
asg14
S'davidmoten:redo-fix-2'
p4182
sbsI2999
(iPull
Pull
p4183
(dp4184
g3
g53
sg5
S'Fix a wrong assertion in assertError'
p4185
sg7
(lp4186
sg10
I2999
sg11
(lp4187
S'Good catch!'
p4188
asg14
S'zsxwing:assert-error'
p4189
sbsI3000
(iPull
Pull
p4190
(dp4191
g3
S'`AssertionError(message, cause)` is a Java 7 API. This PR uses RuntimeException to replace it, just like `assertNoErrors`.'
p4192
sg5
S'Replace the Java 7 AssertionError(message, cause) with initCause'
p4193
sg7
(lp4194
sg10
I3000
sg11
(lp4195
S'Great, thanks!'
p4196
asg14
S'zsxwing:java6'
p4197
sbsI3001
(iPull
Pull
p4198
(dp4199
g3
S'minor simplification in `OperatorDelayWithSelector` and `OperatorMulticast`'
p4200
sg5
S'use Subscribers.from()'
p4201
sg7
(lp4202
S'Enhancement'
p4203
asg10
I3001
sg11
(lp4204
S'Looks okay, thanks!'
p4205
asg14
S'davidmoten:use-subscribers-from'
p4206
sbsI3009
(iPull
Pull
p4207
(dp4208
g3
S'This PR is a fix for #3006.\r\n\r\nEnsured `it.hasNext()` not called more often than required especially when unsubscription happens before completion.\r\n\r\nAdded two unit tests (one for fast path and the other for backpressure) that failed on previous codebase.'
p4209
sg5
S'Observable.from(iterable) - ensure it.hasNext() is not called unnecessarily #3006'
p4210
sg7
(lp4211
S'Enhancement'
p4212
asg10
I3009
sg11
(lp4213
S'You forgot to implement ````remove()``` which is only default in Java 8.'
p4214
aS'Ta, fixed.'
p4215
aS"Still it doesn't compile:\r\n\r\n/home/travis/build/ReactiveX/RxJava/src/test/java/rx/internal/operators/OnSubscribeFromIterableTest.java:233: error: <anonymous rx.internal.operators.OnSubscribeFromIterableTest$4$1> is not abstract and does not override abstract method remove() in Iterator\r\n                return new Iterator<Integer>() {\r\n"
p4216
aS'woops, there were two of them. Fixed.'
p4217
aS'LGTM :+1: '
p4218
aS'Thanks!'
p4219
asg14
S'davidmoten:from-iter-bug'
p4220
sbsI3010
(iPull
Pull
p4221
(dp4222
g3
S'An alternative to #2928 by using flatMap(o -> o) == merge() identity.\r\n\r\nBenchmark:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8029913/845868ae-0dc2-11e5-881e-54cb5e57b39d.png)\r\n\r\nIt is slightly better than #2928 for flatMap() benchmarks and slightly worse than merge()'
p4223
sg5
S'Operator flat map rewrite'
p4224
sg7
(lp4225
S'Enhancement'
p4226
asg10
I3010
sg11
(lp4227
S'What do the columns represent in that benchmark?'
p4228
aS'1.x = current head, \r\n1st try = rewrite but only with the scalar optimizations, \r\n3rd try = rewrite+scalar optimizations + unbounded mode optimizations, \r\nflatMap = merge implemented with flatMap instead the other way around so merge(map(func)) inlines func into merge and saves on a lift() call.'
p4229
aS"I made this comment on your tool's site but I think we can't assess whether the benchmarks indicate *significant* change unless the error value is taken into account and I assume these visualizations always ignore the error value (is that right?). "
p4230
aS"I'm closing this in favor of the recent changes in #2928."
p4231
asg14
S'akarnokd:OperatorFlatMapRewrite'
p4232
sbsI3011
(iPull
Pull
p4233
(dp4234
g3
S'Returning if timeout occurred from `TestSubscriber.awaitTerminalEvent` is a feature I wanted and put in this PR. It was a void method and now returns a boolean so this should be a non-breaking change. \r\n\r\nIn the process I noticed that `TestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeout` was broken in that it assumed that an exception was thrown on timeout.  Fixed this making use of the boolean return of `TestSubscriber.awaitTerminalEvent`.\r\n\r\nAdded two unit tests.\r\n\r\n'
p4235
sg5
S'Fix TestSubscriber awaitTerminalEvent methods'
p4236
sg7
(lp4237
sg10
I3011
sg11
(lp4238
S"Changing existing method definition is a breaking change (I've also tried this exact change and was rejected)."
p4239
aS"Are you referring to  #2594?  That was about throwing exceptions on timeout not the return value. Unfortunately that commit broke `TestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeout`. \r\n\r\nI'd like to get this reviewed because I don't think this PR is a breaking change (void method -> boolean method should affect no-one). Oh unless they are overriding that method in a `TestSubscriber` subclass yuk.\r\n\r\nIf I can't get approval to use a boolean return value then I can dumb this PR down to fix `TestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeout`. \r\n\r\n"
p4240
aS'Maybe we can add new methods and deprecate the old ones. '
p4241
aS'> void method -> boolean method should affect no-one\r\n\r\nThis is binary incompatible. See: https://docs.oracle.com/javase/specs/jls/se7/html/jls-13.html#jls-13.4.15'
p4242
aS'Thanks Jake.'
p4243
aS'The binary incompatibility makes this a non-option for merging. '
p4244
aS'Closing out due to incompatibility. An alternate solution can be brought up in a new PR.'
p4245
aS"Hi Ben,\r\nSorry for commenting on a closed issue, but this came up when searching for testing timeouts with awaitTerminalEvent. Has there been an alternative PR or is this still broken? \r\n\r\nI was looking at the latest 1.x code and don't see it fixed or an alternative method. I can see it was in fact fixed in the 2.x branch.\r\n\r\nFor 1x, is there a workaround on how to test a timeout? I guess I could use `awaitTerminalEventAndUnsubscribeOnTimeout` in combination with `doOnUnsubscribe()` (as seen in `TestSubscriberTest.testAwaitTerminalEventWithDurationAndUnsubscribeOnTimeout`). But maybe there's an easier way?"
p4246
asg14
S'davidmoten:ts-await-return'
p4247
sbsI3012
(iPull
Pull
p4248
(dp4249
g3
S'Adds `rx.Single` as an "Observable Future" for representing work with a single return value.\r\n\r\nSee https://github.com/ReactiveX/RxJava/issues/1594 rx.Future/Task/Async/Single\r\n\r\nThis provides a type similar to `Future` in that it represents a scalar unit of work, but it is lazy like an `Observable` and many `Single`s can be combined into an `Observable` stream. Note how `Single.zip` returns `Single<R>` whereas `Single.merge` returns `Observable<R>`.\r\n\r\nExamples of using this class:\r\n\r\n```java\r\nimport rx.Observable;\r\nimport rx.Single;\r\n\r\npublic class TaskExamples {\r\n\r\n    public static void main(String... args) {\r\n        // scalar synchronous value\r\n        Single<String> t1 = Single.create(t -> {\r\n            t.onSuccess("Hello World!");\r\n        });\r\n\r\n        // scalar synchronous value using helper method\r\n        Single<Integer> t2 = Single.just(1);\r\n\r\n        // synchronous error\r\n        Single<String> error = Single.create(t -> {\r\n            t.onError(new RuntimeException("failed!"));\r\n        });\r\n\r\n        // executing\r\n        t1.subscribe(System.out::println);\r\n        t2.subscribe(System.out::println);\r\n        error.subscribe(System.out::println, e -> System.out.println(e.getMessage()));\r\n\r\n        // scalar Singles for request/response like a Future\r\n        getData(1).subscribe(System.out::println);\r\n\r\n        // combining Tasks into another Task\r\n        Single<String> zipped = Single.zip(t1, t2, (a, b) -> a + " -- " + b);\r\n\r\n        // combining Singles into an Observable stream\r\n        Observable<String> merged = Single.merge(t1, t2.map(String::valueOf), getData(3));\r\n        Observable<String> mergeWith = t1.mergeWith(t2.map(String::valueOf));\r\n\r\n        zipped.subscribe(v -> System.out.println("zipped => " + v));\r\n        merged.subscribe(v -> System.out.println("merged => " + v));\r\n        mergeWith.subscribe(v -> System.out.println("mergeWith => " + v));\r\n    }\r\n\r\n    /**\r\n     * Example of an async scalar execution using Single.create\r\n     * <p>\r\n     * This shows the lazy, idiomatic approach for Rx exactly like an Observable except scalar.\r\n     *\r\n     * @param arg\r\n     * @return\r\n     */\r\n    public static Single<String> getData(int arg) {\r\n        return Single.create(s -> {\r\n            new Thread(() -> {\r\n                try {\r\n                    Thread.sleep(500);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n                // deliver value\r\n                    s.onSuccess("Data=" + arg);\r\n                }).start();\r\n        });\r\n    }\r\n\r\n}\r\n```'
p4250
sg5
S'rx.Single'
p4251
sg7
(lp4252
S'Enhancement'
p4253
asg10
I3012
sg11
(lp4254
S"I don't see any way to cancel a subscription to a `Single`."
p4255
aS"When using `subscribe(Subscriber s)` then the `Subscriber` can be unsubscribed, just like an `Observable`. This is how `timeout` works to cancel it.\r\n\r\nThe `SingleObserver` doesn't expose this, similar to `Observer`. \r\n\r\nWe don't currently have something like `take` or `takeUntil`, as I felt it was odd to have something called `take` when only a single response can be emitted. I think `takeUntil(Single/Observable)` is a valid operator for a `Single` though. \r\n\r\nThe `subscribe` methods have a `void` return type as per the intentions for v2 instead of returning `Subscription` like `Observable.subscribe` does. We could make them return `Subscription` though. \r\n\r\nWhat do you think should be done?"
p4256
aS'> The SingleObserver doesn\'t expose this, similar to Observer.\r\n\r\nbut `Observable.subscribe()` returns a `Subscription` for them.\r\n\r\nThis throws NPE:\r\n```java\r\nSingle.create(s -> {\r\n    new Thread(() -> {\r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        // deliver value\r\n            s.onSuccess("Data=" + arg);\r\n    }).start();\r\n}).timeout(1, TimeUnit.SECONDS).subscribe(System.out::println, Throwable::printStackTrace);\r\nThread.sleep(2000);\r\n\r\nException in thread "main" java.lang.NullPointerException\r\n\tat rx.Single.toObservable(Single.java:232)\r\n\tat rx.Single.timeout(Single.java:1817)\r\n\tat rx.Single.timeout(Single.java:1740)\r\n\tat SingleTest.main(SingleTest.java:36)\r\n```\r\nIf I use the other overload of timeout, it quits only after 5 seconds, instead of 2:\r\n```java\r\npublic static void main(String[] args) throws Exception {\r\n    Single.create(s -> {\r\n        new Thread(() -> {\r\n            try {\r\n                Thread.sleep(5000);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            // deliver value\r\n             s.onSuccess("Data");\r\n        }).start();\r\n    }).timeout(1, TimeUnit.SECONDS, Single.just("Alt"))\r\n    .subscribe(System.out::println, Throwable::printStackTrace);\r\n    Thread.sleep(2000);\r\n}\r\n```'
p4257
aS'> but Observable.subscribe() returns a Subscription for them.\r\n\r\nSee what I said about that in the previous comment. In 2.x we intend on not returning `Subscription` so I chose not to do that here. Instead unsubscription should happen from within the stream, such as via a `takeUntil` operator.'
p4258
aS'> This throws NPE\r\n\r\nYup, it certainly did :-) Unit test added. I had a null not being handled. '
p4259
aS'These tests are passing and not taking 5 seconds:\r\n\r\n```java\r\n    @Test\r\n    public void testTimeout() {\r\n        TestSubscriber<String> ts = new TestSubscriber<String>();\r\n        Single<String> s = Single.create(new OnSubscribe<String>() {\r\n\r\n            @Override\r\n            public void call(SingleObserver<? super String> s) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException e) {\r\n                    // ignore as we expect this for the test\r\n                }\r\n                s.onSuccess("success");\r\n            }\r\n            \r\n        }).subscribeOn(Schedulers.io());\r\n        \r\n        s.timeout(100, TimeUnit.MILLISECONDS).subscribe(ts);\r\n        \r\n        ts.awaitTerminalEvent();\r\n        ts.assertError(TimeoutException.class);\r\n    }\r\n    \r\n    @Test\r\n    public void testTimeoutWithFallback() {\r\n        TestSubscriber<String> ts = new TestSubscriber<String>();\r\n        Single<String> s = Single.create(new OnSubscribe<String>() {\r\n\r\n            @Override\r\n            public void call(SingleObserver<? super String> s) {\r\n                try {\r\n                    Thread.sleep(5000);\r\n                } catch (InterruptedException e) {\r\n                    // ignore as we expect this for the test\r\n                }\r\n                s.onSuccess("success");\r\n            }\r\n            \r\n        }).subscribeOn(Schedulers.io());\r\n        \r\n        s.timeout(100, TimeUnit.MILLISECONDS, Single.just("hello")).subscribe(ts);\r\n        \r\n        ts.awaitTerminalEvent();\r\n        ts.assertNoErrors();\r\n        ts.assertValue("hello");\r\n    }\r\n```\r\n\r\n![screen shot 2015-06-09 at 4 20 40 pm](https://cloud.githubusercontent.com/assets/813492/8071902/80036f90-0ec3-11e5-94b1-26deadc2019c.png)\r\n'
p4260
aS'With code in its current shape, intended for experimentation, and avoiding any controversial public APIs, shall we proceed with merging it?'
p4261
aS'Ship that puppy.'
p4262
aS'No backpressure?'
p4263
aS'> subscribeOn(Schedulers.io())\r\n\r\nSaved by the interrupt. But what if Single isn\'t subscribed to on one of the standard Schedulers, or it is subscribed to from a scheduler which doesn\'t call Future.cancel() with true?\r\n\r\nBesides, the programming advantage of Subscriber is that one can add resources to it which will get unsubscribed automatically.\r\n\r\nSo instead of SingleObserver, I suggest the following interface: \r\n```java\r\ninterface SingleSubscriber<T> {\r\n    void onSubscribe(Subscription s);\r\n    void onSuccess(T value);\r\n    void onError(Throwable ex);\r\n}\r\n\r\nSingle.create(s -> {\r\n    Thread t = new Thread(() -> {\r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        // deliver value\r\n        s.onSuccess("Data");\r\n    });\r\n    s.onSubscribe(Subscription.create(() -> t.interrupt());\r\n    t.start();\r\n})\r\n\r\nSingle.create(s -> {\r\n    SubscriptionList slist = new SubscriptionList();\r\n    s.onSubscribe(slist);\r\n    try (InputStream in = new FileInputStream("file.dat")) {\r\n        slist.add(Subscriptions.create(() -> Closeables.closeSilently(io)));\r\n        byte[] data = new byte[in.available()];\r\n        in.read(data);\r\n        s.onSuccess(data);\r\n    } catch (IOException ex) {\r\n       if (!slist.isUnsubscribed()) {\r\n           s.onError(ex);\r\n       }\r\n    }\r\n});\r\n\r\n```'
p4264
aS"> I suggest the following interface\r\n\r\nInteresting. I'm not thrilled though by the implicit contract this creates unless invoking `onSubscribe` is completely optional. But if it's optional it would also be awkward. \r\n\r\nIf we're going this route we should just skip the `SingleObserver` and do a `SingleSubscriber` just like the normal `Subscriber` and always have it injected in the top as a cancellation token so a `Single` can register unsubscribe behavior with it. That way there isn't an awkward negotiation requirement.\r\n\r\nI'll make changes to accommodate this and ask for your feedback.\r\n"
p4265
aS"> No backpressure?\r\n\r\nFor a single valued emission, no I don't think it should care. It significantly complicates things and I think it's silly to worry about backpressure and flow control on a type that emits a single notification, either `onError` or `onSuccess`. Don't subscribe to it if a single emission can't be handled.\r\n\r\nWhen it gets composed however, then the backpressure semantics of `Observable` would kick in, such as with `merge` when many `Single`s are merged together. "
p4266
aS'> No backpressure?\r\n\r\nI guess @davidmoten meant where the Single and Observable meet, for example in toObservable() where you should use `SingleDelayedProducer` to introduce the correct backpessure interop.'
p4267
aS"> I'm not thrilled though by the implicit contract this creates unless invoking onSubscribe is completely optional. But if it's optional it would also be awkward.\r\n\r\nIt follows the reactive-streams concept. Without it, the cancellation wouldn't compose through and you'd rely only upon the ability of `subscribeOn` to interrupt an Rx thread. I'd totally go with the `SingleObserver`/`SingleSubscriber` pair if `subscribe(SingleObserver)` returned `Subscription` at least (and `SingleSubscriber` could extend `Subscription` as well)."
p4268
aS"> It follows the reactive-streams concept.\r\n\r\nI know, but I don't like mixing patterns in v1. It would be odd to have `Observable` handle cancellation one way and `Single` do it another way. \r\n\r\nTake a look at the code now. It has a `SingleSubscriber` instead of `SingleObserver` and composes cancellation that same way as `Observable` since `SingleSubscriber` implements `Subscription`. "
p4269
aS'> where you should use SingleDelayedProducer to introduce the correct backpessure interop.\r\n\r\nAh okay, I can buy into that ... so like this:\r\n\r\n```java\r\n    protected Single(final OnSubscribe<T> f) {\r\n        // bridge between OnSubscribe (which all Operators and Observables use) and OnExecute (for Single)\r\n        this.onSubscribe = new Observable.OnSubscribe<T>() {\r\n\r\n            @Override\r\n            public void call(final Subscriber<? super T> child) {\r\n                final SingleDelayedProducer<T> producer = new SingleDelayedProducer<T>(child);\r\n                child.setProducer(producer);\r\n                SingleSubscriber<T> ss = new SingleSubscriber<T>() {\r\n\r\n                    @Override\r\n                    public void onSuccess(T value) {\r\n                        producer.setValue(value);\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(Throwable error) {\r\n                        child.onError(error);\r\n                    }\r\n\r\n                };\r\n                child.add(ss);\r\n                f.call(ss);\r\n            }\r\n\r\n        };\r\n    }\r\n```\r\n\r\nIt still feels like a lot of overhead for something that should never need backpressure :-/ If this shows poor performance I would drop this and just leave it to things like `merge` to always handle receiving 1 value per `Single`. '
p4270
aS'See test for backpressure here: https://github.com/ReactiveX/RxJava/commit/7876b0cd402df8e19617baad8d97f5ea3fe84600#diff-6e59701fc9262bf5107abc5d12d7a928R375\r\n\r\nfor unsubscribe: https://github.com/ReactiveX/RxJava/commit/7876b0cd402df8e19617baad8d97f5ea3fe84600#diff-6e59701fc9262bf5107abc5d12d7a928R252'
p4271
aS"> It still feels like a lot of overhead for something that should never need backpressure\r\n\r\nI thought its easier to change `toObservable` and introduce the backpressure logic there instead of at the very root.\r\n\r\n>If this shows poor performance I would drop this and just leave it\r\n\r\nI haven't benchmarked this yet, but I believe `Single` already maximizes the overhead around delivering values. Based on the latest merge() benchmark where just(0).flatMap(v -> just(0)) delivers ~6M values, a stream of 1000 values, in total, delivers 45/76M values per second."
p4272
aS"> maximizes the overhead around delivering values\r\n\r\nComparing with a stream of 1000 is not a valid comparison. A `Future` or at most an `Observable` of a single value is a valid comparison. \r\n\r\nThe reason a `Single` would be used is because the data source is not represented by a stream of 1000 values.\r\n\r\nNote that `Single` does not yet have any optimizations done. For example, we could use similar approaches as `ScalarSynchronousObservable` for `Single.just`. \r\n\r\n> I thought its easier to change toObservable\r\n\r\nBut then the test cases I provided wouldn't work where a `Subscriber` is used with `request(0)`. So it depends on what you're trying to solve for. \r\n\r\nLook at what `toObservable` is doing and you'll notice that a `Single` is just a different type around the same `Observable.OnSubscribe` internally. This is done on purpose to allow reusing `Observable` operators. \r\n\r\nIf we agree with the public API of `SingleSubscriber` then the rest of this design is internal implementation details (I think) so we can move forward and always change it later.\r\n\r\nLooking at the code as it currently stands, is there anything more you want changed before proceeding with it?"
p4273
aS"> Comparing with a stream of 1000 is not a valid comparison.\r\n\r\nSo I guess delivering 1000 items through AbstractOnSubscribe one at a time isn't really comparable with AbstractProducer emitting the same amount when requested all at once.\r\n\r\nRegardless, If the use case for `Single` will be to create 1000s of them to deliver a single value each, then you'd better off restructuring the business logic around an (I hoped I could avoid using the e-word) event-bus.\r\n\r\n> The reason a Single would be used is because the data source is not represented by a stream of 1000 values.\r\n\r\nIt really depends on how long the computation takes to become available: if it is in microsecond or millisecond range, then the few dozen nanoseconds CAS takes inside the `SingleDelayedProducer.setValue` doesn't really matter.\r\n\r\n> Looking at the code as it currently stands, is there anything more you want changed before proceeding with it?\r\n\r\nSo I'm guessing there won't be any unsubscription possibility if one uses the non- Subscriber or SingleSubscriber-based `subscribe()` methods?\r\n\r\n> Note that Single does not yet have any optimizations done.\r\n\r\nPerhaps you could include benchmarks already so the improvements can be measured."
p4274
aS'> then you\'d better off restructuring the business logic\r\n\r\nSure, but that\'s why we have different abstractions, types and tools.\r\n\r\n> It really depends on how long the computation takes to become available\r\n\r\nThe point of `Single` is to represent a single async unit of work, typically IO. If it is microseconds it is most certain being done "the wrong way", similar to putting fine grained work on an Executor and receiving a Future.\r\n\r\n> So I\'m guessing there won\'t be any unsubscription possibility if one uses the non- Subscriber or SingleSubscriber-based subscribe() methods?\r\n\r\nI guess we can make those return `Subscription` since that\'s how `Observable` works. I\'ll change that before merging.'
p4275
aS'Perf, as expected, is poor for representing microsecond scale computations, but totally fine for IO related request/response which this is modeling:\r\n\r\n```\r\nBenchmark                                               Mode   Samples        Score  Score error    Units\r\nr.SinglePerfBaseline.newSingleAndSubscriberEachTime    thrpt         5  8303803.489   779599.284    ops/s\r\nr.SinglePerfBaseline.singleConsumption                 thrpt         5  8409729.682   396871.179    ops/s\r\nr.SinglePerfBaseline.singleConsumptionUnsafe           thrpt         5 15629012.609  1838899.288    ops/s\r\n```\r\n\r\nAlso note that we are maintaining the same performance hit of `SafeSubscriber` and punting on solving that until 2.x as it is so baked into how `Subscriber` and `Observable` work.'
p4276
aS'Proceeding with merge. It is all marked as `@Experimental` and I am not releasing 1.0.13 yet.'
p4277
asg14
S'benjchristensen:single-type'
p4278
sbsI3018
(iPull
Pull
p4279
(dp4280
g3
S'The method `TestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeout` did not unsubscribe on timeout. This PR fixes it.'
p4281
sg5
S'TestSubscriber - fix awaitTerminalEventAndUnsubscribeOnTimeout'
p4282
sg7
(lp4283
sg10
I3018
sg11
(lp4284
S'Thanks.'
p4285
asg14
S'davidmoten:ts-await-bug'
p4286
sbsI3019
(iPull
Pull
p4287
(dp4288
g3
g53
sg5
S'Javadoc improvements for new Single class'
p4289
sg7
(lp4290
sg10
I3019
sg11
(lp4291
sg14
S'ReactiveX:PLP'
p4292
sbsI3022
(iPull
Pull
p4293
(dp4294
g3
S"This comes back from time to time (#1730): some containers, when removing RxJava enabled applications expect it to shut down all its threads but by default, computation threads can't be shut down manually and io threads take 1 minute to shut down on their own. \r\n\r\nThis PR adds the capability to make them shut down their worker threads more eagerly. Since such shutdown would be terminal and thus break any subsequent test, a restart capability is required.\r\n\r\nTherefore, I've introduced the optional `SchedulerLifecycle` interface which if implemented by a Scheduler, makes it eligible for the `Schedulers` factory to trigger a shutdown or restart for all kinds of schedulers.\r\n\r\nNaturally, this implies some extra cost:\r\n\r\n  - The underlying pool of the computation scheduler is no longer constant and involves a volatile get every time a worker is requested. I haven't benchmarked this but it just adds a cheap load on x86 and shouldn't be a performance hit.\r\n  - Since we need to track all ThreadWorkers of the io scheduler, this involves a `CompositeSubscription` and the cost of starting new workers is increased by the synchronization and HashSet.add() operations. However, since starting a new thread in itself is somewhat expensive, again this shouldn't be a performance hit although it's hard to benchmark it.\r\n\r\nIn addition, to support proper task rejection after the scheduler has shut down, both scheduler types require a constant shutdown worker. These workers are created at class load time and will spin up a thread for a short duration before they shut it down. They don't affect, performance wise, the normal operations but the app startup time might get increased. The tradeoff here is to save on a mandatory class cast whenever a worker is requested."
p4295
sg5
S'Scheduler shutdown capability'
p4296
sg7
(lp4297
S'Enhancement'
p4298
asg10
I3022
sg11
(lp4299
S"It appears I've made a copy-paste error and missed the `RxScheduledExecutorPool`."
p4300
aS"I think this all looks good. @abersnaze I'd appreciate your review of this as well.\r\n\r\nMy only real question is whether we should have `shutdown`/`start`, or just `shutdown` or `reset` that shuts everything down and resets it to a state where it will automatically start up again if anything is used without needing an explicit `start`.\r\n\r\nEverything else seems to be internal changes and not public API."
p4301
aS'Cool, I was hoping for this feature!\r\n\r\nSmall question: would it make sense for the user to be able to control wether the threads execute in daemon mode when the user controls the lifecycle of the threads ? Schedulers.computation() threads are created in daemon mode by default'
p4302
aS'Holding off as I want to finish discussing the shutdown/start vs reset API decision. '
p4303
aS"I'll submit a new PR since Eclipse rebase is [broken](https://bugs.eclipse.org/bugs/show_bug.cgi?id=470013) at the moment."
p4304
asg14
S'akarnokd:SchedulerShutdownV2'
p4305
sbsI3023
(iPull
Pull
p4306
(dp4307
g3
S"There is a need for auto-connection capability for an arbitrary ConnectableObservable similar to how it is possible now to use cache() as an auto-connected unbounded replay.\r\n\r\nThe new `autoConnect()` method let's specify the number of `Subscriber`s required for the real connection to happen and also offers the ability to receive the connection `Subscription`.\r\n\r\nI've also updated the parameter name of `cache(int)` to reflect it is a capacity hint and not a bound."
p4308
sg5
S'ConnectableObservable autoConnect operator'
p4309
sg7
(lp4310
S'Enhancement'
p4311
asg10
I3023
sg11
(lp4312
S'`autoConnect` is a nice additional feature. Like `refCount` except it never disconnects. I particularly like the overload where it auto connects when the specific number of subscribers arrive.'
p4313
asg14
S'akarnokd:AutoConnect'
p4314
sbsI3028
(iPull
Pull
p4315
(dp4316
g3
S"Originally, the error through `delay` was emitted directly to the child without serializing in respect of an in-flight `onNext()`. This change schedules the error on the worker with no delay which ensures proper serialization. (The alternative would be to wrap the child into a `SerializedSubscriber`, however, that wouldn't immediately cancel any in-flight onNext schedules.)"
p4317
sg5
S'Delay: error cut ahead was not properly serialized'
p4318
sg7
(lp4319
S'Bug'
p4320
asg10
I3028
sg11
(lp4321
sg14
S'akarnokd:DelayErrorCutaheadFix'
p4322
sbsI3029
(iPull
Pull
p4323
(dp4324
g3
S'Somehow, every second rebase I do I get this tab-space conversion which pollutes my PRs. '
p4325
sg5
S'Replaced tabs with spaces for good.'
p4326
sg7
(lp4327
sg10
I3029
sg11
(lp4328
S'You might check your git config. I had an app which automatically changed my git settings from spaces to tabs'
p4329
aS'Yes I had issues at one point and messed with my git config:\nhttps://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace\n'
p4330
asg14
S'akarnokd:TabsReplacedWithSpaces'
p4331
sbsI3030
(iPull
Pull
p4332
(dp4333
g3
S"I'm proposing an operator that can change (lower) the in-flight request amount for both an unlimited downstream and for a backpressuring downstream.\r\n\r\nI'm not certain about its use cases besides forcing a slow-path emission in a stream where the Subscriber requests Long.MAX_VALUE, for example with the rewritten merge of #2928 where one merges long streams asynchronously, the internal serialization buffer can get quite large. The use of this operator would switch it back to a slower-path merging where bounded buffers are employed."
p4334
sg5
S'Operator requestBatching to change the in-flight event amounts'
p4335
sg7
(lp4336
S'Enhancement'
p4337
asg10
I3030
sg11
(lp4338
S'> I\'m not certain about its use cases\r\n\r\nI\'m struggling to understand use cases for this since this would naturally occur from async operators. \r\n\r\nI haven\'t thought through it enough, but my immediate concern is that we\'d have edge cases where we hang the system as a consumer thinks it has requested values, but the producer is not emitting as the "batcher" is waiting until some threshold to send them up. \r\n\r\n> besides forcing a slow-path emission in a stream where the Subscriber requests Long.MAX_VALUE, for example with the rewritten merge\r\n\r\nThe `merge` case does not seem to be a use case for this, as even with this it would still cause unbounded buffer growth because `merge` in #2928 will swallow all data thrown at it, regardless of how requests are batched. It would just keep requesting up ... and if it didn\'t, then it has correctly implemented backpressure and doesn\'t need this. \r\n\r\nAdditionally, we would have to apply this operator to every stream being merged, which should not be needed. Instead `merge` just needs to correctly do back pressure, like the current implementation does. '
p4339
aS'@akarnokd do you still want to pursue this? '
p4340
aS'No.'
p4341
asg14
S'akarnokd:RequestBatcher'
p4342
sbsI3031
(iPull
Pull
p4343
(dp4344
g3
S'This test was reported broken in https://github.com/ReactiveX/RxJava/pull/2928#issuecomment-113229698\r\n\r\nFixing by adding the use of LatchedObserver.\r\n\r\nPreviously broken test results:\r\n\r\n```\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   363615.622   115041.519    ops/s\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      350.204      125.773    ops/s\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.319        0.184    ops/s\r\n```\r\n\r\nFixed results:\r\n\r\n```\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   102109.681     8709.920    ops/s\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      403.071      130.651    ops/s\r\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.355        0.070    ops/s\r\n```'
p4345
sg5
S'Fix OperatorFlatMapPerf.flatMapIntPassthruAsync Perf Test'
p4346
sg7
(lp4347
sg10
I3031
sg11
(lp4348
S'@akarnokd Let me know if this fixes the issue you reported.'
p4349
aS"Yes, that's it."
p4350
asg14
S'benjchristensen:fix-flatMapIntPassthruAsync'
p4351
sbsI3032
(iPull
Pull
p4352
(dp4353
g3
S"known available amount.\r\n\r\nThis optimization switches to the fast-path if one requests at least the amount the producer can provide instead of just when requesting MAX_VALUE.\r\n\r\n```\r\n1.x\r\nBenchmark                       (size)         Score  Score error\r\nrangeWithBackpressureRequest         1  82865476,500  3050323,928\r\nrangeWithBackpressureRequest      1000    279002,692    11523,399\r\nrangeWithBackpressureRequest   1000000       172,744       17,732\r\nrangeWithoutBackpressure             1  84039644,379  4026176,141\r\nrangeWithoutBackpressure          1000    285125,368     6292,095\r\nrangeWithoutBackpressure       1000000       261,569       28,274\r\n\r\nThis PR\r\nBenchmark                       (size)         Score  Score error\r\nrangeWithBackpressureRequest         1  86083847,250  3562236,352\r\nrangeWithBackpressureRequest      1000    289972,949    16689,560\r\nrangeWithBackpressureRequest   1000000       278,011       46,335\r\nrangeWithoutBackpressure             1  89601089,634  2260936,315\r\nrangeWithoutBackpressure          1000    294289,152     8461,897\r\nrangeWithoutBackpressure       1000000       272,347       22,644\r\n```\r\n\r\nI'm not sure if there is an existing benchmark for `from()` or not."
p4354
sg5
S'range() and from() run in fast-path in case request is at least the'
p4355
sg7
(lp4356
S'Enhancement'
p4357
asg10
I3032
sg11
(lp4358
S"I have second thoughts about `from()`. If one hands it a collection which throws `ConcurrentModificationException`, then the optimization is valid: you should use effectively immutable Iterables anyway. \r\n\r\nHowever, if you iterate a `ConcurrentHashMap` which doesn't throw and is likely to deliver newly put in values, the fast-path is likely to produce more than requested as the hasNext() is a moving target.\r\n\r\nWe could blacklist a few sources but there isn't a distinctive type for these concurrently-modifiable collection classes (remember, we are dealing with CHM.keySet() and CHM.values() here, not with CHM directly)."
p4359
aS'Some more benchmarks:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/8250439/1a051136-1674-11e5-94d7-aec6630b984e.png)\r\n\r\nFor the drastic drops:\r\n```\r\nflatMapIntPassthruAsync       1  thrpt         5   120125,781   140629,155    ops/s\r\nobserveOnNewThread            1  thrpt         5    12582,907     4900,400    ops/s\r\nrangeWithBackpressureRequest  1  thrpt         5 86241753,647 17739600,235    ops/s\r\n```'
p4360
aS"> However, if you iterate a ConcurrentHashMap which doesn't throw and is likely to deliver newly put in values, the fast-path is likely to produce more than requested as the hasNext() is a moving target.\r\n\r\nThat's a valid point. Leaving this open for further discussion."
p4361
aS'Perhaps we should just whitelist the ones we know are safe for now? `LinkedList`, `ArrayList` (since they would throw), and `java.util.Collections$UnmodifiableCollection`?'
p4362
aS"I'll redo the `range()` optimization separately."
p4363
asg14
S'akarnokd:FastPath'
p4364
sbsI3033
(iPull
Pull
p4365
(dp4366
g3
S'This PR includes these changes:\r\n\r\n* standardized parameter names for `take`, `takeLast`, `skip`, `limit` to use `count` instead of `num`\r\n* enhanced the javadoc for `takeLast` so it is clear for all overrides that if the observable contains less than `count` items then all will be emitted.\r\n* improved the exception message thrown by `OperatorTakeLast` when `count` <0\r\n\r\nAddresses #3027'
p4367
sg5
S'takeLast() javadoc fixes, standardize parameter names (count instead of num)'
p4368
sg7
(lp4369
S'Documentation'
p4370
asg10
I3033
sg11
(lp4371
S'Thanks!'
p4372
asg14
S'davidmoten:take-last-javadoc'
p4373
sbsI3034
(iPull
Pull
p4374
(dp4375
g3
S'The singleton `EMPTY` returned by `Observable.empty()` can be instantiated lazily because it is not always required.'
p4376
sg5
S'Instantiate EMPTY lazily'
p4377
sg7
(lp4378
S'Enhancement'
p4379
asg10
I3034
sg11
(lp4380
S'Thanks.'
p4381
asg14
S'davidmoten:empty-2'
p4382
sbsI3039
(iPull
Pull
p4383
(dp4384
g3
S'Fixed unsubscription propagation of two Window variants (boundary, start-end).\r\n\r\nIn addition, there was a discrepancy reported on [StackOverflow](http://stackoverflow.com/questions/30963993/rxjava-window-buffer-overload-questions-incompatibility-with-rx-net) regarding the factory-boundary version. In Rx.NET, the factory is called whenever the previous boundary observable has produced a value. I.e., instead of a series of `onNexts` from the same `Observable`, it uses a series of `Observable`s with a single `onNext` emission as a boundary indicator.'
p4385
sg5
S'Window with Observable: fixed unsubscription and behavior'
p4386
sg7
(lp4387
S'Bug'
p4388
asg10
I3039
sg11
(lp4389
S'Thank you for tackling this.'
p4390
asg14
S'akarnokd:WindowFuncFix'
p4391
sbsI3042
(iPull
Pull
p4392
(dp4393
g3
S"When looking at implementing backpressure support for `defaultIfEmpty` the obvious strategy is to reuse `switchIfEmpty` and get rid of `OperatorDefaultIfEmpty`. That's what this PR does.\r\n\r\n\r\nThere is a little bit of overhead with using `Observable.from(Arrays.asList(defaultValue))` as the alternate observable. Might be nice to have a version of `Observable.just(item)` that supports backpressure to use in its place (you've mentioned this before @akarnokd). "
p4394
sg5
S'add backpressure support for defaultIfEmpty() '
p4395
sg7
(lp4396
S'Enhancement'
p4397
asg10
I3042
sg11
(lp4398
S'You could just create an Observable inline:\r\n\r\n```java\r\npublic final Observable<T> defaultIfEmpty(T defaultValue) {\r\n    //if empty switch to an observable that emits defaultValue and supports backpressure\r\n    return switchIfEmpty(Observable.create(s -> {\r\n        s.setProducer(new SingleProducer<>(defaultValue));\r\n    }));\r\n}\r\n```'
p4399
aS"Great, can do.  I'd like to see that as its own method. I'll put that change in and open another issue so method names/overrides and desirability can be discussed."
p4400
aS'Thanks!'
p4401
asg14
S'davidmoten:default-if-empty-backp-2'
p4402
sbsI3043
(iPull
Pull
p4403
(dp4404
g3
S'* standardize on `Asserts that` and `Returns`\r\n* fix tenses and wordings\r\n'
p4405
sg5
S'TestSubscriber javadoc cleanup'
p4406
sg7
(lp4407
sg10
I3043
sg11
(lp4408
S'Thanks!'
p4409
asg14
S'davidmoten:test-subscriber-javadoc'
p4410
sbsI3045
(iPull
Pull
p4411
(dp4412
g3
S'Based on #3014 \r\n\r\nThe operator can request up to Long.MAX_VALUE because it will only ever return a single value. If there are fewer elements, the onCompleted() will be triggered anyway. If there are more elements, the unsubscribe() will stop the sequence at the index.'
p4413
sg5
S'ElementAt request management enhanced'
p4414
sg7
(lp4415
S'Enhancement'
p4416
asg10
I3045
sg11
(lp4417
sg14
S'akarnokd:ElementAtImprovement'
p4418
sbsI3047
(iPull
Pull
p4419
(dp4420
g3
S"I've added backpressure support to the replay() operator(s).\r\n\r\nRelated issue: #1487"
p4421
sg5
S'Operator replay() now supports backpressure'
p4422
sg7
(lp4423
S'Enhancement'
p4424
asg10
I3047
sg11
(lp4425
S'Epic refactor. Thanks @akarnokd! '
p4426
asg14
S'akarnokd:OperatorReplayBackpressure'
p4427
sbsI3048
(iPull
Pull
p4428
(dp4429
g3
S"`CompositeException` won't crash if it received null by some means. A `null` collection or `null` collection item is replaced by a `NullPointerException` instance.\r\n\r\nSee also: #3046."
p4430
sg5
S'CompositeException extra NPE protection'
p4431
sg7
(lp4432
S'Bug'
p4433
aS'Enhancement'
p4434
asg10
I3048
sg11
(lp4435
sg14
S'akarnokd:CompositeExceptionNull'
p4436
sbsI3049
(iPull
Pull
p4437
(dp4438
g3
S'* closes ReactiveX/RxJava#3038\r\n* this method allows an observable which is guaranteed to return exactly one\r\n  item to be converted to a Single\r\n* NOTE: the semantics of this function are very similar to that of single\r\n* i.e. errors are passed through, more than one item results in an\r\n  IllegalArgumentException, completion without emission results in a\r\n  NoSuchElementException and exactly one item is passed through the onSuccess\r\n  method of SingleSubscriber'
p4439
sg5
S'single: add toSingle method to Observable'
p4440
sg7
(lp4441
S'Enhancement'
p4442
asg10
I3049
sg11
(lp4443
S'Would appreciate feedback since this is my first contribution to RxJava! :)'
p4444
aS'Yes.'
p4445
aS'Looks good. Can you add the license headers to the files please? The block of code to add is shown here: https://github.com/ReactiveX/RxJava/blob/1.x/CONTRIBUTING.md'
p4446
aS'Have done so.'
p4447
aS'Would you mind rebasing to a single commit?'
p4448
aS'Also done :)'
p4449
aS'Thank you @tilal6991 for the contribution and responsiveness on changes.'
p4450
aS"Glad to contribute.\r\n\r\nI'm planning to look into more tricky issues soon so hopefully this is not the last you'll see of me :)"
p4451
asg14
S'tilal6991:1.x'
p4452
sbsI3050
(iPull
Pull
p4453
(dp4454
g3
S"I've added backpressure support to `BufferUntilSubscriber`, however, the internal workings of `groupBy` were in conflict with my 'clean' approach. Therefore, I kept the original `BufferUntilSubscriber` use in `groupBy` and added `BufferUntilSubscriberV2` and made the various `window()` operators use it instead.\r\n\r\nI've also added a two unbounded Spsc queue implementations from JCTools which can reduce the allocation-rate of these linked-node queues.\r\n\r\nThe problem with `groupBy` seems to be that it sets a producer on the `Subscriber` before it is actually subscribed to the `BufferUntilSubscriber`. The V2 however sets its on producer to support proper replay and kicks out the original coordinator producer. I don't know how to make the two work together yet. Maybe the `groupBy` has to be rewritten from scratch and inline the group backpressure support, request coordination and queueing more directly. An alternative might be to expose the single child request amount in `BufferUntilSubscriber` through a callback to the group somehow."
p4455
sg5
S'Backpressure support for most BufferUntilSubscriber use places.'
p4456
sg7
(lp4457
S'Enhancement'
p4458
asg10
I3050
sg11
(lp4459
S'Holding off on this ... it\'s is a non-trivial change and I don\'t have time to review it right now. \r\n\r\nAnd yes, `groupBy` is a very tricky one to solve. We have rewritten it a couple times already. There are some very tricky edge cases such as "time gap" and head-of-line-blocking. '
p4460
aS"@akarnokd I'm about to review this with @stevegury but before we do, do you want anything changed on this? It does need to be rebased at a minimum if it's still all valid."
p4461
aS"No changes planned to this. I need to manually reapply the changes to a fresh version because my Eclipse's git is broken. Maybe it is better to review a mergeable version instead of this."
p4462
aS'See #3150.'
p4463
asg14
S'akarnokd:BufferUntilSubscriberBackpressure'
p4464
sbsI3052
(iPull
Pull
p4465
(dp4466
g3
S'Factored out the NPE before the thread creation as it can take several milliseconds and other values can just slip through.'
p4467
sg5
S'Reduce test failure likelihood of testMultiThreadedWithNPEinMiddle'
p4468
sg7
(lp4469
S'Test-Failures'
p4470
asg10
I3052
sg11
(lp4471
sg14
S'akarnokd:FixSerializedObserverTest'
p4472
sbsI3055
(iPull
Pull
p4473
(dp4474
g3
S'As per my comment in #3049, `Observable.toSingle` should use `unsafeSubscribe` internally.\r\n\r\nThis PR includes a unit test that failed on previous code.'
p4475
sg5
S'toSingle() should use unsafeSubscribe'
p4476
sg7
(lp4477
sg10
I3055
sg11
(lp4478
S'Unrelated test failure:\r\n\r\n```\r\ntestMultiThreadedWithNPEinMiddle FAILED\r\n    java.lang.AssertionError\r\n        at org.junit.Assert.fail(Assert.java:92)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertTrue(Assert.java:54)\r\n        at rx.internal.operators.OperatorSerializeTest.testMultiThreadedWithNPEinMiddle(OperatorSerializeTest.java:148)\r\n```'
p4479
asg14
S'davidmoten:single-subscribe-fix'
p4480
sbsI3056
(iPull
Pull
p4481
(dp4482
g3
S'For the issue #3037 a new operator that let consumer of an empty Observable tie additional work to follow after the completion.'
p4483
sg5
S'New experimental operator to switch the types on the completion of empty Observables.'
p4484
sg7
(lp4485
sg10
I3056
sg11
(lp4486
S'Seems like an ok idea to me but `switchEmpty` and  `switchIfEmpty` are confusing to distinguish though I like them being close together alphabetically for discoverability.'
p4487
aS'aah @abersnaze I did not see that you have the changes here for #3037. I have created a PR #3060  for it too, although it contains an additional operator `mergeError`'
p4488
aS'I implemented `switchEmpty`, as you call it, as a `switchMap().concatWith()`, is there a reason why that does not work?'
p4489
aS'I tried to reuse the switchIfEmpty and merge the switchEmpty functionality but couldn\'t get the generics to work.  I decided to copy and edit because switchIfEmpty looked complicated enough with backpressure support.\r\n\r\n```\r\n***************\r\n*** 65,79 ****\r\n  \r\n          @Override\r\n          public void onCompleted() {\r\n!             if (!empty) {\r\n!                 child.onCompleted();\r\n!             } else if (!child.isUnsubscribed()) {\r\n                  subscribeToAlternate();\r\n              }\r\n          }\r\n--- 64,76 ----\r\n  \r\n          @Override\r\n          public void onCompleted() {\r\n!             if (!child.isUnsubscribed()) {\r\n                  subscribeToAlternate();\r\n              }\r\n          }\r\n***************\r\n*** 85,92 ****\r\n  \r\n          @Override\r\n          public void onNext(T t) {\r\n!             empty = false;\r\n!             child.onNext(t);\r\n              arbiter.produced(1);\r\n          }\r\n      }\r\n--- 82,88 ----\r\n  \r\n          @Override\r\n          public void onNext(T t) {\r\n!             child.onError(new RuntimeException("switchEmpty used on a non empty observable. Possible fix is to add .ignoreElements() before .switchEmpty()."));\r\n              arbiter.produced(1);\r\n          }\r\n      }\r\n\r\n```\r\n\r\nThe overhead of the switchMap and concatWith seem pretty high for such a constrained use case.'
p4490
aS'@abersnaze I updated my PR with the things we discussed offline and it now has custom operator implementations, optimized for this usecase where the source `Observable` is never expected to emit any item.'
p4491
aS'Closing out so we can merge these efforts with https://github.com/ReactiveX/RxJava/pull/3060 after agreeing upon naming: https://github.com/ReactiveX/RxJava/issues/3037#issuecomment-121295614'
p4492
asg14
S'abersnaze:switchEmpty'
p4493
sbsI3058
(iPull
Pull
p4494
(dp4495
g3
S'This PR \r\n\r\n* adds missing javadoc to the `Subscriber(Subscriber)` constructor\r\n* improves (hopefully!) the javadoc for the constructor `Subscriber(Subscriber,boolean)`\r\n* adds missing javadoc for `setProducer`\r\n\r\n'
p4496
sg5
S'add and improve javadoc in Subscriber'
p4497
sg7
(lp4498
sg10
I3058
sg11
(lp4499
sg14
S'davidmoten:subscriber-javadoc'
p4500
sbsI3060
(iPull
Pull
p4501
(dp4502
g3
S'As discussed in issue #3037, the primary use of these operators is to be applied to `Observable<Void>` so that they can be merged and concatenated with an Observable of a different type.\r\n\r\nBoth these operators raise an error if the source Observable emits any item.'
p4503
sg5
S'New operators: `concatEmptyWith` and `mergeEmptyWith`.'
p4504
sg7
(lp4505
S'Enhancement'
p4506
asg10
I3060
sg11
(lp4507
S'Marked the new operators as `@Experimental`, once the review is complete, I will squash the commits into one.'
p4508
aS'Renamed operators to `mergeEmptyWith` and `concatEmptyWith`. Based on offline discussions with @abersnaze and @benjchristensen these names better suit the intent of these operators.\r\n\r\nAlso, removed the `swithMap()` + `mergeWith`/`concatWith` implementations with custom operators that are much lighter weight for this case (source never emits an item) vis-a-vis `concat` and `merge`.'
p4509
aS'Waiting on confirmation of names: https://github.com/ReactiveX/RxJava/issues/3037#issuecomment-121295614'
p4510
aS'Thanks @akarnokd for the review.'
p4511
aS"Apart from the open discussions, I think I am ready for another round of review. \r\n\r\nThe travis build failed because of the test rx.BackpressureTests > testMergeAsyncThenObserveOn failing. I don't think my changes have anything to do with that, is that a flaky test?"
p4512
aS'@akarnokd It seems you have open questions/issues on this PR still, is that correct?'
p4513
aS'@benjchristensen Found a few problems with this PR in the meantime.'
p4514
aS'@akarnokd I would wait for your further comments to make all changes together. So, get the review comments coming, they are good :)'
p4515
aS'@NiteshKant is this ready to be merged?'
p4516
aS'I was under the assumption that @akarnokd has more comments. Let me address the comments till now. '
p4517
aS"Sorry for not replying. I'll recheck this pr shortly."
p4518
aS'No new comments on this and there are still points to address via code change.'
p4519
aS'Hi @NiteshKant. Last call for the release. Can this make it in?'
p4520
aS"@stealthcode Please don't be hasty with this PR, there are still problems present here: accessing fields outside their guards and bad use of `SerializedSubscriber`."
p4521
aS'@stealthcode when are you cutting a release?'
p4522
aS">>> Please don't be hasty with this PR\r\n\r\nI guess we should not be hasty with any PR :) I haven't got around making the changes yet, of course will do before we merge."
p4523
aS"@NiteshKant we'd like to release in the coming week or two but need to know if this is a feature that we should consider for the next minor release (v1.1.0) which will be almost identical to the next patch release v1.0.15. \r\n\r\n@akarnokd I'm not being hasty I am asking for information from my colleague so George and I can plan the release. "
p4524
aS'@stealthcode I will address the comments in a couple of days, it should be able to make it to the release! '
p4525
aS"That's great thanks. "
p4526
aS'I addressed the open comments apart from the suggestion of calling `unsubscribe()` post `onError()`, which I do not understand/agree with.\r\n\r\nI see that my rebase caused a bazillion other commits to show here, may be I should close this and issue a new PR?'
p4527
aS'Please do create a new and clean PR.'
p4528
aS'@akarnokd created #3430 as a replacement for this one.'
p4529
asg14
S'NiteshKant:1.x'
p4530
sbsI3065
(iPull
Pull
p4531
(dp4532
g3
S'Add utility method to `Subscribers` to perform this common use case:\r\n\r\nNaming briefly discussed in #3057.\r\n \r\n```java\r\nnew Subscriber<T>(subscriber) {\r\n\r\n    @Override\r\n    public void onCompleted() {\r\n        subscriber.onCompleted();\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable e) {\r\n        subscriber.onError(e);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(T t) {\r\n        subscriber.onNext(t);\r\n    }\r\n    \r\n};\r\n```'
p4533
sg5
S'add Subscribers.wrap'
p4534
sg7
(lp4535
sg10
I3065
sg11
(lp4536
S"I'm trying to remind myself what in these cases we can't just pass the subscriber through if we're not actually changing any behavior. Unsubscription will propagate up and down, so it's not decoupling anything. So why must we allocate and wrap in these use cases?"
p4537
aS'used `wrap` instead of `from` in `OnSubscribeUsing` and rebased.'
p4538
aS'> Double call of onStart was one reason.\r\n\r\nAh right. So `wrap` is really about when we need to decouple or handle nested subscribes. '
p4539
asg14
S'davidmoten:subscribers-wrap'
p4540
sbsI3069
(iPull
Pull
p4541
(dp4542
g3
g53
sg5
S'Improve toSingle() javadoc (diagram, see also, since-annotation)'
p4543
sg7
(lp4544
sg10
I3069
sg11
(lp4545
sg14
S'ReactiveX:PLP'
p4546
sbsI3077
(iPull
Pull
p4547
(dp4548
g3
g53
sg5
S'Add "since" annotations to javadocs for new Experimental/Beta methods'
p4549
sg7
(lp4550
S'Documentation'
p4551
asg10
I3077
sg11
(lp4552
S'Probably a good time to regenerate and deploy the javadocs too.'
p4553
aS'Thanks!'
p4554
aS'Can the PLP branch be deleted?'
p4555
asg14
S'ReactiveX:PLP'
p4556
sbsI3078
(iPull
Pull
p4557
(dp4558
g3
S'As per #3073 a race condition in `OperatorSwitch` means that requests can be lost. This PR uses `ProducerArbiter` to ensure all unfulfilled requests are carried through to the next `Observable`.\r\n\r\nI also changed `InnerSubscriber` to be a static class as opposed to an inner class just to decouple it from surrounding state. '
p4559
sg5
S'switchOnNext() - fix lost requests race condition '
p4560
sg7
(lp4561
S'Bug'
p4562
asg10
I3078
sg11
(lp4563
S'Thanks. '
p4564
asg14
S'davidmoten:switch-fix'
p4565
sbsI3079
(iPull
Pull
p4566
(dp4567
g3
S'`Observable.forEach` javadoc suffered from a bit of copy-and-paste and neglected to mention the possible throw of `OnErrorNotImplementedException`.\r\n\r\nAlso added a couple of unit tests.'
p4568
sg5
S'fix forEach javadoc'
p4569
sg7
(lp4570
S'Documentation'
p4571
asg10
I3079
sg11
(lp4572
S'Thanks.'
p4573
asg14
S'davidmoten:foreach-javadoc'
p4574
sbsI3081
(iPull
Pull
p4575
(dp4576
g3
S'#3076. I did revert commit of the PR that added back pressure support to the cache operator and ran a canary.  Our production systems seem stable now even with the new merge.'
p4577
sg5
S'Revert of cache/replay'
p4578
sg7
(lp4579
sg10
I3081
sg11
(lp4580
S"That's good news. Not sure what time @akarnokd has for reviewing `.cache` backpressure work. If we can't fix this short term would be nice too see a fix for #3026 go in 1.0.13 if backpressure doesn't make it. Quick summary is in 1.0.12 `.cache` emits nothing until source has completed. "
p4581
aS'Can you create an unit test based on the usage pattern? It would be also interesting to verify `replay().autoConnect()` since it ought to be functionally equivalent to `cache()`.'
p4582
aS"I have no clue at the moment what the actual code path is causing the lockup. It'll take awhile for me to instrument code to narrow which usage pattern is causing the problem. "
p4583
aS"I believe the issue we're seeing comes from use of `cache()` in Hystrix: https://github.com/Netflix/Hystrix/blob/990394e98ba7472b96d90d7246e785d0966ade9a/hystrix-core/src/main/java/com/netflix/hystrix/AbstractCommand.java#L481\r\n\r\nWe use Hystrix at very high volume, and `cache()` will be used by a large percentage of those calls. This explains why this impacted our canary so significantly."
p4584
aS"I've reverted both the cache and revert related commits.  The tests and the canary seem to do fine so far."
p4585
asg14
S'abersnaze:cache-rollback'
p4586
sbsI3082
(iPull
Pull
p4587
(dp4588
g3
g53
sg5
S'Observable.x(ConversionFunc) to allow extensions to Observables'
p4589
sg7
(lp4590
S'Discussion'
p4591
aS'Enhancement'
p4592
asg10
I3082
sg11
(lp4593
S'The Travis CI failure is related to an rx backpreasure test\r\n\r\n```\r\nrx.BackpressureTests > testMergeAsyncThenObserveOn FAILED\r\n    java.lang.RuntimeException: Unexpected onError events: 1\r\n        at rx.observers.TestSubscriber.assertNoErrors(TestSubscriber.java:263)\r\n        at rx.BackpressureTests.testMergeAsyncThenObserveOn(BackpressureTests.java:138)\r\n        Caused by:\r\n        rx.exceptions.MissingBackpressureException\r\n```\r\n\r\nIs this known to be buggy? My changes seem unrelated. It also failed for #3060.'
p4594
aS"It didn't fail with `MissingBackpressureException` as far as I know."
p4595
aS'They both failed with missing backpressure.\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/71027596#L278\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/71831639#L270'
p4596
aS'Found the bug in merge(), it was my oversight. Fix posted: #3093.'
p4597
aS'Awesome! Thanks @akarnokd '
p4598
aS"I've restarted this build and it passes now."
p4599
aS"I've simplified the problem this is trying to address to just adding the `x(ConversionFunc)` method and unit tests to show how we might use this. My apologies to the general populace who aren't familiar with Battlestar Galactica who may be confused by the references made to said series in my unit test. "
p4600
aS"I would have liked to have made the static method\r\n\r\n```java\r\nprivate static Subscription Observable.subscribe(Subscriber<? super T>, Observable<T>)\r\n```\r\n\r\nbe agnostic of the `Observable` and instead have the signature.. \r\n\r\n```java\r\npublic static Subscription Observable.subscribe(Subscriber<? super T>, OnSubscribe<T>)\r\n```\r\n\r\nThis would allow us to reuse this `SafeSubscriber` wrapping and the hooks invocations from other Observables (see test) but then the hooks api would break on...\r\n\r\n```java\r\nhook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);\r\n```\r\n\r\nand then it probably wouldn't belong in `Observable.java`... "
p4601
aS'Reviewed with @benjchristensen and he agreed to merge this and start testing it out in snapshots. '
p4602
aS'Latest version was rebased onto 1.x and has `ConversionFunc` replaced with `Func1`.'
p4603
asg14
S'stealthcode:conversion'
p4604
sbsI3085
(iPull
Pull
p4605
(dp4606
g3
S"These tests were giving me regular failures on my slow laptop:\r\n\r\n* `OperatorMergeMaxConcurrentTest.testSimpleOneLessAsync`\r\n* `BackpressureTests.testOnBackpressureDrop`\r\n\r\nThey both loop repeatedly looking for failure or lockup. If the machine running the tests isn't fast enough then the tests timeout before reaching the desired number of loops. This PR adds a break to the tests when the loop has run for 9 seconds (timeout is 10 seconds)."
p4607
sg5
S"break tests as approach timeout so that don't fail on slow machines"
p4608
sg7
(lp4609
S'Test-Failures'
p4610
asg10
I3085
sg11
(lp4611
S'Great!'
p4612
asg14
S'davidmoten:on-drop-test-fix'
p4613
sbsI3086
(iPull
Pull
p4614
(dp4615
g3
S"This test fails for me occasionally on my slow laptop when full test suite run because work is scheduled for only 1ms in the future. I've decreased the probability of this one failing by changing the schedule to 50ms in the future."
p4616
sg5
S'improve ExecutorSchedulerTest.testOnBackpressureDrop'
p4617
sg7
(lp4618
S'Test-Failures'
p4619
asg10
I3086
sg11
(lp4620
S'Thanks.'
p4621
asg14
S'davidmoten:exec-sched-test-timing'
p4622
sbsI3088
(iPull
Pull
p4623
(dp4624
g3
S'  - Made cache() more eager to check for unsubscription in its replay loop\r\n  - Fixed autoConnect() triggering a second call to onStart\r\n  - Added cache() tests to see replay().autoConnect() works equivalently.\r\n  - Changed the way cache() connects to the source, removed unnnecessary synchronization of incoming events.'
p4625
sg5
S'Hardened both cache() and replay() against child-thrown exceptions.'
p4626
sg7
(lp4627
sg10
I3088
sg11
(lp4628
S"Just checked on the canary and it didn't seem to change the slope of the line."
p4629
aS'Could you try this PR and use replay().autoConnect() in Observable.cache()?'
p4630
asg14
S'akarnokd:CacheFixAttempt'
p4631
sbsI3089
(iPull
Pull
p4632
(dp4633
g3
S'This PR adds plugins for \r\n\r\n* findbugs\r\n* jacoco (code coverage)\r\n\r\nThe plugins do not run by default and are run as below:\r\n\r\n`./gradlew findbugsMain` then open `build/reports/findbugs/main.html`.\r\n\r\n`./gradlew test jacocoTestReport` then open `build/reports/jacoco/index.html`\r\n\r\nCoverage can be run on a single test like so:\r\n\r\n`./gradlew -Dtest.single=OperatorRetry test jacocoTestReport`\r\n\r\nAll these instructions are in comments in `build.gradle`.\r\n\r\n'
p4634
sg5
S'add code quality plugins to build.gradle'
p4635
sg7
(lp4636
S'Enhancement'
p4637
asg10
I3089
sg11
(lp4638
S"I'd also suggest Jacoco-Coverage Plugin: https://github.com/palantir/gradle-jacoco-coverage as addition to Jacoco, with this plugin you can set min coverage level and fail the build if coverage level is not enough, standard Jacoco plugin does not have this feature.\r\n\r\nYou can find an example in our project StorIO: https://github.com/pushtorefresh/storio/blob/jacoco/gradle/jacoco-android.gradle (will be in master as soon as I write all tests for private constructors and not covered cases :smile:).  "
p4639
aS'Updated PR with improvements suggested by @artem-zinnatullin and rebased.'
p4640
aS"@artem-zinnatullin I don't mind, you could raise an issue to see if the project owners are interested. Running jacoco on the codebase certainly suggests lots of places to contribute tests at the moment."
p4641
aS"The jacoco looks interesting, but I've installed the Eclipse plugin instead. I don't know how to extract the report from Travis and without it, failing the build won't help much.\r\n\r\nIf someone decides to do a coverage-hunt (which besides me no one seems to have done so far), then he/she can use an IDE plugin or temporarily modify the build.gradle in his/her branch for the duration of the evaluations.\r\n\r\nI vote no for this PR."
p4642
aS"I'd like to have a code coverage tool available from the command line without having to deal with IDE plugins (which can be fickle across IDE versions for starters). Wth command line at least people with different IDEs can inspect a common view.\r\n\r\nI did not make this PR to impose coverage thresholds but to be able to identify possible problem areas in the code base generally and to help assess modifications (mine and others).\r\n\r\nThe plugins do not run by default in this PR. Having to transplant the plugins (and keep the build.gradle in sync) into the main line or another branch whenever I want to assess stuff is a giant pain.\r\n\r\nCI integration would be great at some point but as this stuff is non-trivial to put into build.gradle (getting stuff to not run by default was a painful experience for example) and offers benefits at no cost to the default build I'd like to see it go in. Let's leave talk of build failures in CI for another PR from @artem-zinnatullin  if he wants to chase it.\r\n\r\n"
p4643
aS'By the way, we are unlikely to see many people go on a coverage hunt without making it easy, this PR makes it easy.'
p4644
aS"Can the plugins be added by a gradle init script (using `-I` or `--init-script`)? In this way an individual developer could include a script for coverage or findbugs. This way RxJava doesn't have to support all types of plugins or tools at this moment and theres no way that the build could be impacted. "
p4645
aS"@stealthcode that sounds fine to me. As long as the plugins can be activated in an automated fashion from the command line I'm happy. In the meantime the default build is not impacted by the current changes and such a modification could occur in a secondary PR."
p4646
aS"@artem-zinnatullin thanks for the examples about the value of code coverage in CI. I'd like to see that usage pursued in a separate issue/PR pending merge of this PR just so we can get this base functionality in for people to use manually. One step at a time, I suppose."
p4647
aS"Sure, I'll submit a separate PR if this one will be merged."
p4648
aS"The RxJava project doesn't have an opinion on code coverage tools. However I think it's useful to have standard files or documented procedures so that contributors can easily opt-in to running test coverage reports or other build tools. Would you be in favor of changing this PR to move the necessary bits to a `./tools/coverage-jacoco.gradle` and `./tools/findbugs.gradle`? In this way they could be run with a couple `-I` options and the project can maintain an ambivalence with respect to build tools. Thoughts? "
p4649
aS"Yep I'm happy with that @stealthcode. I'll see if it works and update the PR."
p4650
aS"I'm going to close this issue but I encourage you to submit a PR to add the mentioned init files. Thanks"
p4651
asg14
S'davidmoten:code-quality-plugins'
p4652
sbsI3091
(iPull
Pull
p4653
(dp4654
g3
S'Forgot to add the wrapping.'
p4655
sg5
S'Fix autoConnect calling onStart twice.'
p4656
sg7
(lp4657
sg10
I3091
sg11
(lp4658
sg14
S'akarnokd:AutoConnectFix'
p4659
sbsI3092
(iPull
Pull
p4660
(dp4661
g3
S'Adding `Single.toObservable` as companion to `Observable.toSingle`.'
p4662
sg5
S'Single.toObservable'
p4663
sg7
(lp4664
sg10
I3092
sg11
(lp4665
sg14
S'benjchristensen:single-toObservable'
p4666
sbsI3093
(iPull
Pull
p4667
(dp4668
g3
S"Requested amount could reach zero between the first check and entering the synchronized block where it has to be re-read in order to verify the scalar emission can really happen at that point; the new `testMergeAsyncThenObserveOnLoop` test failed with `MissingBackpressureException` after ~20 rounds on my i7 4770K.\r\n\r\nThis might or might not relate to the canary failure; if combined with retry(), it could have failed over and over, but I'm not sure where the worker retention might have happened."
p4669
sg5
S'Fix request != 0 checking in the scalar paths of merge()'
p4670
sg7
(lp4671
S'Bug'
p4672
asg10
I3093
sg11
(lp4673
S'Is this urgent for release, or can it wait?'
p4674
aS"Yes, this is severe enough, especially if one merges high throughput asynchronous sources before observing them on a scheduler. Synchronous merges or small amount of values won't trigger the `MissingBackpressureException`.\r\n\r\nThere is another possible issue which affected the merge() version before. Due to the scalar optimization, it could reorder values from a source: \r\n\r\n  1. a value comes in but requested is zero, therefore, the value is queued,\r\n  2. the requested amount increases but it doesn't enter the emission loop yet,\r\n  3. another value comes in, finds the requested to be non-zero, successfully enters the emitting state and emits this second value while the first is still in the queue,\r\n  4. the requester also enters/signals the emitter loop and the queue is drained.\r\n\r\nApparently, users of `merge()` so far didn't really mind this occasional reordering in the output.\r\n"
p4675
asg14
S'akarnokd:MergeAsyncTest'
p4676
sbsI3101
(iPull
Pull
p4677
(dp4678
g3
S'Fixes the case uncovered by #3095.'
p4679
sg5
S'Fix take swallowing exception if thrown by exactly the nth onNext call to it.'
p4680
sg7
(lp4681
S'Bug'
p4682
asg10
I3101
sg11
(lp4683
S'Odd bug. Thanks for the fix.'
p4684
asg14
S'akarnokd:TakeErrorHandlingFix'
p4685
sbsI3103
(iPull
Pull
p4686
(dp4687
g3
S'As mentioned in #3098 the existing version of  `materialize` could deliver one more event than requested being the termination event (completion or error).\r\n\r\nThis PR ensures that a termination event is buffered till requested.\r\n'
p4688
sg5
S'materialize() - add backpressure support'
p4689
sg7
(lp4690
S'Bug'
p4691
asg10
I3103
sg11
(lp4692
S"Thanks @akarnokd, I've updated with those fixes and rebased."
p4693
aS'A quick question about synchronized blocks vs using volatile variables in general. It would also be possible to atomically change a pair like `busy` and `missed` using an immutable wrapping object `BusyAndMissed` and storing it in an `AtomicReference<BusyAndMissed>` and use spinning to modify. It could involve some GC pressure if rapidly changing of course. Have you any experience of advantages/disadvantages with this approach?'
p4694
aS"That approach is wasteful. You only need an AtomicInteger and its increment/decrement methods. 0 means not busy, 1+ means busy and 2+ means there is still work to be done. The pair of booleans + synchronized, however, plays into the hands of lock elision and biased locking which affects our benchmarks. If it were up to me, I'd use atomics everywhere so we avoid the chance of unnecessary thread suspension due to a lock not available around 2 bytes."
p4695
aS'Thanks, quite right for that pair of objects, was probably a bad example. So under circumstances where we are getting significant lock elision and biased locking is it also the case that the volatile read and write of `terminalNotification` is just like a non-volatile read and write? I left it as non-volatile to favour lock elision and biased locking in the first place.'
p4696
aS"That is a terminal event that happens once, but when the lock optimizations don't happen, you may get a hefty delay. Paying a few dozen nanoseconds for a single volatile write is way better."
p4697
aS'Makes sense, thanks.'
p4698
aS'Thanks!'
p4699
asg14
S'davidmoten:materialize-backp'
p4700
sbsI3104
(iPull
Pull
p4701
(dp4702
g3
S"Courtesy of findBugs, `SynchronizedQueue.equals()` is improperly implemented. I used Eclipse to generate a new `equals()` method based on the `list` field.\r\n\r\nThe existing code would even have failed to return true when testing queue equality with itself.\r\n\r\nI don't think this is causing problems anywhere but this PR will ensure that it doesn't cause a problem in the future."
p4703
sg5
S'Fix SynchronizedQueue.equals'
p4704
sg7
(lp4705
S'Bug'
p4706
asg10
I3104
sg11
(lp4707
S"SynchronizedQueue should be replaced with one of the JCTools' atomic-based bounded queues instead."
p4708
aS'Thanks.'
p4709
asg14
S'davidmoten:synchronized-queue-equals'
p4710
sbsI3108
(iPull
Pull
p4711
(dp4712
g3
S'as per issue #3106, this PR removes `OperatorOnErrorFlatMap` because it is unused.'
p4713
sg5
S'remove OperatorOnErrorFlatMap because unused'
p4714
sg7
(lp4715
sg10
I3108
sg11
(lp4716
S'Thanks.'
p4717
asg14
S'davidmoten:remove-operator-on-error-flatmap'
p4718
sbsI3109
(iPull
Pull
p4719
(dp4720
g3
S"Increased test coverage of JCTools' queues and unsafe activities. Fixed inconsistencies in the queues."
p4721
sg5
S"Unit tests and cleanup of JCTools' queues."
p4722
sg7
(lp4723
S'Enhancement'
p4724
asg10
I3109
sg11
(lp4725
sg14
S'akarnokd:InternalUtilAtomicTests'
p4726
sbsI3110
(iPull
Pull
p4727
(dp4728
g3
S'Since these are public API methods, their expected behavior needs to be verified.'
p4729
sg5
S'Test coverage of rx.functions utility methods.'
p4730
sg7
(lp4731
S'Enhancement'
p4732
asg10
I3110
sg11
(lp4733
sg14
S'akarnokd:TestCoverageFunctions'
p4734
sbsI3111
(iPull
Pull
p4735
(dp4736
g3
S'remove `OnSubscribeMulticastSelector` and `SubscriptionRandomList` because unused'
p4737
sg5
S'remove OnSubscribeMulticastSelector and SubscriptionRandomList'
p4738
sg7
(lp4739
sg10
I3111
sg11
(lp4740
S'OnSubscribeMulticastSelector occurs 6 times in Observable.'
p4741
aS"erk, don't know how I tricked myself into that one. Some IDE strangeness methinks."
p4742
asg14
S'davidmoten:remove-unused-classes'
p4743
sbsI3112
(iPull
Pull
p4744
(dp4745
g3
S"This includes a rewrite of `SerializedObserver` to have a more cleaner exception semantics.\r\n\r\nThe `TestSubscriberTest` can be improved further but I've run out of time for today."
p4746
sg5
S'Observers package test coverage and fixes.'
p4747
sg7
(lp4748
S'Bug'
p4749
aS'Enhancement'
p4750
asg10
I3112
sg11
(lp4751
sg14
S'akarnokd:TestCoverageObservers'
p4752
sbsI3116
(iPull
Pull
p4753
(dp4754
g3
S'Implemented backpressure for cache() again and applied the hardenings as well.'
p4755
sg5
S'cache() now supports backpressure (again)'
p4756
sg7
(lp4757
S'Enhancement'
p4758
asg10
I3116
sg11
(lp4759
sg14
S'akarnokd:OperatorCacheRewrite4'
p4760
sbsI3117
(iPull
Pull
p4761
(dp4762
g3
S'And applied the hardenings as well.'
p4763
sg5
S'Operator replay() now supports backpressure (again)'
p4764
sg7
(lp4765
S'Enhancement'
p4766
asg10
I3117
sg11
(lp4767
S"I've merged this and cache() so people can look at the code and try out the snapshot versions."
p4768
asg14
S'akarnokd:OperatorReplayRewrite4'
p4769
sbsI3118
(iPull
Pull
p4770
(dp4771
g3
S'This is useful for creating an observable that reads from a data source in a synchronous manner. This is a rewrite of the `AbstractOnSubscribe` experimental class based on the ideas in #3003.'
p4772
sg5
S'Implementing the SyncOnSubscribe'
p4773
sg7
(lp4774
S'Enhancement'
p4775
asg10
I3118
sg11
(lp4776
S"You can't delete `AbstractOnSubscribe` because it is part of the public API and even though marked as experimental, such components can be deleted only at a major release such as 1.1."
p4777
aS'Experimental APIs can be removed or change at any time, as per the README:\r\n\r\n> @Experimental\r\n\r\n> APIs marked with the @Experimental annotation at the class or method level will almost certainly change. They can be modified in any way, or even removed, at any time. You should not use or rely on them in any production code. They are purely to allow broad testing and feedback.'
p4778
aS'I would have expected to make such APIs @Deprecated for a few releases before completely removing it. Besides, this PR just gives an alternative to another @Experimental class and could live side-by-side. Then users could decide/vote which to keep at the next major release.'
p4779
aS'@akarnokd you have a good point that the efficacy of both implementations should be compared however I do not think that we should expose multiple alternatives in the public api. This ambiguous api leads to confusion and questions about the unexplained differences between one or the other implementation. The pull request should not be the place for debate either (since this should be about issues with THIS implementation). This comparison and debate was what I was hoping to get out of opening issue #3003. Would you like to open a separate issue for comparing the 2 implementations?'
p4780
aS'The latest commit adds work stealing to manage unsubscribe to avoid concurrent modification of `state` while running `onUnsubscribe` concurrently with `next` (and a test to exercise), fixes issues with tabs/spaces, and adds javadocs.'
p4781
aS"The latest commit makes a few changes. \r\n\r\n* Added the `AbstractOnSubscribe` back into the code base. The `@Experimental` annotation states clearly that either of these implementations can be removed at any time so it's not necessary for anything to be removed now. It is up to the consumer when they chose to use a potentially unstable api. \r\n* Added JMH tests to compare performance against `OnSubscribeFromIterable`. The performance is impacted in astounding ways by the additional complexity of a cleanup function. This requires object initialization which the `OnSubscribeFromIterable` does not require. \r\n* General optimizations. Removing a volatile and reorganizing the request loop. "
p4782
aS'@stealthcode can you give us more detail on the JMH comparison?'
p4783
aS"Sure, sorry for leaving that out. Here's the JMH report output\r\n\r\n```\r\n$ ./gradlew clean benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 1 .*SyncOnSubscribePerf.*'\r\n```\r\n\r\n```\r\nBenchmark                                            (size)   Mode   Samples        Score  Score error    Units\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe          1  thrpt         5 10345304.158   167899.030    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2         1  thrpt         5 10315525.503   519004.209    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2      1000  thrpt         5 10080651.937  1249022.786    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2   1000000  thrpt         5  9676927.741   799435.391    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable                 1  thrpt         5 245301608.512 25693364.239    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2                1  thrpt         5 261726979.345 17122836.564    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2             1000  thrpt         5 256818323.006 17992719.065    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2          1000000  thrpt         5 259483656.124 12863102.025    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe              1  thrpt         5 12770780.794   146195.400    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2             1  thrpt         5 12306631.098  2072808.101    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2          1000  thrpt         5 12326658.468   682619.251    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2       1000000  thrpt         5 12519473.508   365884.932    ops/s\r\n```\r\n\r\nUnder Flight Recorder analysis, both the AOS and SOS suffer from the cost of creating a `SubscriptionList` and allocating memory where as a the `OnSubscribeFromIterable` does not require adding an unsubscribe action so doesn't need to allocate. I plan on testing some changes to get around this bottle neck. Will submit a pull request soon. Hopefully this upcoming change will be a private change and not have to wait until 2.x."
p4784
aS'Here are the updated benchmarks. This paints a very different picture than last time. The performance of the `SyncOnSubscribe` is now ~25% slower than `OnSubscribeFromIterable` for small iterators and ~17% slower for large iterators. The bottle neck seems to be in the `SyncOnSubscribe$SubscriptionProducer.request(long)` method.\r\n\r\n```\r\n# Run complete. Total time: 00:02:32\r\n\r\nBenchmark                                            (size)   Mode   Samples        Score  Score error    Units\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe          1  thrpt         5  8057762.938   350532.503    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2         1  thrpt         5  8150650.148   174362.683    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2      1000  thrpt         5    41560.383      737.346    ops/s\r\nr.o.SyncOnSubscribePerf.benchAbstractOnSubscribe2   1000000  thrpt         5       41.237        8.422    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable                 1  thrpt         5 19134647.666   420991.146    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2                1  thrpt         5 18720840.805   327775.879    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2             1000  thrpt         5   183561.551     5244.489    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2          1000000  thrpt         5      184.511        4.020    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe              1  thrpt         5 11358568.468   298560.809    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2             1  thrpt         5 11367669.868   133428.078    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2          1000  thrpt         5   132173.869     2670.427    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2       1000000  thrpt         5      130.224        3.425    ops/s\r\n```'
p4785
aS"Here is a version where the integer stream is freshly created:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9143825/e26dae3a-3d48-11e5-8576-2df7086b31cf.png)\r\n\r\n(i7 4770K, Windows 7 x64, Java 8u51)\r\n\r\nAbstractOnSubscribe (AOS) has the highest overhead because of resource checks on each emission\r\n\r\nAbstractProducer (AP from #2813) offers amortized resource check overhead due to the inner loop but this loop was not particularly optimized with fast-path and/or amortized request accounting.\r\n\r\nFromIterable (FI) doesn't care about resources and has fast-path.\r\n\r\nSyncOnSubscribe (SO) in this PR is close but 33% behind FI. I've made [some optimizations](https://gist.github.com/akarnokd/a2669817708827350663) to the fast-path and got a much better result for longer sources:\r\n\r\n```\r\n13969673,045   263281,521    ops/s\r\n  237194,622     1475,414    ops/s\r\n     226,248       11,892    ops/s\r\n```\r\n\r\nOne must be careful around volatile reads because it forces the re-read of instance variables after them."
p4786
aS"Nice, I'm merging your gist. This optimization makes the fast path on-par with FromIterable in the long tail (still however ~25% slower in the 1's - 10's range).  "
p4787
aS"I spoke too soon. In running the unit tests there are now problems with the diff applied. I'll try to incorporate what I can and test to make sure the changes are more performant."
p4788
aS"Sorry, I didn't run any test so my changes were only valid for the perf usage and not general. [Here is](https://gist.github.com/akarnokd/dffd7500981968a845d3) a version which passes the tests and has the following performance characteristics:\r\n\r\n```\r\nBenchmark                     (size)   Mode   Samples        Score  Score error    Units\r\nbenchSyncOnSubscribe2Fresh         1  thrpt         5 18314010,215    78882,829    ops/s\r\nbenchSyncOnSubscribe2Fresh      1000  thrpt         5   223973,659     2605,564    ops/s\r\nbenchSyncOnSubscribe2Fresh   1000000  thrpt         5      228,057        1,400    ops/s\r\n```\r\n\r\nFor size = 1, I think the extra allocation of the facade Subscriber makes it twice the overhead. The onNext safeguard also costs ~15%:\r\n\r\n```\r\nBenchmark                     (size)   Mode   Samples        Score  Score error    Units\r\nbenchSyncOnSubscribe2Fresh         1  thrpt         5 18356265,548   512130,369    ops/s\r\nbenchSyncOnSubscribe2Fresh      1000  thrpt         5   268613,838     7801,208    ops/s\r\nbenchSyncOnSubscribe2Fresh   1000000  thrpt         5      274,654        7,522    ops/s\r\n```\r\n\r\nEdit:\r\nIf I change the API to Observer and saving the facade allocation, I get this:\r\n```\r\nBenchmark                     (size)   Mode   Samples        Score  Score error    Units\r\nbenchSyncOnSubscribe2Fresh         1  thrpt         5 19915549,079   499085,570    ops/s\r\nbenchSyncOnSubscribe2Fresh      1000  thrpt         5   243045,859     4557,930    ops/s\r\nbenchSyncOnSubscribe2Fresh   1000000  thrpt         5      201,082      124,888    ops/s\r\n```\r\n\r\nThe 1M case becomes quite varying, perhaps due to the huge amount of `Integer` garbage or the change in what the JIT inlines."
p4789
aS"@akarnokd your changes are pretty solid. I can't argue with results. Here are the benchmarks for your changes alone.\r\n\r\n```\r\nBenchmark                                        (size)   Mode   Samples        Score  Score error    Units\r\nr.o.SyncOnSubscribePerf.benchFromIterable2            1  thrpt         5 17907742.680  1458787.396    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2         1000  thrpt         5   181328.434     3485.931    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2      1000000  thrpt         5      181.733        9.492    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2         1  thrpt         5 14414752.664   572789.234    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2      1000  thrpt         5   182578.431    21732.491    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2   1000000  thrpt         5      186.404        6.581    ops/s\r\n```\r\n\r\nI implemented a small api change to expose a setter on an unsubscribe `Action1<S>`. With this change we can check if there's no unsubscribe (and avoid a `SubscriptionList` allocation). \r\n```\r\nBenchmark                                        (size)   Mode   Samples        Score  Score error    Units\r\nr.o.SyncOnSubscribePerf.benchFromIterable2            1  thrpt         5 17832090.877  3436213.149    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2         1000  thrpt         5   180643.547    10720.476    ops/s\r\nr.o.SyncOnSubscribePerf.benchFromIterable2      1000000  thrpt         5      179.589       20.317    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2         1  thrpt         5 17809008.594   478600.206    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2      1000  thrpt         5   181643.455    45353.810    ops/s\r\nr.o.SyncOnSubscribePerf.benchSyncOnSubscribe2   1000000  thrpt         5      183.044        7.280    ops/s\r\n```\r\n\r\nWith this change we are now faster than `OnSubscribeFromIterable` in the short and long cases (assuming we don't have to cleanup with unsubscribe)."
p4790
aS'> With this change we are now faster than OnSubscribeFromIterable\r\n\r\nSee #3137 :)'
p4791
aS"Highlights of the recent changes includes:\r\n* removing the weird `onUnsubscribe(Action1)` method on `SyncOnSubscribe`.\r\n* added new tests and fixed generics issues (not enough `?`s).\r\n* added `Blackhole.consumeCpu()` to perf tests in order to force the micro benchmarks to artificially reduce volatile write contention.\r\n\r\nI'm now happy with this pull request and believe it's ready to be merged."
p4792
aS"Looks good to me now, although I don't see how one could implement never() with it or a source that stops emitting but doesn't terminate."
p4793
aS'There is a test that implements never() behavior however it does not terminate where as the Observable.never() instance would simply terminate without setting a producer. '
p4794
aS"Javadocs need some work here but i think that's the only thing remaining. "
p4795
aS'This test times out:\r\n```java\r\n    @Test(timeout = 1000)\r\n    public void testNever2() {\r\n        OnSubscribe<Integer> os = SyncOnSubscribe.createStateless(\r\n        new Action1<Observer<? super Integer>>() {\r\n            @Override\r\n            public void call(Observer<? super Integer> subscriber) {\r\n                \r\n            }});\r\n        Observable.create(os).subscribe();\r\n    }\r\n```'
p4796
aS'Yes it does and I think that it should remain this way. It should be documented in the contract of using the `SyncOnSubscribe` that your next function will not terminate if you do not eventually call the `observer.onCompleted()` or `observer.onError(e)`. Its similar to an `Observable.create` call with an `OnSubscribe` that synchronously loops over each `n` for all `requeqst(n)`. This would only terminate when... \r\n\r\n* the consumer is done (request 0)\r\n* the producer declares that its done (via terminal event)\r\n* an error occurs or subscription is otherwise unsubscribed (take)'
p4797
aS"You could also extend the API and use some `ObserverEx` that implements `Observer` plus a `stop()` method. Then document that if you whish to not emit any further items but don't want to terminate the stream, call stop()."
p4798
aS"I cannot see a valid use case of `Observable.never()` aside from merging in with an asynchronous hot observable such as `Observable.combineLatest(someFuncThatMayReturnNever(foo), hotObs)`. It seems like a tool to force merging observables in ways that obviate the need to merge at all. Are there use cases that I am missing?\r\n\r\nThat said I would rather not corrupt the api with a one-off concept of `stop()` without good reason. It's important that we get the API correct (even in `@experimental`). "
p4799
aS'Javadoc is now updated.'
p4800
aS':+1: reviewed the code; looks good.'
p4801
asg14
S'stealthcode:sync-on-subscribe'
p4802
sbsI3120
(iPull
Pull
p4803
(dp4804
g3
S"I'm using Observable for backport of Java 8's java.util.stream (i.e. [no more loops](http://www.deadcoderising.com/java-8-no-more-loops/)) for Android project.\r\n\r\n```java\r\nList<Foo> list2 = Observable.from(list)\r\n        .map(...)\r\n        .filter(...)\r\n        .toList().toBlocking().single()\r\n```\r\n\r\nBut it sometimes emits InterruptedException at BlockingObservable.\r\nhttps://github.com/ReactiveX/RxJava/issues/1804#issuecomment-61396523\r\n\r\nAs the BlocingObservable is placed in map() of another observable with `subscribeOn(Schedulers.io())`, and it is unsubscribed from main thread, perhaps Future.cancel(true) is called on unsubscribing. (#1914)\r\n\r\nThis PR allows BlockingObsevable not to be interrupted when source observable emits synchronously, by checking current latch or queue state before awaiting for them."
p4805
sg5
S'No InterruptedException with synchronous BlockingObservable'
p4806
sg7
(lp4807
S'Enhancement'
p4808
asg10
I3120
sg11
(lp4809
S"So what happens is that you use some blocking calls inside an observable sequence and it gets interrupted because of the underlying task is cancelled? \r\n\r\nI believe it is an indication that the flow can be assembled non-blockingly instead. I've been fiddling with the idea that once RxJava scheduler threads become identifiable, `toBlocking()` would throw/onError if it is attempted to use it inside such schedulers."
p4810
aS"> So what happens is that you use some blocking calls inside an observable sequence and it gets interrupted because of the underlying task is cancelled?\r\n\r\nYes. But in my case, blocking call is inside of **another (synchronous) method** and I don't want to make it non-blocking, for testability and convenience.\r\n\r\nFor example, in instagram-like app, there are entities to represent photo/movie and comment.\r\nBoth entities has entity translation logic and they can be written in for-loop or `toList().toBlocking().single()`.\r\n\r\n```java\r\n// MediaFileModel\r\npublic MediaFileEntity entityFromDao(MediaFileDao dao, List<CommentDao> commentDaoList) {\r\n    List<CommentEntity> comments = Observable.from(commentDaoList)\r\n            .map(mCommentModel::entityFromDao) // No more loops!\r\n            .filter(not(mCommentModel::isDeleted))\r\n            .toList().toBlocking().single(); // called from where..?\r\n    MediaFileEntity mediaFile = new MediaFileEntity();\r\n    mediaFile.setUuid(dao.getUuid());\r\n    mediaFile.setComments(comments);\r\n    ...\r\n    return mediaFile;\r\n}\r\n```\r\n\r\n```java\r\n// MediaFileStore\r\npublic Observable<List<MediaFileEntity>> allEntities() {\r\n    return queryAll() // async operation\r\n            .map(daoList -> {\r\n                    Observable.from(daoList)\r\n                            .map(mMediaFileModel::entityFromDao) // is calling toBlocking() or not...?\r\n                            .toList()\r\n            );\r\n}\r\n```\r\n\r\nI think so too that asynchronous (with blocking wait) operation should be assembled non-blockingly.\r\nBut I think it is just convenient if nesting of synchronous (without blocking wait) operation is allowed. :)"
p4811
aS'The changes look okay to me.'
p4812
aS'Thanks! :tada: :tada: '
p4813
aS"For your (who found this PR by searching) information:\r\n\r\nRxJava is quite slow for synchronous operation.\r\nEspecially for zip(), it has significant overhead of waiting for async (and even if it is sync actually) observables.\r\n\r\nSo it'll better to use Java 8 Stream API or its backport for sync stream operations.\r\n[Lightweight-Stream-API](https://github.com/aNNiMON/Lightweight-Stream-API) has only <500 methods and also suitable for Android."
p4814
asg14
S'ypresto:no-interrupt-for-sync'
p4815
sbsI3121
(iPull
Pull
p4816
(dp4817
g3
S'Resolves #3119.\r\n\r\nThis PR adds methods for detecting Android API Version and disables `NewThreadWorker.tryEnableCancelPolicy()` on Android API < 21 which has significant performance cost on Android.\r\n\r\nPR also improves performance of `NewThreadWorker.tryEnableCancelPolicy()` via caching Reflection.'
p4818
sg5
S'Improve performance of NewThreadWorker, disable search for setRemoveOnCancelPolicy() on Android API < 21'
p4819
sg7
(lp4820
S'Enhancement'
p4821
asg10
I3121
sg11
(lp4822
S'Checked on JVM (Java 8), Android 4.1.2 (API 16), Android 5.1.1 (API 22).'
p4823
aS"Fixed all comments, removed test with reflection, added more javadoc and comments, tests are now compilable on JDK 6 (didn't check but they should work fine). @akarnokd, @JakeWharton PTAL "
p4824
aS'Great, thanks!'
p4825
asg14
S'artem-zinnatullin:android-setRemoveOnCancelPolicy'
p4826
sbsI3123
(iPull
Pull
p4827
(dp4828
g3
S'There is one too many.'
p4829
sg5
S'Remove redundant type parameter in EmptyAction'
p4830
sg7
(lp4831
S'Enhancement'
p4832
asg10
I3123
sg11
(lp4833
S"Looks simple enough but since this involves removing a type argument from a private class which is only assigned to a public interface of his, I'm not certain if this would or wouldn't cause binary compatibility problems."
p4834
aS"Haven't found anything that indicates binary incompatibility due to this change, thanks!"
p4835
asg14
S'jacek-rzrz:1.x'
p4836
sbsI3126
(iPull
Pull
p4837
(dp4838
g3
S'Resolves #3125 via test, makes `TestSubscriber.assertError()` little bit faster via caching first error, and allows to use `TestSubscriber.assertError(null)`.'
p4839
sg5
S'Allow to use null as error for TestSubscriber.assertError()'
p4840
sg7
(lp4841
S'Bug'
p4842
asg10
I3126
sg11
(lp4843
S'Generally, you are not supposed to call onError with null and not expect one so the NPE in the test in this case, in my opinion, is acceptable as a failure state.'
p4844
aS"Yeah, I agree, but if we'll deny `null` as error we will break backward compatibility because it was allowed in previous versions of RxJava :("
p4845
aS"I don't know. Are there really users that send null through onError and test for it with this assert?"
p4846
aS'According to #3125 there is at least one user of `onError(null)`, but personally, I\'d like to deny it. Though it might be interpreted as breaking change in the API I\'d just call it "bugfix", add check to the `TestSubscriber` and write tests that asserts that `null` will break the execution :)\r\n\r\nIf you agree, I\'ll update this PR and we will deny `null`s for errors.'
p4847
aS'`onError(null)` is definitely a bad practice and reactive-streams explicitly forbids it, so should we.'
p4848
aS'Agreed, `onError(null)` is invalid. This is supposed to represent throwing exceptions, and we can not "throw null".'
p4849
asg14
S'artem-zinnatullin:test-subscriber-null-error'
p4850
sbsI3129
(iPull
Pull
p4851
(dp4852
g3
S"Apparently, we forgot about this operator. The backpressure handling is a trivial case with `ProducerArbiter`. I've also fixed some apparent code indentation error.\r\n\r\nOriginally reported in #3128 with a test case which I didn't include due to its lengthy nature; however, I did run the test manually and both passed after the fix."
p4853
sg5
S'Fix retry with predicate ignoring backpressure.'
p4854
sg7
(lp4855
S'Bug'
p4856
asg10
I3129
sg11
(lp4857
sg14
S'akarnokd:RetryPredicateFix'
p4858
sbsI3130
(iPull
Pull
p4859
(dp4860
g3
S"@akarnokd as I promised in #3112 I am adding nice class that allows to assert that:\r\n\r\n* Class has **only one constructor without args and that it's private**.\r\n* Constructor throws exception (optional) with some type and/or message.\r\n\r\nHere is the repository: https://github.com/pushtorefresh/java-private-constructor-checker\r\n\r\nHope you'll find it nice & useful!\r\n\r\nPrevious solution didn't check that constructor is private, that class has only one constructor and it required a lot of boilerplate code!"
p4861
sg5
S'Switch to PrivateConstructorChecker for "testNotInstantiable" tests'
p4862
sg7
(lp4863
S'Enhancement'
p4864
asg10
I3130
sg11
(lp4865
S'Instead of another library, you could create a utility method on a test class that does this check and call it from all places.'
p4866
aS"I can just copy `PrivateConstructorChecker` to the RxJava tests. You won't have problems with licence because author of `PrivateConstructorChecker` is me :)\r\n\r\nOkay?"
p4867
aS'Sounds good.'
p4868
aS"Added `PrivateConstructorChecker` to the test utils and switched all previous `testNotInstantiable` tests to this checker.\r\n\r\n@akarnokd I'll add missing tests for other non-instantiable classes in a separate PR to make it easier for review."
p4869
aS"I don't understand why we need this assertion, or the ability to assert this via tests. "
p4870
aS':+1:'
p4871
aS"Without having an external dependency, that removes my strong opinion. Now I don't have strong opinions one way or another on this. I can't think of a single time when a private constructor becoming public has been an issue, nor do I think people will ever remember to write unit tests asserting this behavior, but if it is deemed worthwhile by others, it is fine by me. \r\n\r\n@ReactiveX/rxjava-committers what do you think?"
p4872
aS"I loved to see the coverage max out with this kind of test in my related PRs and I planned to factor out the common check in the next improvement run. I'm in favor, but the checker's package should be rx.internal.util instead."
p4873
aS'Keep it among the tests of course.'
p4874
aS'@akarnokd done!'
p4875
aS'Is the motivation here to get a higher score on code coverage reports? Why is it necessary to create private constructors? 100% is not achievable nor is it an effective measure of good tests. '
p4876
aS"@stealthcode not only higher score on code coverage, but also verification of the class contract.\r\n\r\nWould you test `public` or `protected` constructor or `static factory`? I guess yes. So why not test `private` constructor? It's a method of a class, it has behavior and this behavior should be tested (my personal opinion)."
p4877
aS"Okay. I can't see any harm (or benefit) from asserting that the `Actions`, `Functions`, `Observers`, and `Subscribers` classes cannot be instantiated. I personally don't think these contracts are at risk of changing. That said, it couldn't hurt :smiley: Plus having the utility class could help in areas (i.e. the `rx.Observable` private constructor). "
p4878
aS"Fair enough :) \r\n\r\nI'm going to add such tests for all other classes (`rx.Observable` too) with private constructors in a separate PR. "
p4879
aS"I don't want to discourage writing good tests. Submitting PRs to improve the quality of tests is certainly welcome and that's what I see that this PR is doing. That said, the tests that you are modifying are making assertions and establishing certain contracts that are not necessarily essential or permanent. \r\n\r\nWe are making a conscious decision not to require code coverage (or other such tools) in the release process, nor are we taking a stance on which tools we want people to use. However we encourage and hope to provide a mechanism by which contributors can standardize tools configuration if you the individual developer choose to use these tools (see #3089). \r\n\r\nA larger decision should be made as to how we will address the use of build or bug finding tools in RxJava. I'm going to open an issue so that people can comment with suggestions or requests. "
p4880
aS"I'd support merging the helper utility if we can use it to assert that public constructors don't exist for the classes where we have static method helpers to build them. I think this list includes:\r\n\r\n* rx.(Observable | Notification)\r\n* rx.observables.(BlockingObservable | ConnectableObservable | GroupedObservable)\r\n* rx.plugins.RxJavaPlugins\r\n* rx.subjects.(AsyncSubject | BehaviorSubject | PublishSubject | ReplaySubject)\r\n\r\nand (unless someone objects) I think we could delete the tests to assert non-public constructors for\r\n\r\n* rx.observers.(Subscribers | Observers)\r\n* rx.functions.(Functions | Actions)\r\n\r\nI think these are valid contract assertions (but anyone feel free to correct me). \r\n\r\nAlso I opened the issue to discuss tools (as mentioned in my previous comment). Please see #3164. "
p4881
aS'@artem-zinnatullin can this be closed or is there still work to be done in this pull request?'
p4882
aS"Let's close this, looks like not a lot of people see sense in this (it's ok, no problem)."
p4883
asg14
S'artem-zinnatullin:private-constructor-checker'
p4884
sbsI3135
(iPull
Pull
p4885
(dp4886
g3
S'Right now its not possible to both extend `rx.Subscriber` and implement `rx.Producer`. See test below.\r\n\r\n```java\r\npublic class Foo<T> extends Subscriber<T> implements Producer {\r\n\r\n    @Override\r\n    public void onCompleted() {\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable e) {\r\n    }\r\n\r\n    @Override\r\n    public void onNext(T t) {\r\n    }\r\n\r\n    @Override\r\n    public void request(long n) {\r\n    }\r\n}\r\n```\r\n\r\nCurrently this blows up because `protected rx.Subscriber#request(long)` collides with `public rx.Producer#request(long)`. '
p4887
sg5
S'Renaming rx.Subscriber#request(long) to requestFromProducer(long)'
p4888
sg7
(lp4889
S'Discussion'
p4890
aS'Enhancement'
p4891
asg10
I3135
sg11
(lp4892
S"This is a drastic public API change which breaks anyone relying on the protected request() method. I fear the name clash won't be resolved in 1.x line. ReaciveStreams luckily doesn't suffer from this. Otherwise, its usually not much saving because if there is request tracking involved, either the specific producer extends AtomicLong or has an AtomicLong instance field."
p4893
aS'This affects anybody writing a class that extends `rx.Subscriber` so this certainly would not be a patch. This could prevent the need for an unnecessary object initialization cost for separate internal subscribers and producers. I think it should be considered.'
p4894
aS'It would be good for changes like this to marked for consideration at the next breaking change API release. Perhaps we could use a label to track these (say `2.x`).'
p4895
aS"I don't think this won't be much of a problem in 2.0 since it is going to be based on reactive-streams (or j.u.c.Flow) *interfaces* and if there is going to be a default implementation for a `Subscriber` (i.e., Observer), that won't be used by the operators so it can have a method `protected void request(n)`.\r\n\r\nI vote for closing this PR."
p4896
aS'We are going to address this as an issue with 2.x label. '
p4897
asg14
S'stealthcode:rename-subscriber-request'
p4898
sbsI3137
(iPull
Pull
p4899
(dp4900
g3
S'Some restructuring reduces the overhead of operators:\r\n\r\n  - extending `AtomicLong` gives access to atomic intrinsics for the request accounting\r\n  - loading the final fields into local variables prevents them from being reloaded from cache due to the atomics around them\r\n  - request() is hot but generally too large due to the fastpath/slowpath fit and JIT may not want to pick it up early. By refactoring the two paths into two separate methods, it becomes inline friendly for the either of the paths.\r\n\r\nBenchmark results on my i7 4770K, Windows 7 x64, Java 8u51:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9147979/50438994-3d70-11e5-8e17-1af9b23c8506.png)\r\n\r\nThe benchmark from #3118 gives this result:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9148013/f49effa0-3d70-11e5-9d66-346bfaba6daa.png)\r\n\r\n'
p4901
sg5
S'FromIterable overhead reduction.'
p4902
sg7
(lp4903
S'Enhancement'
p4904
asg10
I3137
sg11
(lp4905
S'benchmark improvements are spectacular!'
p4906
aS"I don't want to merge this until somebody else verifies the improvement on a different processor/OS."
p4907
aS'@akarnokd I can run it. How are you generating the benchmark reports in the image? '
p4908
aS'I have a tool for displaying JMH results: https://github.com/akarnokd/jmh-compare-gui . Then I take a screenshot and cut it around.'
p4909
aS'Here are the results from my laptop (2.2GHz intel Core i7; OS X Yosemite 10.10.4 Java 1.8u51).\r\n```\r\nBenchmark                          (size)   Mode   Samples        Score  Score error    Units\r\nr.o.FromIterablePerf.direct             1  thrpt         5 22874735.514   569868.213    ops/s\r\nr.o.FromIterablePerf.direct          1000  thrpt         5   287497.063    13353.846    ops/s\r\nr.o.FromIterablePerf.direct       1000000  thrpt         5      278.303       45.706    ops/s\r\nr.o.FromIterablePerf.from               1  thrpt         5  9434804.935   160084.549    ops/s\r\nr.o.FromIterablePerf.from            1000  thrpt         5   226639.074    82633.950    ops/s\r\nr.o.FromIterablePerf.from         1000000  thrpt         5      245.069        5.076    ops/s\r\nr.o.FromIterablePerf.fromUnsafe         1  thrpt         5 23373598.288   769396.099    ops/s\r\nr.o.FromIterablePerf.fromUnsafe      1000  thrpt         5   288430.485     8187.201    ops/s\r\nr.o.FromIterablePerf.fromUnsafe   1000000  thrpt         5      286.498       11.960    ops/s\r\n```\r\n\r\nSeems comparable. '
p4910
asg14
S'akarnokd:FromIterablePerf'
p4911
sbsI3138
(iPull
Pull
p4912
(dp4913
g3
S'Applied some refactorings and local variable usage to reduce the overhead.\r\n\r\nFew observations:\r\n  - Having too many local variables may cause register spill, even on x64 which makes some `size` benchmark faster while other slower.\r\n  - The observeOn benchmarks are quite hectic because of receiving thread migration caused by the round-robin worker assignment. It affects the benchmarks with 1 or 1000 elements in the stream.\r\n  - Note that the previous `OperatorRangePerf` `size = 1` measured the speed of `just` due to the optimization of `range()`. The updated perf now instantiates the `OnSubscribeRange`.\r\n  - Note that the `observeOn` benchmark with `size = 1` run the `just()` as well.\r\n\r\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u51)\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9153053/5f501902-3e42-11e5-85ea-8ff1f6725c08.png)\r\n'
p4914
sg5
S'Range overhead reduction.'
p4915
sg7
(lp4916
S'Enhancement'
p4917
asg10
I3138
sg11
(lp4918
S'Updated the PR to fix the lack of widening in the fast path if the end is Integer.MAX_VALUE by adding 1L (the slow path adds the long idx value which does this widening).'
p4919
aS"I'm merging this; the values are better for the thread-stable range perf and observeOn is simply too hectic with the round-robin core usage."
p4920
asg14
S'akarnokd:RangePerf'
p4921
sbsI3141
(iPull
Pull
p4922
(dp4923
g3
S"The former Executor-based check instantiated the wrong worker. In addition, I've refactored the common parts, added check for periodic task retention (after the first round) and added the checks to computation scheduler test as well."
p4924
sg5
S'Improved Scheduler.Worker memory leak detection'
p4925
sg7
(lp4926
S'Enhancement'
p4927
asg10
I3141
sg11
(lp4928
sg14
S'akarnokd:SchedulerLeakCheck'
p4929
sbsI3142
(iPull
Pull
p4930
(dp4931
g3
g53
sg5
S'Remove redundant final modifier from static method in Actions'
p4932
sg7
(lp4933
S'Enhancement'
p4934
asg10
I3142
sg11
(lp4935
S'This will conflict with #3123.'
p4936
aS"Yep, I saw #3123, that's why I didn't remove `T9`.\r\n\r\nIf you'll merge #3123 I'll just update this PR."
p4937
aS"I've merged #3123, could you update this PR?"
p4938
aS'Updated!'
p4939
aS'Great!'
p4940
asg14
S'artem-zinnatullin:actions-redundant-final'
p4941
sbsI3143
(iPull
Pull
p4942
(dp4943
g3
g53
sg5
S'Fix for BackpressureUtils method javadoc'
p4944
sg7
(lp4945
sg10
I3143
sg11
(lp4946
S'Thanks'
p4947
asg14
S'artem-zinnatullin:backpressure-utils-javadoc-fix'
p4948
sbsI3144
(iPull
Pull
p4949
(dp4950
g3
g53
sg5
S'Remove redundant cast in Exceptions'
p4951
sg7
(lp4952
S'Enhancement'
p4953
asg10
I3144
sg11
(lp4954
S'Thanks!'
p4955
asg14
S'artem-zinnatullin:remove-redundant-cast-in-exceptions'
p4956
sbsI3147
(iPull
Pull
p4957
(dp4958
g3
S"\r\nP.S. \r\n@benjchristensen @akarnokd sorry for large amount of simple pull requests, I'm doing full code review of RxJava sources http://artemzin.com/blog/rxjava-code-review-part-1/ and I'll create PRs and issues during this review.\r\n\r\nI'll try to group changes by themes so it will be easy to review them. Looks like this adventure is going to be part of #3145!"
p4959
sg5
S'Remove unnecessary static modifier'
p4960
sg7
(lp4961
S'Enhancement'
p4962
asg10
I3147
sg11
(lp4963
S"If it were only me, I'd accept cosmetic changes such as this, but history tells me not to. "
p4964
aS"I like this PR too much, I'm going to merge it ;)"
p4965
aS"> I like this PR too much, I'm going to merge it ;)\r\n\r\n:-)"
p4966
asg14
S'artem-zinnatullin:unnecessary-static-modifier'
p4967
sbsI3149
(iPull
Pull
p4968
(dp4969
g3
S'Repost of #3022.'
p4970
sg5
S'Scheduler shutdown capability'
p4971
sg7
(lp4972
S'Enhancement'
p4973
asg10
I3149
sg11
(lp4974
S'We still need to decide on the reset vs shutdown distinction: https://github.com/ReactiveX/RxJava/pull/3022#issuecomment-114591952\r\n\r\nWhat is your perspective? Do you have a strong opinion one way or another?'
p4975
aS'With start/shutdown, there is a clear intention to stop everybody. With reset, any running code could respawn the threads and the new threads will resume leaking. I prefer start/shutdown.'
p4976
aS'Agree, it will be great to have ability to stop Schedulers and prevent new workers from scheduling for apps that run in Servlets and other similar containers which can be stopped externally.'
p4977
aS"I'm happy with the start/shutdown pair which seems to support my primary use cases:\r\n\r\n* resource release on webapp shutdown in container\r\n* resource release on completion of programs run by a framework that looked for unreleased threads (maven)\r\n* on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)\r\n\r\nThanks @akarnokd!"
p4978
aS'the `start`/`shutdown` semantic looks good to me, more explicit, best enforcement of shutdown :cop: and good compatibility with items mentioned by @davidmoten (which are pretty much our use cases as well) :ok_hand: '
p4979
aS"I'll following this thread to be notified when it's merged. Thanks @akarnokd "
p4980
aS"@benjchristensen do you consider we have consensus on naming? after that it'd be showtime :clapper: :joy:"
p4981
aS':up: because so many customers from us run into this.'
p4982
aS'@daschl  :+1: \r\n'
p4983
aS"I would like a bit more context on what the goal is for the scheduler shutdown capability. @davidmoten and any others, please respond. Thanks. \r\n\r\n> resource release on webapp shutdown in container\r\n\r\nWhat resources exactly need to be freed? Shutting down the schedulers would prevent new workers from being scheduled and would free up threads from the executor. Is this the desired behavior or is there some side effect that you are looking for?\r\n\r\n> resource release on completion of programs run by a framework that looked for unreleased threads (maven)\r\n\r\nCould anyone name a framework that's impacted? Is the concern that open threads keep the framework from properly terminating?\r\n\r\n> on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)\r\n\r\nWould the `TestScheduler` solve this problem for you? This doesn't rely on singleton values and can be used to precisely test scheduling behavior. "
p4984
aS"@stealthcode I can answer the question 2. I hope it help you. \r\n\r\nCould anyone name a framework that's impacted? Is the concern that open threads keep the framework from properly terminating?\r\n\r\n- Couchbase Java SDK\r\n\r\nCB SDK are not able to finish some of they own threads because it is referring RxComputationThreadPool threads who can't be finished.\r\n\r\nYou can see more details about how this issue are affecting this framework here.\r\nhttps://forums.couchbase.com/t/the-v2-of-the-java-client-leaks-rxjava-threads-on-shutdown/3890/19"
p4985
aS"@stealthcode I can give you the answer to your questions, too.\r\n\r\nI'd like to use RxJava in the container (e.g. I'd like to use Jersey Rx Client on Tomcat). Unfortunately, it is impossible to shutdown _RxComputationThreadPool-*_ threads and container has memory leaks. That causes that RxJava is inapplicable for my purposes :( And in my case - regarding question 1 - yes, shutting down all schedulers permanently is a desired behaviour. And TestScheduler is not a solution. \r\nSo, I'm really looking forward to seeing this PR accepted and released!"
p4986
aS'@mjakubowski84 :+1:  similar case here.'
p4987
aS'@mjakubowski84 understood. regarding the TestScheduler - this is meant for use in tests and highly recommended. When it comes to a container you would definitely want to use a real scheduler. \r\n\r\nSo, what I hear is that there is no desire to resume the scheduler once it is shut down. My concern is that by offering a `SchedulerLifecycle.start()` method we are inviting non-deterministic behavior in the case that someone wants to use this to teardown and then resume (in integration tests for example). Would it be acceptable to remove the `start()` method from the public interface and rename `shutdown()` to `teardown()` to more accurately describe the intent?'
p4988
aS"I don't have strong opinion between shutdown/teardown.\r\n`teardown` makes the intent clearer, but `shutdown` is more idiomatic (in the context of java executor).\r\n\r\nOtherwise the code LGTM :+1: "
p4989
aS'Another thing, if we want to be more java idiomatic, maybe hiding the `start()` is the right thing to do.\r\nIt will also have the benefit of avoiding bug by misusage of the library (calling `start()` after a `shutdown()`).'
p4990
aS'I can make `Schedulers.start()` package private so the tests can use it but I the `Scheduler` implementations have to keep their start public.'
p4991
aS'Please do, I believe that would be better.'
p4992
aS'Done.'
p4993
aS'@akarnokd @stevegury folks, do you think its possible to get this into 1.0.15?'
p4994
aS'@akarnokd thanks. '
p4995
aS'I think this is fine :+1: '
p4996
aS'Do you guys have a plan date to merge it?\r\n'
p4997
aS"@akarnokd I think it's appropriate that you merge this PR since you are most familiar with this code. If you think you are happy with it then feel free. "
p4998
aS"Oh, sorry, didn't recount the number of likes. Merging."
p4999
aS'Where can I get the latest build with this fix? Maven central is still at 1.0.14.'
p5000
aS'@chiangh123 you can clone the project and build it from master. Good luck :)\r\n'
p5001
aS"`RxJava` uses bintray for binaries and also publishes snapshots in JFrog's OSS artifactory, so you can add the following repository to your `pom.xml`:\r\n\r\n```xml\r\n<repository>\r\n  <snapshots />\r\n  <id>snapshots</id>\r\n  <name>libs-snapshot</name>\r\n  <url>http://oss.jfrog.org/artifactory/libs-snapshot</url>\r\n</repository>\r\n```\r\n\r\nAfter that you should be able to depend on rxjava `1.0.15-SNAPSHOT`."
p5002
asg14
S'akarnokd:SchedulerShutdownV3'
p5003
sbsI3150
(iPull
Pull
p5004
(dp5005
g3
S'Repost of #3050.'
p5006
sg5
S'Window operators now support backpressure in the inner observable.'
p5007
sg7
(lp5008
S'Enhancement'
p5009
asg10
I3150
sg11
(lp5010
S'Do we need to maintain both BufferUntilSubscriber V1 and V2 at the same time?'
p5011
aS"`BufferUntilSubscriber` does some black backpressure magic inside GroupBy which I wasn't able to figure out and the V2 doesn't pass unit tests with it."
p5012
aS"It seems like `BufferUntilSubscriber` is being used as a special case buffer for `OperatorGroupBy` while `BufferUntilSubscriberV2` is custom for the windowing operators. If they cannot be reconciled to work for both cases then could you please move them into the operators as static nested classes?\r\n\r\nAlso since groupBy's back pressure is being patched maybe it'd be a good idea to revisit this pull request with those changes to try to combine the two `BufferUntilSubscriber`s. "
p5013
aS"These are internal classes and can live in their own files. The groupBy in #3428 no longer uses it and once merged, this `BufferUntilSubscriberV2` can be renamed; or better yet, promoted to a standard API `UnicastSubject`.\r\n\r\nI don't think we should be so eager to combine things; such combinations end up in monstrous classes which are then sources of misunderstanding and complexity."
p5014
aS"`BufferUntilSubscriber` was a proposed as a solution to the time gap problem in group by so because `BufferUntilSubscriberV2` doesn't work to solve this problem for group by leads me to question it's naming. Is it built to handle the same problem or a different problem? Are you proposing to rename v2 to `UnicastSubject`? "
p5015
aS"> I don't think we should be so eager to combine things; such combinations end up in monstrous classes which are then sources of misunderstanding and complexity.\r\n\r\nI'm proposing to hide away internal functionality from the public API. "
p5016
aS"Neither of these are public API since they reside in the internal package. Hiding them further away seems to be unnecessary. In addition, `BufferUntilSubscriberV2` is effectively turned into the official `UnicastSubject` in 2.x.\r\n\r\nHistorically, `BufferUntilSubscriber` started out to solve the time-gap problem for the non-backpressured `groupBy` and `window`. When the backpressure was introduced, `groupBy` had to support backpressure but `BufferUntilSubscriber` wasn't enhanced. Instead, `BufferUntilSubscriber` is used as a middle man and the subscription process is hijacked to inject a Producer that attempts to coordinate requests. Apparently, this didn't cover all request pattern hence the original bug. \r\n\r\nDue to this very specific hijacking, adding backpressure to `BufferUntilSubscriber` directly didn't work out as it conflicted with the request coordination in a way I couldn't resolve. Therefore, I decided to have a separate class that does backpressure but doesn't have to be involved in request coordination for `window` (which I believe can't be established with a reasonable strategy)."
p5017
aS"All I'm asking for is a rename from v2 in 1.x"
p5018
aS"Maybe I missed it but what's the name you'd like?"
p5019
aS"I've renamed the class to `UnicastSubject` and combined the `State` with the `OnSubscribeBUS` class."
p5020
aS"I'm going to sleep now (it's midnight here) so if you only have concerns about naming, location and visibility, I suggest merging this PR then posting a separate PR with your changes (and merge it if you can get somebody else to like it in the meantime)."
p5021
aS'@akarnokd would you mind rebasing this?'
p5022
aS'Done.'
p5023
aS':+1: '
p5024
asg14
S'akarnokd:BufferUntilSubscriberBackpressureV2'
p5025
sbsI3151
(iPull
Pull
p5026
(dp5027
g3
S'Closes #2967.'
p5028
sg5
S'Add semantic-named override for unsubscribe-action subscription.'
p5029
sg7
(lp5030
S'Discussion'
p5031
asg10
I3151
sg11
(lp5032
S'Bikeshed away the name!'
p5033
aS"I think I'm leaning towards `withUnsubscribeAction` actually..."
p5034
aS'Should we add `BooleanSubscription#createWithUnsubscribeAction`?'
p5035
aS"Oh! I didn't realize it was in the public API let alone has duplicates of these methods. I would think that we'd deprecate both of its static factory methods and the entire class itself as there's no reason (that I can see) for accessing it directly vs the methods on `Subscriptions`."
p5036
aS'I prefer `from` or `wrap`.'
p5037
aS'Both of those seem equally as ambiguous. Creating a subscription _from_ an action and _wrapping_ an action to create a subscription offer no insight into their behavior. One has to have seen this method in use before and/or have looked at the javadoc (and in both of those cases, explicitly remembered the behavior).'
p5038
aS'builder?'
p5039
aS'`create(UnsubscribeAction)`?'
p5040
aS"@stevecstian the method itself returns a `Subscription` so changing it to return a builder or have different semantics would be much more significant than renaming. The method is marked as `@Beta` which means it's possible to change but we should avoid a method signature change unless we have a good reason. We could create a builder by introducing a new static method and this change would not break this method's semantics. \r\n\r\nI like `Subscriptions.doOnUnsubscribe(Action0)` or `Subscriptions.onUnsubscribe(Action0)`."
p5041
aS'@benjchristensen can you provide some clarification on the changes that would be acceptable for methods labeled `@Beta`? This clarification may be necessary for future issues.'
p5042
aS'Having `UnsubscribeAction extends Action0` and `Subscriptions.create(UnsubscribeAction)` seems like overkill...  `Subscriptions.doOnUnsubscribe(Action0)` is looking good to me.\r\n\r\n@JakeWharton thoughts?'
p5043
aS'I am comfortable with that. That was one of my suggestions from #2967.'
p5044
aS"What about the deprecation of associated methods on `BooleanSubscription`? I don't see a reason to have both sets which duplicate the exact same API functionality."
p5045
aS'@JakeWharton if we deprecate `BooleanSubscription.create(Action0)` then we need to change `BooleanSubscription(Action0)` from `private` to default level constructor, right?'
p5046
aS"I would:\r\n* Deprecate `BooleanSubscription.create()` and `BooleanSubscription.create(Action0)` methods with pointers to `Subscriptions`'s static methods.\r\n* Deprecate the `BooleanSubscription` type with instructions to use `Subscriptions`'s static methods.\r\n* Change `BooleanSubscription`'s constructor to package-private.\r\n* Reference the constructor directly from `Subscriptions.empty()`, `Subscriptions.create(Action0)`, and `Subscriptions.doOnUnsubsribe(Action0)`."
p5047
aS"Also:\r\n* Deprecate `BooleanSubscription`'s no-argument constructor with a reference to `Subscriptions.empty()`"
p5048
aS'@JakeWharton :+1:  '
p5049
aS'> can you provide some clarification on the changes that would be acceptable for methods labeled @Beta? This clarification may be necessary for future issues.\r\n\r\nIt is stated at https://github.com/ReactiveX/RxJava#beta:\r\n\r\n> APIs marked with the `@Beta` annotation at the class or method level are subject to change. They can be modified in any way, or even removed, at any time. If your code is a library itself (i.e. it is used on the CLASSPATH of users outside your own control), you should not use beta APIs, unless you repackage them (e.g. using ProGuard, shading, etc).\r\n\r\nThus, we have higher confidence in `@Beta` APIs than we do `@Experimental`, but both can change at any time, even in a minor release.'
p5050
aS"Seeing how `Subscriptions.create(Action0)` is already part of the public API I'm inclined to leave this wart alone in 1.x. I recommend closing this PR and opening a new one against 2.x branch."
p5051
aS'Sounds good to me.'
p5052
asg14
S'JakeWharton:jw/unsubscribed'
p5053
sbsI3154
(iPull
Pull
p5054
(dp5055
g3
g53
sg5
S'Add Observable.fromCallable() as a companion for Observable.defer()'
p5056
sg7
(lp5057
S'Enhancement'
p5058
asg10
I3154
sg11
(lp5059
S'Also, I see that for Rx newcomers (some of my coworkers, for example) is not very clear why they need to return `Observable` if they just want to defer some code. '
p5060
aS'Sounds ok to me. A name using the `defer` prefix might be nice for discoverability purposes.'
p5061
aS'We can call it `from()`, I guess it will be nice to write `Observable.from(() - > someFunc())` and even better with method `Observable.from(this::someFunc())`! '
p5062
aS"We can't call it from because of potential conflict in dynamic languages. I'd prefer start or startAsync ."
p5063
aS">We can't call it from because of potential conflict in dynamic languages. I'd prefer start or startAsync .\r\n\r\n`Observable.start()` will be confusing because actually it won't start until you subscribe to it.\r\n\r\n`Observable.startAsync()` is also confusing and it can be non-async if you won't add `subscribeOn()`.\r\n\r\nIf we can not use `defer()` I'd prefer `lazy()` mm? cc @benjchristensen "
p5064
aS'Whatever the name is (`deferJust(Func0<T>)`?) I would like the implementation to return a subclass of ScalarSynchronousObservable that overrides the `T get()` method with a call to the closure passed in.'
p5065
aS"@abersnaze \r\n\r\n>  I would like the implementation to return a subclass of ScalarSynchronousObservable\r\n\r\nNot sure about this, because I don't know what variant will be better (more efficient, maintainable, etc) `SingleDelayedProducer` or `ScalarSynchronousObservable`, @akarnokd I'd like to hear your opinion on this if you don't mind."
p5066
aS'There is special logic in `merge()` [link to code] (https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/internal/operators/OperatorMerge.java#L227) to unwrap `ScalarSynchronousObservable` by invoking the `get()` method directly and avoiding all the overhead of creating a `Subscriber` and `SingleDelayedProducer` to just get the value.  This should make `flatMap` of these very fast.'
p5067
aS"You can't return the scalar observable because the value has to be ready at assembly time and be constant. Any side effect would only happen once as well."
p5068
aS"@akarnokd I'll try to send in an example of what I mean but I don't see any reason why `T get()` can't call a `Func0<T>`.  It would still be Scalar and Synchronous but there isn't anything that says that it has to be constant."
p5069
aS'Instead of modifying ScalarSynchronousObservable, you could add a new case to the type check in merge.'
p5070
aS'check out #3163 (made it PR so it can be discussed over there).'
p5071
aS'There are several problems with your proposal\r\n  - increased likelihood of bimorphic/megamorphic dispatch at the call sites of get()\r\n  - get() can now throw which is unexpected at the call sites\r\n  - calling the func might carry side effects and calling it during assembly time is incorrect'
p5072
aS':+1:'
p5073
aS"Switched to `Callable` (available in JDK since 1.5, so it's okay), now you can defer function that potentially throws checked exception!\r\n\r\nI hope `Observable.lazy()` (or whatever name it will have) will be the easiest way to create `Observable` that should emit one item only after `subscribe()` (which is pretty common Rx task).\r\n\r\nSo, I guess it's time to select the name for this operator and add javadoc."
p5074
aS"I would also like to see the observables produced by `lazy` take advantage of a path similar to ScalarSynchronousObservable (statically allocated and statically available data). I have an idea that I'd like to explore more and I'll open another pull request that enables this for both `Observable.defer` and `Observable.lazy` (assuming this gets merged)."
p5075
aS'Added javadoc and squashed.\r\n\r\nP.S. Today I used `Observable.defer()` ~20 times and each time I could use `Observable.lazy()` and save some lines of code, would be nice to see it in 1.0.15!'
p5076
aS"All Observables are lazy. Why can't you just use Observable.create()?"
p5077
aS'@staltz That would conflict with `create(OnSubscribe)` in dynamic languages.\r\n\r\nMy new name proposals:\r\n\r\n  - `deferJust`\r\n  - `deferSingle`\r\n  - `deferScalar`'
p5078
aS'`deferSingle` sounds nice to me.\r\nAlso thought of `deferValue`.'
p5079
aS'>All Observables are lazy.\r\n\r\nIt\'s not true, in Java (and all JVM langs that I know) argument of a method computed before actual invocation of this method.\r\n\r\nFor example if you have method `Value computeValue() { ... }` and you want to make an Observable from it, you can use `Observable.just(computeValue())` but the problem is that `computeValue()` will be computed in the thread that called `Observable.just()` and not on the Scheduler that you specify via `subscribeOn()`.\r\n\r\nSo, in my opinion `just()` and `from` are not "lazy".\r\n\r\n`deferJust` looks good. `deferSingle` may conflict with `Single` for RxJava users.'
p5080
aS'Sorry to be late into the game here, but it seems you really want an overload of `just` that has side-effects, i.e. reruns a factory function every time you subscribe to produce the value. I think the name should reflect that.\r\n\r\nI am surprised this is a common scenario since it feel super narrow. Personally I think the longer `defer` code conveys the intent perfectly. Plus it also works if you want to do generate more than one value\r\n\r\n```Java\r\nObservable\r\n  .defer(() -> {\r\n    Value value0, value1, ...valuen-1 = ...;\r\n    // some code\r\n    return Observable.just(value0, ..., valuen-1);\r\n  })\r\n .subscribeOn(...)\r\n```\r\nAnyway, just my 2 cents.'
p5081
aS"You have just solved the boilerplate for one very particular case that does not generalize to the other overloads of `just`, and increased the concept count. But if it makes you happy, it can't be that bad."
p5082
aS"I'm not a fan. I prefer composability. You can easily compose existing operators to recreate `deferJust`. They're in the name."
p5083
aS'I called this operator `fromCallable` in 2.x where the `from` operators are suffixed by the type to be very specific and to avoid overload resolution problems.'
p5084
aS'Nice and understandable name :+1: Renamed to `fromCallable()` to make a switch from v1 to v2 easier.'
p5085
aS'@akarnokd @benjchristensen is there anything that blocks this PR? '
p5086
aS"I'm totally in favor of this addition so we can start promoting it instead of `create` with a single result so commonly found. We are still waiting for the second approve from another member."
p5087
aS':-1: this is a less general use case than an `Observable.just()` or a `defer` that returns a `just` and it does not benefit from the merge optimizations. '
p5088
aS'We can always optimize later.'
p5089
aS"I see the compelling usability need (easy to type, simple to find) so I see that users would adopt it but it would detract from the optimized path. I don't think this will perform well if its adopted in the Netflix ecosystem. Many other users here have raised objections as this use case can be handled with existing operators and that composition would skip the merge ring buffer allocation/draining.  "
p5090
aS"That's not how the merge optimizations work."
p5091
aS"Oh, you're right. Merge can't optimize either path. At least not as a scalar. It still has to subscribe to de defer. My mistake. "
p5092
aS'My objections were on faulty assumptions. I take back my -1. :+1:  '
p5093
aS'Great!'
p5094
aS'Great addition! Thanks :+1: '
p5095
asg14
S'artem-zinnatullin:defer-for-humans'
p5096
sbsI3155
(iPull
Pull
p5097
(dp5098
g3
S'Discussed in #2464, when an observable emits `onCompleted` but `unsubscribe` in `SafeSubscriber` throws then the error should be reported to the `RxJavaPlugin` error handler and if that fails a stack trace is written to `System.err`.'
p5099
sg5
S'SafeSubscriber - report onCompleted unsubscribe error to RxJavaPlugin '
p5100
sg7
(lp5101
S'Bug'
p5102
aS'Enhancement'
p5103
asg10
I3155
sg11
(lp5104
S"There are a lot of repeated try catch blocks calling the RxJavaPlugins error handler so I've made a `RxJavaPluginUtils` class. It will also be called from the `using` fix which I will submit once this PR has been accepted."
p5105
aS'One of the tests fails.'
p5106
aS"I'm going to ponder the issue of throwing after reporting to the error handler a bit."
p5107
aS"I've been looking for a bit of guidance about what to do when `unsubscribe` throws in `SafeSubscriber`. *Rx Design Guidelines* doesn't really cover it. *reactive-streams-jvm* does touch upon it saying:\r\n\r\n>3.15 Calling Subscription.cancel MUST return normally. The only legal way to signal failure to a Subscriber is via the onError method.\r\n\r\nI think given that the contract has been breached it is fair to throw an exception and I think a new wrapper `UnsubscribeFailureException` would be appropriate.\r\n\r\nI'd also like to address the case when `onCompleted` throws. *reactive-streams-jvm* has this to say:\r\n\r\n>2.13 Calling onSubscribe, onNext, onError or onComplete MUST return normally except when any provided parameter is null in which case it MUST throw a java.lang.NullPointerException to the caller, for all other situations the only legal way for a Subscriber to signal failure is by cancelling its Subscription. In the case that this rule is violated, any associated Subscription to the Subscriber MUST be considered as cancelled, and the caller MUST raise this error condition in a fashion that is adequate for the runtime environment.\r\n\r\nSo in the existing code if in `SafeSubscriber` an `onError` call to the downstream subscriber throws then the RxJavaPlugin error handler is called *and* an `OnErrorFailedException` is thrown. Comments in the method say this is ok because the contract has been broken and this is probably consistent with the advice in 3.13:\r\n\r\n>and the caller MUST raise this error condition in a fashion that is adequate for the runtime environment.\r\n\r\nIn the existing code if in `SafeSubscriber` an `onCompleted` call to the downstream subscriber throws then the consequent call to `_onError` tries to signal `onError` to the downstream subscriber.  I'm worried that calling `onError` after calling `onCompleted` is a strong enough breach of the contract that the possible side effects could be worse than just a throw. Shouldn't we throw only (and notify the plugin error handler of course)?\r\n\r\n"
p5108
aS"I've submitted code that matches my thinking above. It still fails because I haven't amended the existing unit tests associated with throwing. I'll do that after another round of review if accepted."
p5109
aS'The failing test is a coverage test for a behavior no longer present. I suggest removing it and rerunning the jacoco to see if all current code path is covered.'
p5110
aS"@akarnokd Yep that's right. Are you happy that a throwing `onCompleted()` call should not induce an `onError()` call? If so I'll clean up and update the PR."
p5111
aS"I've fixed the unit tests and added more so that `SafeSubscriber` gets 100% coverage."
p5112
aS":+1: Looks good to me.\r\n\r\nSince this adds public API classes, it requires further approval (otherwise it shouldn't affect programs other than those that badly fail, therefore, the merge policy would allow me to merge it)."
p5113
aS"LGTM. It would be better if you can fix the indent. :+1: for UnsubscribeFailureException. It's a pity that we cannot change `OnErrorFailedException`s that should have been `UnsubscribeFailureException` now since it's a break change."
p5114
aS"Thanks for review @akarnokd  and @zsxwing. I've fixed indent in test and squashed commits."
p5115
aS'Great, thanks!'
p5116
asg14
S'davidmoten:safe-sub-catch'
p5117
sbsI3160
(iPull
Pull
p5118
(dp5119
g3
S'Remove redundant variables from the following classes:\r\n\r\n* OperatorTimeoutBase\r\n* EventLoopsScheduler'
p5120
sg5
S'Remove redundant variables'
p5121
sg7
(lp5122
sg10
I3160
sg11
(lp5123
S'Often times developers use redundant variables for clarity. '
p5124
aS"I know that it is common practice for some developers, but I'm not sure that clarification via completely unnecessary variables is a good way / code design. All static analysis tools (like PMD, Findbugs, Checkstyle, Inspections from IDEA) agree with this. I think it will be better to have self-documented code which is well-formed for reading and debugging without this variables."
p5125
aS"This is why we don't use PMD, Checkstyle, etc on this project, because every developer has a different subjective opinion. "
p5126
aS'Actually, this tools should prevent argues and stop subjective-thinking (to minimize human-related errors, to make a common code style, etc.), but I understand your opinion and you can reject this PR.'
p5127
aS"Cosmetic change in internal classes, I don't think it's worth it."
p5128
aS"RxJava project does not have a style guide line for contributions. My initial thoughts are that the original committer of this particular code thought it was important to have a named value (potentially for ease of debugging or renaming in context) so it would be best to leave it as is. That said, if there were changes that you were making to the functionality then you might find it necessary or beneficial to collapse them (i.e. condense the code for readability) and so long as it wasn't too far off from the general style of the surrounding code then it would be just fine. Closing."
p5129
asg14
S'vbauer:redundant-vars'
p5130
sbsI3163
(iPull
Pull
p5131
(dp5132
g3
S'that takes advantage of existing scalar synchronous optimizations.'
p5133
sg5
S'Making a cross between defer() and just() '
p5134
sg7
(lp5135
sg10
I3163
sg11
(lp5136
sg14
S'abersnaze:deferJust'
p5137
sbsI3167
(iPull
Pull
p5138
(dp5139
g3
S'Reported in #3166 \r\n\r\nWhat happened is that if there are multiple subscribers, one with larger requests than the others and it unsubscribed early, the new max request of the others then became smaller than before which yielded a negative difference and thus a negative request.'
p5140
sg5
S'Fixed negative request due to unsubscription of a large requester'
p5141
sg7
(lp5142
S'Bug'
p5143
asg10
I3167
sg11
(lp5144
sg14
S'akarnokd:ReplayManageRequestsFix'
p5145
sbsI3169
(iPull
Pull
p5146
(dp5147
g3
S'Resolves #3156 \r\n\r\nNote that since the default merge operation is unbounded, this change could lead to an excessive memory usage when flatMapping fast sources. Note that the pre 1.0.13 version did this albeit on a slighty slower path.\r\n\r\nThe change also affects the scalar optimization as well. Pre 1.0.13 implicitly limited the concurrency level to RxRingBuffer.SIZE when scalars were received. This version now fills the queue up to the concurrency level.\r\n\r\nFor 2.0, I suggest having a bounded behavior by default and require the developer to specify Integer.MAX_VALUE to go for the unbounded behavior so he/she knows about the consequences.'
p5148
sg5
S'Merge can now operate in horizontally unbounded mode.'
p5149
sg7
(lp5150
S'Bug'
p5151
aS'Enhancement'
p5152
asg10
I3169
sg11
(lp5153
S"I'll have to allocate some time to review this later as it is somewhat detailed. Thank you for tackling this."
p5154
aS"> Pre 1.0.13 implicitly limited the concurrency level to RxRingBuffer.SIZE when scalars were received.\r\n\r\nThat was done by design, since scalars behave as `onNext`. And we can limit the number of `Observable`s being merged if we have scalars queued up for delivery.\r\n\r\nThe reason we can't limit the number of async `Observable`s is because we don't know if they will emit or not and thus risk deadlock."
p5155
aS':+1: '
p5156
aS"I'll rebase this."
p5157
aS"Rebased, let's get this finally in."
p5158
aS'Thanks'
p5159
asg14
S'akarnokd:MergeHorizontalUnbounded'
p5160
sbsI3171
(iPull
Pull
p5161
(dp5162
g3
S'Fixes #3168\r\n\r\nIf there is no initial value, there is no need to manipulate the request amounts.\r\n\r\nIf there is an initial value, we must do a full emitter-loop with value queueing because now the downstream request can race with the first onNext or the setting of the upstream producer. The downside is the increased overhead which should be reduced when the spsc unbounded queues get merged.'
p5163
sg5
S'Scan backpressure and first emission fix'
p5164
sg7
(lp5165
S'Bug'
p5166
asg10
I3171
sg11
(lp5167
S':+1: '
p5168
aS':+1: '
p5169
asg14
S'akarnokd:OperatorScanFirstEmissionFix'
p5170
sbsI3172
(iPull
Pull
p5171
(dp5172
g3
S"  - Added compile dependency for reactive-streams.\r\n  - Added some basic methods to Observable.\r\n\r\nAs long as the project defaults to 1.x, the create PR webpage will take a long time to render because it tries to compare a small branch 2.x against the huge 1.x branch with lots of 'deleted' content. A separate project would be much simpler to operate."
p5173
sg5
S'RS dependency, some basic Observable/Observer methods.'
p5174
sg7
(lp5175
S'Enhancement'
p5176
asg10
I3172
sg11
(lp5177
sg14
S'akarnokd:RsDependency'
p5178
sbsI3174
(iPull
Pull
p5179
(dp5180
g3
S'Mirroring some `Observable.subscribe` methods on `BlockingObservable`.\r\n\r\nRelated discussion: #3063.'
p5181
sg5
S'Blocking subscribe methods for convenience'
p5182
sg7
(lp5183
S'Enhancement'
p5184
asg10
I3174
sg11
(lp5185
S'Done.'
p5186
asg14
S'akarnokd:BlockingSubscribe'
p5187
sbsI3175
(iPull
Pull
p5188
(dp5189
g3
S'Spsc:\r\n  - power-of-2 array\r\n  - exact capacity array\r\n  - linked array\r\n\r\nMpsc:\r\n  - linked'
p5190
sg5
S'Some safe queue implementations'
p5191
sg7
(lp5192
S'Enhancement'
p5193
asg10
I3175
sg11
(lp5194
sg14
S'akarnokd:InternalInfrastructure'
p5195
sbsI3177
(iPull
Pull
p5196
(dp5197
g3
S'Common methods to add and multiply longs and cap the result at Long.MAX_VALUE in case of an overflow.'
p5198
sg5
S'BackpressureUtils capped add/multiply methods + tests'
p5199
sg7
(lp5200
S'Enhancement'
p5201
asg10
I3177
sg11
(lp5202
sg14
S'akarnokd:BackpressureUtilsExtra'
p5203
sbsI3181
(iPull
Pull
p5204
(dp5205
g3
S'Fixed the NPE reported in #3180.'
p5206
sg5
S'MapNotification producer NPE fix'
p5207
sg7
(lp5208
S'Bug'
p5209
asg10
I3181
sg11
(lp5210
sg14
S'akarnokd:MergeNotificationFix'
p5211
sbsI3183
(iPull
Pull
p5212
(dp5213
g3
S'Added two convenient methods to `Exceptions` which either throws a fatal exception or reports it with our without the causing value to an Observer.'
p5214
sg5
S'Refactored exception reporting of most operators.'
p5215
sg7
(lp5216
S'Bug'
p5217
aS'Enhancement'
p5218
asg10
I3183
sg11
(lp5219
S':+1: '
p5220
aS'What if the `Exceptions.throwOrReport(...)` took a `Subscriber` instead? This way we could check if the downstream subscriber is unsubscribed and then if we are reporting we would instead log to the `RxJavaPlugins.getInstance().getErrorHandler().handleError(e)`. This would standardize usage of the error handler plugin. Thoughts? '
p5221
aS'@stealthcode Your suggestion can be applied after the merge with another PR if you wish.'
p5222
aS'I agree. Just suggesting for your input. '
p5223
asg14
S'akarnokd:ThrowIfFatalSweep'
p5224
sbsI3185
(iPull
Pull
p5225
(dp5226
g3
S'We can use `Publisher` directly and no need for `OnSubscribe`. `Operator` is still quite a convenience.'
p5227
sg5
S'PublishSubject, AsyncSubject and a few helper classes'
p5228
sg7
(lp5229
S'Enhancement'
p5230
asg10
I3185
sg11
(lp5231
sg14
S'akarnokd:PublishSubject2x'
p5232
sbsI3186
(iPull
Pull
p5233
(dp5234
g3
S'Mostly internal addition plus the public `Disposable` interface.\r\n\r\nNaming of packages and classes can be changed at any time if one wishes...'
p5235
sg5
S'Disposable interface and a bunch of general resource containers.'
p5236
sg7
(lp5237
S'Enhancement'
p5238
asg10
I3186
sg11
(lp5239
sg14
S'akarnokd:InternalDisposables'
p5240
sbsI3188
(iPull
Pull
p5241
(dp5242
g3
S'incomplete.\r\n\r\nThis PR has a few TODO questions that require decisions.'
p5243
sg5
S'Schedulers (a few) + API, slight modifications to other classes,'
p5244
sg7
(lp5245
S'Enhancement'
p5246
asg10
I3188
sg11
(lp5247
sg14
S'akarnokd:SchedulersBaseAPI'
p5248
sbsI3189
(iPull
Pull
p5249
(dp5250
g3
S'implementations.'
p5251
sg5
S'Added a bunch of basic event sources and helper Subscription'
p5252
sg7
(lp5253
S'Enhancement'
p5254
asg10
I3189
sg11
(lp5255
sg14
S'akarnokd:BasicPublisherSources'
p5256
sbsI3190
(iPull
Pull
p5257
(dp5258
g3
S'  - SafeSubscriber\r\n  - SerializedSubscriber\r\n  - RxJavaPlugins (partial)'
p5259
sg5
S'Basic Subscribers and plugin class'
p5260
sg7
(lp5261
S'Enhancement'
p5262
asg10
I3190
sg11
(lp5263
sg14
S'akarnokd:BasicSubscribers'
p5264
sbsI3191
(iPull
Pull
p5265
(dp5266
g3
S'With all `flatMap`, `merge` and `mergeDelayError` overloads.'
p5267
sg5
S'Operators map and flatMap'
p5268
sg7
(lp5269
S'Enhancement'
p5270
asg10
I3191
sg11
(lp5271
sg14
S'akarnokd:OperatorFlatMap2x'
p5272
sbsI3192
(iPull
Pull
p5273
(dp5274
g3
g53
sg5
S'Connectable observable2x'
p5275
sg7
(lp5276
sg10
I3192
sg11
(lp5277
sg14
S'akarnokd:ConnectableObservable2x'
p5278
sbsI3193
(iPull
Pull
p5279
(dp5280
g3
S'`refCount` will come later, although its behavior is sometimes surprising to developers: it disconnects and reconnects in certain use pattern. The alternative is to use `autoConnect(n, connectionConsumer)` which lets the developer explicitly disconnect.'
p5281
sg5
S'ConnectableObservable and autoConnect'
p5282
sg7
(lp5283
S'Enhancement'
p5284
asg10
I3193
sg11
(lp5285
sg14
S'akarnokd:ConnectableObservable2x'
p5286
sbsI3194
(iPull
Pull
p5287
(dp5288
g3
S'operators'
p5289
sg5
S'Operators of take (untimed), plugin error reporting fix for other'
p5290
sg7
(lp5291
S'Enhancement'
p5292
asg10
I3194
sg11
(lp5293
sg14
S'akarnokd:OperatorTake2x'
p5294
sbsI3195
(iPull
Pull
p5295
(dp5296
g3
S"In `takeUntil`, the other source may emit an `onError` before the main source sets a subscription. The fix makes sure if other is first, it sets an empty subscription before emitting the error (this is an RS specific thing, doesn't affect 1.x)."
p5297
sg5
S'Operators of skip (untimed), filter; fix to takeUntil'
p5298
sg7
(lp5299
S'Enhancement'
p5300
asg10
I3195
sg11
(lp5301
sg14
S'akarnokd:OperatorSkip2x'
p5302
sbsI3196
(iPull
Pull
p5303
(dp5304
g3
S'Forgot to add them in the previous PR.'
p5305
sg5
S'The skips and filter operators added to Observable'
p5306
sg7
(lp5307
S'Enhancement'
p5308
asg10
I3196
sg11
(lp5309
sg14
S'akarnokd:OperatorSkip2xMethods'
p5310
sbsI3197
(iPull
Pull
p5311
(dp5312
g3
S'`toSortedList` is implemented with `toList().map()`.'
p5313
sg5
S'Operator toList and toSortedList'
p5314
sg7
(lp5315
S'Enhancement'
p5316
asg10
I3197
sg11
(lp5317
sg14
S'akarnokd:OperatorToList2x'
p5318
sbsI3198
(iPull
Pull
p5319
(dp5320
g3
S"I'm not 100% certain about the the timing of the onSubscribe() calls inside the operators; I'll have a second run over them once the tests are also added."
p5321
sg5
S'Operators publish, replay and cache.'
p5322
sg7
(lp5323
S'Enhancement'
p5324
asg10
I3198
sg11
(lp5325
sg14
S'akarnokd:OperatorsPublishReplay'
p5326
sbsI3199
(iPull
Pull
p5327
(dp5328
g3
S'+ isEmpty == any(v -> true)'
p5329
sg5
S'Operators all, any, count, elementAt, single'
p5330
sg7
(lp5331
S'Enhancement'
p5332
asg10
I3199
sg11
(lp5333
sg14
S'akarnokd:OperatorsAnyAllCount2x'
p5334
sbsI3200
(iPull
Pull
p5335
(dp5336
g3
S'+ updated RxJavaPlugins and added decorator calls to the Schedulers.'
p5337
sg5
S'All standard schedulers ported and cleaned up.'
p5338
sg7
(lp5339
S'Enhancement'
p5340
asg10
I3200
sg11
(lp5341
sg14
S'akarnokd:SchedulersRest2x'
p5342
sbsI3202
(iPull
Pull
p5343
(dp5344
g3
S"Few considerations:\r\n\r\n  - Added an option to specify if `subscribeOn` should also request on the same worker or not. If not, the consumer thread may freely grab the producer and thus reduce the inter-thread communication.\r\n  - The scheduling of the subscription in `subscribeOn` now can't be cancelled because in RS, the indication of 'subscription' is to call `onSubscribe` on the proper thread. Since the `Subscriber` can't call cancel until it receives the subscription through `onSubscribe` the time it receives the subscription there is no point in cancelling the operation.\r\n  - Added two parametrization option to `observeOn`: the ability to delay the error after all the `onNext` events and the ability to specify the buffer size. Since many get surprised by the 1.x behavior, this should help the situation and also makes it possible to avoid wrapping/materializing the sequence. The second ability should help with fine tuning a particular sequence independent to the other sequences.\r\n  - I've padded away (since the `@Contended` annotation is not standard) the request and wip counters in `observeOn`. If unpadded, they bash each other constantly and I've experienced 15-20% throughput loss."
p5345
sg5
S'Operators observeOn, subscribeOn and unsubscribeOn'
p5346
sg7
(lp5347
S'Enhancement'
p5348
asg10
I3202
sg11
(lp5349
sg14
S'akarnokd:ScheduleOn2x'
p5350
sbsI3203
(iPull
Pull
p5351
(dp5352
g3
S'This includes the first functioning unit tests. This still has a few iterations to go but opening PR for review.'
p5353
sg5
S'Implemented the AsyncOnSubscribe'
p5354
sg7
(lp5355
S'Enhancement'
p5356
asg10
I3203
sg11
(lp5357
S"What's the purpose of this class?"
p5358
aS'This is the asynchronous complement to the SyncOnSubscribe as described in #3003. '
p5359
aS"The remaining issue with this implementation is that the inner observables are subscribed to an unbounded buffer. This could be improved to a back pressure supporting `RxRingBuffer` that requests from it's producer only to fill it's buffer capacity and then when it connects, drains the buffer and forwards all requests to its producer. "
p5360
aS"l still don't understand this class. Looks very similar to a SyncOnSubscribe that emits Observables and flatMaps it for you."
p5361
aS"I understand your concern but I'm not sure about your comment. This operator does not call flatMap. This issue comes from use cases at Netflix with large services and streaming work. I think it's pretty clear to see from the unit tests that this gives a user direct access to the request and allows fulfillment by any observable (which may or may not be asynchronous). "
p5362
aS'This is very similar to the work that you tried with the AbstractProducer. It allows batching and eager subscription. '
p5363
aS"This is supposed to help with creating observables from asynchronous data sources in a non-blocking way. Consider the example below...\r\n\r\n```java\r\npublic static void main(String[] args) {\r\n    Observable.<Integer>create((Subscriber<? super Integer> s) -> {\r\n        s.setProducer((long requested) -> {\r\n            getData(requested)\r\n                .observe()\r\n                .subscribe(s::onNext, s::onError, s::onCompleted);\r\n        });\r\n    });\r\n}\r\n\r\npublic static HystrixCommand<Integer> getData(long requested) {\r\n    return null;\r\n}\r\n\r\npublic static interface HystrixCommand<T> {\r\n    public Observable<T> observe();\r\n}\r\n```\r\n\r\nThe use case here is that for each request we want to issue an asynchronous service request and when that request is fulfilled then we want to start onNexting the data for that request. The problem with this naive implementation is that it's very easy and certainly possible to have overlapping requests. You could implement the cas addToRequestAndGet and make sure that only one thread at a time is fulfilling the request at a time but you still have the possibility of onNext events interleaving or overlapping. "
p5364
aS"it doesn't help with truly hot sources but it'll work great for progressive async sources. :+1: "
p5365
aS"I have reviewed this work with @stealthcode as he's been working on it and am quite interested in where this goes. It can greatly help us solve the most difficult part of using RxJava: creating correct sources that support backpressure. \r\n\r\nI'll open an issue to summarize the needs for 1.x and 2.x so we can all get aligned on this topic.\r\n\r\nI'm +1 on experimenting with this and eventually getting `Observable.create` overloads for all these helpers."
p5366
aS'Actually, there is already an issue: https://github.com/ReactiveX/RxJava/issues/3003'
p5367
asg14
S'stealthcode:async-on-subscribe'
p5368
sbsI3204
(iPull
Pull
p5369
(dp5370
g3
S'This includes\r\n  - concatMap\r\n  - concat\r\n  - startWith\r\n  - endWith\r\n  - concatWith\r\n  - mergeWith (via merge)'
p5371
sg5
S'Operator concatMap and related convenience methods'
p5372
sg7
(lp5373
S'Enhancement'
p5374
asg10
I3204
sg11
(lp5375
sg14
S'akarnokd:OperatorConcatMap2x'
p5376
sbsI3205
(iPull
Pull
p5377
(dp5378
g3
S' + forEachWhile that allows stopping the stream from within the onNext callback by returning false.\r\n\r\nThe lambda subscribe()s return a Disposable so they can be asynchronously cancelled.'
p5379
sg5
S'Lambda-based subscribe and lifecycle tracking methods'
p5380
sg7
(lp5381
S'Enhancement'
p5382
asg10
I3205
sg11
(lp5383
sg14
S'akarnokd:LambdaSubscribe2x'
p5384
sbsI3206
(iPull
Pull
p5385
(dp5386
g3
S'+ internal `EmptySubscriber`'
p5387
sg5
S'TestSubscriber implemented'
p5388
sg7
(lp5389
S'Enhancement'
p5390
asg10
I3206
sg11
(lp5391
sg14
S'akarnokd:TestSubscriber2x'
p5392
sbsI3207
(iPull
Pull
p5393
(dp5394
g3
S"I'll post the `retryWhen` and `repeatWhen` separately."
p5395
sg5
S'Some Repeat + Retry methods, fix to SubscriptionArbiter.'
p5396
sg7
(lp5397
S'Enhancement'
p5398
asg10
I3207
sg11
(lp5399
sg14
S'akarnokd:OperatorRepeat2xPart1'
p5400
sbsI3208
(iPull
Pull
p5401
(dp5402
g3
S'`intervalRange` helps when one needs a fixed amount of timed values and wants to avoid map+take overhead.'
p5403
sg5
S'Operators interval and intervalRange'
p5404
sg7
(lp5405
S'Enhancement'
p5406
asg10
I3208
sg11
(lp5407
S"What is the overhead of take that this saves? I don't see the point. Especially since interval goes through scheduling for each emission which has to cost more than take."
p5408
aS'The operator involves less allocation when a sequence is assembled and a  lover memory footprint when active.'
p5409
asg14
S'akarnokd:IntervalSource2x'
p5410
sbsI3209
(iPull
Pull
p5411
(dp5412
g3
S"There won't be `onBackpressureBlock` although it can work with `subscribeOn(scheduler, false)` since that won't schedule the request behind the blocked emission.\r\n\r\nOperator `onBackpressureBuffer` has now a `delayError` option; I'd like to give the developer the option on this one. Naturally, the default is false."
p5413
sg5
S'Operators onBackpressure(Drop|Buffer|Latest)'
p5414
sg7
(lp5415
S'Enhancement'
p5416
asg10
I3209
sg11
(lp5417
sg14
S'akarnokd:OperatorOnBackpressure2x'
p5418
sbsI3212
(iPull
Pull
p5419
(dp5420
g3
S"This default implementation supports backpressure but doesn't coordinate the group requests with the main requests in any way. \r\n\r\nThis means, for example, that given a million element source and a constant true key selector will queue up all million elements until a single subscriber consumes them.\r\n\r\nThe 1.x version had some coordination and all sorts of group management logic which I don't understand. I'll revisit this operator later."
p5421
sg5
S'Operator groupBy'
p5422
sg7
(lp5423
S'Enhancement'
p5424
asg10
I3212
sg11
(lp5425
sg14
S'akarnokd:OperatorGroupBy2x'
p5426
sbsI3214
(iPull
Pull
p5427
(dp5428
g3
S'The Notification method was missing a check to hasValue and hasThrowable. This allowed for a null value onNext Notification to equal an Object notification. A similar bug for onError Notification events also existed.'
p5429
sg5
S'Fix to Notification equals method.'
p5430
sg7
(lp5431
S'Bug'
p5432
asg10
I3214
sg11
(lp5433
S':+1: this seems like a valid contribution with tests. '
p5434
aS':+1: '
p5435
aS'Thanks guys, hopefully the first of many contributions.'
p5436
asg14
S'wrightm:1.x'
p5437
sbsI3215
(iPull
Pull
p5438
(dp5439
g3
S'FunctionX extends Function<Object[], R> and the default method for it unpacks the array.'
p5440
sg5
S'Operator zip plus Function3..Function9.'
p5441
sg7
(lp5442
S'Enhancement'
p5443
asg10
I3215
sg11
(lp5444
sg14
S'akarnokd:OperatorZip2x'
p5445
sbsI3220
(iPull
Pull
p5446
(dp5447
g3
S'methods.'
p5448
sg5
S'Strenghtening flatMap against misbehaving sources, TestSubscriber +'
p5449
sg7
(lp5450
S'Enhancement'
p5451
asg10
I3220
sg11
(lp5452
sg14
S'akarnokd:FixesForReactiveSocket2x'
p5453
sbsI3222
(iPull
Pull
p5454
(dp5455
g3
S"SubscriptionHelper for common validation logic.\r\n\r\nThe SubscriptionHelper's methods are not yet applied to former operators."
p5456
sg5
S'Operator WithLatestFrom, PublishLift to help with operator fusing,'
p5457
sg7
(lp5458
S'Enhancement'
p5459
asg10
I3222
sg11
(lp5460
sg14
S'akarnokd:WithLatestFrom2x'
p5461
sbsI3223
(iPull
Pull
p5462
(dp5463
g3
S'Also corrected the naming of one-shot timer and fixed-period interval'
p5464
sg5
S'Fixes to classes, convenience operators mostly.'
p5465
sg7
(lp5466
S'Bug'
p5467
aS'Enhancement'
p5468
asg10
I3223
sg11
(lp5469
sg14
S'akarnokd:OperatorPack2x1'
p5470
sbsI3224
(iPull
Pull
p5471
(dp5472
g3
S"Instead of having `Timestamped` and `TimeInterval` with the same structure, let's have just a single one: `Timed`.\r\n\r\n`distinctUntilChanged` is implemented via special `distinct`."
p5473
sg5
S'Operator distinct, timeInterval, common Timed container.'
p5474
sg7
(lp5475
S'Enhancement'
p5476
asg10
I3224
sg11
(lp5477
sg14
S'akarnokd:OperatorDistinct2x'
p5478
sbsI3225
(iPull
Pull
p5479
(dp5480
g3
S'The various doOnXXX operator overloads + range(scheduler) + repeat(scheduler).'
p5481
sg5
S'Operations doOnX.'
p5482
sg7
(lp5483
S'Enhancement'
p5484
asg10
I3225
sg11
(lp5485
sg14
S'akarnokd:OperatorDoOn2x'
p5486
sbsI3226
(iPull
Pull
p5487
(dp5488
g3
S'I know `toList` can be also implemented this way but its frequent use makes it eligible for a custom operator.'
p5489
sg5
S'Operator collect, toMap and toMultimap based on it.'
p5490
sg7
(lp5491
S'Enhancement'
p5492
asg10
I3226
sg11
(lp5493
sg14
S'akarnokd:OperatorCollect2x'
p5494
sbsI3227
(iPull
Pull
p5495
(dp5496
g3
S'javac is unable to select the right overload for some reason'
p5497
sg5
S'collect: javac is unable to select the right overload for some reason'
p5498
sg7
(lp5499
sg10
I3227
sg11
(lp5500
sg14
S'akarnokd:Collect2xJavacWorkaround'
p5501
sbsI3228
(iPull
Pull
p5502
(dp5503
g3
S"emission/drain loops.\r\n\r\nThis may help with operators that call request(1) to replenish a dropped value (filter for example).\r\n\r\nI've only implemented this with the array-source and with a lot of code duplication. I'll think about how to reduce this duplication via inheritance or with lambdas (which might negate the benefit)."
p5504
sg5
S'ConditionalSubscriber to help fusing filter-like operators into'
p5505
sg7
(lp5506
S'Enhancement'
p5507
asg10
I3228
sg11
(lp5508
sg14
S'akarnokd:ConditionalSubscriber2x'
p5509
sbsI3229
(iPull
Pull
p5510
(dp5511
g3
S"I'd like to state that I try to use `Publisher` as much as possible: this adds the benefit that RxJava can use someone else's publisher without the explicit need to wrap it into an `Observable` all the time."
p5512
sg5
S'Operator sample with time or with another publisher'
p5513
sg7
(lp5514
S'Enhancement'
p5515
asg10
I3229
sg11
(lp5516
sg14
S'akarnokd:OperatorSample2x'
p5517
sbsI3230
(iPull
Pull
p5518
(dp5519
g3
g53
sg5
S'Operato switchIfEmpty, defaultIfEmpty'
p5520
sg7
(lp5521
S'Enhancement'
p5522
asg10
I3230
sg11
(lp5523
sg14
S'akarnokd:OperatorSwitchIfEmpty2x'
p5524
sbsI3231
(iPull
Pull
p5525
(dp5526
g3
S'+ bufferSize +delayError options, as usual by now'
p5527
sg5
S'Operator takeLast time + size, skipLast time'
p5528
sg7
(lp5529
S'Enhancement'
p5530
asg10
I3231
sg11
(lp5531
sg14
S'akarnokd:OperatorTimedLastSkipTake2x'
p5532
sbsI3232
(iPull
Pull
p5533
(dp5534
g3
S"The multi-offer helps with the timed skipLast. By offering two at once, the drain won't loop until the second value arrives."
p5535
sg5
S'Operators first, last, multi-offer for SpscLinkedArrayQueue'
p5536
sg7
(lp5537
S'Enhancement'
p5538
asg10
I3232
sg11
(lp5539
sg14
S'akarnokd:OperatorFirstLast2x'
p5540
sbsI3234
(iPull
Pull
p5541
(dp5542
g3
S'overloads, some refactorings'
p5543
sg5
S'Operator switchMap, switchOnNext, added missing merge and concat'
p5544
sg7
(lp5545
S'Enhancement'
p5546
asg10
I3234
sg11
(lp5547
sg14
S'akarnokd:OperatorSwitchMap2x'
p5548
sbsI3235
(iPull
Pull
p5549
(dp5550
g3
S'Very similar to zip in terms of structure.'
p5551
sg5
S'Operator amb, ambWith'
p5552
sg7
(lp5553
S'Enhancement'
p5554
asg10
I3235
sg11
(lp5555
sg14
S'akarnokd:OperatorAmb2x'
p5556
sbsI3237
(iPull
Pull
p5557
(dp5558
g3
S'+ onErrorReturnValue'
p5559
sg5
S'Operators onErrorReturn, onErrorResumeNext, onExceptionResumeNext'
p5560
sg7
(lp5561
S'Enhancement'
p5562
asg10
I3237
sg11
(lp5563
sg14
S'akarnokd:OperatorOnErrorNext'
p5564
sbsI3238
(iPull
Pull
p5565
(dp5566
g3
S'+ a fix to OperatorOnErrorNext'
p5567
sg5
S'Operator retryWhen, repeatWhen; Notification'
p5568
sg7
(lp5569
S'Enhancement'
p5570
asg10
I3238
sg11
(lp5571
sg14
S'akarnokd:OperatorRedo'
p5572
sbsI3239
(iPull
Pull
p5573
(dp5574
g3
S'+ a small correction to ConditionalSubscriber: the default onNext removed to avoid bad usage (i.e., not requesting if not accepted).'
p5575
sg5
S'Operator takeWhile'
p5576
sg7
(lp5577
S'Enhancement'
p5578
asg10
I3239
sg11
(lp5579
sg14
S'akarnokd:OperatorTakeWhile2x'
p5580
sbsI3240
(iPull
Pull
p5581
(dp5582
g3
S'Inlined (no zipping and wrapping like in 1.x)'
p5583
sg5
S'Operator sequenceEqual'
p5584
sg7
(lp5585
S'Enhancement'
p5586
asg10
I3240
sg11
(lp5587
sg14
S'akarnokd:OperatorSequenceEquals2x'
p5588
sbsI3241
(iPull
Pull
p5589
(dp5590
g3
S'+ Some minor internal refactorings in `Observable`.'
p5591
sg5
S'Operator combineLatest'
p5592
sg7
(lp5593
S'Enhancement'
p5594
asg10
I3241
sg11
(lp5595
sg14
S'akarnokd:PublisherCombineLatest2x'
p5596
sbsI3242
(iPull
Pull
p5597
(dp5598
g3
S'EmptySubscriber convenience method to reduce boilerplate.'
p5599
sg5
S'Operator using, some internal refactorings.'
p5600
sg7
(lp5601
S'Enhancement'
p5602
asg10
I3242
sg11
(lp5603
sg14
S'akarnokd:OperatorUsing2x'
p5604
sbsI3243
(iPull
Pull
p5605
(dp5606
g3
S'`Optional.ofNullable` returns an empty instance, not a null-containing one.'
p5607
sg5
S'Operator materialize, dematerialize, minor notification fix.'
p5608
sg7
(lp5609
S'Enhancement'
p5610
asg10
I3243
sg11
(lp5611
sg14
S'akarnokd:OperatorMaterialize2x'
p5612
sbsI3244
(iPull
Pull
p5613
(dp5614
g3
S'The `delaySubscription` is implemented via composition.'
p5615
sg5
S'Operators delay, delaySubscription, share.'
p5616
sg7
(lp5617
S'Enhancement'
p5618
asg10
I3244
sg11
(lp5619
sg14
S'akarnokd:OperatorsDerivedPack2x'
p5620
sbsI3245
(iPull
Pull
p5621
(dp5622
g3
S'subscribe, stream, forEach, iterator\r\n\r\nNow it extends both Publisher and Iterable directly.'
p5623
sg5
S'BlockingObservable, next, latest, mostRecent, first, last, single,'
p5624
sg7
(lp5625
S'Enhancement'
p5626
asg10
I3245
sg11
(lp5627
sg14
S'akarnokd:BlockingObservablePart2x'
p5628
sbsI3246
(iPull
Pull
p5629
(dp5630
g3
S'Converted nicely.'
p5631
sg5
S'Operator refCount'
p5632
sg7
(lp5633
S'Enhancement'
p5634
asg10
I3246
sg11
(lp5635
sg14
S'akarnokd:OperatorRefCount2x'
p5636
sbsI3247
(iPull
Pull
p5637
(dp5638
g3
S'subscriber only.\r\n\r\nShould be the official API replacement of BufferUntilSubscriber.'
p5639
sg5
S'UnicastSubject, onBackpressureBuffer-like behavior for a single'
p5640
sg7
(lp5641
S'Enhancement'
p5642
asg10
I3247
sg11
(lp5643
sg14
S'akarnokd:UnicastSubject2x'
p5644
sbsI3248
(iPull
Pull
p5645
(dp5646
g3
S'The boundary version will come next.'
p5647
sg5
S'Operators buffer: size, time, size + time'
p5648
sg7
(lp5649
S'Enhancement'
p5650
asg10
I3248
sg11
(lp5651
sg14
S'akarnokd:OperatorBuffer2x'
p5652
sbsI3249
(iPull
Pull
p5653
(dp5654
g3
g53
sg5
S'Update Observable.java'
p5655
sg7
(lp5656
sg10
I3249
sg11
(lp5657
sg14
S'Vence:1.x'
p5658
sbsI3250
(iPull
Pull
p5659
(dp5660
g3
S'variants. \r\n\r\nAdded `QueueDrain` and `QueueDrainSubscriber` for common queue-drain\r\noperations. Not applied outside the `buffer()`s as of now.'
p5661
sg5
S'Operator buffer with boundary and open-close, fixes to the timed'
p5662
sg7
(lp5663
S'Enhancement'
p5664
asg10
I3250
sg11
(lp5665
sg14
S'akarnokd:OperatorBufferWithPublisher2x'
p5666
sbsI3251
(iPull
Pull
p5667
(dp5668
g3
S'Luckily, there is no need to count the emission per subject but just use\r\narithmetic.'
p5669
sg5
S'Window with count, count + skip.'
p5670
sg7
(lp5671
S'Enhancement'
p5672
asg10
I3251
sg11
(lp5673
sg14
S'akarnokd:OperatorWindowSized2x'
p5674
sbsI3253
(iPull
Pull
p5675
(dp5676
g3
S"The timed buffer and window operators are quite complicated in terms of\r\nconcurrency. I'm not sure if all corner cases are covered."
p5677
sg5
S'Operator window timespan, timespan + count, timespan + timeskip'
p5678
sg7
(lp5679
S'Enhancement'
p5680
asg10
I3253
sg11
(lp5681
sg14
S'akarnokd:OperatorWindowTimed2x'
p5682
sbsI3254
(iPull
Pull
p5683
(dp5684
g3
S'(Taking a break from `window()` operators.)'
p5685
sg5
S'Operator debounce (time, selector), throttleWithTimeout (alias)'
p5686
sg7
(lp5687
S'Enhancement'
p5688
asg10
I3254
sg11
(lp5689
sg14
S'akarnokd:OperatorDebounce2x'
p5690
sbsI3255
(iPull
Pull
p5691
(dp5692
g3
S'TestSubscriber now does asynchronous requests and cancellation.'
p5693
sg5
S'Operator scan, reduce. Fixes to TestSubscriber async behavior.'
p5694
sg7
(lp5695
S'Enhancement'
p5696
asg10
I3255
sg11
(lp5697
sg14
S'akarnokd:OperatorScan'
p5698
sbsI3256
(iPull
Pull
p5699
(dp5700
g3
S"I've implemented the wrong debounce logic in #3254 ."
p5701
sg5
S'Fixed debounce behavior, added throttleFirst, throttleLast alias'
p5702
sg7
(lp5703
S'Enhancement'
p5704
asg10
I3256
sg11
(lp5705
sg14
S'akarnokd:OperatorDebounceFix2x'
p5706
sbsI3257
(iPull
Pull
p5707
(dp5708
g3
S"types.\r\n\r\n+ FullArbiter and FullArbiterSubscriber to work with total-ordered notifications across sources.\r\n\r\nI've also sorted `Observable` members."
p5709
sg5
S'Operator timeout, onBackpressureBuffer(onOverflow), fixes to parameter'
p5710
sg7
(lp5711
S'Enhancement'
p5712
asg10
I3257
sg11
(lp5713
sg14
S'akarnokd:OperatorTimeout2x'
p5714
sbsI3258
(iPull
Pull
p5715
(dp5716
g3
S'Has full backpressure support (replays as many elements as requested).'
p5717
sg5
S'ReplaySubject'
p5718
sg7
(lp5719
S'Enhancement'
p5720
asg10
I3258
sg11
(lp5721
S"@akarnokd Do you also plan to provide  backpressure support for `ReplaySubject` in 1.x? (I'd like it!)"
p5722
aS"There was an attempt before but didn't get through. The problem with 1.x is that it has an expected optimization to goes on a fast path once the subscriber has caught up and no further replay/buffering happens for that particular subscriber. With backpressure, there would be one CAS at minimum for every value delivered which has 6x the overhead compared to a write-through."
p5723
asg14
S'akarnokd:ReplaySubject2x'
p5724
sbsI3259
(iPull
Pull
p5725
(dp5726
g3
g53
sg5
S'RxJavaPlugins extended with handler registration and reset support'
p5727
sg7
(lp5728
S'Enhancement'
p5729
asg10
I3259
sg11
(lp5730
sg14
S'akarnokd:RxJavaPlugins2x'
p5731
sbsI3260
(iPull
Pull
p5732
(dp5733
g3
S"The continuous delivery guarantee and the no-duplication requirement makes it necessary to read/write an index and object values together. I've implemented this with another synchronized block. The alternatives are:\r\n\r\n  - use an object of (index, value) and atomically set the reference (requires allocation on every value delivered.\r\n  - this current nested-synchronized block (no deadlock)\r\n  - use a reader-writer lock which works better when concurrent subscribers want to do their first emission at the same time."
p5734
sg5
S'BehaviorSubject'
p5735
sg7
(lp5736
S'Enhancement'
p5737
asg10
I3260
sg11
(lp5738
sg14
S'akarnokd:BehaviorSubject2x'
p5739
sbsI3261
(iPull
Pull
p5740
(dp5741
g3
S'ReplaySubject: time and size bound trimming was incorrectly deleting the terminal notification\r\n\r\nBehaviorSubject: double emission of the same value. The following loop fails (prints `Bad pattern received: [2, 2]`) with 1.x:\r\n\r\n```java\r\nfor (int i = 0; i < 1_000_000; i++) {\r\n    if (i % 1000 == 0) {\r\n        System.out.println("--> " + i);\r\n    }\r\n    BehaviorSubject<Object> bs = BehaviorSubject.create(1);\r\n    \r\n    List<Object> list = new ArrayList<>();\r\n    CyclicBarrier cb = new CyclicBarrier(2);\r\n    CountDownLatch cdl = new CountDownLatch(1);\r\n    \r\n    ForkJoinPool.commonPool().submit(() -> {\r\n        cb.await();\r\n        bs.onNext(2);\r\n        cdl.countDown();\r\n        return null;\r\n    });\r\n    \r\n    cb.await();\r\n    bs.subscribe(v -> list.add(v));\r\n    cdl.await();\r\n\r\n    if (Arrays.asList(2).equals(list)) {\r\n        continue;\r\n    }\r\n    if (Arrays.asList(1, 2).equals(list)) {\r\n        continue;\r\n    }\r\n    System.out.println("Bad pattern received: " + list);\r\n        break;\r\n    }\r\n}\r\n```'
p5742
sg5
S'Fixes to ReplaySubject and BehaviorSubject.'
p5743
sg7
(lp5744
S'Enhancement'
p5745
asg10
I3261
sg11
(lp5746
sg14
S'akarnokd:SubjectFixes0901'
p5747
sbsI3262
(iPull
Pull
p5748
(dp5749
g3
S"I'm not 100% certain about the state management: when to let the main\r\nsource keep running and when to stop. I.e., the in the selector version,\r\nif the other completes, it means no new window will be opened but the\r\nactive should keep receiving values until their closer fires. If all\r\nsuch closers have fired, the main can be stopped."
p5750
sg5
S'Operator window with boundary (exact, selector, exact + supplier).'
p5751
sg7
(lp5752
S'Enhancement'
p5753
asg10
I3262
sg11
(lp5754
sg14
S'akarnokd:WindowBoundary2x'
p5755
sbsI3263
(iPull
Pull
p5756
(dp5757
g3
S'Subjects are exposed so they may receive nulls that would mess up the internal state.'
p5758
sg5
S'Subjects onNext and onError null safety'
p5759
sg7
(lp5760
S'Enhancement'
p5761
asg10
I3263
sg11
(lp5762
sg14
S'akarnokd:SubjectNullSafe2x'
p5763
sbsI3264
(iPull
Pull
p5764
(dp5765
g3
S"It is meant to be somewhat a replacement for 1.x `rx.Subscriber`, but it\r\ndoesn't support `Subscriber` chaining.\r\n\r\nI call it an `Observer` because one only needs to implement `onNext`, `onError`\r\nand `onComplete` as with `rx.Observer`"
p5766
sg5
S'AsyncObserver'
p5767
sg7
(lp5768
S'Enhancement'
p5769
asg10
I3264
sg11
(lp5770
sg14
S'akarnokd:AsyncObserver2x'
p5771
sbsI3265
(iPull
Pull
p5772
(dp5773
g3
S"By using null checks and direct returns we can avoid a dynamic dispatch\r\non a volatile variable which always more expensive.\r\n\r\nI've also added the `lockdown()` method to prevent any further changing\r\nof the plugin handlers. There is a `unlock` package-private method to\r\nallow testing the plugin in the locked state and then return to the\r\nunlocked state as other tests may want to install custom plugins."
p5774
sg5
S'RxJavaPlugins performance enabling fix & lockdown.'
p5775
sg7
(lp5776
S'Enhancement'
p5777
asg10
I3265
sg11
(lp5778
sg14
S'akarnokd:RxJavaPluginsPerfFix'
p5779
sbsI3267
(iPull
Pull
p5780
(dp5781
g3
S"a function and handling backpressure/resource cleanup automatically.\r\n\r\nThe logic is based on @stealthcode 's SyncSubscriber proposal from 1.x\r\nbut using only the lambda-form."
p5782
sg5
S'Operator generate: create an observable that generates values by calling'
p5783
sg7
(lp5784
S'Enhancement'
p5785
asg10
I3267
sg11
(lp5786
sg14
S'akarnokd:OperatorGenerate2x'
p5787
sbsI3268
(iPull
Pull
p5788
(dp5789
g3
S'+ `Disposables` utility class with wrapper methods named `from`.'
p5790
sg5
S'Standard disposables, changes to resource containers to support them.'
p5791
sg7
(lp5792
S'Enhancement'
p5793
asg10
I3268
sg11
(lp5794
sg14
S'akarnokd:Disposables2x'
p5795
sbsI3270
(iPull
Pull
p5796
(dp5797
g3
S'The cancellation notification will come in handy with window (and in\r\ngroupby). It helps with the case when the main source has been cancelled\r\nbut the individual windows/groups are still being consumed. If those get\r\ncancelled by their single Subscribers, this notification will reach the\r\nsource and once all windows/groups get cancelled, the main source can be\r\ncancelled.\r\n\r\nFix to generator production accounting.'
p5798
sg5
S'UnicastSubject javadoc, support for onCancelled notification.'
p5799
sg7
(lp5800
S'Enhancement'
p5801
asg10
I3270
sg11
(lp5802
sg14
S'akarnokd:UnicastSubjectExpansion2x'
p5803
sbsI3271
(iPull
Pull
p5804
(dp5805
g3
S'Fixed mistakes in the operators.'
p5806
sg5
S'First unit test and fixes to operators.'
p5807
sg7
(lp5808
S'Bug'
p5809
aS'Enhancement'
p5810
asg10
I3271
sg11
(lp5811
sg14
S'akarnokd:UnitTestsPreparation'
p5812
sbsI3272
(iPull
Pull
p5813
(dp5814
g3
S'Either the test is non-deterministic or I have a bug in the operator(s).'
p5815
sg5
S'Firehose test fix attempt2x'
p5816
sg7
(lp5817
S'Test-Failures'
p5818
asg10
I3272
sg11
(lp5819
S'OOps, wrong branch.'
p5820
asg14
S'akarnokd:FirehoseTestFixAttempt2x'
p5821
sbsI3273
(iPull
Pull
p5822
(dp5823
g3
S'Either the test is non-deterministic or I still have a bug.'
p5824
sg5
S'Fix attempt to the firehose test.'
p5825
sg7
(lp5826
S'Test-Failures'
p5827
asg10
I3273
sg11
(lp5828
sg14
S'akarnokd:FirehoseTestFixAttempt2x'
p5829
sbsI3274
(iPull
Pull
p5830
(dp5831
g3
g53
sg5
S'Combine latest test2x'
p5832
sg7
(lp5833
sg10
I3274
sg11
(lp5834
S'I was trying to set a label and the page just created the pull request...'
p5835
asg14
S'akarnokd:CombineLatestTest2x'
p5836
sbsI3275
(iPull
Pull
p5837
(dp5838
g3
S'Forgot to deliver the value inside the GroupedUnicast drain loop.'
p5839
sg5
S'Simplest combineLatest tests and fix to groupBy.'
p5840
sg7
(lp5841
S'Bug'
p5842
aS'Test'
p5843
asg10
I3275
sg11
(lp5844
sg14
S'akarnokd:CombineLatestTest2x'
p5845
sbsI3276
(iPull
Pull
p5846
(dp5847
g3
S"I've also added convenience overloads to concat 2-9 sources because `concat(Publisher...)` causes overload resolution conflict with `concat(Publisher<Publisher>)`."
p5848
sg5
S'Simplest concat test from 1.x'
p5849
sg7
(lp5850
S'Enhancement'
p5851
aS'Test'
p5852
asg10
I3276
sg11
(lp5853
sg14
S'akarnokd:ConcatTests2x'
p5854
sbsI3277
(iPull
Pull
p5855
(dp5856
g3
S"I've changed them to use `safeSubscribe` because plain RS subscribers\r\nare not expected to throw."
p5857
sg5
S'ErrorHandlingTests and EventStream'
p5858
sg7
(lp5859
S'Test'
p5860
asg10
I3277
sg11
(lp5861
sg14
S'akarnokd:ErrorHandlingTests2x'
p5862
sbsI3278
(iPull
Pull
p5863
(dp5864
g3
S'We need to talk about `Notification`s.'
p5865
sg5
S'Simplest tests of groupBy, merge and Notification'
p5866
sg7
(lp5867
S'Test'
p5868
asg10
I3278
sg11
(lp5869
sg14
S'akarnokd:GroupByMergeNotificationTest2x'
p5870
sbsI3279
(iPull
Pull
p5871
(dp5872
g3
S'Forgot to call request, refactored some validation code.'
p5873
sg5
S'ConversionTest and DoOnTest'
p5874
sg7
(lp5875
S'Bug'
p5876
aS'Test'
p5877
asg10
I3279
sg11
(lp5878
sg14
S'akarnokd:TestsToDoOnObservable2x'
p5879
sbsI3280
(iPull
Pull
p5880
(dp5881
g3
S'Bugfixes in many operators.'
p5882
sg5
S'ObservableTests and bugfixes.'
p5883
sg7
(lp5884
S'Bug'
p5885
aS'Test'
p5886
asg10
I3280
sg11
(lp5887
sg14
S'akarnokd:ObservableTests2x'
p5888
sbsI3282
(iPull
Pull
p5889
(dp5890
g3
S"I've refectored the mockSubscriber method out into a helper enum since it will be required almost everywhere."
p5891
sg5
S'Simpler tests for window reduce, scan, starWith.'
p5892
sg7
(lp5893
S'Test'
p5894
asg10
I3282
sg11
(lp5895
sg14
S'akarnokd:WindowReduceTests2x'
p5896
sbsI3283
(iPull
Pull
p5897
(dp5898
g3
S'They seem to try testing the request mechanism on thin implementations and are somewhat of no use.'
p5899
sg5
S'SubscriberTests port from 1.x'
p5900
sg7
(lp5901
S'Test'
p5902
asg10
I3283
sg11
(lp5903
sg14
S'akarnokd:SubscriberTest2x'
p5904
sbsI3284
(iPull
Pull
p5905
(dp5906
g3
S"Tests expect certain operator parameter orders so I'd expect a few changes in Observable in this regard.\r\n\r\nFixed timing bug with `throttleWithTimeout` but I'm not 100% certain it works as expected beyond this single test."
p5907
sg5
S'Simpler tests of throttleLast, throttleWithTimeout, zip'
p5908
sg7
(lp5909
S'Test'
p5910
asg10
I3284
sg11
(lp5911
sg14
S'akarnokd:ThrottleZipTests2x'
p5912
sbsI3285
(iPull
Pull
p5913
(dp5914
g3
g53
sg5
S'Added latch to async SyncOnSubscrbeTest'
p5915
sg7
(lp5916
S'Bug'
p5917
aS'Test-Failures'
p5918
asg10
I3285
sg11
(lp5919
S'#3286 has encountered another failure:\r\n\r\n```\r\nrx.observables.SyncOnSubscribeTest > testSubscribeOn FAILED\r\n    java.lang.AssertionError: expected:<4> but was:<3>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:472)\r\n        at org.junit.Assert.assertEquals(Assert.java:456)\r\n        at rx.observables.SyncOnSubscribeTest.testSubscribeOn(SyncOnSubscribeTest.java:734)\r\n```'
p5920
aS'This should also resolve #3287. I have added your example test to the unit tests (3,000 iterations).'
p5921
aS':+1: '
p5922
aS"Okay, let's merge this so other PRs don't run into the test bug with the current main."
p5923
asg14
S'stealthcode:FixSyncOnSubscribeTest'
p5924
sbsI3286
(iPull
Pull
p5925
(dp5926
g3
S"Adds BlockingSingle (issue #3252), the blocking version of rx.Single.\r\n\r\nBlockingSingle has the following methods:\r\n- `from(Single)` -- factory method for creating a `BlockingSingle` from a\r\n`Single`\r\n- `value()` -- returns the value emitted from the Single\r\n- `toFuture()` -- returns a `java.util.concurrent.Future`\r\n\r\nCouldn't actually think of any other useful operations to perform on `BlockingSingle` - in comparison to `BlockingObservable`, there's not much to this class (at the moment)."
p5927
sg5
S'1.x: Implements BlockingSingle'
p5928
sg7
(lp5929
S'Discussion'
p5930
aS'Enhancement'
p5931
asg10
I3286
sg11
(lp5932
S"~~Hmmm...got a test failure that I can't reproduce locally:~~ (fixed by #3285)\r\n\r\n```\r\nrx.observables.SyncOnSubscribeTest > testSubscribeOn FAILED\r\n    java.lang.AssertionError: expected:<4> but was:<3>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:472)\r\n        at org.junit.Assert.assertEquals(Assert.java:456)\r\n        at rx.observables.SyncOnSubscribeTest.testSubscribeOn(SyncOnSubscribeTest.java:734\r\n```"
p5933
aS'This test failure should be resolved now. '
p5934
aS'@hyleung is this ready to be reviewed/merged?'
p5935
aS"@abersnaze Not quite yet. There are a couple of things from @artem-zinnatullin's PR (#3416) that I want to pull in (splitting out a separate `BlockingUtils` class to hold `awaitComplete`, for example) Also, I'm going to rebase it against head of 1.x since it's been about a month..."
p5936
aS"@abersnaze the PR is ready for review, btw. I'll keep the commits separate as I incorporate the feedback and squash it down at the end."
p5937
aS'Maybe move `BlockingSingle` from `rx.observables` to `rx.singles`?'
p5938
aS"@artem-zinnatullin re. `rx.singles` - that would be a new package then? ~~Don't have a particular option either way, tbh - anybody else?~~ Ah, I see what you're getting at....moved to `rx.singles`. Which other operators are you thinking of adding to `Single`, btw?"
p5939
aS'LGTM, just a few nits left :+1: '
p5940
aS"I'm ready to merge this as long as we can add the necessary `@Experimental` annotations and rebase onto 1.x."
p5941
aS'@stealthcode done! '
p5942
aS':+1:'
p5943
aS':+1:\r\n\r\nThanks for contributing.'
p5944
asg14
S'hyleung:blocking-single'
p5945
sbsI3289
(iPull
Pull
p5946
(dp5947
g3
S'I cleaned up and added more tests to SubscriptionList. \r\n\r\nI also changed the class to implement the List interface instead of hard code LinkedList. \r\n\r\nChanged Data Structure to LinkedList from ArrayList as List is used to iterate over and add exceptions to list. No random access needed and insertions are more efficient in LinkedList.'
p5948
sg5
S'Added more tests and cleaned up SubscriptionList to program to List'
p5949
sg7
(lp5950
S'Enhancement'
p5951
asg10
I3289
sg11
(lp5952
S'Looks like test failure not from changed codebase. \r\n\r\nrx.observables.SyncOnSubscribeTest > testUnsubscribeOutsideOfLoop FAILED\r\n    java.lang.AssertionError: Not unsubscribed.\r\n\r\nIs someone looking into this?\r\n\r\n'
p5953
aS'I just had a brief look at this. I do notice that white space is screwed up (no tabs please and inconsistent indents).'
p5954
aS":-1:\r\n\r\n  - The resource container field is deliberately `LinkedList` so it is not turned into an `ArrayList` and thus making it O(n) removal.\r\n  - When the exceptions are aggregated, it doesn't really matter what kind of list is that since the throwing of any exception has several orders of magnitude more overhead than the list-add overhead\r\n  - the method `unsubscribeFromAll` is static so it doesn't try to access the instance state of the class and cause concurrency issues."
p5955
aS"@davidmoten Sorry about that didn't notice it was changed from the initial file. Are we using a style guide that I can use with my IDE?"
p5956
aS"@akarnokd  Thank you for your comments. \r\n\r\n* On your first I have only change to an interface so that If there is a better data structure in the future we only have to change the initialisation. I understand why ``` LinkedList ```  is used over ``` ArrayList ``` . \r\n\r\n* Changing from the ``` ArrayList ```  to ``` LinkedList```  was motivated by the use of O(n) complexity when adding to the ``` ArrayList```  and also creation of a new ``` ArrayList ``` when capacity*load is met. I should of backed this up with a benchmark to show when and if there is a use case that would benefit the use.\r\n\r\n* Could you explain you last point, I can not see any concurrency issues using a non static method. I see there could be a potential fail fast issue with the subscriptions iteration (``` ConcurrentModificationException ``` ), but how the method is currently used in the class it shouldn't be an issue - ``` subscriptions  = null ``` is set in the methods that use ``` unsubscribeFromAll ```"
p5957
aS"> On your first I have only change to an interface so that If there is a better data structure in the future we only have to change the initialisation. I understand why LinkedList is used over ArrayList .\r\n\r\nI doubt that if this class gets further optimized, that's going to use a `List` implementation.\r\n\r\n> Could you explain you last point, I can not see any concurrency issues using a non static method. I see there could be a potential fail fast issue with the subscriptions iteration (ConcurrentModificationException ), but how the method is currently used in the class it shouldn't be an issue - subscriptions = null is set in the methods that use unsubscribeFromAll\r\n\r\nThis is to avoid programmer mistakes."
p5958
aS"@akarnokd \r\n> I doubt that if this class gets further optimized, that's going to use a List implementation.\r\n\r\nIts nice to have the flexibility that coding to interface brings, rather than an implementation. \r\n\r\n> This is to avoid programmer mistakes.\r\n\r\nI believe this would be solved by renaming the input parameter on the method, rather than making it a static method. I can resubmit this pull request to sort the naming issue?"
p5959
aS"First of all, this PR, so far, is cosmetic in nature which we rarely accept. \r\n\r\nSecond, don't change existing unit tests unless you are fixing a bug in them. This goes also for renaming/refactoring existing stuff or content: if you are improving or fixing an existing operator, you can rename things up to an extent if that gives you more oversight over said change."
p5960
aS'Thanks @akarnokd this will focus my contributions in the future. It would be nice to have this type of information in the contributions documentation if not already. '
p5961
aS'Yes, many things are not well documented yet in the project. '
p5962
asg14
S'wrightm:1.x'
p5963
sbsI3292
(iPull
Pull
p5964
(dp5965
g3
g53
sg5
S'Unit test for Blocking operators.'
p5966
sg7
(lp5967
S'Test'
p5968
asg10
I3292
sg11
(lp5969
sg14
S'akarnokd:OperatorTests2xPart1'
p5970
sbsI3293
(iPull
Pull
p5971
(dp5972
g3
S'+ bugfix to cache, skipUntil and takeUnit'
p5973
sg5
S'Test some UnicastSubject, cache, NotificationLite, amb'
p5974
sg7
(lp5975
S'Test'
p5976
asg10
I3293
sg11
(lp5977
sg14
S'akarnokd:OperatorTests2xPart2'
p5978
sbsI3294
(iPull
Pull
p5979
(dp5980
g3
g53
sg5
S'More tests and bugfixes to operators.'
p5981
sg7
(lp5982
S'Bug'
p5983
aS'Test'
p5984
asg10
I3294
sg11
(lp5985
sg14
S'akarnokd:OperatorTests2xPart3'
p5986
sbsI3297
(iPull
Pull
p5987
(dp5988
g3
g53
sg5
S'2.x: unit tests and fixes for fromIterable and range'
p5989
sg7
(lp5990
S'Bug'
p5991
aS'Test'
p5992
asg10
I3297
sg11
(lp5993
sg14
S'akarnokd:OperatorFromIterableRange2x'
p5994
sbsI3298
(iPull
Pull
p5995
(dp5996
g3
g53
sg5
S'2.x: tests for refCount and timer, fixes to flatMap, publish and range'
p5997
sg7
(lp5998
S'Bug'
p5999
aS'Test'
p6000
asg10
I3298
sg11
(lp6001
sg14
S'akarnokd:OperatorsTestsRefCountTimer2x'
p6002
sbsI3299
(iPull
Pull
p6003
(dp6004
g3
S'expectations\r\n\r\nSome tests are now skipped due to being invalid in RS.'
p6005
sg5
S'2.x: test for toFuture and using, changes according to the test'
p6006
sg7
(lp6007
S'Test'
p6008
asg10
I3299
sg11
(lp6009
sg14
S'akarnokd:OperatorTestsToFutureUsing2x'
p6010
sbsI3300
(iPull
Pull
p6011
(dp6012
g3
S'Bugfix: since they would emit a value on an empty source, they have to hold it until an actual request comes in.'
p6013
sg5
S'2.x: test for operators all, any, asObservable, fixes to all and any'
p6014
sg7
(lp6015
S'Bug'
p6016
aS'Test'
p6017
asg10
I3300
sg11
(lp6018
sg14
S'akarnokd:OperatorTestsAllAnyAsObservable'
p6019
sbsI3301
(iPull
Pull
p6020
(dp6021
g3
g53
sg5
S"2.x: test for buffer, I'm still missing the boundary-supplier version"
p6022
sg7
(lp6023
S'Bug'
p6024
aS'Test'
p6025
asg10
I3301
sg11
(lp6026
sg14
S'akarnokd:OperatorBufferTest2x'
p6027
sbsI3303
(iPull
Pull
p6028
(dp6029
g3
S'+ added AsyncSubscription that allows setting the actual subscription\r\nlater and can hold a resource. It has less overhead than\r\nSubscriptionArbiter due to single use.'
p6030
sg5
S'2.x: added missing buffer overload (with boundary selector)'
p6031
sg7
(lp6032
S'Enhancement'
p6033
aS'Test'
p6034
asg10
I3303
sg11
(lp6035
sg14
S'akarnokd:AsyncSubscription2x'
p6036
sbsI3304
(iPull
Pull
p6037
(dp6038
g3
S'Fluent assertions make the code much more readable.\r\nThis change is backward compatible.\r\n'
p6039
sg5
S'Enables assertions chaining'
p6040
sg7
(lp6041
S'Feature-Request'
p6042
asg10
I3304
sg11
(lp6043
S'Changing return types is a binary-incompatible change.'
p6044
aS'Do you care about binary compatibility of a return type in a test util class?'
p6045
aS'Since both `TestObserver` and `TestSubscriber` are part of the public API, they are subject to the binary compatibility requirement regarding existing methods.'
p6046
aS'Do you see a risk here?'
p6047
aS"Yes.\r\n\r\nI'm sorry, but such change can't be accepted for 1.x, however, you are free to propose this against 2.x."
p6048
aS'No problem. \r\nHope that users do not release their binary production code with the usage of `TestObserver` and `TestSubscriber`'
p6049
aS"It's not about releasing it to prod. If we break our public API, we break their code bases. Just because it's their test code does not mean we have a lower commitment to not breaking it. \n\nPlease get involved in the 2.x effort which is just getting underway for API related changes. \n"
p6050
asg14
S'tombujok:1.x'
p6051
sbsI3305
(iPull
Pull
p6052
(dp6053
g3
S"`Single` is a deferred single-value emitting Observable.\r\n\r\n`NbpObservable` is the non-backpressure Observable, named this way until\r\nthe main Observable gets all its tests ported so a refactor can deal\r\nwith all of them.\r\n\r\nI've implemented the most basic construction and operator methods on\r\nthem."
p6054
sg5
S'2.x: classes Single and NbpObservable'
p6055
sg7
(lp6056
S'Enhancement'
p6057
asg10
I3305
sg11
(lp6058
S'+1'
p6059
aS"I'm merging this so the independent work on both can be started."
p6060
asg14
S'akarnokd:SingleAndNonBackpressured2x'
p6061
sbsI3306
(iPull
Pull
p6062
(dp6063
g3
S"The concat reuses the same inner subscriber to save on its allocation\r\ncost which works only if the inner source conforms with the spec and\r\ndoesn't emit any event after an onComplete(). There is a test that\r\nexplicitly calls onComplete() twice to test the resilience of concat.\r\nThe current workaround makes this test pass but any async non-conforming\r\nsource may still bug out the operator. \r\n\r\nThis is a tradeoff between safety and performance. If we'd expect such\r\nnon-conforming behavior, the current optimization has to be turned into\r\na regular individually allocated inner subscribers."
p6064
sg5
S'2.x: operators cast and concat tests'
p6065
sg7
(lp6066
S'Bug'
p6067
aS'Test'
p6068
asg10
I3306
sg11
(lp6069
sg14
S'akarnokd:OperatorTestsCastConcat2x'
p6070
sbsI3307
(iPull
Pull
p6071
(dp6072
g3
S'When debounce is completed, the last value encountered is emitted immediately.'
p6073
sg5
S'2.x: Operator debounce and defaultIfEmpty, fix to debounce behavior'
p6074
sg7
(lp6075
S'Bug'
p6076
aS'Test'
p6077
asg10
I3307
sg11
(lp6078
sg14
S'akarnokd:OperatorTestDebounceDefaultIfEmpty2x'
p6079
sbsI3308
(iPull
Pull
p6080
(dp6081
g3
g53
sg5
S'2.x: operator test delay, dematerialize'
p6082
sg7
(lp6083
S'Test'
p6084
asg10
I3308
sg11
(lp6085
sg14
S'akarnokd:OperatorTestsDelayDematerialize'
p6086
sbsI3309
(iPull
Pull
p6087
(dp6088
g3
S'Note: several tests have been ignored due to non-conformance with RS\r\n\r\nAdded missing distinct and distinctUntilChanged overloads, fixed doOnEach not cancelling upstream if the callback crashes on the onNext path.'
p6089
sg5
S'2.x: operator test distinct, distinctUntilChanged and doOnEach'
p6090
sg7
(lp6091
S'Bug'
p6092
aS'Enhancement'
p6093
aS'Test'
p6094
asg10
I3309
sg11
(lp6095
sg14
S'akarnokd:OperatorTestDistinctEach'
p6096
sbsI3310
(iPull
Pull
p6097
(dp6098
g3
g53
sg5
S'2.x: operator test doOn(Request|Subscribe|Unsubscribe).'
p6099
sg7
(lp6100
S'Test'
p6101
asg10
I3310
sg11
(lp6102
sg14
S'akarnokd:OperatorTestDoOn2x'
p6103
sbsI3311
(iPull
Pull
p6104
(dp6105
g3
S'+ fixed exceptions throw by elementAt'
p6106
sg5
S'2.x: operator test elementAt, filter, finally, first'
p6107
sg7
(lp6108
S'Test'
p6109
asg10
I3311
sg11
(lp6110
sg14
S'akarnokd:OperatorTestElementAtFilterFinally2x'
p6111
sbsI3312
(iPull
Pull
p6112
(dp6113
g3
S'+ added operator flatMap of notifications, fixed a bug in onBackpressureBuffer\r\n\r\nNote also the few ignored tests because they either want to test against a null value or try to throw from RS methods.'
p6114
sg5
S'2.x: operator test flatMap, merge, mergeDelayError'
p6115
sg7
(lp6116
S'Bug'
p6117
aS'Test'
p6118
asg10
I3312
sg11
(lp6119
sg14
S'akarnokd:OperatorTestFlatMap2x'
p6120
sbsI3313
(iPull
Pull
p6121
(dp6122
g3
S"for GroupedObservable\r\n\r\n+ added BooleanSubscription to detect cancellation without caring about\r\nrequests.\r\n\r\nI'm still not 100% convinced the groupBy request coordination works\r\nproperly (i.e., no stall due lack of requests from one of the groups)."
p6123
sg5
S'2.x: operator test for groupBy; fix to groupBy and type argument swap'
p6124
sg7
(lp6125
S'Bug'
p6126
aS'Test'
p6127
asg10
I3313
sg11
(lp6128
sg14
S'akarnokd:OperatorTestGroupBy2x'
p6129
sbsI3314
(iPull
Pull
p6130
(dp6131
g3
g53
sg5
S'2.x: operator test ignoreElements, last, mapNotification'
p6132
sg7
(lp6133
S'Test'
p6134
asg10
I3314
sg11
(lp6135
sg14
S'akarnokd:OperatorTestIgnoreLastMapNotif2x'
p6136
sbsI3315
(iPull
Pull
p6137
(dp6138
g3
S'+ fix to observeOn to not request if cancelled in onNext delivery\r\n+ fix combineLatest error emission if the other sources are late or\r\nnever emit\r\n+ fix interval and PublishSubject to send MissingBackpressureException'
p6139
sg5
S'2.x: operator test observeOn'
p6140
sg7
(lp6141
S'Bug'
p6142
aS'Test'
p6143
asg10
I3315
sg11
(lp6144
sg14
S'akarnokd:OperatorTestObserveOn2x'
p6145
sbsI3316
(iPull
Pull
p6146
(dp6147
g3
g53
sg5
S'2.x: operator test onBackpressure(Buffer|Drop|Latest) and their bugfix'
p6148
sg7
(lp6149
S'Bug'
p6150
aS'Test'
p6151
asg10
I3316
sg11
(lp6152
sg14
S'akarnokd:OperatorTestOnBackpressure2x'
p6153
sbsI3317
(iPull
Pull
p6154
(dp6155
g3
S'I had to ignore tests that throw exceptions from a Publisher.subscribe or an Operator.apply due to their non-conformant behavior.'
p6156
sg5
S'2.x: operator test onError and onException, relevant bugfixes'
p6157
sg7
(lp6158
S'Bug'
p6159
aS'Test'
p6160
asg10
I3317
sg11
(lp6161
sg14
S'akarnokd:OperatorTestOnError2x'
p6162
sbsI3318
(iPull
Pull
p6163
(dp6164
g3
S"+ added toSingle and toNbpObservable to Observable\r\n+ fixed bugs in many operators and in the IO scheduler's release logic"
p6165
sg5
S'2.x: operator tests: publish, reduce, repeat + fixes'
p6166
sg7
(lp6167
S'Bug'
p6168
aS'Test'
p6169
asg10
I3318
sg11
(lp6170
sg14
S'akarnokd:OperatorTestPublishReduceRepeat2x'
p6171
sbsI3319
(iPull
Pull
p6172
(dp6173
g3
S"Note that testIssue_2191_SchedulerUnsubscribe had to change the call\r\ncount to pass. I don't understand this test and the over-mocking (but\r\nrecognize the style)."
p6174
sg5
S'2.x: operator test for replay'
p6175
sg7
(lp6176
S'Bug'
p6177
aS'Test'
p6178
asg10
I3319
sg11
(lp6179
sg14
S'akarnokd:OperatorTestReplay2x'
p6180
sbsI3320
(iPull
Pull
p6181
(dp6182
g3
S"+ retry with bipredicate\r\n+ fixed map not checking the returned value for null\r\n+ since RS doesn't allow throwing other than NPE, temporarily subscribe\r\nand lift will throw NPE with the actual error as cause so we don't miss\r\nan operator bug due to swallowed exceptions."
p6183
sg5
S'2.x: operator test: retry, retryWhen'
p6184
sg7
(lp6185
S'Bug'
p6186
aS'Test'
p6187
asg10
I3320
sg11
(lp6188
sg14
S'akarnokd:OperatorTestRetry2x'
p6189
sbsI3321
(iPull
Pull
p6190
(dp6191
g3
g53
sg5
S'2.x: operator tests: sample, scan and sequenceEqual + their bugfixes'
p6192
sg7
(lp6193
S'Bug'
p6194
aS'Test'
p6195
asg10
I3321
sg11
(lp6196
sg14
S'akarnokd:OperatorTestSampleScanEquals'
p6197
sbsI3322
(iPull
Pull
p6198
(dp6199
g3
g53
sg5
S'2.x: operator test: serialize, single + SerializedSubscriber fix'
p6200
sg7
(lp6201
S'Bug'
p6202
aS'Test'
p6203
asg10
I3322
sg11
(lp6204
sg14
S'akarnokd:OperatorTestSerializeSingle2x'
p6205
sbsI3323
(iPull
Pull
p6206
(dp6207
g3
S'Note that since we know have time unit in schedulers, one must be\r\ncareful with the time unit of the timed skip operators. The timestamps\r\nwill be calculated via this unit and may not return the expected values. \r\n\r\nFor example, a skipLast of 1 second will not skip the value 0.5 seconds\r\nbefore completion because its timestamp is rounded down to the start of\r\nthe second. But if one uses 1000 milliseconds, the value will be\r\nskipped.'
p6208
sg5
S'2.x: operator test: skip variants and bugfix'
p6209
sg7
(lp6210
S'Bug'
p6211
aS'Test'
p6212
asg10
I3323
sg11
(lp6213
sg14
S'akarnokd:OperatorTestSkip2x'
p6214
sbsI3324
(iPull
Pull
p6215
(dp6216
g3
g53
sg5
S'2.x: operator test: switchIfEmpty, switchMap + bugfixes'
p6217
sg7
(lp6218
S'Bug'
p6219
aS'Test'
p6220
asg10
I3324
sg11
(lp6221
sg14
S'akarnokd:OperatorsTestSubscribeOnSwitch2x'
p6222
sbsI3325
(iPull
Pull
p6223
(dp6224
g3
S'+ fixed a deadlock possibility in one of the merge tests'
p6225
sg5
S'2.x: operator tests: take family + fixes'
p6226
sg7
(lp6227
S'Bug'
p6228
aS'Test'
p6229
asg10
I3325
sg11
(lp6230
sg14
S'akarnokd:OperatorTestsTake2x'
p6231
sbsI3326
(iPull
Pull
p6232
(dp6233
g3
g53
sg5
S'2.x: operator throttleFirst, timeInterval and timeout + bugfixes'
p6234
sg7
(lp6235
S'Bug'
p6236
aS'Test'
p6237
asg10
I3326
sg11
(lp6238
sg14
S'akarnokd:OperatorTestsThrottleFirstTimeIntervalTimeout2x'
p6239
sbsI3327
(iPull
Pull
p6240
(dp6241
g3
S'+ signature fix to toMultimap and removed deprecated markers.'
p6242
sg5
S'2.x: operator tests: timestamp, toMap, toMultiMap, toList, toSortedList'
p6243
sg7
(lp6244
S'Bug'
p6245
aS'Test'
p6246
asg10
I3327
sg11
(lp6247
sg14
S'akarnokd:OperatorTestsPack2x'
p6248
sbsI3328
(iPull
Pull
p6249
(dp6250
g3
S'+ fixed cancellation behavior of observeOn, subscribeOn and\r\nunsubscribeOn (when and what to call cancel on)\r\n+ fixed infinite loop in ScheduledRunnable\r\n+ fixed zip not quitting eagerly if one of the sources was shorter\r\n+ added specific ZipIterable because zip-iterable tests expect it to be\r\nnot prefetching any of the sources (the plain zip does prefetch)\r\n+ made the fromIterable more resilient to Iterable/Iterator crashes and\r\nadded null-value checks'
p6251
sg5
S'2.x: operator tests unsubscribeOn, withLatestFrom, zip (partial)'
p6252
sg7
(lp6253
S'Bug'
p6254
aS'Test'
p6255
asg10
I3328
sg11
(lp6256
sg14
S'akarnokd:OperatorTestsPack2xPart2'
p6257
sbsI3329
(iPull
Pull
p6258
(dp6259
g3
S'I had to adjust some test slightly due to the a new behavior: if one\r\ncancels a source which is windowed, as long as the windows are active,\r\nthe source has to stay active. However, there are more subtle\r\npossibilities that need new tests.'
p6260
sg5
S'2.x: operator test: window variants'
p6261
sg7
(lp6262
S'Bug'
p6263
aS'Test'
p6264
asg10
I3329
sg11
(lp6265
sg14
S'akarnokd:OperatorTestWindow2x'
p6266
sbsI3330
(iPull
Pull
p6267
(dp6268
g3
g53
sg5
S'2.x: operator test zip and SafeSubscriberTest'
p6269
sg7
(lp6270
S'Test'
p6271
asg10
I3330
sg11
(lp6272
sg14
S'akarnokd:OperatorsTestZipFinish2x'
p6273
sbsI3331
(iPull
Pull
p6274
(dp6275
g3
g53
sg5
S'2.x: schedulers test of classic schedulers'
p6276
sg7
(lp6277
S'Bug'
p6278
aS'Test'
p6279
asg10
I3331
sg11
(lp6280
sg14
S'akarnokd:SchedulersTests2x'
p6281
sbsI3332
(iPull
Pull
p6282
(dp6283
g3
S'+ Fixed the `testNestedAsyncConcat` test.\r\n+ Fixed memory leak in `NewThreadWorker`.'
p6284
sg5
S'2.x: subject tests and bugfixes'
p6285
sg7
(lp6286
S'Bug'
p6287
aS'Test'
p6288
asg10
I3332
sg11
(lp6289
sg14
S'akarnokd:SubjectTests'
p6290
sbsI3333
(iPull
Pull
p6291
(dp6292
g3
S'I had to ignore many tests because they either test with null or throw\r\nan exception from a Subscriber method which are not allowed with RS.\r\n\r\n+ added Observers and Subscribers to create Observers/Subscribers with convenience.'
p6293
sg5
S'2.x: subscribers/observers tests'
p6294
sg7
(lp6295
S'Bug'
p6296
aS'Test'
p6297
asg10
I3333
sg11
(lp6298
sg14
S'akarnokd:SubscribersTests2x'
p6299
sbsI3334
(iPull
Pull
p6300
(dp6301
g3
S'+ sorted `Observable` and added `@BackpressureSupport` and\r\n`SchedulerSupport` annotations.\r\n+ created `@Beta` and `@Experimental` annotations, nothing is marked\r\nwith them because I intent everything to be standard at this point.'
p6302
sg5
S'2.x: disposable unit tests + fix to RefCountDisposable behavior'
p6303
sg7
(lp6304
S'Bug'
p6305
aS'Enhancement'
p6306
aS'Test'
p6307
asg10
I3334
sg11
(lp6308
sg14
S'akarnokd:DisposableTests2x'
p6309
sbsI3335
(iPull
Pull
p6310
(dp6311
g3
S'+ I wanted to make sure the slow path passes all tests before enabling\r\nthe scalar optimization.\r\n+ Fixed headers for internal classes'
p6312
sg5
S'2.x: scalar flatMap optimization enabled'
p6313
sg7
(lp6314
S'Bug'
p6315
aS'Enhancement'
p6316
asg10
I3335
sg11
(lp6317
sg14
S'akarnokd:ScalarFastPathEnable2x'
p6318
sbsI3339
(iPull
Pull
p6319
(dp6320
g3
S'The subscription was triggered by the supplied publisher and not one of its value or completion.\r\n\r\nBtw, should an `onComplete` from this inner publisher be treated as an indication to not subscribe to the actual source?'
p6321
sg5
S'2.x: fix delaySubscription with supplied publisher: wrong value to trigger subscription'
p6322
sg7
(lp6323
S'Bug'
p6324
asg10
I3339
sg11
(lp6325
S'What is the purpose of this operator? Why is it added?'
p6326
aS'Huh. That exists in 1.x?! Never seen or heard of it.'
p6327
aS'> Btw, should an onComplete from this inner publisher be treated as an indication to not subscribe to the actual source?\r\n\r\nThat\'s a good question ... the 1.x docs say it subscribes if the given Observable emits. `onComplete` is not an "emission" in the normal sense. So probably not.'
p6328
aS"I'll add this fix and unit test to a larger set of unit tests + fixes coming separately."
p6329
asg14
S'akarnokd:DelaySubscriptionFix2x'
p6330
sbsI3340
(iPull
Pull
p6331
(dp6332
g3
S'... and remove the unused Mockito imports'
p6333
sg5
S'test/subjects: Use statically imported never() methods'
p6334
sg7
(lp6335
sg10
I3340
sg11
(lp6336
S'See #3291.'
p6337
aS"@akarnokd are you seriously suggesting that cleaning up code to make it more consistent is a bad thing and shouldn't be done?"
p6338
aS"Cosmetic PRs, especially on unit test or on internal classes, don't really contribute anything to the library."
p6339
aS'wow...'
p6340
aS"I'm okay with this type of change. It makes the code more consistent, and is a simple non-intrusive change."
p6341
aS'Thank you @Turbo87 for the contribution!'
p6342
aS'@benjchristensen cool, thanks!'
p6343
aS"@Turbo87 I apologize for my harsh and dry comments. Generally, I'm in favor of cleanups such as yours and would have done it the same way. I was under the false impression that the project doesn't want such cleanups. I'm sorry if I offended you."
p6344
aS'@akarnokd nevermind, seems it all worked out in the end ;)'
p6345
asg14
S'Turbo87:import-cleanup'
p6346
sbsI3342
(iPull
Pull
p6347
(dp6348
g3
S'Addresses #3067 - Removes a redundant `onStart` implementation in `OperatorGroupBy`.'
p6349
sg5
S'Remove redundant onStart implementation in OperatorGroupBy'
p6350
sg7
(lp6351
sg10
I3342
sg11
(lp6352
S':+1:'
p6353
aS':+1: '
p6354
asg14
S'KevinTCoughlin:remove-unnecessary-onstart'
p6355
sbsI3345
(iPull
Pull
p6356
(dp6357
g3
S'Proposed change to register with state before onSubscribe so that "doOnSubscribe" side-effects are safe.\r\n\r\nIf this is approved as a change, we\'d want to do similar for the other Subjects as well I imagine. \r\n\r\nI came across this after debugging race conditions in some code and tracking it down to publishSubject.subscribe not actually subscribing until AFTER onSubscribe is completed. This breaks things if doOnSubscribe side-effects cause data to flow through that subject.\r\n\r\nIs there any reason not to make this change?'
p6358
sg5
S'PublishSubject Add Before onSubscribe'
p6359
sg7
(lp6360
sg10
I3345
sg11
(lp6361
S'Another issue I found while testing this:\r\n\r\n```java\r\n    @Test\r\n    public void testDoOnSubscribe() throws InterruptedException {\r\n    \tPublishSubject<Object> as = PublishSubject.create();\r\n    \tTestSubscriber<Object> ts = new TestSubscriber<>();\r\n    \t\r\n    \tas.doOnSubscribe(s -> {\r\n    \t\t// when subscribed, trigger side-effect that causes data to flow\r\n    \t\tas.onNext(1);\r\n    \t\tas.onComplete();\r\n    \t}).subscribe(ts);\r\n    \t\r\n    \tif(!ts.await(500, TimeUnit.MILLISECONDS)) {\r\n    \t\tfail("Did not receive events");\r\n    \t} \r\n    \t\r\n    \tts.assertValue(1);\r\n    \tts.assertComplete();\r\n    }\r\n```\r\n\r\nIf fails with a `MissingBackpressureException` because when `doOnSubscribe` runs, apparently `request(n)` has not been invoked.\r\n\r\n```\r\njava.lang.AssertionError: Expected: 1 (class: Integer), Actual: []\r\n\tat io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:356)\r\n\tat io.reactivex.subscribers.TestSubscriber.assertValue(TestSubscriber.java:485)\r\n\tat io.reactivex.subjects.PublishSubjectTest.testDoOnSubscribe(PublishSubjectTest.java:493)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:483)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\r\n\tSuppressed: io.reactivex.exceptions.MissingBackpressureException: Could not emit value due to lack of requests\r\n\t\tat io.reactivex.subjects.PublishSubject$PublishSubscriber.onNext(PublishSubject.java:308)\r\n\t\tat io.reactivex.subjects.PublishSubject.onNext(PublishSubject.java:86)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest.lambda$1(PublishSubjectTest.java:485)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest$$Lambda$7/1471868639.accept(Unknown Source)\r\n\t\tat io.reactivex.internal.subscribers.SubscriptionLambdaSubscriber.onSubscribe(SubscriptionLambdaSubscriber.java:45)\r\n\t\tat io.reactivex.subjects.PublishSubject$State.subscribe(PublishSubject.java:205)\r\n\t\tat io.reactivex.internal.operators.PublisherLift.subscribe(PublisherLift.java:75)\r\n\t\tat io.reactivex.Observable.subscribeActual(Observable.java:2522)\r\n\t\tat io.reactivex.Observable.subscribe(Observable.java:2511)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest.testDoOnSubscribe(PublishSubjectTest.java:487)\r\n\t\t... 23 more\r\n```\r\n\r\nIt\'s the same even if changed to `doOnRequest`:\r\n\r\n```java\r\n    \r\n    @Test\r\n    public void testDoOnSubscribe() throws InterruptedException {\r\n    \tPublishSubject<Object> as = PublishSubject.create();\r\n    \tTestSubscriber<Object> ts = new TestSubscriber<>();\r\n    \t\r\n    \tas.doOnRequest(s -> {\r\n    \t\t// when subscribed, trigger side-effect that causes data to flow\r\n    \t\tas.onNext(1);\r\n    \t\tas.onComplete();\r\n    \t}).subscribe(ts);\r\n    \t\r\n    \tif(!ts.await(500, TimeUnit.MILLISECONDS)) {\r\n    \t\tfail("Did not receive events");\r\n    \t} \r\n    \t\r\n    \tts.assertValue(1);\r\n    \tts.assertComplete();\r\n    }\r\n```\r\n\r\nSo, do we need a `doAfterSubscribe` or `doAfterRequest` for this type of use case?\r\n\r\n(And yes ... I know these unit tests represent very odd use cases ... bad, side-effecting, recursive, etc. But ... they happen. This is a very simplified example of issues I\'ve run into while simulating IO with subjects).'
p6362
aS'cc @akarnokd for your review of the PR.'
p6363
aS"So this breaks `BlockingOperatorNext` for some reason that I haven't yet figured out.\r\n\r\nThe root of what I'm trying to solve is how to know when a `Subscriber` is actually subscribed to a `Subject`. Right now I can't find a reliable hook point to know once it is subscribed and will receive data, at which point I can trigger work that will emit data."
p6364
aS'I just force pushed a revision that I think achieves the goal I have, while also working with the `BlockingOperatorNext` use case.\r\n\r\nHere is a summary of what I need:\r\n\r\n```java\r\nsubject.subscribe(new Subscriber<T>() {\r\n\r\n public void onSubscribe(Subscription s) {\r\n    s.request(someN);\r\n    // now that we are subscribed ... trigger work that will cause data to flow to the subject\r\n }\r\n\r\n public void onNext(T t) {\r\n    // expect to get data here after trigger from within \r\n }\r\n});\r\n```\r\n\r\nRight now there is not a deterministic time to start sending data, as `onSubscribe` must be completed, and then there is another method invocation to register the `Subscriber` with the `Subject`, which means there is no mechanism to know when it is done subscribing.\r\n\r\nThus, I suggest this change so that `add` happens BEFORE `onSubscribe` is invoked.\r\n'
p6365
aS"All unit tests are now passing. @akarnokd please let me know if there's a reason to not proceed with this, or if you have a better way of deterministically signaling when a `Subscriber` is done subscribing to a `Subject` and can receive data."
p6366
aS"I don't have time to continue this discussion right now ... I'll come back to it after creating a custom Subject for my use case that solves my immediate need."
p6367
aS"Instead of continuing this discussion here, I'm closing this and will instead dig into the more important design decisions of v2 that impact `Observable`, `Flowable`, `Subject`, `Publisher`, `Processor`, etc.\r\n\r\nSince the `PublishSubject` of v2 is currently in the state it is, I ended up solving my use case mostly without Rx."
p6368
asg14
S'benjchristensen:PublishSubject-onSubscribe'
p6369
sbsI3348
(iPull
Pull
p6370
(dp6371
g3
S'Proposed separation of `Observable` and `Flowable` along with description of each and their characteristics.'
p6372
sg5
S'2.x Design: Flowable/Observable'
p6373
sg7
(lp6374
S'Discussion'
p6375
asg10
I3348
sg11
(lp6376
S'Related to discussion in https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-135916611\r\n\r\n'
p6377
aS'@ReactiveX/rxjava-committers Is there agreement to support `Observable` and `Flowable` as independent types as described by this PR?\r\n\r\nIf there are questions needing answering before you can respond, please ask the questions now so we can move forward.\r\n\r\nI have posted lengthy explanations of reasoning here:\r\n - https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-135916611\r\n - https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-137838099 \r\n\r\nAnother example supporting the need of the two types is that `Subject` can not implement `Publisher`: https://github.com/ReactiveX/RxJava/pull/3349'
p6378
aS'Here are some ideas on API design and comparisons between the types:\r\n\r\n### Push\r\n\r\n```java\r\nObservable.create(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n})\r\n```\r\n\r\nwould be equivalent to this if we chose to have these APIs:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.BUFFER)\r\n```\r\n\r\n### Pull-Push/Async Pull\r\n\r\nObservable does not support pull.\r\n\r\nWith Flowable there is synchronous variety:\r\n\r\n```java\r\nFlowable.createSync(... SyncOnSubscribe ... )\r\n// or\r\nFlowable.from(Iterable)\r\n// or\r\nFlowable.just(T...)\r\n// or\r\nFlowable.range(0, 10000000)\r\n```\r\n\r\nand an asynchronous variety:\r\n\r\n```java\r\nFlowable.createAsync(... AsyncOnSubscribe ... )\r\n```\r\n\r\n### Conversion\r\n\r\nFrom `Flowable` to `Observable`, it is easy since it asks for no `request(n)` flow control:\r\n\r\n```java\r\nFlowable f = ...\r\nObservable<T> o = f.toObservable(); // this will call request(Long.MAX_VALUE) up when subscribed to\r\n```\r\n\r\nFrom `Observable` to `Flowable`, it must provide a backpressure strategy:\r\n\r\n```java\r\nObservable o = ...\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.*)\r\n// for example\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.BUFFER)\r\n// or \r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.DROP)\r\n// or\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.FAIL)\r\n// or \r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.create(...)) // like lifting an operator into a stream, except for a backpressure strategy\r\n```'
p6379
aS'I think instead of `toFlowable`, we could move the `onBackpressureXXX` method into the Observable and they now allow direct customization instead of an enum/interface-like construct you are proposing.\r\n\r\nI don\'t particulary like the name swap because users now have learned about the Observable being the one where one doesn\'t have to worry about memory overflow so much. The change, I think, will create a lot of confusion. \r\n\r\nI don\'t particularly understand the need for this non-backpressure version again (even though I was skeptical about the addition of backpressure back then). Is it the overhead of the backpressure management? Is it the latency caused by the scattering effect when crossing a thread boundary? Or is it that one wants to manually emit onNext event "mindlessly"?'
p6380
aS'> I think instead of toFlowable, we could move the onBackpressureXXX method into the Observable and they now allow direct customization instead of an enum/interface-like construct you are proposing.\r\n\r\nThis doesn\'t make sense to me, since `Observable` would not have `request(n)` signals for `onBackpressureXXX` to work. \r\n\r\n> I don\'t particulary like the name swap because users now have learned about the Observable being the one where one doesn\'t have to worry about memory overflow so much. The change, I think, will create a lot of confusion.\r\n\r\nThe rest of the ReactiveX community argues the opposite that RxJava has caused confusion by adding backpressure to `Observable`. \r\n\r\nThe argument also is that adding backpressure has made usage of `Observable` more complicated for the push cases. I think this is a fault of our API design in that we just exposed the raw `Observable.create` without better creation APIs. \r\n\r\n> The change, I think, will create a lot of confusion.\r\n\r\nFrom 0.20 to 1.0 it evolved. The community dealt with it. Now I hear that combining the two has confused people. Separating the types is intended to clarify. And to stop confusing when compared against RxJS, Rx.Net, etc.\r\n\r\n> I don\'t particularly understand the need for this non-backpressure version again\r\n\r\nThe issue with `Subject` is representative. A `Subject` can not be a `Publisher`, as a `Subject` is "hot", "push", and can\'t obey `request(n)` backpressure. For use case that are truly push, particularly "hot" sources, the `Observable` type without backpressure is more honest and communicative.  Thus, if we want to have a `Subject`, that is "hot" and controlled by the producer, we actually need the `Observable` type for `Subject` to extend/implement. \r\n\r\nAdditionally, there is overhead as you mention, though honestly, this is rarely applicable to most use cases. \r\n\r\n> Or is it that one wants to manually emit onNext event "mindlessly"?\r\n\r\nThis is the key, but "mindlessly" is dismissive. All "hot", push, use cases are like this. \r\n\r\nI can easily argue that `Flowable` can solve this use case just fine, like this:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.BUFFER)\r\n```\r\n\r\nBut the type itself does nothing to communicate that this is push. `Flowable` really represents an interactive, "async pull" or "pull-push" type. Modeling a push source with it is possible, and I actually prefer doing so, as it makes me consider backpressure, but there are many who like to just have a push case. \r\n\r\nToday, the default v1 `Observable` is equivalent to this:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.FAIL)\r\n```\r\n\r\nI think that has confused people. \r\n\r\nMy conclusion of this debate is that it is actually quite subjective, but that alignment with the broader ReactiveX community is worth separating the types so that `Observable` is "push", not a "pull-push"/"async pull"/"push with flow control" type. The mental model is cleaner. Then, because @headinthebox is liberal in Rx not being just one thing, we extend RxJava to have not only `Observable`, but also `Flowable` and `Single`.'
p6381
aS'Fine.'
p6382
aS'To be precise, I\'m not against having Single, Observable and Flowable in the library and if the community can deal with name- and feature-"shuffle" then I accept the decision.\r\n\r\n> This doesn\'t make sense to me, since Observable would not have request(n) signals for onBackpressureXXX to work.\r\n\r\nIn greater detail, I proposed that instead of having `Observable.toFlowable` where `Observable` is the non-backpressure, synchronously cancellable push-stream, I\'d rather have `Observable.onBackpressureXXX` methods since, for example, `onBackpressureDrop` can run on its own or with a callback. Such extra parameter would be difficult to pass in with an enumeration such as the `BackpressureStrategy.DROP`. For example, the following general signature would be necessary:\r\n\r\n`Observable.toFlowable(BackpressureStrategy, Object... strategyParams)`\r\n\r\nThe drawback is the lack of compile-time validation of strategyParams.'
p6383
aS"An `Observable.onBackpressureDrop()` is meaningless, as it would never know when to drop anything.\r\n\r\nSorry for not being clear on `BackpressureStrategy.DROP`. I did not intend it as an enum, but a type with static defaults, and factory methods for custom ones. You'll see that in the example above showing this:\r\n\r\n```java\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.create(...)) // like lifting an operator into a stream, except for a backpressure strategy\r\n```"
p6384
aS'Despite the debate over API design (which we can continue later), should we merge this PR?'
p6385
aS'The text is okay :+1:'
p6386
aS'Thanks @akarnokd \r\n\r\nAnyone else have opinions on this? Reasons to not proceed?'
p6387
aS'I supported the initial change and still support it now. The text is fine by me :+1: '
p6388
aS"> Flow\r\n\r\nFlow is the interface name in Java 9. Hence `Flowable` which implements `Flow`. We can't use `Flow` without colliding with the `j.u.c.Flow` interface name.\r\n\r\n> loss of continuity with existing code and documentation\r\n\r\nThe only thing that would not apply to the new `Observable` is the backpressure portion.\r\n\r\nThe loss of continuity and alignment with the broader ReactiveX community is equally bad, just look at polyglot docs at reactivex.io to see how the RxJava `Observable` stands out as different. "
p6389
aS'Thank you @tilal6991 for your review and weighing in.'
p6390
aS'I would support a type called `rx.Rx` that had static constructors which returned the appropriate type (Obs vs Flw).'
p6391
aS"> I would support a type called rx.Rx that had static constructors which returned the appropriate type (Obs vs Flw).\r\n\r\nI'm okay with us exploring that type of thing. However, let's figure out the design contract of the core types first."
p6392
aS'Anyone else have :+1: or :-1: on this before I proceed to merge it?'
p6393
aS':+1: '
p6394
aS'Merging so we can move forward on Design.md.'
p6395
asg14
S'ReactiveX:v2-design-flowable'
p6396
sbsI3349
(iPull
Pull
p6397
(dp6398
g3
S'Clarification of `Subject` that affects implementation. \r\n\r\nRelated to discussion in https://github.com/ReactiveX/RxJava/pull/3345.'
p6399
sg5
S'2.x Design: Subject'
p6400
sg7
(lp6401
S'Discussion'
p6402
asg10
I3349
sg11
(lp6403
S'Ping @akarnokd '
p6404
aS'@ReactiveX/rxjava-committers Can this PR be merged?'
p6405
aS'I disagree with the two statements.'
p6406
aS'Please explain why you disagree and your proposed solution.'
p6407
aS"> Relation to Reactive Streams\r\n>\r\n>- It can not implement Reactive Streams `Publisher` unless it is created with a default flow control strategy. \r\n\r\nSubjects can implement `Publisher` if they don't overflow their clients that are of type `org.reactivestreams.Subscriber`. \r\n\r\nIn other words, there could be `AsyncProcessor`, `PublishProcessor`, `ReplayProcessor`, etc. that implement `org.reactivestreams.Processor` but have default backpressure strategy coded in: `PublishProcessor` and `BehaviorProcessor` fail on overflow, the rest buffers/replays. The fail behavior can be avoided via onBackpressure operator that drops/buffers/latests values.\r\n\r\nWhat we call `PublishSubject` now can then be non-backpressured by extending `NbpObservable` and taking `NbpSubscribers`. These are naturally not RS because they have different type and structure.\r\n\r\n>- It can not implement `Processor` since a `Processor` must compose `request(n)` which can not be done with multicasting or pure push. \r\n\r\nAgain, I don't see any mention of composing requests through a processor in the spec, but you could ask them (they're less likely to answer me lately)."
p6408
aS'> A `PublishSubject` can not implement `Publisher`\r\n\r\nYet it [does](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/subjects/PublishSubject.java#L300) and works fine. It does not overflow the client and doesn\'t drop values silently either; if the client can\'t keep up, it will receive an error. The developer must think about what should happen in case the client can\'t keep up, perhaps increase the buffer size in `observeOn`, perhaps it is okay to drop values, perhaps there are some transient bursts and `onBackpressureBuffer` is enough.\r\n\r\nI\'ve read through the linked discussion and it feels there is a lot of self-handcuffing going on. Restricting a `Publisher` the work exactly once is what Iterator does: there is no going back or re-iteration and this is also what happens with a `j.u.Stream`. I have the feeling the way Akka was implemented attempted to sneak into the specification via this single-use: actors don\'t know about what we can call "channels" but only messages. The second problem I see with RS is that in some people\'s mind, there is only one stage: a source and a consumer and they can\'t imagine a chain of operators we deal with RxJava all the time where aspects are distributed along distinct operators. This also reminds me of an article which detailed why CORBA failed; one of the reasons being that proposers where not required to reference-implement their proposals which would have brought out the problems early on.\r\n\r\nSo if you think `PublishSubject` violates the RS spec or fails a TCK, then show me a code example of such violation.'
p6409
aS'Related to this is how we determined that `Subject` can not even be used in v1 operator chains where `request(n)` is being used:\r\n\r\n- https://github.com/ReactiveX/RxJava/issues/1779\r\n- https://github.com/ReactiveX/RxJava/issues/1732'
p6410
aS"If your interpretation is true, no operator can implement RS at all and no source, hot or cold is allowed.\r\n\r\n- the moment there is an exception, request(n) is violated because there wasn't n onNexts\r\n- the moment an operator such as observeOn doesn't request the same amount as its child, request(n) is violated.\r\n- if there is an infinite source or unbounded subscriber, cancel is never called thus rule 1.8 is violated.\r\n"
p6411
aS'I am convinced that the PublishSubject cannot be a Processor. In order for a thing to offer stream fan-in/fan-out functionality then a new `Subscription` must be produced for every subscriber and back pressure requests must be maintained for each separately. The use case of a subject is different from a processors intended use. '
p6412
aS"> the moment there is an exception, request(n) is violated because there wasn't n onNexts\r\n\r\n`onError` signals are not part of `request(n)`. Rule 1.1 only talks about `onNext`. Rule 1.4 says exceptions are emitted via `onError`.\r\n\r\nAdditionally:\r\n\r\n - 2.9 A Subscriber MUST be prepared to receive an onComplete signal with or without a preceding Subscription.request(long n) call.\r\n - 2.10 A Subscriber MUST be prepared to receive an onError signal with or without a preceding Subscription.request(long n) call.\r\n\r\n> the moment an operator such as observeOn doesn't request the same amount as its child, request(n) is violated.\r\n\r\nNo, because `observeOn` decouples the flow. It can request(128) up as long as it can handle receipt and buffer it, and then respond correctly to its consumer.\r\n\r\nThus, a fully unbounded `ReplaySubject` could satisfy `request(n)` semantics since it could act like an infinite `observeOn`. This does not however apply generically to `Subject` or `PublishSubject`, and not a bounded `ReplaySubject`.\r\n\r\n> if there is an infinite source or unbounded subscriber, cancel is never called thus rule 1.8 is violated.\r\n\r\nHuh? 1.8 does not say `cancel` MUST be invoked. It just says that if it is invoked then the source must stop emitting:\r\n\r\n- 1.8 If a Subscription is cancelled its Subscriber MUST eventually stop being signaled.\r\n\r\n\r\n\r\n\r\n\r\n"
p6413
aS"Let's assume there is a non-backpressure PublishSubject, not Flowable and not implementing RS but it is a NbpObservable. I then take this subject, cast it to NbpObservable, call toFlowable(BackpressureStrategy.FAIL) and I have a Flowable. Is this Flowable conforming with the RS spec? If not, there any legal way of implementing any toFlowable at all?"
p6414
aS'That example is now okay, because when you converted from `Subject` to `Flowable`, you chose to add a `BackpressureStrategy` that defines flow control. That `Flowable` conforms to the spec. \r\n'
p6415
aS'The issue with `Subject implementing Publisher` is that `Publisher` has this method:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s);\r\n```\r\n\r\nIf it was instead:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s, BackpressureStrategy strategy);\r\n```\r\n\r\n... then it would be okay, and that is the same as `toFlowable(BackpressureStrategy s)`.\r\n'
p6416
aS"@benjchristensen Then why is it wrong if PublishSubject does what you just replied: sends an error outside requested amount, decouples the flow and doesn't call cancel to upstream?"
p6417
aS'Because you are calling an error on the `Subscriber`, which is due to overflowing, which is the fault of the `Publisher` for not obeying the `request(n)`. \r\n\r\nIn the `toFlowable()` case, the `Subscriber` does not receive an error.'
p6418
aS'Also, do you recognize that what I described in the NbpObservable->Flowable example is what the current 2.0 PublishSubject does in one step?'
p6419
aS'Yes I do, but you decide a default backpressure strategy of "FAIL", which is not okay to do. It means you are ignoring the `request(n)` of the subscribers that subscribe to this method:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s);\r\n```\r\n\r\nIgnoring the `request(n)` breaks rule 1.1.\r\n\r\nWe can not choose a default flow control strategy that defeats the purpose of `request(n)`. That breaks the RS contract, and the whole point of Reactive Streams.'
p6420
aS"The default can be overruled by any of the onBackpressureXXX operators. \r\n\r\nDo error(), empty(), never() and just() ignore request(n)? If yes, then we can't have them as flowables."
p6421
aS"That's missing the point. The user is opting into those forms of flow control. The user can choose whatever `request(n)` behavior they want. Operators are a mechanism for them to control `request(n)`. \r\n\r\nA `Subject` ignoring the `request(n)` though is not allowed."
p6422
aS'Don\'t ignore the other side of this as well, the purpose of a `Subject` existing is for a producer to do "hot" emission to `onNext`. This means they will not call `onSubscribe`. This breaks 1.9 as I explained above.\r\n\r\n'
p6423
aS'If this is about the lack of call to PublishSubject.onSubscribe then one should call it with something. \r\n\r\nSuch call is practically no-op because PublishSubject is an unbounded Subscriber. Is being an unbounded Subscriber a violation in general or only if said Subscriber is a Subject? \r\n\r\nIf the latter, then all Subjects should be banned and neither groupBy() nor window() should be allowed.'
p6424
aS'> Is being an unbounded Subscriber a violation in general\r\n\r\nBeing an unbounded subscriber is fine. Being an unbounded Publisher is not.\r\n\r\nSubjects are hot, push. They do not participate in backpressure. Stop trying to apply the same rules to all types, that is why we are splitting the types in https://github.com/ReactiveX/RxJava/pull/3348. We will have a `Subject` that implements `Observable`, not `Flowable`.'
p6425
aS"I can't disprove a definition which this thread has become now. In addition, reviewing anything is now quite difficult because I can't predict which rule applies when and when will a rule suddenly mean its opposite."
p6426
aS'I see no logical fault in reasoning :+1:. We can debate exactly what subjects are later but it is clear to me that the assumptions established by the RS Processor do not allow for multicast subjects (as they operate today).'
p6427
aS'Thanks @stealthcode for reviewing and weighing in. As you allude to, this PR is simply attempting to document what a `Subject` is, and align with what is in the Reactive Streams spec.'
p6428
aS"@akarnokd Any further thoughts on the text of this PR? I'd like to move forward to other items of design if we can move past this one."
p6429
aS'I disagree with the text. No further comments on this topic.'
p6430
aS"I think this PR makes the distinction between Subject and reactive streams Publisher more apparent which is good.\r\n\r\nRegarding the argument, I'm convinced that PublishSubject can't be a Processor without implementing a backpressure strategy. \r\n"
p6431
aS"@akarnokd You can't disagree and then abstain from providing alternatives when evidence has been provided supporting this text. Are you removing yourself from the design discussion and letting the rest of us make the decision?"
p6432
aS'@stevegury thank you for your review of the topic and weighing in.'
p6433
aS'> You can\'t disagree and then abstain from providing alternatives when evidence has been provided supporting this text.\r\n\r\nDon\'t put is on me. In my understanding, there is no problem with `PublishSubject` being a `Processor` as it by default doesn\'t overflow its children but sends them an error. I\'ve also mentioned that you can apply `onBackpressureXXX` on a `PublishSubject` and change this behavior to be dropping, buffering or using the latest. This is nothing different than applying `onErrorResumeNext()` on a source which is likely to emit an error. For example:\r\n\r\n```java\r\nsubject.onErrorResumeNext(\r\n    e -> e instanceof MissingBackpressureException \r\n        ? subject.onBackpressureDrop() : Observable.error(e));\r\n```\r\nThis will resubscribe with a drop strategy to the subject to avoid any further errors.\r\n\r\nBut if your problem is that `PublishSubject` defaults to error out, I see the option to add a `BackpressureStrategy` parameter to `PublishSubject.create()` so there is no "surprise" to those who wouldn\'t read the specification anyways regarding default behavior.\r\n\r\nThe final alternative I can offer is something like the `SubmissionPublisher` from Doug Lea which pushes the rejection handling to the caller of `submit` or `offer`.\r\n\r\n> Are you removing yourself from the design discussion and letting the rest of us make the decision?\r\n\r\nI\'m outnumbered anyways. Does this mean whenever I disagree with something in the future, you either keep asking until I change my mind or simply outrule me?\r\n\r\nPerhaps this is a good time to ask for insight from the guys who maintain the RS spec or the persons who are not Neflix or me.'
p6434
aS'> the guys who maintain the RS spec\r\n\r\nI\'m one of them => https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/CONTRIBUTING.md#gatekeepers But if we can get someone else to spend time on this with us, we can get others involved. Perhaps @smaldini could give us some time. \r\n\r\n> as it by default doesn\'t overflow its children but sends them an error\r\n\r\nThis is the key problem so let me summarize this for anyone else catching up on this thread. A `Publisher` in "Reactive Streams" is supposed to *respect* the `request(n)` from a `Subscriber`. To *respect* means that it won\'t emit more than requested. It doesn\'t mean that it sends `onError` to the `Subscriber` if the `Subscriber` can\'t keep up. The whole point of "Reactive Streams" is to slow down the producer to the rate of the consumer. Sending an error to the consumer when it is slow is counter to its entire purpose. In "Reactive Streams", the consumer is in control. An Rx `Subject` on the other hand puts the producer in control. '
p6435
aS"I'm merging this based on feedback from @stevegury and @stealthcode and my understanding of Reactive Streams based on my involvement in defining that contract. The Design.md document still has a long way to go and we'll have many more weeks of discussions on design. This is but one small point."
p6436
asg14
S'ReactiveX:v2-design-subject'
p6437
sbsI3350
(iPull
Pull
p6438
(dp6439
g3
S'How to create and destroy streams.\r\n\r\nThe wording of this can become much better once agreement occurs in https://github.com/ReactiveX/RxJava/pull/3348/files\r\n\r\nThe intent of this is:\r\n\r\n1) Specify how to create streams (Observable/Flowable) of the various flavors, and account for flow control.\r\n2) Evolve towards what the creation/generation APIs are\r\n3) Specify that it is not the responsibility of the final Subscriber to call unsubscribe/cancel upstream'
p6440
sg5
S'2.x Design: Creation/Destruction'
p6441
sg7
(lp6442
S'Discussion'
p6443
asg10
I3350
sg11
(lp6444
S"Just read the Hot and Cold stuff. I threw down some cogitations on Hot and Cold in a gist just in the last couple of days. It's [here](https://gist.github.com/davidmoten/eeb450682db09e03efc0). My thoughts on the matter not really matured yet but the vagueness about Hot and Cold Observables was something I wanted to clarify for myself. One characteristic of Hot observables that doesn't seem to get mentioned is that multiple concurrent subscribers will see the same stream at some point."
p6445
aS'I see a few cases when one wants to "create" an `Observable`:\r\n\r\n  - There is a hot source in some other library (such as mouse events) and one wants to bring it into the `Observable` world. The safest way to do this is to add in a `Subject`.\r\n  - There is a cold source (such as a JDBC query) that would be consumed in a pull-fashion anyway and one wants to bring it into the `Observable` world too. That case could use a generator such as `AbstractOnSubscribe` or `SyncOnSubscribe`.\r\n  - Other cases should be (already) covered by static factory methods such as `just`, `fromCallable`, etc.'
p6446
aS'@davidmoten The definition of hot/cold as I\'ve put in this document comes from @headinthebox. It is about side-effects. \r\n\r\nIt is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time, which is only assured if `ConnectableObservable.connect()` is used.\r\n\r\nHere is Reactive Cocoa 3.0 on hot/cold: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/v3.0.0/CHANGELOG.md#replacements They have separated the types into `Signal` (hot) and `SignalProducer` (cold).\r\n\r\nThe temperature of an `Observable` does not prevent flow control from being applied. Thus this is not true:\r\n\r\n> once subscribed to if no requests are made that eventually available storage (memory/disk) will exceed any given bound (due to events being buffered)\r\n\r\nIf `publish()` is being used, then the flow control prior to `publish()` would be equivalent for all consumers. If each consumer chooses to apply their own flow control, then they are choosing to not see "the same stream" as their siblings as they have created different streams from the same source.\r\n\r\nAnd nothing about being "hot" requires everything to be buffered. That is purely a choice of flow control. Note that an operating system already is doing flow control before it sends mouse events. It is absolutely not sending every event. It is sending sampled events, and that sampling happens at the hardware and software levels before it ever hits us anyways. Flow control is everywhere. '
p6447
aS'> I see a few cases when one wants to "create" an Observable:\r\n\r\nThe approaches you gave all work. A few comments:\r\n\r\n- a `Subject` is not the only way (or safest ... not sure what safety has to do with this) to do this, as `Observable.create` which then listens and stops listening on cancellation is equally effective, and can be better than an always-on `Subject` if the use of the stream is not constant.\r\n- missing is the ability to do async batched fetching, such as `AsyncOnSubscribe`, which is needed for more advanced cold sources over network boundaries (for example, fetching 5000 items 100 at a time)\r\n- the static factory methods today are legit, but I think we should revisit their naming, and anything from a cold pullable source should return a `Flowable`, not an `Observable`, if we agree upon that distinction in https://github.com/ReactiveX/RxJava/pull/3348\r\n'
p6448
aS'Do you all agree that we do not need an `unsubscribe`/`cancel` send from a `SafeSubscriber` wrapper after every `onError`/`onComplete`? I find it wasteful, unnecessary, and affecting performance (in cases such as a stream of 1 where the extra unsubscribe is noticeable when the stream itself only emitted 1 item).'
p6449
aS'I agree, there is no need to force a cancel call on a final Subscriber anymore. Upstream will cancel the subscription for you  (maybe before calling you, maybe after they called you: see observeOn).'
p6450
aS"@benjchristensen re Hot/Cold\r\n\r\n>It is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time, which is only assured if ConnectableObservable.connect() is used.\r\n\r\nThis is how to make this precise and not demand mention of `ConnectableObservable` (not part of the reactive streams spec for instance):\r\n\r\n* once two subscribers are subscribed to source there exists a finite non-negative integer n such that events1.skip(n) is equal to events2 or events1 is equal to events2.skip(n). That is *eventually* the streams have the same elements till termination.\r\n\r\nYour point about sampling doesn't change the fact that an infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growth. It's irrelevant that the OS gives me one mouse event a millisecond or one per year because I'm not talking about a practical measuring test but a theoretical one. It's certainly the case that any consumer could apply flow control measures to such an observable but I'm trying to arrive at at a way of deciding that an observable is Hot or Cold by just observing it (having no knowledge of its internals). I guess once flow control has been applied to a Hot Observable then the resultant Observable is by my definition no longer Hot. This may be a confusing distinction and I might have to come up with a new name for it say Red Hot observable. Just semantics I guess but I think interesting to explore a bit.\r\n\r\n"
p6451
aS'> not part of the reactive streams spec for instance\r\n\r\nThe Reactive Streams spec does not talk about hot, cold, or multicast, nor is RxJava going to be 100% about Reactive Streams. That spec represents a type, but it certainly doesn\'t address everything. One example of that is shown in https://github.com/ReactiveX/RxJava/pull/3349.\r\n\r\nThus, the contract requirements of Reactive Streams are only applicable to types that implement the Reactive Streams interfaces. \r\n\r\n> This is how to make this precise\r\n\r\nI don\'t understand what precision you are aiming for. We can not redefine what "hot" and "cold" mean, since those are beyond RxJava. The definitions (https://github.com/ReactiveX/RxJava/blob/2.x/DESIGN.md#hot) that I have included in the document come from @headinthebox and exist in other ReactiveX implementations and documentation (such as here: http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#HotAndCold and here: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/CHANGELOG.md#hot-signals-are-now-signals)\r\n\r\nSo what specifically are you suggesting to make more precise than what is already accepted as the definition of "hot" and "cold"?\r\n\r\n> infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growth\r\n\r\nI don\'t understand this. What does being "hot" have to do with having an unbounded buffer?\r\n\r\n> I\'m trying to arrive at at a way of deciding that an observable is Hot or Cold by just observing it\r\n\r\nSince "hot" and "cold" is about side-effects, and nothing to do with the data flowing through it, then you would need to look at whether there are side-effects when a subscribe happens. \r\n\r\nA type system can attempt to try and communicate when a source represents a hot or cold source, such as Reactive Cocoa does with `Signal` (hot) and `SignalProducer` (cold): https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/CHANGELOG.md#hot-signals-are-now-signals Determining whether we should use types to represent these was the point of the discussion in https://github.com/ReactiveX/RxJava/issues/2785\r\n\r\n> I guess once flow control has been applied to a Hot Observable then the resultant Observable is by my definition no longer Hot. \r\n\r\nI don\'t see how the application of flow control is related to whether a source is "hot" or "cold" since flow control does not impact the side-effects or lack of side-effects of subscription. '
p6452
aS"Is this PR good for merge, or are there things that need to change?\r\n\r\nAny further additions (such as more precision if needed) can come through followup PRs. We don't need to get everything done in this PR, as long as this PR is correct thus far.\r\n\r\nIf this PR is okay, I'd like to merge so we can move forward in defining the design and allow maturation of the picture for v2.\r\n\r\ncc @ReactiveX/rxjava-committers for vote"
p6453
aS'Ping @ReactiveX/rxjava-committers @akarnokd @davidmoten '
p6454
aS':+1: '
p6455
aS"Thanks @akarnokd \r\n\r\n@stealthcode Let me know what you need changed in this before you're okay."
p6456
aS':+1: all good. thanks! '
p6457
aS'Thank you. Merged.'
p6458
asg14
S'ReactiveX:v2-design-lifecycle'
p6459
sbsI3351
(iPull
Pull
p6460
(dp6461
g3
S"The iterator created by `BlockingOperator#getIterator()` doesn't exert backpressure, which causes code like this to never terminate/run out of memory\r\n\r\n```java\r\nObservable.from(new Iterable<Integer>() {\r\n\r\n    @Override\r\n    public Iterator<Integer> iterator() {\r\n        return new Iterator<Integer>() {\r\n\r\n            @Override\r\n            public boolean hasNext() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Integer next() {\r\n                return 1;\r\n            }\r\n        };\r\n    }\r\n}).toBlocking().getIterator().next();\r\n```\r\n\r\nThis PR adds the appropriate `request` calls so that this works. I had to combine the implementations of `Subscriber` and `Iterator` into a single class to get access to `request()`."
p6462
sg5
S'Make BlockingOperatorToIterator exert backpressure.'
p6463
sg7
(lp6464
S'Enhancement'
p6465
asg10
I3351
sg11
(lp6466
S"Ok. I removed the unnecessary variable initialization and added batched requests. The initial batch is `RxRingBuffer.SIZE`, and subsequent ones are `3 * RxRingBuffer.SIZE / 4` each (once we've received that much)."
p6467
aS'Excellent! :+1: '
p6468
aS':+1: '
p6469
asg14
S'vqvu:blocking-iterator-backpressure'
p6470
sbsI3352
(iPull
Pull
p6471
(dp6472
g3
S"Ported the two perf tests to evaluate 2.x throughput.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9907226/67a454c8-5c8e-11e5-8644-c3196b2e58d8.png)\r\n\r\nMy primary suspect for the extra overhead are the atomics of queue-drain. The 1.x uses a synchronized-based emitter-loop which is elided by the JIT compiler but atomics can't be elided. As I mentioned before, synchronized works better for light-to-none asynchronous use whereas atomics work better for asynchronous use.\r\n\r\nAlso quote from #3157\r\n> Exceptions that do not require a :+1: would be:\r\n>\r\n>javadoc changes\r\n>unit test additions or refactoring\r\n>**perf test additions, fixes or refactoring**\r\n>grammatical and presentation fixes to README, CONTRIBUTING, and other such metadata files"
p6473
sg5
S'2.x: perf checks for flatMap and merge'
p6474
sg7
(lp6475
S'Performance'
p6476
asg10
I3352
sg11
(lp6477
sg14
S'akarnokd:MergePerf2x'
p6478
sbsI3353
(iPull
Pull
p6479
(dp6480
g3
S'Benchmarks synchronous, asynchronous (where the emission can hop onto the receiver thread) and strictly-pipelined (the emitter and receiver are on different threads). Results on i7 4790, Windows 7 x64, Java 1.8u60:\r\n\r\n```\r\nBenchmark                (times)   Mode  Cnt         Score        Error  Units\r\nRangePerf.rangeAsync           1  thrpt    5    135410,552 ?  20521,908  ops/s\r\nRangePerf.rangeAsync        1000  thrpt    5     25634,730 ?    284,526  ops/s\r\nRangePerf.rangeAsync     1000000  thrpt    5        59,073 ?      1,154  ops/s\r\nRangePerf.rangePipeline        1  thrpt    5     98895,846 ?  11398,363  ops/s\r\nRangePerf.rangePipeline     1000  thrpt    5     16233,903 ?    741,712  ops/s\r\nRangePerf.rangePipeline  1000000  thrpt    5        10,621 ?      2,606  ops/s\r\nRangePerf.rangeSync            1  thrpt    5  30367277,992 ? 170100,628  ops/s\r\nRangePerf.rangeSync         1000  thrpt    5    212293,380 ?   3605,320  ops/s\r\nRangePerf.rangeSync      1000000  thrpt    5       248,135 ?      1,775  ops/s\r\n```'
p6481
sg5
S'2.x: range perf + added missing header.'
p6482
sg7
(lp6483
S'Performance'
p6484
asg10
I3353
sg11
(lp6485
sg14
S'akarnokd:RangePerf2x'
p6486
sbsI3354
(iPull
Pull
p6487
(dp6488
g3
S"I've noticed that the `times = 1` async range sometimes produces double the throughput without any change to the underlying structure and I've figured out it is because how my operation system wakes up the await in the benchmark. I switched the tests to spin-loop and now I get a consistent and higher value than before:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9958923/0ce916fe-5e0f-11e5-988a-3e8cac1098dc.png)\r\n\r\nThere are a few light-greens and a few light-reds which I attribute to other fluctuating factors on my computer.\r\n\r\nIn addition, I've experimented with two optimizations: one for observing a scalar value on a different thread and one where the `OperatorObserveOn` is turned into a `PublisherObserveOn` to save on the allocation of a `PublisherLift`. The scalar optimization ended up being slower by 15% for some reason I don't understand and the `PublishObserveOn` had no impact on the throughput within the error range."
p6489
sg5
S'2.x: perf change wait to spin-loop for short async benchmarks'
p6490
sg7
(lp6491
S'Performance'
p6492
asg10
I3354
sg11
(lp6493
sg14
S'akarnokd:PerfAwaitFix2x'
p6494
sbsI3355
(iPull
Pull
p6495
(dp6496
g3
S"I've accidentally pushed this into 2.x (no rules violated though) but I'd like to show the run results on my machine (i7 4790, Windows 7 x64, Java 1.8u60)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9959437/5768157c-5e14-11e5-8d9f-9b3157070633.png)\r\n\r\nThe backpressure-overhead on range is quite apparent. Naturally, scalar can't do range so I only compared it agains the `just` of the others. Single has no equivalent operators for the other cases right now.\r\n\r\nThere is still room for improvement for the range-flatMap-just in NbpObservable and Single.\r\n\r\nAgain, the lower overhead of NbpObservable shows through in RangeMapRange where there is no fast-path at all and everybody has to subscribe to the inner range."
p6497
sg5
S'2.x: perf comparison of Observable, NbpObservable and Single'
p6498
sg7
(lp6499
S'Performance'
p6500
asg10
I3355
sg11
(lp6501
sg14
S'akarnokd:EachTypeFlatMapPerf2x'
p6502
sbsI3356
(iPull
Pull
p6503
(dp6504
g3
S"There were several problems with the operator:\r\n\r\n  - The first 2 requests were always `Long.MAX_VALUE` no matter what the child requested.\r\n  - There was a race-condition and memory leak when tracking the generated `Observable`s.\r\n  - Both the individual generated `Observable`s and the main concatenation could overflow the internal buffers and had to be defensively-buffered.\r\n  - If a request was responded with a generated `Observable` that delivered less than this requested amount, the child ended up hanging.\r\n  - The concatenation didn't know about the number of values it should deliver in aggregate and might have delivered more or less, causing `MissingBackpressureException` or hangs.\r\n  - Exception thrown from the `generateState` is now delivered to the child immediately.\r\n\r\nAs I see, the usage is as follows. Each individual `request()` from the child is supposed to be fulfilled by individual `Observable`s. For example, `request(1)` and `request(5)` will generate two distinct `Observable`s where the first will have 1 value and the second 5."
p6505
sg5
S'Fix to a bunch of bugs and issues with AsyncOnSubscribe'
p6506
sg7
(lp6507
S'Bug'
p6508
asg10
I3356
sg11
(lp6509
S"It seems to me that there are still outstanding questions as to the AsyncOnSubscribe usage. I am going to open a pull request with improved javadocs for the next function. This should help clear up confusion about it's usage. Also there are a couple items here that I'd like to discuss in greater depth. I am not okay with a complete rewrite (as you have provided here) but I would gladly accept contributions. Please read my comments below and reply so that we can move forward. \r\n\r\n> Exception thrown from the generateState is now delivered to the child immediately.\r\n\r\nGreat. Good improvement. I would like to see a pull request for this against the current existing code base. \r\n\r\n> There was a race-condition and memory leak when tracking the generated Observables.\r\n\r\nIs this the `HashSet<Subscription>`? I think that your usage of a `CompositeSubscription` was a good fix and necessary. Again, I think you could have made this fix to the existing code base very simply. \r\n\r\n> The first 2 requests were always Long.MAX_VALUE no matter what the child requested.\r\n\r\nWhen debugging your previous test it was clear to me that the `TestSubscriber` was not correctly using the `initialRequest` value to change the first `requested` amount in the underlying `Subscriber`. I do not think this behavior has anything to do with the AsyncOnSubscribe implementation. I commented to this effect in your issue #3341. \r\n\r\n> Both the individual generated Observables and the main concatenation could overflow the internal buffers and had to be defensively-buffered. \r\n\r\nCan you be more specific? The Buffer until subscriber uses an unbounded queue and I already commented that this was a known issue. I would accept a pull request to address this issue against the existing code base. \r\n\r\n> If a request was responded with a generated Observable that delivered less than this requested amount, the child ended up hanging.\r\n\r\nThe observables emitted to the observer should emit exactly `n`. If they emit less than `n` then the observer must be `onCompleted()` as there is no more data available. Your test does not call a terminal event on the observer so I would expect this to hang. This is the area where the documentation needs to be improved (and I will open a pull request to improve this). It makes perfect sense how you would perceive this as a bug. I am open to ideas. However that will require that you communicate with me over the designs and present alternatives. \r\n\r\n> The concatenation didn't know about the number of values it should deliver in aggregate and might have delivered more or less, causing MissingBackpressureException or hangs.\r\n\r\nI deliberately chose not to validate the quantity of onNexted events. This is like validating at every level when it will invalidate intermittently at runtime and then blow up or if you don't implement validation then a missing back pressure exception is thrown intermittently, and it blows up at runtime. Is there anything better that we can do? I vote to not validate and trust that the user of the AsyncOnSubscribe follows the contract (that we will document in detail). "
p6510
aS">  I am not okay with a complete rewrite (as you have provided here) but I would gladly accept contributions.\r\n\r\nFirst of all, this isn't a complete rewrite as I kept everything else that wasn't contributing to a bug. The API is still the same and the behavior is what looked like you'd like to achieve: client requests of n_i should be responded to with a single Observable that produces n_i values or (less + completes the main sequence).\r\n\r\n>  against the current existing code base.\r\n\r\nThe fixes apply together, not in parts.\r\n\r\n>  it was clear to me that the TestSubscriber was not correctly using the initialRequest value to change the first requested amount in the underlying Subscriber\r\n\r\nWe use this constructor in many other tests that require zero request upfront. It works there. Your code composed the various `Subscriber`s and `Producer`s in a wrong way and the default `Long.MAX_VALUE` was requested way before the end `TestSubscriber` could issue a request.\r\n\r\n> The Buffer until subscriber uses an unbounded queue and I already commented that this was a known issue. I would accept a pull request to address this issue against the existing code base.\r\n\r\n`BufferUntilSubscriber` doesn't support backpressure and thus 3 subsequent requests of any size would generate 3 sources but `concat` accepts 2 at a time. In addition, there is no way to know if the user actually returned a backpressure-supporting Observable or not. In `testSerializesConcurrentObservables` you actually over-deliver and the `concat` would fail with an `IllegalStateException`.\r\n\r\nI have a version of `BufferUntilSubscriber` in #3150 and before that in #3050 waiting for review for months now. And again, that would still leave the `AsyncOnSubscribe` buggy so why do separate PRs that would conflict with each other due to line differences? \r\n\r\n> The observables emitted to the observer should emit exactly n. If they emit less than n then the observer must be onCompleted() as there is no more data available.\r\n\r\n`testUnderdeliveryCorrection` tests for the case where the developer generated the wrong source which doesn't deliver enough values. It wasn't meant to be a finite sequence and not meant to call `onComplete`; what mattered is how it responded to `requestMore` calls.\r\n\r\n> I deliberately chose not to validate the quantity of onNexted events. This is like validating at every level when it will invalidate intermittently at runtime and then blow up or if you don't implement validation then a missing back pressure exception is thrown intermittently, and it blows up at runtime. Is there anything better that we can do? I vote to not validate and trust that the user of the `AsyncOnSubscribe` follows the contract (that we will document in detail).\r\n\r\nYou don't seem to understand how `concat` backpressure works: The client requests `n` and the `concat` operator forwards that amount to its first source. Because individual sources may deliver less than this value, `concat` has to check the number of produced elements so in case a new source is started, concat can request this remaining amount from it. This is what the `ProducerArbiter` manages.\r\n\r\nYour original code forgot to tell `concat` how many elements to expect and always run in unbounded mode regardless of the original child request value."
p6511
aS"@akarnokd I here you. Here is my concern. I have asked you directly for you feedback over the design and I have not received from you what I think is sufficient input to see that we both agree on the design or even the goals. My last impression from you regarding the `AsyncOnSubscribe` was that you simply didn't even agree with its existence and your questions seemed to indicate that you didn't understand why I implemented it. So when you commented on the pull request (after it was merged) with bugs without test code or details of how to reproduce, I was unclear about your interpretation of the design and asked you to file detailed issues with reproducible test code. \r\n\r\nAll of that said, I need confirmation that you and I are trying to achieve the same goals before I consider merging this. "
p6512
aS"1) Design \r\n\r\nIt seems much of the disagreement between you two is that the design and approach was not well discussed, and instead we have jumped to implementations without a common understanding. That discussion is dangling here: https://github.com/ReactiveX/RxJava/issues/3003 @akarnokd You need to involve yourself in that discussion where I and @stealthcode have weighed in, but not received further feedback.\r\n\r\n2) Rewriting Code\r\n\r\nIt is generally not helpful to start from scratch unless there is upfront agreement that the original should not be pursued or iterated upon. Forking in two directions dilutes the discussion, pits egos against each other, and prevents collaboration. \r\n\r\nI view this PR as a rewrite. Looking at the two side-by-side shows hardly any code left behind, and the algorithms are changed, and it's hard to tell what is actually because of issues versus just stylistic differences between them.  This in turn forces everyone to start from scratch in reading the code, understanding the issues and making decisions. If there is something fundamental about the original code that prevents correct behavior, then I suggest that be discussed up front with the original author. \r\n\r\n3) Communication & Collaboration\r\n\r\nThe underlying contention I sense between you two is shown in places such as:\r\n\r\n- https://github.com/ReactiveX/RxJava/pull/3203#issuecomment-135358972\r\n- https://github.com/ReactiveX/RxJava/issues/3341#issue-106142277\r\n\r\nPlease communicate with respect for each other. \r\n\r\nAnother example of statement that is not helpful:\r\n\r\n> You don't seem to understand how concat backpressure works:\r\n\r\n@akarnokd I could say very similar things if I wanted to about bugs you wrote into the last revision of `merge` ([1](https://github.com/ReactiveX/RxJava/pull/2928#discussion_r32747249), [2](https://github.com/ReactiveX/RxJava/issues/3156)), or the recent discussion about `Subject` in https://github.com/ReactiveX/RxJava/pull/3349. Please do not make things personal (such as in https://github.com/ReactiveX/RxJava/pull/3349#issuecomment-142037400). \r\n\r\nI too have submitted PRs with mistakes and bugs. All of us have. We do code reviews and patch releases for a reason, otherwise we should have been done this project a year ago. \r\n\r\nStick to objective statements of functionality, performance, and usage. A bug is a bug. A misunderstanding is just that. Overlooking something is easy, particularly when dealing with asynchrony, concurrency, flow control and the like. This particular `AsyncOnSubscribe` behavior is non-trivial, otherwise it wouldn't be this big of a discussion. Let's not trivialize it or attack people.\r\n\r\n4) Next Steps\r\n\r\nBoth of you (@akarnokd & @stealthcode) are great engineers, but with different strengths and weaknesses. That is a great thing for the project to have those diverse viewpoints and skills. \r\n\r\nPlease focus more on communication and less on the code for a bit. Code is honestly the easiest part of our job. In the long run, healthy collaboration is far more important that sprinting on code.\r\n"
p6513
aS'I did my part in reviewing the code and providing fixes. If you think the original version is what you wanted then its up to you and there is no point in discussing this any further. '
p6514
aS"> You don't seem to understand how concat backpressure works\r\n\r\nI misunderstood your original statement. My mistake. \r\n\r\nI reviewed the code and it looks fine :+1: "
p6515
asg14
S'akarnokd:AsyncOnSubscribeFix'
p6516
sbsI3357
(iPull
Pull
p6517
(dp6518
g3
S'Related discussion in #3017.'
p6519
sg5
S'Eager ConcatMap'
p6520
sg7
(lp6521
S'Enhancement'
p6522
aS'Feature-Request'
p6523
asg10
I3357
sg11
(lp6524
S"Thanks a lot for contributing this one @akarnokd. I've had one look through and no problems jump out at me but I will review further. This will be useful."
p6525
aS"Thanks for the review @davidmoten . Usually I use one letter variables because I find it easier to parse the code and instead of long variable names, I use newlines to separate logical blocks. This way, I don't have to type that many letters and I don't have to wait while Eclipse returns with the content assist (which is blocking by the way and may take hundreds of milliseconds, even on my i7 + SSD).\r\n\r\nI took the time and renamed variables as you asked for and added some more unit tests that check the code paths. That being said, I don't plan to do such renames in my contributions very often in the future and encourage anybody to post their PRs with their proposed cleanups/renames."
p6526
aS"Thanks for the feedback. I've updated the method names to `concatMapEager` and `concatEager`, added the `@Experimental` tags, some javadoc and a missing test for a 2-parameter `concatEager` overload."
p6527
aS'Updated with a capacity fix for the `SpscLinkedArrayQueue`.'
p6528
aS'I reviewed in details in the code and I believe it is correct.\r\n\r\nBut I wonder if subscribing to the sources in a "unbounded mode" is the right thing to do.\r\nAt the expense of complexifying the code, I believe it could be possible to split the `request(n)` between the sources. Maybe requesting `1` to all the `m` sources expect the first one, which we request `n - m + 1` ... and so on.\r\n\r\nThe devil is in the details, and I believe this would significantly complexify the code, but I would like to know what you are thinking about this?'
p6529
aS"@stevegury This operator consumes source observables in order and doesn't make sense to split any request from downstream. If the downstream requests n and the first is requested n / count, that would hang the sequence because only the first is allowed to emit and it won't emit enough to trigger a new request.\r\n\r\nIt is possible to use a bounded buffer per source so while they are not consumed, they don't grow indefinitely. However, it means that each of them can produce only `RxRingBuffer.SIZE` elements before stopping and thus the operator wouldn't be eager anymore."
p6530
aS"@akarnokd sorry I wasn't very clear but what I proposed was roughly what you described (replacing `RxRingBuffer.SIZE` by `1`).\r\n\r\nMy main concern here is the use of unbounded buffer, which, I think, could be avoided."
p6531
aS'@davidmoten What do you think about the bounded buffering and the fact that such sources would act more like a delayed source?'
p6532
aS"I'd be happy to see bounded buffering (`RxRingBuffer.SIZE` sounds a better default size than 1 to me and would be consistent with the request eagerness of other operators like `merge` for instance). Could we add an overload to allow the specification of buffer size as well?\r\n\r\nIf this is significant rework I'm content to see this unbounded version documented with its buffering characteristics merged and we can defer the bounding work to another PR."
p6533
aS'Done.'
p6534
aS'Great, thanks @akarnokd ! Lightning quick as always.'
p6535
aS'LGTM :+1: '
p6536
aS"The three of you seem happy with it so I'm merging it."
p6537
asg14
S'akarnokd:EagerConcatMap'
p6538
sbsI3358
(iPull
Pull
p6539
(dp6540
g3
S"I've added the methods from the 1.x Single plus a couple more based on Observable operators that makes sense to me in respect to Single. No plus unit tests and no javadoc."
p6541
sg5
S'2.x: Single class more operators + test from 1.x'
p6542
sg7
(lp6543
S'Enhancement'
p6544
asg10
I3358
sg11
(lp6545
sg14
S'akarnokd:SingleOperators2x'
p6546
sbsI3359
(iPull
Pull
p6547
(dp6548
g3
S'They can be renamed later as necessary. No unit tests but the regular\r\nSubject tests can be ported easily.'
p6549
sg5
S'2.x: non-backpressure Subject implementations'
p6550
sg7
(lp6551
S'Enhancement'
p6552
asg10
I3359
sg11
(lp6553
S"I'll repost this with a full PR of other Nbp changes."
p6554
asg14
S'akarnokd:NbpEnhancementP1v2x'
p6555
sbsI3360
(iPull
Pull
p6556
(dp6557
g3
S'These classes enable the porting of backpressure-aware operators for non-backpressure Observable.\r\n\r\nIt would be great if this could be merged sooner.'
p6558
sg5
S'2.x: non-backpressure Subscribers'
p6559
sg7
(lp6560
S'Enhancement'
p6561
asg10
I3360
sg11
(lp6562
S"I'll repost this with a full PR of other Nbp changes."
p6563
asg14
S'akarnokd:NbpSubscribers2x'
p6564
sbsI3361
(iPull
Pull
p6565
(dp6566
g3
S"Not very important since `onError` should be called once, but anyway it's `AtomicReference` and we need to store the value returned from `get()` locally.\r\n\r\nP.S. I don't use `Future`s, just found this piece of code."
p6567
sg5
S'Safer error handling in BlockingOperatorToFuture'
p6568
sg7
(lp6569
S'Enhancement'
p6570
asg10
I3361
sg11
(lp6571
S'It is unlikely error changed between the two calls in this operator but regardless, one should read volatile variables once. :+1: '
p6572
aS':+1: '
p6573
asg14
S'artem-zinnatullin:blocking-to-future-better-error-handling'
p6574
sbsI3362
(iPull
Pull
p6575
(dp6576
g3
S'Compiler, VM, JIT and IDE will be happier :)'
p6577
sg5
S'Fix synchronization on non-final field in BufferUntilSubscriber'
p6578
sg7
(lp6579
S'Enhancement'
p6580
asg10
I3362
sg11
(lp6581
S':+1:'
p6582
aS':+1: I was thinking to add `final` but forgot it.'
p6583
aS'Great, thanks!'
p6584
asg14
S'artem-zinnatullin:fix-synchronization-on-non-final-field-in-BufferUntilSubscriber'
p6585
sbsI3363
(iPull
Pull
p6586
(dp6587
g3
g53
sg5
S'Remove unused private method from CachedObservable and make "state" final'
p6588
sg7
(lp6589
S'Enhancement'
p6590
asg10
I3363
sg11
(lp6591
S':+1:'
p6592
aS':+1: '
p6593
asg14
S'artem-zinnatullin:little-improvements-for-CachedObservable'
p6594
sbsI3364
(iPull
Pull
p6595
(dp6596
g3
S'Looks like non-volatile `chosen` may cause concurrency problems in this operator, @akarnokd PTAL'
p6597
sg5
S'Possible multithreading bug fix in OnSubscribeAmb'
p6598
sg7
(lp6599
S'Question'
p6600
asg10
I3364
sg11
(lp6601
S"`volatile` keyword not required because of the [Observable contract](http://reactivex.io/documentation/contract.html):\r\n\r\n>Observables must issue notifications to observers serially (not in parallel). They may issue these notifications from different threads, but there must be a formal happens-before relationship between the notifications.\r\n\r\nThe guarantee of a happens-before relationship between emissions means you won't get into synchronization problems with this non-final field.\r\n"
p6602
aS'No need for volatile because `chosen` is sequence-local and is changed to true after reading a volatile in isSelected.\r\n\r\n:-1: '
p6603
aS'ok, agreed, closing :)'
p6604
asg14
S'artem-zinnatullin:possible-multithreading-bug-fix-in-OnSubscribeAmb'
p6605
sbsI3365
(iPull
Pull
p6606
(dp6607
g3
g53
sg5
S'Make field final and remove unnecessary unboxing in OnSubscribeRedo.RetryWithPredicate'
p6608
sg7
(lp6609
S'Enhancement'
p6610
asg10
I3365
sg11
(lp6611
S':+1: '
p6612
asg14
S'artem-zinnatullin:code-cleanup-in-OnSubscribeRedo.RetryWithPredicate'
p6613
sbsI3366
(iPull
Pull
p6614
(dp6615
g3
S'Nbp prefixed Observable types added. The core operators throw UnsupportedOperationException for now, overloads delegating to them did not change.'
p6616
sg5
S'2.x: Added placeholder operators to NbpObservable + special observables'
p6617
sg7
(lp6618
S'Enhancement'
p6619
asg10
I3366
sg11
(lp6620
S"I'll repost this with a full PR of other Nbp changes."
p6621
asg14
S'akarnokd:NbpObservablePlaceholders2x'
p6622
sbsI3369
(iPull
Pull
p6623
(dp6624
g3
S"Believe I'm removing some unnecessary unboxing calls, but please correct me if I'm wrong."
p6625
sg5
S'Lint fixes for unnecessary unboxing'
p6626
sg7
(lp6627
S'Enhancement'
p6628
asg10
I3369
sg11
(lp6629
S'See the comment, otherwise :+1:.'
p6630
aS'+1 for @akarnokd comment, otherwise :+1: '
p6631
aS'@akarnokd @stevegury used ternaries in-place of `Long.compareTo` for Java 6 support. Thanks!'
p6632
aS':+1: '
p6633
aS':+1:'
p6634
asg14
S'KevinTCoughlin:remove-unnecessary-unboxing'
p6635
sbsI3370
(iPull
Pull
p6636
(dp6637
g3
g53
sg5
S'Remove unused field updater from SubjectSubscriptionManager'
p6638
sg7
(lp6639
S'Enhancement'
p6640
asg10
I3370
sg11
(lp6641
S':+1:'
p6642
aS':+1: '
p6643
asg14
S'artem-zinnatullin:remove-unused-field-updater-from-SubjectSubscriptionManager'
p6644
sbsI3371
(iPull
Pull
p6645
(dp6646
g3
S'+ non-backpressured subjects.'
p6647
sg5
S'2.x: non-backpressure NbpObservable all relevant operators + tests.'
p6648
sg7
(lp6649
S'Enhancement'
p6650
asg10
I3371
sg11
(lp6651
S'Thanks. Will merge and review as part of the branch over time. '
p6652
aS"I have also code for `Single` in #3358. I've rebased it and fixed up NbpObservable with the proper method name (`onError` instead of `onFailure`)."
p6653
asg14
S'akarnokd:NbpObservableOps2x'
p6654
sbsI3372
(iPull
Pull
p6655
(dp6656
g3
S"`Observable.empty().collect(stateFactory, accumulator)` should return the result of `stateFactory.call()` but throws an exception.\r\n\r\nI've added a unit test for this and removed an irrelevant reference to a discussion on `reduce`."
p6657
sg5
S'Observable.empty().collect() should not throw an exception'
p6658
sg7
(lp6659
sg10
I3372
sg11
(lp6660
S'ah woops, did not throw, closing.'
p6661
asg14
S'davidmoten:collect-bug'
p6662
sbsI3374
(iPull
Pull
p6663
(dp6664
g3
g53
sg5
S'Optimize Exceptions.throwIfFatal()'
p6665
sg7
(lp6666
sg10
I3374
sg11
(lp6667
S"The path for `OnErrorNotImplementedException` or `OnErrorFailedException` will be slower because they are checked for being a `RuntimeException` first. If it's a `RuntimeException` and not one of those then it will be faster because checks against `Error` types will not occur. I think this contribution is probably ok but some estimate of the most commonly used paths through this code should probably be made. In my opinion the path taken by an `Error` will not in general be taken anywhere near as frequently as the path by a `RuntimeException` so the optimization should favour the `RuntimeException` path. The question remains then what `RuntimeException`s are most likely to pass through? I'm assuming `Exception`s won't be travelling by this path very often because I can't think where in our operators we might be throwing checked exceptions (someone can enlighten me of course)."
p6668
aS"Your benchmark results are within the error margin to each other so I'd not consider this as a clear-cut improvement. Throwing exceptions is so expensive that a simple `instanceof` check is overshadowed. And besides, optimizing for the exception path is questionable because you are not delivering the exceptions as part of the main business logic."
p6669
aS'I agree with @akarnokd here, the gain is not clear enough to justify the logic rewrite.'
p6670
aS'Okay, I agree with all points.\r\n\r\nChecked some amount of libraries with RxJava support. Only small amount of them use `Exceptions.throwIfFatal()` in their implementations of `OnSubscribe`, so the case of passing checked `Exception` into the `throwIfFatal()` is pretty rare.\r\n\r\nAlso, as said in comments, exceptions are not / should not frequent cases of the application lifecycle, so the performance of this method does not really matter.\r\n\r\nThanks for the comments!  \r\n'
p6671
asg14
S'artem-zinnatullin:optimize-throw-if-fatal'
p6672
sbsI3376
(iPull
Pull
p6673
(dp6674
g3
S'This benchmark compares the overhead of backpressured range, non-backpressured range, streamed range and parallel-streamed range. Run on i7 4770K, Windows 7 x64, Java 1.8u60.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10107747/75d7c094-63bd-11e5-9e6d-fd3afd50b552.png)\r\n'
p6675
sg5
S'2.x: perf comparing Observable, NbpObservable, Stream and ParallelStream'
p6676
sg7
(lp6677
S'Performance'
p6678
asg10
I3376
sg11
(lp6679
S':+1: '
p6680
asg14
S'akarnokd:RxVsStreamPerf2x'
p6681
sbsI3377
(iPull
Pull
p6682
(dp6683
g3
S"Discovered by @mgp in #3346 and using his supplied fix. I've already\r\napplied it to NbpObservable's take this Monday so all that's left was\r\nthe unit test."
p6684
sg5
S'2.x: fix take() reentrancy problem.'
p6685
sg7
(lp6686
S'Bug'
p6687
asg10
I3377
sg11
(lp6688
S"Oh I see why it's a reentrancy problem, this is tricky indeed.\r\n\r\n:+1: "
p6689
asg14
S'akarnokd:TakeReentrancyFix2x'
p6690
sbsI3380
(iPull
Pull
p6691
(dp6692
g3
S'A terminal condition is now clearing the latest array which should help release its contents earlier in case a reference is kept to the class.'
p6693
sg5
S'2.x: CombineLatest removed leftover debug field + better cleanup'
p6694
sg7
(lp6695
S'Bug'
p6696
asg10
I3380
sg11
(lp6697
S'LGTM'
p6698
asg14
S'akarnokd:CombineLatestCleanup2x'
p6699
sbsI3381
(iPull
Pull
p6700
(dp6701
g3
S'Discovered while the test `NbpOperatorConcatTest.testIssue2890NoStackoverflow` hung on Travis.\r\n\r\nWhat happened is that the reference to the child became visible before the call to its `onSubscribe` method so a concurrent source emitting at the exact same time could already see the "unstarted" child. The PR fixes this in both `NbpUnicastSubject` and `UnicastSubject` by changing the order of calls. The rest of the subjects behave correctly (call `onSubscribe` first, make child visible second).\r\n\r\nIn addition, `UnicastSubject` now calls `drain()` because when the `onSubscribe` calls `request` and `drain`, the child is not visible and nothing gets replayed. Once both `onSubscribe` call returns and the child is becomes visible, a call to `drain` again will now correctly replay all available contents that were requested.'
p6702
sg5
S'2.x: UnicastSubject fix for the child becoming visible before onSubscribe is called.'
p6703
sg7
(lp6704
S'Bug'
p6705
asg10
I3381
sg11
(lp6706
S'Closing, will be included in the complete backport PR.'
p6707
asg14
S'akarnokd:UnicastSubjectFix2x'
p6708
sbsI3382
(iPull
Pull
p6709
(dp6710
g3
S'Discovered while debugging #3381. Confirmed with JCTools in https://github.com/JCTools/JCTools/pull/80'
p6711
sg5
S'2.x: fix SpscLinkedArrayQueue leaves 1 slot null just before growing'
p6712
sg7
(lp6713
S'Bug'
p6714
asg10
I3382
sg11
(lp6715
S':+1: '
p6716
asg14
S'akarnokd:SpscLinkedArrayQueueCapacityUse2x'
p6717
sbsI3383
(iPull
Pull
p6718
(dp6719
g3
S'sigificent -> significant\r\nalreay -> already'
p6720
sg5
S'Fix typo in a comment inside Observable.subscribe'
p6721
sg7
(lp6722
sg10
I3383
sg11
(lp6723
S':+1:'
p6724
asg14
S'ReactiveX:stevegury/fix-comment-typo'
p6725
sbsI3384
(iPull
Pull
p6726
(dp6727
g3
S"Fixes the bug reported in  #3346. (I've done this for 1.x as well since the original poster disappeared). "
p6728
sg5
S'Fix for take() reentrancy bug.'
p6729
sg7
(lp6730
S'Bug'
p6731
asg10
I3384
sg11
(lp6732
S':+1: '
p6733
asg14
S'akarnokd:TakeReentrancyFix1x'
p6734
sbsI3386
(iPull
Pull
p6735
(dp6736
g3
S'This is one of the many 1.1.0 promotion related pull requests. There is a split decision on the operator `Observable.doOnRequest(Action1)`. A majority of core committers have voted to promote this operator from `@Beta` to public. There is currently a minority is support for removing the convenience method on `Observable` or demoting it to `@Experimental`. Instead users would lift the underlying operator `obs.lift(new OperatorDoOnRequest<T>(onRequest))`. In this pull request I have taken the more conservative approach and expect that comments will guide our decisions. \r\n\r\n### Rationale:\r\n\r\n - the `doOnRequest` use case is to debug back-pressure use cases and as such should not pollute the public operator namespace. \r\n - the existence of this operator may mislead and confuse users. it could be misinterpreted and abused to alter or reset over arching state when the back-pressure mechanics should be more or less self contained (with the exception of `AsyncOnSubscribe`).\r\n\r\nIf my understanding is incorrect and there is a valid use case aside from debugging then please comment. '
p6737
sg5
S'1.1.0 - Changed javadoc for Observable.doOnRequest(Action1)'
p6738
sg7
(lp6739
S'Discussion'
p6740
asg10
I3386
sg11
(lp6741
S'Can we put something like "Operator was created for testing/debugging RxJava itself, using it in the production code is not very great idea" in the javadoc of this operator?'
p6742
aS"@davidmoten could this be solved by lifting in the operator? I don't think that we should polute theObservable instance methods for a convenience operator that's intended to be used by unit tests. "
p6743
aS"This is a useful operator to diagnose operator request behavior and should be part of the public API in my opinion. Similar to how `TestScheduler` and `TestSubscriber` isn't useful in production but very useful when testing code. Pointing the customers to the internal `OperatorDoOnRequest` class for manual lifting isn't a good alternative because of forcing the customers to rely on internal behavior. "
p6744
aS"I'd recommend against having public API exposing an `Operator` but would use a `Transformer` instead. I see moving this out of the `Observable` class as an unnecessary inconvenience. I haven't come across anyone doing weird stuff using `doOnRequest`. Have you @stealthcode? Can we address this with clearer documentation on the operator? "
p6745
aS"> Pointing the customers to the internal OperatorDoOnRequest class for manual lifting isn't a good alternative because of forcing the customers to rely on internal behavior.\r\n\r\nThe point is that `request(n)` should remain an internal only affair and if you need to know about requests that you'll probably also need to know how to lift in operators."
p6746
aS"@davidmoten I don't see how `o.lift(new OperatorDoOnRequest(System.out::println))` is different than `o.compose(new TransformerDoOnRequest(System.out::println))`."
p6747
aS'This operator is a great tool for diagnosing errors in custom operators, which we support through lift and Operator classes.'
p6748
aS"@abersnaze Yeah I should have elaborated. Either could be used.\r\n\r\nIn general I was thinking of utility from #2865 which doesn't exist in RxJava but could.  I can contribute. Until this utility exists I wouldn't suggest anyone outside of RxJava builds a public API exposing custom Operators because they will have trouble migrating safely if they decide to chuck their custom Operator and switch to composing existing Operators (I had this issue with rxjava-jdbc). This advice really doesn't apply for core RxJava because as soon as the need exists someone with the right skills would create it with oversight. So yeah ignore that comment of mine, it's irrelevant to this discussion!"
p6749
aS"@akarnokd We agree that it's useful and we are not proposing to remove the `OperatorDoOnRequest`. But its existence as an instance method on `Observable` is questionable. It is very useful for RxJava developers but confusing for application developers. Do you agree with this?"
p6750
aS"I personally never heard anybody getting confused by `doOnRequest` so I can't agree or disagree with your statement."
p6751
aS'So, what is your objection?'
p6752
aS'My objection is that by demoting this to experimental, we are essentially scheduling it for deletion, despite all of its usefulness.'
p6753
aS"It is not less useful as an operator that can be lifted. It's only use case is for developers who know how to lift operators. "
p6754
aS"I'd like to understand the source of any confusion with this method. Could you invite someone who is/was confused into this discussion?"
p6755
aS">It is not less useful as an operator that can be lifted. It's only use case is for developers who know how to lift operators.\r\n\r\nThat's all very well but we lose discoverability. For anyone discovering the api no matter how advanced their abilities and intent I think it's a bad idea to have this only as an Operator to be lifted that only we know about and some corner bit of documentation describes."
p6756
aS'I prefer keeping it and like using it. I use it for debugging but also triggering side-effects onRequest, rather than onSubscribe. '
p6757
aS"Thanks @benjchristensen that's the first non-test/debug use case mentioned thus far. \r\n\r\nWe currently have 2 for and 2 against (core committer votes). "
p6758
aS"I don't have a strong opinion here; I think both points of view are valid.\r\n`doOnRequest` can be confusing for a new user and it can be interpreted as `doOnNext` by beginners. And in general, the more methods you add to a class, the harder it is to understand it.\r\nOn the other hand, having the possibility to hook easily (by just auto-completing `obs.doOnRequest(...`) a function in the request-n path is pretty handy.\r\n\r\nSo the question here is: Do we want to make the library marginally more grokkable at the expense of the power-users?\r\n\r\nMaybe the right thing to do would be to leave it as `@beta`?"
p6759
aS'What do you think of adding the following to the javadocs of the `Observable.doOnRequest(Action1)` something to the effect of...\r\n\r\n```\r\nThis operator is for tracing the internal operator back-pressure request patterns \r\nand generally intended for debugging. \r\n```\r\n\r\nThis would give users some clarity and scare off all but the intrepid and curious. '
p6760
aS"I'm okay with adding that kind of Javadoc. "
p6761
aS'Javadoc additions sound fine to me too.'
p6762
aS'@stealthcode that would be a good compromise.'
p6763
aS'To be clear, I am proposing that the only change to this operator (in 1.1.0) is only a javadoc change and we keep the annotation as is at `@Beta`. '
p6764
aS'Looks like we have a consensus merging this one and closing #3405'
p6765
asg14
S'stealthcode:demote-do-on-request'
p6766
sbsI3388
(iPull
Pull
p6767
(dp6768
g3
S'Based on votes, this PR removes the common Subject state peeking methods from Subject and removes irrelevant methods from each Subject variant and promotes the rest to `@Beta` state.\r\n\r\nDue to the removals, I had to rearrange tests as well.'
p6769
sg5
S'1.1.0: Subject state methods beta/remove'
p6770
sg7
(lp6771
S'Discussion'
p6772
asg10
I3388
sg11
(lp6773
S"For the methods removed can you open a PR that marks them as deprecated? We can merge immediately for 1.0.15. It'll give anyone using them one release to migrate off of them."
p6774
aS'Done: #3407.\r\n\r\nNote, however, that it is very likely this PR will need rebasing when #3407 is merged.'
p6775
aS"I've rebased this onto the master but the versions are so tangled I don't know how to squash this into a single commit."
p6776
aS"I'm using Eclipse which has a few git bugs in it right now. I'd better leave this to @abersnaze as he seems to be proficient in squashing PRs."
p6777
aS"I've rebased this in a branch https://github.com/stealthcode/RxJava/tree/SubjectPeekRemoves\r\n\r\n@abersnaze and I would like to collapse down all of the 1.1.0 pull requests into a single commit and a single pull request. Any objections? I'll start on the rebasing."
p6778
aS'@stealthcode Great. :+1:'
p6779
asg14
S'akarnokd:SubjectPeekRemoves'
p6780
sbsI3389
(iPull
Pull
p6781
(dp6782
g3
S'Based on votes, the `AbstractOnSubscribe` is to be removed.'
p6783
sg5
S'1.1.0: removal of AbstractOnSubscribe'
p6784
sg7
(lp6785
S'Discussion'
p6786
asg10
I3389
sg11
(lp6787
S"Hi, do you have a link to the vote / discussion about this ? I actually didn't see it was experimental and have some code based on it i'd like to adapt."
p6788
aS"The `SyncOnSubscribe` replaced the `AbstractOnSubscribe`. Regarding it's usage, it is similar to it's predecessor with slight differences. There are overloads for creating a stateless, a mutable state, and an immutable/functional style onSubscribe (depending on your use case). Please let us know if the existing javadocs aren't sufficient or could be improved. "
p6789
asg14
S'akarnokd:AbstractOnSubscribeRemove'
p6790
sbsI3390
(iPull
Pull
p6791
(dp6792
g3
S'It was easy to get `onBackpressureBlock` usage wrong with `subscribeOn`.'
p6793
sg5
S'1.1.0: onBackpressureBlock remove'
p6794
sg7
(lp6795
S'Discussion'
p6796
asg10
I3390
sg11
(lp6797
sg14
S'akarnokd:OnBackpressureBlockRemove'
p6798
sbsI3391
(iPull
Pull
p6799
(dp6800
g3
S'Based on votes, `autoConnect` can step up one level.'
p6801
sg5
S'1.1.0: promote ConnectableObservable.autoConnect to beta'
p6802
sg7
(lp6803
S'Discussion'
p6804
asg10
I3391
sg11
(lp6805
sg14
S'akarnokd:AutoConnectPromote'
p6806
sbsI3392
(iPull
Pull
p6807
(dp6808
g3
S'Based on votes, the predicate version of `takeUntil` should be promoted to be public.'
p6809
sg5
S'1.1.0: takeUntil with predicate promote to public'
p6810
sg7
(lp6811
S'Discussion'
p6812
asg10
I3392
sg11
(lp6813
sg14
S'akarnokd:TakeUntilPredicatePromote'
p6814
sbsI3393
(iPull
Pull
p6815
(dp6816
g3
S"Based on votes, the experimental TestSubscriber methods can now be part\r\nof the public API.\r\n\r\nIn addition, I've added the missing javadocs for the create() factory\r\nmethods and one of the constructors."
p6817
sg5
S'1.1.0: promote TestSubscriber methods to public'
p6818
sg7
(lp6819
S'Discussion'
p6820
asg10
I3393
sg11
(lp6821
sg14
S'akarnokd:TestSubscriberPromote'
p6822
sbsI3394
(iPull
Pull
p6823
(dp6824
g3
S'Based on votes, 2 maxConcurrency overload of merge can now be part of\r\nthe public API.'
p6825
sg5
S'1.1.0: Promote 2 merge overloads to public'
p6826
sg7
(lp6827
S'Discussion'
p6828
asg10
I3394
sg11
(lp6829
sg14
S'akarnokd:MergeFlatMapPromotion'
p6830
sbsI3395
(iPull
Pull
p6831
(dp6832
g3
S'Based on votes, the onBackpressureBuffer overloads of capacity and\r\ncapacity + overflow action can now be part of the public API.'
p6833
sg5
S'1.1.0: onBackpressureBuffer overloads promotion to public API'
p6834
sg7
(lp6835
S'Discussion'
p6836
asg10
I3395
sg11
(lp6837
sg14
S'akarnokd:OnBackpressureBufferPromote'
p6838
sbsI3396
(iPull
Pull
p6839
(dp6840
g3
S'Based on unanimous votes, the callback version of onBackpressureDrop can\r\nnow be part of the public API.'
p6841
sg5
S'1.1.0: onBackpressureDrop with action promotion to public API'
p6842
sg7
(lp6843
S'Discussion'
p6844
asg10
I3396
sg11
(lp6845
sg14
S'akarnokd:OnBackpressureDropPromote'
p6846
sbsI3397
(iPull
Pull
p6847
(dp6848
g3
S'Based on votes, onBackpressureLatest can become part of the public API.'
p6849
sg5
S'1.1.0: onBackpressureLatest promotion to public API'
p6850
sg7
(lp6851
S'Discussion'
p6852
asg10
I3397
sg11
(lp6853
sg14
S'akarnokd:OnBackpressureLatestPromotion'
p6854
sbsI3398
(iPull
Pull
p6855
(dp6856
g3
S"Based on votes, the BackpressureDrainManager class can drop the\r\nexperimental tag, but since it is an internal class, this change doesn't\r\naffect the public API. Not sure why I marked the class as experimental\r\nback then."
p6857
sg5
S'1.1.0: BackpressureDrainManager promotion to public internal API?!'
p6858
sg7
(lp6859
S'Discussion'
p6860
asg10
I3398
sg11
(lp6861
sg14
S'akarnokd:BackpressureDrainManagerPromote'
p6862
sbsI3399
(iPull
Pull
p6863
(dp6864
g3
S'Based on unanimous votes, the switchIfEmpty overload with Observable can\r\nnow be part of the public API.'
p6865
sg5
S'1.1.0: promote switchIfEmpty with Observable to the public API'
p6866
sg7
(lp6867
S'Discussion'
p6868
asg10
I3399
sg11
(lp6869
sg14
S'akarnokd:SwitchIfEmptyPromote'
p6870
sbsI3400
(iPull
Pull
p6871
(dp6872
g3
S'Based on votes, the method Exceptions.throwIfAny can now be part of the\r\npublic API.'
p6873
sg5
S'1.1.0: Exceptions.throwIfAny promotion to public API'
p6874
sg7
(lp6875
S'Discussion'
p6876
asg10
I3400
sg11
(lp6877
sg14
S'akarnokd:ExceptionsThrowIfAnyPromotion'
p6878
sbsI3401
(iPull
Pull
p6879
(dp6880
g3
S'Based on votes, Single, SingleSubscriber and Observable.toSingle can now\r\nbe promoted to Beta state.'
p6881
sg5
S'1.1.0: promote Single + SingleSubscriber to Beta'
p6882
sg7
(lp6883
S'Discussion'
p6884
asg10
I3401
sg11
(lp6885
S"I've been a really big fan of Single in our codebase. It helps document the API, reason about our code base, and helps us eliminate cases where people don't properly plan for multiple items when terminating streams.\r\n\r\nTo date we've not hit any corner cases that I am aware of, but we've not been using it too heavily yet.\r\n\r\n+1"
p6886
aS'I love Single it makes the API very understandable.'
p6887
aS'will be so natural in Retrofit 2.0\r\nbut also starting to use it in our codebase as well'
p6888
aS"I'm using it since the first public `@Experimental` release and it makes Interfaces more understandable. My current `Observable`/`Single` ratio is 30/70\r\n\r\nI hope all operators known from Observable will be promoted to public for Single such as `defer` and `lift`. Doing the following workaround seems unnecessary:\r\n\r\n```java\r\npublic Single doSomething() {\r\n    return Single.just(..)\r\n        .map(..)\r\n        .toObservable() // to Observable because defer is private for Single\r\n        .defer(...)\r\n        .toSingle(); // back to Single because API says so\r\n}\r\n```"
p6889
aS"@passsy I am planning to use `Single` in production for the same reason of clearer contract of the API (though I [see some cons in this too](https://www.reddit.com/r/androiddev/comments/3nws5l/do_you_use_rxsingle/)), so I'll try to bring most useful operators (`defer` in the list) to the `Single` during this week, and I hope Rx team will merge and release them as part of 1.0.15."
p6890
asg14
S'akarnokd:SinglePromote'
p6891
sbsI3402
(iPull
Pull
p6892
(dp6893
g3
S'Based on votes, RxJavaErrorHandler.render and\r\nRxJavaErrorHandler.handleOnNextValueRendering can now be promoted to\r\nBeta state.'
p6894
sg5
S'1.1.0: Promote 2 RxJavaErrorHandler methods to Beta'
p6895
sg7
(lp6896
S'Discussion'
p6897
asg10
I3402
sg11
(lp6898
S'The test in `BackpressureTests.testMergeAsync` failed. The test is non-deterministic because a small hiccup in one of the threads may produce way more values than the assertion expects.'
p6899
asg14
S'akarnokd:ErrorHandlerPromote'
p6900
sbsI3403
(iPull
Pull
p6901
(dp6902
g3
S'Based on votes, Subscribers.wrap can now be part of the public API.'
p6903
sg5
S'1.1.0: promote Subscribers.wrap to be part of the public API'
p6904
sg7
(lp6905
S'Discussion'
p6906
asg10
I3403
sg11
(lp6907
sg14
S'akarnokd:SubscribersWrapPromote'
p6908
sbsI3404
(iPull
Pull
p6909
(dp6910
g3
S'Based on unanimous votes, Subscriptions.unsubscribed can now be part of\r\nthe public API.'
p6911
sg5
S'1.1.0: promote Subscriptions.unsubscribed to be part of the public API'
p6912
sg7
(lp6913
S'Discussion'
p6914
asg10
I3404
sg11
(lp6915
sg14
S'akarnokd:SubscriptionsUnsubscribedPromote'
p6916
sbsI3405
(iPull
Pull
p6917
(dp6918
g3
S'Based on the majority of votes, doOnRequest can now be part of the\r\npublic API.'
p6919
sg5
S'1.1.0: promote doOnRequest to be part of the public API'
p6920
sg7
(lp6921
S'Discussion'
p6922
asg10
I3405
sg11
(lp6923
S'This issue is also being discussed in #3386.'
p6924
asg14
S'akarnokd:DoOnRequestPromote'
p6925
sbsI3407
(iPull
Pull
p6926
(dp6927
g3
S'This should give users one release to prepare for the class structure\r\nchanges.'
p6928
sg5
S'1.0.15. Beta/Deprecation of Subject state peeking methods.'
p6929
sg7
(lp6930
S'Discussion'
p6931
asg10
I3407
sg11
(lp6932
S'replaced by #3415'
p6933
asg14
S'akarnokd:SubjectDeprecation'
p6934
sbsI3408
(iPull
Pull
p6935
(dp6936
g3
S"This came up in a [Stackoverflow](http://stackoverflow.com/questions/32889008/do-operators-instead-of-a-whole-subscriber) answer. If the `doOnError`'s callback or the `doOnEach`'s `onError` method throws, any non-fatal exception replaced the original error which got lost. This PR will wrap them both into a `CompositeException`.\r\n\r\n2.x note: since Java 8 supports `addSuppressed` all callbacks in this situation either attach to the original exception or the original exception is attached to the callback's exception."
p6937
sg5
S'DoOnEach: report both original exception and callback exception.'
p6938
sg7
(lp6939
S'Bug'
p6940
asg10
I3408
sg11
(lp6941
S':+1: '
p6942
aS'Is there a way to avoid this wrapping?\r\nI want to throw a specific exception in my `doOnError`, which then gets handled in a certain way.'
p6943
aS'No, but you can unwrap via onErrorResumeNext:\r\n\r\n```java\r\nsource.doOnError(e -> { throw new RuntimeException(); })\r\n.onErrorResumeNext(e -> {\r\n    if (e instanceof CompositeException) {\r\n       return Observable.error(((CompositeException)e).getExceptions().get(1));\r\n    }\r\n    return Observable.error(e);\r\n});\r\n```'
p6944
aS'@akarnokd -- ah, thanks!'
p6945
asg14
S'akarnokd:DoOnErrorReportBoth'
p6946
sbsI3410
(iPull
Pull
p6947
(dp6948
g3
S"This PR adds over 900 new null checks. Null checks are essential because RS doesn't allow null values and sometimes a missed null check may lead to operator hangs as well."
p6949
sg5
S'2.x: null safety checks and fixes'
p6950
sg7
(lp6951
S'Bug'
p6952
aS'Test'
p6953
asg10
I3410
sg11
(lp6954
S':+1: this will also give much nicer stack traces!\r\n\r\nHave you considered making them even nicer by using the [overload with a String](http://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-java.lang.String-)? E.g. in `fromFuture`:\r\n\r\n```java\r\n        Objects.requireNonNull(future, "future");\r\n        Objects.requireNonNull(unit, "unit");\r\n```'
p6955
aS'Sounds good. Would you like to post a PR based on this PR?'
p6956
aS'Sure, here you go: https://github.com/akarnokd/RxJava/pull/3'
p6957
aS'Thanks @robinst. Merged in and squashed commits.'
p6958
aS'Closing, will be included in the complete backport PR.'
p6959
asg14
S'akarnokd:NullSafetyChecks2x'
p6960
sbsI3413
(iPull
Pull
p6961
(dp6962
g3
S'The subject tries to avoid the request reduction via addAndGet by re-reading the requested amount and continuing the loop as long as possible. The bug was in ignoring the total emission amount and thus a single request(1) from the child ended up replaying all values.'
p6963
sg5
S'2.x: fix to ReplaySubject not properly accounting for emitted events.'
p6964
sg7
(lp6965
S'Bug'
p6966
asg10
I3413
sg11
(lp6967
S'Closing, will be included in the complete backport PR.'
p6968
asg14
S'akarnokd:ReplaySubjectBackpressureFix'
p6969
sbsI3414
(iPull
Pull
p6970
(dp6971
g3
S'Discovered while reviewing the operator for my blog post.'
p6972
sg5
S'2.x: fix operator Amb eager cancellation and request validation'
p6973
sg7
(lp6974
S'Bug'
p6975
asg10
I3414
sg11
(lp6976
S'Closing, will be included in the complete backport PR.'
p6977
asg14
S'akarnokd:AmbWinnerCancelsOthers2x'
p6978
sbsI3415
(iPull
Pull
p6979
(dp6980
g3
S'Squashed commits:\r\n[c6e43fc] 1.0.15. Beta/Deprecation of Subject state peeking methods.\r\n\r\nThis should give users one release to prepare for the class structure\r\nchanges.'
p6981
sg5
S'Deprecate the Experimental/Beta method that will be deleted until 1.1.x'
p6982
sg7
(lp6983
sg10
I3415
sg11
(lp6984
S':+1: '
p6985
aS'to replace #3407'
p6986
asg14
S'abersnaze:SubjectDeprecation'
p6987
sbsI3416
(iPull
Pull
p6988
(dp6989
g3
S'Closes #3252.'
p6990
sg5
S'Add Single.toBlocking()'
p6991
sg7
(lp6992
S'Enhancement'
p6993
asg10
I3416
sg11
(lp6994
S"Damn, just saw in the issue that @hyleung already implemented it in #3286.\r\n\r\nFeel free to close this PR. Though in my impl I've moved common code from `BlockingObservable` and `BlockingSingle` into `UtilityFunctions` and covered it with tests. Also, I've used `value()` instead of `get()`, `value()` looks more consistent with the `next()`, `first()`, etc in the `BlockingObservable`.\r\n\r\nI don't mind if @hyleung will reuse my code in his PR :)"
p6995
aS'> Damn, just saw in the issue that @hyleung already implemented it in #3286.\r\nYep.\r\n\r\n> Feel free to close this PR.\r\n\r\nThis looks cleaner although misses a `toFuture` method.'
p6996
aS'@hyleung could you review this PR and offer a resolution to the conflict between these two PRs.'
p6997
aS'@hyleung you want me to finish this PR or you would like to improve your PR? :) I am okay with any option.'
p6998
aS"@artem-zinnatullin I'm happy to finish it off on my PR, unless folks feel that it's better to continue with this PR."
p6999
aS'@hyleung sure! Be ready for my comments on your PR then! :smile:'
p7000
asg14
S'artem-zinnatullin:single-to-blocking'
p7001
sbsI3417
(iPull
Pull
p7002
(dp7003
g3
S'Closes #3385.'
p7004
sg5
S'Add Single.doOnSuccess()'
p7005
sg7
(lp7006
S'Enhancement'
p7007
asg10
I3417
sg11
(lp7008
S':+1:'
p7009
aS'@artem-zinnatullin rebase please.'
p7010
aS'@abersnaze rebased!'
p7011
asg14
S'artem-zinnatullin:single-do-on-success'
p7012
sbsI3418
(iPull
Pull
p7013
(dp7014
g3
g53
sg5
S'Add Single.fromCallable()'
p7015
sg7
(lp7016
S'Enhancement'
p7017
asg10
I3418
sg11
(lp7018
S":+1: I'm not too keen on reusing but the most complicated operators for `Single`."
p7019
aS'@artem-zinnatullin rebase please.'
p7020
aS"@abersnaze rebased, I'll rebase one PR at a time, since they're all conflict with each other."
p7021
asg14
S'artem-zinnatullin:single-from-callable'
p7022
sbsI3419
(iPull
Pull
p7023
(dp7024
g3
g53
sg5
S'Add Single.doOnError()'
p7025
sg7
(lp7026
S'Enhancement'
p7027
asg10
I3419
sg11
(lp7028
S':+1:'
p7029
aS':+1: '
p7030
asg14
S'artem-zinnatullin:single-do-on-error'
p7031
sbsI3422
(iPull
Pull
p7032
(dp7033
g3
S'Slight change to make the distinction between `@Beta` and `@Experimental` explicit and meaningful.'
p7034
sg5
S'Update README.md'
p7035
sg7
(lp7036
S'Documentation'
p7037
asg10
I3422
sg11
(lp7038
S':+1:'
p7039
aS':+1: '
p7040
asg14
S'ReactiveX:annotation-rules'
p7041
sbsI3423
(iPull
Pull
p7042
(dp7043
g3
g53
sg5
S'Renaming Observable#x to Observable#extend'
p7044
sg7
(lp7045
sg10
I3423
sg11
(lp7046
S':+1: '
p7047
aS"Correct me if I'm wrong but the merge policy requires two non-author likes, right?"
p7048
aS"I thought it was two committers and if the auth was a committer that opening the PR was an implicit vote.  I'll post some by laws so we can all agree on what the rules are."
p7049
aS'That was my understanding as well. I thought it was the releases that required more votes. '
p7050
aS'Oh, I see. Checking my PRs again...'
p7051
asg14
S'stealthcode:rename-extend'
p7052
sbsI3424
(iPull
Pull
p7053
(dp7054
g3
g53
sg5
S'Added Runnable interface to BlockingObservable'
p7055
sg7
(lp7056
sg10
I3424
sg11
(lp7057
S'Why did you add that interface? The `run()` method was never intended to represent a Runnable BlockingObservable.'
p7058
aS'But I thought you added `run()` for discoverability. I felt that this PR was just the logical conclusion to adding that method. Can we pick between both or neither before we release 1.0.15?'
p7059
aS"If you have a `Runnable` class, that implies to the developer it has to be submitted to an `ExecutorService`. This isn't the case with `BlockingObservable` because it is meant to block in the current thread, mostly because of the side effects. Submitting it to an `Executor` and awaiting the future is pointless. You want the `BlockingObservable` *to run to completion* so you'll find the method `run()`."
p7060
aS'I believe having the `run()` method implies that `BlockingObservable` should be submittable to an `ExecutorService`.  The implementing of `Runnable` only makes it possible do to so in Java.\r\n[If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.](https://en.wikipedia.org/wiki/Duck_test)'
p7061
aS'In that case, the run() method should be removed.'
p7062
aS"I could see that users may wish to submit a blocking observable to an ExecutorService simply because the interface they have available takes a Runnable. I do not think it's pointless. But I would prefer for users to deliberately create a Runnable wrapper for executing subscribe and we delete the erroneous run method. "
p7063
aS"Both keeping it and removing it is fine with me. If this PR is to stay, I'd suggest adding `@Override` to runnable as well."
p7064
aS"I'm closing this PR. For 1.0.15 I'd rather delete it and avoid making a decision about how Runnable would interact with `BlockingObservable`"
p7065
asg14
S'stealthcode:blocking-runnable'
p7066
sbsI3426
(iPull
Pull
p7067
(dp7068
g3
S'The problem with GroupBy is that a request(1) from the main source may\r\nresult in a new group, a value for another group or value for the\r\nintended group. The latter two is handled by unicasting but the former\r\nwas not properly handled.'
p7069
sg5
S'2.x: fix GroupBy MissingBackpressureException due to main/group overflow'
p7070
sg7
(lp7071
S'Bug'
p7072
asg10
I3426
sg11
(lp7073
S"I've  changed the code a bit to handle another request pattern besides the fix for #3425 ."
p7074
aS"I've also fixed the subscriber of the group becoming visible before the Subscription is set (similar bug as in #3381)."
p7075
aS'Closing, will be included in the complete backport PR.'
p7076
asg14
S'akarnokd:GroupByOverrequestFix'
p7077
sbsI3428
(iPull
Pull
p7078
(dp7079
g3
S'This is a backport of the 2.x GroupBy operator which solves #3425.\r\n\r\nOne unit test in OperatorRetryTest had to be altered a bit. I believe\r\nthe original code relied on a GroupBy behavior which caused the bug in\r\n#3425.'
p7080
sg5
S'GroupBy backpressure fix'
p7081
sg7
(lp7082
S'Bug'
p7083
asg10
I3428
sg11
(lp7084
S'The following test starts breaking with this branch. It prints out 1 to 128 then stops and does not print anything else (apparently no progress is made). In branch 1.x this continues to print past 128. \r\n\r\n```java\r\nrange(1, RxRingBuffer.SIZE *4).repeat()\r\n    .groupBy((d) -> d)\r\n    .flatMap((go) ->\r\n        go.doOnNext(System.out::println)\r\n            .subscribeOn(Schedulers.io())\r\n    )\r\n    .subscribe();\r\n```\r\n'
p7085
aS'This is because the lack of horizontal unboundedness of flatMap and the bug in groupBy together made it work in 1.0.14. If I run this code with the 2.x fix and add 1024 as the max concurrency value, it prints lots of values indefinitely.'
p7086
aS"I've updated the comments."
p7087
aS':+1: '
p7088
asg14
S'akarnokd:GroupByBackpressureFix1x'
p7089
sbsI3429
(iPull
Pull
p7090
(dp7091
g3
g53
sg5
S'Removed the alias BlockingObservable#run'
p7092
sg7
(lp7093
sg10
I3429
sg11
(lp7094
S'You forgot to alter the tests depending on `run()`.'
p7095
aS':+1:'
p7096
aS'Thank you'
p7097
asg14
S'stealthcode:blocking-subscribe'
p7098
sbsI3430
(iPull
Pull
p7099
(dp7100
g3
S'As discussed in issue #3037, the primary use of these operators is to be applied to `Observable<Void>` so that they can be merged and concatenated with an Observable of a different type.\r\n\r\nBoth these operators raise an error if the source Observable emits any item.'
p7101
sg5
S'New operators: `concatEmptyWith` and `mergeEmptyWith`'
p7102
sg7
(lp7103
S'Enhancement'
p7104
asg10
I3430
sg11
(lp7105
S'This is a replacement for #3060 '
p7106
aS':+1:'
p7107
aS"I've been thinking about these operators and it feels odd they have to throw if the source is not empty. Regardless, do you think if it is possible to factor out this error behavior into a separate operator, let's say `none` and use `source.none().concatWith(other)` and `source.none().mergeWith(other)` instead? This would match the pattern with `single()` which throws if there are too few or too many elements in the source."
p7108
aS'The idea for these operators is to combine two streams of different types (`Void` and `T`). Since, you can not really combine two different types, it is categorized as an error, if it does so. Why do you think this is odd?\r\n\r\nWould `.none()` change the type of the stream? i.e. would it be like:\r\n\r\n```java\r\npublic <R> Observable<R> none();\r\n```'
p7109
aS"It could, although that might not help due to problems with Java type inference in various Java versions (and IDEs); I got surprised a few times. Certainly, I like the inlined nature of this PR so no pressure on `none`. There is also the proposed `Completable` which doesn't allow emitting any value and supports `endWith(Observable)` as a means of continuation. What do you think?"
p7110
aS'`Completable` is what I was intending in a contrived way via `VoidObservable` in the [initial issue](https://github.com/ReactiveX/RxJava/issues/3037) which led to this PR. The existence of `Completable` will make these operators redundant and I think that is a better abstraction for this usecase.'
p7111
aS'Great. (If you wish, you can try `Completable` without juggling with its PR.)'
p7112
aS'Could we also close this PR if we add `none()` and change `ignoreElements()` to return `<R> Observable<R>`?'
p7113
aS"That might not be binary compatible. I've checked it and changing the type parameter creates a compilation error in `OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure`, which means there could be type-expectancies out there that are require the same type as the source."
p7114
aS'I add :+1: to @akarnokd solution ``source.none().concatWith(other)``/``source.none().mergeWith(other)`` but changing concatWith/mergeWith by then/flat which force cast the ignoreElement (which is safe) to the other type (see https://github.com/ReactiveX/RxJava/issues/3037#issuecomment-148822728, sorry for commenting on the other thread, but is where @NiteshKant describes its originar problem).'
p7115
aS'Closing this PR in favor of converting an `Observable` to a `Completable`\r\n\r\n```java\r\nobs.doOnNext(this::blowUp).toCompletable().endsWith(nextObservable);\r\n```\r\n\r\nNote that the operator names in Completable are subject to change as it has not yet been released. See #3570. \r\n\r\nIf you think this case is not handled then feel free to re-open. '
p7116
asg14
S'NiteshKant:ConcatMergeEmpty'
p7117
sbsI3433
(iPull
Pull
p7118
(dp7119
g3
g53
sg5
S'Add Single.defer()'
p7120
sg7
(lp7121
S'Enhancement'
p7122
asg10
I3433
sg11
(lp7123
S'Please add unit test for callback returning null cases.'
p7124
aS"@akarnokd added `deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull` and `deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull`.\r\n\r\nBtw, I've used `Callable` instead of `Func0` to save users from dealing with checked exception, hope it's okay :)"
p7125
aS'Func0 extends Callable so its okay.\r\n\r\n.:+1:'
p7126
aS':+1: rebase please'
p7127
aS"I'm still :+1: but please rebase."
p7128
aS'Rebased!'
p7129
aS'Thanks! Merged.'
p7130
aS'thanks'
p7131
asg14
S'artem-zinnatullin:single-defer'
p7132
sbsI3434
(iPull
Pull
p7133
(dp7134
g3
S"@akarnokd I've found a problem with `null` action, I'll create separate issue about this soon."
p7135
sg5
S'Add Single.finallyDo()'
p7136
sg7
(lp7137
S'Enhancement'
p7138
asg10
I3434
sg11
(lp7139
S'Could you verify what happens ig the callback throws?\r\n\r\nOne should check null in assembly time (i.e. when calling Single.finallyDo.'
p7140
aS':+1:'
p7141
aS'um... I just noticed that we `doOnTerminate` and `finallyDo` on `Observable`.\r\n\r\n![the number of methods is too damn high](https://i.imgflip.com/so2yt.jpg)\r\n\r\nCould we make this look like `doOn*()`?'
p7142
aS'`doOnTerminate` happens before subscriber notification. `finallyDo` happens after.'
p7143
aS'Rebased'
p7144
aS"It can be called `doOnAfterComplete()` but since `finallyDo` is established, I'm not sure this rename can happen for 1.0.x."
p7145
aS"I'd rather it were called doAfterComplete. finallyDo only exists for the Observable and it doesnt follow the do* convention. We could choose to have 2 conventions (naming Single's variant similarly) or deprecate Observable#finallyDo and create Observable#doAfterComplete. I vote for the latter naming them both doAfterComplete."
p7146
aS"Does anyone have any objection to creating `Observable.doAfterTermination` as an alias for `finallyDo` and deprecating the original `finallyDo`? If that's acceptable then this PR should name it `Single.doAfterTermination`. "
p7147
aS':+1: `doAfterTermination`'
p7148
aS'A bit of consistency in tenses would be nice though.\r\n\r\nWe have \r\n```\r\ndoOnCompleted\r\ndoOnTerminate\r\ndoOnSubscribe\r\ndoOnRequest\r\n...\r\n```\r\n`doOnCompleted ` is the odd one out but may as well live with that. To be consistent call the method in question `doAfterTerminate` or `doAfterTerminated`?\r\n\r\n\r\n'
p7149
aS'Renamed to `doAfterTerminate` & rebased, PTAL.'
p7150
aS'> Does anyone have any objection to creating Observable.doAfterTermination as an alias for finallyDo and deprecating the original finallyDo? \r\n\r\n@artem-zinnatullin would you like to deprecate `finallyDo` -> `doAfterTerminate` in this PR?'
p7151
aS'Rebase please so we can merge. '
p7152
aS'Rebased!'
p7153
aS':+1: '
p7154
aS':+1:'
p7155
aS':+1: '
p7156
asg14
S'artem-zinnatullin:single-finally'
p7157
sbsI3436
(iPull
Pull
p7158
(dp7159
g3
S"Part of #3435.\r\n\r\nPersonally, I'd also add same test to `Observable.finallyDo()` and `Single.finallyDo()` because there are no guarantees that in future they will use exact same operator as implementation and this contract is more a contract of `Observable.finallyDo()` and `Single.finallyDo()`."
p7160
sg5
S'1.x: Add action != null check in OperatorFinally'
p7161
sg7
(lp7162
S'Bug'
p7163
asg10
I3436
sg11
(lp7164
S':+1:'
p7165
aS':+1: '
p7166
asg14
S'artem-zinnatullin:operator-finally-null-action-check'
p7167
sbsI3438
(iPull
Pull
p7168
(dp7169
g3
S"There seems to be a tendency to send `null` values through `onError` which eventually causes repeated failures. This PR converts these `null` values into `NullPointerException`s so the error origin is can be discovered and prevents the XXXExceptions from throwing NPEs in their constructors as well.\r\n\r\nI've also added some missing javadoc."
p7170
sg5
S'Better null tolerance in rx.exceptions.*Exception classes.'
p7171
sg7
(lp7172
S'Bug'
p7173
asg10
I3438
sg11
(lp7174
S':+1:'
p7175
aS'The problem is that NPEs will crash the streams further and likely end up hanging somewhere.'
p7176
asg14
S'akarnokd:ExceptionNullSafety'
p7177
sbsI3439
(iPull
Pull
p7178
(dp7179
g3
S"I saw this mentioned in [this talk](https://www.youtube.com/watch?v=ET_SMMXkE5s) from @benjchristensen \r\n\r\nThis PR adds a new class `Completable` which allows composing events\r\nthat never want to fire `onNext`, but only `onError` or `onComplete`. It\r\nis built upon the same Reactive-Streams principles as `Single`,\r\n`NbpObservable` and `Observable`.\r\n\r\nI've added most methods that made sense and left out the others (such as\r\n`map` and `flatMap`) that would require at least a single value.\r\n\r\nDepending on whether this type is actually required, I'll add unit test to this PR or in a new PR in case this gets merged."
p7180
sg5
S'2.x: Completable class for valueless event composition.'
p7181
sg7
(lp7182
S'Enhancement'
p7183
asg10
I3439
sg11
(lp7184
S"I'm adding unit tests and some fixes, stay tuned."
p7185
aS'Added 240 unit tests and fixed a few bugs.'
p7186
aS"I've added `amb`, `startWith` and `endWith` methods + their unit tests. The latter two have convenience overload that help with continuation-style flows (run the `Completable` before or after the `Observable`/`NbpObservable` delivered its values)."
p7187
aS"What is the difference between ``Completable`` vs ``Single<Void>``? It's possible to add some utility methods to Single to terminate using null values, so end up almost with the same interface than Completable. Maybe is better to improve Single as something similar to a Deferred/Promise which will handle the 1/0 items situations (been 0 a null item) which is probably the origin of both interfaces. Even Completable might be just a ``Completable extends Future<Void>``. So end up with ``Observable<T>`` (async multiple items) and ``Future<Void>`` (async single item) as main types (as puts here for some time http://reactivex.io/intro.html :astonished:).\r\n\r\nHope this helps. Just ignore me if you think that this is non sense. I see that @akarnokd are doing amazing things this days (specially rxjava v2), I'm not try to say that this pull request is bad or something similar."
p7188
aS"The difference is that, among other things, you don't have to drag around a mute type parameter. Null values are forbidden with 2.x and Reactive-Streams anyway. `Future` void is not an option because `Completable` is a deferred cold computation which runs only if one subscribes to it whereas Future is hot and is expected to be running or already completed such as `AsyncSubject`."
p7189
aS'Consider making `Completable` implement both `Publisher` and `IObservable` (an interface for `Observable` similar to `Publisher` for `Flowable`) so that `Completable` can be composed directly with either a `Flowable` or `Observable` without special method overloads. '
p7190
aS"I've started out with `Completable implements Publisher<Object>` but it didn't work with `Subscriber<T>` because `T` is not a supertype of `Object` and java doesn't have a bottom type in its type system (its top type is `Object`, however, `Void` is not a bottom type so that `Void` extends every other type). The same would be true for `IObservable`. So what's left is a bunch of `subscribe()` method with call-site variance."
p7191
aS"Well that really sucks that `Void` doesn't work properly. How about as `Publisher<?>`?"
p7192
aS"You can't have wildcards as the type parameter of the super type."
p7193
aS':( Oh well. '
p7194
aS'Is there any chance we will get this with RxJava 1.x?'
p7195
aS'The PR for 1.x has already been merged and should appear in 1.1.1'
p7196
aS'see #3444'
p7197
aS'Closing, will be included in the complete backport PR.'
p7198
asg14
S'akarnokd:Completable2x'
p7199
sbsI3443
(iPull
Pull
p7200
(dp7201
g3
S'As discussed in #3113.\r\n\r\nI also considered on a consistency basis calling it `ignoreElementsWith` but I don\'t think it carries the same clarity of meaning like `startWith` or `concatWith`. "ignore" and "then" seems to be a more natural combination in English to capture the sequential nature.'
p7202
sg5
S'1.x: Observable.ignoreElementsThen'
p7203
sg7
(lp7204
S'Enhancement'
p7205
aS'Feature-Request'
p7206
asg10
I3443
sg11
(lp7207
S'Looks good but it may be confusing to users when they encounter this and `concatEmptyWith()` or `mergeEmptyWith()`, or even a backport of the `Completable` class.'
p7208
aS">Looks good but it may be confusing to users when they encounter this and concatEmptyWith() or mergeEmptyWith(), or even a backport of the Completable class.\r\n\r\nThose operators are a little bit different and even though `ignoreElementsThen` can be expressed as `.ignoreElements().concatEmptyWith()` I think we get enough questions from user land about this issue to warrant first class support (an explicit method). \r\n\r\nIn terms of using `Completable` I'm assuming that `ignoreElements` could be modified to return a `Completable` and that `Completable` would have a `concatWith` operator that did the same as `concatEmptyWith`. That would be nice though it might be a problem for API backwards compatibility in v1."
p7209
aS'Extra test has been added, thanks @akarnokd \r\n'
p7210
aS'This operates very similarly to #3430 `concatEmptyWith`. To my knowledge the functional difference between the two is that `ignoreElementsThen` will drop all onNexted data while `concatEmptyWith` will blow up if onNext is called. It seems to me that we have the following choices:\r\n\r\n1. Merge both functionality but rename one to better align the API (i.e. rename `ignoreElementsThen` to `concatEmptyWithUnchecked` and create a `mergeEmptyWithUnchecked`). \r\n2. Merge this pull request and get the unchecked functionality (auto-drop onNexted values).\r\n3. Merge #3430 and get the checked functionality (trigger an onError when onNext is called). \r\n\r\n@abersnaze @akarnokd preferences? I vote for option 3 above. '
p7211
aS'I think one thing that should drive this decision is how often the functionality of `ignoreElementsThen` is requested on question and answer sites. It is such a frequent use case that I think it deserves first class support. '
p7212
aS"Tough. I don't have any use case that would require throwing an error if the first source happens to be non-empty and even if were so, I'd use `doOnNext( crash )`. I'd go for option 2 and seriously think about a shorter method name."
p7213
aS'How about `andThen`?'
p7214
aS'Sounds good to me.'
p7215
aS"Unfortunately `andThen` doesn't carry the meaning of ignoring the emissions of the source and could be confused with `concatWith`."
p7216
aS'I vote for number 3 with the option to drop/onError when onNext is called.'
p7217
aS"I prefer #1 without a rename of `ignoreElementsThen` (haven't seen a better name yet)"
p7218
aS"So far we have 3 totally different proposals and no consensus. \r\n\r\n1. Proposed by @akarnokd - Merge this pull request with a shorter name.\r\n2. Proposed by @abersnaze - Change the operator in #3430 to have an overload to drop the values or onError. If we pick option 2 then would we merge this pull request? Would the functionality would be subsumed? \r\n3. Proposed by @davidmoten - Rename the operator in #3430 to something that better aligns with `ignoreElementsThen` and merging them both. \r\n\r\nOption 2 above gives us both behaviors with a unified name. I vote for a variation of 2... \r\n\r\n4. Rename `ignoreElementsThen` to `andThen`. Also the semantics of the concat used internally should eagerly subscribe (to prevent issues with refcounted subscribers). \r\n\r\n```java\r\npublic Observable<R> andThen(Observable<R> doNext);\r\npublic Observable<R> andThen(Values doForValues, Observable<R> doNext);\r\npublic enum Values { Ignore, Error }\r\n```\r\n\r\nexample callsite...\r\n\r\n```java\r\nreturn inputs.publish(is -> \r\n    doSomeWork(Values.Ignore, is).andThen(is).retryWhen(this::tryRetry)\r\n);\r\n```\r\n\r\nThoughts? I'd like to close the books on these 2 PRs."
p7219
aS"Or instead of an overload I'd be okay with adding a `.none()` that enforced no onNext values. "
p7220
aS"As mentioned above `andThen` suffers from this:\r\n\r\n>Unfortunately andThen doesn't carry the meaning of ignoring the emissions of the source and could be confused with concatWith."
p7221
aS"@davidmoten I'm really not concerned with the name that much. I think that it's fairly clear. \r\n\r\nWhat I'd really like to see happen is this...\r\n\r\n1. Merge the `Completable` PR #3444. \r\n2. Add an instance method to `Observable` `public Completable none()` that ignores all values onNexted and returns a `Completable`.\r\n3. Add an instance method in `Completable`  `public Observable<T> concat(Observable<T>)`\r\n\r\nThe usage of this would look like this.\r\n\r\n```java\r\npublic Observable<T> writeData(Observable<T> inputs) {\r\n    return inputs.publish(i -> {}\r\n        Completable work = database.insert(i).doOnNext(this::logQuery).none();\r\n        return results.concat(i);\r\n    });\r\n}\r\n```\r\n\r\nThis reduces `a.ignoreElements().castAs(R.class).concatWith(b)` to `a.none().concat(b)` and it's composable. I believe that @akarnokd recommended a similar approach in #3430  \r\n\r\nNow that #3444 is merged we could add these 2 methods."
p7222
aS'Great. I like this better as well. @abersnaze @akarnokd - do you guys agree with this approach? '
p7223
aS"I don't particularly like `none()` maybe `toCompletable()` to match `toSingle()` otherwise a solid plan."
p7224
aS"Next step would be to implement `Completable#merge(Observable<T>)`... but I'm not convinced on naming just a thought."
p7225
aS"I opened a PR adding `Observable<T> andThen(Observable<T>)` to `Completable` #3570. Please comment. I'm open to different method name options. "
p7226
aS'@NiteshKant is this an acceptable resolution to your PR #3430? Can that PR be closed?'
p7227
aS'Since Completable now has an option to append an Observable I think this PR can be closed. Please comment if it needs to be reopened. '
p7228
asg14
S'davidmoten:ignore-elements-then'
p7229
sbsI3444
(iPull
Pull
p7230
(dp7231
g3
S'This is a backport of #3439.'
p7232
sg5
S'1.x: Completable class to support valueless event composition + tests'
p7233
sg7
(lp7234
S'Enhancement'
p7235
asg10
I3444
sg11
(lp7236
S'Looks good. Should we annotate `@Experimental` on all the public methods and operators? '
p7237
aS'Now, the class annotation should indicate all methods are experimental. If individual methods get promoted, we can add direct annotations then.'
p7238
aS"Since this adds to the API surface, I'd like to get another like before merging."
p7239
aS':+1: '
p7240
aS'Awesome. Thanks!'
p7241
asg14
S'akarnokd:Completable1x'
p7242
sbsI3447
(iPull
Pull
p7243
(dp7244
g3
S"Requested in #3445.\r\n\r\nThis is an efficient implementation as it avoids allocating the lifter object, doesn't require a function wrapper and doesn't use producer arbitration.\r\n\r\n(Bonus points to those who can recognize the similarities with #3446)."
p7245
sg5
S'1.x: DelaySubscription with a plain other Observable.'
p7246
sg7
(lp7247
S'Enhancement'
p7248
aS'Feature-Request'
p7249
asg10
I3447
sg11
(lp7250
S'Any thoughts about this?'
p7251
aS':+1: '
p7252
aS':+1: '
p7253
asg14
S'akarnokd:OnSubscribeDelaySubscriptionOther'
p7254
sbsI3448
(iPull
Pull
p7255
(dp7256
g3
S"Adds the `delay(long delay, TimeUnit unit, Scheduler\r\nscheduler)` and 'delay(long delay, TimeUnit unit)` operators to\r\n`rx.Single`.\r\n\r\nIncludes (in a separate commit) a refactor of `OperatorDelay`. As far as I can tell, the `source` field isn't used at all - by removing it, I was able to reuse `OperatorDelay` in `rx.Single` to implement the delay operator pretty easily."
p7257
sg5
S'Single delay'
p7258
sg7
(lp7259
S'Enhancement'
p7260
asg10
I3448
sg11
(lp7261
S':+1:'
p7262
aS'LGTM'
p7263
asg14
S'hyleung:single_delay'
p7264
sbsI3449
(iPull
Pull
p7265
(dp7266
g3
S'get() throws NSE when absent and orElse(T) returns the provided value when absent.'
p7267
sg5
S'2.x: Remove duplication of Optional API behavior.'
p7268
sg7
(lp7269
S'Enhancement'
p7270
asg10
I3449
sg11
(lp7271
S':+1:'
p7272
aS'Friendly ping! Just need a second collaborator to review.'
p7273
aS':+1: '
p7274
asg14
S'JakeWharton:jw/delete-code'
p7275
sbsI3451
(iPull
Pull
p7276
(dp7277
g3
S"to remove the need for mergeWithEmpty and concatWithEmpty in #3430.  I'm pretty sure that this doesn't count as a breaking change because of type erasure."
p7278
sg5
S'1.x: Change the signature of ignoreElements is also an implicit cast to whatever type you want.'
p7279
sg7
(lp7280
S'Enhancement'
p7281
asg10
I3451
sg11
(lp7282
S"ah that's great @abersnaze, so simple!"
p7283
aS"So we need a decision on the importance of source compatibility specifically in the category of generic types, right?\r\n\r\nI'm happy to add a generic type to `ignoreElements` where necessary to my codebases when I update to the next release because for a Java only codebase static typing will show me where things went wrong at compile time. Does anyone know if this change would bring about runtime grief for one of the dynamic languages that use RxJava?"
p7284
aS'Could this changed be done in a minor release? '
p7285
aS'closing in favor of #3567'
p7286
asg14
S'abersnaze:ignore-cast'
p7287
sbsI3454
(iPull
Pull
p7288
(dp7289
g3
S"Fixes the bug reported in #3452.\r\n\r\nThe fix involves 3 changes:\r\n\r\n  - First, each node in the bounded buffer receives an incrementing index whenever they are created. The root node starts with 0, the first value's index will be 1 and so on.\r\n  - In the replay logic, the very first time the current node is captured, the node's index is added to the totalRequested amount of the subscriber. Since this is always one less than the max requested that far, there is no point in calling `manageRequests()` at this point.\r\n  - Third, the pinning of the current node has to happen before the child requests, otherwise the difference would manifest before the compensation and some elements may get missed.\r\n\r\nIn addition, there was a missing `r--` in the emission loop and thus the operator could have overflown its child subscriber."
p7290
sg5
S'1.x: fix: bounded replay() not requesting enough for latecommers'
p7291
sg7
(lp7292
S'Bug'
p7293
asg10
I3454
sg11
(lp7294
S"Don't have the time to fully grok this, but the changes look okay and I trust @akarnokd on this. So :+1: "
p7295
aS"Thank you @benjchristensen. Since `replay()` is one of the most complicated operators, I'd like @abersnaze or @stealthcode to look at it before it ends up in 1.0.15."
p7296
aS':+1: '
p7297
asg14
S'akarnokd:ReplayRequestCoordinationFix'
p7298
sbsI3455
(iPull
Pull
p7299
(dp7300
g3
S'https://github.com/ReactiveX/RxJava/issues/2998'
p7301
sg5
S'OnErrorFailedException fix'
p7302
sg7
(lp7303
S'Bug'
p7304
aS'Enhancement'
p7305
asg10
I3455
sg11
(lp7306
S'Looks good to me. :+1:'
p7307
aS'Could you also fix the similar issues in `Observable.subscribe` and `Observable.unsubscribe`? Here are tests to reproduce them:\r\n\r\n```\r\n    @Test(expected = OnErrorFailedException.class)\r\n    public void testOnErrorExceptionIsThrownFromSubscribe() {\r\n        Observable.<Integer>create(s1 ->\r\n                        Observable.<Integer>create(s2 -> {\r\n                            throw new IllegalArgumentException("original exception");\r\n                        }).subscribe(s1)\r\n        ).subscribe(System.out::println, e -> {\r\n            throw new RuntimeException();\r\n        });\r\n    }\r\n\r\n    @Test(expected = OnErrorFailedException.class)\r\n    public void testOnErrorExceptionIsThrownFromUnsafeSubscribe() {\r\n        Observable.<Integer>create(s1 ->\r\n                        Observable.<Integer>create(s2 -> {\r\n                            throw new IllegalArgumentException("original exception");\r\n                        }).unsafeSubscribe(s1)\r\n        ).subscribe(System.out::println, e -> {\r\n            throw new RuntimeException();\r\n        });\r\n    }\r\n\r\n```'
p7308
aS"I would replace error handling in both of these methods with simple\r\n\r\n        } catch (Throwable e) {\r\n            Exceptions.throwIfFatal(e);\r\n            try {\r\n                subscriber.onError(hook.onSubscribeError(e));\r\n            } catch (Throwable e2) {\r\n                throw new OnErrorFailedException(e2);\r\n            }\r\n            return Subscriptions.unsubscribed();\r\n        }\r\n\r\nHowever, I think that the problem should be handled more generally. \r\nThe entire error handling policy should be reviewed and enforced.\r\nOtherwise we will always see swallowed exceptions here and there.\r\nUnfortunately, I don't have time right now to investigate the issue, I've just fixed what creates troubles for my current project."
p7309
aS'Thanks for digging in to help with this. I thought we had squashed all of these swallowing of errors! Apparently not :-('
p7310
aS":+1: Go ahead with this @akarnokd if you're still good with it. "
p7311
aS'It is good as it is. Merging. The thing @zsxwing asked for can be done in a separate PR.'
p7312
asg14
S'konmik:on-error-failed-exception-fix'
p7313
sbsI3456
(iPull
Pull
p7314
(dp7315
g3
S'Can get two more :+1: from the committers.'
p7316
sg5
S'Begin the steps to release 1.0.15'
p7317
sg7
(lp7318
S'Discussion'
p7319
asg10
I3456
sg11
(lp7320
S'It would be great to get these PRs in as well:\r\n\r\n#3458 : CompositeSubscription javadoc change\r\n#3455 : [Bug] OnErrorFailedException propagation fix\r\n#3454 : [Bug] Fix bounded replay() request behavior\r\n#3438 : Better null tolerance, although this may need rebase due to #3455\r\n'
p7321
aS":+1: for getting this release out. I provided some non-essential feedback on suggestions for things I would change or not include in the release notes based on how I've done it in thus far. With or without those changes (except the one I thing has a misleading title), I'm good with the release going out. "
p7322
aS"Agreed that we should get the items @akarnokd mentioned into this release. Some are already merged and just need to be put in the release notes. I've looked at the others and think they are all okay for merging before release."
p7323
aS"Great, these are already merged in:\r\n\r\n#3458 : CompositeSubscription javadoc change\r\n#3455 : [Bug] OnErrorFailedException propagation fix\r\n#3438 : Better null tolerance, although this may need rebase due to #3455\r\n\r\nI feel this one can be merged but would like someone to review it in more detail:\r\n\r\n#3454 : [Bug] Fix bounded replay() request behavior\r\n\r\nI don't know how urgent are these as they were reported by Netflix:\r\n\r\n#3428 [bug] GroupBy request fix\r\n#3169 Merge support for horizontally unbounded mode"
p7324
aS':+1: '
p7325
aS"I think I'd prefer to cut a release of 1.0.15 asap and get the changes like #3454, #3428, and #3169 in a subsequent 1.0.16 release. \r\n\r\nCan I get a +1 to initiate the 1.0.15 release?"
p7326
aS':+1: (not a "collaborator" though). Let\'s finally release 1.0.15, a lot of good stuff for Rx users!\r\n\r\n@abersnaze can you please squash commits in this PR?'
p7327
aS'+1 for release of what is already merged. '
p7328
aS':+1:'
p7329
aS'I was getting lazy. thanks @artem-zinnatullin.'
p7330
aS':+1: '
p7331
asg14
S'abersnaze:1.0.15'
p7332
sbsI3458
(iPull
Pull
p7333
(dp7334
g3
g53
sg5
S'Clarify contracts of CompositeSubscription in its javadoc'
p7335
sg7
(lp7336
S'Documentation'
p7337
asg10
I3458
sg11
(lp7338
S':+1:'
p7339
aS':+1: '
p7340
aS'Excellent!'
p7341
asg14
S'artem-zinnatullin:CompositeSubscription-javadoc'
p7342
sbsI3460
(iPull
Pull
p7343
(dp7344
g3
S'This PR adds the `SchedulerPoolHelper` class which manages creating\r\n`ScheduledExecutorService`s for the standard schedulers and wires them\r\nup to work properly with JDK 6 `purge` or JDK 7 `removeOnCancelPolicy`,\r\ndepending on if the platform supports it or not.\r\n\r\nSince the 2.0 is aimed at desktop and will be automatically backported\r\nto JDK 6 level, the desktop (JDK 8) test have to verify both modes.'
p7345
sg5
S'2.x: platform-aware purge/removeOnCancelPolicy management.'
p7346
sg7
(lp7347
S'Enhancement'
p7348
asg10
I3460
sg11
(lp7349
S'Closing, will be included in the complete backport PR.'
p7350
asg14
S'akarnokd:PlatformSchedulerPurge2x'
p7351
sbsI3462
(iPull
Pull
p7352
(dp7353
g3
g53
sg5
S'1.x: A minor doc fix for `interval`'
p7354
sg7
(lp7355
S'Documentation'
p7356
asg10
I3462
sg11
(lp7357
S':+1:'
p7358
aS':+1: '
p7359
asg14
S'zsxwing:fix-doc'
p7360
sbsI3465
(iPull
Pull
p7361
(dp7362
g3
S'I forgot to request Long.MAX_VALUE in 3 of the `Subscribers.create`\r\noverloads.'
p7363
sg5
S'2.x: fix Subscribers.create not requesting anything'
p7364
sg7
(lp7365
S'Bug'
p7366
asg10
I3465
sg11
(lp7367
S'Closing, will be included in the complete backport PR.'
p7368
asg14
S'akarnokd:SubscribersHelperFix2x'
p7369
sbsI3467
(iPull
Pull
p7370
(dp7371
g3
S'There is a problem, reported in #3461 and #2943, in which if the system clock drifts, the periodic calculation inside Scheduler.Worker gets off and either taking a longer time for the next invocation of the task or doing "catching-up" with all the lost invocations.\r\n\r\nThe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly, it rebases the timer period and schedules the next execution relative to now.\r\n\r\nIf the clock goes back, the original code scheduled the next invocation way into the future. This PR will schedule it after the period.\r\n\r\nIf the clock goes forward, the original code scheduled executions for all the missed time between the last run and the new time immediately, yielding a bunch of 0 delays. This PR will simply schedule the next invocation after the period.\r\n\r\nThe algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along. The subsequent invocations will be scheduled at a fixed rate again.\r\n\r\nI\'ve added the system parameter `rx.scheduler.drift-tolerance` (unit: minutes, default: 15 minutes), which is used to determine if the clock drifted too far between invocations of the periodic task.'
p7372
sg5
S'1.x: compensation for significant clock drifts in schedulePeriodically'
p7373
sg7
(lp7374
S'Bug'
p7375
asg10
I3467
sg11
(lp7376
S'Time drift is pretty nasty. We spent a lot of time on this in Rx.NET http://blogs.msdn.com/b/rxteam/archive/2012/06/20/reactive-extensions-v2-0-release-candidate-available-now.aspx'
p7377
aS"I've updated the code with the suggestion of @stealthcode "
p7378
aS':+1: LGTM'
p7379
aS'Do you need additional changes? If not, feel free to merge this PR.'
p7380
aS':+1: '
p7381
aS'Yay! This was important issue.\r\n\r\nSo, I did test (similar to #3530):\r\n\r\n```java\r\nObservable\r\n  .interval(5, 10, SECONDS)\r\n  .subscribe(aLong -> logger.d("Interval: %d", aLong));\r\n```\r\n\r\nAnd then changed system clock to +2 hours at runtime of the app.\r\n\r\n**Before fix**\r\nAs expected computation scheduler gone crazy and fired about 700 events during one second.\r\n\r\n<img width="1160" alt="screen shot 2015-12-15 at 08 44 57" src="https://cloud.githubusercontent.com/assets/967132/11803559/1d2e29ee-a30d-11e5-960d-1489b3b0fb1c.png">\r\n<img width="944" alt="screen shot 2015-12-15 at 08 43 54" src="https://cloud.githubusercontent.com/assets/967132/11803560/1d678ac2-a30d-11e5-888d-88d397767339.png">\r\n\r\n**After fix**\r\nEverything was just fine! No incorrect events, no CPU consuming\r\n\r\n<img width="1165" alt="screen shot 2015-12-15 at 09 01 06" src="https://cloud.githubusercontent.com/assets/967132/11803561/1d73136a-a30d-11e5-9304-f25050ad4f58.png">\r\n<img width="1006" alt="screen shot 2015-12-15 at 09 00 42" src="https://cloud.githubusercontent.com/assets/967132/11803562/1d7628a2-a30d-11e5-8c20-77a3b3c222fa.png">\r\n\r\n---\r\n\r\nSo, I think #3461 and #3530 can be closed now!\r\n\r\nThanks, @akarnokd!\r\n'
p7382
asg14
S'akarnokd:SchedulePeriodicallyClockShiftFix'
p7383
sbsI3468
(iPull
Pull
p7384
(dp7385
g3
S'Reviewed all usages of `OnErrorNotImplementedException` and fixed issues similar to #3455.'
p7386
sg5
S'1.x: Fix other places that may swallow OnErrorFailedException'
p7387
sg7
(lp7388
S'Bug'
p7389
asg10
I3468
sg11
(lp7390
S':+1: '
p7391
aS':+1:'
p7392
asg14
S'zsxwing:fix-for-OnErrorFailedException'
p7393
sbsI3470
(iPull
Pull
p7394
(dp7395
g3
S"Reported in #3469.\r\n\r\nThis change will make sure whenever a new subscriber arrives, the\r\nrequest coordination doesn't scan every other subscriber unnecessary.\r\n(They will trigger a manageRequests individually anyway).\r\n\r\nUnfortunately, I can't make the subscription registration constant (via a HashSet) because that would slow down the dispatching loop (which is quite expensive to for-each over compared to a plain array).\r\n\r\nNote also that this will likely conflict with #3454.\r\n\r\nI get the following numbers with the program in #3469.\r\n\r\n```\r\nsubscribing...\r\nsubscribed so far 10000; took 54ms to subscribe last 10000 at rate: 185185 per sec...\r\nsubscribed so far 20000; took 110ms to subscribe last 10000 at rate: 90909 per sec...\r\nsubscribed so far 30000; took 157ms to subscribe last 10000 at rate: 63694 per sec...\r\nsubscribed so far 40000; took 267ms to subscribe last 10000 at rate: 37453 per sec...\r\nsubscribed so far 50000; took 211ms to subscribe last 10000 at rate: 47393 per sec...\r\nsubscribed so far 60000; took 320ms to subscribe last 10000 at rate: 31250 per sec...\r\nsubscribed so far 70000; took 331ms to subscribe last 10000 at rate: 30211 per sec...\r\nsubscribed so far 80000; took 369ms to subscribe last 10000 at rate: 27100 per sec...\r\nsubscribed so far 90000; took 415ms to subscribe last 10000 at rate: 24096 per sec...\r\nsubscribed so far 100000; took 462ms to subscribe last 10000 at rate: 21645 per sec...\r\nsubscribed so far 110000; took 516ms to subscribe last 10000 at rate: 19379 per sec...\r\nsubscribed so far 120000; took 547ms to subscribe last 10000 at rate: 18281 per sec...\r\nsubscribed so far 130000; took 647ms to subscribe last 10000 at rate: 15455 per sec...\r\nsubscribed so far 140000; took 720ms to subscribe last 10000 at rate: 13888 per sec...\r\nsubscribed so far 150000; took 811ms to subscribe last 10000 at rate: 12330 per sec...\r\nsubscribed so far 160000; took 806ms to subscribe last 10000 at rate: 12406 per sec...\r\nsubscribed so far 170000; took 873ms to subscribe last 10000 at rate: 11454 per sec...\r\nsubscribed so far 180000; took 911ms to subscribe last 10000 at rate: 10976 per sec...\r\nsubscribed so far 190000; took 986ms to subscribe last 10000 at rate: 10141 per sec...\r\nsubscribed so far 200000; took 1003ms to subscribe last 10000 at rate: 9970 per sec...\r\nsubscribed so far 210000; took 1168ms to subscribe last 10000 at rate: 8561 per sec...\r\nsubscribed so far 220000; took 1213ms to subscribe last 10000 at rate: 8244 per sec...\r\nsubscribed so far 230000; took 1340ms to subscribe last 10000 at rate: 7462 per sec...\r\nsubscribed so far 240000; took 1314ms to subscribe last 10000 at rate: 7610 per sec...\r\nsubscribed so far 250000; took 1548ms to subscribe last 10000 at rate: 6459 per sec...\r\nsubscribed so far 260000; took 1372ms to subscribe last 10000 at rate: 7288 per sec...\r\nsubscribed so far 270000; took 1835ms to subscribe last 10000 at rate: 5449 per sec...\r\nsubscribed so far 280000; took 2087ms to subscribe last 10000 at rate: 4791 per sec...\r\nsubscribed so far 290000; took 1910ms to subscribe last 10000 at rate: 5235 per sec...\r\nsubscribed so far 300000; took 1966ms to subscribe last 10000 at rate: 5086 per sec...\r\nunsubscribing...\r\nunsubscribed so far 10000; took 1910ms to unsubscribe last 10000 at rate: 5235 per sec...\r\nunsubscribed so far 20000; took 1782ms to unsubscribe last 10000 at rate: 5611 per sec...\r\nunsubscribed so far 30000; took 1730ms to unsubscribe last 10000 at rate: 5780 per sec...\r\nunsubscribed so far 40000; took 1593ms to unsubscribe last 10000 at rate: 6277 per sec...\r\nunsubscribed so far 50000; took 1514ms to unsubscribe last 10000 at rate: 6605 per sec...\r\nunsubscribed so far 60000; took 1468ms to unsubscribe last 10000 at rate: 6811 per sec...\r\nunsubscribed so far 70000; took 1188ms to unsubscribe last 10000 at rate: 8417 per sec...\r\nunsubscribed so far 80000; took 1234ms to unsubscribe last 10000 at rate: 8103 per sec...\r\nunsubscribed so far 90000; took 1271ms to unsubscribe last 10000 at rate: 7867 per sec...\r\nunsubscribed so far 100000; took 1358ms to unsubscribe last 10000 at rate: 7363 per sec...\r\nunsubscribed so far 110000; took 1103ms to unsubscribe last 10000 at rate: 9066 per sec...\r\nunsubscribed so far 120000; took 1100ms to unsubscribe last 10000 at rate: 9090 per sec...\r\nunsubscribed so far 130000; took 990ms to unsubscribe last 10000 at rate: 10101 per sec...\r\nunsubscribed so far 140000; took 953ms to unsubscribe last 10000 at rate: 10493 per sec...\r\nunsubscribed so far 150000; took 854ms to unsubscribe last 10000 at rate: 11709 per sec...\r\nunsubscribed so far 160000; took 789ms to unsubscribe last 10000 at rate: 12674 per sec...\r\nunsubscribed so far 170000; took 779ms to unsubscribe last 10000 at rate: 12836 per sec...\r\nunsubscribed so far 180000; took 624ms to unsubscribe last 10000 at rate: 16025 per sec...\r\nunsubscribed so far 190000; took 634ms to unsubscribe last 10000 at rate: 15772 per sec...\r\nunsubscribed so far 200000; took 514ms to unsubscribe last 10000 at rate: 19455 per sec...\r\nunsubscribed so far 210000; took 411ms to unsubscribe last 10000 at rate: 24330 per sec...\r\nunsubscribed so far 220000; took 373ms to unsubscribe last 10000 at rate: 26809 per sec...\r\nunsubscribed so far 230000; took 337ms to unsubscribe last 10000 at rate: 29673 per sec...\r\nunsubscribed so far 240000; took 286ms to unsubscribe last 10000 at rate: 34965 per sec...\r\nunsubscribed so far 250000; took 234ms to unsubscribe last 10000 at rate: 42735 per sec...\r\nunsubscribed so far 260000; took 222ms to unsubscribe last 10000 at rate: 45045 per sec...\r\nunsubscribed so far 270000; took 159ms to unsubscribe last 10000 at rate: 62893 per sec...\r\nunsubscribed so far 280000; took 96ms to unsubscribe last 10000 at rate: 104166 per sec...\r\nunsubscribed so far 290000; took 63ms to unsubscribe last 10000 at rate: 158730 per sec...\r\nunsubscribed so far 300000; took 31ms to unsubscribe last 10000 at rate: 322580 per sec...\r\n```"
p7396
sg5
S'1.x: replay request coordination reduce overhead'
p7397
sg7
(lp7398
S'Performance'
p7399
asg10
I3470
sg11
(lp7400
S"I've updated the code to have O(1) subscription/unsubscription cost as well. The program from #3469 now produces stunning results:\r\n\r\n```\r\nsubscribing...\r\nsubscribed so far 10000; took 32ms to subscribe last 10000 at rate: 312500 per sec...\r\nsubscribed so far 20000; took 12ms to subscribe last 10000 at rate: 833333 per sec...\r\nsubscribed so far 30000; took 14ms to subscribe last 10000 at rate: 714285 per sec...\r\nsubscribed so far 40000; took 6ms to subscribe last 10000 at rate: 1666666 per sec...\r\nsubscribed so far 50000; took 12ms to subscribe last 10000 at rate: 833333 per sec...\r\nsubscribed so far 60000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 70000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 80000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 90000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 100000; took 13ms to subscribe last 10000 at rate: 769230 per sec...\r\nsubscribed so far 110000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 120000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 130000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 140000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 150000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 160000; took 6ms to subscribe last 10000 at rate: 1666666 per sec...\r\nsubscribed so far 170000; took 41ms to subscribe last 10000 at rate: 243902 per sec...\r\nsubscribed so far 180000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 190000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 200000; took 19ms to subscribe last 10000 at rate: 526315 per sec...\r\nsubscribed so far 210000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 220000; took 3ms to subscribe last 10000 at rate: 3333333 per sec...\r\nsubscribed so far 230000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 240000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 250000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 260000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 270000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 280000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 290000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 300000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nunsubscribing...\r\nunsubscribed so far 10000; took 13ms to unsubscribe last 10000 at rate: 769230 per sec...\r\nunsubscribed so far 20000; took 8ms to unsubscribe last 10000 at rate: 1250000 per sec...\r\nunsubscribed so far 30000; took 7ms to unsubscribe last 10000 at rate: 1428571 per sec...\r\nunsubscribed so far 40000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 50000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 60000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 70000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 80000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 90000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 100000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 110000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 120000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 130000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 140000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 150000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 160000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 170000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 180000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 190000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 200000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 210000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 220000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 230000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 240000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 250000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 260000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 270000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 280000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 290000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 300000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\n```\r\n\r\n(The numbers could be actually higher but Windows' timer resolution is about 3ms at best)."
p7401
aS"I've updated the code to avoid the synchronized block on each replay attempt in case the cached version of the InnerProducers is still the same as the set's version."
p7402
aS"I haven't reviewed the changes in detail yet but I do notice that OpenHashSet doesn't have any dedicated unit tests."
p7403
aS"I've added a unit test for `OpenHashSet`."
p7404
aS"Strangely, the test doesn't crash with Java 8. Must be some difference between what type for-each extracts."
p7405
aS'@akarnokd needs rebase on latest `1.x`'
p7406
aS'Thanks. Working on it.'
p7407
aS'Rebased.'
p7408
asg14
S'akarnokd:ReplayRequestCoordinationPerfFix'
p7409
sbsI3474
(iPull
Pull
p7410
(dp7411
g3
g53
sg5
S'Fix indentation'
p7412
sg7
(lp7413
S'Cleanup'
p7414
asg10
I3474
sg11
(lp7415
S':+1:'
p7416
aS":+1:\r\n\r\n// I'd also add `{}` to the `if`s.  "
p7417
aS':+1:'
p7418
aS'Great, thanks for contributing.'
p7419
asg14
S'eug:patch-1'
p7420
sbsI3475
(iPull
Pull
p7421
(dp7422
g3
S'The current baseline on i7 4770K, Windows 7 x64, Java 8u66:\r\n\r\n```\r\nBenchmark           (times)   Mode   Samples        Score  Score error    Units\r\nrangeFlatMapJust          1  thrpt         5 24242025,899  2299703,654    ops/s\r\nrangeFlatMapJust         10  thrpt         5  2536987,139   153629,364    ops/s\r\nrangeFlatMapJust       1000  thrpt         5    54154,325     4014,598    ops/s\r\nrangeFlatMapJust    1000000  thrpt         5       48,638        7,591    ops/s\r\nrangeFlatMapRange         1  thrpt         5  9331777,291   531241,251    ops/s\r\nrangeFlatMapRange        10  thrpt         5   388606,708    22875,097    ops/s\r\nrangeFlatMapRange      1000  thrpt         5     4164,424      266,850    ops/s\r\nrangeFlatMapRange   1000000  thrpt         5        4,354        0,575    ops/s\r\n```'
p7423
sg5
S'1.x: benchmark range + flatMap throughput.'
p7424
sg7
(lp7425
S'Performance'
p7426
asg10
I3475
sg11
(lp7427
S"I'm merging this to enable performance work. No need for additional likes as it doesn't affect the main."
p7428
asg14
S'akarnokd:FlatMapRangePerf1x'
p7429
sbsI3476
(iPull
Pull
p7430
(dp7431
g3
S"Changes to the scalar fast-path was inspired by the Project Reactor's `flatMap` which was in turn inspired by RxJava 2.x's implementation of `flatMap`.\r\n\r\n**Naturally, this will conflict with #3169 .**\r\n\r\nBenchmark for comparison (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10799061/27b6ff8a-7dab-11e5-8580-6dbbacadf430.png)\r\n\r\nJust by applying the scalar re-batching, the operator gained a massive 45% throughput increase, from **48 MOps/s** to **71 MOps/s**.\r\n\r\nWhen the range optimization is also applied, the improvement is even more impressive:  +60% throughput, from **48 MOps/s** to **79 MOps/s**.\r\n\r\nThe optimization doesn't really affect `rangeFlatMapRange`, it has a larger run-to-run variance due to GC.\r\n\r\nI'm experimenting with the 2.x branch as well and by applying these two optimizations, the throughput increasd from **40 MOps/s** to **58 MOps/s**. I'm investigating if switching to synchronized would help with the remaining overhead gap.\r\n\r\nNote also that the perf tests measure the operator overhead only."
p7432
sg5
S'1.x: overhead reduction for merge and flatMap'
p7433
sg7
(lp7434
S'Enhancement'
p7435
aS'Performance'
p7436
asg10
I3476
sg11
(lp7437
S'Rebasing...'
p7438
aS'... rebased, sort of.'
p7439
aS'For me, it is the opposite; reading long variable names and methods drains my focus. You can always post a cleanup PR.'
p7440
aS"Fine, I've renamed the variables. Now it doesn't fit on my screen and I can't tell what is what because all variable names look the same at glance. Distinguishing between `e`, `n`, `r`, `i`, `o` is much easier; a performance optimization for the mind."
p7441
aS'Rebased onto main.'
p7442
aS':+1: '
p7443
asg14
S'akarnokd:FlatMapRangePerfFix1x'
p7444
sbsI3477
(iPull
Pull
p7445
(dp7446
g3
S'This specialized OnSubscribe performs ~33% better on longer streams.\r\n\r\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10802983/1ef4027a-7dc0-11e5-996a-9e9cf7033ed3.png)\r\n\r\nThe `slowpath` requests the available amount + 1 to trigger a slow path, `slowpath2` requests in batches of 128 and replenishes only after all were received.'
p7447
sg5
S'1.x: add a source OnSubscribe which works from an array directly'
p7448
sg7
(lp7449
S'Enhancement'
p7450
aS'Performance'
p7451
asg10
I3477
sg11
(lp7452
S':+1: '
p7453
asg14
S'akarnokd:FromArray1x'
p7454
sbsI3478
(iPull
Pull
p7455
(dp7456
g3
S'This PR adds a perf test that measures what it takes to subscribe to a\r\nnon-backpressured and backpressured source and what is the effect of the\r\nmini-arbitration inside Subscriber.\r\n\r\nThis should enable investigations into why generally 1.x subscriptions have more overhead than 2.x.\r\n\r\nBenchmark (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10804298/023f5772-7dc7-11e5-8cf4-abe03c1ab725.png)\r\n\r\nDirect overrides `setProducer` and requests directly. Started requests in the `onStart` method and Usual requests in the constructor.\r\n'
p7457
sg5
S'1.x: perf benchmark for the cost of subscribing'
p7458
sg7
(lp7459
S'Performance'
p7460
asg10
I3478
sg11
(lp7461
sg14
S'akarnokd:SubscribingPerf1x'
p7462
sbsI3479
(iPull
Pull
p7463
(dp7464
g3
S"This PR changes the internals of the `Subscriber` class to reduce its creation overhead by deferring the creation of the SubscriptionList until it is actually needed.\r\n\r\nBenchmark (i7 4770K, Windows 7 x64, Java 8u66)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10806351/14e6567e-7dd5-11e5-8c06-3716454ccbc7.png)\r\n\r\nFor no-backpressure sources, the throughput is now doubled for the safe case and improved by ~20% for the unsafe case. For a backpressuring source, the improvement is between 3-10% but the error ranges overlap.\r\n\r\nThere is one case where the the throughput halved for some reason. Since JITs are smart, my best guess is that generally the benchmark method gets stack-allocated instead of heap allocated, hence the very large amounts relative to a range(1, 1) benchmark (which tops at 24 MOps/s). \r\n\r\nHowever, the justStart case is worse than the baseline. My guess is that the `this` looks like it escaped and thus a regular heap allocation is required. I'll test this theory in the morning by blackholing the test `Subscriber`s before subscription thus forcing a heap allocation in each case.\r\n\r\nNote that `Subscriber` has now more synchronization which combined with the synchronization in `SubscriptionList` may increase the overhead elsewhere; I plan to run more benchmarks in the morning. The solution would be to inline the logic of `SubscriptionList` into `Subscriber` directly. \r\n\r\nNote also the recursive call to `add` and `unsubscribe` in case the `Subscriber` was created in sharing mode. In RxJava 1.x, operators like to share a single underlying `SubscriptionList` and if the chain is very long, that may prevent some JIT optimizations due to stack dept. The upside is that generally only a few resources are added to a `Subscriber`, especially in async operators, whose overhead may be shadowed by other things and thus not really a problem."
p7465
sg5
S"1.x: reduce Subscriber's creation overhead"
p7466
sg7
(lp7467
S'Enhancement'
p7468
aS'Performance'
p7469
asg10
I3479
sg11
(lp7470
S"I've updated the `SubscribingPerf` to see what effect the isUnsubscribed implementation has and its not good: the throughput is generally reduced by ~20% due to the additional indirections:\r\n\r\nBenchmark comparison (i7 **4790**, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10813524/18512e74-7e20-11e5-9ac7-a38d3fe10431.png)\r\n\r\nI've run out of ideas; due to the structure of the 1.x classes and the mandatory resource management of `Subscriber` I don't believe subscribing can be improved any further without endangering the streaming performance."
p7471
asg14
S'akarnokd:SubscribingPerfFix1x'
p7472
sbsI3480
(iPull
Pull
p7473
(dp7474
g3
S"Note: this doesn't change any main class, just a perf class.\r\n\r\n  - Two of the tests used the wrong subscriber type.\r\n  - The benchmark layout allowed stack allocation instead of heap allocation and thus showing less overhead than expected. By letting consuming the `Subscriber`s via blackhole, this JIT optimization is negated as it should be.\r\n  - Added a benchmark which should help verify the overhead of checking `isUnsubscribed` within range in #3479 because I suspect that will get worse there.\r\n\r\nBenchmark values: (i7 **4790**, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10813246/16cbe7e4-7e1e-11e5-8de6-5bc1ffdb2739.png)\r\n"
p7475
sg5
S'1.x: update and bugfix to SubscribingPerf'
p7476
sg7
(lp7477
S'Bug'
p7478
aS'Performance'
p7479
asg10
I3480
sg11
(lp7480
sg14
S'akarnokd:SubscribingPerfUpdate'
p7481
sbsI3485
(iPull
Pull
p7482
(dp7483
g3
S'I forgot a NotificationLite conversion in the constructor. Note that\r\nthere were no tests verifying null behavior at all.'
p7484
sg5
S'1.x: fix scan() not accepting a null initial value'
p7485
sg7
(lp7486
S'Bug'
p7487
asg10
I3485
sg11
(lp7488
S':+1: '
p7489
asg14
S'akarnokd:ScanAllowNull1x'
p7490
sbsI3486
(iPull
Pull
p7491
(dp7492
g3
g53
sg5
S'1.x: Remove unused imports'
p7493
sg7
(lp7494
S'Cleanup'
p7495
asg10
I3486
sg11
(lp7496
S':+1:'
p7497
aS':+1: '
p7498
aS':+1: '
p7499
aS"Let's merge this?"
p7500
aS'Thanks for the contribution.'
p7501
asg14
S'shoma2da:remove-unused-imports'
p7502
sbsI3487
(iPull
Pull
p7503
(dp7504
g3
S'Introduce a new interface BackpressureOverflowStrategy that allows implementing different handlers for an overflow situation.  This patch adds three implementations, reachable via OverflowStrategy:\r\n\r\n    static class OverflowStrategy {\r\n        static final BackpressureOverflowStrategy DEFAULT = Error.INSTANCE;\r\n        static final Error ERROR = Error.INSTANCE;\r\n        static final DropOldest DROP_OLDEST = DropOldest.INSTANCE;\r\n        static final DropLatest DROP_LATEST = DropLatest.INSTANCE;\r\n    }\r\n\r\nThe behavior for each is the following:\r\n\r\n- ERROR remains the default as the existing implementation.\r\n- DROP_LATEST will drop newly produced items after the buffer fills up.\r\n- DROP_OLDEST will drop the oldest elements in the buffer, making room for\r\n  newer ones.\r\n\r\nIn all cases, a drop will result in a notification to the producer by invoking the onOverflow callback.\r\n\r\nNone of the two new behaviours (DROP_*) will unsubscribe from the source nor onError.'
p7505
sg5
S'1.x: OnBackpressureBuffer: DROP_LATEST and DROP_OLDEST'
p7506
sg7
(lp7507
S'Enhancement'
p7508
aS'Feature-Request'
p7509
asg10
I3487
sg11
(lp7510
S'Otherwise, it looks okay. :+1:'
p7511
aS'Thanks for the review @akarnokd'
p7512
aS'Rebased - @akarnokd let me know if there are any fixes pending.'
p7513
aS"Excellent. :+1:. I don't think there are conflicting PRs right now."
p7514
aS'Great :+1:, just a few nits.'
p7515
aS"Thanks @artem-zinnatullin & @akarnokd. Addressed Artem's comments."
p7516
aS':+1:'
p7517
aS'@abersnaze can you take a look and verify that it solves the issue raised in #3233?'
p7518
aS'Rebased on 1.x'
p7519
aS"The only concern that @abersnaze and I have had with this is that this uses enums to determine the strategy of operator functionality. This pattern hasn't been used much in the public API as of yet. @akarnokd @zsxwing do you guys have any opinion? We could just convert the strategies to instance methods (for consistency) or is this an emerging case that should be encouraged?"
p7520
aS"I wouldn't turn a the whole set of `onBackpressureXXX` into enums of Drop|Buffer|Latest because the pattern doesn't allow parametrizing just the Buffer variant. In this case, however, having 3-9 new overload feels unnecessary expansion of the public API. I'm in for the use of enums here, but we should store them in a reasonable subpackage."
p7521
aS"@akarnokd @stealthcode I don't love using enums in this way, but I agree with @akarnokd that this can lead to excessive API expansion.  But happy to move to methods if you guys prefer.  Ditto for moving the enums package from rx to rx.strategies or some similar alternative."
p7522
aS'Agree with @akarnokd \r\n\r\nI prefer to add a new interface `BackpressureOverflowStrategy` instead of `enum`.'
p7523
aS'I agree with @zsxwing on the use of an empty interface and impls to compare `instanceof` instead of using an enum. Eventually they might be usable to generalize the strategies. '
p7524
aS"Sounds good, I'll update the patch soon. Any suggestion on the package for the strategy?"
p7525
aS'Rebased'
p7526
aS"@stealthcode I've been busy these days, just returned to this. I had the same doubt re. BufferSubscribe reference, @akarnokd mind to clarify where it happens?\r\n\r\nI've fixed the visibility of OverflowStrategy members (new commit on the way)"
p7527
aS'Thanks for the addition.\r\nCould you also update the PR description?'
p7528
aS'@stevegury thanks for the review. PR fixed.'
p7529
aS"If I'm right the only missing thing is the header in `BackpressureOverflowStrategy.java`.\r\n@srvaroa could you add that?\r\n:+1: "
p7530
aS'Wait, it has still the problem of exposing internal classes and types into the public API:\r\n\r\n```java\r\nboolean triggerOn(rx.internal.util.BackpressureDrainManager.BackpressureQueueCallback buffer) throws MissingBackpressureException;\r\n```\r\n\r\nIn addition, for a proper instance of BackpressureOverflowStrategy, you have to reach into \r\n\r\n```java\r\nrx.internal.operators.OperatorOnBackpressureBuffer.ON_OVERFLOW_DEFAULT\r\n```\r\n\r\nfor example.'
p7531
aS"Thanks @akarnokd @stevegury \r\n\r\nI'm submitting a patch that eliminates the internal API leak. \r\n\r\nWhile doing it I'm starting to realize that without exposing the buffer or callback the motivation for a strategy vs a plain enum practically dissapears.  The point of using a strategy was to give users ability to implement their own strategies, this led me to expose the internal buffer (which is bad, obviously). However, without it, we're basically doing the same as an enum as the real overflow behaviour is not really in the Strategy.  It actually feels redundant with the onOverflow callback.\r\n\r\nTo make the strategy worth the extra code we'd need to make BufferSubscriber implement some public API interface defined by BackpressureOverflow through which we allow the user to actually interact with the buffer without leaking the internal API. Something like:\r\n\r\n```\r\nBPBuffer {\r\n  boolean dropOldest()\r\n  ...\r\n}\r\n```\r\nAnd then:\r\n\r\n```\r\nBPStrategy {\r\n  boolean triggerOn(BPBuffer buffer)  \r\n}\r\n```\r\nThis would become similar to my current patch (https://github.com/srvaroa/RxJava/commit/b09061048f34f539bbc022e846e7361ae6e38606) and enable meaningful strategies without leaking APIs. That said, I think that would be overengineering this patch.\r\n\r\nOptions I see:\r\n\r\na) revert to enums (problem: we're introducing an enum-based public API).\r\nb) leave the patch I'm submitting next (problem: we're committing to a public API based on a Strategy that doesn't really define any behaviour).\r\nc) define BPBuffer and BPStrategy for the sake of introducing a meaningful strategy-based API. I ca call triggerOn() with a null for now (so it effectively behaves as -b-) and proceed with making BufferSubscriber extend BPBuffer in a later patch.\r\n\r\nI'm leaning for (a), but let me know what you prefer."
p7532
aS'The current API looks good enough to me, only some small visibility and annotation issues.'
p7533
aS'Thanks for the reviews, I updated the patch.'
p7534
aS':+1:'
p7535
aS'Thanks @srvaroa for taking the time of writing a good PR!\r\n:+1:'
p7536
aS':+1: thanks!'
p7537
asg14
S'srvaroa:1.x'
p7538
sbsI3488
(iPull
Pull
p7539
(dp7540
g3
S'Replace them all with their respective Atomic* counterparts\r\nFor example AtomicLongFieldUpdater -> AtomicLong\r\nAddresses https://github.com/ReactiveX/RxJava/issues/3459'
p7541
sg5
S'1.x Remove all instances of Atomic*FieldUpdater'
p7542
sg7
(lp7543
S'Bug'
p7544
aS'Performance'
p7545
aS'Question'
p7546
asg10
I3488
sg11
(lp7547
S'As @artem-zinnatullin mentioned, field updaters were introduced to reduce number of allocations and runtime size of the library; especially for the Android platform.\r\n\r\nAlthough field updaters have 1-5% overhead compared to Unsafe, the same overhead may manifest with Atomic instances due to the one level indirection, plus usually the surrounding logic forces a re-read of the AtomicXXX field all the time if not done with care.\r\n\r\nSee my other comments in the code.'
p7548
aS"I've finished my review."
p7549
aS'Thanks for the quick review'
p7550
aS'@akarnokd I think I addressed all your feedback'
p7551
aS'Generally looks okay now. Could you squash your commits into a single commit?'
p7552
aS'Sure thing. Squashed'
p7553
aS'Thanks.'
p7554
aS'The changes look okay. Could you do a comparison benchmark of OperatorObserveOnPerf mainly (and post the comparison image made via [JMH-Compare-GUI](https://github.com/akarnokd/jmh-compare-gui) ) ?'
p7555
aS"I started a run on this branch now using `./gradlew benchmarks '-Pjmh=.*OperatorObserveOnPerf.*'`. The ETA for that is in over 2 hours. Does that seem right?"
p7556
aS"I ran JMH yesterday for this commit and the preceding one. The results are on my computer at home, and I'm at work now. I'll post them when I get back"
p7557
aS"Here is the screenshot. The first result is from 51527b7d17652a493e2c73f8724ebc62253a7e4b, the second one is from after the changes in this pull request:\r\n![image](https://cloud.githubusercontent.com/assets/964550/11078097/88f7d050-87b8-11e5-8f0e-a2c909688a79.png)\r\n\r\n@akarnokd I'm not sure if I used the GUI right. I can't get it to use something as a baseline. I pasted the result from 51527b7d17652a493e2c73f8724ebc62253a7e4b first, and then the result from this pull request. Do I need to do something else?"
p7558
aS'Right click in a cell and you get a popup menu with options.'
p7559
aS'Otherwise, no performance regression. :+1:'
p7560
aS':+1: '
p7561
aS'Keep the locals as I suggested. JIT re-reads them unfortunately. I read and experienced this myself with JCTools queries and range().'
p7562
aS'@artem-zinnatullin I removed the erroneous annotations'
p7563
aS':+1:, thanks!'
p7564
aS'Please squash this again.'
p7565
aS'Done'
p7566
aS'Thanks for contributing.'
p7567
asg14
S'markrietveld:1.x'
p7568
sbsI3491
(iPull
Pull
p7569
(dp7570
g3
S"It turns out serializing `request()` calls with regular `onXXX()` calls can be problematic because a `request()` may trigger an emission of events which then end up being queued (since `emitting == true`). If the request is large and the queue otherwise unbounded, this will likely cause OOME.\r\n\r\nIn case of `scan`, the fix was to make the missing request accounting and arrival of the `Producer` independent of the event's emitter loop; there is no need for them to be serialized in respect to each other.\r\n\r\nIn case of the `ProducerObserverArbiter` where the request accounting and producer swapping has to be serialized with the value emission, the solution is to call `request()` outside the emitter-loop.\r\n\r\nThere shouldn't be any issue with 2.x `scan()` because in 2.x, scan receives the `Subscription` before it allows the downstream to request anything so there is no missing requested to be handled.\r\n\r\nThis should resolve #3490. As far as I can remember, no other operator should have such problems because all others use `ProducerArbiter` which is independent of `onXXX` emission serializations."
p7571
sg5
S"1.x: make scan's delayed Producer independent of event serialization"
p7572
sg7
(lp7573
S'Bug'
p7574
asg10
I3491
sg11
(lp7575
S"Can we get this one reviewed and in a release soon please? This is a blocker for me and precludes me using 1.0.15 and 1.0.16. It's a serious bug with `scan` and I'm nervous for others too that this is out there in another release (1.0.16)."
p7576
aS'Is `ProducerObserverArbiter` used in the public API? It appears to only be in use in the tests. '
p7577
aS'It was added as a tool for building operators but I usually inline the algorithm.'
p7578
aS"Okay. So it's more like a pattern that gets pasted into operators. Do you usually inline for performance reasons or for custom functionality? "
p7579
aS':+1: '
p7580
asg14
S'akarnokd:ScanUnboundedRequestFix1x'
p7581
sbsI3493
(iPull
Pull
p7582
(dp7583
g3
S'Reported in #3492.'
p7584
sg5
S'1.x: fix for zip(Obs<Obs<T>>) backpressure problem'
p7585
sg7
(lp7586
S'Bug'
p7587
asg10
I3493
sg11
(lp7588
S':+1: '
p7589
asg14
S'akarnokd:ZipBackpressureFix1x'
p7590
sbsI3495
(iPull
Pull
p7591
(dp7592
g3
S"This add a perf class that benchmarks just() and optimizations it allows. I'll use this as a baseline to compare the upcoming backpressure-aware version against.\r\n\r\nBenchmark results of throughput (ops/s) (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10963349/0d15c6e8-83a0-11e5-9f28-646b57d08879.png)\r\n"
p7593
sg5
S'1.x: benchmark just() and its optimizations.'
p7594
sg7
(lp7595
S'Performance'
p7596
asg10
I3495
sg11
(lp7597
sg14
S'akarnokd:JustPerf1x'
p7598
sbsI3496
(iPull
Pull
p7599
(dp7600
g3
S'One does not simply add backpressure support to `just()`.\r\n\r\nFixes\r\n------\r\nThe reason for this is the bugs hidden by the lack of backpressure support of just(): the overwriting of a previous Producer by `timeout`, `zip` and `subscribeOn`. I\'ve fixed up `timeout` with a proper `ProducerArbiter`, had to apply the bugfix from #3493 to `zip` (may conflict) and had to rewrite `subscribeOn` from scratch and have it an `OnSubscribe`. This change required that `Single.subscribeOn` to be rewritten as well.\r\n\r\nBenchmark\r\n----\r\nLet\'s see the benchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10972989/ec1eb288-83db-11e5-951c-48840b165b7e.png)\r\n\r\nThere are two ways to implement backpressure: with strong atomics or with plain field accesses. The latter tries to exploit the high chance that there won\'t be concurrent calls to `request()` ever and thus saves on the atomics. As far as I can tell, there is nothing in RxJava 1.x or 2.x that would violate this assumption. However, I added an escape hatch in case of rogue requesters: set the `rx.just.strong-mode` system parameter to "true" and `just` will run with strong atomics.\r\n\r\nAs seen in the table, the weak version is just slightly better (+3-+10%) in some cases and slightly worse (up to -3%) in other cases. Note, however, the original cases have 2x-5x less overhead. \r\n\r\nMaybe the most revealing are the `simple`, `simpleEscape` and `simpleEscapeAll` comparison between and within version. What\'s seen there is that with the original version, the JIT converted the test into a pure stack-allocation and thus saving on overhead in the `simple` case. As the other tests add escapes, it forces the JIT to do regular allocations. Interesting that with this PR, the escape doesn\'t really matter: this is due to how `Subscriber.setProducer` makes the JIT believe the producer escapes.\r\n\r\nIn the `simpleEscapeAll` (which should be the most restrictive for JIT), the overhead is still 2 - 2.3 times bigger: this is due to the extra allocation of a `Producer` instance when subscribing.\r\n\r\nIf one remembers my recent [blog post](http://akarnokd.blogspot.hu/2015/10/comparison-of-reactive-streams.html), it can be seen that RxJava 2.x does quite well, about 30 Mops/s in the range-1 test (which is equivalent to `simple`). \r\n\r\nWhere does the overhead come from? `SubscriptionList`. In 1.x, the `Subscriber` creates a `SubscriptionList` whether or not it is ever required. (I\'ve tried my best several times to defer the creation of this list to no success: the performance improved for some cases while worsened for others, see #3479.)\r\n\r\nThe strong/weak optimization is not applied to `scalarScheduleOn`. I haven\'t benchmarked it but I guess the scheduling overhead overshadows it anyways.\r\n\r\nConclusion\r\n------\r\n\r\nI believe the correctness of `just` is more important than its performance, but the increased overhead bothers me nonetheless. Given the architecture of 2.x, I\'ll look into ways to get rid of the mandatory `SubscriptionList` allocation without breaking public API classes such as `Subscriber`.'
p7601
sg5
S'1.x: make just() support backpressure'
p7602
sg7
(lp7603
S'Bug'
p7604
aS'Enhancement'
p7605
aS'Performance'
p7606
asg10
I3496
sg11
(lp7607
S'Rebased.'
p7608
aS'Interesting. Thanks! :+1: '
p7609
aS'This should probably be checked out by @benjchristensen before merging'
p7610
aS'Just to check, you are fine with the overhead, right?'
p7611
aS'@akarnokd yes. I think consistent behavior is worth the hit. '
p7612
aS':+1: '
p7613
aS'Any plans to merge this one?'
p7614
aS'We are waiting for Ben but I have to fix the merge conflict as well now I see.'
p7615
aS"Sorry, I'll redo this entire PR, everything is messed up."
p7616
aS'Replaced by #3614 '
p7617
asg14
S'akarnokd:JustBackpressure1x'
p7618
sbsI3497
(iPull
Pull
p7619
(dp7620
g3
S"The internal queue has to be trimmed while the source is active and the\r\nbackpressured-replay shouldn't drop values in case the requests are\r\ndelayed relative to each other."
p7621
sg5
S'2.x: fix takeLast(time) replay behavior causing discontinuity'
p7622
sg7
(lp7623
S'Bug'
p7624
asg10
I3497
sg11
(lp7625
S'Closing, will be included in the complete backport PR.'
p7626
asg14
S'akarnokd:TakeLastTimedFix2x'
p7627
sbsI3498
(iPull
Pull
p7628
(dp7629
g3
S'~~The parameter is a capacity hint, but more frequently confused with a\r\nbuffer size like replay(int) than it is correctly understood. It also\r\noffers no guarantees, only the weak hope of optimization.~~\r\n\r\nThe parameter is a capacity hint, but more frequently confused with a buffer size like replay(int) than it is correctly understood. It also offers no guarantees, only the weak hope of optimization.\r\n\r\nThis change renames the method, deprecating the old name. It also adds javadoc calling out that the parameter is not a bound and referencing replay(int).autoConnect() as a way to achieve that behavior.\r\n\r\n'
p7630
sg5
S'1.x: Rename cache(int) to cacheWithInitialCapacity(int)'
p7631
sg7
(lp7632
S'Discussion'
p7633
asg10
I3498
sg11
(lp7634
S"Hi. It is part of the public API and can't be just removed. In addition, why did you modify the underlying internal class?"
p7635
aS"How about `@Deprecated`?\r\n\r\nI modified the internal class because the only use of that constructor parameter was in the removed operator.  If you'd prefer to deprecate, of course I'll revert that modification."
p7636
aS'We are kind of set for 1.1 in terms of API visibility. How about updating the javadoc and list alternatives?'
p7637
aS"I've pointed developers directly at that javadoc, and they've still misunderstood the parameter.  And that's best case!  Any developer who just looks at the signature, which is most of them, misunderstands the parameter. Everyone assumes it's a bound on the buffer size, and it's so obvious that why would you read the javadoc?\r\n\r\nIt'd be great to get this resolved in the 1.x series.\r\n"
p7638
aS"Huge +1 to `@Deprecated` + simlink like `cacheWithInitialBufferSize`/etc, `cache(int)` is very, very misleading (every member of our team had problems with understanding that `int` is not a size of the cache's buffer)."
p7639
aS'Updated with rename, deprecation, and javadoc.'
p7640
aS':+1: '
p7641
aS'You can post a PR against 2.x where you can simply rename and no need for deprecation.'
p7642
aS"@stealthcode, @abersnaze what's the situation among Netflix devs regarding this?"
p7643
aS'ping Netflix team'
p7644
aS"From what I can tell, this is a change to an existing public facing method name and that's a no-no for 1.x. @abersnaze is committing a change to the contributors.md that explains what changes are allowed in patch release, minor releases, and major releases. Method signatures of non-beta and non-experimental methods are only accepted in major version releases. \r\n\r\nYou could mark both as deprecated and add a new method `cacheWithCapacityHint(int)`."
p7645
aS'Oh, I see. I misread the pull request. '
p7646
aS"I don't see the source of the confusion. `java.util.ArrayList` follows a similar convention in the constructor `public ArrayList(int initialCapacity)` and that is sufficient for me to understand it's usage. The array backed data type can be reallocated but it's better to tune it with an appropriate initial value. \r\n\r\nI suggest that we leave it alone in 1.x and rename it to `cacheUnbounded(int initialCapacity)` in 2.x. Also we should improve the javadocs to indicate the intended usage since there still seems to be confusion around this. "
p7647
aS'A list is a data structure designed to grow. When you see `cache(4)` you do not think of a list, but of a fixed size cache, as most will be bounded by some supplied value.\r\n\r\nAdditionally, an initial size is not required to create an array list and it\'s a constructor parameter. Not only do you have to opt-in to using this non-default constructor overload, you would have to look at the documentation for any idea what the value is for. This is _very_ different in that the size is required and it\'s a named method which should describe behavior but is misleading because of prior assumptions around the word "cache".'
p7648
aS'@JakeWharton the `cache` operator does not use a fixed size cache. I think that you are saying that the operator name should be enough to to convey the semantic meaning of an unbounded growing cache. I think that by renaming it to `cacheUnbounded(int initialCapacity)` that the usage will be made more clear and it would be discoverable by users who know to look for the `cache` operator. \r\n\r\nIf the term "cache" is not sufficient to indicate the contract then we should probably consider changing the name to one that does. What would be a better term for an operator that holds an ordered list of all events emitted from an observable to be replayed to all subscribers after the first?'
p7649
aS"@stealthcode Hence the name `cacheWithInitialCapacity`, introduced in this PR.  That name implies it's unbounded _and_ describes the integer parameter."
p7650
aS"To clarify: I don't really care what it's called in 2.x, as long as it's reasonably unambiguous (i.e., not `cache(int)`)."
p7651
aS"@JakeWharton I think @stealthcode was agreeing that a new method name would make it clearer but not that `cacheWithInitialCapacity` or that it should be done on the 1.x branch.\r\n\r\nI'm not very interested in spending a lot of energy bike shedding over the name so can we just have a vote for we want to do: (vote for as many options as you want in the order or preference)\r\n\r\nA) do nothing\r\nB) deprecate `cache(int)` and make `cacheWithInitialCapacity(int)` in 1.x\r\nC) deprecate `cache(int)` and make `cacheUnbounded(int)` in 1.x\r\nD) remove `cache(int)` and make `cacheWithInitialCapacity(int)` in 2.x\r\nE) remove `cache(int)` and make `cacheUnbounded(int)` in 2.x\r\n\r\nMy vote is A, E, C, D, B.\r\n\r\n@loganj @stealthcode @akarnokd @JakeWharton @artem-zinnatullin.  We'll [tabulate](https://en.wikipedia.org/wiki/Single_transferable_vote) the votes on Monday."
p7652
aS'My vote is A, E'
p7653
aS'I vote E, A, C'
p7654
aS'I vote B, D, A'
p7655
aS'I would like @JakeWharton votes but so far the A is the winner.'
p7656
aS'B, C, D, E.  presuming a change in 1.x means also making the change in 2.x.\r\n\r\nWe have empirical evidence that the name and parameter are confusing to users. I can\'t imagine why we\'d ignore that evidence based on our own lack of confusion.\r\n\r\nI also think it\'s funny that this balloting gives a single "do nothing" equal weight to four "do something" options.  By my count, "do something" is winning even before my vote.'
p7657
aS"B, C myself.\r\n\r\nI think it's just confusing and have been bitten by `cache(int)` before."
p7658
aS'I vote B'
p7659
aS'I think that E&C equate to to just C... (assuming that all api changes made in 1.x are carried over). '
p7660
aS"B won and I'm fine with that. @loganj could do the honors of changing this PR to match. Just to be clear that means that `Observable` will have the methods, `cache()`, `@Deprecated cache(int)` and `cacheWithInitialCapacity(int)` rebased to one commit off of the 1.x branch."
p7661
aS"Ping @loganj, let's do it!"
p7662
aS'Updated to specified naming. Apologies for the delay, was traveling on vacation.'
p7663
aS':+1:'
p7664
aS':+1: '
p7665
asg14
S'loganj:remove_capacity_hint'
p7666
sbsI3499
(iPull
Pull
p7667
(dp7668
g3
S'It comes up quite frequently that one wants to map values and throw exceptions from within the same function (for example, when dealing with blocking IO that may throw `IOException`). It can be inconvenient to use try-catch and gift-wrap the checked exception into a `RuntimeException`.\r\n\r\nThis PR adds a `Func1E` functional interface which has a generic exception parameter as well and the operator `mapIO` that accepts it. Changing the existing `map` is out of question because of binary compatibility.'
p7669
sg5
S'1.x: operator mapIO which is like map but allows checked exceptions'
p7670
sg7
(lp7671
S'Discussion'
p7672
aS'Enhancement'
p7673
aS'Feature-Request'
p7674
asg10
I3499
sg11
(lp7675
S"Why `mapIO` if it's agnostic to any checked exception? I realize that's the motivating use case, but it's not the implementation (nor does it have anything to do with IO)."
p7676
aS"The operator naming is up for discussion, I suggested `mapIO` because this is the shortest one that made sense to me. We can't overload `map()` due to dynamic languages and problems with arity-based lambda disambiguation in compilers."
p7677
aS"Perhaps `mapChecked`. \r\n\r\nBy the way in v2 have we considered designing `Func*` so it throws `Exception ` (generic or otherwise)?  It strikes me as quite a drawback of v1 that when say an `IOException` is thrown by a `Func1` that that exact exception isn't the one that arrives at the subscriber. Instead we are forced to throw a `RuntimeException` of some kind which though it might wrap the `IOException` is not it! Of course there would be the added benefit of no try catch blocks as well.\r\n\r\nIncidentally for Java 8 purposes I use a utility class I call [`Checked`](https://github.com/davidmoten/rxjava-extras/blob/master/src/main/java/com/github/davidmoten/rx/Checked.java) like below which wraps Actions and Funcs with RuntimeExceptions:\r\n\r\n```java\r\nsource.doOnNext(Checked.a1(s -> os.write(s.getBytes())))\r\n```\r\n\r\nThough `Checked` is reasonably convenient I would still prefer that the exact Exception thrown arrived at the subscriber in general. This is presumably doable in v2 (and @abersnaze  had some nifty ideas for v1 ages ago in #1305)."
p7678
aS"In current v2, I'm using as much Java 8 as possible and unfortunately, Java 8 doesn't have standard functional interfaces that specify throws. I know that `map` is a common pain point. Given `mapIO`, you can replace the sideeffecting `doOnNext` with it so we can avoid drastic API expansion.\r\n\r\nI've been also thinking about a `mapAction` operator where the lambda function has options to return a value, skip a value, throw/complete with an error and complete the sequence. Like fusing `mapIO`, `filter` and `takeWhile` into a single access point.\r\n\r\n```java\r\ninterface MapActions<T, R, E extends Exception> {\r\n    T input();\r\n    void output(R r);\r\n    void error(E e);\r\n    void skip();\r\n    void stop();\r\n}\r\n\r\npublic <R, E extends Exception> Observable<R> mapAction(\r\n    Action1E<MapActions<T, R, E>, E> mapper);\r\n```"
p7679
aS"I'm not to fond of a more functions on rx.Observable, operator implementation code, and test for implementation. I guess I would be ok with @davidmoten [`Checked`](https://github.com/davidmoten/rxjava-extras/blob/master/src/main/java/com/github/davidmoten/rx/Checked.java) but would've preferred #1305."
p7680
aS"I would also prefer the changes in #1305. Cursory tests of the solution in @abersnaze's pull request show that it's simple to use either a checked interface or unchecked. \r\n\r\n```java\r\npublic interface Action1Checked<T1> extends Action {\r\n    public void call(T1 t1) throws Exception;\r\n}\r\npublic interface Action1<T1> extends Action1Checked<T1> {\r\n    public void call(T1 t1);\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    bar(o->{});\r\n    foo(o->{throw new Exception();});\r\n}\r\n\r\npublic static void foo(Action1Checked<Object> a) {\r\n    try {\r\n        a.call(new Object());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n\r\npublic static void bar(Action1<Object> a) {\r\n    a.call(new Object());\r\n}\r\n```\r\n\r\n@benjchristensen @headinthebox @akarnokd how should this operate in 2.x? \r\n\r\na) support throwing checked exceptions\r\nb) have both checked and unchecked variant of each operator that's popular enough to warrant one\r\nc) current support model of just funcs/actions that throw only runtime exceptions\r\n\r\nI think we should support this case first class instead of fight against the language feature. We can't force users to write funcs and actions where all exceptions are appropriately caught and handled so the code to handle any runtime exception must be written and maintained."
p7681
aS"Maybe this would just confuse people using 1.x so let's stick to utility wrappers (or perhaps sneaky throwers?).\r\n\r\nAs for 2.x, `fromCallable` already allows a throwing lambda and me may go for custom `FunctionE` for `map` and `flatMap` as these seem to be the main targets for checked-exception requiring operations."
p7682
aS"I'm afraid that if we will start adding exception-tolerant versions of operators we will end up 1.5-2xing amount of operators in RxJava 1.x.\r\n\r\n@akarnokd, others: what if we will make all or as much as possible operators exception-tolerant in RxJava 2.x and leave 1.x as is?"
p7683
aS"I'm closing this and we can revisit the problem in 2.x later on."
p7684
asg14
S'akarnokd:MapIO1x'
p7685
sbsI3500
(iPull
Pull
p7686
(dp7687
g3
S'Nothing that could change logic or application flow, just minor refactors to be consistent with good practices and clean code.\r\nTo sum up changes:\r\n- Simplified some conditions\r\n- Changed small l to L in long number, as l tends to look like 1 and might confuse\r\n- Removed "return" statements where those are not necessary (last instruction in function)\r\n- Inlined returns where there were no need for creating new variable (easier to read)\r\n- Deleted unnecessary colons'
p7688
sg5
S'Some code clean ups.'
p7689
sg7
(lp7690
S'Cleanup'
p7691
asg10
I3500
sg11
(lp7692
S'Could you also squash the commits?'
p7693
aS'Squashed :)'
p7694
aS':+1:'
p7695
aS':+1: '
p7696
aS'looks good.'
p7697
asg14
S'dromato:1.x'
p7698
sbsI3501
(iPull
Pull
p7699
(dp7700
g3
S"// Actually, I am slowly preparing RxJava for running tests on Android during CI.\r\n\r\nNetflix team: PTAL, hope you're ok with new rxjava-project plugin."
p7701
sg5
S'1.x: Gradle Wrapper 2.8, RxJava project plugin 3.0.0'
p7702
sg7
(lp7703
S'Build'
p7704
asg10
I3501
sg11
(lp7705
S':+1:'
p7706
aS'Out of curiosity, what happened to this?'
p7707
aS"Sad story :( \r\n\r\nPR was not merged for 2 months and I decided to close it because Gradle shipped two releases after 2.8. \r\n\r\nNetflix team didn't show any interest. \r\n\r\nI guess Gradle 2.11 will be released sooner than your PR with 2.10 will be merged, though I wish you good luck! "
p7708
aS'@akarnokd can you provide any insight?'
p7709
aS'See #3659. I use 2.8 without Netflix plugin in my other projects, RxJava breaks from time to time.'
p7710
asg14
S'artem-zinnatullin:gradle-2.8-rxjava-project-3.0.0'
p7711
sbsI3504
(iPull
Pull
p7712
(dp7713
g3
S'These changes may help in reducing problems when the tests are run on an Android emulation:\r\n\r\n  - set an uncaught exception handler because the native error handler crashes the entire test run.\r\n  - reduce memory usage by some tests by doing fewer loops or items.\r\n  - fix a missing backpressure case as Android starts threads much slower (100ms?).'
p7714
sg5
S'1.x: Test adjustments to reduce problems when tests run on Android'
p7715
sg7
(lp7716
S'Test'
p7717
asg10
I3504
sg11
(lp7718
S'Adjusted tests as requested.'
p7719
aS'@akarnokd now `testErrorThrownIssue1685` fails on CI'
p7720
aS"I've increased the wait to 1s, let's hope that's enough waiting time. Travis tends to have some strange thread delays."
p7721
aS':+1: '
p7722
aS'Can we merge this, please? Required for running tests on Android during the CI #3503.'
p7723
aS':+1: '
p7724
aS':+1: '
p7725
asg14
S'akarnokd:AndroidTestFixes'
p7726
sbsI3506
(iPull
Pull
p7727
(dp7728
g3
S"This change factors out the body of `lift()` into a named class that gives access to the operator and source parameters. By using this information, other operators can perform what I call **operator macro-fusion**.\r\n\r\nOne such example with this PR is the repeated use of the operator `mergeWith` which when done in the classical way creates a long linked-list of sources merged in pairs, often leading to stack overflows\r\nand degraded performance. However, if `mergeWith` can see that it is applied to an existing mergeWith, the two operators can use a common list of sources and then turn into a one-level merge() with n + 1\r\nsources (the previous graph will then be GC'd). Don't worry, this doesn't destroy the original assembled sequence. For example, given `c = a.mergeWith(b); d = c.mergeWith(e);` both c and d can be freely subscribed to and still do the same thing.\r\n\r\nNote also that this PR conflicts with PR #3477 since the array-based `merge(from(os))` has a different type.\r\n\r\nI didn't officially benchmarked this due to the stackoverflow with head. Given the 10002 values merged in the unit test in 34ms (i7 4790, Windows 7 x64, Java 8u66) which yields ~294 kOps/s."
p7729
sg5
S'1.x: enable operator/source fusion by named operator lifter'
p7730
sg7
(lp7731
S'Performance'
p7732
asg10
I3506
sg11
(lp7733
sg14
S'akarnokd:OnSubscribeLift'
p7734
sbsI3507
(iPull
Pull
p7735
(dp7736
g3
S"This PR is a backport of the 2.x `combineLatest` with `null` support and let's the programmer combine more than 128 sources at once. Note that 2.x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment; I kept these in case such features are required by 1.x some day.\r\n\r\nThe original had this 128 limit due to using a single and non-parametric RxRingBuffer to store values from sources. In addition, the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the buffer.\r\n\r\nThis PR uses an unbounded-linked SPSC queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary).\r\n\r\nThe algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream, that source subscriber gets the request() replenishment call that generated the row."
p7737
sg5
S'1.x: combineLatest can now combine arbitrary number of sources'
p7738
sg7
(lp7739
S'Enhancement'
p7740
asg10
I3507
sg11
(lp7741
S"@artem-zinnatullin  I didn't bother but now I'm more sensitive to Android reflection issues."
p7742
aS'Rebasing...'
p7743
aS"... rebased. (Did I mention rebase doesn't really work with the latest Eclipse; there is no continue/abort menu option and the branch gets stuck and needs to be manually deleted as switching is also disabled)."
p7744
aS"I've tried it a few times and it is too alien for me. I can't find features and its internal compiler plays tricks with me sometimes."
p7745
aS'we need this one, pls merge'
p7746
aS':+1: from me (test needs a fix), @zsxwing can you please take a look?'
p7747
aS'Closing out, some unknown merge conflicts appeared, maybe due to age.'
p7748
aS'See #3661'
p7749
asg14
S'akarnokd:CombineLatestManySources1x'
p7750
sbsI3509
(iPull
Pull
p7751
(dp7752
g3
S"It seems some Samsung devices running 5.x mess with field names so\r\nreflection can't find them.\r\n\r\nIf the `PlatformDependent.resolveAndroidApiVersion` logic throws due to\r\nthe missing field (but not the class), the original code considered it\r\nto be a non-Android platform and went ahead with `Unsafe` stuff which\r\ncauses NPEs at many places.\r\n\r\nThe change splits the class check and the version check. If the version\r\ncheck fails, it returns a default version (7) value so the `Unsafe`\r\npaths are not triggered."
p7753
sg5
S'1.x: split Android detection and version detection'
p7754
sg7
(lp7755
S'Bug'
p7756
asg10
I3509
sg11
(lp7757
S"If Samsung runtime renames fields in all classes (even `android.os.Build`)  it would break way more libraries that use reflection on fields, especially JSON parsers/serializers and we will have tons of crashes on such devices. \r\n\r\nI mean, this workaround will probably never work.\r\n\r\ncc other Android devs, maybe I'm missing something, but I don't think that this PR will fix Samsung problem."
p7758
aS'Yes. This class and field can never be renamed or the entire phone would fail to work.'
p7759
aS"Is there a chance Samsung uses some whitelist that doesn't touch most common libraries but messes with others?"
p7760
asg14
S'akarnokd:RobustAndroidVersionCheck'
p7761
sbsI3510
(iPull
Pull
p7762
(dp7763
g3
S"I forgot to add the choice because 2.x `SpscArrayQueue` doesn't use Unsafe. I copied the `SpscAtomicArrayQueue` from #3169 and I hope it won't conflict. This is the drawback of long trail of unmerged fixes and enhancements...\r\n\r\nReported in #3508 . "
p7764
sg5
S'1.x: eager concatMap to choose safe or unsafe queue based on platform.'
p7765
sg7
(lp7766
S'Bug'
p7767
asg10
I3510
sg11
(lp7768
S':+1: '
p7769
asg14
S'akarnokd:EagerConcatMapUnsafeFix'
p7770
sbsI3511
(iPull
Pull
p7771
(dp7772
g3
S'Use the standard CompositeSubscription instead.\r\n\r\nRelated issue: #3105'
p7773
sg5
S'1.x: Remove unused and inefficient SubscriptionRandomList.'
p7774
sg7
(lp7775
S'Cleanup'
p7776
asg10
I3511
sg11
(lp7777
S':+1: '
p7778
asg14
S'akarnokd:CleanupSRL1x'
p7779
sbsI3512
(iPull
Pull
p7780
(dp7781
g3
S"The documentation was wrong in two points: unsubscription doesn't call` onCompleted` and unsubscription doesn't directly prevent delivery of `onXXX` events since the implementation doesn't even check isUnsubscribed: (it is the responsibility of the upstream to do that).\r\n\r\nRelated issue: #3059."
p7782
sg5
S'1.x: fix SafeSubscriber documentation regarding unsubscribe'
p7783
sg7
(lp7784
S'Documentation'
p7785
asg10
I3512
sg11
(lp7786
S':+1: '
p7787
aS':+1: '
p7788
asg14
S'akarnokd:SafeSubscriberDocFix'
p7789
sbsI3513
(iPull
Pull
p7790
(dp7791
g3
S"This adds a new pattern and lookup method that let's the developer specify the custom plugins with shorter system property keys. Android is quite restrictive and allows only 31 characters.\r\n\r\nThe new pattern splits the target simple class name and its implementation into two separate system properties:\r\n\r\n```\r\nrxjava.plugin.1.class=SimpleClassName\r\nrxjava.plugin.1.impl=path.to.impl.Class\r\n```\r\n\r\nThe index tag (`1`) can be any string of your chosing:\r\n\r\n```\r\nrxjava.plugin.mykey.class=SimpleClassName\r\nrxjava.plugin.mykey.impl=path.to.impl.Class\r\n```\r\n\r\nbut make sure they are paired, otherwise nothing will happen.\r\n\r\nIf there are multiple `class` entries with the same `SimpleClassName` one of them will be chosen (depending on the walk order in `java.util.Properties`).\r\n\r\nRelated issue #2835."
p7792
sg5
S'1.x: add shorter RxJavaPlugin class lookup approach.'
p7793
sg7
(lp7794
S'Enhancement'
p7795
asg10
I3513
sg11
(lp7796
S':+1: '
p7797
aS'An alternative pattern could be this:\r\n\r\n```\r\nrxjava.plugin.1=SimpleClassName,org.package.naming.ActualClass\r\n```\r\n'
p7798
aS'I agree that if the plugin cannot be found we should crash the app. '
p7799
aS'Updated the code to crash if the plugin implementation is missing.'
p7800
aS'Thanks!'
p7801
asg14
S'akarnokd:ShorterPluginNames'
p7802
sbsI3514
(iPull
Pull
p7803
(dp7804
g3
S'The test failed on Travis and locally if my machine was under heavy load without interacting with the mock. This change gives more time in the inner await and reports the exception instead of itself throwing.'
p7805
sg5
S'1.x: SyncOnSubscribeTest.testConcurrentRequests give more time.'
p7806
sg7
(lp7807
S'Test-Failures'
p7808
asg10
I3514
sg11
(lp7809
S"Okay :+1: do you think it'd be a good idea to change this to use the test scheduler?"
p7810
aS'The request has to happen between while the execution is inside the function. Perhaps if `TestSubscriber` is created before the `Func2`, the body can reference it and issue a `requestMore` synchronously.'
p7811
aS':+1: '
p7812
aS"I'm merging this so PRs won't break on it."
p7813
asg14
S'akarnokd:SyncOnSubscribeFix'
p7814
sbsI3515
(iPull
Pull
p7815
(dp7816
g3
S'For some strange reason, the interrupted flag is sometimes still set when the next JUnit test method runs and `await` will throw immediately.'
p7817
sg5
S'1.x: BlockingUtils test: clear interrupted flag before/after'
p7818
sg7
(lp7819
S'Test-Failures'
p7820
asg10
I3515
sg11
(lp7821
S':+1: '
p7822
aS':+1: '
p7823
asg14
S'akarnokd:BlockingUtilsInterruptedFix'
p7824
sbsI3517
(iPull
Pull
p7825
(dp7826
g3
g53
sg5
S'Update CHANGES.md for v1.0.16'
p7827
sg7
(lp7828
sg10
I3517
sg11
(lp7829
S':+1: '
p7830
aS'@abersnaze @benjchristensen @akarnokd @zsxwing @stevegury '
p7831
aS'Can we get #3493 in as well?'
p7832
aS'Merged #3493 and updated.'
p7833
aS':+1:'
p7834
aS'LGTM :+1: '
p7835
aS'Thanks @akarnokd @abersnaze @JakeWharton @artem-zinnatullin '
p7836
asg14
S'ReactiveX:changesmd-v1.0.16'
p7837
sbsI3519
(iPull
Pull
p7838
(dp7839
g3
S'Closes #3503.\r\n\r\nIn short:\r\n\r\n* Created `rxjava` gradle module and moved `src` to `rxjava/src`.\r\n* Created `android-tests` module and configured it to run tests from `rxjava/src/test` on Android.\r\n* Tuned build scripts so we can run builds on Android/JDK concurrently.\r\n* Changed `MemoryMXBean` to `Runtime` in `ExecutorSchedulerTest` because `MemoryMXBean` is not presented on Android.\r\n\r\nTODO:\r\n\r\n* Fix all failing tests Android (usually timeout problems since Android emulator is :snail:): #3504, cc @akarnokd.\r\n* Decide which Android APIs we want to run tests on, I suggest at least one API with Dalvik VM (with Java 6 and Java 7) and one with ART, for example 18, 19 and 22.\r\n\r\n@JakeWharton PTAL'
p7840
sg5
S'1.x: Run tests on Android!'
p7841
sg7
(lp7842
S'Test'
p7843
asg10
I3519
sg11
(lp7844
S'Can we do this without moving any files?'
p7845
aS'@akarnokd done!'
p7846
aS"Generally, I'm not against testing on Android but I'm afraid it will hinder progress on RxJava due to platform nuances. I remember when RxJava had every other Rx language and tool under the same main project and a change for Java caused build failures because something didn't compile in RxScala or some test failed in RxClojure. Would it be possible to have this as a separate project where Gradle/travis checks out the RxJava code from github and runs the tests on the emulator?"
p7847
aS"Android is just another Runtime, see it as different JVM (though it's not J-VM, but it does not matter in this case). Scala, Clojure, etc run on the JVM too, so your example is not directly applicable to the intention of running tests on Android. Your example is more about RxAndroid and I agree that it should be separate project and it is in .\r\n\r\nThousands of Android apps use RxJava, millions of Android devices run RxJava code every minute. And RxJava has some Platform-dependent code. Would be great to check that it works as expected :smile: \r\n\r\n>Would it be possible to have this as a separate project where Gradle/travis checks out the RxJava code from github and runs the tests on the emulator?\r\n\r\nIt's possible, but it will be very hard since it requires changes of the tests (timeouts, etc). Also, it won't give immediate feedback to PRs in the RxJava.\r\n\r\nI'm sorry for the delay with this PR, I'm very busy this week, will try to finish it soon."
p7848
aS"> It's possible, but it will be very hard since it requires changes of the tests (timeouts, etc). Also, it won't give immediate feedback to PRs in the RxJava.\r\n\r\nWith appropriate privileging, a secondary RxJava test runner outside of this repo could still post status checks to PRs -- it probably couldn't easily use Travis, but a custom runner on Jenkins would have enough flexibility to do that. Concerns about changes to tests would still remain."
p7849
aS"I'd still prefer to run tests on Android as part of current RxJava CI, actually there're just few tests fail with timeouts because Android emulator is slow as hell, we can write custom test runner or JUnit rule and add `AndroidTimeout` annotation to fix that and not touch regular tests runs.\r\n\r\nPlease feel free (anyone) to work on this, hopefully I'll do it at some point, but I don't have much time right now."
p7850
aS"I'm still not in favor of running the tests for Android in the same CI process.\r\n\r\nThe alternative I see is to somehow package up the unit tests as well and have a separate project run it it, or if a gradle script could be written to checkout the RxJava sources and run the tests in that way."
p7851
aS"Let's close it for now, I have a task to run RxJava tests on Android as part of [CI of RxJavaProGuardRules project](https://github.com/artem-zinnatullin/RxJavaProGuardRules/issues/4).\r\n\r\nHope I'll find some time to work on it in the summer."
p7852
asg14
S'artem-zinnatullin:run-tests-on-android'
p7853
sbsI3524
(iPull
Pull
p7854
(dp7855
g3
S'fix for javadoc issue #3523 '
p7856
sg5
S'fix subscribe() javadoc '
p7857
sg7
(lp7858
S'Documentation'
p7859
asg10
I3524
sg11
(lp7860
S':+1:'
p7861
aS':+1: '
p7862
aS':+1: '
p7863
aS'Thanks!'
p7864
asg14
S'davidmoten:subscribe-javadoc-fix'
p7865
sbsI3526
(iPull
Pull
p7866
(dp7867
g3
g53
sg5
S'2.x: Reduse verbosity with varargs [WIP]'
p7868
sg7
(lp7869
S'Enhancement'
p7870
asg10
I3526
sg11
(lp7871
S"Hi and thanks for the PR, but unfortunately, the Java 6 target makes varargs inconvenient. This is why we have that many overloads for the most common operators so small usages, 2 - 9 data sources, don't force the caller to add `@SuppressWarnings`."
p7872
aS"@akarnokd Thank you for so fast reply. But I saw java8's constructions in the class I changed. If it is ok fo java8, it is ok for varargs. And code have pased travis tests. And there is, already, varargs in the Single.java, for example in the amb() method. Am I wrong?\r\n"
p7873
aS"Oh sorry, didn't look at the targed branch. Indeed, this shouldn't be much of a problem with Java 7+ if you add the `@SafeVarargs`, however, javac sometimes finds ambiguity with such methods for some reason whereas Eclipse's compiler is fine. This is the main reason I've named the same method you are proposing `concatArray`. So could you do the following?\r\n\r\n  - rename the method to `concatArray`,\r\n  - add `@SafeVarargs` to it, and\r\n  - squash the commits.\r\n\r\nIn addition, note that since this will conflict with #3410, it is likely you'll have to rebase/redo this work."
p7874
aS'@akarnokd Ok. I will do it. For a while this PR will have [WIP] prefix.\r\nI will inform you, when everithing is done.'
p7875
aS'Thanks for your contribution. This PR is quite old, plus, the decision has been made 2.x has to be Java 6 where suppressing varargs is still a problem. '
p7876
asg14
S'alexVengrovsk:polis-0-0-1'
p7877
sbsI3528
(iPull
Pull
p7878
(dp7879
g3
S'`delay` delays the `onCompleted` event and `unsubscribe` is called when `onCompleted` finishes. So if we put a `o.zipWith(Iterable, func)` before `delay`, such as `o.zipWith(Iterable, func).delay(...)`, `o` may keep emitting items even if `zipWith` emits an `onCompleted` event. This PR just fixed `OperatorZipIterable` to handle this case.\r\n\r\nFixes https://github.com/ReactiveX/RxScala/issues/180'
p7880
sg5
S'1.x: Avoid to call next when Iterator is drained'
p7881
sg7
(lp7882
S'Bug'
p7883
asg10
I3528
sg11
(lp7884
S':+1:'
p7885
asg14
S'zsxwing:zipIter-delay'
p7886
sbsI3529
(iPull
Pull
p7887
(dp7888
g3
S'As a result of #3527 discussion I noticed that `throttleFirst` does not comply with behaviour described in javadocs. Time windows used for emissions were supposed to be of constant duration yet could be effectively lengthened because the next time window always started at the time of the emission to downstream plus the window duration.\r\n\r\nTo demonstrate:\r\n\r\nConsider  `source.throttleWithFirst(1000, TimeUnit.MILLISECONDS)` where source emits \r\n\r\n```\r\nTime   Value    \r\n0       "a"\r\n1200    "b"\r\n2100    "c"\r\n```\r\n\r\nDesired result is:\r\n\r\n`a, b, c`\r\n\r\nyet previous version produced\r\n\r\n`a, b`\r\n\r\nA unit test has been added that failed with the previous version.\r\n'
p7889
sg5
S'1.x: fix time windows in throttleFirst'
p7890
sg7
(lp7891
S'Discussion'
p7892
asg10
I3529
sg11
(lp7893
S'In 2.x, this operator uses a scheduler, blocks emissions in the given time window and re-enables it once the time runs out. The window is emission relative and not periodic. The javadoc reads "passage of time" which could mean emission-relative blocking. @zsxwing what was the original intention? Is this implemented somewhere else?'
p7894
aS'You are right that there is ambiguity in the javadoc:\r\n\r\n>Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.\r\n\r\nand \r\n\r\n>@ param windowDuration  time to wait before emitting another item after emitting the last item'
p7895
aS'ping @headinthebox @benjchristensen for you comments on the semantics of `throttleFirst`.'
p7896
aS"Just found this: http://www.introtorx.com/content/v1.0.10621.0/13_TimeShiftedSequences.html#Throttle\r\n\r\n> Unlike Sample though, Throttle's period is a sliding window. Each time Throttle receives a value, the window is reset."
p7897
aS'So I think we only need to fix the javadoc and add a unit test to test this behavior as well.'
p7898
aS"@zsxwing thanks for finding that. That definition seems as good as any and I can accept that one. I'll see what I can do for the javadoc on throttle/sample in another PR to make this difference clear and consistent. \r\n\r\nGiven that the operator as I've rewritten it in this PR has the semantics of `sample` perhaps it could be a useful contribution as `sampleFirst`?"
p7899
aS'My understanding is that this operator has the purpose of blocking out subsequent onNext events for a specified duration. If an event comes 1.5x the duration after the last, that event can be immediately emitted and a new window starts.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16143341/64960892-346c-11e6-831d-5e0507c42b60.png)\r\n\r\nDo you want to pursue this further?'
p7900
aS"I'm closing this for now. If you want, you can post a PR with the parameter validation."
p7901
asg14
S'davidmoten:throttle-first-fix'
p7902
sbsI3535
(iPull
Pull
p7903
(dp7904
g3
S'A follow up PR for #3528'
p7905
sg5
S"1.x: Don't swallow fatal errors in OperatorZipIterable"
p7906
sg7
(lp7907
S'Bug'
p7908
asg10
I3535
sg11
(lp7909
S':+1: '
p7910
aS':+1:'
p7911
asg14
S'zsxwing:pr3528-follow-up'
p7912
sbsI3536
(iPull
Pull
p7913
(dp7914
g3
S'The test checks if onUnSubscribe is called but that happens after\r\nonCompleted is sent and as such, may run concurrently with the main\r\nthread where the mock is verified. The change switches to CountDownLatch\r\nto properly await the call to onUnsubscribe.'
p7915
sg5
S'1.x: Fix SyncOnSubscribeTest.testConcurrentRequests non-determinism'
p7916
sg7
(lp7917
S'Test-Failures'
p7918
asg10
I3536
sg11
(lp7919
S':+1: '
p7920
aS':+1: '
p7921
asg14
S'akarnokd:SyncOnSubscribeTestFix'
p7922
sbsI3539
(iPull
Pull
p7923
(dp7924
g3
g53
sg5
S'Add Single.zip() for Iterable of Singles'
p7925
sg7
(lp7926
S'Feature-Request'
p7927
asg10
I3539
sg11
(lp7928
S'Did you consider adding `zip(Single[], FuncN)` overload as well?\r\n\r\nOtherwise, looks good. :+1:'
p7929
aS'Here is an implementation that avoids conversion to `Observable`:\r\n```java\r\n@SuppressWarnings("unchecked")\r\npublic static <T, R> Single<R> zip(\r\n        Iterable<? extends Single<? extends T>> singles, \r\n                FuncN<? extends R> zipper) {\r\n    return Single.create(f -> {\r\n        Single<? extends T>[] sa;\r\n        int count;\r\n        if (singles instanceof List) {\r\n            List<? extends Single<? extends T>> list = \r\n                    (List<? extends Single<? extends T>>)singles;\r\n            count = list.size();\r\n            sa = list.toArray(new Single[count]);\r\n        } else {\r\n            sa = new Single[8];\r\n            count = 0;\r\n            for (Single<? extends T> s : singles) {\r\n                if (count == sa.length) {\r\n                    Single<? extends T>[] sb = new Single[count + (count >> 2)];\r\n                    System.arraycopy(sa, 0, sb, 0, count);\r\n                    sa = sb;\r\n                }\r\n                sa[count] = s;\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        final AtomicInteger wip = new AtomicInteger(count);\r\n        final AtomicBoolean once = new AtomicBoolean();\r\n        final Object[] values = new Object[count];\r\n        \r\n        CompositeSubscription csub = new CompositeSubscription();\r\n        f.add(csub);\r\n        \r\n        for (int i = 0; i < count; i++) {\r\n            if (csub.isUnsubscribed() || once.get()) {\r\n                break;\r\n            }\r\n            \r\n            final int j = i;\r\n            SingleSubscriber<T> te = new SingleSubscriber<T>() {\r\n                @Override\r\n                public void onSuccess(T value) {\r\n                    values[j] = value;\r\n                    if (wip.decrementAndGet() == 0) {\r\n                        R r;\r\n                        \r\n                        try {\r\n                            r = zipper.call(values);\r\n                        } catch (Throwable e) {\r\n                            Exceptions.throwIfFatal(e);\r\n                            f.onError(e);\r\n                            return;\r\n                        }\r\n                        \r\n                        f.onSuccess(r);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onError(Throwable error) {\r\n                    if (once.compareAndSet(false, true)) {\r\n                        f.onError(error);\r\n                    } else {\r\n                        RxJavaPlugins.getInstance()\r\n                        .getErrorHandler().handleError(error);\r\n                    }\r\n                }\r\n            };\r\n            csub.add(te);\r\n            if (csub.isUnsubscribed() || once.get()) {\r\n                break;\r\n            }\r\n            sa[i].subscribe(te);\r\n        }\r\n    });\r\n}\r\n```'
p7930
aS"@akarnokd I've used your code (rewrote some parts and fixed one bug) and now we don't have to convert `Single`s to `Observable`s! \r\n\r\nLater we can switch other `Single.zip` overloads to `SingleOperatorZip`."
p7931
aS'@akarnokd changed `instanceof List` to `instanceof Collection` so we are now really efficient for all collections and fall back to slightly less fast code for other `Iterable`s, rebased. \r\n\r\nPTAL'
p7932
aS'Rebased!'
p7933
aS'Blocked by #3569.'
p7934
aS'This needs to be rebased again.'
p7935
aS':+1:'
p7936
aS':+1: '
p7937
aS':+1: (for posterity)'
p7938
asg14
S'artem-zinnatullin:single-zip-iterable'
p7939
sbsI3544
(iPull
Pull
p7940
(dp7941
g3
S'This PR fixes the "messing around" reported in #3002 and adds an overload to `observeOn` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports).\r\n\r\nIn addition, this PR adds a proper override of the `isEmpty` method to simply compare the two indexes for emptiness directly instead of `size() == 0` to avoid looping, multi-reading and casting.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10.png)\r\n\r\nNote that the benchmark is generally quite noisy, yielding hectic results (i.e., firing up a thread with newThread may take quite some random microseconds). For example, `observeOnImmediate` shouldn\'t be affected by any of the changes yet the run-to-run variance is +/- 10%. I\'m fine with the results of the benchmark.'
p7942
sg5
S'1.x: fix observeOn resource handling, add delayError capability'
p7943
sg7
(lp7944
S'Enhancement'
p7945
asg10
I3544
sg11
(lp7946
S"I like the change, but can't we ship this behavior as default? Yes, it's a breaking change, but in a good way. I mean, I'm just not sure that a lot of users will even know about this operator and even less will understand the difference and situations when they'll need to use one instead of another."
p7947
aS'@akarnokd are you concerned by the performance impacts of this PR? '
p7948
aS'No concerns.'
p7949
aS':+1: '
p7950
aS'Since this adds to the API surface, can I have another +1? (Also feel free to merge this.)'
p7951
aS'Closing and reposting again with proper rebase.'
p7952
asg14
S'akarnokd:ObserveOnCleanup1x'
p7953
sbsI3549
(iPull
Pull
p7954
(dp7955
g3
S'Just found them while walking through the source code trying to get a better overview of the Rx internals. '
p7956
sg5
S'Remove double whitespace in if conditions'
p7957
sg7
(lp7958
S'Cleanup'
p7959
asg10
I3549
sg11
(lp7960
S'I actually found only the one in `TestSubscriber`. After that I ran `ack "if  "` over the entire project and found also the other one.\r\n\r\nIf you guys want, I can add checkstyle in a separate PR.'
p7961
aS"I'd be happy to see checkstyle in RxJava, but my previous attempts to add it failed: #2807, #3147 and other comments."
p7962
aS"It's hard to agree on some styles, i.e. always use blocks with ifs and such."
p7963
aS"Yes I get that, though I don't see what the problem is fixing once they are made.\r\n\r\nMaybe we could agree on some very basic checkstyle rules, like don't use double whitespaces (if there's a rule for that). Tab indention etc"
p7964
aS'Is there anything against this being merged?'
p7965
aS'We usually require two likes from collaborators.\r\n\r\n:+1:\r\n\r\n'
p7966
aS':+1: '
p7967
asg14
S'vanniktech:clean_up'
p7968
sbsI3550
(iPull
Pull
p7969
(dp7970
g3
g53
sg5
S'Public API changes for 1.1.0 release'
p7971
sg7
(lp7972
S'Enhancement'
p7973
asg10
I3550
sg11
(lp7974
S'This should be merged immediately after the next minor release (1.0.17). The plan is to have a minor release that is identical to the following major release except for changes to the public api (which should not substantially change functionality). '
p7975
aS':+1:'
p7976
aS':+1: '
p7977
aS"Now we need to update the CHANGES.md to reflect the public api changes... That might have been easier in the old format of 1 PR per change. I'll probably do sub-bullets under the PR."
p7978
aS'So Release Notes for 1.1.0 state that Single has been promoted out of Beta, but it looks like it is not actually out of beta.'
p7979
asg14
S'stealthcode:release-1.1.0'
p7980
sbsI3551
(iPull
Pull
p7981
(dp7982
g3
g53
sg5
S'Update CHANGES.md for v1.0.17'
p7983
sg7
(lp7984
S'Discussion'
p7985
asg10
I3551
sg11
(lp7986
S'Is there anything else not yet merged that is urgent or high priority that we should consider before cutting this release? '
p7987
aS"Well, I hoped to add some `rx.Single` operators, but looks like I won't be able to do it this week. Can we expect 1.1.1 this month?"
p7988
aS"@artem-zinnatullin there isn't a release schedule so I really couldn't tell you. "
p7989
aS'okay, LGTM :+1: '
p7990
aS'#3491'
p7991
aS':+1: '
p7992
aS'#3491 from me too. We really need this bug fix in.'
p7993
aS"I'm looking at #3491"
p7994
aS"I've gone ahead and merged #3491. Sorry for the delay. "
p7995
aS':+1:'
p7996
asg14
S'stealthcode:changesmd-v1.0.17'
p7997
sbsI3553
(iPull
Pull
p7998
(dp7999
g3
g53
sg5
S'Update CHANGES.md for v1.1.0'
p8000
sg7
(lp8001
S'Discussion'
p8002
asg10
I3553
sg11
(lp8003
S'@akarnokd @stevegury @abersnaze @benjchristensen @zsxwing '
p8004
aS':+1:'
p8005
aS':+1: '
p8006
asg14
S'stealthcode:changesmd-v1.1.0'
p8007
sbsI3556
(iPull
Pull
p8008
(dp8009
g3
S'This PR adds the usual try-catch around callback invocations in `toMap`\r\nand `toMultimap`.\r\n\r\nRelated #3555.'
p8010
sg5
S'1.x: fix toMap and toMultimap not handling exceptions of the callbacks'
p8011
sg7
(lp8012
S'Bug'
p8013
asg10
I3556
sg11
(lp8014
S':+1: '
p8015
aS':+1: '
p8016
aS':+1: '
p8017
asg14
S'akarnokd:ToMapErrorPropagation1x'
p8018
sbsI3559
(iPull
Pull
p8019
(dp8020
g3
g53
sg5
S'Rewording 1.1.0 release notes in CHANGES.md'
p8021
sg7
(lp8022
sg10
I3559
sg11
(lp8023
S':+1: '
p8024
aS':+1:'
p8025
asg14
S'stealthcode:changesmd-v1.1.0'
p8026
sbsI3561
(iPull
Pull
p8027
(dp8028
g3
S'#3560\r\n'
p8029
sg5
S'Corrected buffer operator onError behaviour documentation'
p8030
sg7
(lp8031
S'Documentation'
p8032
asg10
I3561
sg11
(lp8033
S'Applied @akarnokd suggestion.'
p8034
aS':+1: '
p8035
aS':+1:'
p8036
asg14
S'mariusznet:master'
p8037
sbsI3562
(iPull
Pull
p8038
(dp8039
g3
S'As promised, adding more operators to `Single`. This one is very useful for releasing resources if task can be cancelled externally via `subscription.unsubscribe()` and subscriber may not receive the result. '
p8040
sg5
S'Add Single.doOnUnsubscribe()'
p8041
sg7
(lp8042
S'Enhancement'
p8043
asg10
I3562
sg11
(lp8044
S':+1:'
p8045
aS':+1: '
p8046
asg14
S'artem-zinnatullin:single-do-on-unsubscribe'
p8047
sbsI3563
(iPull
Pull
p8048
(dp8049
g3
g53
sg5
S'Fix typo in documentation'
p8050
sg7
(lp8051
S'Documentation'
p8052
asg10
I3563
sg11
(lp8053
S':+1: '
p8054
aS':+1:'
p8055
aS':+1: '
p8056
asg14
S'sebaslogen:patch-1'
p8057
sbsI3565
(iPull
Pull
p8058
(dp8059
g3
S"Advantage is that we verify that there's no interaction at all so also something that we might not expect is not going to happen."
p8060
sg5
S'Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions'
p8061
sg7
(lp8062
S'Cleanup'
p8063
asg10
I3565
sg11
(lp8064
S':+1:'
p8065
aS':+1: '
p8066
asg14
S'vanniktech:master_behavioursubject_test_cleanup'
p8067
sbsI3566
(iPull
Pull
p8068
(dp8069
g3
S'#3434 but for `Observable`.'
p8070
sg5
S'Deprecate Observable.finallyDo() and add Observable.doAfterTerminate() instead'
p8071
sg7
(lp8072
sg10
I3566
sg11
(lp8073
S':+1:'
p8074
aS':+1: '
p8075
aS':+1: '
p8076
asg14
S'artem-zinnatullin:observable-doAfterTerminate'
p8077
sbsI3567
(iPull
Pull
p8078
(dp8079
g3
g53
sg5
S'Implemented Observable#toCompletable'
p8080
sg7
(lp8081
S'Enhancement'
p8082
asg10
I3567
sg11
(lp8083
S'Addresses part of #3443'
p8084
aS'```\r\nrx.internal.operators.OnSubscribeCompletableTest > testShouldUseUnsafeSubscribeInternallyNotSubscribe FAILED\r\n    java.lang.AssertionError\r\n        at org.junit.Assert.fail(Assert.java:92)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertFalse(Assert.java:68)\r\n        at org.junit.Assert.assertFalse(Assert.java:79)\r\n        at rx.internal.operators.OnSubscribeCompletableTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(OnSubscribeCompletableTest.java:96)\r\n```\r\n\r\nThe `Completable.fromObservable` needs to change to `unsafeSubscribe`.'
p8085
aS'Thanks @akarnokd'
p8086
aS':+1:'
p8087
aS':+1: '
p8088
asg14
S'stealthcode:ToCompletable'
p8089
sbsI3568
(iPull
Pull
p8090
(dp8091
g3
S'Renames as part of #3434 for the recently added Completable.'
p8092
sg5
S'Renamed Completable#finallyDo to #doAfterTerminate'
p8093
sg7
(lp8094
S'Cleanup'
p8095
asg10
I3568
sg11
(lp8096
S':+1: '
p8097
aS':+1:'
p8098
aS':+1: '
p8099
asg14
S'stealthcode:RenameCompletableFinallyDo'
p8100
sbsI3569
(iPull
Pull
p8101
(dp8102
g3
S'There was a cross dependency between two PRs yielding a broken\r\ncompilation in main.'
p8103
sg5
S'1.x: fix renamed operator in Single.'
p8104
sg7
(lp8105
S'Cleanup'
p8106
asg10
I3569
sg11
(lp8107
S"I'm merging this to unblock other PRs."
p8108
aS':+1: '
p8109
asg14
S'akarnokd:SingleFixDoAfterTerminate'
p8110
sbsI3570
(iPull
Pull
p8111
(dp8112
g3
S'I expect some discussion around the method name. '
p8113
sg5
S'Implemented Completable#andThen(Observable)'
p8114
sg7
(lp8115
S'Discussion'
p8116
aS'Enhancement'
p8117
asg10
I3570
sg11
(lp8118
S'Adding unit tests and pushing shortly.'
p8119
aS':+1:'
p8120
asg14
S'stealthcode:CompletableAndThen'
p8121
sbsI3573
(iPull
Pull
p8122
(dp8123
g3
g53
sg5
S'Test PR'
p8124
sg7
(lp8125
sg10
I3573
sg11
(lp8126
sg14
S'None'
p8127
sbsI3575
(iPull
Pull
p8128
(dp8129
g3
g53
sg5
S'Fix typo in CompositeException documentation'
p8130
sg7
(lp8131
S'Cleanup'
p8132
asg10
I3575
sg11
(lp8133
S':+1:'
p8134
aS':+1: '
p8135
aS':+1:'
p8136
asg14
S'ItsPriyesh:Fix-typo-in-CompositeException-documentation'
p8137
sbsI3579
(iPull
Pull
p8138
(dp8139
g3
S'PTAL'
p8140
sg5
S'1.x: No more need to convert Singles to Observables for Single.zip()'
p8141
sg7
(lp8142
S'Enhancement'
p8143
asg10
I3579
sg11
(lp8144
S':+1:'
p8145
aS'Could you add `final` back for all these methods? Otherwise, LGTM'
p8146
aS':+1: '
p8147
asg14
S'artem-zinnatullin:single-zip-no-more-as-observable'
p8148
sbsI3582
(iPull
Pull
p8149
(dp8150
g3
g53
sg5
S'1.x: Update ReplaySubjectPerf.java'
p8151
sg7
(lp8152
S'Cleanup'
p8153
asg10
I3582
sg11
(lp8154
S':+1: although not sure about the location of those empty lines.'
p8155
asg14
S'achinthagunasekara:patch-1'
p8156
sbsI3584
(iPull
Pull
p8157
(dp8158
g3
S"As discussed in #3411, some clarification of the behaviour of `groupBy` looks necessary re its behaviour when the `GroupedObservable` terminates early (for example has `.first()` applied to it). See also  #3581.\r\n\r\nI also took the liberty of recommending `ignoreElements` instead of `take(0)` for the section in the javadoc that recommends how to ignore emissions because the `take(0)` approach would have more overhead (every emission from source would prompt the emission of a new `GroupedObservable`) than the `ignoreElements` approach.\r\n\r\nOnce this is accepted I'll look to submit a PR with `groupByOnce` (mentioned in #3411)."
p8159
sg5
S'clarify behaviour of groupBy in javadoc'
p8160
sg7
(lp8161
S'Documentation'
p8162
asg10
I3584
sg11
(lp8163
S'Corrected the documentation that said resubscription occurs when it is rather a new GroupedObservable is emittted for a group.'
p8164
aS'Incorporated @akarnokd suggestion'
p8165
aS':+1:'
p8166
aS":+1: \r\n\r\n> I also took the liberty of recommending ignoreElements instead of take(0) for the section in the javadoc that recommends how to ignore emissions because the take(0) approach would have more overhead (every emission from source would prompt the emission of a new GroupedObservable) than the ignoreElements approach.\r\n\r\nBy the way, `ignoreElements` has a drawback: It keeps all group `Observable`s in memory even some of them won't emit items."
p8167
asg14
S'davidmoten:group-by-javadoc'
p8168
sbsI3585
(iPull
Pull
p8169
(dp8170
g3
S'This PR fixes the cases when the Completable factory throws an exception\r\nor returns null and the resource is not disposed before reporting error\r\nto the subscriber.'
p8171
sg5
S'1.x: fix Completable.using not disposing the resource if the factory crashes during the subscription phase.'
p8172
sg7
(lp8173
S'Bug'
p8174
asg10
I3585
sg11
(lp8175
S':+1: '
p8176
aS':+1:'
p8177
asg14
S'akarnokd:UsingDisposeFix'
p8178
sbsI3586
(iPull
Pull
p8179
(dp8180
g3
g53
sg5
S'Fixed typo'
p8181
sg7
(lp8182
S'Cleanup'
p8183
asg10
I3586
sg11
(lp8184
S':+1:'
p8185
aS':+1: '
p8186
aS'Thanks a lot, @mariusznet '
p8187
asg14
S'mariusznet:1.x'
p8188
sbsI3587
(iPull
Pull
p8189
(dp8190
g3
S"Outer classes accessing inner class private fields and methods (and vise versa) causes javac to generate package-scoped trampolines. These bloat the class files, adds overhead to the inliner analysis, and for Android create needless method that eat away at our fixed limit of methods in an application. By simply promoting the private interactions to package scope directly, the synthetic methods do not need generated.\r\n\r\n2.5% of RxJava's methods were these needless generated trampolines accounting for 1.2% of jar size and 1.4% of dex size.\r\n\r\n```\r\n$ dex-method-count before.dex\r\n5005\r\n\r\n$ dex-method-count after.dex\r\n4875\r\n```\r\n```\r\n-rw-r--r--   1 jw  jw   699K Dec 25 03:08 after.dex\r\n-rw-r--r--   1 jw  jw   952K Dec 25 03:08 after.jar\r\n-rw-r--r--   1 jw  jw   709K Dec 25 03:06 before.dex\r\n-rw-r--r--   1 jw  jw   964K Dec 25 03:06 before.jar\r\n```"
p8191
sg5
S'Remove the need for javac to generate synthetic methods.'
p8192
sg7
(lp8193
S'Cleanup'
p8194
asg10
I3587
sg11
(lp8195
S':+1:'
p8196
aS':+1: '
p8197
asg14
S'JakeWharton:jw/remove-synthetic-methods'
p8198
sbsI3588
(iPull
Pull
p8199
(dp8200
g3
S"The static `GenericScheduledExecutorService.None` should be initialized before creating any GenericScheduledExecutorService instance. Although the previous codes happen to work, it's sill worth to fix it."
p8201
sg5
S'Fix the initialization order in GenericScheduledExecutorService'
p8202
sg7
(lp8203
S'Cleanup'
p8204
asg10
I3588
sg11
(lp8205
S"The situation can't happen because class initialization locks out callers.\r\n\r\nOtherwise, the cleanup never hurts.\r\n\r\n:+1:"
p8206
asg14
S'zsxwing:init-order'
p8207
sbsI3589
(iPull
Pull
p8208
(dp8209
g3
S"This PR reduces the request tracking overhead of `concat` by tracking the produced item count in a plain field and subtracting it from the arbiter and requested values only before the inner source completes. So instead of N decrementAndGet call, we have 1 addAndGet(-N) per source. \r\n\r\nI've added a perf class to measure the difference.\r\n\r\n(Intel Celeron 1005M @ 2GHz, Windows 7 x64, Java 8u66)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12010270/d8af1660-ac9f-11e5-933c-ee96da7deda5.png)\r\n\r\nThe throughput increased considerably, although I would have expected more, especially in the 1M case where the subscription overhead doesn't matter.\r\n\r\nI'll do further investigation on it and post a follow-up PR if this gets merged in the meantime."
p8210
sg5
S'1.x: concat reduce overhead when streaming a source'
p8211
sg7
(lp8212
S'Performance'
p8213
asg10
I3589
sg11
(lp8214
S':+1: '
p8215
aS'There is a non-zero chance there, but it is very small. If it happens, all the effect it will have is to make the operator decrement the requested amount from then on, which adds ~40 cycle overhead after each source completes.\r\n\r\nUpdated the PR anyway to do a CAS loop on production to remove all worries about the case.'
p8216
aS':+1: '
p8217
aS'@zsxwing, @davidmoten are you satisfied with the name `BackpressureUtils.produced`?'
p8218
aS'Just a few comments, otherwise :+1:.'
p8219
aS'Changed to AtomicBoolean and moved c != 0 into parent because the parent was used for completing the inner anyway, I overlooked it at first.'
p8220
aS':+1:'
p8221
asg14
S'akarnokd:ConcatPerf1x'
p8222
sbsI3590
(iPull
Pull
p8223
(dp8224
g3
S'change hasOnNext to !hasOnNext'
p8225
sg5
S'Update AbstractOnSubscribe.java'
p8226
sg7
(lp8227
sg10
I3590
sg11
(lp8228
S'The `AbstractOnSubscribe` has been deprecated in 1.0.17 and removed in 1.1.0.\r\n\r\nBesides, the code contained `hasOnNext` because it wanted to prevent calling onNext twice.'
p8229
aS'okey,I got it .  thanks'
p8230
asg14
S'kaoree:1.x'
p8231
sbsI3592
(iPull
Pull
p8232
(dp8233
g3
S'This PR complete the never assert in PublishSubjectTest.'
p8234
sg5
S'1.x: add never test for  PublishSubjectTest'
p8235
sg7
(lp8236
S'Cleanup'
p8237
aS'Test'
p8238
asg10
I3592
sg11
(lp8239
S':+1:'
p8240
aS'In every test method that is using `verifyNoMoreInteractions` you can remove the `verify(observer, never()).*`'
p8241
aS'> In every test method that is using verifyNoMoreInteractions you can remove the verify(observer, never()).*\r\n\r\nYour are right, but I think adding these verifies can make tests more clearly.'
p8242
aS'Fair enough. I just thought you forgot to delete them and wanted to point it out.\r\nIn any case the deletion decision is something the repo owners have to do.\r\n\r\nPersonally the less test code the preciser it is. Especially since `verifyNoMoreInteractions` clearly states it purpose.'
p8243
aS':+1:'
p8244
aS':+1: '
p8245
asg14
S'Chaoba:1.x'
p8246
sbsI3597
(iPull
Pull
p8247
(dp8248
g3
S"This PR fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changes.\r\n\r\nThe main issue lies when `count > skip` in the operators, yielding overlapping buffers/windows. \r\n\r\nFor `buffer`, when the upstream completed, the logic emitted all remaining partial buffers even if there was no request for new buffers, which can result in `MissingBackpressureException` somewhere. The proper handling of the final buffers required a new backpressure management algorithm which is now part of the `BackpressureUtils` class and consists of two new methods: `postCompleteDone` called from onComplete to take over the emission of queued values and `postCompleteRequest` which manages requests before and after the completed state.\r\n\r\nFor `window`, the new window opened was emitted regardless of requests which was common due to request-amplification (i.e., requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront. To avoid the overflow, the individual windows have to go through the usual queue/drain logic as well. I've also updated the Javadoc to reflect the backpressure behavior along with parameter validation.\r\n\r\nIn addition, the window case didn't manage cancellation properly. When the outer observable is unsubscribed, the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. Instead, the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e., count reaches zero), the upstream is unsubscribed. To accomplish this, the `UnicastSubject` had to be retrofitted with a new optional callback `Action0` which gets called at most once whenever either `onError` or `onCompleted` is called or when the single `Subscriber` unsubscribes.\r\n\r\nA secondary issue was with the `TestSubscriber`'s initial request; some upstream operators could get triggered with `Long.MAX_VALUE` despite the initial request amount was set. This PR changes it to be set at construction time instead of in `onStart`."
p8249
sg5
S"1.x: fix counted buffer and window operators' backpressure behavior"
p8250
sg7
(lp8251
S'Bug'
p8252
asg10
I3597
sg11
(lp8253
S'Fresh version in #3678.'
p8254
asg14
S'akarnokd:BufferWindowBackpressureFix1x'
p8255
sbsI3609
(iPull
Pull
p8256
(dp8257
g3
S'It subscribes to the upstream `Observable` on the emitting thread of the other `Observable` obtained from the `Func0`.'
p8258
sg5
S'delaySubscription(Func0) does not use a scheduler'
p8259
sg7
(lp8260
S'Documentation'
p8261
asg10
I3609
sg11
(lp8262
S':+1:'
p8263
aS':+1: '
p8264
asg14
S'JakeWharton:patch-1'
p8265
sbsI3614
(iPull
Pull
p8266
(dp8267
g3
S'Updated `just()` to fully support backpressure.\r\n\r\nThis is a repost of #3496 due to merge and rebase problems.'
p8268
sg5
S'1.x: just() now supports backpressure (+ related fixes/changes)'
p8269
sg7
(lp8270
S'Bug'
p8271
aS'Enhancement'
p8272
asg10
I3614
sg11
(lp8273
S'We were waiting to hear from @benjchristensen on this one I think. Any news?'
p8274
aS'+1 for correctness despite my hesitance due to perf impact. '
p8275
asg14
S'akarnokd:JustBackpressure1xV2'
p8276
sbsI3619
(iPull
Pull
p8277
(dp8278
g3
S"I've created the solution for issue #3618."
p8279
sg5
S'Solution for 3618'
p8280
sg7
(lp8281
sg10
I3619
sg11
(lp8282
sg14
S'adam-arold:solution-for-3618'
p8283
sbsI3620
(iPull
Pull
p8284
(dp8285
g3
S'possible solution :)'
p8286
sg5
S'1.x: Fix NPE in CompositeException when nested throws on initCause'
p8287
sg7
(lp8288
S'Bug'
p8289
asg10
I3620
sg11
(lp8290
S':+1:'
p8291
aS':+1: \r\n\r\n@msavitskiy can you please squash commits in your PR into one?'
p8292
aS'@artem-zinnatullin  I make squash commits. I did the right thing?'
p8293
aS'@artem-zinnatullin Now everything is fine?'
p8294
aS'@msavitskiy yes, thanks!'
p8295
aS':+1: '
p8296
asg14
S'msavitskiy:1.x'
p8297
sbsI3622
(iPull
Pull
p8298
(dp8299
g3
S'This PR add similar optimization as ScalarSynchronousObservable to Single.just method.'
p8300
sg5
S'1.x: Optimizate single just'
p8301
sg7
(lp8302
S'Performance'
p8303
asg10
I3622
sg11
(lp8304
S'Nice PR! @Chaoba can you please remove merge commit from the PR (rebase should help)?'
p8305
aS'@akarnokd and @artem-zinnatullin  please review on  #3642'
p8306
asg14
S'Chaoba:optimizate_single_just'
p8307
sbsI3623
(iPull
Pull
p8308
(dp8309
g3
S'Solution for issue #3618.'
p8310
sg5
S'1.x: adding source links for @Beta and @Experimental'
p8311
sg7
(lp8312
S'Documentation'
p8313
asg10
I3623
sg11
(lp8314
S':+1:'
p8315
aS':+1: '
p8316
aS"Let's merge this? Looks trivial and useful."
p8317
aS':+1:'
p8318
aS'@adam-arold could you also submit a PR again 1.x branch? Thanks!'
p8319
aS'Okay, will do tomorrow!'
p8320
asg14
S'adam-arold:2.x'
p8321
sbsI3624
(iPull
Pull
p8322
(dp8323
g3
S'See #3621'
p8324
sg5
S'1.x: implement OperatorDoOnEmpty, with Observable.doOnEmpty() operator'
p8325
sg7
(lp8326
S'Feature-Request'
p8327
asg10
I3624
sg11
(lp8328
S'I saw there was an `OperatorDoOnEach` which was being paired with an `Observer`, so I went ahead and scrapped `OperatorDoOnEmpty` in favor of using that pattern.'
p8329
aS'Okay two questions:\r\n\r\n1) What exactly am I testing for with unsubscription? That `Subscription.isUnsubscribed()` is true after calling `Subscription.unsubscribe()`? That items are no longer emitting? Do I have to test for hot and cold sources? \r\n\r\n2) Can you point me to another unit test that does the backpressure test you have in mind?'
p8330
aS'1) unsubscription test:\r\n\r\nuse a `PublishSubject`, this operator and `take`, push through values up to the limit and check `hasObservers` on the subject\r\n\r\n2) backpressure\r\n\r\nuse a `range`, this operator and subscribe a `TestSubscriber` which has been created with 0 as an initial value. Use `requestMore(1)` and assert the testsubscriber received only a single value, no error and no completion'
p8331
aS'@akarnokd Done. The unsubscription test made sense to me. Not too familiar with the `TestSubscriber`. Regardless, I implemented what I think you meant and the tests passed.'
p8332
aS'@akarnokd Might help if I actually used the operator in question. One second...\r\n'
p8333
aS'Okay unit tests are complete.'
p8334
aS"Hey Thomas, for your convenience what you normally do is make a branch of 1.x say `doOnEmpty`, do your change in that branch and submit your PR from that branch rather than from 1.x. This PR doesn't have to be changed though."
p8335
aS"Okay, thanks @davidmoten. I'll branch the feature separately next time. "
p8336
aS'Dang it IDEA, sorry my habits have caused Observable to have irrelevant changes. One moment.'
p8337
aS'There are too many, probably irrelevant, changes in `Observable.java`. Could you start from a clean file?\r\n\r\nIn addition, your reuse of `doOnEach` may not work because were sharing the empty flag across subscriptions whose source may not be always empty. For example,\r\n\r\n```java\r\nObservable<Integer> o = Observable.defer(\r\n    () -> Observable.range(1, counter.getAndIncrement() % 2))\r\n.doOnEmpty(() -> System.out.println("Empty!"));\r\n\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\n```\r\n\r\nThis should print 3 `Empty!` but only prints 1.'
p8338
aS"That seems like a deliberate side effect almost... so what would the expected behavior be? Because I don't really see how it is much different from `onCompleted()` other than it has a condition before performing the action. I'll try to reason through what you're showing..."
p8339
aS'Oh shoot, I think I see what you are saying. I was sharing state *between* the subscriptions. Let me figure out how to do this...'
p8340
aS'Alright, I started over on the implementation and placed that `Observable.defer()` case as an additional test. All five unit tests passed. '
p8341
aS"Question. Why is it the policy that `doOnXXX()` operators won't emit an exception that occurs in the supplied side effect function?  Is the idea that it is up to the client to deal with the exception that occurs in _their _function since it is after all a side-effect? And it is not part of the `Observable`?\r\n\r\n**EDIT**\r\n\r\nLet me rephrase that. Should exceptions in the side-effect function be emitted to the child's `onError()`? Because I don't think I'm doing that here..."
p8342
aS"Okay it's done, @davidmoten. Please let me know if I missed anything else..."
p8343
aS"It looks like a test failed. I don't think it has to do with this feature, but I'll confirm tomorrow after I update my fork and see if that rids it."
p8344
aS'I think this operator was about done so I chucked it into [https://github.com/davidmoten/rxjava-extras](rxjava-extras). That ok with you @thomasnield?'
p8345
aS"@davidmoten That sounds great! I'm glad you did, thanks!"
p8346
asg14
S'thomasnield:1.x'
p8347
sbsI3626
(iPull
Pull
p8348
(dp8349
g3
S"This PR simplifies error handling by making use of existing `Exceptions.throwOrError` overloads.\r\n\r\nA number of classes are touched by this one PR but I'm assuming review will be easy enough that merge can happen soon."
p8350
sg5
S'use Exceptions.throwOrError to simplify error handling'
p8351
sg7
(lp8352
S'Cleanup'
p8353
asg10
I3626
sg11
(lp8354
S"It looks like my optimize imports messed up the imports on `Observable.java`. I'll restore them to what they were originally. "
p8355
aS':+1:'
p8356
aS'Oops sorry wrong PR'
p8357
aS':+1:'
p8358
asg14
S'davidmoten:simplify-throw'
p8359
sbsI3627
(iPull
Pull
p8360
(dp8361
g3
S'PR for issue #3577'
p8362
sg5
S'1.x: Added MergeDelay operators for Iterable of Observables'
p8363
sg7
(lp8364
S'Enhancement'
p8365
asg10
I3627
sg11
(lp8366
S':+1:'
p8367
aS'Just few things about code style, otherwise LGTM :+1: '
p8368
aS':+1: once you fix the style issue'
p8369
aS':+1: after renaming the `mergeIterable` method.'
p8370
aS':+1: @JohnWowUs can you please squash commits in your PR into one?'
p8371
aS'@JohnWowUs could you squash commits? Thanks!'
p8372
aS'@zsxwing \r\n\r\nDone.'
p8373
aS':+1: '
p8374
asg14
S'JohnWowUs:mergeDelayIterable'
p8375
sbsI3630
(iPull
Pull
p8376
(dp8377
g3
S'The operator was not allowing `null`s in the inner Observables.\r\n\r\nRelated: #3629.'
p8378
sg5
S'1.x: ConcatMapEager allow nulls from inner Observables.'
p8379
sg7
(lp8380
S'Bug'
p8381
asg10
I3630
sg11
(lp8382
S':+1: '
p8383
asg14
S'akarnokd:ConcatMapEagerInnerNPEFix1x'
p8384
sbsI3631
(iPull
Pull
p8385
(dp8386
g3
S"Preparation for release 1.1.1.\r\n\r\nThere are, however, quite a few PRs open which could be also included with 1.1.1 (ignoring documentation and cleanup):\r\n\r\n## Bugfixes\r\n\r\n  - #3597 fix counted buffer and window operators' backpressure behavior\r\n  - #3614 ~~just() now supports backpressure (+ related fixes/changes)~~ merged\r\n  - #3620 Fix NPE in CompositeException when nested throws on initCause\r\n\r\n## Enhancements\r\n\r\n  - #3476 overhead reduction for merge and flatMap \r\n  - #3507 combineLatest can now combine arbitrary number of sources\r\n  - #3544 fix observeOn resource handling, add delayError capability\r\n  - #3579 ~~No more need to convert Singles to Observables for Single.zip()~~ merged\r\n  - #3589 concat reduce overhead when streaming a source\r\n  - #3627 Added MergeDelay operators for Iterable of Observables"
p8387
sg5
S'Release 1.1.1 CHANGES.md preparation'
p8388
sg7
(lp8389
S'Discussion'
p8390
asg10
I3631
sg11
(lp8391
S':+1:'
p8392
aS"It's a bit tedious the repost this all the time. Instead, I've created a draft release and once decided, will copy the final markdown from there to a new PR."
p8393
asg14
S'akarnokd:Release1_1_1'
p8394
sbsI3634
(iPull
Pull
p8395
(dp8396
g3
S'This PR adds a perf test to measure the redo-based operators: repeat, repeatWhen, retry, retryWhen.\r\n\r\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\r\n```\r\nBenchmark                     (params)        Score  Score error\r\nr.o.RedoPerf.baseline              1,1  9507538,496   384265,883\r\nr.o.RedoPerf.baseline           1,1000   127236,123     6322,513\r\nr.o.RedoPerf.baseline        1,1000000      131,491        7,443\r\nr.o.RedoPerf.baseline           1000,1   126830,429     8161,593\r\nr.o.RedoPerf.baseline        1000,1000      130,795        8,571\r\nr.o.RedoPerf.baseline        1000000,1      130,097        0,936\r\nr.o.RedoPerf.repeatCounted         1,1   473245,445    16574,938\r\nr.o.RedoPerf.repeatCounted      1,1000     2039,161       64,254\r\nr.o.RedoPerf.repeatCounted   1,1000000        2,304        0,376\r\nr.o.RedoPerf.repeatCounted      1000,1    28622,433     2896,427\r\nr.o.RedoPerf.repeatCounted   1000,1000       35,208        2,312\r\nr.o.RedoPerf.repeatCounted   1000000,1       56,978        7,278\r\nr.o.RedoPerf.repeatWhen            1,1   452640,724     5506,024\r\nr.o.RedoPerf.repeatWhen         1,1000     2151,821      352,059\r\nr.o.RedoPerf.repeatWhen      1,1000000        2,159        0,066\r\nr.o.RedoPerf.repeatWhen         1000,1    23919,436      217,644\r\nr.o.RedoPerf.repeatWhen      1000,1000       20,947        1,615\r\nr.o.RedoPerf.repeatWhen      1000000,1       25,316        0,970\r\nr.o.RedoPerf.retryCounted          1,1   176470,291     4570,641\r\nr.o.RedoPerf.retryCounted       1,1000      588,985       38,103\r\nr.o.RedoPerf.retryCounted    1,1000000        0,589        0,037\r\nr.o.RedoPerf.retryCounted       1000,1     7178,699      123,423\r\nr.o.RedoPerf.retryCounted    1000,1000       14,470        0,699\r\nr.o.RedoPerf.retryCounted    1000000,1        7,842        0,252\r\nr.o.RedoPerf.retryWhen             1,1   310407,136     8052,067\r\nr.o.RedoPerf.retryWhen          1,1000      567,338       13,511\r\nr.o.RedoPerf.retryWhen       1,1000000        0,587        0,036\r\nr.o.RedoPerf.retryWhen          1000,1    10388,639      269,817\r\nr.o.RedoPerf.retryWhen       1000,1000       10,657        1,471\r\nr.o.RedoPerf.retryWhen       1000000,1       11,550        0,287\r\n```\r\n\r\nThe `params` is a composite of number of elements and number of repetitions.'
p8397
sg5
S'1.x: redo performance checker'
p8398
sg7
(lp8399
S'Performance'
p8400
asg10
I3634
sg11
(lp8401
sg14
S'akarnokd:RedoPerf'
p8402
sbsI3635
(iPull
Pull
p8403
(dp8404
g3
S'Performance measurement of `zip` and upgrade to JMH 1.11.3.\r\n\r\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\r\n\r\nOverall throughput values:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523444/3e1893fc-c157-11e5-81bd-353031db4a91.png)\r\n\r\nComparing fully sync and fully async dual sources:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523464/5cc23074-c157-11e5-8231-5954eafd7d0e.png)\r\n\r\nComparing when either the first or the second is an async source:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523485/7bdf951e-c157-11e5-9f3c-f2f3b156ba03.png)\r\n\r\nSo the order of sources matter, having the async first allows it to start early and not after the synchronous source completes its prefetch run.\r\n'
p8405
sg5
S'1.x: zip performance measure'
p8406
sg7
(lp8407
S'Performance'
p8408
asg10
I3635
sg11
(lp8409
S'One comment, otherwise looks good :+1: '
p8410
asg14
S'akarnokd:ZipPerf1x'
p8411
sbsI3637
(iPull
Pull
p8412
(dp8413
g3
S"A non-fatal exception thrown by `predicate.call()` in `OperatorSkipWhile` could result in the error being reported by an upstream operator. This PR ensures that the error is reported by the operator in which it occurs.\r\n\r\nI've added a unit test for this scenario that failed with the original code, and a couple of other tests.\r\n\r\nThere are a few more of these floating around that I'll submit PRs for as well."
p8414
sg5
S'handle predicate exceptions properly in skipWhile'
p8415
sg7
(lp8416
S'Bug'
p8417
asg10
I3637
sg11
(lp8418
S'unrelated unit test failure `BackpressureTests.testMergeAsync`'
p8419
aS':+1:'
p8420
aS':+1: '
p8421
asg14
S'davidmoten:skipWhile-exception-handling'
p8422
sbsI3638
(iPull
Pull
p8423
(dp8424
g3
S'As per #3637, `keySelector.call()` was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p8425
sg5
S'fix error handling in OperatorDistinctUntilChanged'
p8426
sg7
(lp8427
S'Bug'
p8428
asg10
I3638
sg11
(lp8429
S':+1:'
p8430
aS':+1: '
p8431
aS'Thanks @zsxwing, it was supposed to have been used and now is. Also made stuff private and static that could be. Commits squashed.'
p8432
aS':+1: '
p8433
asg14
S'davidmoten:fix-distinctUntilChanged-error-handling'
p8434
sbsI3639
(iPull
Pull
p8435
(dp8436
g3
S'`onOverflow.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p8437
sg5
S'fix error handling in onBackpressureBuffer'
p8438
sg7
(lp8439
S'Bug'
p8440
asg10
I3639
sg11
(lp8441
S':+1:'
p8442
aS':+1: '
p8443
aS':+1: '
p8444
asg14
S'davidmoten:fix-onBackpressureBuffer-error-handling'
p8445
sbsI3640
(iPull
Pull
p8446
(dp8447
g3
S'`onDrop.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p8448
sg5
S'fix error handling in onBackpressureDrop'
p8449
sg7
(lp8450
S'Bug'
p8451
asg10
I3640
sg11
(lp8452
S':+1: '
p8453
aS':+1: '
p8454
asg14
S'davidmoten:fix-onBackpressureDrop-error-handling'
p8455
sbsI3641
(iPull
Pull
p8456
(dp8457
g3
S'`combinator.call()` was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p8458
sg5
S'fix error handling in combineLatest'
p8459
sg7
(lp8460
S'Bug'
p8461
asg10
I3641
sg11
(lp8462
S'#3507 already takes care of this as well, but thanks.'
p8463
aS"Ah good, thanks @akarnokd. I guess we can leave this open if it's possible that #3507 doesn't make the next release.  By the way, the unit test in here would probably be nice to have in whichever PR makes it in first."
p8464
aS"I've updated #3507 with your test method."
p8465
aS'#3661 merged'
p8466
asg14
S'davidmoten:fix-combineLatest-error-handling'
p8467
sbsI3642
(iPull
Pull
p8468
(dp8469
g3
S'This PR add similar optimization as ScalarSynchronousObservable to Single.just method.'
p8470
sg5
S'1.x: Optimizate single just'
p8471
sg7
(lp8472
S'Enhancement'
p8473
aS'Performance'
p8474
asg10
I3642
sg11
(lp8475
S'Could you also squash the commits?'
p8476
aS'In the master, there is a new class `SingleSourcePerf`. Could you run it before and after to see how well the optimizations work?'
p8477
aS'Ok, I will try to do it.'
p8478
aS"@akarnokd I can't find class SingleSourcePerf in master, do you mean SinglePerfBaseline?"
p8479
aS'https://github.com/ReactiveX/RxJava/blob/1.x/src/perf/java/rx/SingleSourcePerf.java'
p8480
aS'\r\nI have run the benchmark on 1.x and this PR(Intel Core i5-2400 @3.10GHz, Windows 7 x64, Java 1.8.0_45-b15), the results are as follows:\r\n### 1.x\r\n![20160126163611](https://cloud.githubusercontent.com/assets/8577318/12576495/13c41d74-c44f-11e5-9178-cb707fae2703.png)\r\n### this PR\r\n![20160126163953](https://cloud.githubusercontent.com/assets/8577318/12576496/13c60bac-c44f-11e5-82ca-683dc8c88728.png)\r\n\r\nThe results show that most of scores in this PR is higher than 1.x, especially that flatmap and flatmapConnst have a great ascension.\r\n\r\n\r\n'
p8481
aS':+1:'
p8482
aS'rebased'
p8483
aS'@Chaoba could you rebase against the master and fix the minor subscription issue? Thanks!'
p8484
aS'@zsxwing Thanks for your comment. Should I squash the commits?'
p8485
aS'> @zsxwing Thanks for your comment. Should I squash the commits?\r\n\r\n@Chaoba yes, please.'
p8486
aS'The commits has been squashed'
p8487
aS':+1: ping @akarnokd to take a final look and pull in :)'
p8488
aS":+1:\r\n\r\n@artem-zinnatullin I'd like your opinion on this `Single` matter."
p8489
aS'@Chaoba please add tests for: `scalarMerge`, `scalarObserveOn` and `scalarSubscribeOn` and squash PR into one commit.\r\n\r\nOtherwise looks great, will be happy to see it in next release!'
p8490
aS'add some new testcases, now the coverage is as follows:\r\n![20160202112639](https://cloud.githubusercontent.com/assets/8577318/12738855/8b25ff04-c99f-11e5-806b-18b3b02e0598.png)\r\n\r\n'
p8491
aS':+1:'
p8492
aS'Great set of tests! Just few comments left, @Chaoba please ping again once you fix them! (you can squash commits right away so we could merge it ASAP)'
p8493
aS'ping @artem-zinnatullin to review again please.\r\n'
p8494
aS':+1: thanks a lot, @Chaoba! (Looks like we can merge it now)'
p8495
aS':+1:\r\n'
p8496
asg14
S'Chaoba:optimizate_single_just'
p8497
sbsI3643
(iPull
Pull
p8498
(dp8499
g3
S"Benchmark `Single`'s behavior with `flatMap`, `subscribeOn` and `observeOn`.\r\n\r\nResults: (i7 4790, Windows 7 x64, Java 8u72)\r\n\r\n```\r\nBenchmark                   Score       Error  Units\r\ndirect                9054864,731  189403,130  ops/s\r\nflatmap               2761060,187   40953,148  ops/s\r\nflatmapConst          2763238,776   34372,376  ops/s\r\nobserveOn              300489,044   27461,361  ops/s\r\nobserveOnExec          333838,535    9098,275  ops/s\r\nobserveOnFJ            402261,384    9467,060  ops/s\r\nobserveOnSchExec       342714,377    8624,188  ops/s\r\nsubscribeOn            311487,902    8986,858  ops/s\r\nsubscribeOnExec        257315,361   29967,833  ops/s\r\nsubscribeOnFJ          383189,863   12596,397  ops/s\r\nsubscribeOnSchExec     290880,185   45773,862  ops/s\r\n```\r\n\r\nHere is a side-by-side comparison of throughput on various schedulers:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12547224/5dc0b5aa-c34f-11e5-889f-f77bca708997.png)\r\n"
p8500
sg5
S'1.x: Single performance measurements'
p8501
sg7
(lp8502
S'Performance'
p8503
asg10
I3643
sg11
(lp8504
sg14
S'akarnokd:ScalarPerf1x'
p8505
sbsI3644
(iPull
Pull
p8506
(dp8507
g3
S'Discovered in a [stackoverflow](http://stackoverflow.com/questions/35001387/how-to-handle-error-in-generatestate-in-synconsubscribe-rxjava) question.'
p8508
sg5
S'1.x: fix SyncOnSubscribe not signalling onError if the generator crashes'
p8509
sg7
(lp8510
S'Bug'
p8511
asg10
I3644
sg11
(lp8512
S':+1:'
p8513
aS':+1: '
p8514
aS'@stealthcode Do you have time to review #3631, see what else can be included into 1.1.1 and hopefully release it this week?'
p8515
aS"Sure I'll see what we can do."
p8516
asg14
S'akarnokd:SyncOnSubscribeErrorMgmt1x'
p8517
sbsI3645
(iPull
Pull
p8518
(dp8519
g3
S'The OnSubscribeAmb shared the choice variable among all of its subscribers which prevented reusing the same Observable.'
p8520
sg5
S'1.x: fix Amb sharing the choice among all subscribers'
p8521
sg7
(lp8522
S'Bug'
p8523
asg10
I3645
sg11
(lp8524
S':+1: '
p8525
asg14
S'akarnokd:AmbStateFix1x'
p8526
sbsI3647
(iPull
Pull
p8527
(dp8528
g3
S'This change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler'
p8529
sg5
S'Adding support for concurrently inserting actions while advancing time'
p8530
sg7
(lp8531
sg10
I3647
sg11
(lp8532
S'Hi. Why do you need this feature? TestScheduler is for single-threaded testing.'
p8533
aS"In fact, TestScheduler is also a very nice tool to use in integration tests. I'm using it in some automated integration tests where the time of the day is important and need to be controlled. These tests are moving the time progressively, checking the output of the software is coherent with the simulated time."
p8534
asg14
S'bcorne:2.x'
p8535
sbsI3648
(iPull
Pull
p8536
(dp8537
g3
S'\r\n\r\nThis change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler'
p8538
sg5
S'2.x: Add support for concurrently inserting actions while advancing time'
p8539
sg7
(lp8540
S'Feature-Request'
p8541
asg10
I3648
sg11
(lp8542
S"I'm in for this small change. Could you rebase/redo this for the current 2.x branch?"
p8543
aS'Sure, will do that today'
p8544
aS'Thanks.'
p8545
asg14
S'bcorne:2.x'
p8546
sbsI3651
(iPull
Pull
p8547
(dp8548
g3
S'As promised in #3579.'
p8549
sg5
S'1.x: Remove redundant "final" modifiers'
p8550
sg7
(lp8551
S'Cleanup'
p8552
asg10
I3651
sg11
(lp8553
S':+1:'
p8554
aS':+1:'
p8555
asg14
S'artem-zinnatullin:remove-redundant-final'
p8556
sbsI3653
(iPull
Pull
p8557
(dp8558
g3
S'Reported on the rxjava discussion group.\r\n\r\nSample has to disconnect itself from the Producer chain and request Long.MAX_VALUE instead of whatever the downstream requests.'
p8559
sg5
S'1.x: fix sample(Observable) not requesting Long.MAX_VALUE'
p8560
sg7
(lp8561
S'Bug'
p8562
asg10
I3653
sg11
(lp8563
S':+1: '
p8564
aS':+1: '
p8565
asg14
S'akarnokd:SampleUnboundedFix1x'
p8566
sbsI3655
(iPull
Pull
p8567
(dp8568
g3
S'Part of #3652, will submit a PR for `onErrorResumeNext(Func1<Throwable, Single>)` later.'
p8569
sg5
S'1.x: Add Single.onErrorResumeNext(Single)'
p8570
sg7
(lp8571
S'Enhancement'
p8572
asg10
I3655
sg11
(lp8573
S'@akarnokd changed to `implements Single.OnSubscribe`! PTAL'
p8574
aS':+1:'
p8575
aS'@zsxwing PTAL :)'
p8576
aS':+1: '
p8577
aS':+1: '
p8578
asg14
S'artem-zinnatullin:single-onErrorResumeNextViaSingle'
p8579
sbsI3658
(iPull
Pull
p8580
(dp8581
g3
S'This PR fixes 2 bugs with `sample`\r\n\r\n- Termination of the main or sampler subscriber unsubscribed the child subscriber which is not allowed.\r\n- The sampler wrapped the child subscriber and thus it allowed setting a producer on the child (thus sampling based on request with some sources).\r\n\r\nIn addition, #3657 wants to emit the very last item on completion to which I marked the required changes in comments (to be uncommented in a separate PR if needed).'
p8582
sg5
S'1.x: fix unsubscription and producer issues in sample(other)'
p8583
sg7
(lp8584
S'Bug'
p8585
asg10
I3658
sg11
(lp8586
S'Restored original completion-unsubscription order + verification'
p8587
aS':+1: '
p8588
aS':+1: '
p8589
asg14
S'akarnokd:SampleOtherMoreFixes1x'
p8590
sbsI3659
(iPull
Pull
p8591
(dp8592
g3
S'Was using a pretty old version of gradle. Tests all run normally for me locally with this'
p8593
sg5
S'Add wrapper task and update to gradle 2.10'
p8594
sg7
(lp8595
sg10
I3659
sg11
(lp8596
S"You can rarely update Gradle when you use Netflix's Nebula plugins. They are violently linked to implementation details because reasons."
p8597
aS"Ah, guess that explains why there haven't been any updates lately. Should I close this then?"
p8598
aS'eesh, yeah not even 2.3 will work. I was misled locally since the `wrapper` task worked the first time, but that made sense since `2.2.1` worked fine. Closing for now then. Wonder what the status is, came across #3501 after digging a bit more and seems it was closed without explanation.'
p8599
asg14
S'hzsweers:z/gradle'
p8600
sbsI3660
(iPull
Pull
p8601
(dp8602
g3
S"2.x already uses `Iterable`, but that's a very drastic change compared to just `Collection`.\r\n\r\nMotivation here is that I'm using set bindings to create observables in a dependency injector and I want to skip the current `new ArrayList<>(sources)` that I have to do on the set."
p8603
sg5
S'Add combineLatest overload for Collection'
p8604
sg7
(lp8605
S'Feature-Request'
p8606
asg10
I3660
sg11
(lp8607
S'Can we revisit this once #3507 is merged?'
p8608
aS'Yep. That allows exposing `Iterable` as well which is even better.'
p8609
aS":+1: \r\n\r\nDon't you want to add tests for your new `Observable.combineLatest()`? `OnSubscribeCombineLatest.java` is internal, will be great to cover public API as well for possible changes in future implementation and to test operator from user's point of view."
p8610
aS"Tests for `OnSubscribeCombineLatest` were modified, but I'm talking about tests for `Observable.combineLatest(Collection, FuncN)`."
p8611
aS'They use that API.'
p8612
asg14
S'JakeWharton:jw/collection'
p8613
sbsI3661
(iPull
Pull
p8614
(dp8615
g3
S"This PR is a backport of the 2.x `combineLatest` with `null` support and let's the programmer combine more than 128 sources at once. Note that 2.x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment; I kept these in case such features are required by 1.x some day.\r\n\r\nThe original had this 128 limit due to using a single and non-parametric RxRingBuffer to store values from sources. In addition, the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the buffer.\r\n\r\nThis PR uses an unbounded-linked SPSC queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary).\r\n\r\nThe algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream, that source subscriber gets the request() replenishment call that generated the row.\r\n\r\nIn addition, I've added an Iterator overload from #3660 as well."
p8616
sg5
S'1.x: CombineLatest now supports any number of sources'
p8617
sg7
(lp8618
S'Bug'
p8619
aS'Enhancement'
p8620
asg10
I3661
sg11
(lp8621
S'Thanks!'
p8622
aS':+1:\r\n'
p8623
asg14
S'akarnokd:CombineLatestManyV3'
p8624
sbsI3662
(iPull
Pull
p8625
(dp8626
g3
S"When the operator is assembled and it sets the producer on the child, if the child doesn't request until the assembly is complete, `doOnRequest` requested the default Long.MAX_VALUE."
p8627
sg5
S'1.x: fix doOnRequest premature requesting.'
p8628
sg7
(lp8629
S'Bug'
p8630
asg10
I3662
sg11
(lp8631
S'Good find thanks @akarnokd'
p8632
aS'Done.'
p8633
aS':+1: '
p8634
aS':+1:'
p8635
asg14
S'akarnokd:DoOnRequestFix'
p8636
sbsI3665
(iPull
Pull
p8637
(dp8638
g3
S'fix for https://github.com/ReactiveX/RxJava/issues/3664'
p8639
sg5
S'Update javadoc for Subscribers.empty()'
p8640
sg7
(lp8641
S'Documentation'
p8642
asg10
I3665
sg11
(lp8643
S':+1: '
p8644
aS':+1:'
p8645
aS':+1:\r\n'
p8646
aS':+1: '
p8647
asg14
S'digitalbuddha:bug/javadoc_update'
p8648
sbsI3668
(iPull
Pull
p8649
(dp8650
g3
S'Due to the issue with AtomicXFieldUpdaters on certain Android devices, I had to manually replace all of them with regular AtomicX classes.'
p8651
sg5
S'2.x: full JDK 6 compatible backport + including bugfixes up to today'
p8652
sg7
(lp8653
S'Enhancement'
p8654
asg10
I3668
sg11
(lp8655
S"This is basically unreviewable, so I vote that it is just merged. People can go through the code base passively and bring up any issues/questions/etc. as they're discovered."
p8656
aS"It's not possible incrementally anyway, i.e., by using our own Function, it affects all operators that take Function."
p8657
aS':+1: Agree'
p8658
aS"I'm ok for merging it as is. \r\nLet's review it incrementally.\r\n:+1:"
p8659
aS':+1: for all of this'
p8660
aS'Merged. Happy reviewing!'
p8661
asg14
S'akarnokd:Java6Backport'
p8662
sbsI3670
(iPull
Pull
p8663
(dp8664
g3
S'fix for javadoc issue #3669'
p8665
sg5
S'1.x: fix Subscribers.create(onNext) javadoc'
p8666
sg7
(lp8667
S'Documentation'
p8668
asg10
I3670
sg11
(lp8669
S':+1:'
p8670
aS'oh, what a mistake in javadoc. :+1: thanks!'
p8671
aS':+1: '
p8672
aS':+1: '
p8673
asg14
S'oguzbabaoglu:subscribers_javadoc_fix'
p8674
sbsI3671
(iPull
Pull
p8675
(dp8676
g3
S'I forgot that RxCached threads can get evicted during the test. The new logic makes sure no new threads appeared.'
p8677
sg5
S'2.x: fix SchedulerLifecycle.testStartIdempotence vs cached threads dying'
p8678
sg7
(lp8679
S'Test-Failures'
p8680
asg10
I3671
sg11
(lp8681
S'Looks good to me.'
p8682
aS':+1: '
p8683
aS':+1: '
p8684
aS':+1: '
p8685
asg14
S'akarnokd:SchedulerTestFix2x'
p8686
sbsI3672
(iPull
Pull
p8687
(dp8688
g3
S'Since it has become standard to have everything about how to contribute on CONTRIBUTING.md file, I think   it would be really helpful and good to have link to How-to-Contribute wiki page.'
p8689
sg5
S'Add How to Contribute wiki link'
p8690
sg7
(lp8691
S'Documentation'
p8692
asg10
I3672
sg11
(lp8693
S':+1: '
p8694
aS':+1: '
p8695
aS':+1:'
p8696
asg14
S'harunurhan:1.x'
p8697
sbsI3675
(iPull
Pull
p8698
(dp8699
g3
S"Originally, only 0 was checked which resulted in `onCompleted()` but negative values weren't. When the downstream requested, c became -1 and was requested from the source. `range` ignores negative requests but other sources may throw IAE in that case.\r\n\r\nWith the fix, the operator will throw IAE in assembly time."
p8700
sg5
S'1.x: fix take(-1) not completing'
p8701
sg7
(lp8702
S'Bug'
p8703
asg10
I3675
sg11
(lp8704
S':+1: '
p8705
aS'Why not IAE on negative values for the operator? This seems like it could hide errors in math-based `take` values.'
p8706
aS"I don't know, could be some historical reasons from the early days of RxJava."
p8707
aS"Just checked Rx.Net and RxJS. Both them throw an error for negative values:\r\n\r\nhttps://github.com/Reactive-Extensions/Rx.NET/blob/859e6159cb07be67fd36b18c2ae2b9a62979cb6d/Rx.NET/Source/System.Reactive.Linq/Reactive/Linq/Observable.StandardSequenceOperators.cs#L1279\r\nhttps://github.com/Reactive-Extensions/RxJS/blob/master/src/modular/observable/take.js#L47\r\n\r\nSo I suggest let's throw IAE."
p8708
aS'Could you also check `skip`?'
p8709
aS"skip(0) and skip(-1) just returns the source without applying the operator to it.\r\n\r\nFor 2.x, definitely, but I'm not certain about 1.x, sounds like an API change."
p8710
aS'cc @ReactiveX/rxjava-committers thoughts about this?'
p8711
aS"For invalid inputs we've typically blown up as early as possible. "
p8712
aS'I think we need to throw exception. We can highlight this in changelog and call it a bug fix because it actually is, I guess. '
p8713
aS"I vote for throwing IAE.\r\nI don't consider it's an API change, more a bug fix."
p8714
aS'Changed the fix to throw.'
p8715
aS'Any reason for not using [`ExpectedException`](http://junit.org/javadoc/latest/org/junit/rules/ExpectedException.html), that way the exception message can also be verified plus it can be nailed down where the Exception is thrown (the moment you call `take(-1)`).'
p8716
aS'Because it is irrelevant in this case, what matters is the type IAE.'
p8717
aS':+1: '
p8718
asg14
S'akarnokd:TakeMinusNFix1x'
p8719
sbsI3677
(iPull
Pull
p8720
(dp8721
g3
S"As per #3675, we should also check the `count` argument of `skip`. Also added the missing check for `merge`'s `maxConcurrent`."
p8722
sg5
S"1.x: negative argument check for skip's count and merge's maxConcurrent"
p8723
sg7
(lp8724
sg10
I3677
sg11
(lp8725
S"I'd suggest to check exception message here and in the other tests, otherwise :+1: "
p8726
aS"> I'd suggest to check exception message here and in the other tests, otherwise\r\n\r\nDone"
p8727
aS'Thanks, @zsxwing! :+1: :+1: '
p8728
aS':+1: '
p8729
aS':+1: '
p8730
asg14
S'zsxwing:negative-check'
p8731
sbsI3678
(iPull
Pull
p8732
(dp8733
g3
S"This PR fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changes.\r\n\r\nThe main issue lies when `count > skip` in the operators, yielding overlapping buffers/windows. \r\n\r\nFor `buffer`, when the upstream completed, the logic emitted all remaining partial buffers even if there was no request for new buffers, which can result in `MissingBackpressureException` somewhere. The proper handling of the final buffers required a new backpressure management algorithm which is now part of the `BackpressureUtils` class and consists of two new methods: `postCompleteDone` called from onComplete to take over the emission of queued values and `postCompleteRequest` which manages requests before and after the completed state.\r\n\r\nFor `window`, the new window opened was emitted regardless of requests which was common due to request-amplification (i.e., requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront. To avoid the overflow, the individual windows have to go through the usual queue/drain logic as well. I've also updated the Javadoc to reflect the backpressure behavior along with parameter validation.\r\n\r\nIn addition, the window case didn't manage cancellation properly. When the outer observable is unsubscribed, the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. Instead, the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e., count reaches zero), the upstream is unsubscribed. To accomplish this, the `UnicastSubject` had to be retrofitted with a new optional callback `Action0` which gets called at most once whenever either `onError` or `onCompleted` is called or when the single `Subscriber` unsubscribes.\r\n\r\nA secondary issue was with the `TestSubscriber`'s initial request; some upstream operators could get triggered with `Long.MAX_VALUE` despite the initial request amount was set. This PR changes it to be set at construction time instead of in `onStart`."
p8734
sg5
S'1.x: fix counted buffer and window backpressure'
p8735
sg7
(lp8736
S'Bug'
p8737
asg10
I3678
sg11
(lp8738
S'Ping @stevegury @stealthcode @zsxwing '
p8739
aS"@iNoles I think that's GitHub's fault. You can see [here](https://raw.githubusercontent.com/akarnokd/RxJava/e9c6d49b0bb816c40483b4df2a580e5e1ad80c25/src/main/java/rx/Observable.java) that the line is fine. "
p8740
aS'Fixed all 3 sites of `new ArrayList`'
p8741
aS':+1: '
p8742
aS':+1: '
p8743
asg14
S'akarnokd:BufferWindowRequestFix1x'
p8744
sbsI3680
(iPull
Pull
p8745
(dp8746
g3
S'No code change.'
p8747
sg5
S'Fix various misspellings in OperatorPublish'
p8748
sg7
(lp8749
S'Cleanup'
p8750
asg10
I3680
sg11
(lp8751
S':+1:'
p8752
asg14
S'ReactiveX:stevegury-operatorpublish-misspellings'
p8753
sbsI3681
(iPull
Pull
p8754
(dp8755
g3
S'Solves the problems #3673 and #3674 by introducing a new subject-like dispatcher class `OnSubscribePublishMulticast` that does support backpressure, pauses when there are no subscribers and signals the terminal event for late subscribers; all ideal for the multicasting `publish(Func1)` overload.'
p8756
sg5
S'1.x: change publish(Func1) to use a dedicated subject-like dispatcher'
p8757
sg7
(lp8758
S'Enhancement'
p8759
asg10
I3681
sg11
(lp8760
S'Updated with more unit tests and behavior clarification/validation (`publish(Func1)` had almost no tests).'
p8761
aS'Other than this minor comment, :+1: '
p8762
asg14
S'akarnokd:PublishMulticast1x'
p8763
sbsI3682
(iPull
Pull
p8764
(dp8765
g3
S'This PR fixes the "messing around" reported in #3002 and adds an overload to `observeOn` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports).\r\n\r\nIn addition, this PR adds a proper override of the `isEmpty` method to simply compare the two indexes for emptiness directly instead of `size() == 0` to avoid looping, multi-reading and casting.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10.png)\r\n\r\nNote that the benchmark is generally quite noisy, yielding hectic results (i.e., firing up a thread with newThread may take quite some random microseconds). For example, `observeOnImmediate` shouldn\'t be affected by any of the changes yet the run-to-run variance is +/- 10%. I\'m fine with the results of the benchmark.'
p8766
sg5
S'1.x: fix observeOn resource handling, add delayError capability'
p8767
sg7
(lp8768
S'Enhancement'
p8769
asg10
I3682
sg11
(lp8770
S':+1:'
p8771
asg14
S'akarnokd:ObserveOnCleanup1xV2'
p8772
sbsI3683
(iPull
Pull
p8773
(dp8774
g3
S'See #1508'
p8775
sg5
S'1.x: javadoc for rx.exceptions.Exceptions'
p8776
sg7
(lp8777
S'Documentation'
p8778
asg10
I3683
sg11
(lp8779
S':+1: '
p8780
aS':+1: '
p8781
aS':+1: '
p8782
asg14
S'akarnokd:ExceptionsJavadoc1x'
p8783
sbsI3684
(iPull
Pull
p8784
(dp8785
g3
S'See #1511. '
p8786
sg5
S'1.x: javadoc for Producer'
p8787
sg7
(lp8788
S'Documentation'
p8789
asg10
I3684
sg11
(lp8790
S':+1: '
p8791
aS':+1: '
p8792
asg14
S'akarnokd:ProducerJavadoc1x'
p8793
sbsI3685
(iPull
Pull
p8794
(dp8795
g3
S'When the operator switches to the other, that counts as a handled error. \r\n\r\nSee also #3347.'
p8796
sg5
S'1.x: onErrorResumeNext(Func1) should not call plugin handler there'
p8797
sg7
(lp8798
S'Bug'
p8799
asg10
I3685
sg11
(lp8800
S'There are similar patterns in the other `onError*` operators, namely `OperatorOnErrorResumeNextViaObservable` and `OperatorOnErrorReturn` - do those need changing as well?'
p8801
aS"Yes, I'll update this PR."
p8802
aS'Updated, although all of these classes have backpressure bugs in them.'
p8803
aS'Replaced by #3689'
p8804
asg14
S'akarnokd:PublinErrorHandlerCallFix1x'
p8805
sbsI3686
(iPull
Pull
p8806
(dp8807
g3
g53
sg5
S'Added retry and retryWhen support for Single'
p8808
sg7
(lp8809
S'Enhancement'
p8810
asg10
I3686
sg11
(lp8811
S"Please don't unroll `import *` because it creates merge conflicts all the time."
p8812
aS'My codestyle settings messed everything a bit. Is there a exported codestyle.xml file or something similar so I could import into my IDE?'
p8813
aS'Not really. Also please squash your commits.'
p8814
aS'Could you also fix those 1 spaces removed everywhere?'
p8815
aS'I have fixed all reported problems.'
p8816
aS'Something went really wrong. I merged latest changes from upstream 1.x to my 1.x branch.'
p8817
aS"In this case, I'd just start from a clean branch of master and reapply/merge my customizations."
p8818
aS'I managed to fix it. Now I just need to sort out the missing spaces.'
p8819
aS'This looks much better.\r\n\r\n:+1:'
p8820
aS':+1:'
p8821
asg14
S'klemzy:1.x'
p8822
sbsI3688
(iPull
Pull
p8823
(dp8824
g3
S'Reported in #3687.\r\n\r\nBy the way, I see several other small problems with zip: it is implemented as an `Operator` and even though one can know the number of sources upfront, this indirection hides the fact. In addition, it uses SpMc queue but could just use Spsc because there is only one drain thread at a time.'
p8825
sg5
S'1.x: Fix zip() - observer array becoming visible too early and causing NPE'
p8826
sg7
(lp8827
S'Bug'
p8828
asg10
I3688
sg11
(lp8829
S'Few small things, otherwise lgtm :+1:'
p8830
aS'Updated.'
p8831
aS':+1:'
p8832
asg14
S'akarnokd:ZipStartBarrierFix'
p8833
sbsI3689
(iPull
Pull
p8834
(dp8835
g3
S"The operators didn't honor backpressure when they switched over to the other Observable.\r\n\r\nThis PR also includes the fix #3685."
p8836
sg5
S'1.x: unified onErrorX and onExceptionResumeNext and fixed backpressure'
p8837
sg7
(lp8838
S'Bug'
p8839
asg10
I3689
sg11
(lp8840
S"There was a test failure in BackpressureTests.testMergeAsync, run before any of the changes of this PR and shouldn't have any effect. Overloaded servers?"
p8841
aS':+1: '
p8842
asg14
S'akarnokd:OnErrorDoXFix1x'
p8843
sbsI3690
(iPull
Pull
p8844
(dp8845
g3
S'Update the gradle-rxjava-project-plugin to the latest version.\r\nUpdate gradle to version 2.10 as well.'
p8846
sg5
S'Update nebula gradle plugin'
p8847
sg7
(lp8848
S'Build'
p8849
asg10
I3690
sg11
(lp8850
S'Gradle 2.11 is out, can you not use that?'
p8851
aS"@hzsweers I didn't check recently, it has just been released!\r\nI've updated the version to 2.11."
p8852
aS':+1:'
p8853
aS':+1:'
p8854
aS'Also cherry-pick to 2.x?'
p8855
aS'Done -> #3693'
p8856
asg14
S'stevegury:nebula-gradle-update'
p8857
sbsI3692
(iPull
Pull
p8858
(dp8859
g3
S'The upgraded gradle switched my IDE to use a JDK 6 library I have installed all along and these popped up immediately.'
p8860
sg5
S'1.x: Fix Completable using JDK 7 suppressed exceptions feature'
p8861
sg7
(lp8862
S'Bug'
p8863
asg10
I3692
sg11
(lp8864
S':+1: '
p8865
aS':+1: '
p8866
aS"Although nebula gradle plugin requires Java 7, I'm still wondering if we can setup a build to compile codes with Java 6 to avoid such issue. E.g., I can just use `find src/main/java/* -name *.java | xargs javac` to compile them using Java 6 and see if any error."
p8867
asg14
S'akarnokd:CompletableJDK6Fix'
p8868
sbsI3693
(iPull
Pull
p8869
(dp8870
g3
S'Cherry-pick of the gradle nebula plugin upgrade in 1.x branch.'
p8871
sg5
S'Update nebula gradle plugin'
p8872
sg7
(lp8873
sg10
I3693
sg11
(lp8874
S':+1: '
p8875
aS':+1: '
p8876
asg14
S'stevegury:2.x'
p8877
sbsI3694
(iPull
Pull
p8878
(dp8879
g3
S'cherry-pick #3623 to 1.x'
p8880
sg5
S'1.x: #3618 adding source links for @Beta and @Experimental'
p8881
sg7
(lp8882
sg10
I3694
sg11
(lp8883
S'cc @adam-arold'
p8884
aS':+1: \r\n'
p8885
asg14
S'zsxwing:readme'
p8886
sbsI3695
(iPull
Pull
p8887
(dp8888
g3
S'Preparation for 1.1.1'
p8889
sg5
S'Release 1.1.1 changes.md'
p8890
sg7
(lp8891
S'Information'
p8892
asg10
I3695
sg11
(lp8893
S':+1: '
p8894
aS':+1: '
p8895
aS'Fixed typo.'
p8896
aS'@stevegury Feel free to merge and make the release also happen.'
p8897
asg14
S'akarnokd:Release1_1_1'
p8898
sbsI3696
(iPull
Pull
p8899
(dp8900
g3
S'Resolves #3595'
p8901
sg5
S'1.x: Added Single execution hooks'
p8902
sg7
(lp8903
S'Enhancement'
p8904
asg10
I3696
sg11
(lp8905
S'Would you also apply these plugin methods in Single?\r\n\r\n  - onSubscribeStart\r\n  - onSubscribeReturn\r\n  - onSubscribeError\r\n  - onLift'
p8906
aS'Below hooks are already called (I replaced previous calls of `RxJavaObservableExecutionHook` by `RxJavaSingleExecutionHook` calls).\r\n- onSubscribeReturn\r\n- onSubscribeError\r\n- onLift\r\n\r\nHowever there is problem with `onSubscribeStart`. This hook should be called in `onSubscribe` and `unsafeSubscribe`. Unfortunately, in `Single` `onSubscribe` and `unsafeSubscribe` methods get `Subscriber` type as parameter instead of `SingleSubscriber`. I will make a commit to cover it soon.'
p8907
aS'There is something wrong, a bunch of Single test failed.'
p8908
aS':+1:'
p8909
aS'As far I see that failing test is not related with my changes. Is `rx.schedulers.CachedThreadSchedulerTest > testUnSubscribeForScheduler` some kind of flaky test?'
p8910
aS'More tests would be appreciated, but otherwise LGTM.\r\n'
p8911
aS'Could you squash the commits and rebase this PR?'
p8912
aS':+1: (after you rebase/squash the commits)'
p8913
aS':+1:'
p8914
asg14
S'phajduk:SingleHooks'
p8915
sbsI3697
(iPull
Pull
p8916
(dp8917
g3
S"Schedulers.computation()\r\n\r\nWhen one installs a scheduler hook which makes Schedulers.computation() return a different scheduler, the constant function in ScalarSynchronousObservable crashes if that hasn't been initialized."
p8918
sg5
S'1.x: fix ScalarSynchronousObservable expects EventLoopsScheduler from'
p8919
sg7
(lp8920
S'Bug'
p8921
asg10
I3697
sg11
(lp8922
S':+1:'
p8923
asg14
S'akarnokd:JustFixScheduler'
p8924
sbsI3699
(iPull
Pull
p8925
(dp8926
g3
S'This is passing against 1.1.1 with the back-ported OperatorGroupBy, but would be good to have it in as a regression test.\r\n\r\nSee also: #3698'
p8927
sg5
S'1.x: GroupBy Regression Test Case'
p8928
sg7
(lp8929
S'Test'
p8930
asg10
I3699
sg11
(lp8931
S'Could you please squash the commits?'
p8932
asg14
S'duncani:1.x_#3698'
p8933
sbsI3701
(iPull
Pull
p8934
(dp8935
g3
S'Closes #3700.'
p8936
sg5
S'1.x: Add Completable.doOnCompleted and deprecate Completable.doOnComplete'
p8937
sg7
(lp8938
S'Cleanup'
p8939
asg10
I3701
sg11
(lp8940
S"Wait, what? I thought you wanted to add `Completable.doOnCompleted()`. I see no reason to change the established naming of `Observable.doOnCompleted()`. In fact, for consistency, I'd rather prefer adding `Completable.doOnCompleted`."
p8941
aS'That makes sense. The only reason I did it this way is because on the 2.x branch both [Observable](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Observable.java#L1714) and [Completable](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Completable.java#L1230) use `doOnComplete()`.'
p8942
aS"Yes, those follow the reactive-streams convention and Completable started out as a 2.x addition. In the meantime, I'll fix that test failure."
p8943
aS'Changed `Completable` instead, updated tests to match.'
p8944
aS':+1:'
p8945
aS'@zach-klippenstein Thanks! Just updated the title. :+1: '
p8946
aS':+1: '
p8947
asg14
S'zach-klippenstein:ObservableDoOnComplete1x'
p8948
sbsI3702
(iPull
Pull
p8949
(dp8950
g3
S"The previous algorithm used a 2 element queue but it was possible the drain loop got captured and the queue wasn't enough, causing `MissingBackpressureException`.\r\n\r\nThe new algorithm uses the requested field's most significant bit to indicate a completed state. If the terminal events reach it with non-zero request or a post-terminal request finds a zero request amount, the last item is emitted.\r\n\r\nIn addition, the upstream's producer may arrive after the first request thus the class includes the usual arbitration logic inlined. If the upstream doesn't set a `Producer` but just emits values, the production/backpressure checks are bypassed.\r\n\r\n```\r\nrx.internal.operators.OperatorFlatMapTest > testFlatMapTransformsMaxConcurrentNormalLoop FAILED\r\n    java.lang.AssertionError: Unexpected onError events: 1\r\n        at rx.observers.TestSubscriber.assertNoErrors(TestSubscriber.java:309)\r\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:419)\r\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormalLoop(OperatorFlatMapTest.java:395)\r\n        Caused by:\r\n        rx.exceptions.MissingBackpressureException\r\n            at rx.internal.operators.OperatorMapNotification$SingleEmitter.offerAndComplete(OperatorMapNotification.java:173)\r\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted(OperatorMapNotification.java:80)\r\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.slowpath(OnSubscribeFromIterable.java:101)\r\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.request(OnSubscribeFromIterable.java:73)\r\n            at rx.internal.producers.ProducerArbiter.emitLoop(ProducerArbiter.java:186)\r\n            at rx.internal.producers.ProducerArbiter.setProducer(ProducerArbiter.java:129)\r\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.setProducer(OperatorMapNotification.java:74)\r\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:49)\r\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:32)\r\n            at rx.Observable$2.call(Observable.java:162)\r\n            at rx.Observable$2.call(Observable.java:154)\r\n            at rx.Observable$2.call(Observable.java:162)\r\n            at rx.Observable$2.call(Observable.java:154)\r\n            at rx.Observable.subscribe(Observable.java:8426)\r\n            at rx.Observable.subscribe(Observable.java:8393)\r\n            at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:416)\r\n            ... 1 more\r\n```"
p8951
sg5
S"1.x: fix mapNotification's last item backpressure handling"
p8952
sg7
(lp8953
S'Bug'
p8954
asg10
I3702
sg11
(lp8955
S':+1: '
p8956
asg14
S'akarnokd:MapNotificationFix1x'
p8957
sbsI3704
(iPull
Pull
p8958
(dp8959
g3
S'This PR modified the javadoc task to make it generate the same format of http://reactivex.io/RxJava/javadoc/index.html. `gradle/stylesheet.css` is copied from https://github.com/ReactiveX/RxJava/blob/gh-pages/javadoc/stylesheet.css\r\n\r\nThis supports both Java 7 and Java 8. However, docs generated by Java 8 have a totally different style. Hence we should use Java 7 to generate javadoc and publish it to http://reactivex.io/RxJava/javadoc/index.html.'
p8960
sg5
S'1.x: Make the javadoc task generate correct docs'
p8961
sg7
(lp8962
S'Build'
p8963
aS'Documentation'
p8964
asg10
I3704
sg11
(lp8965
S':+1: '
p8966
aS':+1: '
p8967
aS':+1:'
p8968
asg14
S'zsxwing:javadoc'
p8969
sbsI3705
(iPull
Pull
p8970
(dp8971
g3
S'Generated by `./gradlew -Prelease.version=1.1.1 clean javadoc` using Java 7 after applying #3704'
p8972
sg5
S'Update RxJava Javadoc to 1.1.1'
p8973
sg7
(lp8974
S'Documentation'
p8975
asg10
I3705
sg11
(lp8976
S':+1:'
p8977
aS':+1: '
p8978
asg14
S'zsxwing:gh-pages'
p8979
sbsI3707
(iPull
Pull
p8980
(dp8981
g3
S'The empty and lambda-based `Completable.subscribe()` returns a `Subscription` whose `isUnsubscribed` should be consistent with the rest of the reactive objects by returning true if the sequence terminated (not just when one truly cancelled it).'
p8982
sg5
S'1.x: make Completable.subscribe() report isUnsubscribed consistently'
p8983
sg7
(lp8984
S'Bug'
p8985
asg10
I3707
sg11
(lp8986
S'Updated.'
p8987
aS'I see. :+1: '
p8988
asg14
S'akarnokd:CompletableLambdaIsUnsubscribed1x'
p8989
sbsI3712
(iPull
Pull
p8990
(dp8991
g3
S"As discussed in #3708\r\n\r\nThis adds `takeUntil(Observable)` and `takeUntil(Single)` support in `Single`. It was mostly just adapting the logic from the existing `OperatorTakeUntil` and adjusting it for accepting a `Single` and sending a `CancelattionException` in the event of a submission from `other` prior to a terminal event in the source `Single`.\r\n\r\nAny feedback is appreciated it, this is my first time contributing an implementation to this project. Particularly wondering if it's worth keeping both overloads or if the user should just coerce their `other` to one type or ther other. Also particularly looking for feedback on what information to include in the `CancellationException`."
p8992
sg5
S'Add takeUntil support in Single'
p8993
sg7
(lp8994
S'Enhancement'
p8995
asg10
I3712
sg11
(lp8996
S'Just noticed my IDE swapped the wildcard imports for explicit ones. Let me know if I should revert that.'
p8997
aS'Yes please.'
p8998
aS'Just style issues, otherwise LGTM :+1:'
p8999
aS'CC @akarnokd @artem-zinnatullin \r\n\r\nFor the tests, most of them are adapted from `OperatorTakeUntilTest`.  It looks like these tests have two different styles (one with `TestObservable` and the other with `Subject`). I reused both of them here, but would we maybe want to stick with one or the other? Especially with Single, I think some now overlap.\r\n\r\nAlso, if we stick with one style here, should we update the style in `OperatorTakeUntilTest` as well to match? \r\n'
p9000
aS"I'm not too keen on how the tests are named or what test framework objects you use.\r\n\r\nPlease squash your commits."
p9001
aS'Squashed'
p9002
aS':+1:'
p9003
aS"@zsxwing @stevegury any input? Need another collaborator review\r\n\r\nMain points I'm wondering about:\r\n- Should we only support one overload? If we support more than one, should it support all three (including `Completable`?)\r\n- Should `takeUntil` test styles formalized, looks like there are two styles right now judging by `OperatorTakeUntilTest`: subject-based and `TestObservable`-based."
p9004
aS":+1: \r\nYes, I think it makes sense to had an override for `Completable`.\r\nRegarding test styles, I don't think it's a big deal. The best thing to do slowly convert all the tests to the new convention (ideally in separated commits that don't change the behavior)."
p9005
aS'> sending a CancelattionException in the event of a submission from other prior to a terminal event in the source Single.\r\n\r\nThis behavior is really confusing. Why not be same as Observable? Am I missing anything?'
p9006
aS'@akarnokd and I discussed it in #3708. `Single` currently emits a `NoSuchElementException` if the stream is terminated prior to any event emission. By signaling a `CancellationException`, we can at least signal to the subscriber if the error was due to `takeUntil` unsubscribing it or normal missing emissions.'
p9007
aS'@hzsweers Thanks for clarifying. However, I would expect `Single.takeUntil` returns something that contains 0 or 1 item. How about returning Observable instead? Then the semantics of `Single.takeUntil` is `onNext{0, 1} (onCompleted | onError)`, which is consistent with `Observable.takeUntil` (`onNext{0, N} (onCompleted | onError)`)'
p9008
aS"The operators should stay in the same type as long as they can and there are operators that simply can't behave the same as their counterpart in other reactive types. If one wishes the `Observable.takeUntil` behavior, one can use toObservable().takeUntil() and get that behavior"
p9009
aS"> The operators should stay in the same type as long as they can and there are operators that simply can't behave the same as their counterpart in other reactive types. If one wishes the Observable.takeUntil behavior, one can use toObservable().takeUntil() and get that behavior\r\n\r\nIf so, I vote for `NoSuchElementException` as `CancellationException` seems counterintuitive to me. `CancellationException` looks some codes cancel Single (e.g., I call `unsubscribe` in some place). But here the error is that `Single.takeUntil` returns something that is not `Single`. Hence, I would expect `NoSuchElementException`."
p9010
aS'That\'s fair, but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved? I was of the impression that `onError` was primarily for serious, unexpected errors, whereas this seems like not unexpected or serious.\r\n\r\nConsider the following\r\n\r\nWith `NoSuchElementException`:\r\n```java\r\nPublishSubject<Integer> source = PublishSubject.create();\r\nPublishSubject<Integer> until = PublishSubject.create();\r\n\r\nsource.take(1).toSingle()\r\n        .takeUntil(until.take(1).toSingle())\r\n        .subscribe(\r\n                new Action1<Integer>() {\r\n                    @Override\r\n                    public void call(Integer integer) {\r\n                        System.out.println("Success");\r\n                    }\r\n                },\r\n                new Action1<Throwable>() {\r\n                    @Override\r\n                    public void call(Throwable throwable) {\r\n                        System.out.println("I don\'t know if it was due to unsubscribing or the source is misbehaving");\r\n                    }\r\n                });\r\n\r\nuntil.onNext(1);\r\n```\r\n\r\nvs. with `CancellationException`\r\n\r\n```java\r\nPublishSubject<Integer> source = PublishSubject.create();\r\nPublishSubject<Integer> until = PublishSubject.create();\r\n\r\nsource.take(1).toSingle()\r\n        .takeUntil(until.take(1).toSingle())\r\n        .subscribe(\r\n                new Action1<Integer>() {\r\n                    @Override\r\n                    public void call(Integer integer) {\r\n                        System.out.println("Success");\r\n                    }\r\n                },\r\n                new Action1<Throwable>() {\r\n                    @Override\r\n                    public void call(Throwable throwable) {\r\n                        if (throwable instanceof CancellationException) {\r\n                            System.out.println("It was canceled.");\r\n                        } else {\r\n                            System.out.println("Source didn\'t emit.");\r\n                        }\r\n                    }\r\n                });\r\n\r\nuntil.onNext(1);\r\n```\r\n\r\nThe example I gave in the issue is probably the best example for me. We use something similar to this for lifecycle binding in android. When the lifecycle ends, it might unsubscribe this in the middle. For a normal error, we might show a generic "an error occurred" message. In the event that it\'s just the lifecycle ending, we don\'t want to react that way, and rather likely just want to do nothing at all or clean up resources. I\'m fine with not using `CancellationException`, but I think it would be useful to add a means of being able to differentiate between unsubscription reasons. \r\n\r\nI thought about just specifying a message, but felt that @akarnokd\'s `CancellationException` suggestion made it more clear.'
p9011
aS'I\'ll add an overload for `Completable` as well, and remove the old test style in the new tests here for now. @stevegury just to be clear, the "new" style would be the `Subject`-based approach right?'
p9012
aS'@hzsweers I actually typed "it\'s a big deal" but I was willing to say "it\'s **not** a big deal" (I corrected my previous comment). I prefer the Subject based approach, but I am not strongly opinionated about that.\r\nI still :+1: on the current implementation.'
p9013
aS"> That's fair, but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved?\r\n\r\nMy point here is if Single.takeUntil(...) returns a Single that emits nothing, it should be `misbehaved` rather than `unsubscribed`."
p9014
aS'I think "CancellationException" is the clearer reaction here. Remember the problems around the Observable.single() and how it is a source of problem to find out exactly who didn\'t signal? Here, you know that if takeUntil is tripped and not some upstream machinery ends up being empty.'
p9015
aS'> I think "CancellationException" is the clearer reaction here. Remember the problems around the Observable.single() and how it is a source of problem to find out exactly who didn\'t signal? Here, you know that if takeUntil is tripped and not some upstream machinery ends up being empty.\r\n\r\nWhat if we want to add other operator that may return something doesn\'t signal? If it also emits `CancellationException`, then we still cannot find out exactly who didn\'t signal. So why not use `NoSuchElementException` to indicate all cases that didn\'t signal?'
p9016
aS"What about a subclass of `NoSuchElementException`? A `CanceledNoSuchElementException`, so to speak. Wouldn't break the downstream APIs but still allows for the subscriber to differentiate."
p9017
aS"> What about a subclass of NoSuchElementException? A CanceledNoSuchElementException, so to speak. Wouldn't break the downstream APIs but still allows for the subscriber to differentiate.\r\n\r\nMaybe a more general question, should we add special exceptions for different operators, or we just use a general exception to indicate the same error?\r\n\r\n"
p9018
aS'I think people should be aware of the implications of operators they use. Would `CompositeException` possibly be precedent for this?'
p9019
aS"> I think people should be aware of the implications of operators they use. Would CompositeException possibly be precedent for this?\r\n\r\nCompositeException is fine and clear. It indicates there are multiple errors thrown. All classes in rx.exceptions are well defined, and it's very easy to connect them with the bad cases. I can just read the exception name and tell what my codes violate. But for `CancellationException`, it's hard to connect it with `takeUntil`, especially people use some library that calls `takeUntil` internally. In addition, IMO, if I see `CancellationException`, my first thought is `Future.cancel` is called somewhere.\r\n\r\nIf we can define clearly that when should throw CancellationException/CanceledNoSuchElementException(or whatever you propose), when should throw NoSuchElementException, I won't be against that. For now, the confusing thing for me is that if a Single doesn't signal, I may receive CancellationException or NoSuchElementException."
p9020
aS"I'm fine with either. I think we could be clear in the documentation, and subclassing would still allow downstream subscribers to treat it as a `NoSuchElementException`. @akarnokd @stevegury thoughts?"
p9021
aS'Added `takeUntil(Completable)` support and standardized tests. Updated with a separate commit for easier reviewing, let me know if you want me to squash again.\r\n\r\nping @akarnokd @stevegury'
p9022
aS':+1:'
p9023
aS':+1: '
p9024
asg14
S'hzsweers:z/single_takeuntil'
p9025
sbsI3714
(iPull
Pull
p9026
(dp9027
g3
S'Relevant issue #3710 '
p9028
sg5
S'1.x: Add maxConcurrent parameter to concatMapEager'
p9029
sg7
(lp9030
S'Enhancement'
p9031
asg10
I3714
sg11
(lp9032
S'Will you update this PR?'
p9033
aS'Yes, on it !'
p9034
aS'I submitted a commit with your proposed changes, sorry for the delay. \r\nFeel free to give me more comments/changes, also I can squash if needed.'
p9035
aS":+1:\r\n\r\nDon't squash this time. Github has now a new feature for the merge button where it offers squashing. I'd like to test if it really squashes everything and the main just gets 1 commit."
p9036
aS"Nothing critical, :+1: \r\n\r\n// @akarnokd squashing on GitHub works, and it works especially great when author of the PR just commits on top of previous commits because GitHub now remembers what code you've checked and what not and you can continue reviewing from previous point (doesn't work for me when PR is always squashed)."
p9037
aS'I have updated the PR. Do PR commits trigger github notifications ? (Should I comment after I do an update ? )'
p9038
aS'Unfortunately, no notification.'
p9039
asg14
S'adi1133:1.x'
p9040
sbsI3717
(iPull
Pull
p9041
(dp9042
g3
S'The latest version of rxjava is 978K long.'
p9043
sg5
S'Update information about jar size in README.md'
p9044
sg7
(lp9045
S'Information'
p9046
asg10
I3717
sg11
(lp9047
S':+1: '
p9048
asg14
S'korniltsev:ak/update_jar_size_in_readme'
p9049
sbsI3718
(iPull
Pull
p9050
(dp9051
g3
S'new method concatMapIterable #3713'
p9052
sg5
S'new method concatMapIterable #3713'
p9053
sg7
(lp9054
S'Enhancement'
p9055
asg10
I3718
sg11
(lp9056
S'Thanks @ginbalin for the addition, could you also add a test please?'
p9057
aS'Added a simple test. Is this enough?'
p9058
aS':+1: '
p9059
aS'Please squash your commits.'
p9060
aS'Done'
p9061
aS':+1:'
p9062
asg14
S'ginbalin:1.x'
p9063
sbsI3719
(iPull
Pull
p9064
(dp9065
g3
g53
sg5
S'Documentation fix.'
p9066
sg7
(lp9067
S'Documentation'
p9068
asg10
I3719
sg11
(lp9069
S':+1:'
p9070
aS':+1: '
p9071
aS':+1: '
p9072
asg14
S'tasomaniac:patch-1'
p9073
sbsI3720
(iPull
Pull
p9074
(dp9075
g3
g53
sg5
S'1.x: Add vararg of Subscriptions to CompositeSubscription.'
p9076
sg7
(lp9077
S'Enhancement'
p9078
asg10
I3720
sg11
(lp9079
S"Could you make sure you don't have that many space changes?"
p9080
aS'Sure, I will fix it.'
p9081
aS'I have fixed formatting not to add indents on empty lines.'
p9082
aS"+ squash your commit when you're done."
p9083
aS'Please rebase and squash.'
p9084
aS"This PR is a bit old. I'm :+1: with the API change but the test worries me too.\r\n\r\nI'm merging this and will post a PR that hardens that test (+ renames them for @artem-zinnatullin sake :)."
p9085
asg14
S'klemzy:MultipleSubscriptionCompositeSubscription1x'
p9086
sbsI3722
(iPull
Pull
p9087
(dp9088
g3
S'Refs #3711. Should these new overloaded functions be annotated with `@Beta`?'
p9089
sg5
S'Add maxConcurrent parameter to flatMapIterable'
p9090
sg7
(lp9091
S'Enhancement'
p9092
asg10
I3722
sg11
(lp9093
S'The failing test (`testNoMoreRequestsAfterUnsubscribe`) seems unrelated. All tests pass locally.'
p9094
aS'If you could add one unit test for each method that verifies maxConcurrent is honored, that would be great.'
p9095
aS'While writing the test I figured you might have been right when commenting on issue #2627. If I am not mistaken all the observables created with `OperatorMapPair.convertSelector` use the same scheduler (there is no way to subscribe them to different schedulers) and thus are run sequentially and until completion. Would adding a Scheduler parameter make sense?'
p9096
aS'There is no scheduler involved here so no.'
p9097
aS':+1: as it is now'
p9098
aS':+1: '
p9099
asg14
S'lukaciko:flatMapIterable-maxConcurrent'
p9100
sbsI3727
(iPull
Pull
p9101
(dp9102
g3
S"Changes in 1.1.1. for the `scan` operator introduced a bug in requesting where when the initial request was for max value the `scan` operator requested one less than that value of upstream (which affects fast-path producers).\r\n\r\nI believe this bug only affects 1.1.1 (haven't looked at 2.x).\r\n\r\nThis PR includes a test that failed on the original code."
p9103
sg5
S'scan should pass upstream a request of Long.MAX_VALUE'
p9104
sg7
(lp9105
S'Bug'
p9106
asg10
I3727
sg11
(lp9107
S'2.x is not affected because it does a full queue-drain where the initial value is in the queue already and requests are forwarded to the upstream as they are.\r\n\r\n:+1:'
p9108
aS'>2.x is not affected\r\n\r\nThanks @akarnokd '
p9109
aS':+1:'
p9110
asg14
S'davidmoten:scan-request-bug'
p9111
sbsI3733
(iPull
Pull
p9112
(dp9113
g3
S"Instead, deliver them up to the thread's uncaught exception handler.\r\n\r\nFixes reactivex/rxjava#3726"
p9114
sg5
S'Avoid swallowing errors in Completable'
p9115
sg7
(lp9116
sg10
I3733
sg11
(lp9117
S'What happened to `CompletableTest`?'
p9118
aS'@akarnokd sorry, IJ formatted it.  Will clean up and push again.'
p9119
aS':+1:'
p9120
aS'just a nit about `timeout` in tests, otherwise :+1: '
p9121
aS'removed timeouts'
p9122
aS':+1:'
p9123
asg14
S'loganj:completable-errors'
p9124
sbsI3738
(iPull
Pull
p9125
(dp9126
g3
S'This is to facilitate the discovery of methods for creating observables that respect back pressure semantics. Currently the `Observable#create(OnSubscribe)` static method is the easiest method to discover for creating an observable which does not provide clear facilities for managing back pressure. '
p9127
sg5
S'Creating Observable#create overloads for SyncOnSubscribe and AsyncOnSubscribe'
p9128
sg7
(lp9129
S'Enhancement'
p9130
asg10
I3738
sg11
(lp9131
S"I like this addition. It makes it far more discoverable to do 'create' in a safer way. \r\n\r\n+1"
p9132
aS"I'm worried that having the same name will cause method resolution problems with other not so strict JVM languages."
p9133
aS"Looks good. @abersnaze what's an example?"
p9134
aS"Sure these two methods point to the classes, but I'd prefer those `createStateful` and such methods added to `Observable` instead."
p9135
aS"@akarnokd so you would prefer to have the static create methods explicitly listed out? This is how that would look when in an IDE (i.e. in Eclipse with `Observable.create` then hitting CTRL+Space).\r\n\r\nOne static method per concrete option:\r\n\r\n```java\r\ncreate(OnSubscribe<T> f)\r\ncreateAsyncSingleState(Func0<? extends S> generator, Action3<? super S, Long, ? super Observer<Observable<? extends T>>> next)\r\ncreateAsyncSingleState(Func0<? extends S> generator, Action3<? super S, Long, ? super Observer<Observable<? extends T>>> next, final Action1<? super S> onUnsubscribe)\r\ncreateAsyncStateful(Func0<? extends S> generator, Func3<? super S, Long, ? super Observer<Observable<? extends T>>, ? extends S> next, Action1<? super S> onUnsubscribe)\r\ncreateAsyncStateless(Action2<Long, ? super Observer<Observable<? extends T>>> next)\r\ncreateAsyncStateless(Action2<Long, ? super Observer<Observable<? extends T>>> next, Action0 onUnsubscribe)\r\ncreateSyncSingleState(Func0<? extends S> generator, Action2<? super S, ? super Observer<? super T>> next)\r\ncreateSyncSingleState(Func0<? extends S> generator, Action2<? super S, ? super Observer<? super T>> next, Action1<? super S> onUnsubscribe)\r\ncreateSyncStateful(Func0<? extends S> generator, Func2<? super S, ? super Observer<? super T>, ? extends S> next, Action1<? super S> onUnsubscribe)\r\ncreateSyncStateful(Func0<? extends S> generator, Func2<? super S, ? super Observer<? super T>, ? extends S> next)\r\ncreateSyncStateless(Action1<? super Observer<? super T>> next)\r\ncreateSyncStateless(Action1<? super Observer<? super T>> next, Action0 onUnsubscribe)\r\n```\r\n\r\nOne overload per highlevel category (Sync, Async)\r\n\r\n```java\r\ncreate(OnSubscribe<T> f)\r\ncreate(SyncOnSubscribe<S, T> syncOnSubscribe)\r\ncreate(AsyncOnSubscribe<S, T> asyncOnSubscribe)\r\n```\r\n\r\nThis isn't exactly a direct apples-to-apples representation as you'd have to use the `SyncOnSubscribe` static methods. e.g.\r\n\r\n```java\r\ncreate(SyncOnSubscribe.createStateless(Action1<? super Observer<? super T>> next))\r\n```\r\n\r\nI think I prefer the latter because the surface area of the Observable is constrained to two (three-ish) high level categories of creation options. "
p9136
aS"I've added more explanation to the javadoc. "
p9137
aS'I prefer current version (with overload per high-level category).\r\n:+1: '
p9138
aS"The test seems to be a flaky unit test. \r\n\r\n```\r\nrx.ObservableTests > testErrorThrownIssue1685 FAILED\r\n    java.lang.AssertionError: UncaughtExceptionHandler didn't get anything.\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertNotNull(Assert.java:526)\r\n        at rx.ObservableTests.testErrorThrownIssue1685(ObservableTests.java:1113)\r\n```\r\n\r\nI have added `@Experimental` to these overloads (to mirror the status of the underlying Sync/Async O.S.). Is this otherwise an acceptable API addition or are there concerns? @akarnokd @abersnaze "
p9139
aS'Travis sometimes seems to slow down drastically; that 1 second wait in that test is like 1000x more than usually needed to verify the behavior. Just rerun the test in this case.\r\n\r\nWe can start with your two methods and add the rest later.'
p9140
aS'I would prefer not to have both styles personally as redundancy makes for a cluttered and confusing api. Is it a personal preference for listing all variants?  '
p9141
aS'Only the sync ones, the async ones can be hidden behind that create overload.'
p9142
aS"I'm fine discussing that when the time comes. "
p9143
aS"@davidmoten I can't remember the exact instances of the issue but I'm not as familiar with scala, clojure, groovy, or kotlin.  I did a simple test in groovy, that worked, just because I had a REPL handy.  it would be nice have a lowest common denominator for method signatures so we don't make it unnecessarily difficult in any of those languages."
p9144
asg14
S'stealthcode:generator-return-types'
p9145
sbsI3741
(iPull
Pull
p9146
(dp9147
g3
S"Ref #3740.\r\n\r\nI didn't write much unit tests for `doOnSubscribe` because it internally uses `OperatorDoOnSubscribe` which is well covered.\r\n\r\n \r\n"
p9148
sg5
S'Add doOnSubscribe for Single'
p9149
sg7
(lp9150
S'Enhancement'
p9151
asg10
I3741
sg11
(lp9152
S':+1: '
p9153
aS':+1:'
p9154
aS':+1: '
p9155
aS'Thanks, @aaronhe42! '
p9156
asg14
S'aaronhe42:single.doOnSubscribe'
p9157
sbsI3744
(iPull
Pull
p9158
(dp9159
g3
S"The need for a buffer operator that splits the source sequence into continuous non-overlapping buffers based on the values in the sequence comes up from time to time. For, me, it reached the point where I'd consider adding operator(s) with this functionality into RxJava.\r\n\r\nThere are two variants of the required functionality: split before the element is added to the buffer: `bufferWhile`; and split after the element has been added to the buffer: `bufferUntil`.  Both cases, the predicate has to return `true` to trigger a split and emission of the current buffer.\r\n\r\nI've added 2-2 overloads of these methods to `Observable` where the second overloads allow specifying the expected capacity use of the buffers (for performance reasons). These operators don't support backpressure and go unbounded, just like `buffer(Observable)` and others.\r\n\r\nIn the operator itself, I've added backpressured versions of `bufferWhile` and `bufferUntil`, which use a prefetch queue and a request-dependent queue-drain approach. It is up for a discussion what to do with these (provided this PR is of interest at all): 1) use them as the basis for the methods instead, 2) expose them through a different name and 3) drop them.\r\n\r\n"
p9160
sg5
S'1.x: new operators buffer(While/Until) with predicate-based boundary'
p9161
sg7
(lp9162
S'Discussion'
p9163
aS'Enhancement'
p9164
asg10
I3744
sg11
(lp9165
S'w.r.t. your question, I would prefer having the backpressure-aware operator be the default implementation.'
p9166
aS"Updated:\r\n- Using backpressure and a standard prefetch of RxRingBuffer.SIZE\r\n- BufferWhile won't emit an empty initial buffer in case the first value triggers a new buffer\r\n- Added `@Experimental` tags\r\n- Added backpressure-tests and and explicit tests with empty or error sources.\r\n- renamed local variables"
p9167
aS':+1: '
p9168
aS'/cc @davidmoten @artem-zinnatullin '
p9169
aS"LGTM except operators names.\r\n\r\n* `bufferWhile(func)` sounds like it will buffer *while* you're returning `true` from `func` and it'll stop_buffering/will_split when you'll return `false`.\r\n* `bufferUntil(func)` sounds like it will buffer *until* you're returning `false` and it'll stop_buffering/will_split when you'll return `true`.\r\n\r\nMaybe something like:\r\n\r\n* `bufferAndSplitWhen(func)`\r\n* `bufferAndSplitAfter(func)`\r\n\r\nnot a great names too, but at least more obvious (to me).\r\n\r\nPing others: what do you think about operators names?"
p9170
aS"I prefer the `bufferWhile` `bufferUntil` version, it's idiomatic in functional languages like Scala and other to use those words."
p9171
aS"Well, for me it sounds like `takeWhile()`/`takeUntil()` and `skipWhile()`/`skipUntil()`.\r\n\r\nCompare:\r\n\r\n```java\r\nObservable\r\n  .range(1, 1000000)\r\n  .bufferWhile(number -> number % 10 == 0)\r\n  .subscribe(numbers -> System.out.println(numbers));\r\n\r\n// Here I'll think that it'll buffer numbers by some unknown mechanism \r\n// and then stop on first number that % 10 == 0. \r\n// Subscriber will receive not complete set of items.\r\n```\r\n\r\nAnd:\r\n\r\n```java\r\nObservable\r\n  .range(1, 1000000)\r\n  .bufferAndSplitWhen(number -> number % 10 == 0)\r\n  .subscribe(numbers -> System.out.println(numbers));\r\n\r\n// Here I clearly see that subscriber will receive all items.\r\n// And that lambda specifies split points, not the end of the stream.\r\n```\r\n\r\nidk about others but I'll have to read javadoc each time to understand what to expect with current operators names."
p9172
aS"I'll get back to reviewing the code in a bit but in terms of names an alternative is `toListWhile` and `toListUntil` that could also exist as aliases to the `buffer` versions. This is the api method I went with in *rxjava-extras* that implements this functionality ([Transformers.java](https://github.com/davidmoten/rxjava-extras/blob/a4edc924477b063586cee00be96412db2f444f95/src/main/java/com/github/davidmoten/rx/Transformers.java)). I had a dedicated operator for this stuff till I knocked up `Transformers.stateMachine` (discussion in #3442 that hasn't got any interest seemingly) and `toListWhile` and `toListUntil` goes through that (via `collectWhile/Until`).  I'll be interested to compare performance with the dedicated operator by @akarnokd in this PR. \r\n\r\nA natural extension to this PR that could be incorporated now is using `collectWhile` and `collectUntil` which `bufferWhile` and `bufferUntil` would be built on top of so that we aren't just list focused but can use arbitrary collection types."
p9173
aS'I could rename it to `bufferSplit`, change the parameters to include an isBefore boolean and only have 2 overloads.'
p9174
aS"Updated the PR:\r\n\r\n- removed that magic number, wasn't really relevant in the current setup\r\n- combined the operators into `bufferSplitWhen` and an `checkAfter` flag to express the time the predicate should be checked.\r\n"
p9175
aS'`testErrorThrownIssue1685` keeps failing for some reason on CI (but never locally).'
p9176
aS':+1: \r\nI also noticed recently that `testErrorThrownIssue1685` started failing more frequently on TravisCI.'
p9177
aS':+1: '
p9178
aS'I see that the predicate is based only on the latest emission from upstream. If the predicate was a `Func2<List<T>,T, Boolean>` then the operator would even more useful and with little change to the existing operator.'
p9179
aS'I prefer `bufferUntil/While` over `bufferSplit(predicate, true/false)`. The second version is not as readable as the first.'
p9180
aS"+1 on `bufferUntil`/`bufferWhile` but I'm not strongly opinionated about that."
p9181
aS"What's the verdict? bufferWhile/bufferUntil where until's function has to emit false?"
p9182
aS'Restored the original naming. In both operators, the predicate has to return true to trigger the next buffer. Let me know if you want some other rule.'
p9183
aS":+1: I'm with @davidmoten about the naming.\r\nPing @stealthcode @abersnaze for their input."
p9184
asg14
S'akarnokd:BufferWhile1x'
p9185
sbsI3745
(iPull
Pull
p9186
(dp9187
g3
S'The tests started regularly failing on travis. This PR increases the waiting time to 2 seconds in total.'
p9188
sg5
S'1.x: Fix the test Issue1685 not waiting long enough.'
p9189
sg7
(lp9190
S'Test-Failures'
p9191
asg10
I3745
sg11
(lp9192
sg14
S'akarnokd:Issue1685Fix'
p9193
sbsI3752
(iPull
Pull
p9194
(dp9195
g3
S"This PR adds the factory method `using()` +1 overload to `Single` as requested in #3732.\r\n\r\nFor convenience, I've also added `Single.subscribe(Observer)`."
p9196
sg5
S'1.x: Single.using()'
p9197
sg7
(lp9198
S'Enhancement'
p9199
asg10
I3752
sg11
(lp9200
S':+1: '
p9201
aS'LGTM\r\n:+1: '
p9202
asg14
S'akarnokd:SingleUsing1x'
p9203
sbsI3753
(iPull
Pull
p9204
(dp9205
g3
S"This PR fixes the `SerializedObserverTest.testNotificationDelay` test to use reentrancy to verify the buffer in `SerializedObserver` is properly drained. For now, it loops 10,000 times to see if the CI brings up the issue again. Takes 400ms on my machine but I'll probably reduce it to 1,000 times.\r\n\r\n(The previous version was a bit convoluted with all those countdowns that didn't properly lock out the other thread).\r\n\r\nReported in issue #1389"
p9206
sg5
S'1.x: fix SerializedObserverTest.testNotificationDelay'
p9207
sg7
(lp9208
S'Test'
p9209
aS'Test-Failures'
p9210
asg10
I3753
sg11
(lp9211
S':+1: \r\n\r\n// Took me awhile to understand what are you doing in the test'
p9212
aS':+1: '
p9213
asg14
S'akarnokd:TestNotificationDelayFix1x'
p9214
sbsI3754
(iPull
Pull
p9215
(dp9216
g3
S'This PR adds a perf class to measure the overhead of using `empty()` when the `flatMap`/`concatMap` emulates `filter`.\r\n\r\nThis will establish the comparison baseline for `flatMap`/`concatMap` optimization as requested in #1653.\r\n\r\nThe baseline [numbers](https://gist.github.com/akarnokd/243a09e28edfc27aeb0d) (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13731994/629ce62c-e977-11e5-9f32-82dc404c792f.png)\r\n\r\nComparing `flatMap` against `concatMap`:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13731998/a15586b2-e977-11e5-82c5-b33e458cb5a9.png)\r\n\r\nHere, mask indicates the and-mask that makes emitting `empty` less frequent: 0 = always, 1 = every other, 3 = every fourth, 7 = every eighth. This also means that `rangeEmpty` starts emitting more and more values with higher mask value hence the different throughput values.\r\n'
p9217
sg5
S'1.x: measure flatMap/concatMap performance when used as filter'
p9218
sg7
(lp9219
S'Performance'
p9220
asg10
I3754
sg11
(lp9221
S"Thanks @akarnokd, very good of you. I'll set up a PR to use it."
p9222
asg14
S'akarnokd:FlatMapAsFilterPerf'
p9223
sbsI3755
(iPull
Pull
p9224
(dp9225
g3
S'I hope this fixes the test once and for all.'
p9226
sg5
S'1.x: fix attempt 2 for testErrorThrownIssue1685'
p9227
sg7
(lp9228
S'Test-Failures'
p9229
asg10
I3755
sg11
(lp9230
sg14
S'akarnokd:FixtestErrorThrownIssue1685Again'
p9231
sbsI3756
(iPull
Pull
p9232
(dp9233
g3
S'Original issue: #3616.'
p9234
sg5
S'1.x: clarify join/groupJoin no ordering guarantees'
p9235
sg7
(lp9236
S'Documentation'
p9237
asg10
I3756
sg11
(lp9238
S':+1: '
p9239
aS':+1: '
p9240
aS':+1: '
p9241
asg14
S'akarnokd:JoinNoOrder1x'
p9242
sbsI3757
(iPull
Pull
p9243
(dp9244
g3
S'Changes:\r\n- `OperatorSampleWithTime` emits last stored value if it is set before `onCompleted`\r\n- `OperatorSampleWithObservable` emits last sampled value if source or sample complete.\r\n\r\nAs discussed in https://github.com/ReactiveX/RxJava/issues/3657.'
p9245
sg5
S'1.x: Operator sample emits last sampled value before termination.'
p9246
sg7
(lp9247
S'Enhancement'
p9248
asg10
I3757
sg11
(lp9249
S':+1:'
p9250
aS':+1: '
p9251
asg14
S'kboyarshinov:sample_operator_termination'
p9252
sbsI3759
(iPull
Pull
p9253
(dp9254
g3
S"This is a full rewrite of the `concat`/`concatMap` operator with the following properties:\r\n\r\n  - using `OnSubscribe` to save on the allocation of `lift`\r\n  - `concatDelayError` and `concatMapDelayError` to delay errors to the very end\r\n  - new trampolining logic that also subscribes to the next source even if requested is zero\r\n  - using `concatMap` or `concatMapDelayError` on a scalar source now bypasses the operator completely and uses `ScalarSynchronousObservable.scalarFlatMap` as well.\r\n  - the operator now detects `just` and `empty` sources and bypasses subscribing accordingly\r\n  - added `ExceptionsUtils` to work with composite exceptions and terminal state; useful for other similar delaying operators later on.\r\n  - `concat` is now implemented as `concatMap(v -> v)` which saves on the allocation of an entire `map` operator\r\n  - `OperatorWindowWithSizeTest.testBackpressureOuterInexact` had to be ignored because `window` doesn't honor backpressure properly and it is fixed in #3678; once it has been resolved, the test can be reenabled\r\n  - Added varargs constructor to `CompositeException` for convenience; avoids creating a list when the number of initial exceptions are known upfront.\r\n\r\nPerformance comparison to baseline (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13744915/603866a8-e9eb-11e5-8711-8feb24fbb872.png)"
p9255
sg5
S'1.x: concatMap full rewrite + delayError + performance'
p9256
sg7
(lp9257
S'Enhancement'
p9258
aS'Performance'
p9259
asg10
I3759
sg11
(lp9260
S'This is the benchmark comparison against Rsc:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13758467/dffef0e4-ea29-11e5-9713-334fbca491cd.png)'
p9261
aS'LGTM :+1: '
p9262
asg14
S'akarnokd:OnSubscribeConcatMap1x'
p9263
sbsI3760
(iPull
Pull
p9264
(dp9265
g3
S'This PR relates to the failure of `errorThrownIssue1685`.\r\n\r\nThe underlying problem was with the `GenericScheduledExecutorService`. By being multi-threaded, tasks scheduled from the same thread one after the other may get reordered because different worker threads inside the pool could pick them up at the same time. In this case, there is no guarantee they keep their FIFO order.\r\n\r\n*(I currently have no idea how one can use trampolining for this case; subsequent tasks may have any relative delays in respect to each other.)*\r\n\r\nThe solution creates N single threaded `ScheduledExecutorService`s and getInstance() hands one of them out. In turn `ExecutorService` takes one in its worker upfront.\r\n\r\nHowever, there is still the problem when the programmer uses a multi-threaded `ScheduledExecutorService` with `Schedulers.from()` when the same issue comes back. A solution to that problem would be to always use the new `GenericScheduledExecutorService` for delaying timed tasks.'
p9266
sg5
S'1.x: fix ExecutorScheduler and GenericScheduledExecutorService reorder bug'
p9267
sg7
(lp9268
S'Bug'
p9269
aS'Test-Failures'
p9270
asg10
I3760
sg11
(lp9271
S'I have trouble understanding how this solve the problem, could you please elaborate?\r\nThe only thing I see that we could do to force the FIFO order is to cap the thread number to 1, right?'
p9272
aS"Yes, ExecutorScheduler's worker needs a helper ScheduledExecutorService with a single thread only. But we don't want all ExecutorSchedulers to wait in a single thread for their time to run. This change, similar to how computation scheduler works, hands out single hreaded ScheduledExecutorServices on demand."
p9273
aS"Nice catch.\r\n\r\n> However, there is still the problem when the programmer uses a multi-threaded ScheduledExecutorService with Schedulers.from() when the same issue comes back. A solution to that problem would be to always use the new GenericScheduledExecutorService for delaying timed tasks.\r\n\r\nI vote for `always use the new GenericScheduledExecutorService for delaying timed tasks.`. Correctness is more important than performance. Moreover, when people use `schedule(action, time)`, they usually don't want the codes to run as fast as possible, so the performance lost doesn't really matter."
p9274
aS'Agree with @zsxwing that correctness is more important than performance.'
p9275
aS"Right, I'll fix them shortly."
p9276
aS'Updated.'
p9277
aS':+1: '
p9278
aS':+1:'
p9279
asg14
S'akarnokd:ErrorThrownIssue1685Again2'
p9280
sbsI3761
(iPull
Pull
p9281
(dp9282
g3
S'This PR improves the overhead when one merges/flatMaps `empty()` sequences.\r\n\r\nBenchmark results: (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13749421/a04a35c6-ea01-11e5-8b02-53ad07517453.png)\r\n\r\nFor rare `empty()`, the overhead seems to be around the noise level.\r\n'
p9283
sg5
S'1.x: optimize merge/flatMap for empty sources'
p9284
sg7
(lp9285
S'Enhancement'
p9286
aS'Performance'
p9287
asg10
I3761
sg11
(lp9288
S'This is the comparison with Rsc:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13758598/818052a0-ea2a-11e5-89fc-918fb45980d1.png)\r\n'
p9289
aS"Just a general question about perf testing... in the development of SyncOnSubscribe we wrote a perf test that used the `Blackhole.consumeCPU(int)` method ([see perf test](https://github.com/ReactiveX/RxJava/blob/1.x/src/perf/java/rx/jmh/InputWithIncrementingInteger.java#L71)) because this would simulate the execution of some business logic causing registers and caches to clear. In a very short src code scan I didn't find where `FlatMapAsFilterPerf` does this. I can see that it uses the blackhole to consume the data (clearly this is necessary). Do you think it would be valuable to add some simulated business logic to each flatmap Func1 definition?"
p9290
aS"My perfs measure the overhead of the infrastructure where the subscriber does nothing else. This is like an upper bound for the throughput you can achieve. Clearly, if you have `sleep(100)` in the consumer, almost none of the optimization will show up as a gain. Same goes for `consumeCPU` but on a nanosecond-scale. Therefore, I don't see the value but you can always experiment."
p9291
aS'I hear what you are saying, however sleep is very different than consuming cpu cycles. I completely agree that testing the lower bounds of performance is valuable. Right now we are testing very common use cases. However another common use case is where other work is done on business logic. Using the `Blackhole.consumeCPU()`  api in some tests could level the playing field between two implementations when one implementation disproportionately favors cache locality. '
p9292
aS"Also there is the matter of the JIT-er. I am not entirely sure but wouldn't this prevent inlining the Func1? This surely is a common use case that we are missing in these perf tests. "
p9293
aS"Our infrastructure is full of atomic operators that take 21-45 cycles on a good day and cause write buffer flushes even with synchronous code. I think the `consumeCPU` comes in handy when one benchmarks queues concurrently as it can help offset the sides just enough to not step on each other.\r\n\r\nPrimarily, call depth/stack depth is the limiting factory for JIT, the fewer layers there are and the smaller the methods are, JIT can do more. This is why I advocate for flatMap() instead of merge() because merge(map()) allocates more and pushes through more layers than flatMap() which has the function call and result use right next to each other. JIT inlines such Func1 quite nicely and with such barebone perfs, failures of inline also show up as a throughput loss. \r\n\r\nHowever, just by looking at the code, only JIT experts can tell what happens. There is the JITWatch tool that does a better job but requires some nasty DLLs to be built for Windows and thus I don't use it."
p9294
aS"I think that what @stealthcode is referring to is the fact that most microbenchmarks test a tiny piece of code in a contented way. AFAIK `consumeCPU` can help removing the contention without impacting the measure.\r\n\r\nRegarding the JIT, as you mentioned call depth is a limiting factor, but AFAIK the main one is the byte-code size of the method. Thus, a big method is less likely to be inlined, and then it's less likely that beneficial optimizations will take place (dead-code elimination, escape-analysis, ...).\r\nBy optimizing a piece code by adding a special case, you're always at risk of making the code big enough to prevent inlining. My rule of thumb is to check if the special case is actually seen in a production system (vs. a microbenchmark).\r\n\r\nThat being said, the modification you proposed is relatively minimal (1 test, 1 method call), and the impact on the byte-code size is small. So :+1: for this change.\r\n\r\nPS: JITWatch is a very good tool, especially when you want to learn what the JVM is doing."
p9295
aS':+1: // comparison looks fantastic'
p9296
asg14
S'akarnokd:FlatMapEmpty1x'
p9297
sbsI3762
(iPull
Pull
p9298
(dp9299
g3
S"Before this PR messagePrefix was never used :dancer: \r\n\r\nIf you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it' be nicer.\r\n\r\nAbout the message is there any reason for having a space after the dot?"
p9300
sg5
S'1.x: Deprecate CompositeException constructor with message prefix'
p9301
sg7
(lp9302
S'Cleanup'
p9303
asg10
I3762
sg11
(lp9304
S"We don't really use that constructor or the message, so I'd prefer removing it altogether."
p9305
aS'Yeah I also realized that later since no test broke after that change. So do you want me to remove it?'
p9306
aS"Yes, but don't rush it as there is another, much heavier PR #3759 that also changed this class."
p9307
aS'Alright just ping me once #3759 is in'
p9308
aS'@akarnokd I updated the PR again and changed the commit message and the title. I hope the changes are okay now. If the removal of whitespace bugs you just let me know.'
p9309
aS'Yes, please revert those space changes. (Are you using IntelliJ?)'
p9310
aS'Those changes I did in Sublime and I set it up in a way that it should remove trailing whitespace ;)\r\n\r\nAlso updated the PR and removed the spaces'
p9311
aS"Almost, but forgot that its a public API component thus can't just remove the constructors. Could you instead deprecate `CompositeException(String message, List<Throwable> errors)`?"
p9312
aS'@akarnokd like this?'
p9313
aS'Yes.\r\n\r\n:+1:'
p9314
aS':+1: '
p9315
aS':+1: '
p9316
asg14
S'vanniktech:dev_fix_composite_exception_message_prefix'
p9317
sbsI3763
(iPull
Pull
p9318
(dp9319
g3
S'This PR exposes the `delayError` option in `combineLatest` as `combineLatestDelayError`.\r\n\r\n(Note that we have convenience overloads with 2-9 sources that could also use an overload, but that just expands the API surface drastically.)'
p9320
sg5
S'1.x: combineLatestDelayError'
p9321
sg7
(lp9322
S'Enhancement'
p9323
asg10
I3763
sg11
(lp9324
S':+1: '
p9325
aS':+1: '
p9326
asg14
S'akarnokd:CombineLatestDelayError1x'
p9327
sbsI3764
(iPull
Pull
p9328
(dp9329
g3
S"Since #3668 was merged we should now be able to build a separate artifact for Java 6, while continuing to maintain the main project using Java 8. This splits the project into 'rxjava' and 'rxjava-java6', which compiles the same source code using retrolambda, and uses the animalsniffer plugin to ensure that we are not inadvertently using APIs introduced after Java 6."
p9330
sg5
S'Added java6 project using retrolambda'
p9331
sg7
(lp9332
S'Build'
p9333
asg10
I3764
sg11
(lp9334
S"I don't think it's worth it. RxJava 2.x will be Java 6 based and the Stream-API interoperation has to go into a separate project; or just use somebody else's Stream -> Publisher wrapper."
p9335
aS'Vote for closing as unnecessary. RxJava 2.x targets Java 6 and we can live with the small inconvenience of using inner classes.'
p9336
aS"@akarnokd @artem-zinnatullin: I'm not sure if it is only for convenience. Wouldn't there be a performance improvement by being able to use invoke dynamic internally?\r\n\r\n@rdegnan: Would it publish the jvm version in the classifier part of the artifact (rxjava-2.0.0-java8.jar)?"
p9337
aS"Most or probably all use cases for `invokedynamic` in RxJava will be lambdas. \r\n\r\nSuch usage of `invokedynamic` is currently implemented (in the HotSpot at least, afaik) pretty much the same as compiling to anonymous class but at runtime: both from performance point of view and implementation (afaik it generates same anonymous class but at runtime).\r\n\r\n(Afaik) `invokedynamic` gives noticeable performance improvements for cases when you need to do some dynamic dispatch widely used in dynamic JVM languages like Groovy, but I don't think we need it in RxJava.\r\n\r\n// Will try to invite some engineers with better knowledge of JVM/JDK to discussion."
p9338
aS'Internally, we have many context-capturing inner classes so I think lambdas would end up as object instances anyway and the runtime JIT is mostly capable of inlining through regular inner classes.'
p9339
aS'@akarnokd could you try running your JMH test suite with java6 and java8?'
p9340
aS"Sorry, I don't have the capacity to experiment with various runtime versions right now. Most inner classes get instantiated during the assembly time thus you'd only see differences with trivial functions on short sequences.\r\n\r\nIn addition, 2.x started out as a native Java 8 code and I didn't really need any Java 8 features inside the operators. It was more of a convenience in unit tests but Eclipse can turn a lambda into an inner class in a JDK 6 targeted project most of the time.\r\n\r\n`BlockingObservable.forEach` could be renamed to something non-conflicting, but I think who uses `BlockingObservable` should pay the price of manual casting to disambiguate."
p9341
aS'@JakeWharton the purpose of this is to have a single source code that generates 2 different artifacts. Android users would (by default) get the java6 compatible version. For those who want to use the java8 version they could change the dependency to point to java8 classifier. \r\n\r\n@akarnokd you want to close this PR without looking at performance metrics? '
p9342
aS"@artem-zinnatullin here is a gradle example of how dependencies would be expressed. \r\n\r\nJava6 Project build.gradle\r\n\r\n```groovy\r\ncompile 'io.reactivex:rxjava:1.1.2' // java 1.6 compatible\r\n```\r\n\r\nJava8 Project build.gradle\r\n\r\n```groovy\r\ncompile 'io.reactivex:rxjava:1.1.2:jdk18' // java 1.8 compatible\r\n\r\n// alternate\r\ncompile group: 'io.reactivex', name: 'rxjava', version: '1.1.2', classifier: 'jdk18'\r\n```"
p9343
aS"@JakeWharton if a library depends on the RxJava java8 version then it's runtime should be 1.8 and thus all usages of that library should also be running on 1.8. Why would a library need to be binary compatible with both versions? "
p9344
aS"@stealthcode please clarify if end user project will be able to specify which RxJava artifact it'll need: jdk8 or jdk6 even if some library that it depends on needs artifact with another `classifier` (until they're binary compatible, of course). \r\n\r\nExample: \r\n* `lib1` depends on `RxJava-2-jdk8`\r\n* `proj1` depends on `RxJava-2-jdk6` and `lib1`"
p9345
aS"@artem-zinnatullin in that situation the build would include both artifacts on the classpath and `proj1` would of course not compile. So as an owner of `proj1` it would not make sense to use a library designed for use with java8. However ultimately it's up to the library owner if they chose to depend on the binary incompatible version of rxjava. IMO a library author in the public domain should publish their artifact building against the standard 1.6 compatible rxjava or if they really want to they could publish 2 versions with a classifier or separate artifacts. \r\n\r\nHowever if you can predict that all users of your library specifies `targetCompatibility = 1.8` then the library author could make that decision safely. E.g. a library for consumption in a companies infrastructure where they know that all consuming projects will be running on java8 could safely publish with a dependency on the `jdk18` classifier."
p9346
aS"> the artifacts would be different and there is no reason people would want both\r\n\r\nExcept, again, the libraries that support both. You've basically just pushed the problem and burden of making two versions of every library or having two integrations on the hundreds of libraries that want to support both.\r\n\r\nThis isn't acceptable."
p9347
aS"@stealthcode then it I'll basically kill development of generic libraries around RxJava that target both java 6 and java 6+ like `rxjava-async-util`, `Retrofit`,  many db drivers and so on. \r\n\r\nWhole community will be confused and everybody will blame us for such decision. \r\n\r\nI'm sorry, but I'm voting against splitting library into two artifacts. "
p9348
aS'I\'m not an expert on how and when lambdas are converted to instances, but I\'d expect whenever a lambda ends up in a field, it has to be instantiated.\r\n\r\nI did a search for "new Function" and they are only in the base classes mostly part of the convenience overloads:\r\n\r\n**Flowable**:\r\n  - `zip(Publisher<Publisher>>, Function)` - depends on an outer parameter\r\n  - `cast(Class)` - alias for map with function that casts\r\n  - `concatMapIterable(Function)` - delegates to `concatMap` with an inner function depending on the outer parameter\r\n  - `delay(Function)` uses flatMap and complex inner function depending on the outer parameter + some inner capture of a variable\r\n  - `delaySubscription(time)` uses flatMap and a capturing lambda for the outer `this`\r\n  - `delaySubscription(Flowable)` similar to the previous\r\n  - `flatMap(Function, BiFunction)` two functions depending on different levels one up\r\n  - `flatMapIterable(Function)` delegates to `flatMap` with an inner function depending on the outer parameter\r\n  - `onErrorResumeNext(Flowable)` uses the function variant with a function returning the Flowable\r\n  - `onErrorReturnValue` uses `onErrorReturn` with a function returning the value\r\n  - `onExceptionResumeNext(Flowable)` uses the function variant with a function returning the Flowable\r\n  - `repeatWhen` one function depending on the handler and a deeper function which is constant (can be factored out)\r\n  - `replay(Function, int, Scheduler)` calls another replay with functions capturing the outer parameters\r\n  - `repeatWhen` a function depending on the outer parameter and two pure functions (can be factored out)\r\n  - `timestamp` function depends on the outer parameters\r\n  - `toMultimap` variants with pure functions (can be factored out)\r\n  - `toSortedList(Comparator)` with a function depending on the comparator\r\n\r\n**Functions**\r\nConversions 2-9 parameter functions to `Function<Object[], R>` wrapper that end up in a field.\r\n\r\n**Observable**\r\nRoughly the same as with Flowable\r\n\r\n**Single**\r\n  - `concat` delegates to `concatMap` with a pure function (can be factored out)\r\n  - `merge` delegates to `flatMap` with a pure function (can be factored out)\r\n\r\nBesides, I remember the time when we had all sorts of subprojects and changing some Java bits ended up breaking the compilation or tests of the other subprojects with no one around to help fix those. It is already cumbersome to keep track the features and tests in both 1.x and 2.x and I don\'t want to do more maintenance than necessary. I also agree with @JakeWharton and @artem-zinnatullin.\r\n\r\n'
p9349
aS"I've recently read about `invokedynamic` to understand more about the problem, and if my understanding is correct, here are my thoughts:\r\n\r\nThe main advantage of targeting java 8 (i.e. ByteCode v52) is the ability to use the `invokedynamic` instruction. On Java 8, the jvm defers the translation of lambdas at runtime (thanks to `invokedynamic`), it can translate the lambda into something like an anonymous class, a method reference [or other](http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html). This can lead to more efficient code and save allocations.\r\n\r\nNote that `invokedynamic` is used in the code that creates the lambda, but not where the lambda is invoked. Most of the usage of `new Func*` that I saw in Observable.java don't capture anything and would benefit from indy.\r\n\r\nI agree with @JakeWharton that if we decide to have to artifacts, the binary compatibility MUST be respected (and tested). Otherwise, multiple transitive dependencies may cause `NoSuchMethodException`.\r\n\r\nI think that if the build tool is properly setup, it shouldn't cause any problem to anyone. Worst case would be, having two transitive dependencies on RxJava 2, one jdk6 and one jdk8, depending on the classpath order, the jvm would either load the jdk6 bytecode (and not benefit from indy) or load jdk8 bytecode (and benefit from indy)."
p9350
aS"> Otherwise, multiple transitive dependencies may cause `NoSuchMethodException`.\r\n\r\nThe artifacts would be based on the same source code. I don't think that you could get a `NoSuchMethodException` or a `ClassNotFoundException`. I'm also pretty sure that byte code call sites from user code (or library code) to RxJava would not need to recompile if they depended on 1.8 or 1.6. For example\r\n\r\n`proj_library` depends on `RxJava:jdk18`\r\n`proj1` depends on `RxJava` (the default 1.6 + Retrolambda build) and `proj_library`\r\n\r\nIf `proj1` excluded `RxJava:jdk18` in the build script then both `proj_library` and `proj1` would be running against the 1.6 compatible code. This should still function as the call sites from both should not have to be recompiled. "
p9351
aS'I strongly feel that there should be a single artifact. With Java 9 (which is not *that* far off) we can then use [multi-version JARs](http://openjdk.java.net/jeps/238) to target Java 9+ enhancements on top of the Java 6+ base (such as adding support for all the Java 8+ and 9+ APIs). \r\n\r\nAs for the performance improvements lambdas can offer, I\'m pretty certain that if we have code where the perf benefits from a lambda, we can stop using anonymous inner classes and define static inner classes, or use static functions instead and get the same improvements.\r\n\r\nIf we are "newing" up an Object such as a `Func`, then it has instance state and a lambda is not going to dramatically improve anything if at all. Lambdas are dramatically better than anonymous inner classes when it can be determined that they are static and only get instantiated once and invoked many times ... just like we can do manually with statics.'
p9352
aS'Thanks for the contribution.\r\n\r\nSince the decision has been made to go for Java 6, I don\'t see any need or value doing Java 8 sources and cross-compiling it. Certainly, some unit tests would love the simplified lambda syntax but the IDEs can usually fix the "syntax error" of a lambda expression.\r\n\r\nJava 9 is a bit far out and until the usual tools get updated, I can\'t comment on how the multi-versioned jars would work (out).\r\n\r\nWhat I definitely want is separate id for the 2.x. Let\'s discuss that further in #3170'
p9353
asg14
S'rdegnan:2.x'
p9354
sbsI3765
(iPull
Pull
p9355
(dp9356
g3
S'This PR adds a delayError version to the `switchOnNext` / `switchMap` operators.'
p9357
sg5
S'1.x: switchOnNextDelayError and switchMapDelayError'
p9358
sg7
(lp9359
S'Enhancement'
p9360
asg10
I3765
sg11
(lp9361
S'LGM :+1: '
p9362
asg14
S'akarnokd:SwitchOnNextDelayError1'
p9363
sbsI3766
(iPull
Pull
p9364
(dp9365
g3
S'Closes #3440, closes #3731, closes #3472 (whoa, 3 issues at a time!)'
p9366
sg5
S'1.x: Add Single.onErrorResumeNext(Func)'
p9367
sg7
(lp9368
S'Enhancement'
p9369
asg10
I3766
sg11
(lp9370
S'@akarnokd fixed your comments, btw, should I add `@Experimental` to these operators?'
p9371
aS'Yes, and copy over the experimental and since tags into the javadoc.'
p9372
aS':+1: There is this new like option but do you get a notification for them?'
p9373
aS':+1: '
p9374
aS':+1: '
p9375
asg14
S'artem-zinnatullin:single-on-error-resume-next-with-function'
p9376
sbsI3767
(iPull
Pull
p9377
(dp9378
g3
S'Release notes https://docs.gradle.org/2.12/release-notes\r\n\r\n>Gradle 2.12 has the fastest build script compilation speeds of any Gradle version to date.'
p9379
sg5
S'1.x: Update Gradle wrapper to 2.12'
p9380
sg7
(lp9381
S'Build'
p9382
asg10
I3767
sg11
(lp9383
S"You should also check that there isn't any breaking changes in the [gradle plugin](https://github.com/nebula-plugins/gradle-rxjava-project-plugin). Some of the plugins expect specific version of gradle.\r\n\r\nIn your case, I think it's fine: :+1: "
p9384
aS':+1:'
p9385
asg14
S'artem-zinnatullin:gradle-wrapper-2.12'
p9386
sbsI3768
(iPull
Pull
p9387
(dp9388
g3
S"This fixes `observeOn` not completing immediately if the downstream requested exactly the remaining amount. The original version required a new request from downstream to trigger the delivery of the terminal event.\r\n\r\nThis also fixes the rare failure in `testNoMoreRequestsAfterUnsubscribe` because the unsubscription is now checked in-sequence and doesn't trigger the unwanted replenishment request."
p9389
sg5
S'1.x: observeOn - fix in-sequence termination/unsubscription'
p9390
sg7
(lp9391
S'Bug'
p9392
aS'Test-Failures'
p9393
asg10
I3768
sg11
(lp9394
S':+1: for changes, not sure about test'
p9395
aS':+1:'
p9396
aS':+1:'
p9397
asg14
S'akarnokd:ObserveOnRequestBoundaryCompletionFix'
p9398
sbsI3772
(iPull
Pull
p9399
(dp9400
g3
S'Second part of #3652, follow-up to #3655.'
p9401
sg5
S'Add Single.onErrorResumeNext(Func1<Throwable, Single>)'
p9402
sg7
(lp9403
sg10
I3772
sg11
(lp9404
S"Wow, that's coincidence ;)"
p9405
aS'Sorry!'
p9406
asg14
S'twz123:single-onErrorResumeNextViaFunction'
p9407
sbsI3777
(iPull
Pull
p9408
(dp9409
g3
S'The observeOn operator is backed by a small queue of 128 slots that may\r\noverflow quickly on slow producers.  This could only be avoided by\r\nadding a backpressure operator before the observeOn (not only\r\ninconvenient, but also taking a perf. hit as it forces hops between two\r\nqueues).\r\n\r\nThis patch allows modifying the default queue size on the observeOn\r\noperator.\r\n\r\nFixes: #3751\r\nSigned-off-by: Galo Navarro <anglorvaroa@gmail.com>'
p9410
sg5
S'observeOn: allow configurable buffer size'
p9411
sg7
(lp9412
S'Enhancement'
p9413
asg10
I3777
sg11
(lp9414
S':+1:'
p9415
aS":+1: though i'd leave old test for default buffer size and just add a new one "
p9416
aS"Rebased, fixed the javadoc link, and a spelling mistake.\r\n\r\n@artem-zinnatullin I reused this one to avoid redundancy as the code path is virtually the same, and there are tests (the ones referenced in the @link) which use the default size. Let me know if you still prefer the 2 cases and I'll fix that."
p9417
aS"Yeah, I understand, just afraid that one may change linked  tests and we won't cover overload. \r\n\r\n// one day we'll setup code coverage, I hope"
p9418
aS"Agh thanks @akarnokd, I didn't notice I changed computers so I was back on the 1st patch and lost the overload. Resubmitted based on the one with all overloads, and added the extra test instead of rewriting it. Hopefully fine now."
p9419
aS':+1:'
p9420
aS"I've seen some failures on the test locally and there is also a bug in the test (the loop should start at 2, not 1). I can't look into it right now but will take a look asap."
p9421
aS':+1: '
p9422
aS"I'm merging this. The changes are algorithmically solid so I'm not sure what failures you see locally."
p9423
aS"Thanks @akarnokd. The failure was no error notifications emitted at random sizes, but I did notice Travis didn't complain. Ping me if it surfaces."
p9424
asg14
S'srvaroa:1.x'
p9425
sbsI3778
(iPull
Pull
p9426
(dp9427
g3
S'Preparing for release 1.1.2.'
p9428
sg5
S'1.x: Release 1.1.2 CHANGES.md update'
p9429
sg7
(lp9430
S'Information'
p9431
asg10
I3778
sg11
(lp9432
S':+1: '
p9433
aS':+1: '
p9434
aS':+1: '
p9435
asg14
S'akarnokd:Release1_1_2'
p9436
sbsI3780
(iPull
Pull
p9437
(dp9438
g3
g53
sg5
S'Upgrading SyncOnSubscribe from experimental to beta'
p9439
sg7
(lp9440
S'API promotion'
p9441
asg10
I3780
sg11
(lp9442
S':+1: '
p9443
aS'@akarnokd is this alright with you?'
p9444
aS"I'm not seeing why the change before 1.2?"
p9445
aS'I think at Netflix we are comfortable using these going forward. Is there any reason to wait? This only communicates our comfort level with this api slightly more strongly. '
p9446
aS"I see the value of `SyncOnSubscribe` but I'd like some user opinion about `AsyncOnSubscribe` outside Netflix. "
p9447
aS'Okay, fair. I would also like to see some usage and feedback on `AsyncOnSubscribe` as well. However I would prefer both of these apis to be in beta so people can reliably attempt to adopt them. I am comfortable (eventually) upgrading SyncOnSubscribe to part of the standard api but have Async in Beta. Is this fair?'
p9448
aS"Fine, but since this is a promotion, I'd like a majority vote just like before 1.1.\r\n\r\nI personally would :+1: for SyncOnSubscribe promotion but I'm still not convinced about `AsyncOnSubscribe`'s usability because the unpredictable request count if chained with any reasonable prefetching/replenishing operator (observeOn, flatMap, etc.)."
p9449
aS'Okay. I still would like it if we cleaned up the prefetching behavior so the request 1 patterns which we know are detrimental to performance are resolved. '
p9450
aS'@abersnaze @zsxwing @benjchristensen any concerns with this api upgrade from experimental to beta?'
p9451
aS'Could you open a separate issue with the problem description and example code so we can discuss it and not clutter this PR?'
p9452
aS'Do you mean the prefetching/batching behavior of observeOn and flatMap? \r\n\r\nTo confirm, you are in agreement that Experimental to Beta is acceptable for both?'
p9453
aS'>  I still would like it if we cleaned up the prefetching behavior so the request 1 patterns which we know are detrimental to performance are resolved.'
p9454
aS'Cool, Yes will do!'
p9455
aS'So to confirm you do not up vote this PR as is?'
p9456
aS"> So to confirm you do not up vote this PR as is?\r\n\r\n:+1: for `SyncOnSubscribe`, :-1: for `AsyncOnSubscribe`. You'd better split the PR."
p9457
aS"I've used AsyncOnSubcribe in a couple of places with success. One of which made integrating Elasticsearch's pagination api play nicely with Rx while allowing backpressure semantics to just work. Maybe one can use the following real code as an example of AsyncOnSubscribe usage:\r\n\r\n```java\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.elasticsearch.action.ActionRequestBuilder;\r\nimport org.elasticsearch.action.search.SearchRequestBuilder;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.action.search.SearchScrollRequestBuilder;\r\nimport org.elasticsearch.client.Client;\r\nimport org.elasticsearch.common.unit.TimeValue;\r\n\r\nimport rx.Observable;\r\nimport rx.Observable.OnSubscribe;\r\nimport rx.observables.AsyncOnSubscribe;\r\n\r\npublic class ScrollObservable {\r\n\tprivate static class ElasticsearchRequestState {\r\n\t\tprivate final Client client;\r\n\t\tprivate final ActionRequestBuilder<?, SearchResponse, ?, ?> request;\r\n\t\tprivate final int pageNumber;\r\n\t\tprivate final long hitCount;\r\n\t\tprivate final TimeValue timeout;\r\n\t\tprivate ElasticsearchRequestState nextState;\r\n\r\n\t\tprivate ElasticsearchRequestState(Client client, SearchRequestBuilder request, TimeValue timeout) {\r\n\t\t\tthis.client = client;\r\n\t\t\tthis.request = request.setScroll(timeout);\r\n\t\t\tthis.timeout = timeout;\r\n\t\t\tthis.pageNumber = 0;\r\n\t\t\tthis.hitCount = 0;\r\n\t\t}\r\n\r\n\t\tprivate ElasticsearchRequestState(Client client, SearchScrollRequestBuilder request, TimeValue timeout, int pageNumber, long hitCount) {\r\n\t\t\tthis.client = client;\r\n\t\t\tthis.request = request.setScroll(timeout);\r\n\t\t\tthis.timeout = timeout;\r\n\t\t\tthis.pageNumber = pageNumber;\r\n\t\t\tthis.hitCount = hitCount;\r\n\t\t}\r\n\r\n\t\tpublic Observable<SearchResponse> getResponse() {\r\n\t\t\treturn Observable.defer(() -> Observable.just(request.execute().actionGet()))\r\n\t\t\t\t\t.retryWhen(errors -> errors.flatMap(error -> {\r\n\t\t\t\t\t\tif (error instanceof InterruptedException || error.getCause() instanceof InterruptedException) {\r\n\t\t\t\t\t\t\treturn Observable.just(null);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn Observable.error(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t\t.doOnNext(r -> {\r\n\t\t\t\t\t\tlong currentCount = hitCount + r.getHits().getHits().length;\r\n\t\t\t\t\t\tif (r.getHits().getHits().length > 0 && currentCount < r.getHits().getTotalHits()) {\r\n\t\t\t\t\t\t\tnextState = new ElasticsearchRequestState(client, client.prepareSearchScroll(r.getScrollId()), timeout, pageNumber + 1, currentCount);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic boolean hasNext() {\r\n\t\t\treturn nextState != null;\r\n\t\t}\r\n\r\n\t\tpublic ElasticsearchRequestState next() {\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(final Client client, final SearchRequestBuilder request, final TimeValue timeout) {\r\n\t\tOnSubscribe<SearchResponse> os = AsyncOnSubscribe.createStateful(() ->\r\n\t\t\t\tnew ElasticsearchRequestState(client, request, timeout),\r\n\t\t\t\t(state, requested, observer) -> {\r\n\t\t\t\t\tobserver.onNext(state.getResponse());\r\n\t\t\t\t\tif (state.hasNext()) {\r\n\t\t\t\t\t\treturn state.next();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobserver.onCompleted();\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\treturn Observable.create(os);\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(Client client, SearchRequestBuilder request, long duration, TimeUnit timeUnit) {\r\n\t\treturn from(client, request, new TimeValue(duration, timeUnit));\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(Client client, SearchRequestBuilder request) {\r\n\t\treturn from(client, request, new TimeValue(1, TimeUnit.MINUTES));\r\n\t}\r\n}\r\n\r\n```"
p9458
aS"@kurzweil interesting. It seems like you don't actually use the requested amount in producing an observable to return. I'd recommend changing `state.getResponse()` to take the `long requested` and limit the upper bounds of the data events. "
p9459
aS"@stealthcode It was some time ago, but last time I checked I couldn't find a detailed documentation on how to use these onSubscribe, other than the javadoc, after a quick search. Can you suggest a pointer to such resources if they exist? If they don't exist, could promoting these to BETA include some detailed piece of documentation, like a wiki page giving examples on how and when to use the `AsyncOnSubscribe` and `SyncOnSubscribe`?"
p9460
aS"@simonbasle Right now the documentation is pretty sparse on these topics. I would certainly welcome more documentation but don't currently have the time myself. @DavidMGross would you have some cycles to work on detailed documentation for the `SyncOnSubscribe` and `AsyncOnSubscribe`? \r\n\r\nHere is one relevant [SO post](http://stackoverflow.com/questions/32723315/is-unsubscribe-thread-safe-in-rxjava)."
p9461
aS'thanks @stealthcode '
p9462
aS"To add some color here, there's currently no stable APIs for creating observables that do backpressure-aware work deferring. Even just for wrapping a synchronous method that returns a scalar value.\r\n\r\nThis make RxJava use in libraries very challenging since `fromCallable` and the helpers herein are unavailable."
p9463
aS'What do you mean by\r\n\r\n> that do backpressure-aware work deferring\r\n\r\n?'
p9464
aS"A common pattern for deferring work is `defer(() -> just(someMethod()))`, but if the subscriber has requested 0 the defer func is still called immediately on subscription, not on the first non-zero request. `fromCallable` doesn't suffer from this problem and the heavyweight hitters in this PR don't either, but all of those are non-stable APIs. As a workaround you can do things like `empty().startWith(defer(() -> just(someMethod())))` or `concat(just(defer(() -> just(someMethod()))))` but that's a bit nuts."
p9465
aS"@JakeWharton would be nice to support this strict deferral of work formally in the API and `defer` seems like a good place to put this support (so that subscription doesn't happen till first non-zero request). I'd be happy to see this happen in the existing `defer` operator but it could happen in an overload or elsewhere. Would you like to raise an issue to discuss this one?"
p9466
aS'I have taken out `AsyncOnSubscribe` @akarnokd '
p9467
aS':+1: '
p9468
aS':+1:'
p9469
asg14
S'stealthcode:onsubscribe-upgrade'
p9470
sbsI3781
(iPull
Pull
p9471
(dp9472
g3
S'Came across an interesting use case where someone needed a way to get an external signal (unknown to the subscriber) to throttle the data going through an observable chain.'
p9473
sg5
S'1.x: Add an operator to throttle data via controlling the requests going upstream'
p9474
sg7
(lp9475
S'Enhancement'
p9476
asg10
I3781
sg11
(lp9477
S'FYI: https://gist.github.com/akarnokd/1c54e5a4f64f9b1e46bdcf62b4222f08'
p9478
aS'Do you want to pursue this further?'
p9479
aS"I'm in support for this functionality but the PR has test issues. Will you have time to fix it before 1.1.7? If not, would you want me to propose [my take on it](https://gist.github.com/akarnokd/1c54e5a4f64f9b1e46bdcf62b4222f08)?\r\n\r\nMy first month goal is to have 0 open 1.x PRs as we reach 1.1.7."
p9480
aS"Not in its current form. I was thinking that this could be made much simpler if this was composed with the rebatch operator since most of the code was batching the initial MAX_LONG request.\r\n\r\nBecause this rebatch doesn't have any queuing it makes it difficult to come up with invariants to test."
p9481
aS"Okay then, closing this for now. Don't hesitate to post a follow-up PR once you are ready."
p9482
aS"I kind of attempted the inverse of this and was going to release it separately. Rather than throttling requests to the provider, it throttles emissions from the stream and buffers them. Been busy with work but here's what it looked like - https://gist.github.com/hzsweers/91de6e2b87fa2542dd38034c4cee198c. Could open a separate PR here if you think it's something you'd want here."
p9483
aS'@hzsweers is it like a "burster", i.e., collect a window of values and then burst them out? Not sure about its general use. In addition, it has race conditions and potentially missed signals.'
p9484
aS'It wouldn\'t "burst" them out, per se. It just ensures a minimum time between emissions, normalizing a flow. I even attempted a marble diagram for it, hope this makes sense. Note that the first three emissions after normalizing are all equally spaced by a minimum window of time. It\'s admittedly a niche use case, but figured I\'d mention it after seeing this discussion.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1361086/16295628/cc114148-38dc-11e6-8787-9df024d9a8b5.png)\r\n'
p9485
aS"There is a potential for missed signals, but only in the event of backpressure (which I don't really know how to account for) or unsubscribing before the normalizer has been able to finish draining its queue."
p9486
aS"Yeah, this came up on Stackoverflow a couple of times. I can't find it but I answered such questions."
p9487
aS"This is an interesting one @hzsweers. I have a use case somewhat similar in that I have an archived timestamped stream and I'd like to replay it sped up by a factor. \r\n\r\nIf you do want to make a *Normalize*  operator like this check out @akarnokd's blog Advanced RxJava and check out operators like `OperatorObserveOn` and `OperatorOnBackpressureBuffer`.  I'd be happy to have a go at this operator but also happy to assist your PR. @akarnokd has always been very helpful when I've attempted this sort of thing and I'm sure he'd chip in (actually he'd knock it up in 5 mins but there'd be no fun for the rest of us).\r\n\r\nActually @hzsweers couldn't the `Normalize` use case be sorted by zipping with `Observable.interval`?"
p9488
asg14
S'abersnaze:valve'
p9489
sbsI3782
(iPull
Pull
p9490
(dp9491
g3
S'This is a first draft of the design document for the 2.x branch.\r\nWe are interested in collecting any feedback from the community (implementers but also pure users).\r\n\r\nThis present document is the collaborative work of @abersnaze, @benjchristensen, @stealthcode, and @stevegury. But we encourage anyone to propose improvements/clarifications via pull-request.\r\n'
p9492
sg5
S'2.x design decisions'
p9493
sg7
(lp9494
S'Discussion'
p9495
aS'Information'
p9496
asg10
I3782
sg11
(lp9497
S"### General observations\r\n\r\n#### Class structure\r\nI didn't see any mention of the architecture of the base objects and how one adds operators to it. As I suggested in my [design retrospect](http://akarnokd.blogspot.hu/2016/03/rxjava-design-retrospect.html) post, we can save a lot of allocations by extending the base class instead of using create/lift internally all the time.\r\n\r\n#### Error handling\r\nIn addition, I don't see any mention of requiring operators to call `RxJavaPlugins.onError` with exceptions that can't be delivered because of the RS contract. For example, if 2 sources on a regular flatMap signal an error, only the first can be delivered reliably and the other has nowhere to go.\r\n\r\nConsequently, since RS subscribers shoudn't really throw in their `onXXX` methods but end-subscribers tend to (as evidenced by many issue list reports), we'll need a `safeSubscribe()` method as well. As a result, we can no longer throw `OnErrorNotImplementedException` with `subscribe()` and `subscribe(Consumer)` because a) we don't know where it will bubble up and b) if it reaches the  scheduled action root, it still will end up in `RxJavaPlugins.onError`.\r\n\r\n#### Default Subscriber implementations\r\n\r\nSince cancelling and disposing is now potentially racy, we can't really expect end-subscribers to implement logic for them in their `onSubscribe()` calls. We need standard subscriber classes that do any internal exposure (access to `Subscription.request` conveniently) or external exposure (a cancellable `AsyncObserver` and `AsyncSubscriber`)\r\n\r\n### Operator fusion\r\n\r\nMacro-fusion relies on the property that operator classes can be identified in some way. For example, `just()` optimizations work in 1.x because it was implemented as a class extending `Observable` instead of hidden behind `create()`. However, as long as the Observable returned by `create()` can be unwrapped to look at the real `OnSubscribe` class, the fusion can still work, albeit with more (unnecessary) overhead. Using lambdas or anonymous inner classes defeats it.\r\n\r\nMicro-fusion requires a library-internal protocol to work amongst operators. One day, it would be great to have standard fusion protocol library that all RS libraries can implement and do cross-library fusion with it.\r\n\r\n### Changes to 2.x master\r\n\r\nI see the following changes required in current 2.x master:\r\n\r\n1. rename `Observable` to `Flowable`, including operators prefixed\r\n2. rename `NbpObservable` to `Observable`, including operators prefixed\r\n3. change `Observer` to interface, fix the depending sites\r\n4. make `PublishSubject` and `BehaviorSubject` extend `Observable` instead of `Flowable`\r\n5. remove operators from `Flowable` that would signal onError if the downstream can't keep up\r\n6. rewrite lifted operators to class-extension form\r\n7. add missing operators and overloads from 1.x,\r\n8. add missing unit tests from 1.x\r\n9. remove unnecessary operators or overloads\r\n10. add JavaDoc\r\n11. define interfaces and protocol for fusion, start applying operator-fusion to `Flowable`\r\n12. define interfaces and protocol for non-backpressured fusion, start applying operator-fusion to `Observable`\r\n\r\n"
p9498
aS"@akarnokd \r\n\r\n> we can save a lot of allocations by extending the base class instead of using create/lift internally all the time.\r\n\r\n> I don't see any mention of requiring operators to call RxJavaPlugins.onError with exceptions that can't be delivered because of the RS contract. \r\n\r\n> disposing is now potentially racy\r\n\r\n> Macro-fusion relies on the property that operator classes can be identified in some way.\r\n\r\nThese sound like additive changes to the existing design revision. Would it be okay if you make a revision to the DESIGN.md document and open a PR with proposals to address these items? \r\n\r\n> I see the following changes required in current 2.x master:\r\n\r\nCan you hold off on opening PRs until the DESIGN.md changes have been merged into 2.x? This should serve as a sign that the decisions have been reviewed and commitment has been reached by the RxJava committers. You are of course welcome to play around with code for your own understanding and demonstration purposes. "
p9499
aS'> Would it be okay if you make a revision to the DESIGN.md document and open a PR with proposals to address these items?\r\n\r\nSure.\r\n\r\nCan you hold off on opening PRs until the DESIGN.md changes have been merged into 2.x?\r\n\r\nYep.'
p9500
aS'I suggest merging this document so we can start modifying portions of it via PRs. There appear to be no general disputes, but valid changes to individual items that should be done.'
p9501
aS"It's been a week. Can we merge?"
p9502
aS"Fine, :+1:, let's use it as a starting point."
p9503
aS"Merged. Let's start making changes via small pull requests on the various details that were discussed above. "
p9504
aS"It's unfortunately been a month and nothing new has been contributed to the 2.x branch. Netflix folks,  @akarnokd, and others: would it be useful create a slack group for reactivex/RxJava to facilitate discussions amongst each other and the community rather than strictly GitHub correspondence? It seems like the latter is adding unnecessary friction to discussions since it doesn't scale well to many people discussing at once, let alone its inherent slowness conpared to chat. Could help improve organization and planning amongst contributors as well. Would be happy to help organize this, and I know many other developers have wished there was a resource like it having similar ones for other platforms and frameworks."
p9505
aS"My latest refactor PR is still not merged so I can't really start pushing other things. If you want, you can set up a chat somewhere, but note I'm at GMT+2."
p9506
asg14
S'stevegury:stevegury/2.x-design'
p9507
sbsI3783
(iPull
Pull
p9508
(dp9509
g3
S"This PR renames and moves classes around to match the design document.\r\n\r\nIn addition, JMH version is updated to 1.11.3 and Gradle to 2.12.\r\n\r\nInternal classes haven't been renamed yet and I plan to do it after this PR is merged.\r\n\r\nThis PR can't be effectively reviewed on GitHub. I suggest a clean checkout to your local IDE and see the proposed structure there."
p9510
sg5
S'2.x: rename and refactor classes to match the design document'
p9511
sg7
(lp9512
S'Cleanup'
p9513
asg10
I3783
sg11
(lp9514
S'Great stuff :100: '
p9515
aS"I'm going to trust you on this one, I didn't checkout the branch.\r\n:+1: "
p9516
asg14
S'akarnokd:DesignRefactorMain2x'
p9517
sbsI3787
(iPull
Pull
p9518
(dp9519
g3
S"In 1.1.1, `groupBy` was fixed to properly honor backpressure on the outer `Observable`. The change included a drain loop that emitted `onCompleted()` to the groups only when all `GroupedObservable`s were drained from the main queue. This delayed the group's completion unnecessarily causing the `concat` operator to hang in some source-consumer cases such as #3775.\r\n\r\nThis PR fixes the behavior by signalling `onCompleted()` to the groups the moment the main completes. \r\n\r\nNote, however, that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes, thus `concat` can't switch to the next source. One should use `flatMap` or `concatMapEager` instead."
p9520
sg5
S'1.x: fix GroupBy delaying group completion till all groups were emitted'
p9521
sg7
(lp9522
S'Bug'
p9523
asg10
I3787
sg11
(lp9524
S':+1: '
p9525
aS':+1: '
p9526
asg14
S'akarnokd:GroupByComplete1x'
p9527
sbsI3789
(iPull
Pull
p9528
(dp9529
g3
S'Closes #3784.'
p9530
sg5
S'1.x: Prevent Single.zip() of zero Singles'
p9531
sg7
(lp9532
S'Bug'
p9533
asg10
I3789
sg11
(lp9534
S':+1:'
p9535
aS':+1: '
p9536
asg14
S'artem-zinnatullin:single-zip-empty'
p9537
sbsI3790
(iPull
Pull
p9538
(dp9539
g3
S'Closes #3161.'
p9540
sg5
S'1.x: Expose Single.lift()'
p9541
sg7
(lp9542
S'API promotion'
p9543
asg10
I3790
sg11
(lp9544
S':+1:'
p9545
aS':+1: '
p9546
asg14
S'artem-zinnatullin:single-expose-lift'
p9547
sbsI3791
(iPull
Pull
p9548
(dp9549
g3
g53
sg5
S'1.x: Fix Observable delay methods typos in documenation'
p9550
sg7
(lp9551
S'Cleanup'
p9552
aS'Documentation'
p9553
asg10
I3791
sg11
(lp9554
S'Great, thanks!\r\n\r\n:+1:'
p9555
aS':+1:'
p9556
aS"@neoranga55 there's also one [here](https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Single.java#L2365)"
p9557
aS'@vanniktech do you suggest adding the fix for Single to this current PR or opening a new one?'
p9558
aS'Maybe its easier to search for that typo in all files and fix them in a single PR.'
p9559
aS"@akarnokd that's exactly what I did `ack compuation` and it returned me the two places he already fixed it and then the other one in Single"
p9560
aS'Okay, to be clear, please fix the type on Single as well in this PR.'
p9561
aS"Ok, added the fix for Single, I'm not familiar with the branching flow here so I did the one I'm familiar with: rebase to collapse both changes into a single commit."
p9562
aS'Looking good now :+1: '
p9563
aS'We prefer single commit PRs so you did right by squashing the commits.'
p9564
aS':+1: '
p9565
asg14
S'sebaslogen:patch-2'
p9566
sbsI3795
(iPull
Pull
p9567
(dp9568
g3
S'This PR makes sure `observeOn` requests replenishments in a fixed and predictable quantity of 75% of the `bufferSize`, that is, if an emission counter reaches `0.75 * bufferSize`, that amount is requested and the emission counter is reset to zero. This requires saving the emission count between drain runs. If the bufferSize is 1 or 2, the replenishment will trigger after every 1 or 2 items.\r\n\r\nNote that there is only one sensitive operator-builder, `AsyncOnSubscribe`, which is mostly affected by the request pattern as it facilitates user code to respond with an Observable sequence of the requested amount.\r\n\r\nIn addition, since `observeOn` now supports setting the buffer size, it can act as a rebatching operator via the help of `Schedulers.immediate()`.'
p9569
sg5
S'1.x: observeOn now replenishes with constant rate'
p9570
sg7
(lp9571
S'Enhancement'
p9572
asg10
I3795
sg11
(lp9573
S':+1: '
p9574
aS"That formula doesn't work if calculatedSize == 1. I've updated the PR with a comment on the calculation."
p9575
asg14
S'akarnokd:ObserveOnStableFetch'
p9576
sbsI3797
(iPull
Pull
p9577
(dp9578
g3
S'This PR factors out the `XSubscriber` types, makes sure the base types implement `ConsumableX`\r\nand methods accepting X in some way now accept `ConsumableX` type.\r\n\r\nWrapping into the base types are not yet eliminated.'
p9579
sg5
S'2.x: add ConsumableX to the base types, update method signatures'
p9580
sg7
(lp9581
S'Cleanup'
p9582
aS'Enhancement'
p9583
asg10
I3797
sg11
(lp9584
S"PR updated with the few places where I forgot to replace with the nw interfaces. In addition, I'm no longer convinced that they should cross-implement each other's base interface because it causes overload ambiguity."
p9585
aS"> I'm no longer convinced that they should cross-implement\r\n\r\nI think I agree with that statement. Do you mean that `Completable` should not implement the `ConsumableObservable`? I did not intend that in my POC."
p9586
aS'`Flowable` looks like it could do both `ConsumableObservable` and `Publisher` or `Singe` could also implement `Publisher`, but some methods become ambiguous.'
p9587
aS"Yeah, since `Flowable`'s subscribe takes a `Subscriber` and both `ConsumableSubscriber` and `Publisher` both agree on the subscriber type then we should make Flowable implement both Consumable and Publisher. The others are difficult."
p9588
aS"Added `ConsumableFlowable`. I had trouble with typing extend, using `Function<? super ConsumableFlowable<T>, R>` is too restrictive and gives no access to `Flowable's methods` and having `U extends ConsumableFlowable<T>>, Function<? super U, R>` has a type-bounce of ? super ? extends ConsumableFlowable."
p9589
aS'I got extend to work with this.\r\n\r\n```java\r\npublic class Flowable<T> implements Consumable<Subscriber<? super T>> {\r\n@Override\r\n    public <S2, X extends Consumable<S2>> X extend(Function<Consumer<Subscriber<? super T>>, X> convertion) {\r\n        return convertion.apply(onSubscribe);\r\n    }\r\n}\r\n```\r\n\r\nSo you could probably implement it similarly. '
p9590
aS"I'll try it out locally and see what works (and what doesn't). "
p9591
aS"I got it to work but the `Publisher<T> onSubscribe` is not a `Consumer<Subscriber<? super T>` so it'd require a wrapper.\r\n\r\n```java\r\n@Override\r\npublic <S2, X extends Consumable<S2>> X extend(Function<Consumer<Subscriber<? super T>>, X> conversion) {\r\n    return conversion.apply(new Consumer<Subscriber<? super T>>() {\r\n        @Override\r\n        public void accept(Subscriber<? super T> subscriber) {\r\n            onSubscribe.subscribe(subscriber);\r\n        }});\r\n}\r\n```\r\n\r\nThis required a base interface for `ConsumableFlowable`. \r\n\r\n```java\r\npublic interface Consumable<S> {\r\n    void subscribe(S subscriber);\r\n    public <S2, X extends Consumable<S2>> X extend(Function<Consumer<S>, X> conversion);\r\n}\r\n\r\npublic interface ConsumableFlowable<T> extends Consumable<Subscriber<? super T>> {\r\n}\r\n\r\npublic class Flowable<T> implements Publisher<T>, ConsumableFlowable<T> {\r\n    // ...\r\n}\r\n```"
p9592
aS"Let's experiment with that in a separate PR; also, I'd wait until the Flowable isn't a wrapper anymore but a base class that gets extended by all internal operators that were create/lift before."
p9593
aS'Why do you want this single PR to host every modification? There is a lot to do with 2.x and some of them, like extend, can be incremental.'
p9594
aS'@stealthcode the design doc PR is merged, is there anything preventing this PR from proceeding?'
p9595
aS"@hzsweers Nope. Apologies for the delay but I won't be getting back to this until next week. Thanks for the reminder. "
p9596
aS'@stealthcode ping'
p9597
aS"I'll redo this PR in multiple phases."
p9598
asg14
S'akarnokd:BaseTypeRefactor2x'
p9599
sbsI3798
(iPull
Pull
p9600
(dp9601
g3
S'Just functions in Observable class were overloaded unnecessarily with increasing arguments from 1 to 10.\r\nMarked all those methods as deprecated and defined one more overloaded just function with varargs as:\r\n`@SuppressWarnings("unchecked")\r\n    public static <T> Observable<T> just(T... t) {\r\n        return from(t);\r\n    }`\r\n\r\nThis will reduce the code redundancy and make it more elegant.'
p9602
sg5
S'Changed just() function in Observable class to varargs.'
p9603
sg7
(lp9604
sg10
I3798
sg11
(lp9605
S'@princebansal please take a look at #686 for previous discussion about varargs'
p9606
aS'@zsxwing Actually I was facing some build errors before. But now I have modified the code and using varargs. I think varargs is the better option to use rather than Iterator or multiple arguments.'
p9607
aS"I'm sorry, but this is PR is no good. There are several problems:\r\n\r\n  - Android studio file\r\n  - large amounts of space changes that make it difficult to review `Observable`\r\n  - space changes in other files\r\n  - varargs now conflict with 2-9 arg just which is bad; you had to change tests which is also an indication of problems to come to others.\r\n  - varargs usually requires SuppressWarnings in JDK 6 code which was not required with the 2-9 arg common use cases.\r\n  - you can now have an empty `just()` which is odd.\r\n\r\n:-1:"
p9608
aS"I think keeping such high arity overloaded methods is not needed and appears unprofessional. Varargs with generics though displays warnings but is friendly for developers to code using IDE as it doesn't show all methods in predictions. Also an amount of code can be cut down. The warning can be Suppressed at user side or even if not, it is not going to cause any errors. \r\n@JakeWharton @zsxwing Just think and give a final verdict. If appears unsuitable, I'll close the PR."
p9609
aS'Okay. As per experts guidance I am closing this PR and will surely contribute to this project in future with better enhancements.'
p9610
asg14
S'princebansal:1.x'
p9611
sbsI3799
(iPull
Pull
p9612
(dp9613
g3
S'https://github.com/ReactiveX/RxJava/issues/3730'
p9614
sg5
S'1.x: Add Completable.andThen(Single)'
p9615
sg7
(lp9616
S'Enhancement'
p9617
asg10
I3799
sg11
(lp9618
S'thanks for your review. fixed'
p9619
aS'Looks good! :+1: Just few small things to fix.'
p9620
aS"@artem-zinnatullin @akarnokd thanks for your review. i'll update this soon."
p9621
aS'Updated and rebased.'
p9622
aS':+1:'
p9623
aS':+1: '
p9624
asg14
S'prt2121:pt/andThenSingle'
p9625
sbsI3803
(iPull
Pull
p9626
(dp9627
g3
g53
sg5
S'1.x: Fix typos in documentation and some code'
p9628
sg7
(lp9629
S'Cleanup'
p9630
asg10
I3803
sg11
(lp9631
S':+1:'
p9632
aS':+1: '
p9633
asg14
S'sebaslogen:fix-documentation-typos'
p9634
sbsI3809
(iPull
Pull
p9635
(dp9636
g3
S"This crash happens on contention where a scalar null value has to go through the scalar-queue which doesn't support nulls and requires NotificationLite transformations. (The drain side had the proper `getValue` in place already.)\r\n\r\nReported in #3808."
p9637
sg5
S'1.x: fix merge/flatMap crashing on an inner scalar of null'
p9638
sg7
(lp9639
S'Bug'
p9640
asg10
I3809
sg11
(lp9641
S':+1: '
p9642
aS"Wrong test, didn't trigger the code path that goes into the queue. Updated."
p9643
aS':+1: '
p9644
aS':+1: '
p9645
asg14
S'akarnokd:MergeNullScalarFix1x'
p9646
sbsI3814
(iPull
Pull
p9647
(dp9648
g3
S"There are two cases when the operator `switchOnNext` / `switchMap` retained parts of an earlier source through its `Producer` via the arbiter structure:\r\n\r\n  - when a backpressure-supporting source was followed by a unsupporting source which never sets a new Producer, keeping the old one there indefinitely\r\n  - when a backpressure-supporting source terminated but was not followed by any other source for longer period of time\r\n\r\nThe fix swaps in a null-producer when a new source is encountered and when an old source terminates. The swap is guarded by the current index so outdated events won't interfere with newer sequences.\r\n\r\n**Edit**\r\n\r\nFixed a `ConcurrentModificationException` because the `queue` wasn't nulled out after assigning it to `localQueue`. Plus, I've added a test to check the async-source and async-inner doesn't cause backpressure exceptions."
p9649
sg5
S'1.x: Fix prolonged Producer retention in switchOnNext'
p9650
sg7
(lp9651
S'Bug'
p9652
asg10
I3814
sg11
(lp9653
S'Updated with another fix + test.'
p9654
aS'Closing this and will post a fresh PR with a completely rewritten operator as it has backpressure problems as well (overflow/hang).'
p9655
asg14
S'akarnokd:SwitchMapArbiterRetentionFix'
p9656
sbsI3815
(iPull
Pull
p9657
(dp9658
g3
S'Motivation: save some nanoseconds on JVM and a little bit more on Android, new construction will also be easier for JIT.'
p9659
sg5
S'1.x Provide public constant instead of UnsafeAccess.isUnsafeAvailable()'
p9660
sg7
(lp9661
S'Cleanup'
p9662
asg10
I3815
sg11
(lp9663
S'I guess this single line should be inlined by JIT. Are you worrying about some old Android versions without JIT?'
p9664
aS"Yes, `if (UnsafeAccess.isUnsafeAvailable())` should be interpreted and inlined in places, but it won't be immediate and JIT will have to figure that out. Also, I think it'll have to do it again for every place where we use this method, but not sure.\r\n\r\nRegarding Android afaik: from Android 2.3 to 4.4 it has Dalvik VM that has JIT, from Android 5 to 6 it has ART without JIT, upcoming Android N release will have ART with JIT.\r\n\r\nIdea is: if we can do something a little bit more efficiently and it doesn't make code much worse, why not."
p9665
aS"I don't know."
p9666
aS"Totally up to you, it's nanooptimization in `internal` package, very easy to go back, basically CTRL + R one to another.\r\n\r\n// -1 method for Android BTW haha"
p9667
aS"I think the reason for this should be that it's just a bit cleaner, inlined, and one less method. Perf isn't really a good or measurable heuristic for this. Maybe there's an argument for keeping the method for testing purposes, but I doubt people are mocking this."
p9668
aS'We have trouble with Samsung devices again. Could you include a check for a system property named `rx.unsafe-disable` (content value irrelevant) and thus force IS_UNSAFE_AVAILABLE to be false?'
p9669
aS"@akarnokd to not mix refactoring with new logic I've opened separate PR for system property #3829.\r\n\r\nFeel free to merge in any order.\r\n\r\n@hzsweers at the moment I don't see any profit in using method, and I'm not sure that somebody is mocking static method (PowerMock?), if I'll need it I'll rewrite value of `UNSAFE` field via reflection."
p9670
aS'Was just chiming in, I doubt anyone us mocking it and it is cleaner so I say go for it.'
p9671
aS"In term of performance, I don't think the impact will be measurable (even in interpreted mode), the method will be under the default threshold for Trivial Method (=6 for Hotspot), and will be inlined as soon as the caller is compiled, [reference code in OpenJDK](http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/opto/bytecodeInfo.cpp#l301).\r\n\r\nThe only remaining question is, what is cleaner:\r\n`UnsafeAccess.isUnsafeAvailable()` or `UnsafeAccess.IS_UNSAFE_AVAILABLE` ?\r\nI prefer the method call."
p9672
aS'As we may add other logic into `isUnsafeAvailable` in future (E.g., #3829), I prefer the method call too.'
p9673
aS"I'd keep this as a method as well."
p9674
aS'ok'
p9675
asg14
S'artem-zinnatullin:unsafeaccess-isUnsafeAvailable'
p9676
sbsI3817
(iPull
Pull
p9677
(dp9678
g3
g53
sg5
S'1.x: Upgrading AsyncOnSubscribe from Experimental to Beta'
p9679
sg7
(lp9680
S'API promotion'
p9681
asg10
I3817
sg11
(lp9682
S'see #3780 for context.'
p9683
aS'The goals for the `AsyncOnSubscribe` was motivated in part by asynchronous paginated streaming processes. An example is fulfilling a stream of data via RPC with a minimal amount of buffering on the consuming client. Buffering operators (such as `observeOn`) will issue subsequent requests upstream and when the algorithms governing these semantics are inefficient (i.e. request 1 - fulfill 1 loops) the `AsyncOnSubscribe` may be called multiple times. \r\n\r\nHowever sever _or_ trivial this impact, I do not see this as a problem with `AsyncOnSubscribe`. That is a bug with the buffering operators that needs to be fixed. Any observable which fulfills request from an async process (i.e. any RPC) will be impacted by this inefficient request behavior. This will necessitate user implementations which buffer and/or reorder the stream of data. \r\n\r\nThe `AsyncOnSubscribe` is being used inside Netflix in such a way as described above by @kurzweil (see [comment](https://github.com/ReactiveX/RxJava/pull/3780#issuecomment-199518103)). I see that this functionality provides a safe way to get around the problems of inefficient request semantics and once these problems are resolved this a good API to stream asynchronous data for precisely the amount requested by the consumer. \r\n\r\n@akarnokd you are the committer who has been most vocally against this upgrade. Can you please post your concerns with the API? '
p9684
aS"You want to rely on the request pattern which now has to be changed almost everywhere and become part of the public API to satisfy this operator. Any third party lifted operator and the whole thing may be broken again. You need tight control of the request amount which only happens reliably with a same-thread consumer (so no observeOn, etc.).\r\n\r\nIn addition, the operator can't ensure the specified amount is honored by the source it generates (i.e., last page may shorter than the page size); overproduction can shift the whole output-paging and underproduction triggers a new round to generate the missing amount. The only alternative for handling bad sources is to signal error in either case. (Btw., @kurzweil 's example doesn't use the `requested` parameter with the response).\r\n\r\nYou quoted RPC and paging as the main target for AsyncOnSubscribe. RPC requires bi-di streaming and paging requires streaming+backpressure over a network boundary, both beyond RxJava."
p9685
aS"None of your points has anything to do with the API of `AsyncOnSubscribe`. Those problems exist. But they do not impact whether we have the correct API for the use case. That is why this should be upgraded and the usage of `request(1)` should be improved. \r\n\r\n> RPC requires bi-di streaming and paging requires streaming+backpressure over a network boundary, both beyond RxJava.\r\n\r\nThe purpose of the `AsyncOnSubscribe` is to provide a safe way for a consumer of an RPC to stream data. The goal is _not_ to provide streaming over network boundaries. That is the goal of [ReactiveSocket](http://reactivesocket.io/). \r\n\r\nSo I'm still at a loss for why you argue against an API that is clearly not accounted for in RxJava. Can you give me any alternative to solving the consumer driven RPC with minimal buffering that maintains ordering?"
p9686
aS'Yes, swing around the request parameter into a `PublishSubject` that gets `flatMapped` and observed on at will:\r\n\r\n```\r\nPublishSubject<Request> req = PublishSubject.create();\r\n\r\nreq.flatMap(r -> service(r)).observeOn(Schedulers.computation()).subscribe(v -> {\r\n   process(v);\r\n   if (i++ % 20 == 0) {\r\n       req.onNext(nextPage);\r\n   }\r\n});\r\n\r\nreq.onNext(initialRequest);\r\n```\r\n'
p9687
aS'Okay, thanks. This looks interesting but could you please explain your code example a little bit? What is `nextPage`? The recursive subscription of `req` is confusing me. Why do you call `req.onNext` from within the subscribe of `req`? '
p9688
aS'To start the next round of values with different parameters for service().'
p9689
aS"I'm sorry but I don't understand it. Can you show some usage? Is this supposed to be implemented in a `Subscriber`? \r\n\r\nI'm still not seeing any necessary change to the API. There is still a need to have direct control over providing data for the precise amount requested by the consumer. This seems like implementation to buffer/collect requests to be fulfilled at sometime in the future. If so this could be used as a stop gap solution with `AsyncOnSubscribe` until the request behaviors are corrected. "
p9690
aS'You try to reinterpret the request() call which only works if the producer and the consumer are next to each other without any intermediate operators. It\'s the same problem when people try to interpret the request amount as the number of bytes to return when the sequence type is byte[]. It won\'t work properly.\r\n\r\nBy using the PublishSubject above, you have the option to control the parameters to the service\r\nand then consume the resulting data at your will. Then, signal the next set of parameters through the subject that calls the service which then creates another Observable sequence. This setup doesn\'t repurpose the backpressure-request amount and can be freely tranformed further.\r\n\r\n```java\r\npublic class ServicePaging {\r\n    static Observable<Integer> service(int start, int size) {\r\n        return Observable.range(start, size);\r\n    }\r\n    \r\n    static Pair<Observer<Integer>, Observable<Integer>> repeatingService() {\r\n        \r\n        Subject<Integer, Integer> ps = PublishSubject.<Integer>create().toSerialized();\r\n        \r\n        return Pair.of(ps, ps.concatMap(v -> service(v, 20)));\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        \r\n        Pair<Observer<Integer>, Observable<Integer>> pair = repeatingService();\r\n        \r\n        pair.second.subscribe(new Subscriber<Integer>() {\r\n            int totalReceived;\r\n            int received;\r\n            \r\n            int index;\r\n\r\n            @Override\r\n            public void onNext(Integer t) {\r\n                System.out.println(index + " - " + t);\r\n\r\n                if (++received == 20) {\r\n                    index += 20;\r\n                    received = 0;\r\n                    pair.first.onNext(index);\r\n                }\r\n\r\n                if (++totalReceived == 120) {\r\n                    pair.first.onCompleted();\r\n                }\r\n            }\r\n            \r\n            @Override\r\n            public void onError(Throwable e) {\r\n                e.printStackTrace();\r\n            }\r\n            \r\n            @Override\r\n            public void onCompleted() {\r\n                System.out.println("Done");\r\n            }\r\n        });\r\n        \r\n        pair.first.onNext(0);\r\n    }\r\n}\r\n```'
p9691
aS"Your code example shows a way that you can protect a producer from the `request-1--produce-1` problem of `observeOn` by buffering onNext and mapping a batch of onNexts and mapping a batch to a call to a service. I don't see how this actually relates. The purpose of the `AsyncOnSubscribe` is to provide a way that users can create observables that support back pressure  over asynchronous boundaries with as little buffering as possible. Your code example does not monitor the request amount so the number of elements produced by `service` cannot be constrained to the downstream operator buffer sizes. Also this example offers no capability of pre-fetching (i.e. buffers are draining and we request more data from the service eagerly). And one more thing that I think is slightly trivial to fix but still a jagged edge to consider... when there is a slow producer of `onNext` values then you may have an interim (i.e. between 0 and 20) request value for a long time without fulfilling that request. \r\n\r\nI still don't see what is the hold up. Why not use request values for what they are intended? "
p9692
aS'I just want to clarify. I don\'t think its absolutely necessary to fix all cases of this request behavior _right now_. I\'m not talking about promoting into public (i.e. non-`@Beta`) immediately. I think that we should make it safe for use before its made public. What I\'m really looking for from you @akarnokd is just some sort of agreement that this is a desirable direction. If so then we can change the conversation from it\'s API and move on to more productive "fix the request pattern" work. If you disagree with this API\'s usage or existence then we can argue it\'s existence and maybe there\'s no point in moving forward at all. So could please tell me where you stand regarding using back-pressure for negotiating data over an async boundary using the AsyncOnSubscribe? '
p9693
aS"Backpressure amounts are established between subsequent producer and consumer pairs in the operator chain, depending on the efficiency of moving data across a potential (i.e., flatMap) or actual (i.e., observeOn) async boundary. It is not there to propagate a specific request amount from the end consumer up to the main source; that requires a different protocol (i.e., bi-di streams).\r\n\r\nBut let's assume for a second it were so. The consequence would be that unless the end-consumer's request amount is constant, operators such as observeOn and flatMap can't work with a fixed capacity queue anymore. (Even if they go unbounded, a request with `Long.MAX_VALUE` puts us back to pre-backpressure era.) With that, having a `flatMap` mapping multiple values into `AsyncOnSubscribe` sources, what request amount should they receive? The original request going to each? Uniformly distributed, even if the number of sources is unknown? One by one?\r\n\r\n> The purpose of the AsyncOnSubscribe is to provide a way that users can create observables that support back pressure over asynchronous boundaries with as little buffering as possible.\r\n\r\nIn the current setup, this only works if the source and consumer are right next to each other since they reinterpret the request amount, making it a synchronous operator.\r\n\r\n> Your code example does not monitor the request amount so the number of elements produced by service cannot be constrained to the downstream operator buffer sizes.\r\n\r\nGenerally, you should be able to tell the service how many elements you'd like to receive before getting an Observable back; it is a constant 20 in my example.\r\n\r\n> Also this example offers no capability of pre-fetching (i.e. buffers are draining and we request more data from the service eagerly)\r\n\r\nIn my example, I didn't add `observeOn` to make things simple. Since nothing depends on the backpressure-request size in the example, an `observeOn` would prefetch as usual.\r\n\r\nIn addition, the prefetch you want is contradictory to your request N from service where comes from the end consumer. If the requesting is left as is now in RxJava, you get prefetch and on-demand delivery.\r\n\r\nBottom line is that sources such as `AsyncOnSubscribe` trying to repurpose the backpressure requresting can't work with async intermediate operators that change request amounts between upstream and downstream. "
p9694
aS'> It is not there to propagate a specific request amount from the end consumer up to the main source; that requires a different protocol (i.e., bi-di streams).\r\n\r\nI don\'t think I have ever said that this is how back pressure works. Many times the request amounts are forwarded (i.e. trivial back pressure for operators like scan, etc). Your definition sounds precisely like what I am trying to say. However if your consumer chain has a buffer in place (i.e. a take, observeOn, flatMap, etc) then the consuming operator will now have a constraint on it\'s request amount. So in general the consumer observable chain will have some finite but dynamic request amount. \r\n\r\n> But let\'s assume for a second it were so. The consequence would be that unless the end-consumer\'s request amount is constant, operators such as observeOn and flatMap can\'t work with a fixed capacity queue anymore. (Even if they go unbounded, a request with Long.MAX_VALUE puts us back to pre-backpressure era.) \r\n\r\nI am not sure what any of this has to do with our discussion since I am not talking about constant request amounts. \r\n\r\n> what request amount should they receive?\r\n\r\nThe `AsyncOnSubscribe` should fulfill data from their producer in exactly the amount requested. This should be however much is requested by the downstream consumer. \r\n\r\n> observeOn would prefetch as usual\r\n\r\nIn your example there was no ordering of multiple concurrent fulfilling requests. For example, the consuming subscriber requests a batch of 5000 (which has a buffer size of 5000). While the provider is busy producing the 5000 the buffer in the consumer drains 2000 entries and can then request 2000 more (total 7000). However the original 5000 have not finished draining from the producer. Concurrent batches and order preserving. There is nothing in your example that can handle this. \r\n\r\n> In the current setup, this only works if the source and consumer are right next to each other since they reinterpret the request amount, making it a synchronous operator.\r\n\r\nWhat do you mean by a synchronous operator and why is this significant? Operators are synchronous in that there cannot be interleaving onNexts so I am not sure if you understand what the goal is. \r\n\r\nThe goal of AsyncOnSubscribe is for a consumer to request arbitrary amounts of data and for the producer to provide exactly that amount. It does not matter how big or small these amounts are nor should it matter when those requests are made. This is useful when integrating a system that cannot provide an Rx Observable interface. For instance, a message passing system like activeMQ or SQS which receives data and must buffer or risk violating back pressure rules. In a naive implementation one might wrap the message stream via a listener and observe the datasource directly. This will clearly not satisfy back pressure when there is a slow consumer. The next iteration one could use `Observable.create(...)` and try your best at implementing an OnSubscribe that provides a `Publisher` and reads from the data source while respecting back pressure. In this implementation you have to worry about interleaving requests. \r\n\r\nThe purpose of this is to integrate producers which have no concept of back pressure (i.e. sampling from mouse events or paginating over data services) and request ONLY the requisite amount at a time. This seems like exactly the purpose behind back pressure. \r\n\r\n> Bottom line is that sources such as AsyncOnSubscribe trying to repurpose the backpressure requresting can\'t work with async intermediate operators that change request amounts between upstream and downstream.\r\n\r\nCan you tell me how the AsyncOnSubscribe changes the request amounts? They should be exactly the amounts requested from the consumer. Also this is not a "repurposing" of back pressure. The purpose of back pressure was to minimize the unbounded buffers between a producer and consumer. The AsyncOnSubscribe does exactly this while preserving ordering of data. '
p9695
aS'I simply can\'t understand what you were trying to accomplish. All I see is mixed concepts and interpretations of request, backpressure, RPC-like behavior, bi-directional value passing. If you want to Rx-ify a pull-like data source, `SyncOnSubscribe` does the job. If you want to Rx-ify a source that just pushes out values, you have buffer/drop/sample/block to make it stop. If you can tell a source outside RxJava to produce N items, make it like this:\r\n\r\n```java\r\nObservable<GroupedObservable<Request, T>> service(Observable<Request> parameters);\r\n```\r\n\r\nwhere `Request` can hold the number of items you want a once from the paired `GroupedObservable`. Then you can concat/merge/concatEager the outer Observable to get a single stream of Ts. If the parameters is a `PublishSubject` or `UnicastSubject`, your consuming end `Subscriber` only has to call `onNext` on it (instead of its request(n)) method whenever it needs the next "batch".'
p9696
aS'I have no other way to try to tell you that we need a way to convert `request(n)` to a streaming batch of potentially concurrent `Observable<T>`. \r\n\r\n@benjchristensen this functionality was your vision. Perhaps you can communicate it best. '
p9697
aS"@akarnokd I was just talking with @kurzweil about this and it got me thinking about you're last comment. Could we invert the `service` method you mentioned to something like\r\n\r\n`public static <T> Observable<T> create(final Transformer<Long, T> requestsToValues)`\r\n\r\nIt would be a lot like `retryWhen` where the author of the transformer would have to compose together operators like `scan` to maintain a state across requests and `merge`, `concat` or `concatEager` to combine the values from multiple requests back into one stream of values."
p9698
aS"If you mean `rx.Observable.Transformer`? That requires a source `Observable` which is available in `Observable.compose` as `this`.\r\n\r\nI can't think of a version based on the retryWhen/repeatWhen signature. It seems you want the end-subscriber to be in charge of the amount to be generated in one batch, thus it has to know about the front to signal the generator.\r\n\r\nThere is an alternative signature to my method:\r\n\r\n```java\r\nSubject<Long, T> service(Func1<Long, Observable<T>> generator, JoinMode mode);\r\n```\r\n\r\nBut this may also require a special boundary indicator T for the Subscriber to know when to call onNext on the subject."
p9699
aS"> If you mean rx.Observable.Transformer? That requires a source Observable which is available in Observable.compose as this.\r\n\r\nEclipse doesn't seem to mind that I don't have an instance of Observable. Maybe because it is an inner interface?\r\n\r\n> I can't think of a version based on the retryWhen/repeatWhen signature.\r\n\r\nNot literally. The retryWhen operator takes a `Func1<Observable<Throwable>, Observable<?>>` which could be rewritten to `Transformer<Throwable, ?>`.\r\n\r\n> It seems you want the end-subscriber to be in charge of the amount to be generated in one batch, thus it has to know about the front to signal the generator.\r\n\r\nNot really no. The values emitted to the `Observable<Long>` onNext would correspond 1:1 to the with `request(n)` to the producer.\r\n\r\n> There is an alternative signature to my method:\r\n> `Subject<Long, T> service(Func1<Long, Observable<T>> generator, JoinMode mode);`\r\n\r\nI guess but it seem strange to have a new type to describe something that can be done by applying an existing operator. It also limits the user to only things that we've thought of. Like in a bazar world where someone wants to use `switchMap` to cancel the previous batch and start a new one on each request.\r\n\r\nThe place where my idea gets awkward is how does the returned observable terminate.  The requests `Observable<Long>` isn't going to terminate so the transform author is going to have to find some way to have an inner observable complete the outer observable.\r\n\r\n```java\r\n    public static <T> Observable<T> create(final Transformer<Long, T> requestsToValues) {\r\n        return create((subscriber) -> {\r\n                PublishSubject<Long> requestsSubject = PublishSubject.create();\r\n                t.setProducer(requestsSubject::onNext);\r\n                requestsToValues.call(requestsSubject).subscribe(subscriber);\r\n            }\r\n        });\r\n    }\r\n```\r\n\r\nHere is a proof of concept of what it may look like to use it.\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Observable.createAsync(requests ->\r\n            getCount().flatMap(max ->\r\n                requests\r\n                    .scan(State::new, State::next)\r\n                    .takeWhile(state -> state.start < max)\r\n                    .concatMap(Main::getPage)));\r\n    }\r\n\r\n    private static class State {\r\n        long start;\r\n        long amount;\r\n\r\n        public State next(long n) {\r\n            State next = new State();\r\n            next.start = this.start + amount;\r\n            next.amount = n;\r\n            return next;\r\n        }\r\n    }\r\n\r\n    private static Observable<? extends Long> getCount() {\r\n        return null;\r\n    }\r\n\r\n    private static Observable<? extends String> getPage(State request) {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nanyway if you think this API has any merit we should probably move this off to another issue or PR."
p9700
aS'@benjchristensen Can you comment?'
p9701
aS'I find this API valuable, and it allows batch size and request(n) size to differ, which is exactly what is needed and wanted. Here is example code showing this behavior:\r\n\r\n```java\r\npackage scratch;\r\n\r\nimport rx.Observable;\r\nimport rx.Observer;\r\nimport rx.observables.AsyncOnSubscribe;\r\nimport rx.schedulers.Schedulers;\r\n\r\npublic class TestAsyncOnSubscribe {\r\n\r\n  public static void main(String[] args) {\r\n\r\n    Observable<String> obs = Observable.create(new AsyncOnSubscribe<Integer, String>() {\r\n\r\n      final int batchSize = 50;\r\n\r\n      @Override\r\n      protected Integer generateState() {\r\n        return 1;\r\n      }\r\n\r\n      @Override\r\n      protected Integer\r\n          next(Integer state, long requested, Observer<Observable<? extends String>> observer) {\r\n        System.out.println("new async batch starting at: " + state + " requested: " + requested);\r\n        observer.onNext(Observable\r\n            .range(state, batchSize)\r\n            .doOnSubscribe(() -> System.out.println("Subscribing to batch starting at: " + state))\r\n            .map(i -> "value_" + i)\r\n            .subscribeOn(Schedulers.computation()));\r\n        return state + batchSize;\r\n      }\r\n\r\n    });\r\n\r\n    //obs.take(15).toBlocking().forEach(v -> System.out.println(v));\r\n\r\n    obs.observeOn(Schedulers.computation()).take(250).toBlocking().forEach(\r\n        v -> System.out.println(v));\r\n\r\n  }\r\n}\r\n```\r\n\r\nHere is the output:\r\n\r\n```\r\nnew async batch starting at: 1 requested: 128\r\nSubscribing to batch starting at: 1\r\nvalue_1\r\nvalue_2\r\nvalue_3\r\nvalue_4\r\nvalue_5\r\nvalue_6\r\nvalue_7\r\nvalue_8\r\nvalue_9\r\nvalue_10\r\nvalue_11\r\nvalue_12\r\nvalue_13\r\nvalue_14\r\nvalue_15\r\nvalue_16\r\nvalue_17\r\nvalue_18\r\nvalue_19\r\nvalue_20\r\nvalue_21\r\nvalue_22\r\nvalue_23\r\nvalue_24\r\nvalue_25\r\nvalue_26\r\nvalue_27\r\nnew async batch starting at: 51 requested: 78\r\nvalue_28\r\nvalue_29\r\nvalue_30\r\nvalue_31\r\nvalue_32\r\nvalue_33\r\nvalue_34\r\nvalue_35\r\nvalue_36\r\nvalue_37\r\nvalue_38\r\nvalue_39\r\nvalue_40\r\nvalue_41\r\nvalue_42\r\nvalue_43\r\nvalue_44\r\nvalue_45\r\nvalue_46\r\nvalue_47\r\nvalue_48\r\nvalue_49\r\nvalue_50\r\nSubscribing to batch starting at: 51\r\nvalue_51\r\nvalue_52\r\nvalue_53\r\nvalue_54\r\nvalue_55\r\nvalue_56\r\nvalue_57\r\nvalue_58\r\nvalue_59\r\nvalue_60\r\nvalue_61\r\nvalue_62\r\nvalue_63\r\nvalue_64\r\nvalue_65\r\nvalue_66\r\nvalue_67\r\nnew async batch starting at: 101 requested: 28\r\nvalue_68\r\nvalue_69\r\nvalue_70\r\nvalue_71\r\nvalue_72\r\nvalue_73\r\nvalue_74\r\nvalue_75\r\nvalue_76\r\nvalue_77\r\nvalue_78\r\nvalue_79\r\nvalue_80\r\nvalue_81\r\nvalue_82\r\nvalue_83\r\nSubscribing to batch starting at: 101\r\nvalue_84\r\nvalue_85\r\nvalue_86\r\nvalue_87\r\nvalue_88\r\nvalue_89\r\nvalue_90\r\nvalue_91\r\nvalue_92\r\nvalue_93\r\nvalue_94\r\nvalue_95\r\nvalue_96\r\nnew async batch starting at: 151 requested: 96\r\nvalue_97\r\nvalue_98\r\nvalue_99\r\nvalue_100\r\nvalue_101\r\nvalue_102\r\nvalue_103\r\nvalue_104\r\nvalue_105\r\nvalue_106\r\nvalue_107\r\nvalue_108\r\nvalue_109\r\nvalue_110\r\nvalue_111\r\nvalue_112\r\nvalue_113\r\nvalue_114\r\nvalue_115\r\nvalue_116\r\nvalue_117\r\nvalue_118\r\nvalue_119\r\nvalue_120\r\nvalue_121\r\nvalue_122\r\nvalue_123\r\nvalue_124\r\nvalue_125\r\nvalue_126\r\nvalue_127\r\nvalue_128\r\nvalue_129\r\nvalue_130\r\nvalue_131\r\nvalue_132\r\nvalue_133\r\nvalue_134\r\nvalue_135\r\nvalue_136\r\nvalue_137\r\nvalue_138\r\nvalue_139\r\nvalue_140\r\nvalue_141\r\nvalue_142\r\nvalue_143\r\nvalue_144\r\nvalue_145\r\nvalue_146\r\nvalue_147\r\nvalue_148\r\nvalue_149\r\nvalue_150\r\nSubscribing to batch starting at: 151\r\nnew async batch starting at: 201 requested: 46\r\nvalue_151\r\nvalue_152\r\nvalue_153\r\nvalue_154\r\nvalue_155\r\nvalue_156\r\nvalue_157\r\nvalue_158\r\nvalue_159\r\nvalue_160\r\nvalue_161\r\nvalue_162\r\nvalue_163\r\nvalue_164\r\nvalue_165\r\nvalue_166\r\nvalue_167\r\nvalue_168\r\nvalue_169\r\nvalue_170\r\nvalue_171\r\nvalue_172\r\nvalue_173\r\nvalue_174\r\nvalue_175\r\nvalue_176\r\nvalue_177\r\nvalue_178\r\nvalue_179\r\nvalue_180\r\nvalue_181\r\nvalue_182\r\nvalue_183\r\nvalue_184\r\nvalue_185\r\nvalue_186\r\nvalue_187\r\nvalue_188\r\nvalue_189\r\nvalue_190\r\nvalue_191\r\nvalue_192\r\nnew async batch starting at: 251 requested: 96\r\nvalue_193\r\nvalue_194\r\nvalue_195\r\nvalue_196\r\nvalue_197\r\nvalue_198\r\nvalue_199\r\nvalue_200\r\nSubscribing to batch starting at: 201\r\nSubscribing to batch starting at: 251\r\nnew async batch starting at: 301 requested: 46\r\nvalue_201\r\nvalue_202\r\nvalue_203\r\nvalue_204\r\nvalue_205\r\nvalue_206\r\nvalue_207\r\nvalue_208\r\nvalue_209\r\nvalue_210\r\nvalue_211\r\nvalue_212\r\nvalue_213\r\nvalue_214\r\nvalue_215\r\nvalue_216\r\nvalue_217\r\nvalue_218\r\nvalue_219\r\nvalue_220\r\nvalue_221\r\nvalue_222\r\nvalue_223\r\nvalue_224\r\nvalue_225\r\nvalue_226\r\nvalue_227\r\nSubscribing to batch starting at: 301\r\nvalue_228\r\nvalue_229\r\nvalue_230\r\nvalue_231\r\nvalue_232\r\nvalue_233\r\nvalue_234\r\nvalue_235\r\nvalue_236\r\nvalue_237\r\nvalue_238\r\nvalue_239\r\nvalue_240\r\nvalue_241\r\nvalue_242\r\nvalue_243\r\nvalue_244\r\nvalue_245\r\nvalue_246\r\nvalue_247\r\nvalue_248\r\nvalue_249\r\nvalue_250\r\n```\r\n\r\n\r\nI\'m using 250 even though it makes the output longer so that it is beyond the 128 that `observeOn` defaults to. \r\n\r\nNote how this correctly does the following:\r\n\r\n- batch size is at 50 so each async call is a fixed size as per the developer requirements\r\n- request(n) size is independent of batch size (128, and different over time as observeOn invokes it)\r\n- it correctly shows when `next` is invoked to create a new batch, but it doesn\'t actually subscribe to it until the correct time when the previous batch is completed, thereby decoupling the request(n) and batch production\r\n- it guarantees ordering across async batches\r\n\r\nOne possible change would be to not invoke `next` eagerly whenever `request(n)` occurs, though in some use cases that may be wanted. I can argue it both ways. \r\n\r\nAnd if LONG.MAX_VALUE is requested? It correctly behaves by executing batches of 50 repeatedly after each other:\r\n\r\n```\r\nnew async batch starting at: 60051 requested: 9223372036854715757\r\nSubscribing to batch starting at: 60051\r\n```\r\n\r\nThis API is useful and very powerful when composing `request(n)` against a batched data source, and I support promoting it to `@Beta`.'
p9702
aS"What if page responded has different size than requested? Like request(50) is called, and you decided to load data in a chunks of 20 items, but your RPC call responds with 10.\r\nReal life use case is that you're reading a dataset with offset/limit set on the internal SQL query, while grouping it outside. It means that every page has <=N values, and you can define the dataset is over only when page is zero.\r\n\r\nThis is one of the reasons I created https://github.com/Rabajaba/rx-utils PortionObservable. (may be it will be helpful here)"
p9703
aS"Why does it return 10 when 20 is requested? If it's because it's the end, that's fine, as it should then cause termination. If the server can't actually respond deterministically, then it seems that using offset/limit is the wrong approach. \r\n\r\nYour PortionObservable solution looks interesting. I browsed the code briefly, but not enough to grok the tradeoffs. Would be interesting for you and @stealthcode to compare solutions and see if AsyncOnSubscribe should change in any way before promoting it. "
p9704
aS'@benjchristensen Thanks for the feedback. \r\nIt return 10 and not 20 with a real life use case. Imagine a large RDMS table, where you should read data grouped on some field. If you do select... `group by <some set of colums> limit 100 offset 100` you may not hit indexes, because "group by" clause may be complex (like having several fields from different tables). That\'s why it\'s much more faster to do limit/offset initial datable, and do grouping after - causing lesser amounts of data to be responded.\r\nThis use case is pretty rare, but it took me few months, to properly code it in PortionObservable, that\'s why I\'m asking whether this use case will be fulfilled anyhow.\r\n\r\n@stealthcode One feature I didn\'t yet implemented: parallel load of pages, while results would be still emitted in a correct order. Use case: you have external slow API, which responds data not faster than 10 seconds, no matter to your request parameters. Doing parallel pages loading will significantly improve performance.\r\n\r\nLet me create another implementation of PortionObservable using AsyncOnSubscribe and see whether my unit tests would still complete.'
p9705
aS"Ben's use case, which disregards the request amount in the generator callback, can be written with `SyncOnSubscribe` and `flatMap` limited to `maxConcurrency == 1`:\r\n\r\n```java\r\nObservable.create(\r\n    SyncOnSubscribe.<...>createSingleState(\r\n        () -> 1, \r\n        (s, o) -> o.onNext(Observable.range(1, 50))\r\n    )\r\n)\r\n.flatMap(o -> o, 1)\r\n.subscribe(...)\r\n```\r\n\r\nFlatmap will request 1 and request another only after the previously generated inner Observable completes.\r\n\r\nIf you want to pre-generate these sources, use `concatMap`. If you want to prefetch the inner sources as well but keep their total order, use `concatMapEager`. Also apply `observeOn`, `doOnNext`, etc. as you see fit."
p9706
aS"If I remember correctly, API promotion happened after voting before the minor version has changed (0.x -> 1.0, 1.0 -> 1.1). \r\n\r\nIf you wish, we can vote now @ReactiveX/rxjava-committers or just before 1.2. If voted for now, after a rebase, this can be merged and won't cause you problems with the ongoing cleanup work. If this can wait till 1.2, you can close the PR."
p9707
aS"Closing as not mergeable. If you have further input on the issue, don't hesitate to reopen this issue or post a new one."
p9708
asg14
S'stealthcode:upgrade-asynconsubscribe'
p9709
sbsI3818
(iPull
Pull
p9710
(dp9711
g3
S'Part of #3816'
p9712
sg5
S'1.x fromCallable() @Experimental -> @Beta'
p9713
sg7
(lp9714
S'API promotion'
p9715
asg10
I3818
sg11
(lp9716
S'`testQueueFullEmitsErrorWithVaryingBufferSize` is an unreliable test I already fixed in #3795\r\n\r\n:+1:'
p9717
aS':+1: '
p9718
asg14
S'artem-zinnatullin:fromCallable-no-more-experimental'
p9719
sbsI3820
(iPull
Pull
p9720
(dp9721
g3
S'Discussions found here: https://github.com/ReactiveX/RxJava/issues/2297'
p9722
sg5
S'Making RxPlugins reset() public'
p9723
sg7
(lp9724
S'Enhancement'
p9725
asg10
I3820
sg11
(lp9726
S':+1:'
p9727
aS'Yeah, same concern about dangerous that this method may add. \r\n\r\nIt looks like an easy way to do testing but in multithreaded environment (integrational or functional tests for example) it may break a lot of things in "random" manner.\r\n\r\n@stevegury @akarnokd let\'s also mark it as `@Experimental` so we\'ll be able to remove it if community will have more issues than benefits?'
p9728
aS'Yeah, good idea for the `@Experimental` flag'
p9729
aS'Thanks for the feedback @stevegury , @artem-zinnatullin. Just added the `@experimental` tag. Comments in the PR + commit message. '
p9730
aS"Please add a javadoc block, and explicitly mention that resetting the plugins is dangerous/unsafe during application runtime (I suspect most people won't check the link), keep the link at the end."
p9731
aS'@shivangshah Friendly ping. Please update with Javadoc.'
p9732
aS'@JakeWharton yes .. thanks for the reminder this totally slipped my mind .. Let me do it now .. '
p9733
aS'@JakeWharton : Done ! Let me know if we need to add anything else as a part of the documentation. '
p9734
aS':+1:'
p9735
asg14
S'shivangshah:rxplugins-reset-public'
p9736
sbsI3821
(iPull
Pull
p9737
(dp9738
g3
S'`assertUnsubscribed()` exists, `assertSubscribed()` was missing'
p9739
sg5
S'1.x: Add assertSubscribed() to TestSubscriber analog to assertUnsubscribed()'
p9740
sg7
(lp9741
S'Enhancement'
p9742
asg10
I3821
sg11
(lp9743
S'The name is confusing (a freshly created `TestSubscriber` will return false for `isUnsubscribed()` even if it never was used with `Observable.subscribe()`) and not sure we need a `!isUnsubscribed()` assertion.'
p9744
aS'I had the feeling it is missing when I wrote this test:\r\n\r\n```java\r\n        final RxProperty<String> prop = new RxProperty<>("myValue");\r\n        final Observable<String> observable = prop.asObservable();\r\n\r\n        final TestSubscriber<String> testSubscriber1 = new TestSubscriber<>();\r\n        final Subscription subscription1 = observable.subscribe(testSubscriber1);\r\n\r\n        final TestSubscriber<String> testSubscriber2 = new TestSubscriber<>();\r\n        observable.subscribe(testSubscriber2);\r\n\r\n        subscription1.unsubscribe();\r\n        prop.set("otherValue");\r\n\r\n        testSubscriber1.assertValue("myValue");\r\n        testSubscriber1.assertUnsubscribed();\r\n\r\n        testSubscriber2.assertValues("myValue", "otherValue");\r\n        assertThat(testSubscriber2.isUnsubscribed()).isFalse(); // looks bad\r\n        testSubscriber2.assertSubscribed(); // what I really want\r\n```'
p9745
aS'I also feel `assertSubscribed` is confusing. It sounds like verifying if `Observable.subscribe is called`. But the meaning in your PR is `Observable.subscribe is called but unsubscribe is not yet called`.'
p9746
aS'I would be ok with it if naming could be agreed upon. Maybe something more to the effect of `assertIsSubscribed()` and `assertIsUnsubscribed()` for clarity? Agreed with @zsxwing that the naming sounds ambiguous in the original suggestion.'
p9747
aS"> `assertThat(testSubscriber2.isUnsubscribed()).isFalse(); // looks bad`\r\n\r\nI think `assertNoTerminalEvent()` is for this use case. I'm leaning towards closing this PR."
p9748
aS"Thanks for the contribution. I'm closing this due to inactivity, plus I think this change would cause confusion. If you have a different suggestion, please don't hesitate to post another PR."
p9749
aS'agree'
p9750
asg14
S'passsy:add_assert_subscribed'
p9751
sbsI3822
(iPull
Pull
p9752
(dp9753
g3
S'Possible solution to #3749.'
p9754
sg5
S'1.x: make defensive copy of the properties in RxJavaPlugins'
p9755
sg7
(lp9756
S'Bug'
p9757
asg10
I3822
sg11
(lp9758
S':+1: '
p9759
asg14
S'akarnokd:PluginCopyProperties'
p9760
sbsI3823
(iPull
Pull
p9761
(dp9762
g3
S'Fixes the bug reported in #3435.'
p9763
sg5
S'1.x: DoAfterTerminate handle if action throws'
p9764
sg7
(lp9765
S'Bug'
p9766
asg10
I3823
sg11
(lp9767
S':+1:'
p9768
aS':+1: '
p9769
asg14
S'akarnokd:DoAfterTerminateFix'
p9770
sbsI3824
(iPull
Pull
p9771
(dp9772
g3
S'The type inference of javac in JDK 9 has been changed in an incompatible way, marking many generics-related code invalid.\r\n\r\nThe most common problems:\r\n\r\n  - The inference calculates `Observable<? extends T>` but from its perspective, a call to `subscribe()` with a `Subscriber<T>` is ambiguous as it matches `subscribe(Observer<? super T>)` and `subscribe(Subscriber<? super T>)`. Somehow, the more specific class is not considered as a valid choice. Downcasting to `Observable<T>` fixes the error.\r\n  - `A<?>[]` no longer accepts `A<Ti>` elements, requires the use of raw types to get around\r\n\r\nThe tests appear to compile fine.\r\n\r\nNote that I couldn\'t find a working IDE for JDK 9 and had to revert to command line trickery:\r\n\r\n```\r\n@echo off\r\n\r\ndir /s /B src\\main\\java\\rx\\*.java > sources.txt\r\ndir /s /B src\\test\\java\\rx\\*.java >> sources.txt\r\n\r\n"c:\\program files\\java\\jdk-9\\bin\\javac.exe" -cp C:/temp/rx/junit.jar;C:/temp/rx/mockito.jar @sources.txt \r\n\r\ndel sources.txt\r\n```'
p9773
sg5
S'1.x: javac 9 compatibility fixes'
p9774
sg7
(lp9775
S'Build'
p9776
asg10
I3824
sg11
(lp9777
S':+1: \r\n\r\n// @akarnokd maybe report "incorrect" behavior of JDK9 compiler to OpenJDK issue tracker?'
p9778
aS'There were reports such as [this](https://bugs.openjdk.java.net/browse/JDK-8075793?focusedCommentId=13865850) before. Bottom line is that they are fine with their breaking change.'
p9779
aS':+1: '
p9780
asg14
S'akarnokd:JDK9Fixes'
p9781
sbsI3825
(iPull
Pull
p9782
(dp9783
g3
S'The test had some non-deterministic machinery to trigger the failure.'
p9784
sg5
S'1.x: Fix ObserveOnTest. testQueueFullEmitsErrorWithVaryingBufferSize'
p9785
sg7
(lp9786
S'Test-Failures'
p9787
asg10
I3825
sg11
(lp9788
sg14
S'akarnokd:ObserveOnTestFix'
p9789
sbsI3826
(iPull
Pull
p9790
(dp9791
g3
S'the docs of TestSubscriber.create(Subscriber) and TestSubscriber.create(Observer) got mixed up.\r\nI just swapped them.'
p9792
sg5
S'1.x: Fix TestSubscriber.create doc'
p9793
sg7
(lp9794
S'Cleanup'
p9795
asg10
I3826
sg11
(lp9796
S':+1: '
p9797
aS':+1:'
p9798
aS':+1: '
p9799
asg14
S'prt2121:pt/testSubscriber-doc'
p9800
sbsI3827
(iPull
Pull
p9801
(dp9802
g3
S"This is a minor simplification in `OperatorObserveOn` where a temporary variable was created to avoid unnecessary additional reads of what used to be the volatile field `error`.  The field was changed to be non-volatile a while back so the temporary variable is no longer required. \r\n\r\nI assume it would have very minor perf impact (I haven't run them).  "
p9803
sg5
S'simplify OperatorObserveOn now that error is a non-volatile field'
p9804
sg7
(lp9805
sg10
I3827
sg11
(lp9806
S'Why do you want to read fields multiple times? '
p9807
aS"It's not about performance, but code habits. By reading things into local variables, you establish a pattern that won't bite you with volatile variables later on."
p9808
aS'Plus, if the decision is made to clear the `error` field to avoid retention of the exception for too long, this would have to be reverted.'
p9809
aS"Fair enough, I'll close."
p9810
asg14
S'davidmoten:simplify-observe-on'
p9811
sbsI3828
(iPull
Pull
p9812
(dp9813
g3
S'`AsyncSubject` can trivially support backpressure when it emits a single item by setting the `SingleProducer` on the child `Subscriber` instead of calling `onNext` immediately.'
p9814
sg5
S'1.x: AsyncSubject now supports backpressure'
p9815
sg7
(lp9816
S'Enhancement'
p9817
asg10
I3828
sg11
(lp9818
S':+1:'
p9819
asg14
S'akarnokd:AsyncSubjectBackpressure'
p9820
sbsI3829
(iPull
Pull
p9821
(dp9822
g3
S'Part of #3459, related to #3815.'
p9823
sg5
S'1.x: Add system property for disabling usage of Unsafe API'
p9824
sg7
(lp9825
S'Enhancement'
p9826
asg10
I3829
sg11
(lp9827
S':+1:'
p9828
aS':+1:'
p9829
aS':+1: '
p9830
asg14
S'artem-zinnatullin:unsafe-enable-disable-system-property'
p9831
sbsI3832
(iPull
Pull
p9832
(dp9833
g3
g53
sg5
S'TestScheduler: Fix race condition in queue'
p9834
sg7
(lp9835
sg10
I3832
sg11
(lp9836
S'TestScheduler is a synchronous Scheduler that has to run on a single thread and its main purpose is to force async operators to execute synchronously as well.\r\n\r\nIs there a reason you wanted this change?'
p9837
aS"Humm. This is the crash I was trying to fix, looked like a race but perhaps I'm using the testscheduler incorrectly somehow.\r\n\r\njava.lang.NullPointerException\r\n\tat rx.schedulers.TestScheduler$TimedAction.access$200(TestScheduler.java:37)\r\n\tat rx.schedulers.TestScheduler.triggerActions(TestScheduler.java:111)\r\n\tat rx.schedulers.TestScheduler.advanceTimeTo(TestScheduler.java:97)\r\n\tat rx.schedulers.TestScheduler.advanceTimeBy(TestScheduler.java:84)"
p9838
aS"My class under test is subscribing to the scheduler asynchronously, I guess you're saying TestScheduler wasn't designed to operate list this?\r\n\r\n  Observable.interval(mPollTimeMinutes, TimeUnit.MINUTES, mScheduler)\r\n                             .subscribeOn(Schedulers.newThread()).subscribe(v -> {\r\n                    getMyUpgrade();\r\n                }, v -> {\r\n                });"
p9839
aS"It won't work with regular schedulers, for example:\r\n\r\n```java\r\nObservable.interval(1, TimeUnit.MILLISECONDS) // <-- note: it uses the default computation() scheduler\r\n.observeOn(testScheduler)\r\n.subscribe();\r\n```\r\n\r\nis prone to concurrency issues.\r\n\r\nIf you use `TestScheduler`, it has to be applied everywhere."
p9840
aS"Thanks for helping - is this how it's intended to be used?\r\n\r\nObservable.interval(1, TimeUnit.MILLISECONDS, test ? testScheduler : Schedulers.computation())\r\n.observeOn(test ? testScheduler : Schedulers.newThread())\r\n.subscribe();"
p9841
aS'Yes.'
p9842
aS'Awesome, thanks.'
p9843
asg14
S'nerd2:1.x'
p9844
sbsI3834
(iPull
Pull
p9845
(dp9846
g3
S'https://github.com/ReactiveX/RxJava/issues/3785'
p9847
sg5
S'1.x: Add TestSingleSubscriber'
p9848
sg7
(lp9849
S'Enhancement'
p9850
asg10
I3834
sg11
(lp9851
sg14
S'prt2121:pt/testSingleSubscriber'
p9852
sbsI3836
(iPull
Pull
p9853
(dp9854
g3
S"This PR fixes the producer retention problem and backpressure problem in `switchMap`/`switchOnNext`.\r\n\r\nIn the original, when an inner source completed, its producer was still referenced after it. If there was no new inner source or the next inner source didn't set a new producer, the operator leaked the previous inner source's internals. The fix involves nulling out the producer field when the inner source completes (and is still the current one).\r\n\r\nThe original had an additional bug due to a race condition between the request arbitration and switching inner sources. In some cases, the switch didn't properly forward the remaining request amount to the new inner source, causing hangs. In some other cases, both the old and new inner sources were able to emit, causing overflow. The fix involves a new queue-drain loop with some emitter-loop help to work out the state transitions."
p9855
sg5
S'1.x: fix switchMap/switchOnNext producer retention and backpressure'
p9856
sg7
(lp9857
S'Bug'
p9858
asg10
I3836
sg11
(lp9859
sg14
S'akarnokd:SwitchMapRewrite1x'
p9860
sbsI3839
(iPull
Pull
p9861
(dp9862
g3
S"The counted and timed versions of `takeLast` had a concurrency bug which allowed concurrent emission from the underlying queue that holds onto the values till the upstream completes. When timed correctly, both an `onCompleted()` and a `request()` that went from 0 to n could enter the emit() method and break the internal state of the non-concurrent queue. Note that this queue doesn't have to be concurrent by nature because the operator can emit only *after* the upstream completes (`offer()` never runs concurrently with `poll()` unlike in `observeOn`).\r\n\r\nIn addition, the emission didn't immediately complete if the queue was emptied and requested == 0. In this operator, the fact that the queue became empty is the indicator of completion.\r\n\r\nBoth issues can be fixed with the `postCompleteXXX` mechanics in `BackpressureUtils`.\r\n\r\nSince the operator has to store `null` values, the `postCompleteXXX` had to be extended with an exit transform overload to allow converting the `NotificationLite` values back to regular `T`/`null`."
p9863
sg5
S'1.x: fix takeLast() backpressure'
p9864
sg7
(lp9865
S'Bug'
p9866
asg10
I3839
sg11
(lp9867
sg14
S'akarnokd:TakeLastBackpressurFix'
p9868
sbsI3840
(iPull
Pull
p9869
(dp9870
g3
S"There were two tiny problems with the rewritten `concatMap` operator, mainly due to copy-paste error:\r\n\r\n   - When a scalar was concatenated, the `active` field was not set and thus the next prefetched source overwrote it.\r\n   - When the scalar was set on the arbiter, its custom producer didn't check for n > 0 zero causing instant emission always. Generally Producer.request(0) is allowed and should be no-op (unlike RS).\r\n   - When an empty() was encountered as a last source, the it didn't trigger the check for completion afterwards."
p9871
sg5
S'1.x: fix concatMap scalar/empty source behavior'
p9872
sg7
(lp9873
S'Bug'
p9874
asg10
I3840
sg11
(lp9875
S':+1: '
p9876
asg14
S'akarnokd:ConcatMapFix'
p9877
sbsI3841
(iPull
Pull
p9878
(dp9879
g3
g53
sg5
S'2.x'
p9880
sg7
(lp9881
sg10
I3841
sg11
(lp9882
S'Whoa, this PR is wrongly configured. What was the intent?'
p9883
aS"I'm closing this as being unintelligible."
p9884
asg14
S'ReactiveX:2.x'
p9885
sbsI3842
(iPull
Pull
p9886
(dp9887
g3
S"I noticed that when a worker built from `Schedulers.from(Executors.newFixedThread(1))` is unsubscribed the use of a `CompositeSubscription` to track task subscriptions means that the tasks may be unsubscribed in any old order (`CompositeSubscription` holds its subscriptions in a `HashSet`).  This means that if the worker is given task A and task B then the race can prevent A from running but allow B to run! I've included a unit test in this PR that demos it. Fails every time on my machine on the first loop.\r\n\r\nThis  PR is really for discussion about the problem and possible fixes.\r\n\r\nI have included a possible fix which is to track overall subscription using a volatile boolean and check that boolean before running any task. If this was considered the way to go some further simplification would take place in the operator (might not need to check individual task subscriptions).\r\n\r\nI haven't checked other schedulers for this sort of problem yet.\r\n\r\n\r\n"
p9888
sg5
S'1.x: improve ExecutorScheduler worker unsubscription'
p9889
sg7
(lp9890
S'Cleanup'
p9891
aS'Enhancement'
p9892
asg10
I3842
sg11
(lp9893
S'Do you have a real case that the order does matter? I think this affects all CompositeSubscription usages.\r\n'
p9894
aS'I see this as an eager cancellation matter than a race. There is no need for the flag but just check tasks.isUnsubscribed() before and run some cleanup:\r\n\r\n```java\r\ndo {\r\n    if (tasks.isUnsubscribed()) {\r\n        queue.clear();\r\n        return;\r\n    }\r\n\r\n    ScheduledAction sa = queue.poll();\r\n\r\n    if (tasks.isUnsubscribed()) {\r\n        queue.clear();\r\n        return;\r\n    }\r\n    if (!sa.isUnsubscribed()) {\r\n        sa.run();\r\n    }\r\n} while (wip.decrementAndGet() != 0);\r\n    '
p9895
aS"@zsxwing I'm confusing the issue talking about `CompositeSubscription`, it's really about subscription management in `ExecutorScheduler`. I don't have a problem with `CompositeSubscription` in general.\r\n\r\n@akarnokd thanks, that looks good, I'll amend the PR.  It's interesting you don't classify it as a bug but I guess we haven't documented our expectations of `Scheduler`s in this area. Do you think `Scheduler.unsubscribe()` should offer stronger guarantees, similar to the guarantee offered by `ExecutorService.shutdownNow()`?\r\n\r\n>Attempts to stop all actively executing tasks, halts the\r\nprocessing of waiting tasks, and returns a list of the tasks\r\nthat were awaiting execution.\r\n\r\nThe relevant bit I suppose is *halts the processing of waiting tasks*.\r\n"
p9896
aS'@davidmoten  Gotcha. `EventLoopWorker` has the same issue. You can try `Schedulers.computation()` or `Schedulers.io()` to reproduce it in your test.'
p9897
aS'@zsxwing `computation()` and `io()` both fail too, thanks. '
p9898
aS"@akarnokd Don't you think that second check of `tasks.isUnsubscribed()` in your snippet is overkill? Can I remove?\r\n\r\nI'm also wondering if `unsubscribe()` can look like this:\r\n\r\n```java\r\n    @Override\r\n    public void unsubscribe() {\r\n        queue.clear();\r\n        tasks.unsubscribe();\r\n    }\r\n```\r\n\r\n and then `run()` would be: \r\n```java\r\n        @Override\r\n        public void run() {\r\n            do {\r\n                if (tasks.isUnsubscribed()) {\r\n                    return;\r\n                }\r\n\r\n                ScheduledAction sa = queue.poll();\r\n                if (sa == null) {\r\n                    return;\r\n                }\r\n                if (!sa.isUnsubscribed()) {\r\n                    sa.run();\r\n                }\r\n            } while (wip.decrementAndGet() != 0);\r\n        }\r\n```"
p9899
aS"No need for stronger guarantees.\r\n\r\nThat `unsubscribe` you are suggesting delays the `tasks.unsubscribe()` and the queue could still be in use; swap the two lines. In addition, you'd still need a clear in the drain loop because it could be still scheduled with a non-empty queue."
p9900
aS'Thanks @akarnokd . In terms of guarantees I was going to suggest that the javadoc of `Scheduler` at the class level be supplemented with a statement similar to that of `ExecutorService.shutdownNow()` once all schedulers had been enhanced like this PR.'
p9901
aS'Updated PR, squashed commits.'
p9902
aS':+1:'
p9903
aS':+1: '
p9904
aS'@davidmoten mind thinking about how to fix `EventLoopWorker`? :)'
p9905
aS"@zsxwing sure, I'll have a look at `EventLoopWorker`\r\n\r\nI think there is an outstanding race with this PR:\r\n\r\n```java\r\nif (!sa.isUnsubscribed()) {\r\n    sa.run();\r\n}\r\n```\r\nmight have to be:\r\n```java\r\nif (!tasks.isUnsubscribed()) {\r\n    sa.run();\r\n}\r\n```\r\nI'll have a look a bit later today and I'll submit another PR if needed.\r\n"
p9906
aS'`if (!sa.isUnsubscribed()) {` is necessary.  `sa` may be unsubscribed by the user.'
p9907
aS'Yep I just noticed that myself, ta.'
p9908
aS'@zsxwing I think it should look like this:\r\n\r\n```java\r\n        @Override\r\n        public void run() {\r\n            do {\r\n                if (tasks.isUnsubscribed()) {\r\n                    queue.clear();\r\n                    return;\r\n                }\r\n                ScheduledAction sa = queue.poll();\r\n                if (sa == null) {\r\n                    return;\r\n                }\r\n                if (!sa.isUnsubscribed()) {\r\n                \tif (!tasks.isUnsubscribed()) {\r\n                        sa.run();\r\n                \t} else {\r\n                \t\tqueue.clear();\r\n                \t\treturn;\r\n                \t}\r\n                }\r\n            } while (wip.decrementAndGet() != 0);\r\n        }\r\n```'
p9909
asg14
S'davidmoten:scheduler-unsub-order'
p9910
sbsI3845
(iPull
Pull
p9911
(dp9912
g3
S"The serial subscription in the `delaySubscription(Observable)` operator was not chained properly and thus an unsubscription before any events by the other didn't prevent the subscription to the main source.\r\n\r\nReported in #3844"
p9913
sg5
S'1.x: fix delaySubscription(Observable) unsubscription before triggered'
p9914
sg7
(lp9915
S'Bug'
p9916
asg10
I3845
sg11
(lp9917
sg14
S'akarnokd:DelaySubscriptionFix'
p9918
sbsI3846
(iPull
Pull
p9919
(dp9920
g3
S'Update to the CHANGES.md file.\r\n\r\n(Without the flatMap and replay perf enhancements.)'
p9921
sg5
S'1.x: Release 1.1.3 CHANGES.md update'
p9922
sg7
(lp9923
S'Information'
p9924
asg10
I3846
sg11
(lp9925
S':+1: for release with this content'
p9926
aS':+1: '
p9927
asg14
S'akarnokd:Release_1_1_3_changes'
p9928
sbsI3848
(iPull
Pull
p9929
(dp9930
g3
S'This PR factors out many anonymous inner classes into named classes and moves them outside `Observable`.\r\n\r\nThis cleanup makes the `Observable` more compact and helps debugging by showing more meaningful names in stacktraces.'
p9931
sg5
S'1.x: deanonymize Observable inner classes'
p9932
sg7
(lp9933
S'Cleanup'
p9934
asg10
I3848
sg11
(lp9935
S'Great change. Observable class is a beast so readability and stacktrace improvements are always a :+1:'
p9936
aS'Thanks @JakeWharton ! Updated PR based on your suggestions.'
p9937
asg14
S'akarnokd:ObservableNoAnonym'
p9938
sbsI3849
(iPull
Pull
p9939
(dp9940
g3
g53
sg5
S'Remove unused local.'
p9941
sg7
(lp9942
S'Cleanup'
p9943
asg10
I3849
sg11
(lp9944
S':+1:'
p9945
aS':+1: '
p9946
asg14
S'JakeWharton:jw/unused-local'
p9947
sbsI3853
(iPull
Pull
p9948
(dp9949
g3
S'This PR adds a perf class to measure the difference between `concatMap()` and `concatMapIterable()` to support performance work\r\n\r\n[Results](https://gist.github.com/akarnokd/86f5507ba4dec6a19fdf5b4bf7d7578f) on my machine (i7 4770K, Windows 7 x64, Java 8u77):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14477915/8206a302-0111-11e6-82dd-d0e3cf70b8b8.png)\r\n'
p9950
sg5
S'1.x: ConcatMap vs ConcatMapIterable perf'
p9951
sg7
(lp9952
S'Performance'
p9953
asg10
I3853
sg11
(lp9954
sg14
S'akarnokd:ConcatMapIterablePerf'
p9955
sbsI3856
(iPull
Pull
p9956
(dp9957
g3
S"Unlike other hooks, the `RxJavaSchedulersHook` has no access to the real `Scheduler` instances in order to do wrapping/delegation. With these factory methods, a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulers.\r\n\r\nFor Android this wrapping/delegation use-case is important for UI testing. We have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when they're empty. This is easy to do currently, but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under test.\r\n\r\nThese three methods are referenced in #3724, and I think providing the defaults is useful as well as eventually adding overloads which take `ThreadFactory` instances for each."
p9958
sg5
S'Provide factories for creating the default scheduler instances.'
p9959
sg7
(lp9960
S'Enhancement'
p9961
asg10
I3856
sg11
(lp9962
S"Please correct me if I'm wrong but looks like as soon as you access one of the new methods, `static final Schedulers.INSTANCE` will be instantiated which will make impossible to use `RxJavaSchedulersHook` as you described. Have you checked described use case? Maybe add such tests as example if possible?\r\n\r\n>We have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when they're empty.\r\n\r\nJust wanted to say for those who may find this PR later: empty/non-empty state of schedulers is not 100% source of truth for ui tests, you may have some background or time related (periodic/etc) code that does not affect the ui directly and may even freeze tests."
p9963
aS"You are accessing the methods from the hook which was called from the static initializer of this class on first reference to `Schedulers.io()` or the like. I'll add a test."
p9964
aS'That prevents package scoped methods from being used in the factory.'
p9965
aS'>That prevents package scoped methods from being used in the factory.\r\n\r\nWe can move schedulers to `internal.schedulers` to "defend" from that (otherwise somebody can always use reflection to break package scope) and make constructors public.\r\n\r\nIdeal solution would be to return schedulers in `RxJavaSchedulersHook` by default instead of returning `null` like it does now, so calling `super.getSomeScheduler()` will give original instance that you can wrap/etc as you wish. Though, we\'ll have to handle `null` as default too.\r\n\r\n// sorry, I\'m very tired and want to sleep, so I may come to wrong conclusions.'
p9966
aS'The factories were moved to the hook.'
p9967
aS':+1:'
p9968
aS":+1: now, but let me ask again, what about this:\r\n\r\n>Ideal solution would be to return schedulers in `RxJavaSchedulersHook` by default instead of returning `null` like it does now, so calling `super.getSomeScheduler()` will give original instance that you can wrap/etc as you wish. Though, we'll have to handle `null` as default too.\r\n\r\nNo need for new methods, no need to fight with instantiation order and package scope visibility. Yes, user won't be able to instantiate new scheduler of required type outside of the hook, but it's not possible at the moment, so nobody loses nothing."
p9969
asg14
S'JakeWharton:jw/scheduler-factories'
p9970
sbsI3862
(iPull
Pull
p9971
(dp9972
g3
S"The `from(Iterable)` ignored non-fatal exceptions thrown by the `Iterable` and `Iterator`.\r\n\r\nApart from wrapping the calls into `try-catch`, the overal emission algorithm has been changed:\r\n\r\n  - It calls `hasNext` only once for each available value. Since the subscribe() checks for an outright empty `Iterable`, the drain loop runs only if it wasn't empty and does another `hasNext` check immediately to complete immediately if possible.\r\n  - It uses what I call a fast-flow algorithm to avoid decrementing the requested amount (this) if there were more requests issued during the emission."
p9973
sg5
S'1.x: fix from(Iterable) error handling of Iterable/Iterator'
p9974
sg7
(lp9975
S'Bug'
p9976
asg10
I3862
sg11
(lp9977
S'L93 no longer needs parameter `n`:\r\n```java\r\nvoid slowpath(long n) {\r\n```'
p9978
aS':+1:  once last comment dealt with'
p9979
aS'Actually, it should be using `n`. Fixed.'
p9980
aS'Yep I see, nice.'
p9981
asg14
S'akarnokd:FromIterableErrorHandling'
p9982
sbsI3864
(iPull
Pull
p9983
(dp9984
g3
S"This PR reduces the overhead of `concatMapIterable`/`flatMapIterable` by not wrapping them into `Observable.from` sources but handling the generated `Iterable`s directly.\r\n\r\nSince `Iterable`s are inherently synchronous, there is no difference between the two operators that now use the common underlying operator (i.e., flatMap can't chose a different source because it can't tell if an `Iterable` source is not ready or not; `hasNext()` is for indicating completion, not temporary lack of data).\r\n\r\nBenchmark (i7 4790, Window 7 x64, Java 8u77):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14599483/e3c72978-0557-11e6-8a3e-833381399646.png)\r\n\r\n`Iterable-M` is the current master, `Plain` is using `concatMap(Observable::from)` as a reference.\r\n\r\nThe `count=1` cases are bit slower because there is no good way of detecting if an `Iterable` holds only a single element, unlike with `just()`, and have to instantiate the full infrastructure even for a single element.\r\n\r\nThe same table using the master as baseline:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14599552/5258f7e0-0558-11e6-8d1d-4eacca60805b.png)\r\n\r\n"
p9985
sg5
S'1.x: optimize concatMapIterable/flatMapIterable'
p9986
sg7
(lp9987
S'Performance'
p9988
asg10
I3864
sg11
(lp9989
sg14
S'akarnokd:FlattenIterable1x'
p9990
sbsI3866
(iPull
Pull
p9991
(dp9992
g3
S'Closes #3865.'
p9993
sg5
S'1.x: Add Single.toCompletable()'
p9994
sg7
(lp9995
S'Enhancement'
p9996
asg10
I3866
sg11
(lp9997
S':+1:'
p9998
aS"Seems GitHub doesn't add the PR description to the commit message automatically when squashing a PR. I added it manually."
p9999
asg14
S'artem-zinnatullin:1.x-single-to-completable'
p10000
sbsI3867
(iPull
Pull
p10001
(dp10002
g3
S"As per discussion in #3842, there was an outstanding possibility that unsubscription of a `Worker` would not cancel all tasks waiting in the queue. This PR addresses that possibility. I attempted to provoke the condition in a unit test but didn't manage it. Nethertheless I think this change completes the protection desired in #3842.\r\n\r\nI do have mixed feelings about the possible double calling of `queue.clear()` (once in the `run()` method and once in the `unsubscribe()` method. Any preferences?\r\n\r\n"
p10003
sg5
S'1.x: improve ExecutorScheduler worker unsubscription some more'
p10004
sg7
(lp10005
S'Cleanup'
p10006
asg10
I3867
sg11
(lp10007
S'> there was an outstanding possibility that unsubscription of a Worker would not cancel all tasks waiting in the queue.\r\n\r\nTasks are tracked in a separate structure for cancellation, which always happens but maybe not that eagerly and not the same order they were submitted.\r\n\r\nYou should also keep the original up-front `clear()` part.\r\n'
p10008
aS"Thanks @akarnokd, I've updated the PR and squashed commits."
p10009
aS':+1:'
p10010
aS'> there was an outstanding possibility that unsubscription of a Worker would not cancel all tasks waiting in the queue\r\n\r\n@davidmoten Could you explain how this will happen and why adding `if (!tasks.isUnsubscribed()) {` could help? Even if `tasks.isUnsubscribed` returns `false`, it may become `true` after you just check it.\r\n'
p10011
aS"@zsxwing sure, you're right that that is possible but that scenario doesn't worry me in that I just consider that as not being able to stop work in progress as opposed to work that is queued. So I guess that's all that is happening here because the check of `tasks.isUnsubscribed()` at the start of of the loop is all that's required to prevent the issue that I was worried about in #3842. This additional check just firms up not running queued work that has been cancelled.\r\n\r\n\r\n"
p10012
aS'> This additional check just firms up not running queued work that has been cancelled.\r\n\r\nSounds like adding `isUnsubscribed` in an operator?'
p10013
aS'Yep, analagous to that'
p10014
aS':+1:'
p10015
asg14
S'davidmoten:unsub-scheduled-tasks'
p10016
sbsI3868
(iPull
Pull
p10017
(dp10018
g3
S"There is an unsubscribe race condition similar to #3842 in `CachedThreadScheduler.EventLoopWorker` and `EventLoopsScheduler.EventLoopWorker`. Image the following execution order:\r\n\r\n| Execution Order  | thread 1 | thread 2 |\r\n| ------------- | ------------- | ------------- |\r\n| 1 |  | submit task A |\r\n| 2 |  | submit task B |\r\n| 3 | unsubscribe Worker  |  |\r\n| 4 | unsubscribe task A |   |\r\n| 5 | | task A won't run as it's unsubscribed |\r\n| 6 | | run task B |\r\n| 7 | unsubscribe task B |  |\r\n\r\nSo task B will run but its previous task A will be skipped.\r\n\r\nThis PR adds a check before running an action and moves `workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace` to `AbstractSchedulerConcurrencyTests` to test all concurrent schedulers.\r\n\r\n"
p10019
sg5
S'Fix an unsubscribe race in EventLoopWorker'
p10020
sg7
(lp10021
S'Cleanup'
p10022
asg10
I3868
sg11
(lp10023
S':+1:'
p10024
aS':+1:  Thanks @zsxwing '
p10025
asg14
S'zsxwing:event-loop-race'
p10026
sbsI3871
(iPull
Pull
p10027
(dp10028
g3
S'A continuation of some work done in #3856 of removing uninstantiable types from the public API (via deprecation).'
p10029
sg5
S'Deprecate remaining public scheduler types.'
p10030
sg7
(lp10031
S'Cleanup'
p10032
asg10
I3871
sg11
(lp10033
S':+1:'
p10034
aS':+1:'
p10035
asg14
S'JakeWharton:jw/deprecate-public-schedulers'
p10036
sbsI3874
(iPull
Pull
p10037
(dp10038
g3
S'as per title'
p10039
sg5
S'remove unused field baseCapacity from onBackpressureBuffer'
p10040
sg7
(lp10041
S'Cleanup'
p10042
asg10
I3874
sg11
(lp10043
S':+1:'
p10044
asg14
S'davidmoten:remove-unused-field-on-backpressure-buffer'
p10045
sbsI3879
(iPull
Pull
p10046
(dp10047
g3
S'This allows hooks to create schedulers whose threads have different priorities.\r\n\r\nCloses #3724.'
p10048
sg5
S'Expose scheduler factories which accept thread factories.'
p10049
sg7
(lp10050
S'Enhancement'
p10051
asg10
I3879
sg11
(lp10052
sg14
S'JakeWharton:jw/thread-factory-scheduler-factories'
p10053
sbsI3880
(iPull
Pull
p10054
(dp10055
g3
S'Otherwise you have to manually print/debug values if test failed.'
p10056
sg5
S"1.x: TestSubscriber/TestObserver print values if number of items doesn't match"
p10057
sg7
(lp10058
S'Enhancement'
p10059
aS'Test'
p10060
asg10
I3880
sg11
(lp10061
S':+1:'
p10062
asg14
S'artem-zinnatullin:1.x-test-subscriber-assert-value-tostring'
p10063
sbsI3883
(iPull
Pull
p10064
(dp10065
g3
S"Resolves #3881.\r\n\r\nThe bug is caused by the impedance mismatch between `Observable`'s `Subscriber` and `Single`'s `SingleSubscriber`. The original code called `onNext()` which immediately signalled an `onSuccess` but also caused an unsubscription, preventing a delivery of `onCompleted()` in the inner Single.\r\n\r\nThe fix keeps `onSuccess`/`onError` rails intact  throughout the chain."
p10066
sg5
S'1.x: fix multiple chained Single.doAfterTerminate not calling actions'
p10067
sg7
(lp10068
S'Bug'
p10069
asg10
I3883
sg11
(lp10070
sg14
S'akarnokd:SingleDoAfterTerminateFix'
p10071
sbsI3886
(iPull
Pull
p10072
(dp10073
g3
S"Otherwise, if there's an error in onCompleted, the exception is\r\nswallowed and unreported.\r\n\r\nFixes #3885"
p10074
sg5
S'throwIfFatal() now throws OnCompletedFailedException'
p10075
sg7
(lp10076
S'Bug'
p10077
asg10
I3886
sg11
(lp10078
S':+1:'
p10079
asg14
S'dlew:dlew/propagate-on-completed-exception'
p10080
sbsI3887
(iPull
Pull
p10081
(dp10082
g3
S"This change will make sure if the `Subscriber` has unsubscribed, the non-fatal error is sent to the plugin error handler at least. I.e.,\r\n\r\n```java\r\nObservable.create(s -> {\r\n    s.onError(new RuntimeException());\r\n    throw new IllegalArgumentException();\r\n}).subscribe();\r\n```\r\n\r\nIn addition, if the original code threw `RuntimeException` in case the `subscriber.onError()` threw. I've changed this to `OnErrorFailedException` but not sure the original type was intentional or just left out."
p10083
sg5
S'Have undeliverable errors on subscribe() sent to plugin error handler.'
p10084
sg7
(lp10085
S'Cleanup'
p10086
asg10
I3887
sg11
(lp10087
sg14
S'akarnokd:OnSubscribeNoSwallow'
p10088
sbsI3888
(iPull
Pull
p10089
(dp10090
g3
S"By default, operators have final link to their child Subscriber and they never clear the upstream's Producer. If the end subscriber is referenced, for example in a `CompositeSubscription`, that keeps an entire chain of objects alive and can cause memory leaks (a use case common on Android).\r\n\r\nThis proposed operator detaches the structures and nulls out references if the sequence terminates or the downstream unsubscribes - at the cost of atomic operations and mandatory volatile read for each onNext(). \r\n\r\nI know this issue has been brought up several times, but instead of adding the overhead to every operator, I propose an operator that can be applied when the developer really needs it (i.e., could be part of the usual compose(subscribeOn/observeOn) setup).\r\n\r\nOn the implementation side, this requires deferred `Producer`/`request()` handling because requests from downstream may appear even before the upstream calls `setProducer` (if at all) and we can't use the base class' behavior for this."
p10091
sg5
S'1.x: proposal: onTerminateDetach - detach upstream/downstream for GC'
p10092
sg7
(lp10093
S'Enhancement'
p10094
asg10
I3888
sg11
(lp10095
S"Doesn't proper `Subscription` nulling and/or `CompositionException` clearing solve this? I haven't seen a lot of people complaining about leaks recently. Is something motivating this?"
p10096
aS"What I've seen in Android examples, is that you add to a composite on creation and clear() the composite on destroy, but haven't seen the subscriber removed from the composite when it finishes normally but still while the activity is active."
p10097
asg14
S'akarnokd:OnTerminateDetach'
p10098
sbsI3890
(iPull
Pull
p10099
(dp10100
g3
S'In current master, when the function in `map` or `filter` crashes, the error is propagated but the upstream is not immediately unsubscribed but expected to happen eventually due to some other operator or `SafeSubscriber`.\r\n\r\nThe fix, and also the restructuring of the unsubscription chain, makes sure the crash also unsubscribes immediately (unless a fatal one).\r\n\r\nRelated: [StackOverflow question](http://stackoverflow.com/questions/35343474/why-does-it-need-onbackpressure-here-for-click-events)'
p10101
sg5
S'1.x: map() and filter() should unsubscribe on crash eagerly'
p10102
sg7
(lp10103
S'Bug'
p10104
asg10
I3890
sg11
(lp10105
sg14
S'akarnokd:MapFilterCrashHandling'
p10106
sbsI3893
(iPull
Pull
p10107
(dp10108
g3
S'The `from(Future)` operator was not refitted for backpressure.\r\n\r\nReported in: #3892.'
p10109
sg5
S'1.x: enable backpressure with from(Future).'
p10110
sg7
(lp10111
S'Bug'
p10112
asg10
I3893
sg11
(lp10113
S'LGTM :+1:'
p10114
asg14
S'akarnokd:FromFutureBackpressureFix'
p10115
sbsI3895
(iPull
Pull
p10116
(dp10117
g3
S'Similar issue as in #3890.'
p10118
sg5
S'1.x: cast() should unsubscribe on crash eagerly'
p10119
sg7
(lp10120
S'Bug'
p10121
asg10
I3895
sg11
(lp10122
S'LGTM :+1:'
p10123
asg14
S'akarnokd:CastEagerUnsubscribeFix'
p10124
sbsI3896
(iPull
Pull
p10125
(dp10126
g3
S'Found another one.'
p10127
sg5
S'1.x: OperatorMapPair should unsubscribe on crash eagerly'
p10128
sg7
(lp10129
S'Bug'
p10130
asg10
I3896
sg11
(lp10131
sg14
S'akarnokd:MapPairEagerUnsubscribeFix'
p10132
sbsI3897
(iPull
Pull
p10133
(dp10134
g3
S"`OperatorSwitchTest.switchAsyncHeavily` sometimes times out. Could be due to Travis or an actual bug which doesn't deliver the last few elements."
p10135
sg5
S'1.x: Give more time to OperatorSwitchTest.switchAsyncHeavily'
p10136
sg7
(lp10137
S'Test-Failures'
p10138
asg10
I3897
sg11
(lp10139
sg14
S'akarnokd:OperatorSwitchTestFix'
p10140
sbsI3898
(iPull
Pull
p10141
(dp10142
g3
S'This PR simply adds missing license header to main and test files.'
p10143
sg5
S'1.x: Add missing license headers'
p10144
sg7
(lp10145
S'Cleanup'
p10146
asg10
I3898
sg11
(lp10147
S'Was always curious if this really required if repo has `LICENSE` file and it referenced in the `pom.xml`?'
p10148
asg14
S'akarnokd:LicenseHeaders'
p10149
sbsI3899
(iPull
Pull
p10150
(dp10151
g3
S'Many test frameworks throw an `AssertionError` to indicate a failure.  For example, mock objects created using EasyMock will throw an `AssertionError` immediately if the mock receives an unexpected method call.  When using `onErrorResumeNext()`, this error may be silently swallowed.  And since this type of exception is not a part of normal program flow (it is only used in tests), it should not be up to the application to handle these errors specifically.\r\n\r\nAccording to the Java documentation on throwables, I would actually expect RxJava to treat all `Error` subclasses as fatal, but perhaps there are other reasons not to do so.  My first thought was to register a global error handling plugin which would rethrow `AssertionError`s, but `onErrorResumeNext()` prevents the error from reaching the plugin.  '
p10152
sg5
S'AssertionError should be treated as fatal'
p10153
sg7
(lp10154
S'Feature-Request'
p10155
asg10
I3899
sg11
(lp10156
S"I'm not sure about this, I certainly never had the need for it but let's hear the others' thoughts on this."
p10157
aS"Are there any other errors that skip past onError or any of the catching operators? Seems like it would be kind of unexpected behavior and a little too much of a special case. In the use case described, I would suggest that you should be using RxJava's test utility classes to check the error events as part of your test."
p10158
aS"Same thoughts as @hzsweers ^.\r\n\r\n>When using onErrorResumeNext(), this error may be silently swallowed.\r\n\r\n@brianvanderwal It means that your test is not good enough and it probably won't detect other kind of errors from the upstream too.\r\n\r\n// I'd suggest to read about mutation testing: [1](https://en.wikipedia.org/wiki/Mutation_testing), [2](http://www.tutorialspoint.com/software_testing_dictionary/mutation_testing.htm) and see how you can improve your tests. TL;TR: any change of the code under the test should break the tests (ideally)."
p10159
aS"Thank you for your contribution but it seems the other participants didn't see any compelling case to support its inclusion into the library."
p10160
asg14
S'brianvanderwal:assertion-error-as-fatal'
p10161
sbsI3901
(iPull
Pull
p10162
(dp10163
g3
S'Handling the case of 0 requests with the same code style as SingleDelayedProducer and SingleProducer.'
p10164
sg5
S'Small code style consistency fix for WeakSingleProducer'
p10165
sg7
(lp10166
S'Cleanup'
p10167
asg10
I3901
sg11
(lp10168
S':+1:'
p10169
asg14
S'rzsombor:SingleProducerConsistency'
p10170
sbsI3903
(iPull
Pull
p10171
(dp10172
g3
g53
sg5
g53
sg7
(lp10173
S'Cleanup'
p10174
asg10
I3903
sg11
(lp10175
S':+1:'
p10176
asg14
S'rzsombor:SleepingActionPolish'
p10177
sbsI3904
(iPull
Pull
p10178
(dp10179
g3
S'Fixed https://github.com/ReactiveX/RxJava/issues/3860'
p10180
sg5
S'1.x: Fix Completable swallows OnErrorNotImplementedException'
p10181
sg7
(lp10182
S'Bug'
p10183
asg10
I3904
sg11
(lp10184
S"Looks good, :+1:\r\n\r\nI wonder, shouldn't we switch to `Exceptions.throwIfFatal` as in `Observable`? Of course, the whole `Completable` needs rechecking.\r\n"
p10185
aS'Updated to use `Exceptions.throwIfFatal`. Thanks!'
p10186
asg14
S'prt2121:pt/completable-exception'
p10187
sbsI3905
(iPull
Pull
p10188
(dp10189
g3
S'Issue #3892 is a goldmine for missing backpressure problems. This PR fixes the case when `singleOrDefault` encounters an empty source and has to emit some default value. Fixed via setting the `SingleProducer` on the child on termination.'
p10190
sg5
S'1.x: fix singleOrDefault() backpressure if source is empty'
p10191
sg7
(lp10192
S'Bug'
p10193
asg10
I3905
sg11
(lp10194
sg14
S'akarnokd:SingleOrDefaultFix'
p10195
sbsI3906
(iPull
Pull
p10196
(dp10197
g3
S'Release 1.1.4 CHANGES.md update.\r\n\r\n:+1: for the release.'
p10198
sg5
S'1.x: Release 1.1.4 CHANGES.md update'
p10199
sg7
(lp10200
S'Information'
p10201
asg10
I3906
sg11
(lp10202
S'Excellent, @stevegury would you do the release?'
p10203
aS"@akarnokd I've published the release, Travis is currently building/publishing the jars..."
p10204
aS'Fantastic!'
p10205
asg14
S'akarnokd:Release_1_1_4'
p10206
sbsI3907
(iPull
Pull
p10207
(dp10208
g3
S'See #3877'
p10209
sg5
S'1.x: DoOnUnsubscribe javadoc clarifications'
p10210
sg7
(lp10211
S'Documentation'
p10212
asg10
I3907
sg11
(lp10213
sg14
S'akarnokd:DocDoOnUnsubscribe'
p10214
sbsI3909
(iPull
Pull
p10215
(dp10216
g3
S'See #3774'
p10217
sg5
S'1.x: Single.retryWhen javadoc clarifications'
p10218
sg7
(lp10219
S'Documentation'
p10220
asg10
I3909
sg11
(lp10221
sg14
S'akarnokd:DocSingleRetryWhen'
p10222
sbsI3912
(iPull
Pull
p10223
(dp10224
g3
S"Forgot that `Subscriber` defaults to requesting `Long.MAX_VALUE` unless suppressed and apparently there was no verification of filter's backpressure behavior; the two existing tests didn't really check for the delivery pattern."
p10225
sg5
S'1.x: fix filter() default-requesting and thus going unbounded'
p10226
sg7
(lp10227
S'Bug'
p10228
asg10
I3912
sg11
(lp10229
S'Agree. Not sure if you can release with 1.1.4.1 or you have to  roll to 1.1.5.'
p10230
aS'Does `map` need the same change?'
p10231
aS"No. Map doesn't set the Producer on `this` so no default-request happens."
p10232
asg14
S'akarnokd:FilterDefaultRequestFix'
p10233
sbsI3913
(iPull
Pull
p10234
(dp10235
g3
S'Emergency release.'
p10236
sg5
S'Release 1.1.5 CHANGES.md update'
p10237
sg7
(lp10238
S'Information'
p10239
asg10
I3913
sg11
(lp10240
S'@stevegury If the version number is right, feel free to merge & release.'
p10241
asg14
S'akarnokd:Release_1.1.5'
p10242
sbsI3918
(iPull
Pull
p10243
(dp10244
g3
S'In addition, the behavior of time-limited mode has been changed. Late subscribers will now skip stale data.\r\n\r\nRelated issue: #3917'
p10245
sg5
S'1.x: ReplaySubject now supports backpressure'
p10246
sg7
(lp10247
S'Enhancement'
p10248
asg10
I3918
sg11
(lp10249
S"Would it be possible to split this up into a couple commits? GitHub won't show the diff in its current state and says to view locally"
p10250
aS"No, ReplaySubject has simply too many expected features: unbounded, size bounded and size+time bounded modes, each adding 100s of lines. It is fully rewritten so comparison wouldn't do much help."
p10251
aS'This makes it very difficult to review. What do you propose @akarnokd ?'
p10252
aS'Check out and have your IDE compare this PR against the master version.'
p10253
aS'> Late subscribers will now skip stale data.\r\n\r\nDoes this mean that subscribers were not skipping stale data? This change sounds like fixing a bug?'
p10254
aS'In the original, once the source completed, the current elements in the bounded buffers were frozen in time. Late subscribers would get all the data, including those who have become older by the time these subscriptions happen. Same was true for live, but inactive replays where a subscriber would start from an outdated element. These were expected by the unit tests but #3917 expected only fresh data.'
p10255
asg14
S'akarnokd:ReplayBackpressure'
p10256
sbsI3919
(iPull
Pull
p10257
(dp10258
g3
S'Somehow, Subscriber.NOT_SET was object `Long` instead of primitive `long`.'
p10259
sg5
S'1.x: Subscriber.NOT_SET Long -> long, saves an unboxing per instance'
p10260
sg7
(lp10261
S'Cleanup'
p10262
asg10
I3919
sg11
(lp10263
S'A tiny win, but a win no less :+1:'
p10264
aS'It bothered me for some time now, seeing the Long there. This is not just about the unboxing, but remove the indication that `NOT_SET` can be null for meaningful reasons.'
p10265
aS'Looks like my bad from last year, thanks :+1: '
p10266
asg14
S'akarnokd:SubscriberCleanup0509'
p10267
sbsI3922
(iPull
Pull
p10268
(dp10269
g3
S"The operator `using` didn't call the resource cleanup code if the `observableFactory.call()` code crashed. In addition, a non-eager using didn't call the resource cleanup if one subscribed with `unsafeSubscribe` or the subscription to the generated `Observable` crashed.\r\n\r\nRelated: #3921 "
p10270
sg5
S'1.x: fix using() resource cleanup when factory throws or being non-eager'
p10271
sg7
(lp10272
S'Bug'
p10273
asg10
I3922
sg11
(lp10274
S'Changes applied.'
p10275
asg14
S'akarnokd:UsingCleanupFix'
p10276
sbsI3924
(iPull
Pull
p10277
(dp10278
g3
S"This PR fixed the `ObjectPool` dependency on the `Schedulers.computation()` which can be replaced via plugin hooks causing unexpected and long sleeps (i.e., when `computation()` is replaced by `immediate()`).\r\n\r\nSee #3923.\r\n\r\nI'd also consider removing the `RxRingBuffer` entirely."
p10279
sg5
S'1.x: fix RxRingBuffer-pool depending on the computation scheduler'
p10280
sg7
(lp10281
S'Bug'
p10282
asg10
I3924
sg11
(lp10283
sg14
S'akarnokd:ObjectPoolDifferentScheduler'
p10284
sbsI3928
(iPull
Pull
p10285
(dp10286
g3
S'Closes #3925'
p10287
sg5
S'Update RxJava Javadoc to  1.1.5'
p10288
sg7
(lp10289
S'Documentation'
p10290
asg10
I3928
sg11
(lp10291
S':+1:'
p10292
asg14
S'zsxwing:gh-pages'
p10293
sbsI3931
(iPull
Pull
p10294
(dp10295
g3
S"I have a long running stream using `groupBy` that over time will accumulate 10s of millions of keys. If I can specify an evicting map to `groupBy` then I'll be able to keep it down to ~10,000 keys. \r\n\r\nThis PR supports this use case and could be used with Guava's `CacheBuilder` like this:\r\n\r\n```java\r\nFunc1<Action1<K>, Map<K, Object>> mapFactory = \r\n    action -> CacheBuilder.newBuilder()\r\n              .maximumSize(1000)\r\n              .expireAfterAccess(12, TimeUnit.HOUR)\r\n              .removalListener(key -> action.call(key))\r\n              .<K, Object> build().asMap();\r\nobservable\r\n    .groupBy(keySelector, elementSelector, mapFactory)\r\n    ...\r\n```\r\nI'll enhance this PR with more unit tests if this looks a good direction.\r\n\r\n"
p10296
sg5
S'1.x: add groupBy overload with evictingMapFactory'
p10297
sg7
(lp10298
S'Feature-Request'
p10299
asg10
I3931
sg11
(lp10300
S"This PR may be useful still but I've realised I can get what I want with more control using `defer`, `PublishSubject` and `takeUntil` on the grouped observables.\r\n"
p10301
aS"Yes, you can `timeout` or `takeUntil` on each group to get it removed from the internal map. I'm not sure about the map factory because we need something concurrently modifiable."
p10302
aS"I'm happy using `timeout` with my use case now but I'll leave this PR up for a few days to see if anyone else has a use case."
p10303
aS"@akarnokd  I think there's a catch with `timeout`. I'm using it as below but I believe I could lose an emission due to timeout cutting in on say the processing occurring in `operator1`:\r\n\r\n```java\r\no.groupBy(...)\r\n  .flatMap(\r\n    g -> \r\n        g.operator1()\r\n         .timeout(10, TimeUnit.SECONDS)\r\n         .onErrorResumeNext(completeOnTimeoutException))\r\n)\r\n```\r\nI guess I'll have to use `timeout` or `timer` in a different way so it doesn't shortcut an in-flight emission. Have I got this right?"
p10304
aS"Yes, there  is  chance values get dropped when an emission and group unsubscribe happens at the same time. You can't know the value made it or not. If your value has its own lifecycle, that's going to be a problem. Rx is not designed for that and it's the next challenge of the field - especially since reactive-io is full of life-cycle managed buffers."
p10305
aS">If your value has its own lifecycle, that's going to be a problem. Rx is not designed for that and it's the next challenge of the field - especially since reactive-io is full of life-cycle managed buffers.\r\n\r\nYour absolutely right that my use case has some special lifecycle that I'm trying to manage with `groupBy`. It's an event sourcing/cqrs  use case where emissions upstream of `groupBy` are persisted (you knew io was part of the scenario you perceptive fellow) and whenever a `groupBy` emitted `GroupedObservable` is subscribed to (or resubscribed to) the stream starts with the events already recorded for that key (read from disk) before processing the incoming event from upstream. \r\n\r\nIt does seem to me now that if I don't want to lose emissions for my use case (and want to keep the `groupBy` keys down in numbers) then I have to record information about groups upstream of `groupBy` and possibly modify the upstream to include some sort of keyed sentinel to tell the `GroupedObservable` to complete based on last access time for a key for instance. **OR** I just use the modified `groupBy` in this PR.\r\n\r\nI'll progress the implementation of the use case and see what else turns up.\r\n"
p10306
aS'If you want to pursue this further, please rebase it.'
p10307
aS"Yep I'd like to pursue this one. This PR is not great to put in an external library because it is so coupled to the groupBy implementation and its tests. I'll fix the API and I realize I may also need to put try-catch on `mapFactory.call` and `map.get` and `map.put` calls with some specific error handling (catching fatal errors, calling onError etc). I'll have a look at it.\r\n\r\nI'd also like to use the Guava `CacheBuilder` in unit tests. Can I add that test dependency?"
p10308
aS"I'm not against adding `testCompile` entries. Hopefully, Guava doesn't drag in too many other libraries."
p10309
aS"Guava only has a few optional dependencies that I wouldn't include and the current version 19.0 still supports java 6."
p10310
aS'Great!'
p10311
aS'## [Current coverage][cc-pull] is **80.32%**\n> Merging [#3931][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #3931   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16853    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2561     +7   \n==========================================\n+ Hits          13500      13537    +37   \n+ Misses         2408       2402     -6   \n- Partials        913        914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...2e2bdb6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...2e2bdb65c7b67ec2aaa02636b3972f37947f34de\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/3931?src=pr'
p10312
aS':+1:'
p10313
aS'Oops, merged in a `build.gradle` change and broke this. Could you rebase again?\r\n\r\n/cc @artem-zinnatullin @stevegury for review on this'
p10314
aS"Thanks for the review @artem-zinnatullin.\r\nI've addressed your comments and there's one little addition which is the rename of one of the test methods to use camel case and a number to differentiate from `testGroupByBackpressure` (`testgroupByBackpressure` -> `testGroupByBackpressure2`)."
p10315
aS'I take it that being an API enhancement this PR still requires one more collaborator approval?'
p10316
aS'oh and thanks @stevegury for giving it a look!'
p10317
aS'Thanks @davidmoten for the contribution!'
p10318
asg14
S'davidmoten:groupby-eviction2'
p10319
sbsI3934
(iPull
Pull
p10320
(dp10321
g3
S"This PR adds extra information to assertion failure messages on `TestSubscriber` and `TestObserver`, indicating:\r\n\r\n  - the listener didn't receive any `onCompleted` calls, which is an indication of hung or skipping operation,\r\n  - there were errors received, indicating a failure in the event generation process.\r\n\r\nPreviously, if there was something wrong with the sequence, the order and type of assertions were mostly unhelpful: if `assertValues` was first, the lack of values failure could hide a revealing onError call. If the `assertNoErrors()` was first, the error is visible but no way of knowing how far the sequence got.\r\n\r\nNow, it is generally okay to use `assertValues` first, which along the difference, will print the lack of completion and the number of exceptions received, plus, the `AssertionError` will have its cause initialized to the actual or composited exception. The message format thus changes:\r\n\r\n```\r\noriginal assertion message with details (0 completions) (+1 error)\r\n...\r\ncaused by\r\n...\r\n```\r\n\r\nThis extra information saved me a lot of time in 2.x and Rsc development.\r\n\r\nNote that this change doesn't make the `assertXXX`s also assert for completion or error at all. If the values match, but there is an additional error instead of completion, one has to assert that separately, just like now."
p10322
sg5
S'1.x: TestSubscriber extra info on assertion failures'
p10323
sg7
(lp10324
S'Enhancement'
p10325
aS'Test'
p10326
asg10
I3934
sg11
(lp10327
S'This is great!'
p10328
aS'Added newline and plural/singular form.'
p10329
asg14
S'akarnokd:TestSubscriberMoreDetails'
p10330
sbsI3935
(iPull
Pull
p10331
(dp10332
g3
S"I went through all the pending comments that weren't addressed."
p10333
sg5
S'Clean-up of the 2.x Design.md document'
p10334
sg7
(lp10335
S'Discussion'
p10336
aS'Documentation'
p10337
asg10
I3935
sg11
(lp10338
S':+1:\r\n\r\nDo you want me to write a distilled version of the operator-fusion in a follow-up PR?'
p10339
aS'I\'d also like to change the extension points:\r\n\r\nUnlike RxJava 1.x, 2.x base classes are abstract and stateless and generally no longer wrap an `OnSubscribe` callback - this saves allocation in assembly time without limiting the expressiveness. Operator methods and standard factories still live as final on the base classes. \r\n\r\nSince Java still doesn\'t have extension methods, "adding" more operators can only happen through helper methods such as `lift(C -> C)` and `compose(R -> P)` where `C` is the default consumer type (i.e., `rs.Subscriber`), `R` is the base type (i.e., `Flowable`) and `P` is the base interface (i.e., `rs.Publisher`). As before, the library itself may gain or lose standard operators and/or overloads through the same community process.\r\n\r\nIn concert, `create(OnSubscribe)` will not be available; standard operators extend the base types directly. The conversion of other RS-based libraries will happen through the `Flowable.wrap()` static method. \r\n\r\n(*The unfortunate effect of `create` in 1.x was the ignorance of the Observable contract and beginner\'s first choice as an entry point. We can\'t eliminate this path since `rs.Publisher` is a single method functional interface that can be implemented just as badly.*)\r\n\r\nTherefore, new standard factory methods will try to address the common entry point requirements: \r\n  - `create(SyncOnSubscribe)` to safe, synchronous generation of signals, one-by-one\r\n  - `create(AsyncOnSubscribe)` to batch-create signals based on request patterns (I\'m still not convinced)\r\n  - `create(SingleEmitter)` to relay a single value or error from other reactive sources (i.e., addListener callbacks)\r\n  -  `create(FlowEmitter)` to relay multiple values or error from multi-valued reactive-sources (i.e., button-clicks) while also give flow control options right there (buffer, drop, error, etc.).\r\n\r\nBy extending the base classes, operator implementations would loose the tracking/wrapping features of 1.x. To avoid this, the methods `subscribe(C)` will be final and operators have to implement a protected `subscribeActual` (or any other reasonable name).\r\n\r\n```java\r\n@Override\r\npublic final void subscribe(Subscriber<? super T> s) {\r\n   subscribeActual(hook.onSubscribe(s));\r\n} \r\n\r\nprotected abstract void subscribeActual(Subscriber<? super T> s);\r\n```\r\n\r\nAssembly-time hooks will be moved into the individual standard methods on the base types:\r\n\r\n```java\r\npublic final Flowable<R> map(Function<? super T, ? extends R> mapper) {\r\n    return hook.onAssembly(new FlowableMap<T, R>(this, mapper));\r\n}\r\n```'
p10340
aS'> "adding" more operators can only happen through helper methods\r\n\r\nI do not necessarily agree with this. Yes they provide a very easy way to lift in custom operators. However as I have shown with the `Consumable` API, the `Consumable<S2> Consumable<S1>#extend` method provides a way to switch context to a different kind of consumable. This can be used to isolate various different special case operators that someone can switch to as necessary for their use case. '
p10341
aS'Unless there are any controversial points, I would like to merge this as is.\r\n@akarnokd please add a little something about fusion.'
p10342
aS'#### Fusion\r\n\r\nOperator fusion exploits the declarative nature of building flows; the developer specifies the "what", "where" and "when", the library then tries to optimize the "how".\r\n\r\nThere are two main levels of operator fusion: *macro* and *micro*.\r\n\r\n##### Macro-fusion\r\n\r\nMacro fusion deals with the higher level view of the operators, their identity and their combination (mostly in the form of subsequence). This is partially an internal affair of the operators, triggered by the downstream operator and may work with several cases. Given an operator application pair `a().b()` where `a` could be a source or an intermediate operator itself, when the application of `b` happens in assembly time, the following can happen:\r\n\r\n  - `b` identifies `a` and decides to not apply itself. Example: `empty().flatMap()` is functionally a no-op\r\n  - `b` identifies `a` and decides to apply a different, conventional operator. Example: `just().subscribeOn()` is turned into `just().observeOn()`.\r\n  - `b` decides to apply a new custom operator, combining and inlining existing behavior. Example: `just().subscribeOn()` internally goes to `ScalarScheduledPublisher`.\r\n  - `a` is `b` and the two operator\'s parameter set can be combined into a single application. Example: `filter(p1).filter(p2)` combined into `filter(p1 && p2)`\r\n\r\nParticipating in the macro-fusion externally is possible by implementing a marker interface when extending `Flowable`. Two kinds of interfaces are available: \r\n\r\n  - `java.util.Callable`: the Java standard, throwing interface, indicating the single value has to be extracted in subscription time (or later).\r\n  - `ScalarCallable`: to indicate the single value can be safely extracted during assembly time and used/inlined in other operators:\r\n\r\n```java\r\ninterface ScalarCallable<T> extends java.util.Callable<T> {\r\n    @Override\r\n    T call();\r\n}\r\n```\r\n\r\n`ScalarCallable` is also `Callable` and thus its value can be extracted practically anytime. For convenience (and for sense), `ScalarCallable` overrides and hides the superclass\' `throws Exception` clause - throwing during assembly time is likely unreasonable for scalars.\r\n\r\nSince Reactive-Streams doesn\'t allow `null`s in the value flow, we have the opportunity to define `ScalarCallable`s and `Callable`s returning `null` should be considered as an empty source - allowing operators to dispatch on the type `Callable` first then branch on the nullness of `call()`.\r\n\r\nInteroperating with other libraries, at this level is possible. Reactor-Core uses the same pattern and the two libraries can work with each other\'s `Publisher+Callable` types. Unfortunately, this means subscription-time only fusion as `ScalarCallable`s live locally in each library.\r\n\r\n##### Micro-fusion\r\n\r\nMicro-fusion goes a step deeper and tries to reuse internal structures, mostly queues, in operator pairs, saving on allocation and sometimes on atomic operations. It\'s property is that, in a way, subverts the standard Reactive-Streams protocol between subsequent operators that both support fusion. However, from the outside world\'s view, they still work according to the RS protocol.\r\n\r\nCurrently, two main kinds of micro-fusion opportunities are available.\r\n\r\n###### 1) Conditional Subscriber\r\n\r\nThis extends the RS `Subscriber`interface with an extra method: `boolean tryOnNext(T value)` and can help avoiding small request amounts in case an operator didn\'t forward but dropped the value. The canonical use is for the `filter()` operator where if the predicate returns false, the operator has to request 1 from upstream (since the downstream doesn\'t know there was a value dropped and thus not request itself). Operators wanting to participate in this fusion have to implement and subscribe with an extended Subscriber interface:\r\n\r\n```java\r\ninterface ConditionalSubscriber<T> {\r\n   boolean tryOnNext(T value);\r\n}\r\n\r\n//...\r\n@Override\r\nprotected void subscribeActual(Subscriber<? super T> s) {\r\n    if (s instanceof ConditionalSubscriber) {\r\n        source.subscribe(new FilterConditionalSubscriber<>(s, predicate));\r\n    } else {\r\n        source.subscribe(new FilterRegularSubscriber<>(s, predicate));\r\n    }\r\n}\r\n```\r\n\r\n(Note that this may lead to extra case-implementations in operators that have some kind of queue-drain emission model.)\r\n\r\n###### 2) Queue-fusion\r\n\r\nThe second category is when two (or more) operators share the same underlying queue and each append activity at the exit point (i.e., poll()) of the queue. This can work in two modes: synchronous and asynchronous.\r\n\r\nIn synchronous mode, the elements of the sequence is already available (i.e., a fixed `range()` or `fromArray()`, or can be synchronously calculated in a pull fashion in `fromIterable`. In this mode, the requesting and regular onError-path is bypassed and is forbidden. Sources have to return null from `pull()` and false from `isEmpty()` if they have no more values and throw from these methods if they want to indicate an exceptional case.\r\n\r\nIn asynchronous mode, elements may become available at any time, therefore, `pull` returning null, as with regular queue-drain, is just the indication of temporary lack of source values. Completion and error still has to go through `onComplete` and `onError` as usual, requesting still happens as usual but when a value is available in the shared queue, it is indicated by an `onNext(null)` call. This can trigger a chain of `drain` calls without moving values in or out of different queues.\r\n\r\nIn both modes, `cancel` works and behaves as usual.\r\n\r\nSince this fusion mode is an optional extension, the mode switch has to be negotiated and the shared queue interface established. Operators already working with internal queues then can, mostly, keep their current `drain()` algorithm. Queue-fusion has its own interface and protocol built on top of the existing `onSubscribe`-`Subscription` rail:\r\n\r\n```java\r\ninterface QueueSubscription<T> implements Queue<T>, Subscription {\r\n    int NONE = 0;\r\n    int SYNC = 1;\r\n    int ASYNC = 2;\r\n    int ANY = SYNC | ASYNC;\r\n    int BOUNDARY = 4;\r\n\r\n    int requestFusion(int mode);\r\n}\r\n```\r\n\r\nFor performance, the mode is an integer bitflags setup, called early during subscription time, and allows negotiating the fusion mode. Usually, producers can do only one mode and consumers can do both mode. Because fused, intermediate operators attach logic (which is many times user-callback) to the exit point of the queue interface (poll()), it may change the computation location of those callbacks in an unwanted way. The flag `BOUNDARY` is added by consumers indicating that they will consume the queue over an async boundary. Intermediate operators, such as `map` and `filter` then can reject the fusion in such sequences.\r\n\r\nSince RxJava 2.x is still JDK 6 compatible, the `QueueSubscription` can\'t itself default unnecessary methods and implementations are required to throw `UnsupportedOperationException` for `Queue` methods other than the following:\r\n\r\n  - `poll()`\r\n  - `isEmpty()`\r\n  - `clear()`\r\n  - `size()`\r\n\r\nEven though other modern libraries also define this interface, they live in local packages and thus non-reusable without dragging in the whole library. Therefore, until externalized and standardized, cross-library micro-fusion won\'t happen.\r\n\r\nA consequence of the extension of the `onSubscribe`-`Subscription` rail is that intermediate operators are no longer allowed to pass an upstream `Subscription` directly to its downstream `Subscriber.onSubscribe`. Doing so is likely to have the fused sequence skip the operator completely, losing behavior or causing runtime exceptions. Since RS `Subscriber` is an interface, operators can simply implement both `Subscriber` and `Subscription` on themselves, delegating the `request` and `cancel` calls to the upstream and calling `child.onSubscribe(this)`.'
p10343
aS'It is to be noted that since Reactor 2.5 uses the fusion described above [1] [2], it would be interesting to envision a cross library fusion contract , as part of RS directly or separately. We already benefit from small cross-library optimization thanks to @akarnokd (the first of this kind,  scalar rx.Single to scalar reactor Mono).\r\n\r\n[1] A quick example with range : https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/FluxRange.java#L80\r\n[2] The core contract, without reactor noise : https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/flow/Fuseable.java'
p10344
aS'@stevegury do you want to include my text in this PR or merge it as is?'
p10345
aS':+1:'
p10346
aS"Thanks for merging this in @akarnokd.\r\nSorry for the lack of activity, I've been pretty busy lately on other topics."
p10347
asg14
S'stevegury:stevegury/2.x-design'
p10348
sbsI3936
(iPull
Pull
p10349
(dp10350
g3
S'Plus, the unsubscribe indirection has been inlined, making `State` implement `Subscription` directly (instead of `Action0` + `Subscriptions.create`).'
p10351
sg5
S'1.x: promote UnicastSubject to be a standard+experimental Subject'
p10352
sg7
(lp10353
S'API promotion'
p10354
asg10
I3936
sg11
(lp10355
S':+1:'
p10356
asg14
S'akarnokd:UnicastSubjectPromote'
p10357
sbsI3937
(iPull
Pull
p10358
(dp10359
g3
S'Watched @dlew presentation of the pit falls of debugging RxJava https://www.youtube.com/watch?v=QdmkXL7XikQ&feature=youtu.be&t=38m12s\r\n\r\nThis change is to create an exception when a thread based `Scheduler.Worker` is constructed and reused it for all subsequent scheduled actions to increase the readability of uncaught and fatal exceptions that bubble up to the schedulers but spread the cost out across many scheduled actions.\r\n\r\nA future improvement to spread the cost out even more, that I didn\'t want to do in the first attempt, would to create the exception when `Scheduler.io()` is called and reuse the exception across multiple `Worker`s.\r\n\r\nThe example from the presentation\r\n```\r\nimport rx.Observable;\r\nimport rx.schedulers.Schedulers;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        Observable.empty()\r\n                .first()\r\n                .subscribeOn(Schedulers.io())\r\n                .subscribe();\r\n\r\n        Thread.sleep(100);\r\n    }\r\n}\r\n```\r\n\r\nUsed to print this just this exception with no mention the Main class.\r\n```\r\nException in thread "RxIoScheduler-2" java.lang.IllegalStateException: Exception thrown on Scheduler.Worker thread. Add `onError` handling.\r\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:65)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: rx.exceptions.OnErrorNotImplementedException: Sequence contains no elements\r\n\tat rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction.call(InternalObservableUtils.java:374)\r\n\tat rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction.call(InternalObservableUtils.java:1)\r\n\tat rx.internal.util.ActionSubscriber.onError(ActionSubscriber.java:44)\r\n\tat rx.observers.SafeSubscriber._onError(SafeSubscriber.java:157)\r\n\tat rx.observers.SafeSubscriber.onError(SafeSubscriber.java:120)\r\n\tat rx.internal.operators.OperatorSubscribeOn$1$1.onError(OperatorSubscribeOn.java:59)\r\n\tat rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:116)\r\n\tat rx.internal.operators.OperatorTake$1.onCompleted(OperatorTake.java:56)\r\n\tat rx.internal.operators.EmptyObservableHolder.call(EmptyObservableHolder.java:44)\r\n\tat rx.internal.operators.EmptyObservableHolder.call(EmptyObservableHolder.java:1)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:1)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:1)\r\n\tat rx.Observable.unsafeSubscribe(Observable.java:8460)\r\n\tat rx.internal.operators.OperatorSubscribeOn$1.call(OperatorSubscribeOn.java:94)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1.call(CachedThreadScheduler.java:222)\r\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:60)\r\n\t... 7 more\r\nCaused by: java.util.NoSuchElementException: Sequence contains no elements\r\n\t... 19 more\r\n```\r\n\r\nBut will now print the exception above but with an additional caused by\r\n```\r\nCaused by: rx.internal.schedulers.SchedulerContextException: Asynchronous work scheduled at\r\n\tat rx.internal.schedulers.NewThreadWorker.<init>(NewThreadWorker.java:36)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.<init>(CachedThreadScheduler.java:235)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.get(CachedThreadScheduler.java:86)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.<init>(CachedThreadScheduler.java:187)\r\n\tat rx.internal.schedulers.CachedThreadScheduler.createWorker(CachedThreadScheduler.java:173)\r\n\tat rx.internal.operators.OperatorSubscribeOn.call(OperatorSubscribeOn.java:42)\r\n\tat rx.internal.operators.OperatorSubscribeOn.call(OperatorSubscribeOn.java:1)\r\n\tat rx.Observable.subscribe(Observable.java:8553)\r\n\tat rx.Observable.subscribe(Observable.java:8520)\r\n\tat rx.Observable.subscribe(Observable.java:8316)\r\n\tat rx.schedulers.Main.main(Main.java:10)\r\n```'
p10360
sg5
S'1.x: Change the workers to capture the stack trace'
p10361
sg7
(lp10362
S'Enhancement'
p10363
asg10
I3937
sg11
(lp10364
S'No. At least make it conditional to a system parameter / global boolean variable.'
p10365
aS'@akarnokd added a system property to make if off by default.'
p10366
aS'I would like this to be default behavior. Learning Rx is hard and we are making it harder by default. Let users opt into over-optimizations.'
p10367
aS'You have a lot of test failures.'
p10368
aS'RXJava is hard to debug - lots of people agree on this. I know of large non-trivial projects that avoided using RXJava because it hard to debug. Non-trivial projects do I/O, and serialization - those are the performance problems, not micro-optimizations. Users will care more about it being easier to debug than being micro-optimized. This should be default to make it less hard.'
p10369
aS"I've changed it back to always getting the value from the system properties because makes a fine public API and it makes the tests work again.  I've added some code to mitigate the overhead of doing the check multiple times."
p10370
aS'Still failing...'
p10371
aS'Found it the test worked if run in isolation but failed if they were run en masse because of caching. Added pooled work resets in two places seems to fix the issue.'
p10372
aS"I want to increase debug support in RxJava, but I'd think, based on the feedback on #3965, that such capture is not enough.\r\n\r\nI suggest closing this PR, unless you can spend some time with it before 1.1.7. Also I'd like your feedback on #4007. It's tracking grabs the stacktrace for `observeOn` as well (the triggerer of the Scheduled actions) and should help with non-fatal crashes over async boundaries.\r\n\r\nA more elaborate solution would be that in case of a crash, the operator graph could be walked and dumped in a consumable format. Unfortunately, to support this, the `Subscriber` class has to be extended with methods to peek into the upstream and all operators have to set a `Producer` on their child subscribers to have the bidirectional link for the graph. Since `Subscriber` is public API, adding methods to it may not be a compatible change. For 2.x, there is no problem."
p10373
aS"I'm closing this for now due to test failures and merge conflicts.\r\n\r\nIn addition, I suggest extending #4007, once merged, by adding `Scheduler` wrappers - similar to the OnAssembly wrappers, via the hooks to capture and signal the stacks.\r\n\r\nIf you have further input on the issue, don't hesitate to reopen this issue or post a new one."
p10374
asg14
S'abersnaze:stacks'
p10375
sbsI3938
(iPull
Pull
p10376
(dp10377
g3
g53
sg5
S'1.x: Add missing error handler call in Completable'
p10378
sg7
(lp10379
S'Discussion'
p10380
asg10
I3938
sg11
(lp10381
S"Why do you think it's missing? In operators, only undeliverable exceptions are supposed to be sent to the global handler."
p10382
aS"I'm not pretty sure if this call to the handler goes there. But it arises from using the Retrofit's RxJava adapter, and realizing that Completable's endpoints errors are not caught by an error handler, while Observable's and Single's are."
p10383
aS"Interesting, could be that Completable doesn't use SafeSubscriber, which is responsible to deliver some errors thrown by onXXX methods. To be sure, could you add a unit test that demonstrates how Single gets your exception and how Completable isn't?"
p10384
aS'Okey'
p10385
aS"I think this comment is related: [Completable.java#L1968](https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Completable.java#L1968). From what I see, `Completable`, in a different way to `Observable` and `Single`, does calls to the error handler plugin by itself, instead of delegating it to a `SafeCompletableSubscriber` (which btw doesn't exist). Why there is no safe subscriber for `Completable` and why is this done this way?\r\n\r\nThe call to the handler is missing from `onError` in `subscribe(Action1<? super Throwable>, Action0)`, `subscribe(CompletableSubscriber)` and `subscribe(Subscriber)` methods, but `subscribe()` and `subscribe(Action0)` have it. This should be refactored to have just one place for calling the handler, as in `Observable` and `Single`."
p10386
aS'Completable was designed with a modern mindset where end-CompletableSubscribers are not expected to throw from the onXXX methods, but apparently, there was no safeSubscribe() added to the API. The current 1.x convention is to have subscribe() do additional safeguards and have an unsafeSubscribe() as direct as possible.'
p10387
aS'See #3942 for other forms of handling errors.'
p10388
aS'Closing via #3942'
p10389
asg14
S'bryant1410:patch-1'
p10390
sbsI3941
(iPull
Pull
p10391
(dp10392
g3
S'See #3940.'
p10393
sg5
S'1.x: fix Single.flatMap not composing subscription through'
p10394
sg7
(lp10395
S'Bug'
p10396
asg10
I3941
sg11
(lp10397
S':+1:'
p10398
asg14
S'akarnokd:SingleUnsubscribeComposition'
p10399
sbsI3942
(iPull
Pull
p10400
(dp10401
g3
S'Add option to safely subscribe a `CompletableSubscriber` / regular `Subscriber` and handle `onXXX` failures.\r\n\r\nSee also: #3938\r\n\r\nNaming and whether or not the safe wrapping should be the default is open to discussion.'
p10402
sg5
S'1.x: add Completable.safeSubscribe option + RxJavaPlugins hook support'
p10403
sg7
(lp10404
S'Enhancement'
p10405
asg10
I3942
sg11
(lp10406
S"In my opinion safe wrapping should be the default as it's the default in `Observable` and `Single`. At least the 3 should behave the same way. When using them, one should expect them to have a difference in their essential semantics, and not in these kind of things."
p10407
aS'Should the tests about error handling plugin in #3938 be here? Or we leave it in that PR?'
p10408
aS'@bryant1410 Your PR has a test failure:\r\n\r\n```\r\nrx.plugins.RxJavaPluginsTest > testOnErrorWhenUsingCompletable FAILED\r\n    java.lang.AssertionError: expected:<java.lang.RuntimeException: test onError> but was:<null>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:147)\r\n        at rx.plugins.RxJavaPluginsTest.testOnErrorWhenUsingCompletable(RxJavaPluginsTest.java:314)\r\n```'
p10409
aS'Fixed typo, renamed methods'
p10410
aS"@akarnokd They fail on purpose because I made the test but didn't fix the problem (Completable is not calling the error handling plugin)."
p10411
aS'The methods should be the other way around. Following `Single` and `Observable`, there should be a single `unsafeSubscribe` method, which accepts a parameter of type `CompletableSubscriber`. And `subscribe` should be present in the following ways: `subscribe()`, `subscribe(Action0)`, `subscribe(Action1<? super Throwable>, Action0)`, `subscribe(Subscriber)` and `subscribe(CompletableSubscriber)`.'
p10412
aS'The `subscribe()` methods wrap with `SafeComletableSubscriber` similar to how Observable.subscribe wraps with `SafeSubscriber`. subscribe(Subscriber) is there to allow conversion and cross-type APIs to bypass the safety overhead.'
p10413
aS'Updated with plugin support.'
p10414
aS'Can you cherry-pick the [commit that adds tests for the error handling plugn in `Completable` and `Single`](https://github.com/bryant1410/RxJava/commit/4cc57dcce8603496136d1e24173ce5ff36b7715b) from #3938?'
p10415
aS'Sure.'
p10416
aS'Done.'
p10417
aS'The comment `// TODO plugin wrapping onSubscribe` in `Completable#create` can be deleted, as the constructor is already calling the hook now. '
p10418
aS'Removed comment, changed to reuse methods, added onStart call.'
p10419
aS'Added missing annotations'
p10420
asg14
S'akarnokd:CompletableSafeSubscribe'
p10421
sbsI3943
(iPull
Pull
p10422
(dp10423
g3
g53
sg5
S'Update branches names in CONTRIBUTING:md'
p10424
sg7
(lp10425
S'Documentation'
p10426
asg10
I3943
sg11
(lp10427
S':+1:'
p10428
aS':+1:'
p10429
asg14
S'bryant1410:patch-2'
p10430
sbsI3944
(iPull
Pull
p10431
(dp10432
g3
g53
sg5
S'fix exception message from observer to subscriber'
p10433
sg7
(lp10434
S'Cleanup'
p10435
asg10
I3944
sg11
(lp10436
S':+1:'
p10437
asg14
S'loveyoupeng:master'
p10438
sbsI3948
(iPull
Pull
p10439
(dp10440
g3
S'See #3947 '
p10441
sg5
S'Add Completable.andThen(Completable), deprecate endWith()'
p10442
sg7
(lp10443
S'Cleanup'
p10444
asg10
I3948
sg11
(lp10445
S'Please update unit tests that use these deprecated methods.'
p10446
aS'Done.'
p10447
aS':+1:'
p10448
aS'The question is also since Completable is still `@Experimental` we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard (new) methods since there are already quite a few deprecated / duplicated methods.'
p10449
asg14
S'vanniktech:1.x_completable_and_then'
p10450
sbsI3949
(iPull
Pull
p10451
(dp10452
g3
S'My Eclipse warned me about several hundred javac and javadoc errors which could hide other significant warnings. This PR is the first part to fix those warnings. Note that `Observable` and `Single` itself is full of those as well (several hundred in each).'
p10453
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 1'
p10454
sg7
(lp10455
S'Cleanup'
p10456
asg10
I3949
sg11
(lp10457
S':+1:\r\nThanks for getting this done.'
p10458
asg14
S'akarnokd:Cleanup0518'
p10459
sbsI3950
(iPull
Pull
p10460
(dp10461
g3
S'This PR clears the cast warnings introduced by the need to be JDK 9 compilable.'
p10462
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 2 final'
p10463
sg7
(lp10464
S'Cleanup'
p10465
asg10
I3950
sg11
(lp10466
S'I missed a bunch of javadoc problems.'
p10467
asg14
S'akarnokd:Cleanup0518_2'
p10468
sbsI3951
(iPull
Pull
p10469
(dp10470
g3
S'Next round of cleanup, still about 100 cases remain in `Completable` and `Observable`, but those will most likely conflict with open PRs.'
p10471
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 2'
p10472
sg7
(lp10473
S'Cleanup'
p10474
asg10
I3951
sg11
(lp10475
sg14
S'akarnokd:Cleanup0518_2_1'
p10476
sbsI3958
(iPull
Pull
p10477
(dp10478
g3
S'This PR adds the call to `RxJavaObservableExecutionHook.onCreate()` to the `just()` - `ScalarSynchronousObservable` construction.\r\n\r\nRelated: #2656.'
p10479
sg5
S'1.x: just() construction to call the onCreate execution hook'
p10480
sg7
(lp10481
S'Bug'
p10482
asg10
I3958
sg11
(lp10483
S'Updated javadoc and test.'
p10484
aS':+1:'
p10485
aS':+1:'
p10486
asg14
S'akarnokd:JustHook'
p10487
sbsI3959
(iPull
Pull
p10488
(dp10489
g3
S"This PR adds an overload to `scan` which allows specifying an initial value factory. The initial value factory is invoked for each incoming Subscriber individually and provides a non-shared starting point for the `scan` operation.\r\n\r\nI propose the `scan(Func2 accumulator, Func0 initialFactory)` parameter order because some Java 8+ compilers can't properly disambiguate with `scan(R initialValue, Func2 accumulator)`, thinking that R can be made `Func0`. \r\n\r\nRelated: #3667"
p10490
sg5
S'1.x: scan with an initial factory callback'
p10491
sg7
(lp10492
S'Enhancement'
p10493
asg10
I3959
sg11
(lp10494
S'Why add the overload if it can be done with defer and scan then?'
p10495
aS'Yep, it can be done. A decision has to be made if this convenience should make it into the library or not, and notify @NiteshKant the outcome in #3667.'
p10496
aS"I'd like to see this overload in, thanks."
p10497
aS"I'm not strong against adding it but not like the idea of the new parameter order. I would give +1 if giving it a better name instead of changing the parameter order. By the way, there is already a `OperatorScan(Func0<R> initialValueFactory, Func2<R, ? super T, R> accumulator)` for this overload so you don't need to use `defer`.\r\n\r\nProbably @benjchristensen should take a look since you removed it before."
p10498
aS"It was removed due to ambiguity as shown in https://github.com/ReactiveX/RxJava/issues/1881#issue-48878398\r\n\r\nAs long as that issue is not recreated, I have nothing against the functionality pursued here. I too don't like solving the overload ambiguity by moving parameter order around. But there is no good solution, it's either that or a new name. "
p10499
aS"As an alternative, I suggest extending `scan`'s javadoc with the example of the defer trick."
p10500
aS"The argument order bothers me as well. I'll close this and post a javadoc update instead."
p10501
asg14
S'akarnokd:ScanInitialFactory'
p10502
sbsI3963
(iPull
Pull
p10503
(dp10504
g3
S'Fixes https://github.com/ReactiveX/RxJava/issues/3679 '
p10505
sg5
S"Composite exception should update cause to match the correct throwable that's first in the chain"
p10506
sg7
(lp10507
S'Bug'
p10508
asg10
I3963
sg11
(lp10509
S'Please add an unit test that shows verifies the expected behavior.'
p10510
aS'Updated'
p10511
aS'@premnirmal This is not correct. I just sent #3977 to fix it. Thanks anyway!'
p10512
aS'Thanks for the contribution. Could you check #3977 and verify it fixes your issue?'
p10513
aS'Thanks @zsxwing , closing'
p10514
asg14
S'premnirmal:composite_exception_cause_fix'
p10515
sbsI3964
(iPull
Pull
p10516
(dp10517
g3
S'This PR removes the `immediate()` scheduler "optimization" from `observeOn` and treats it as a common scheduler. Since `observeOn` has a stable request pattern, this turns it into a rebatching operator. No matter what the downstream requests, the upstream will requests of the specified size (with 25% as low water mark; i.e., replenishment after 75%). Since `immediate` is synchronous, this will run the drain loop, non-reentrant, on the caller thread.\r\n\r\nI found this mode of operation very handy in my Reactive-RPC prototype and a simple streaming echo RPC call; it prevents going unbounded and bloating the message sender threads:\r\n\r\n```java\r\n// remote\r\npublic Observable<Integer> echo(RpcStreamContext<?> ctx, Observable<Integer> in) {\r\n   return in.observeOn(Schedulers.immediate(), 16);\r\n}\r\n\r\n// client\r\napi.echo(Observable.range(1, 100_000)).observeOn(Schedulers.immediate(), 32)\r\n.subscribe(System.out::println, Throwable::printStackTrace);\r\n```\r\n\r\n'
p10518
sg5
S'1.x: observeOn + immediate scheduler to be a request rebatcher'
p10519
sg7
(lp10520
S'Enhancement'
p10521
asg10
I3964
sg11
(lp10522
S'Great! What about adding a method to `Observable` that calls it so this functionality is discoverable? Say `Observable.batchRequests(n)`?'
p10523
aS'That could be a follow-up PR if this gets accepted.'
p10524
aS"Why not just adding a `batchRequests` operator instead of changing the existing behavior? This probably affects some users' applications if they depends on the optimization.\r\n\r\nSecondly, using `observeOn(Schedulers.immediate(), 16)` and assuming how it implements is not reliable. This is not an API contract and it could be changed in any time."
p10525
aS'The alternative requires duplicating code, which triggers more outcry usually...'
p10526
aS'I think you can add a flag (e.g., disallowOptimization) to `OperatorObserveOn` and use it for `batchRequests`.'
p10527
asg14
S'akarnokd:ObserveOnRebatcher'
p10528
sbsI3965
(iPull
Pull
p10529
(dp10530
g3
S'This is an alternative to #3937 to capture worker creation sites for `computation`, `io` and `newThread` schedulers.'
p10531
sg5
S'1.x: add optional tracking of worker creation sites + report it on error'
p10532
sg7
(lp10533
S'Enhancement'
p10534
asg10
I3965
sg11
(lp10535
S"I see potential problem with this solution: if I jump between threads in the Rx chain it looks like I'll loose stacktrace of `subscribe()` call.\r\n\r\n```java\r\nObservable\r\n  .just(value)\r\n  .observeOn(scheduler1)\r\n  .map(funcA())\r\n  .observeOn(scheduler2)\r\n  .map(funcB())\r\n  .subscribe()\r\n```\r\n\r\nIf exception happens in `map(funcB())`, we will have stacktrace pointing to observeOn(scheduler2), not to `observeOn(scheduler1)`.\r\n\r\nLooks like we need to have `ThreadLocal<Throwable>` and use it's value if it exists in `createWorker()` to keep stacktrace while jumping between threads."
p10536
aS'What you are describing is value-origin tracking, not what this and #3937: if a scheduled task crashes, show where the worker has been created, possibly pointing to the assembly site of the sequence.'
p10537
aS"> If exception happens in map(funcB()), we will have stacktrace pointing to observeOn(scheduler2), not to observeOn(scheduler1).\r\n\r\nThe `scheduler2` site is only reported if `funcB` crashes fatally, which is detected only on the `scheduler2`'s thread. Why would it have to report `scheduler1`?"
p10538
asg14
S'akarnokd:WorkerCreationStacktrace'
p10539
sbsI3966
(iPull
Pull
p10540
(dp10541
g3
S'Add `withLatestFrom` operator version that can take 2 to N other sources and combine them with the main source.\r\n\r\nRelated: #3779.'
p10542
sg5
S'1.x: add multi-other withLatestFrom operators'
p10543
sg7
(lp10544
S'Enhancement'
p10545
asg10
I3966
sg11
(lp10546
sg14
S'akarnokd:WithLatestFromMany'
p10547
sbsI3969
(iPull
Pull
p10548
(dp10549
g3
S'This PR fixes the case when operators of pattern `xWith` chained into a long sequence causes `StackOverflowError` because the subscription call-stack gets deep.\r\n\r\nOperators affected and fixes:\r\n\r\n  - `Observable.ambWith()`\r\n  - `Observable.mergeWith()`\r\n  - `Observable.concatWith()`\r\n  - `Observable.startWith()`\r\n  - `Observable.zipWith()`\r\n  - `Completable.ambWith()`\r\n  - `Completable.mergeWith()`\r\n  - `Completable.concatWith()`\r\n  - `Completable.startWith()`\r\n  - `Single.zipWith()`\r\n\r\nThe PR contains some tidy-up of existing functionality and introducing short operators that delegate to the "big" operators for the purpose of identification.\r\n'
p10550
sg5
S'1.x fix long-chained xWith() operator stack overflow'
p10551
sg7
(lp10552
S'Bug'
p10553
asg10
I3969
sg11
(lp10554
S'Long running, unrelated tests fail on travis for hours now.'
p10555
aS"Not sure if this is worth to fix (Hundreds of codes to fix a rare case). For merging tons of Observable, I would expect that the user uses the static array version instead of writing a for-loop. In addition, this won't fix this issue totally. E.g., people can add an operator like this and will still get StackOverflowError.\r\n\r\n```\r\n        Observable<Integer> source = Observable.just(1);\r\n        Observable<Integer> result = source;\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            result = result.mergeWith(source).map(x -> x + 1);\r\n        }\r\n```"
p10556
asg14
S'akarnokd:xWithStackoverflowFix'
p10557
sbsI3971
(iPull
Pull
p10558
(dp10559
g3
S'This is a follow-up on #3964 but with a separate operator on `Observable`.\r\n\r\n'
p10560
sg5
S'1.x: request rebatch operator'
p10561
sg7
(lp10562
S'Enhancement'
p10563
asg10
I3971
sg11
(lp10564
S'@abersnaze, @stealthcode you had some use cases for this, any objections?'
p10565
aS"the reuse of the observeOn is interesting but couldn't it be done without the allocation of a queue?"
p10566
aS"If the downstream request is unbounded and the downstream has caught up then the queue can be skipped. In this case, `observeOn` can't be reused anymore and a custom drain logic has to be implemented.\r\n\r\nOtherwise, the upstream emissions have to be stored temporarily for an underrequesting downstream."
p10567
aS'I know that @abersnaze still had reservations about this. I think that this should not be using `observeOn`.'
p10568
aS"My concern is this - If @abersnaze implemented the batching functionality then why wouldn't we use that? The queue in observeOn scheduling creates a layer of indirection that seems unnecessary. "
p10569
aS'Remember, this started out as a change to `observeOn` to not ignore the `immediate` scheduler but people wanted this behavior exposed behind a proper name.'
p10570
aS'Thanks for reminding me of the context of this work. It seems like we have 2 implementations for the same functionality. I think @abersnaze and I agree that the 2 features of request batching and request valve type functionality could be composed. However I think that using `observeOn` for this functionality is not necessarily the best way to accomplish this. '
p10571
aS"I personally would be okay with either implementation. I think `observeOn` is a nice choice because of the request management but would prefer it more if there wasn't a queue. But realistically I think the choice is fine. \r\n\r\nAlso it's interesting to note that users are gravitating more and more to taking direct control over the `requester-producer` interactions. "
p10572
aS'For example this PR does something similar but exactly n (could be modified to have optional 25%) and without a queue #3781. '
p10573
asg14
S'akarnokd:OperatorRebatch'
p10574
sbsI3974
(iPull
Pull
p10575
(dp10576
g3
S'See #3576 .'
p10577
sg5
S'1.x: add terminal clarification to switchMap operators'
p10578
sg7
(lp10579
S'Documentation'
p10580
asg10
I3974
sg11
(lp10581
sg14
S'akarnokd:SwitchOnNextJavadoc'
p10582
sbsI3975
(iPull
Pull
p10583
(dp10584
g3
S"See #2458.\r\n\r\nThis PR shows a way to implement lifting into a Subject. It is possible to lift on the front and the back side. The main idea is to add behavior to a Subject while presenting it to the outside world still as a Subject.\r\n\r\nI'm not 100% certain the value of this because one has to write operators for this to work (relying on the `rx.internal.operators` is not recommended). The front-side operator can be simpler since it doesn't have to deal with unsubscription and backpressure as the wrapped Subjects don't have that capability on their front anyway."
p10585
sg5
S'1.x: lift into Subject'
p10586
sg7
(lp10587
S'Enhancement'
p10588
asg10
I3975
sg11
(lp10589
S"I'm not convinced either by its value, do you have a example in mind?"
p10590
aS"This was @abersnaze 's long lasting dream from #2458. I thought I give an implementation to see if we want it or #2458 can be closed for good."
p10591
aS"I wouldn't go as far as saying it was a dream of my but it has always bugged me that the type `Subject<T, R>` clearly has an `R` that can be different but there isn't a practical way to change it.  If subject is never intended to be used like that then we should change it to `Subject<T>` in 2.0."
p10592
asg14
S'akarnokd:LiftIntoSubject'
p10593
sbsI3977
(iPull
Pull
p10594
(dp10595
g3
S"The cause of #3679 is we use a wrong Throwable (its cause has been set) to set the cause and `initCause` will throw an exception. Hence, the cause chain is not created correctly. In this PR, it searches the root cause (which doesn't have a cause) and use it to call `initCause`."
p10596
sg5
S'1.x: Use the correct Throwable to set the cause for CompositeException'
p10597
sg7
(lp10598
S'Bug'
p10599
asg10
I3977
sg11
(lp10600
S':+1:'
p10601
asg14
S'zsxwing:fix-3679'
p10602
sbsI3979
(iPull
Pull
p10603
(dp10604
g3
S'This PR removes the remaining `AtomicXFieldUpdater`s from the library because reflection is somewhat problematic on Android.\r\n\r\nThis also deprecates the internal `BackpressureUtils.getAndAddRequest` to indicate `requested` field updater should not be used anymore.'
p10605
sg5
S'1.x: remove remaining field updaters'
p10606
sg7
(lp10607
S'Cleanup'
p10608
asg10
I3979
sg11
(lp10609
S'> BackpressureUtils.getAndAddRequest\r\n\r\nThis is an internal API. Nobody is supposed to use it. Why not just remove it?'
p10610
aS'External, custom operators may still depend on this utility method.'
p10611
aS"> External, custom operators may still depend on this utility method.\r\n\r\nOkey, let's remove it later. :+1:\r\n"
p10612
asg14
S'akarnokd:FieldUpdaterRemove'
p10613
sbsI3980
(iPull
Pull
p10614
(dp10615
g3
S'Added sections from #3935.'
p10616
sg5
S'2.x: Design.md +extension +fusion'
p10617
sg7
(lp10618
S'Documentation'
p10619
asg10
I3980
sg11
(lp10620
S'@akarnokd since the edits are causing all in-line comments to be hidden I\'m posting our discussion on "extension" functionality here. \r\n\r\n> compose() is different from extend because it gives the full base type to the function. Substituting R with Flowable<T> the signature looks like this:\r\n> \r\n> ```java\r\n> public final <U> Flowable<U> compose(Function<? super Flowable<T>, ? extends Publisher<U>> composer);\r\n> ```\r\n\r\nOkay, I would rather only have one method for "extending" functionality? Is that also your goal? In which case we should discuss the merits of compose as a replacement for extend. \r\n\r\nFor comparison I\'m including the signature of extend.\r\n\r\n```java\r\n<O2, X extends Consumable<O2>> X extend(Function<Consumer<O>, X> f)\r\n```\r\n\r\nWhich in the case of a Flowable would be as follows (note that I have replaced the `Consumable<O2>` with `Publisher<U>`)\r\n\r\n```java\r\n<O2, X extends<Publisher<U>> X extend(Function<Consumer<Subscriber<? super T>>, X> f)\r\n```\r\n\r\nSo the only substantial difference between compose and extend is that with compose the function consumes a concrete Flowable type and with extend it consumes an OnSubscribe. \r\n\r\nI think my concern is that the `compose` functions _must_ know the absolute type of the thing that you are converting from (or at least a base class/interface). This makes it more restrictive than what `extend` allows, converting from any variation of a `Flowable` by virtue of unwrapping and accessing the internal callback. So composition functions would be case specific, and would not be reusable for different types of flowable, observable, single, or completable. \r\n\r\nNote that I am **NOT** proposing making conversion functions from a flowable that also work on an observable for instance. What I am proposing is that if you have different variations of an Observable that the same logic could be use to convert it to a different thing. I think that there is the potential for better code reuse with `extend`. Also my intent is that extending functions for the core RxJava types (i.e. the `Flowable`, `Observable`, `Single`, `Completable` and all of there variants which implement their respective `Consumable<S>` for their subscriber/observer type) be written and packaged with RxJava. But this would not be limited to just internal apis as the pattern could be useful for libraries which write their own `Consumable`. '
p10621
aS"My take away from this pull request is that @akarnokd has decided on a plan without communicating it to the other contributors on the project. I would like to hear _much_ more details on how this is to be implemented and I don't think that this PR is the right way to do so. I would prefer to have much better communication with the RxJava Core Committers so that we can try to reach some sort of understanding of our motivations and goals in design. \r\n\r\nWe at Netflix have tried to communicate with a proof of concept and many conversations over PRs and issues to no avail. It seems to me that there are a very significant misalignments in the goals and rationale behind design decisions. \r\n\r\nFor example, I personally do not see a significant benefit in complicating the code to avoid a minority of memory allocations. I am not considering removing the `Operator` interface to save a 1 time allocation. The chances are very good that the JVM will optimize the runtime anyway so multiple allocations wouldn't be a significant overhead. "
p10622
aS"The last 9+ months was quite tedious for me regarding this project and Netflix' behavior: extended periods of inactivity, delayed decision making, extensive gating of contributions and being stuck in local design/thinking choices expressed repeatedly (or argued endlessly) by some. In addition, I simply don't have the capacity give tailored explanations to everybody.\r\n\r\nSuch local thinking is the negligence of allocation count. It might not be an issue on multi-gigabyte Amazon cloud servers, but RxJava has to run on millions of Android devices where memory footprint and allocation does matter.\r\n\r\nThe proof-of-concepts Netflix provided in this regard were too small to be conclusive; they lacked some non-trivial operators and usage examples, with which the compiler ambiguities or coding inconveniences could have been discovered - apparently, me pointing them out is not enough.\r\n\r\nNote that there has been a working RxJava 2.x implementation available as developer preview since September 2015 in the 2.x branch here. Its review never progressed even before this design document was posted by Netflix.\r\n\r\nAs the primary contributor and maintainer of RxJava, I had to start making decisions on my own due to these. The basis for it is the fact that I've been developing *complete* reactive libraries before and during my time with RxJava and accumulated considerable amount experience with all things reactive.\r\n\r\nThe design choices I made for RxJava 2.x are proven in the research project [Reactive-Streams-Commons](https://github.com/reactor/reactive-streams-commons) and in fact forms the basis for the competing library [Reactor-Core](https://github.com/reactor/reactor-core) of Pivotal. Textual descriptions on why can be found in my blog: [RxJava Design Retrospect](http://akarnokd.blogspot.hu/2016/03/rxjava-design-retrospect.html), [Operator Fusion, part 1](http://akarnokd.blogspot.hu/2016/03/operator-fusion-part-1.html) and [part 2](http://akarnokd.blogspot.hu/2016/04/operator-fusion-part-2-final.html).\r\n\r\nThere are two reasons I'm still contributing to RxJava: 1) it's the only proper reactive library for Android and 2) Reactor-Core decided to provide only a subset of operators. However, any of this can change.\r\n\r\nIn conclusion, all I can say is to take this PR, propose alterations to it in a separate PR or leave it."
p10623
aS"I think RxJava core committers team has a lack of cohesion on 2.x designs because there is a lack of communication. @akarnokd we have proposed changes in our comments but you have no patience with our concerns. We have tried reaching out to you by email, instant message, and video chat in the past but you don't seem interested in direct communication outside of Github. Being a part of a team does require a higher level of coordination and communication however I suspect that you have no intention of working with us. \r\n\r\n> run on millions of Android devices where memory footprint and allocation does matter.\r\n\r\nOur goal is to develop a generally applicable library that can be safely and productively used by Android as well as other platforms. @stevegury and I believe that the JVM runtime (even on Android) would optimize the code such that there is little to no difference between the source code optimized implementation and our proposed designs. I think its in the best interest of the RxJava community for the contributors to evaluate different options. \r\n\r\nMy professional work at Netflix uses and depends heavily on RxJava. I _try_ to contribute my professional expertise to RxJava however when I read responses from @akarnokd I perceive a tone of hostility and a lack of interest. Many others at Netflix choose not to contribute to RxJava because it is too difficult to make progress on pull requests. I have not found an efficient way to collaborate with @akarnokd in design or implementation. RxJava is not benefiting in significant ways from Netflix contributions as many of our pull requests are deadlocked in debate or discouraged.\r\n\r\nThere are aspects that we don't understand about this approach and when we reach out to him we are met with what I interpret as avoidance and hostility. I can only conclude that @akarnokd is trying to implement what he thinks is best for the community while avoiding any contribution from Netflix."
p10624
aS"Since this is a design document change only, I'm merging this as is, allowing progress on the code side as well as enabling PRs for further clarifications if necessary.\r\n\r\nI encourage contributors with architectural ideas to make sure their suggested changes actually work out in the context of the entire 2.x codebase. The current 2.x branch contains a working (although outdated) variant and let's anyone experiment within his/her own environment."
p10625
asg14
S'akarnokd:DesignPlus'
p10626
sbsI3981
(iPull
Pull
p10627
(dp10628
g3
S'See #3960 and #3124.'
p10629
sg5
S'1.x: document zip() eagerness'
p10630
sg7
(lp10631
S'Documentation'
p10632
asg10
I3981
sg11
(lp10633
sg14
S'akarnokd:ZipEagerness'
p10634
sbsI3982
(iPull
Pull
p10635
(dp10636
g3
S'This PR adds a comparison benchmark for working with `Observable.just` and `Single.just`.\r\n\r\nResults: (i7 4790, Win 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/15705865/476ebcd2-27f1-11e6-8468-4cd02962f31a.png)\r\n\r\n  - `one`: custom Observable emitting a single item with backpressure\r\n  - `scalar`: `Observable.just(1)`\r\n  - `scalarHidden`: `just(1).asObservable()`\r\n  - `single`: `Single.just(1)`\r\n  - `singleHidden`: wrapping with `Single.create`\r\n  - `plain`: just subscribe\r\n  - `Concat`: use `concatMap` to map it to a scalar (operator not available in Single)\r\n  - `Merge` : use `flatMap` to map it to a scalar/singe\r\n  - `Switch` : use `switchMap` to map it to a scalar (operator not available in Single)\r\n\r\nMy guess is that single is slower because that `Observable.OnSubscribe` vs `Single.OnSubscribe` wrapping game.'
p10637
sg5
S'1.x: benchmark just and Single'
p10638
sg7
(lp10639
S'Performance'
p10640
asg10
I3982
sg11
(lp10641
sg14
S'akarnokd:OneItemPerf'
p10642
sbsI3986
(iPull
Pull
p10643
(dp10644
g3
S"Resolves #3985\r\n\r\nThis adds a `reset()` method to `Schedulers`, with the main benefit being improved testing support. This does slightly tweak the internal API of `Schedulers` to use a `getInstance()` approach to allow lazy init. This way we don't have to replace the singleton instance during `reset()` and allow it to lazily re-evaluate upon next usage. Otherwise, if you change your scheduler hook, you'd always have to make sure you set it before you call `Schedulers.reset()`.\r\n\r\nWill run perf tests overnight in case, I'm not sure how much of a tradeoff moving to an internal `getInstance()` approach costs, if anything.\r\n\r\nCC @zsxwing"
p10645
sg5
S'Add Schedulers.reset() for better testing'
p10646
sg7
(lp10647
S'Enhancement'
p10648
asg10
I3986
sg11
(lp10649
S"I think the failing test might be flaky, it doesn't fail for me locally. "
p10650
aS':+1:'
p10651
aS"Thanks! I don't suppose this could be squeezed into the `requires review` of #3970 could it?"
p10652
aS"That test doesn't fail for me locally, I'm not really sure what do do about it. Any ideas?"
p10653
aS"I've extended the timeout in some tests in PR #3987. Once it appears it was enough, I'll merge that and this PR should work."
p10654
aS'Non need to rebase but to rerun the travis job. Did it for you.'
p10655
aS'Cool, looks like the timeout tweaks worked'
p10656
aS"It's two, and they're largely targeted at testing. I don't think having a reset is bad practice and, like most code, only breaks things if you make poor decisions with it. I could just as easily add a bad scheduling hook or buggy global error handler.\r\n\r\nHaving to otherwise use DI to inject schedulers everywhere gets tedious fast, and inadvertantly discourages people from actually using the conventional static APIs. With this, it can be wrapped up in a nice test rule and enforces a clean state before and after tests. Using the plugins API also allows you to control the schedulers used across modules and 3rd party libraries as well.\r\n\r\nFor me, it's a missing and much needed API. I don't think requiring DI everywhere you use a scheduler just to test is a scalable approach considering how ubiquitous they are. Could you imagine injecting, say, `Timber` everywhere you wanted to use it?\r\n\r\nThat's my speel for why I think this is useful."
p10657
aS'I wonder why people with such testing needs don\'t roll their own global "MySchedulers" class which let\'s them easily switch scheduler types and use that like `observeOn(MySchedulers.forComputation())`. Of course this means you have to remember to use the `Scheduler`-overloaded operators everywhere.'
p10658
aS"I also just copied that doc from the other reset. I don't know that it's as dangerous though, it just forces a re-init. If it's dangerous, it's because resetting rx plugins is dangerous. Since they're not explicitly bound, I wouldn't mind making the doc warning a little less... Severe? :P"
p10659
aS"3rd party libraries don't use your app's global class :/. Plus that case still requires you to hook in a delegate scheduler in tests early enough. We're adding a global scheduler of sorts for background work and still planning to have a reset on the schedulers."
p10660
aS"Libraries should expose the option to customize the `Scheduler` they run on. Do you know a library that doesn't allow such customization?"
p10661
aS"Most, actually. They just use the built-in Schedulers.whatever() or AndroidSchedulers.mainThread(). I don't see how a wrapper with static methods solves this either, you still need some mechanism of resetting the underlying scheduler.\r\n\r\nIs there any harm in allowing reset here to facilitate just having developers go through the standard API?"
p10662
aS"But here's a quick example off the top of my head: https://github.com/mcharmas/Android-ReactiveLocation"
p10663
aS"Otherwise, I think the whole plugin system in RxJava 1.x is getting cumbersome. In 2.x, I did a much simpler and direct approach for overriding stuff.\r\n\r\nFor example, this is how the schedulers get initialized:\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java#L47\r\n\r\nThis is where they are returned:\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java#L57\r\n\r\nChanging what scheduler is returned from Schedulers is easy via\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/plugins/RxJavaPlugins.java#L305\r\n\r\nby adding a function that can wrap or completely replace the scheduler.\r\n\r\nI don't know if Netflix wants 1.2 at all, but if so, I'd be glad to rewrite the plugin system."
p10664
aS"> But here's a quick example off the top of my head: https://github.com/mcharmas/Android-ReactiveLocation\r\n\r\nBut where does it use RxJava schedulers forcefully?"
p10665
aS'Found one: [ReverseGeocodeObservable.java](https://github.com/mcharmas/Android-ReactiveLocation/blob/a82d0ebfc0ccd1acf9667ef82bd2beb2630d41da/android-reactive-location/src/main/java/pl/charmas/android/reactivelocation/observables/geocode/ReverseGeocodeObservable.java)\r\n\r\nThey should have provided a way to customize that scheduler anyway.'
p10666
aS"Not disagreeing that it would be preferable for libraries to expose a way, but in practice I've seen that most do not.\r\n\r\nThe 2.x plugin approach looks nice, though the lockdown bit seems like it imposed the same restrictions that 1.x plugins have. I don't know what the 1.2 plans are, but between having something like this now and waiting for a 1.2 or 2.x release, I'd much rather have a necessary evil now with an eye toward the future. I don't really subscribe to the slippery slope worry considering this is part of what the last one was supposed to help improve.\r\n\r\nIt's not a matter of people not understanding DI, it's that DI is not a scalable solution for this. It's unnecessary tedium and boilerplate, why even have the static API at all if it's not going to be used? Are you going to add DI to rx util libraries?\r\n\r\nBetween getting all library developers to update, waiting for 2.x, rewriting the plugin system, or doing this in a safe way now and banking on 2.x long term, I'd rather have the last option. It works for all cases now and has fairly minimal impact/safety concerns."
p10667
aS'Well let me know what you guys want to do. I feel like this is breaking down over the current plugins API, which we all agree is not perfect. The way I see it, any "`MyPlugins`" approach would still face the same issue in that you\'d need to implement some way of internally delegating. \r\n\r\nTo me, this is a reasonable short-term solution for right now considering 1.2 and 2.x are far off and I think the framework should facilitate use of whatever patterns developers prefer rather than impose them. Would you be agreeable to doing this for now with the long term goal being to revamp the plugins API in the future?\r\n\r\nI\'ve updated the doc as well, since it\'s actually not that dangerous and only causes behavioral changes if the plugin hook has changed (which *is* already documented as such).'
p10668
aS'Also @zsxwing seemed in favor of this change in the issue, do you want to maybe chime in here?'
p10669
aS"While I do agree with Artem/David that a better long term solution here would be to pass in Scheduler objects where needed (setting things up for DI where developers choose it - the scalability of DI isn't the question here) rather than relying on static methods to get them, this PR seems like the best way forward for how things currently work in Rx. There has been lots of discussion elsewhere about how replacing a Scheduler for testing is very painful if you make use of the standard Schedulers static methods to get your Scheduler instances, and the reset methods for the plugin hook only work halfway because of the current static caching behavior. Because the current reset-for-testing functionality is fundamentally broken, I strongly recommend accepting this PR to fix it, and take this discussion into account for the design of upcoming versions of plugins or developer usage recommendations."
p10670
aS'May sound crazy, but what about marking `reset()` as `@Deprecated` with explanation of better ways?'
p10671
aS"I think `@Experimental` with a doc explaining that the API will be revamped in the future would make more sense. I don't have strong feelings for or against `@Deprecated` though and can switch to that if others want. Anything to help move this PR along :)"
p10672
aS"`@Deprecated` will produce compile warning and will be visible in IDE, pretty sure most of the people who will use `Schedulers.reset()` will copy-paste from SO or some blog post which will arrive as soon as we merge/release this and won't even know that it's `@Experimental`.\r\n\r\n// I'm not blocking PR if that matters."
p10673
aS'When you put it that way, I think I agree.'
p10674
aS"Don't deprecate it."
p10675
aS">Do we really expect people to accidentally use this and be surprised?\r\n\r\nHave seen/helped people asking how to solve problems after applying scheduler hooks for testing, they didn't realize (mostly) how it can break things.\r\n\r\n`create()` is local evil, it doesn't break global state. \r\n\r\nAlternative solution would be to move APIs like `create()`, `reset()` and so on to `rx.Unsafe`, like Java, Rust and so on, it's there but use it at your own risk."
p10676
asg14
S'hzsweers:z/reset'
p10677
sbsI3987
(iPull
Pull
p10678
(dp10679
g3
S'Sometimes, the heavy Travis CI load (or throttling) makes a few tests fail with timeout. This increases the timeout for some of them to reduce the likelihood.'
p10680
sg5
S'Add more time to certain tests that failed under heavy CI load'
p10681
sg7
(lp10682
S'Test-Failures'
p10683
asg10
I3987
sg11
(lp10684
sg14
S'akarnokd:MoreTimeToTests'
p10685
sbsI3991
(iPull
Pull
p10686
(dp10687
g3
S'Hi,\r\n\r\nBased on the PR #3488 and the issue #3459 \r\nI thought all the instance of Atomic*FieldUpdater has been removed and replaced.'
p10688
sg5
S'Remove instance of Atomic*FieldUpdater'
p10689
sg7
(lp10690
sg10
I3991
sg11
(lp10691
S'This was already changed in #3979.'
p10692
asg14
S'lucas34:pr_atomicfieldupdater'
p10693
sbsI3994
(iPull
Pull
p10694
(dp10695
g3
g53
sg5
S'Dummy commit'
p10696
sg7
(lp10697
sg10
I3994
sg11
(lp10698
S'Sorry opened this in the wrong place'
p10699
asg14
S'hzsweers:z/travistest'
p10700
sbsI3996
(iPull
Pull
p10701
(dp10702
g3
S'The reset shut down all the main schedulers and the helper pools, causing the failure in #3993 .\r\n\r\n@hzsweers, you were right with the need for the instance-shutdown method.'
p10703
sg5
S'1.x: fix reset() shutting down everything other than the schedulers'
p10704
sg7
(lp10705
S'Bug'
p10706
asg10
I3996
sg11
(lp10707
sg14
S'akarnokd:Lifecyclefix'
p10708
sbsI4001
(iPull
Pull
p10709
(dp10710
g3
S"For some cases, `Observable.distinctUntilChanged(keySelector)` isn't enough. For example, when data consists of 2+ objects with ID, you cannot simply summarize them and use it as a key. Also often there are stream of arrays of data which can't be distincted easily and generically.\r\nSo I think `Observable.distinctUntilChanged(comparator)` would be helpful. I use kinda tricky implementation, but think, it is okey. Firstly I tried to add ctor to OperatorDistinctUntilChanged(), but it was... too bad.\r\n\r\n**p.s.** I was really confused by \r\n\r\n> If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request (on a branch other than master, 1.x, 2.x, or gh-pages).\r\n\r\nand spent some time trying to create some sort of temporal branch here (newbie me). But finally looked up into PRs and so that it is okey to PR into 1.x. Is it an error in .md-file?"
p10711
sg5
S'1.x: added distinctUntilChanged(comparator)'
p10712
sg7
(lp10713
S'Feature-Request'
p10714
asg10
I4001
sg11
(lp10715
S'Please add unit tests that verify the behavior.'
p10716
aS'How about this one?'
p10717
aS"Sorry for the delay. I remembered there was a discussion about this overload a while ago in #395.\r\n\r\nThe verdict was to not have them and you have to create your own wrapper class with custom `equals` and use it as a keySelector.\r\n\r\nThe decision may be revised, depending on the other's opinions.\r\n\r\n(Otherwise, I would have done it differently, not with that subscriberProvider)."
p10718
aS"See #4034 about how I'd implement this instead (easier shown in code than as a comment). Let me know if you want to adjust your PR."
p10719
aS'By `adjust your PR` you mean copy-paste your implementation as successive commit to existed ones?'
p10720
aS"> By adjust your PR you mean copy-paste your implementation as successive commit to existed ones?\r\n\r\nIf you think that my PR doesn't cover everything you wanted then yes. Otherwise, I leave it to you."
p10721
aS"> If you think that my PR doesn't cover everything you wanted then yes\r\n\r\nNo, I think your PR is just okay and do what I wanted and do it better than mine own :+1: \r\nSo I guess I need to close this PR now?"
p10722
aS"Yes, you can close this. Thanks for your contribution anyway! If you have any further improvement suggestions / PRs for the library don't hesitate to post them. (If you need some hints about operator coding styles and structure, try looking at the common and simpler operators implementations.)"
p10723
asg14
S'Nexen23:OperatorDistinctUntilChanged(comparator)'
p10724
sbsI4005
(iPull
Pull
p10725
(dp10726
g3
S'In the spsc queues, the indexes were written before the actual elements and thus a concurrent `isEmpty` check would report a non-empty queue but a `poll` would still return `null`. The fix swaps the two writes.\r\n\r\nNote that this an inconsistency in the original JCTools code and not the lack of keeping up with it.'
p10727
sg5
S'1.x: fix Spsc queues reporting not empty but then poll() returns null'
p10728
sg7
(lp10729
S'Bug'
p10730
asg10
I4005
sg11
(lp10731
sg14
S'akarnokd:SpscQueueFixes'
p10732
sbsI4007
(iPull
Pull
p10733
(dp10734
g3
S'This PR adds a new, in-between, hook manager class, `RxJavaHooks` that allows runtime hooking of `Observable`, `Single`, `Completable` and `Schedulers` components and is aimed to be more versatile than the `RxJavaPlugins`.\r\n\r\nSince `RxJavaPlugins` is public API, it can\'t be just removed, therefore, `RxJavaHooks` by default delegates to it but that delegation can be completely disabled via `clear()`.\r\n\r\n#### Usage\r\n\r\nCall the `setOn` methods with an appropriate function to manipulate the object being hooked:\r\n\r\n```java\r\nRxJavaHooks.setOnComputationScheduler(s -> Schedulers.immediate());\r\n\r\nRxJavaHooks.setObservableCreate(o -> { System.out.println("Creating: " + o); return o; });\r\n```\r\n\r\nYou can also get the current hooks via the `getOn` methods, allowing chaining multiple hooks if necessary. Changing and retrieving the hooks are thread safe, although it is recommended you change them in quiet times.\r\n\r\nOperator writers should usually not call the `onXXX` methods on `RxJavaHooks` except `RxJavaHooks.onError()`; It is useful when they have to signal a `Throwable` that can\'t be delivered to a `Subscriber`.\r\n\r\nCalling `reset()` will restore the original delegation hooks.\r\n\r\nThis PR also features a way of tracking the assembly locations, that is where `Observable.create()` was invoked internally or externally, via `enableAssemblyTracking`. It changes the creation hooks of all 3 base types by adding an `OnSubscribeOnAssemblyX` wrapper. This operator will replace the Throwable flowing through `onError` and wraps it via the new `AssemblyStackTraceException`. \r\n\r\nBoth the wrapper and the exception contain a string representation of the captured stacktrace, this helps "printing" out that information in a debugging session by simply viewing the field contents.\r\n\r\nThis tracking can be enabled at any time and affects sequences created afterwards. To stop the tracking, use `resetAssemblyTracking` to restore the default delegate callbacks to `RxJavaPlugins` or `clearAssemblyTracking` to restore the empty hooks (only affecting the `onCreate` hooks).\r\n\r\nFor frameworks, the `RxJavaHooks` can be locked down, preventing changing the hooks.\r\n\r\nIf you are using `RxJavaPlugins` existing features, you don\'t have to do anything; tests will work as before.\r\n\r\n#### Performance impact\r\n\r\nA default `RxJavaHooks` incurs a 2-4 level indirection in method calls. `onNext` calls are not affected.\r\n\r\nA clear `RxJavaHooks` incurs a volatile read (very cheap) followed by a branch (predictable). `onNext` calls are not affected.\r\n\r\nA tracking-enabled RxJavaHooks incurs an estimated 1000-3000 cycles overhead for each source creation and operator application. The `AssemblyStackTraceException` itself doesn\'t fill in its own stacktrace but takes only the captured stacktrace string and has mostly the cost of an object allocation. Due to the in-between nature of tracking, `onXXX` calls get through another indirection at each operator. For example, `range(1, 5).map(v -> v).filter(v -> true).subscribe()` will have 3 extra layers (one for each `.`). I believe these are acceptable overheads because the tracking feature is for tracking down crashes and not performance problems.\r\n\r\n#### Discussion\r\n\r\nNot all hook methods have been replicated completely on `RxJavaHooks`. For one, I wanted a minimal working prototype that passes existing tests. Second, those that are left out are not even tested (`onSubscribeError`, `onLift`). If the **concept** of this PR is accepted, those can be added along with their unit tests. Also further Javadoc will be added in the same case.\r\n\r\nNames and structure are not set in stone.'
p10735
sg5
S'1.x: new hook management proposal'
p10736
sg7
(lp10737
S'Discussion'
p10738
aS'Enhancement'
p10739
asg10
I4007
sg11
(lp10740
S'> // More tests would be great, especially for removing parts of stacktrace, but otherwise LGTM.\r\n\r\nDo you have tips how to fake stacktrace for `Thread.currentThread().getStacktrace()` ? Otherwise, there might be other common frameworks that could be filtered, such as Android stuff.'
p10741
aS'Accept `StackTraceElement[]` in the function and pass fake `StackTraceElement[]` in tests?'
p10742
aS"If this PR gets a go ahead, I'll do that."
p10743
aS'@hzsweers PTAL'
p10744
aS"Will look when I can, but probably won't be until next week due to work projects."
p10745
aS'Also it is possible to merge RxJavaHooks into RxJavaPlugins. It would avoid some confusion when switching to 2.x plugins API.'
p10746
aS">Also it is possible to merge RxJavaHooks into RxJavaPlugins. It would avoid some confusion when switching to 2.x plugins API.\r\n\r\nDon't you afraid that it'll make API of `RxJavaPlugins` too confusing?"
p10747
aS'How would it make it more confusing?'
p10748
aS"It's an odd class either way. Plus, I've seen mentioned that few tests actually extend `RxJavaPlugins`. I'm leaning towards having `RxJavaHooks` separate and clearly marked `@Experimental`."
p10749
aS'Updated with more Javadoc.'
p10750
aS'## [Current coverage][cc-pull] is **80.26%**\n\n\n> No coverage report found for **1.x** at 08a2130.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [08a2130...99b256c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/08a2130d3eeee0ec12b9dd496e99c57fc668a496...99b256c05e3a2dd5a5bd22280ac4b294b5189baf\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4007?src=pr'
p10751
aS"I'd like to merge this so we can make progress on the coverage/PMD front (which will indicate what tests are needed for this). Any objections?"
p10752
aS"I'll take a good look at it today if you don't mind waiting a few hours"
p10753
aS'Sure, take your time.'
p10754
aS'Could you include an example of what the output from `AssemblyStackTraceException` looks like, for posterity? Doc might be a bit overkill, but it would be nice to see what it looks like'
p10755
aS"In the IDE, this is what it looks like when watching the exception (its message):\r\n```\r\nrx.exceptions.AssemblyStackTraceException: Assembly trace:\r\n at rx.Observable.create(Observable.java:92)\r\n at rx.Observable.lift(Observable.java:239)\r\n at rx.Observable.map(Observable.java:6321)\r\n at rx.plugins.RxJavaHooksTest.createObservable(RxJavaHooksTest.java:31)\r\n at rx.plugins.RxJavaHooksTest.assemblyTrackingObservable(RxJavaHooksTest.java:45)\r\n at java.lang.reflect.Method.invoke(Method.java:498)\r\nOriginal exception:\r\n```\r\n\r\nIf a test fails, Eclipse's JUnit window can nicely jump to these sources."
p10756
aS'If necessary, we can remove more lines (such as Observable.xxx()) but they might be helpful while diagnosing problems in RxJava itself.'
p10757
aS'All the old hooks and reset still work as this delegates to those by default (their original unit tests still pass).'
p10758
aS'Would it be possible to use this new API for the same effect though? (changing schedulers on the fly, mainly for testing purposes)'
p10759
aS'You can change the schedulers on the fly via `setOnComputationScheduler()`, etc.'
p10760
aS'Sounds good :+1:'
p10761
aS'Thanks for the reviews!'
p10762
asg14
S'akarnokd:RxJavaHooks'
p10763
sbsI4008
(iPull
Pull
p10764
(dp10765
g3
S'Release 1.1.6 CHANGES.md\r\n\r\n:+1: for the full release.'
p10766
sg5
S'1.x: Release 1.1.6 CHANGES.md'
p10767
sg7
(lp10768
S'Information'
p10769
asg10
I4008
sg11
(lp10770
S':+1:'
p10771
asg14
S'akarnokd:Release_1.1.6_Changes'
p10772
sbsI4011
(iPull
Pull
p10773
(dp10774
g3
S'This PR deprecates `TestObserver` in favor of the richer `TestSubscriber`.\r\n\r\nIn addition, `TestSubscriber` gets 3 new methods and 1 deprecation:\r\n\r\n  - `getCompletions()` to return the onCompleted count as int instead of Notifications\r\n  - `getValueCount()` returns the committed number of onNext events for thread-safe checking of values up to this count\r\n  - `awaitValueCount` repeatedly sleeps up to a timeout and waits till the committed onNext count reaches/passes the expected amount.'
p10775
sg5
S'1.x: Deprecate TestObserver, enhance TestSubscriber a bit'
p10776
sg7
(lp10777
S'Enhancement'
p10778
aS'Test'
p10779
asg10
I4011
sg11
(lp10780
S"Thanks for the feedback. I'm merging this as is and I'm open for PRs if you think `awaitValueCount` should use a different wait strategy."
p10781
asg14
S'akarnokd:TestObserverDeprecate'
p10782
sbsI4014
(iPull
Pull
p10783
(dp10784
g3
S'This documentation answers questions I had while reading it.'
p10785
sg5
S'Add specificity to documentation for AsyncSubject'
p10786
sg7
(lp10787
S'Documentation'
p10788
asg10
I4014
sg11
(lp10789
S"I'd also add if the source terminated with an `onError` (with or without prior `onNext`s) all current and future `Subscriber`s will receive only the error."
p10790
aS':+1:'
p10791
aS'What is the protocol from here on out?'
p10792
aS"Thanks for the contribution. I'll merge this as is. I'll write up my intentions as a lead developer including cases such as this as an example."
p10793
aS'Thanks @DavidMGross ! @hospitalitarian would you like to submit another PR?'
p10794
aS'Yes, I will.  How do you generate marble diagrams?  There are a few more cases that I would like to add.'
p10795
asg14
S'hospitalitarian:patch-1'
p10796
sbsI4018
(iPull
Pull
p10797
(dp10798
g3
S'Release notes: https://docs.gradle.org/2.14/release-notes'
p10799
sg5
S'1.x: Update Gradle to 2.14'
p10800
sg7
(lp10801
S'Build'
p10802
asg10
I4018
sg11
(lp10803
S':+1:'
p10804
aS"Be careful with this, 2.14 is causing some major problems for Android - https://code.google.com/p/android/issues/detail?id=213413\r\n\r\nThey said it's a problem on Gradle's end, so I'd be weary of this update in java projects too."
p10805
asg14
S'artem-zinnatullin:az/gradle-2.14'
p10806
sbsI4019
(iPull
Pull
p10807
(dp10808
g3
S'Make sure there is enough time for the test and the latch is always counted down.\r\n\r\n/cc @artem-zinnatullin '
p10809
sg5
S'1.x: make the latest CompositeSubscription test more robust.'
p10810
sg7
(lp10811
S'Test'
p10812
asg10
I4019
sg11
(lp10813
sg14
S'akarnokd:CompositeSubscriptionTest'
p10814
sbsI4020
(iPull
Pull
p10815
(dp10816
g3
S"This PR adds a default, abstract base class with unsubscription support for `Completable`'s `CompletableSubscriber`.\r\n\r\nPros: direct, slim class\r\n\r\nCons: people probably used `subscriber(Action0)` or `subscribe(Subscriber)` so far.\r\n\r\nRelated: #4017 "
p10817
sg5
S'1.x: add AsyncCompletableSubscriber that exposes unsubscribe()'
p10818
sg7
(lp10819
S'Enhancement'
p10820
asg10
I4020
sg11
(lp10821
sg14
S'akarnokd:AsyncCompletableSubscriber'
p10822
sbsI4021
(iPull
Pull
p10823
(dp10824
g3
g53
sg5
S'Improve unit test for `publish()`'
p10825
sg7
(lp10826
S'Test'
p10827
asg10
I4021
sg11
(lp10828
S"You changed logic but you didn't explain why this is an improvement. Could you elaborate?"
p10829
aS'Publish should only subscribe to the underlying observable once, no matter how many subscribers it has.  This ensures that both subscriptions have taken place when verifying that only one subscription to the underlying observable has happened.'
p10830
aS'Thanks @hospitalitarian, for the explanation as well.'
p10831
asg14
S'hospitalitarian:patch-2'
p10832
sbsI4023
(iPull
Pull
p10833
(dp10834
g3
S'In the current master, `replay` only trucates its buffer if an event is received. This means if a subscriber subscribes between two events, the operator may replay old events. This PR skips those events. The operator is now consistent with the recently updated `ReplaySubject`.\r\n\r\nThe old behavior was somewhat expected by a few unit tests that have been updated.\r\n\r\nRelated: #3917, #3918. '
p10835
sg5
S'1.x: fix timed replay() replaying old data for late subscribers'
p10836
sg7
(lp10837
S'Bug'
p10838
asg10
I4023
sg11
(lp10839
S'Definitely. \r\n\r\n@zsxwing Thoughts?'
p10840
aS':+1: Agreed that this is a bug fix instead of a broken change.'
p10841
aS'Thanks @zsxwing !'
p10842
asg14
S'akarnokd:ReplayNoOldData'
p10843
sbsI4024
(iPull
Pull
p10844
(dp10845
g3
S'Fixes the documentation problem reported in #3721.'
p10846
sg5
S'1.x: update doOnEach(Observer) javadoc'
p10847
sg7
(lp10848
S'Documentation'
p10849
asg10
I4024
sg11
(lp10850
S'Nice improvement :+1:'
p10851
asg14
S'akarnokd:DoOnEachDoc'
p10852
sbsI4026
(iPull
Pull
p10853
(dp10854
g3
S'This PR rephrases the `cache` documentation a bit and adds workaround for stopping and forgetting the cached values.\r\n\r\nRelated: #3007.'
p10855
sg5
S'1.x: expand and explain cache() in more detail'
p10856
sg7
(lp10857
S'Documentation'
p10858
asg10
I4026
sg11
(lp10859
S'Thanks, will look into it before merging this; could be a bug due a pattern they share.'
p10860
aS'Nothing obvious so far, the test passes for me locally when run 1000 times. Will investigate it further through #4028'
p10861
asg14
S'akarnokd:CacheDocFix'
p10862
sbsI4027
(iPull
Pull
p10863
(dp10864
g3
S"The catch around the predicate didn't actually signal the CompositeException.\r\n\r\nDiscovered in #4025"
p10865
sg5
S'1.x: fix Completable.onErrorComplete(Func1) not relaying function crash'
p10866
sg7
(lp10867
S'Bug'
p10868
asg10
I4027
sg11
(lp10869
S':+1:'
p10870
asg14
S'akarnokd:CompletableOnErrorCompleteFix'
p10871
sbsI4030
(iPull
Pull
p10872
(dp10873
g3
S'This is the first step towards the new architecture where operator implementations are themselves of the base type instead of a 2-3 layer indirection as in 1.x.\r\n\r\nThis PR removes the instance field `onSubscribe` from the base reactive classes and introduces `subscribeActual` to be overridden with the custom operator logic now on. Existing operators are still working through the classical OnSubscribe/Lift indirection and will be updated in subsequent PRs.\r\n\r\nNaming and existence of `subscribeActual` is up for (post-merge) discussion. To recap, the method is needed so that the default `subscribe` method can be made final and ensure plugin hooks can be called (once available). The method is protected and only affects operator implementors that chose to extend the base reactive classes directly. \r\n\r\nThe alternative is to leave `subscribe` abstract and add a hook to every operator method (for example, see [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L50) and [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L162).'
p10874
sg5
S'2.x: first step switching to the reduced-allocation architecture'
p10875
sg7
(lp10876
S'Enhancement'
p10877
asg10
I4030
sg11
(lp10878
S'lgtm :+1:'
p10879
asg14
S'akarnokd:ArchitectureChange'
p10880
sbsI4031
(iPull
Pull
p10881
(dp10882
g3
S"This PR updates the readme and changes the group ID.\r\n\r\nI'm going to merge this and hope the new group id shows up at https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/ (may take several attempts, depending on how cooperative the nebula plugin is.)"
p10883
sg5
S'2.x: Update groupID and readme.md'
p10884
sg7
(lp10885
S'Build'
p10886
asg10
I4031
sg11
(lp10887
S'Seems to work: https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/rxjava2/rxjava/'
p10888
asg14
S'akarnokd:NewGroupID'
p10889
sbsI4034
(iPull
Pull
p10890
(dp10891
g3
S'Alternative implementation to #4001.'
p10892
sg5
S'1.x: distinctUntilChanged with direct value comparator - alternative'
p10893
sg7
(lp10894
S'Feature-Request'
p10895
asg10
I4034
sg11
(lp10896
S'lgtm :+1:'
p10897
aS'Thanks Jake for the review!'
p10898
asg14
S'akarnokd:DistinctUntilChangedComparator'
p10899
sbsI4036
(iPull
Pull
p10900
(dp10901
g3
S'As discussed in #4035 with @akarnokd '
p10902
sg5
S'1.x: Added zip function with Observable array.'
p10903
sg7
(lp10904
S'Feature-Request'
p10905
asg10
I4036
sg11
(lp10906
S'Thanks! Almost forgot, please also add a unit test that verifies this overload works with 0, 1, or a couple of sources. (You can add a unit test that, for example, loops from 0 to 31, generates an array with that many simple sources and checks if all source values actually zipped into the final value.)'
p10907
aS"@akarnokd Sorry for the delay, I just added tests for 0, 1 and multiple array sizes, let me know if that's ok."
p10908
aS':+1:'
p10909
asg14
S'Shyish:4035_zip_of_observable_array'
p10910
sbsI4038
(iPull
Pull
p10911
(dp10912
g3
g53
sg5
S'Fix typos in NullFunction javadoc'
p10913
sg7
(lp10914
S'Documentation'
p10915
asg10
I4038
sg11
(lp10916
S'Thanks!'
p10917
asg14
S'bgogetap:typos'
p10918
sbsI4039
(iPull
Pull
p10919
(dp10920
g3
S'  - Fixes to Javadoc warnings\r\n  - Type arguments\r\n  - Missing descriptions'
p10921
sg5
S'1.x: add missing javadoc elements, fix some descriptions'
p10922
sg7
(lp10923
S'Documentation'
p10924
asg10
I4039
sg11
(lp10925
S'Fixed, @artem-zinnatullin .'
p10926
aS'Thanks @stevegury & @artem-zinnatullin \r\n\r\n@DavidMGross let me know if you are okay with the update.'
p10927
asg14
S'akarnokd:Cleanup0620'
p10928
sbsI4041
(iPull
Pull
p10929
(dp10930
g3
S"This PR updates the `Observable` method signatures to accept `ObservableConsumable`, similar to how `Flowable` methods accept `Publisher`.\r\n\r\nThe architecture switch may take a couple of more PRs. I'll try to limit the change amount in each."
p10931
sg5
S"2.x: Update Observable's ops to work with ObservableConsumable"
p10932
sg7
(lp10933
S'Information'
p10934
asg10
I4041
sg11
(lp10935
sg14
S'akarnokd:ConsumableIn'
p10936
sbsI4042
(iPull
Pull
p10937
(dp10938
g3
S'Update to `Completable` and `Single` to use `CompletableConsumable` and `SingleConsumable` as input.'
p10939
sg5
S'2.x: Use XConsumable in Completable and Single'
p10940
sg7
(lp10941
S'Information'
p10942
asg10
I4042
sg11
(lp10943
sg14
S'akarnokd:SingleCompletableUseBaseType'
p10944
sbsI4043
(iPull
Pull
p10945
(dp10946
g3
S'  - Moved the operators of Completable into their respective classes. Updated them to extend `Completable` directly.\r\n  - Fixed a large set of inconsistend `Disposable` management among the `Observable` operators.'
p10947
sg5
S'2.x: factor out Completable ops, unify disposed markers'
p10948
sg7
(lp10949
S'Information'
p10950
asg10
I4043
sg11
(lp10951
sg14
S'akarnokd:SingleCompletableDirect'
p10952
sbsI4045
(iPull
Pull
p10953
(dp10954
g3
S'`Single` operators factored out and made them extend `Single` directly. Added missing headers.'
p10955
sg5
S'2.x: Single operators factored out, headers added'
p10956
sg7
(lp10957
S'Information'
p10958
asg10
I4045
sg11
(lp10959
sg14
S'akarnokd:SingleFactoredOutOps'
p10960
sbsI4046
(iPull
Pull
p10961
(dp10962
g3
S'This is an example built in my repo: https://codecov.io/gh/zsxwing/RxJava/'
p10963
sg5
S'1.x: Publish code coverage results to codecov.io'
p10964
sg7
(lp10965
S'Build'
p10966
asg10
I4046
sg11
(lp10967
S'## [Current coverage][cc-pull] is **80.32%**\n\n\n> No coverage report found for **1.x** at b8bccd9.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b8bccd9...af876b9][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b8bccd981cf663ba14238839c39a92ebdb0b1233...af876b998608bc487d7ce9072fc7ef7748511357\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4046?src=pr'
p10968
aS':+1:'
p10969
aS'PR for 2.x is on the way :)'
p10970
asg14
S'zsxwing:code-coverage'
p10971
sbsI4048
(iPull
Pull
p10972
(dp10973
g3
S'Same as #4046 except the badge link.'
p10974
sg5
S'2.x: Publish code coverage results to codecov.io'
p10975
sg7
(lp10976
S'Build'
p10977
asg10
I4048
sg11
(lp10978
S'## [Current coverage][cc-pull] is **69.61%**\n\n\n> No coverage report found for **2.x** at 95febf4.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [95febf4...94274ba][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/95febf4a68da221ded321669e95aa619c6a40b27...94274ba1c534e8d7dff1c867621ded32addeed03\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4048?src=pr'
p10979
aS':+1:'
p10980
aS'@artem-zinnatullin which button is for commits status check?'
p10981
aS"@zsxwing they've recently made major update and moved most of the settings to `codecov.yml`, looks like commit status check is now also lives there: https://codecov.io/docs#yaml_default_commit_status"
p10982
aS"> Codecov will enable three unique commit statuses by default\r\n\r\n@artem-zinnatullin I think it's enabled already."
p10983
aS"@zsxwing hm, but I don't see status checks from Codecov on GitHub, only report from Travis. Did you give required permissions to Codecov on GitHub? Probably configuration of ReactiveX organization does not allow transparent access to repos for apps authorized by its members."
p10984
aS'@artem-zinnatullin Figured it out. Need some admin to click the `Create New Webhook` button in this page: https://codecov.io/gh/ReactiveX/RxJava/settings. @benjchristensen or @abersnaze can do it.'
p10985
aS'Yeah, thanks @zsxwing.\r\n\r\n@abersnaze can you please allow Codecov to post commit statuses to the project like Travis is doing now? https://codecov.io/gh/ReactiveX/RxJava/settings\r\n\r\nThis will ensure that coverage fail (significant decrease/etc) is visible on the [Pull Requests list page](https://github.com/ReactiveX/RxJava/pulls) and will block/mark_as_yellow the merge button.'
p10986
asg14
S'zsxwing:code-coverage-2.x'
p10987
sbsI4049
(iPull
Pull
p10988
(dp10989
g3
S'Relatively straightforward, although manual an tedious, refactoring of the Flowable operators. The number of files is this large because for consistency, the tests have been renamed as well.'
p10990
sg5
S'2.x: make Flowable operators extend Flowable directly to reduce allocation'
p10991
sg7
(lp10992
S'Information'
p10993
asg10
I4049
sg11
(lp10994
S'## [Current coverage][cc-pull] is **69.51%**\n> Merging [#4049][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.05%**\n\n```diff\n@@                2.x      #4049   diff @@\n==========================================\n  Files           386        386          \n  Lines         27334      27579   +245   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4440       4476    +36   \n==========================================\n+ Hits          19015      19171   +156   \n- Misses         6335       6413    +78   \n- Partials       1984       1995    +11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c566054...d6725c4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c566054c6ab90491cefa4f10cbff3624141ce170...d6725c40e834ff298f231c954bab5ae74d263989\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4049?src=pr'
p10995
asg14
S'akarnokd:FlowableDirect'
p10996
sbsI4050
(iPull
Pull
p10997
(dp10998
g3
S"  - update to JUnit 4.12\r\n  - remove deprecated use of `junit.framework.Assert`\r\n  - update to Mockito 1.10.19\r\n  - Notification.accept() now uses switch (note that Jacoco can't properly cover enum switches as it only sees the default and impossible path is not taken).\r\n  - in `Scheduler.schedulePeriodically`, move the unsubscribe check after the action to prevent unnecessary schedule of the next iteration.\r\n  - remove the inner counted loop from `SerializedObserver` as being unnecessary\r\n  - increate timeout in `OperatorSwitchTest`\r\n  - add `CompletableSubscriberTest`\r\n  - extend `Scheduler`, `SerializedObserver`, "
p10999
sg5
S'1.x: fixes and coverage improvements'
p11000
sg7
(lp11001
S'Cleanup'
p11002
aS'Test'
p11003
asg10
I4050
sg11
(lp11004
S'## [Current coverage][cc-pull] is **80.55%**\n> Merging [#4050][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.17%**\n\n```diff\n@@                1.x      #4050   diff @@\n==========================================\n  Files           253        253          \n  Lines         16478      16476     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2500       2495     -5   \n==========================================\n+ Hits          13244      13272    +28   \n+ Misses         2341       2321    -20   \n+ Partials        893        883    -10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [535fb75...0daa9f7][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b...0daa9f78c98d87c1206491f1ce1f3d516835e1ab\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4050?src=pr'
p11005
asg14
S'akarnokd:Coverage0620_1'
p11006
sbsI4051
(iPull
Pull
p11007
(dp11008
g3
S"Adding the backpressure support to `ReplaySubject` exposed a race condition around the `caughtUp` optimization.\r\n\r\nThe problem occurs when the source thread has caught up after `drain()` returned true but at the same time, a concurrent `drain()` starts running (due to a subscribe() process finishing or requesting on top of the previous `Long.MAX_VALUE`). This concurrent drain may think the replay hasn't started yet (by finding `rp.node` null) or seeing that the buffer has more elements (that may get double emitted).\r\n\r\nThe current solution is to remove this optimization until we come up with a correct optimization.\r\n\r\nRelated: #4028."
p11009
sg5
S'1.x: fix ReplaySubject anomaly around caughtUp by removing that optimization'
p11010
sg7
(lp11011
S'Bug'
p11012
asg10
I4051
sg11
(lp11013
S'## [Current coverage][cc-pull] is **80.49%**\n> Merging [#4051][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.11%**\n\n```diff\n@@                1.x      #4051   diff @@\n==========================================\n  Files           253        253          \n  Lines         16478      16469     -9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2500       2491     -9   \n==========================================\n+ Hits          13244      13256    +12   \n+ Misses         2341       2331    -10   \n+ Partials        893        882    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [535fb75...788f3bd][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b...788f3bd94a7756187ec32a870b6900d6c784454f\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4051?src=pr'
p11014
asg14
S'akarnokd:ReplaySubjectCaughtUpFix'
p11015
sbsI4053
(iPull
Pull
p11016
(dp11017
g3
S'Closes #4052.'
p11018
sg5
S'2.x: Convert SchedulerSupport annotation to accept a string value.'
p11019
sg7
(lp11020
S'Enhancement'
p11021
asg10
I4053
sg11
(lp11022
S'## [Current coverage][cc-pull] is **69.58%**\n> Merging [#4053][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4053   diff @@\n==========================================\n  Files           386        385     -1   \n  Lines         27579      27571     -8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4476       4476          \n==========================================\n+ Hits          19151      19186    +35   \n+ Misses         6424       6381    -43   \n  Partials       2004       2004          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [113eeeb...90dc0e6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/113eeeb2c3e732fce96945304b8a3e27cc3ea7cc...90dc0e64f68c924870cc6bac9995405664b85c72\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4053?src=pr'
p11023
aS"I meant to include in the PR description that I removed the `SINGLE` value. It was unused and the Javadoc didn't make it clear as to what the exact usage would be anyway."
p11024
aS'No problem. Can be added later if necessary, although `SingleScheduler` is not (planned to be) a default for any operators right now.'
p11025
asg14
S'JakeWharton:jw/scheduler-support-string'
p11026
sbsI4055
(iPull
Pull
p11027
(dp11028
g3
g53
sg5
S'2.x: Update conversion method name to reflect new base type names.'
p11029
sg7
(lp11030
S'Cleanup'
p11031
asg10
I4055
sg11
(lp11032
S'## [Current coverage][cc-pull] is **69.53%**\n\n\n> No coverage report found for **2.x** at 287286e.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [287286e...b59fb93][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/287286e39fcdda7198d91b38184203537e794a9b...b59fb93c43840b2d8ea60e9cfb247c2153d1856a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4055?src=pr'
p11033
asg14
S'JakeWharton:jw/to-flowable'
p11034
sbsI4058
(iPull
Pull
p11035
(dp11036
g3
S'A lot of operators contained their own marker instance and class definition of Disposable or Subscription. This changes almost all of them to use the shared instance provided by their respective helper class. Some duplication still exists but can be cleaned up in a subsequent change.'
p11037
sg5
S'Use DisposableHelper and SubscriptionHelper to reduce duplication.'
p11038
sg7
(lp11039
S'Bug'
p11040
aS'Enhancement'
p11041
asg10
I4058
sg11
(lp11042
S"There's some actual bug fixes in here too. More than once an AtomicReference was being compared against a Disposable/Subscription using identity without calling get()."
p11043
aS'## [Current coverage][cc-pull] is **69.70%**\n> Merging [#4058][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.13%**\n\n```diff\n@@                2.x      #4058   diff @@\n==========================================\n  Files           385        384     -1   \n  Lines         27571      27148   -423   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4476       4355   -121   \n==========================================\n- Hits          19182      18924   -258   \n+ Misses         6388       6293    -95   \n+ Partials       2001       1931    -70   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [287286e...fa6d9e4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/287286e39fcdda7198d91b38184203537e794a9b...fa6d9e4529f8d824c710410f3a1a5924f82fd5e6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4058?src=pr'
p11044
aS"Maybe I made that up. I can't see them now. It's late..."
p11045
aS':+1: Thanks for this heroic work!'
p11046
asg14
S'JakeWharton:jw/helpers'
p11047
sbsI4059
(iPull
Pull
p11048
(dp11049
g3
S'Follow up to #4058 .'
p11050
sg5
S'2.x: cleanup a few additional SubscriptionHelper locations'
p11051
sg7
(lp11052
S'Cleanup'
p11053
asg10
I4059
sg11
(lp11054
S'## [Current coverage][cc-pull] is **69.89%**\n> Merging [#4059][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4059   diff @@\n==========================================\n  Files           384        384          \n  Lines         27148      27143     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4354     -1   \n==========================================\n+ Hits          18963      18972     +9   \n+ Misses         6272       6251    -21   \n- Partials       1913       1920     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e84651e...fc39286][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e84651e5289a43872ba5c64a5ca705102851da92...fc39286c8b870ceb118dcb0db0848a6f1119cce1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4059?src=pr'
p11055
asg14
S'akarnokd:SubscriptionCleanup'
p11056
sbsI4060
(iPull
Pull
p11057
(dp11058
g3
S"  - update to JUnit 4.12\r\n  - remove deprecated use of `junit.framework.Assert`\r\n  - update to Mockito 1.10.19\r\n  - Notification.accept() now uses switch (note that Jacoco can't properly cover enum switches as it only sees the default and impossible path is not taken).\r\n  - in `Scheduler.schedulePeriodically`, move the unsubscribe check after the action to prevent unnecessary schedule of the next iteration.\r\n  - remove the inner counted loop from `SerializedObserver` as being unnecessary\r\n  - increate timeout in `OperatorSwitchTest`\r\n  - add `CompletableSubscriberTest`\r\n  - extend `Scheduler`, `SerializedObserver`, "
p11059
sg5
S'1.x: coverage improvements, small adjustments'
p11060
sg7
(lp11061
S'Cleanup'
p11062
asg10
I4060
sg11
(lp11063
S'## [Current coverage][cc-pull] is **80.62%**\n> Merging [#4060][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4060   diff @@\n==========================================\n  Files           254        254          \n  Lines         16499      16497     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2497       2492     -5   \n==========================================\n+ Hits          13290      13300    +10   \n+ Misses         2325       2316     -9   \n+ Partials        884        881     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [161dbef...a86d9db][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/161dbef61abc57aed43ef1b09737e9dfc8340d3c...a86d9dbe223053cf4b8abeefb578719de68b22c4\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4060?src=pr'
p11064
asg14
S'akarnokd:Coverage0622'
p11065
sbsI4062
(iPull
Pull
p11066
(dp11067
g3
S'This PR adds the missing `package-info.java` files to the public packages.\r\n\r\n(http://reactivex.io/RxJava/javadoc/ looks awkward with all those empty descriptions).'
p11068
sg5
S'1.x: add package-info.java to the public packages'
p11069
sg7
(lp11070
S'Documentation'
p11071
asg10
I4062
sg11
(lp11072
S'## [Current coverage][cc-pull] is **80.52%**\n> Merging [#4062][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4062   diff @@\n==========================================\n  Files           254        254          \n  Lines         16499      16538    +39   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2497       2510    +13   \n==========================================\n+ Hits          13290      13318    +28   \n- Misses         2325       2333     +8   \n- Partials        884        887     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [161dbef...13bbc5c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/161dbef61abc57aed43ef1b09737e9dfc8340d3c...13bbc5c530729facaf6878a2428a076f7ddb4988\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4062?src=pr'
p11073
aS'Updated.'
p11074
aS'Merging. Let me know if the text needs some other fixes.'
p11075
asg14
S'akarnokd:PackageInfos'
p11076
sbsI4063
(iPull
Pull
p11077
(dp11078
g3
S'Replacement for #3959.'
p11079
sg5
S'1.x: scan & reduce give javadoc about unsharing the initialValue'
p11080
sg7
(lp11081
S'Documentation'
p11082
asg10
I4063
sg11
(lp11083
S'## [Current coverage][cc-pull] is **80.52%**\n> Merging [#4063][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4063   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13323      13317     -6   \n- Misses         2329       2334     +5   \n- Partials        886        887     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [54eeaca...1374d68][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/54eeaca04c8b36785971a9a573cb4c185ab0c974...1374d68edd24b8d46d157637aa2843ae64ac714d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4063?src=pr'
p11084
aS'Merging this to not get in conflict with other PRs targeting `Observable`.'
p11085
asg14
S'akarnokd:ScanDefer'
p11086
sbsI4064
(iPull
Pull
p11087
(dp11088
g3
S'As discussed in #3164\r\n\r\nRight now there are 10243 PMD rule violations. \r\n\r\nFor now I activated all checks though it is recommend to disable some of them.'
p11089
sg5
S'1.x: Add PMD'
p11090
sg7
(lp11091
S'Build'
p11092
asg10
I4064
sg11
(lp11093
S"I'm not against adding these checks, however, I see these problems:\r\n\r\n  - rule violations doesn't allow running the tests\r\n  - the build report is on the Travis server and thus not accessible\r\n\r\nI don't want the rule violations to block merging the PRs but rather consider them as warnings, just like the coverage tests"
p11094
aS"+1 to not fail the build for now, @vanniktech let's try to apply only useful warnings and remove all false-positives/non-needed.\r\n\r\n"
p11095
aS"Rules to disable:\r\n\r\n  - CommentSize\r\n  - CommentRequired - other tools will take care of this\r\n  - LocalVariableCouldBeFinal\r\n  - MethodArgumentCouldBeFinal\r\n  - LawOfDemeter\r\n  - BeanMembersShouldSerialize\r\n  - AbstractNaming\r\n  - AtLeastOneConstructor\r\n  - ShortVariable\r\n  - LongVariable\r\n  - EmptyMethodInAbstractClassShouldBeAbstract\r\n  - AvoidFieldNameMatchingTypeName\r\n  - ConfusingTernary\r\n  - CollapsibleIfStatements (maybe leave?)\r\n  - AvoidUsingVolatile - this is a concurrency library after all\r\n  - DefaultPackage\r\n  - AvoidCatchingThrowable we have an error handling convention of throwIfFatal + signal otherwise\r\n  - AvoidInstantiatingObjectsInLoops\r\n  - OnlyOneReturn\r\n  - TooManyMethods\r\n  - AvoidReassigningParameters - oddly, reassigning avoids JIT problems around register allocation\r\n  - GodClass\r\n  - CompareObjectsWithEquals - we have reference equality checks deliberately\r\n  - NullAssignment - ours are there for GC support\r\n  - UseVarargs - Java 6 target\r\n  - AvoidFieldNameMatchingMethodName\r\n  - CyclomaticComplexity - unavoidable\r\n  - AssignmentInOperand - looks concise and rarely ambiguous\r\n  - StdCyclomaticComplexity\r\n  - CallSuperInConstructor\r\n  - ModifiedCyclomaticComplexity\r\n  - AvoidLiteralsInIfCondition - to many false positives, such as checking a special array.length\r\n  - NPathComplexity\r\n  - AvoidDuplicateLiterals - reports arguments to `@SuppressWarnings`!\r\n  - ExcessivePublicCount\r\n  - ExcessiveClassLength\r\n  - ShortClassName\r\n  - UselessParentheses - I'd rather have these to avoid first-look ambiguity\r\n  - GenericsNaming\r\n  - DontImportSun - affects only UnsafeAccess though\r\n  - AvoidDeeplyNestedIfStmts\r\n  - ExcessiveMethodLength\r\n  - ArrayIsStoredDirectly - few places, all acceptable\r\n  - TooManyFields\r\n  - AvoidThrowingNullPointerException - established convention\r\n  - ExcessiveParameterList\r\n  - DoNotUseThreads\r\n\r\nWith these disabled, I have around 500 violations that can be managed.\r\n  "
p11096
aS'Exported: https://gist.github.com/akarnokd/29e988794cb821452ff0fca8edb34c3d'
p11097
aS'@akarnokd should I manually disable them or use the configuration from the file you uploaded?'
p11098
aS"I guess you don't want to walk through my list when you could just use the config file."
p11099
aS"This PMD doesn't like the rule:\r\n\r\n```\r\n[ant:pmd] net.sourceforge.pmd.RuleSetNotFoundException: Can't find resource 'rulesets/ecmascript/basic.xml' for rule 'AssignmentInOperand'.  Make sure the resource is a valid file or URL and is on the CLASSPATH. Here's the current classpath: \r\n```"
p11100
aS'Now it seems like Travis kills our gradle :('
p11101
aS'Error 137 is typically due to out-of-memory situation'
p11102
aS'Did some experiments in my own: #4068. Should print some of the violations into the build log.'
p11103
aS'Yeah also yours seems to be running on Travis. If you want you can close this one in favor of #4068'
p11104
aS'Sure, thanks for your experiments!'
p11105
asg14
S'vanniktech:1.x_pmd'
p11106
sbsI4065
(iPull
Pull
p11107
(dp11108
g3
S'The PMD tool in local IDE tends to create this custom file. Add a rule to ignore it.'
p11109
sg5
S'1.x: ignore .pmd file in root directory'
p11110
sg7
(lp11111
S'Cleanup'
p11112
asg10
I4065
sg11
(lp11113
S'How about also adding `local.properties`?'
p11114
aS"Isn't that Android specific?"
p11115
aS"I get it when I'm opening the project via AS so yes could be."
p11116
aS"Sure. I'm merging this so please post a separate PR as I'm into something else right now."
p11117
asg14
S'akarnokd:GitIgnorePMD'
p11118
sbsI4066
(iPull
Pull
p11119
(dp11120
g3
g53
sg5
S'1.x: Ignore local.properties file'
p11121
sg7
(lp11122
S'Cleanup'
p11123
asg10
I4066
sg11
(lp11124
S':+1:'
p11125
aS'## [Current coverage][cc-pull] is **80.49%**\n> Merging [#4066][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                1.x      #4066   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13328      13312    -16   \n- Misses         2324       2336    +12   \n- Partials        886        890     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [829a0ed...6e4b168][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/829a0eda6647b4b64b53918110c2b5d5c3b2f1ec...6e4b168a8eea33e0949da342e674231bd6bb0cd5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4066?src=pr'
p11126
asg14
S'vanniktech:1.x_ignore_localproperties'
p11127
sbsI4068
(iPull
Pull
p11128
(dp11129
g3
S"This PR adds a PMD plugin to the build process to check a set of coding rules.\r\n\r\nAt this point, I don't think rule violations should fail the build.\r\n\r\nUnfortunately, I don't know about a service, like codecov-io, that could post the check results as comments under a PR, therefore, the current build just prints the first ~100 violations into the build log:\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L240\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L5508\r\n"
p11130
sg5
S'1.x: Add PMD code checking tool to the build process'
p11131
sg7
(lp11132
S'Build'
p11133
asg10
I4068
sg11
(lp11134
S'## [Current coverage][cc-pull] is **80.62%**\n> Merging [#4068][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4068   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n+ Hits          13322      13334    +12   \n+ Misses         2332       2323     -9   \n+ Partials        884        881     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d477f9c...b67b5c8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d477f9c392d90960671dc883679f2ebeaed86acb...b67b5c8fb01ad08b8d5c9fa2d6af525d487238fc\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4068?src=pr'
p11135
aS'@artem-zinnatullin @zsxwing your thoughts on this?'
p11136
aS'Updated.'
p11137
aS"Should PMD also be added to the 2.x branch? The earlier it's added the earlier warnings could be fixed."
p11138
aS'Sure.'
p11139
asg14
S'akarnokd:PMD'
p11140
sbsI4069
(iPull
Pull
p11141
(dp11142
g3
S'Closes #4056.'
p11143
sg5
S'Remove second type parameter from Subject and FlowProcessor.'
p11144
sg7
(lp11145
S'Enhancement'
p11146
asg10
I4069
sg11
(lp11147
S':+1:'
p11148
asg14
S'JakeWharton:jw/single-type-param'
p11149
sbsI4070
(iPull
Pull
p11150
(dp11151
g3
S"Closes #4057 although doesn't address the name of the class."
p11152
sg5
S'2.x: Merge SerialDisposable and MultipleAssignmentDisposable.'
p11153
sg7
(lp11154
S'Enhancement'
p11155
asg10
I4070
sg11
(lp11156
S'## [Current coverage][cc-pull] is **69.83%**\n> Merging [#4070][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4070   diff @@\n==========================================\n  Files           384        383     -1   \n  Lines         27143      27133    -10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4354       4354          \n==========================================\n- Hits          18963      18948    -15   \n- Misses         6255       6267    +12   \n+ Partials       1925       1918     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4925f6d...607321d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4925f6d601fc093c4f9031e2d7ce673c00af2512...607321dc505bdfd9cfc7412074717e4aa2ecb8b6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4070?src=pr'
p11157
aS"Excellent :+1:\r\n\r\n> although doesn't address the name of the class.\r\n\r\nNo problem."
p11158
asg14
S'JakeWharton:jw/merge-similar-disposable-types'
p11159
sbsI4071
(iPull
Pull
p11160
(dp11161
g3
g53
sg5
S"2.x: Inline last uses of caching DisposableHelper's constant."
p11162
sg7
(lp11163
S'Cleanup'
p11164
asg10
I4071
sg11
(lp11165
S':+1:'
p11166
asg14
S'JakeWharton:jw/disposable-helper'
p11167
sbsI4072
(iPull
Pull
p11168
(dp11169
g3
S'This returns false 100% of the time otherwise.'
p11170
sg5
S'2.x: Dereference atomic ref before identity comparison.'
p11171
sg7
(lp11172
S'Bug'
p11173
asg10
I4072
sg11
(lp11174
S'## [Current coverage][cc-pull] is **69.82%**\n> Merging [#4072][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4072   diff @@\n==========================================\n  Files           384        384          \n  Lines         27143      27143          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4354       4354          \n==========================================\n- Hits          18963      18953    -10   \n- Misses         6255       6271    +16   \n+ Partials       1925       1919     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4925f6d...455e27e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4925f6d601fc093c4f9031e2d7ce673c00af2512...455e27ec11379ccc112fdb6f47aedb3528996ea6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4072?src=pr'
p11175
aS':+1:'
p11176
asg14
S'JakeWharton:jw/dereference'
p11177
sbsI4074
(iPull
Pull
p11178
(dp11179
g3
g53
sg5
S'2.x: Use more DisposableHelper and SubscriptionHelper in operators.'
p11180
sg7
(lp11181
S'Cleanup'
p11182
asg10
I4074
sg11
(lp11183
S':+1:'
p11184
asg14
S'JakeWharton:jw/more-helpers'
p11185
sbsI4076
(iPull
Pull
p11186
(dp11187
g3
S'* Use BooleanDisposable for Runnables.\r\n* Change BooleanDisposable to use null for disposed instead of keeping a marker instance.\r\n* Eliminate static factory for CompositeDisposable since its constructors are already public.'
p11188
sg5
S'2.x: Some small tweaks to Disposables.'
p11189
sg7
(lp11190
S'Enhancement'
p11191
asg10
I4076
sg11
(lp11192
S':+1:'
p11193
asg14
S'JakeWharton:jw/small-disposable-tweaks'
p11194
sbsI4077
(iPull
Pull
p11195
(dp11196
g3
S'The links for `@Beta` and `@Experimental` in the `README.md` point to the master branch. These URLs yield 404 not found when clicked. '
p11197
sg5
S'Annotation links in README.md yield 404 error'
p11198
sg7
(lp11199
S'Documentation'
p11200
asg10
I4077
sg11
(lp11201
S':+1:'
p11202
aS'## [Current coverage][cc-pull] is **80.53%**\n> Merging [#4077][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4077   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13322      13319     -3   \n- Misses         2332       2333     +1   \n- Partials        884        886     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d477f9c...fd266ae][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d477f9c392d90960671dc883679f2ebeaed86acb...fd266aed9712763ac2c6298e9d3b9c856a23eaf3\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4077?src=pr'
p11203
asg14
S'maxthomas:README-annotation-fix'
p11204
sbsI4078
(iPull
Pull
p11205
(dp11206
g3
g53
sg5
S'2.x: Re-use the single empty Disposable instance everywhere.'
p11207
sg7
(lp11208
S'Cleanup'
p11209
asg10
I4078
sg11
(lp11210
S':+1:'
p11211
aS'## [Current coverage][cc-pull] is **69.93%**\n> Merging [#4078][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4078   diff @@\n==========================================\n  Files           383        383          \n  Lines         27082      27078     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18927      18938    +11   \n+ Misses         6237       6216    -21   \n- Partials       1918       1924     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5f7b2e1...241f765][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5f7b2e1ad82ce96feace440156c314bd068b3376...241f7655f6073faaa53437d0155e07f7c6a4e75c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4078?src=pr'
p11212
asg14
S'JakeWharton:jw/one-empty-disposable'
p11213
sbsI4080
(iPull
Pull
p11214
(dp11215
g3
S'I keep thinking I found all of these and then more crop up...'
p11216
sg5
S'2.x: Replace custom empty Disposables with global instance.'
p11217
sg7
(lp11218
S'Cleanup'
p11219
asg10
I4080
sg11
(lp11220
S'There are still some empty Disposable objects in those files:\r\n\r\nFlowableThrottleFirstTimed.java\r\nFlowableTimeoutTimed.java\r\nNbpOperatorThrottleFirstTimed.java\r\nNbpOperatorTimeoutTimed.java\r\n\r\nShould they also be replaced with EmptyDisposable.INSTANCE?'
p11221
asg14
S'JakeWharton:jw/last-one'
p11222
sbsI4081
(iPull
Pull
p11223
(dp11224
g3
g53
sg5
S'2.x: Do not leak the DISPOSED marker instance into public API.'
p11225
sg7
(lp11226
S'Cleanup'
p11227
asg10
I4081
sg11
(lp11228
S'## [Current coverage][cc-pull] is **69.94%**\n> Merging [#4081][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4081   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18931      18936     +5   \n+ Misses         6230       6225     -5   \n  Partials       1913       1913          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...15c771b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...15c771b1056dbb69783d9615c5cb547d66931ce8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4081?src=pr'
p11229
aS':+1:'
p11230
asg14
S'JakeWharton:jw/disposed-public'
p11231
sbsI4083
(iPull
Pull
p11232
(dp11233
g3
g53
sg5
S'2.x: Merge CancelledSubscriber into EmptySubscriber.'
p11234
sg7
(lp11235
S'Cleanup'
p11236
asg10
I4083
sg11
(lp11237
S'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4083][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4083   diff @@\n==========================================\n  Files           383        382     -1   \n  Lines         27074      27069     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4343     +1   \n==========================================\n+ Hits          18931      18949    +18   \n+ Misses         6230       6204    -26   \n- Partials       1913       1916     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...19ded55][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...19ded5582a4019c594dfac7bbc39e9322f6d695a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4083?src=pr'
p11238
aS'I think we could remove the two entirely as they are no longer needed by operators (previously, CancelledSubscriber was needed due to lift).\r\n\r\nEmptySubscribe -> TestSubscriber (make a local copy)\r\n\r\nCancelledSubscriber -> FlowableRefCountTest (make a local copy)\r\n\r\nSubscribers -> remove both'
p11239
aS'Merging this for now and work out their existence later.'
p11240
asg14
S'JakeWharton:jw/consolidate-subscribers'
p11241
sbsI4084
(iPull
Pull
p11242
(dp11243
g3
g53
sg5
S'2.x: More uses of SubscriptionHelper.'
p11244
sg7
(lp11245
S'Cleanup'
p11246
asg10
I4084
sg11
(lp11247
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4084][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4084   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27056    -18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4335     -7   \n==========================================\n- Hits          18931      18927     -4   \n+ Misses         6230       6222     -8   \n+ Partials       1913       1907     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...fcd4fa2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...fcd4fa230761a8869147867d26d47e7815666551\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4084?src=pr'
p11248
aS':+1:'
p11249
asg14
S'JakeWharton:jw/more-helper'
p11250
sbsI4085
(iPull
Pull
p11251
(dp11252
g3
S'The NBP version of #4083.'
p11253
sg5
S'2.x: Merge NbpCancelledSubscriber into NbpEmptySubscriber.'
p11254
sg7
(lp11255
S'Cleanup'
p11256
asg10
I4085
sg11
(lp11257
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4085][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4085   diff @@\n==========================================\n  Files           383        382     -1   \n  Lines         27074      27065     -9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4341     -1   \n==========================================\n+ Hits          18931      18933     +2   \n+ Misses         6230       6222     -8   \n+ Partials       1913       1910     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...e956210][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...e956210f6a00f41b9776e6757b1d05e4870f3dac\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4085?src=pr'
p11258
aS"I haven't switched the Nbp stuff to direct-create yet so these have dependencies, but should be removed the same way #4083. I'm merging this to avoid conflicts in Nbp till then. :+1: Thanks! "
p11259
asg14
S'JakeWharton:jw/consolidate-nbp-subscribers'
p11260
sbsI4086
(iPull
Pull
p11261
(dp11262
g3
g53
sg5
S'1.x: Remove unnecessary dependency in build.gradle'
p11263
sg7
(lp11264
S'Build'
p11265
asg10
I4086
sg11
(lp11266
S'Failure is flake #4047. '
p11267
aS'## [Current coverage][cc-pull] is **80.57%**\n> Merging [#4086][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4086   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13330      13326     -4   \n- Misses         2321       2327     +6   \n+ Partials        887        885     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [544690b...79f445f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/544690b4d45aedee8f0880f28442262faadc9f97...79f445f149c80269556b3c9dec9829f5128e7ae6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4086?src=pr'
p11268
aS':+1:'
p11269
asg14
S'zsxwing:minor'
p11270
sbsI4087
(iPull
Pull
p11271
(dp11272
g3
g53
sg5
S'2.x: Normalize request validation using SubscriptionHelper.'
p11273
sg7
(lp11274
S'Cleanup'
p11275
asg10
I4087
sg11
(lp11276
S'This method is super weird with `true` indicating _invalid_ and `false` indicating _valid_.'
p11277
aS'## [Current coverage][cc-pull] is **69.97%**\n> Merging [#4087][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4087   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27057    -17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18931      18933     +2   \n+ Misses         6230       6216    -14   \n+ Partials       1913       1908     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...c092119][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...c092119ec7dc65359697bc7bb295ffeb6ced1ab8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4087?src=pr'
p11278
aS'I agree, looked like a good idea back then to flip. I think it should be straight: true means valid. Would you like to do the flip?'
p11279
asg14
S'JakeWharton:jw/request-validation'
p11280
sbsI4088
(iPull
Pull
p11281
(dp11282
g3
S'Some tests are sensitive to Travis hiccups. This adds more timeout to some and reduces heavyness on others.'
p11283
sg5
S'1.x: fix some flaky tests, add more timeout to others'
p11284
sg7
(lp11285
S'Test-Failures'
p11286
asg10
I4088
sg11
(lp11287
S'@hzsweers sure, your PR is welcome at any time.'
p11288
aS'## [Current coverage][cc-pull] is **80.31%**\n\n\n> No coverage report found for **1.x** at 90e4204.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [90e4204...46da54a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/90e4204f751a5d0b74061e3ae33bff59b93de410...46da54a5c9b68b2c188ccde4dd86d10bc6a3292c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4088?src=pr'
p11289
asg14
S'akarnokd:UnflakyTests'
p11290
sbsI4090
(iPull
Pull
p11291
(dp11292
g3
S"- Exception extends Throwable so it's incorrect to generalize the Throwable as `exception`"
p11293
sg5
S'Rename Throwable parameter from exception to throwable'
p11294
sg7
(lp11295
S'Cleanup'
p11296
asg10
I4090
sg11
(lp11297
S'There are a lot more of those cases:\r\n\r\n```\r\nsrc/main/java/rx/Completable.java\r\n458:     * Creates a Completable instance that emits the given Throwable exception to subscribers.\r\n\r\nsrc/main/java/rx/exceptions/OnErrorThrowable.java\r\n37:    private OnErrorThrowable(Throwable exception) {\r\n43:    private OnErrorThrowable(Throwable exception, Object value) {\r\n\r\nsrc/main/java/rx/internal/operators/OnSubscribeThrow.java\r\n30:    private final Throwable exception;\r\n32:    public OnSubscribeThrow(Throwable exception) {\r\n\r\nsrc/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java\r\n163:        public void complete(Throwable exception) {\r\n\r\nsrc/main/java/rx/internal/util/BackpressureDrainManager.java\r\n65:        void complete(Throwable exception);\r\n73:    protected Throwable exception;\r\n\r\nsrc/main/java/rx/Observable.java\r\n1379:    public static <T> Observable<T> error(Throwable exception) {\r\n\r\nsrc/main/java/rx/Single.java\r\n506:    public static <T> Single<T> error(final Throwable exception) {\r\n\r\nsrc/test/java/rx/internal/operators/OperatorDematerializeTest.java\r\n53:        Throwable exception = new Throwable("test");\r\n\r\nsrc/test/java/rx/internal/operators/OperatorMergeTest.java\r\n1048:        Throwable exception = new Throwable();\r\n1061:        Throwable exception = new Throwable();\r\n1085:        Throwable exception = new Throwable();\r\n1099:        Throwable exception = new Throwable();\r\n\r\nsrc/test/java/rx/SingleTest.java\r\n888:        Throwable exceptionFromOnErrorAction = new IllegalStateException();\r\n1012:        Throwable exceptionFromAction = new IllegalStateException();\r\n```'
p11298
aS'See the discussion in #1353. Renaming such public parameters may cause problems in other languages.'
p11299
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4090][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4090   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n+ Hits          13500      13504     +4   \n+ Misses         2408       2403     -5   \n- Partials        913        914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...7eccbd8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...7eccbd8c6fa589ac49b509ed3c5cc1b28b906894\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4090?src=pr'
p11300
aS'If you are just renaming, we can review it in large batches; plus, saves you the administration cost of setting up PRs. So it would be great you followed the suggestions #1353.'
p11301
aS"Sounds good, let me close this PR and I'll open one when I have more time this week."
p11302
asg14
S'ataulm:patch-1'
p11303
sbsI4091
(iPull
Pull
p11304
(dp11305
g3
S'Some notable changes:\r\n\r\n  - move fields to the beginning of a class\r\n  - remove unnecessary modifiers and initializers\r\n  - avoid creating objects to early\r\n  - update most drain algorithm to use the (more modern) `while (e != r)` pattern\r\n  - PMD has a few incorrect checks: complaining about a final local that gets used in an inner class\r\n  - adding braces to ifs\r\n  - documenting deliberately empty methods\r\n  - fix internal field and method namings\r\n  - delegate to `Exceptions.propagate`'
p11306
sg5
S'1.x: apply fixes based on PMD suggestions'
p11307
sg7
(lp11308
S'Cleanup'
p11309
asg10
I4091
sg11
(lp11310
S"Travis doesn't pick up this one for some reason. Reopening."
p11311
aS'## [Current coverage][cc-pull] is **80.16%**\n> Merging [#4091][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4091   diff @@\n==========================================\n  Files           259        257     -2   \n  Lines         16821      16771    -50   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2541    -13   \n==========================================\n- Hits          13500      13445    -55   \n- Misses         2408       2416     +8   \n+ Partials        913        910     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...52b026d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...52b026dfb0411167daf31284768e1cea472ec75a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4091?src=pr'
p11312
aS'/cc @hzsweers @artem-zinnatullin Let me know if you want to review this and need some time.'
p11313
aS'https://travis-ci.org/ReactiveX/RxJava/builds/139734219#L240'
p11314
aS"I'll review it in 24 hours if you don't mind"
p11315
aS"Sure. I'll return to 2.x till then."
p11316
aS"Some of these I really like. Some I don't. Documenting empty methods seems like pure noise."
p11317
aS'Updated.'
p11318
aS'@JakeWharton we can iterate on the ruleset after this gets merged.'
p11319
aS"Okay then. If you don't mind, let's have the comments in this PR as is and have a separate PR disable the rule."
p11320
aS'Updated: removed my name, swapped the BackpressureStategy constants, disabled empty method/constructor/catch block rules.'
p11321
aS'Thanks @hzsweers!'
p11322
asg14
S'akarnokd:PMDFixes623'
p11323
sbsI4092
(iPull
Pull
p11324
(dp11325
g3
S'This PR adds the AnimalSniffer plugin to check for Java 6 API violations.\r\n\r\nRelated issue: #4067.'
p11326
sg5
S'1.x: add AnimalSniffer to the build process, fix and suppress violations'
p11327
sg7
(lp11328
S'Build'
p11329
asg10
I4092
sg11
(lp11330
S'/cc @artem-zinnatullin @zsxwing @JakeWharton '
p11331
aS'Flaky tests:\r\n```\r\nrx.observers.TestSubscriberTest > testOnErrorCrashCountsDownLatch FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds\r\n        at java.lang.ClassLoader.defineClass1(Native Method)\r\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:800)\r\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\r\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)\r\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:71)\r\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\r\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)\r\n        at java.security.AccessController.doPrivileged(Native Method)\r\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)\r\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)\r\n        at rx.observers.TestSubscriberTest.testOnErrorCrashCountsDownLatch(TestSubscriberTest.java:595)\r\n```\r\n\r\n```\r\nrx.plugins.RxJavaPluginsTest > testOnNextValueCallsPlugin FAILED\r\n    java.lang.RuntimeException: java.util.concurrent.TimeoutException\r\n        at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)\r\n        at rx.observables.BlockingObservable.first(BlockingObservable.java:163)\r\n        at rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(RxJavaPluginsTest.java:228)\r\n        Caused by:\r\n        java.util.concurrent.TimeoutException\r\n```\r\n\r\n```\r\nrx.subjects.BehaviorSubjectTest > testUnsubscriptionCase FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds\r\n        at java.lang.ClassLoader.findBootstrapClass(Native Method)\r\n        at java.lang.ClassLoader.findBootstrapClassOrNull(ClassLoader.java:1070)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:414)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:412)\r\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)\r\n        at java.lang.Class.forName0(Native Method)\r\n        at java.lang.Class.forName(Class.java:191)\r\n        at org.mockito.internal.configuration.ClassPathLoader.loadConfiguration(ClassPathLoader.java:68)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.createConfig(GlobalConfiguration.java:38)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.<init>(GlobalConfiguration.java:32)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.validate(GlobalConfiguration.java:47)\r\n        at org.mockito.internal.progress.MockingProgressImpl.validateMostStuff(MockingProgressImpl.java:81)\r\n        at org.mockito.internal.progress.MockingProgressImpl.mockingStarted(MockingProgressImpl.java:116)\r\n        at org.mockito.internal.progress.ThreadSafeMockingProgress.mockingStarted(ThreadSafeMockingProgress.java:72)\r\n        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:60)\r\n        at org.mockito.Mockito.mock(Mockito.java:1285)\r\n        at org.mockito.Mockito.mock(Mockito.java:1163)\r\n        at rx.subjects.BehaviorSubjectTest.testUnsubscriptionCase(BehaviorSubjectTest.java:249)\r\n```'
p11332
aS'To be merged after #4091 in case there is a conflict.'
p11333
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4092][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4092   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n+ Hits          13500      13504     +4   \n+ Misses         2408       2402     -6   \n- Partials        913        915     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...7da62c2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...7da62c28b3f5139a9f792e362efc8185e10309de\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4092?src=pr'
p11334
aS'Does it really fail the build if you try to use Java7+ APIs?'
p11335
aS"That AssertionError initialization did fail locally, but can't really post a PR that demonstrates failure, right?"
p11336
aS'Sure sure, I mean have you checked that it really fails build that we perform on CI in case of using Java7+ APIs? (you can execute commands from [buildViaTravis.sh](https://github.com/ReactiveX/RxJava/blob/1.x/gradle/buildViaTravis.sh) locally to check that).'
p11337
aS'https://travis-ci.org/ReactiveX/RxJava/builds/139755352#L209'
p11338
aS"That's annoying, we seem to get shot down by out-of-memory checkers, maybe due to extensive thread usage? Or we have a leak somewhere."
p11339
asg14
S'akarnokd:AnimalSniffer'
p11340
sbsI4093
(iPull
Pull
p11341
(dp11342
g3
S'By default, the `license` plugin warns about MDs and text files. In addition, this excluded the JCTools queues and the beta/experimental annotations because they kept their original license header.'
p11343
sg5
S'1.x: exclude some text files from license checks'
p11344
sg7
(lp11345
S'Build'
p11346
asg10
I4093
sg11
(lp11347
S'## [Current coverage][cc-pull] is **80.25%**\n> Merging [#4093][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4093   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n- Hits          13500      13499     -1   \n+ Misses         2408       2407     -1   \n- Partials        913        915     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...330192c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...330192c640357409299344ce0c5f7593be1d977d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4093?src=pr'
p11348
aS"Can we configure it to fail build if some file doesn't have license so we won't forget to add it? \r\n\r\n// As far as I understand it's [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin)."
p11349
aS'Yes, but not now as it will fail 2 classes I fixed in another PR.'
p11350
asg14
S'akarnokd:LicenseExcludes'
p11351
sbsI4094
(iPull
Pull
p11352
(dp11353
g3
S'Follow up from comments in #4083 and #4085.'
p11354
sg5
S'2.x: Remove EmptySubscriber, start to remove NbpEmptySubscriber.'
p11355
sg7
(lp11356
S'Cleanup'
p11357
asg10
I4094
sg11
(lp11358
S'## [Current coverage][cc-pull] is **70.01%**\n> Merging [#4094][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4094   diff @@\n==========================================\n  Files           381        380     -1   \n  Lines         27025      27014    -11   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4335       4332     -3   \n==========================================\n- Hits          18921      18914     -7   \n+ Misses         6197       6191     -6   \n- Partials       1907       1909     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [573401d...971f653][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/573401d3ab9554c34b704d9ca755d5e6287d871d...971f653343f93b6780188251850ec2e74010af76\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4094?src=pr'
p11359
aS':+1:'
p11360
asg14
S'JakeWharton:jw/remove-empty-cancelled'
p11361
sbsI4095
(iPull
Pull
p11362
(dp11363
g3
g53
sg5
S'2.x: Invert request validation return type for better semantics.'
p11364
sg7
(lp11365
S'Cleanup'
p11366
asg10
I4095
sg11
(lp11367
S'## [Current coverage][cc-pull] is **70.07%**\n> Merging [#4095][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4095   diff @@\n==========================================\n  Files           380        380          \n  Lines         27014      26985    -29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4332       4331     -1   \n==========================================\n- Hits          18931      18911    -20   \n+ Misses         6183       6166    -17   \n- Partials       1900       1908     +8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [28cd5e3...6ee9e20][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/28cd5e300c3d6e25cf9946568bb069dddb2eeaba...6ee9e20ae16aea3c23e30de5c78f295dba3b15a8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4095?src=pr'
p11368
aS':+1:'
p11369
asg14
S'JakeWharton:jw/invert-return-type'
p11370
sbs.