/Users/ashleychen/Desktop/testing/b/5246_b.java
Apr 14, 2017 1:50:12 PM codemining.util.SettingsLoader <init>
INFO: Configuration file not found. Loading defaults.
Apr 14, 2017 1:50:12 PM codemining.util.serialization.KryoSerialization deserializeFrom
INFO: Deserializing object from tsg.ser
filename,entropy,cross-entropy
LEFT COMMENTS
//
//
//
//
RIGHT COMMENTS
//
//
//
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5d7148e2
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@25fb8912

#TRAVERSE
LEFTCHILD: CLASS: FlowableToListTest
RIGHTCHILD: CLASS: FlowableToListTest
##SNODE L: CLASS: FlowableToListTest
##SNODE L: CLASS: FlowableToListTest
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@7c24b813
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2c35e847

##TRAVERSE
LEFTCHILD: METHOD: singleCollectionSupplierThrows()
RIGHTCHILD: METHOD: singleCollectionSupplierThrows()
###SNODE L: METHOD: singleCollectionSupplierThrows()
###SNODE L: METHOD: singleCollectionSupplierThrows()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListFlowable()
RIGHTCHILD: METHOD: testListFlowable()
###SNODE L: METHOD: testListFlowable()
###SNODE L: METHOD: testListFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListWithBlockingFirst()
RIGHTCHILD: METHOD: testListWithBlockingFirst()
###SNODE L: METHOD: testListWithBlockingFirst()
###SNODE L: METHOD: testListWithBlockingFirst()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: collectionSupplierReturnsNull()
RIGHTCHILD: METHOD: collectionSupplierReturnsNull()
###SNODE L: METHOD: collectionSupplierReturnsNull()
###SNODE L: METHOD: collectionSupplierReturnsNull()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListWithBlockingFirstFlowable()
RIGHTCHILD: METHOD: testListWithBlockingFirstFlowable()
###SNODE L: METHOD: testListWithBlockingFirstFlowable()
###SNODE L: METHOD: testListWithBlockingFirstFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: FlowableToListTest()
RIGHTCHILD: CONSTRUCTOR: FlowableToListTest()
###SNODE L: CONSTRUCTOR: FlowableToListTest()
###SNODE L: CONSTRUCTOR: FlowableToListTest()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: capacityHintFlowable()
RIGHTCHILD: METHOD: capacityHintFlowable()
###SNODE L: METHOD: capacityHintFlowable()
###SNODE L: METHOD: capacityHintFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testList()
RIGHTCHILD: METHOD: testList()
###SNODE L: METHOD: testList()
###SNODE L: METHOD: testList()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testBackpressureHonoredFlowable()
RIGHTCHILD: METHOD: testBackpressureHonoredFlowable()
###SNODE L: METHOD: testBackpressureHonoredFlowable()
###SNODE L: METHOD: testBackpressureHonoredFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListMultipleSubscribers()
RIGHTCHILD: METHOD: testListMultipleSubscribers()
###SNODE L: METHOD: testListMultipleSubscribers()
###SNODE L: METHOD: testListMultipleSubscribers()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListViaFlowable()
RIGHTCHILD: METHOD: testListViaFlowable()
###SNODE L: METHOD: testListViaFlowable()
###SNODE L: METHOD: testListViaFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: dispose()
RIGHTCHILD: METHOD: dispose()
###SNODE L: METHOD: dispose()
###SNODE L: METHOD: dispose()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListViaFlowableFlowable()
RIGHTCHILD: METHOD: testListViaFlowableFlowable()
###SNODE L: METHOD: testListViaFlowableFlowable()
###SNODE L: METHOD: testListViaFlowableFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: capacityHint()
RIGHTCHILD: METHOD: capacityHint()
###SNODE L: METHOD: capacityHint()
###SNODE L: METHOD: capacityHint()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: onNextCancelRace()
RIGHTCHILD: METHOD: onNextCancelRace()
###SNODE L: METHOD: onNextCancelRace()
###SNODE L: METHOD: onNextCancelRace()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testAsyncRequested()
RIGHTCHILD: METHOD: testAsyncRequested()
###SNODE L: METHOD: testAsyncRequested()
###SNODE L: METHOD: testAsyncRequested()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: collectionSupplierThrows()
RIGHTCHILD: METHOD: collectionSupplierThrows()
###SNODE L: METHOD: collectionSupplierThrows()
###SNODE L: METHOD: collectionSupplierThrows()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: errorSingle()
RIGHTCHILD: METHOD: errorSingle()
###SNODE L: METHOD: errorSingle()
###SNODE L: METHOD: errorSingle()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: null
RIGHTCHILD: METHOD: onNextCancelRaceFlowable()
###SNODE L: null
###SNODE L: METHOD: onNextCancelRaceFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
DIFF IS NOT NULL
LEFTCHILD: METHOD: error()
RIGHTCHILD: METHOD: error()
###SNODE L: METHOD: error()
###SNODE L: METHOD: error()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListWithNullValue()
RIGHTCHILD: METHOD: testListWithNullValue()
###SNODE L: METHOD: testListWithNullValue()
###SNODE L: METHOD: testListWithNullValue()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListMultipleSubscribersFlowable()
RIGHTCHILD: METHOD: testListMultipleSubscribersFlowable()
###SNODE L: METHOD: testListMultipleSubscribersFlowable()
###SNODE L: METHOD: testListMultipleSubscribersFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testBackpressureHonored()
RIGHTCHILD: METHOD: testBackpressureHonored()
###SNODE L: METHOD: testBackpressureHonored()
###SNODE L: METHOD: testBackpressureHonored()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testAsyncRequestedFlowable()
RIGHTCHILD: METHOD: testAsyncRequestedFlowable()
###SNODE L: METHOD: testAsyncRequestedFlowable()
###SNODE L: METHOD: testAsyncRequestedFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: await(CyclicBarrier)
RIGHTCHILD: METHOD: await(CyclicBarrier)
###SNODE L: METHOD: await(CyclicBarrier)
###SNODE L: METHOD: await(CyclicBarrier)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: singleCollectionSupplierReturnsNull()
RIGHTCHILD: METHOD: singleCollectionSupplierReturnsNull()
###SNODE L: METHOD: singleCollectionSupplierReturnsNull()
###SNODE L: METHOD: singleCollectionSupplierReturnsNull()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: testListWithNullValueFlowable()
RIGHTCHILD: METHOD: testListWithNullValueFlowable()
###SNODE L: METHOD: testListWithNullValueFlowable()
###SNODE L: METHOD: testListWithNullValueFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: null
RIGHTCHILD: METHOD: onCompleteCancelRaceFlowable()
###SNODE L: null
###SNODE L: METHOD: onCompleteCancelRaceFlowable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
DIFF IS NOT NULL
DIFF IS NOT NULL
TREE 186
-(0)1777
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(1)1775
-(0)-(0)-(1)1776
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)6
-(0)-(0)-(1)14
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)959
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)0
-(0)-(0)-(1)1778
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(1)1775
-(0)-(0)-(1)1776
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(1)1779
-(0)-(0)-(1)1780
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)477
-(0)-(0)-(1)1771
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(1)1771
-(0)-(0)-(1)1781
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(0)-(1)1771
-(0)-(0)-(0)-(1)1782
-(0)-(0)-(1)1783
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(0)-(1)1771
-(0)-(0)-(0)-(1)1784
-(0)-(0)-(1)1785
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(0)-(1)1771
-(0)-(0)-(0)-(1)1786
-(0)-(0)-(1)1787
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(0)-(1)1771
-(0)-(0)-(0)-(1)1788
-(0)-(0)-(1)1789
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)477
-(0)-(0)-(0)-(0)-(1)1771
-(0)-(0)-(0)-(1)1790
-(0)-(0)-(1)1791
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)-(0)477
-(1)-(2)-(0)-(0)-(0)-(1)1771
-(1)-(2)-(0)-(0)-(1)1772
-(1)-(2)-(0)-(1)1773
-(1)-(2)-(1)1774
-(2)185
-(2)-(1)19
-(2)-(2)1792
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1794
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1780
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1805
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1813
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1814
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1780
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1805
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1813
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1815
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1780
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)157
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1805
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1780
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)158
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1805
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1816
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(0)-(3)1816
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1813
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(0)-(3)1816
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1813
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)1817
-(2)-(8)-(1)-(1)1818
-(2)-(8)-(1)19
-(2)-(8)-(2)1819
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)63
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1780
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1805
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1813
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1820
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)184
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1821
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)184
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1802
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1822
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1823
-(2)-(8)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)-(0)-(3)1821
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1825
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)238
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)419
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)425
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)431
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1827
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1245
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1828
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1830
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1831
-(2)-(8)-(12)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1833
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1831
-(2)-(8)-(12)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1833
-(2)-(8)90
-(2)-(8)-(1)1837
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)-(1)1836
-(2)-(8)-(1)-(1)-(0)1834
-(2)-(8)-(1)-(1)-(1)1835
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)1817
-(2)-(8)-(1)-(1)1838
-(2)-(8)-(1)19
-(2)-(8)-(2)1839
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)1840
-(2)-(8)-(12)-(0)-(1)-(1)-(1)1841
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1789
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1842
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1843
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)1844
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)920
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)1845
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)663
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(2)1655
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)1846
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1787
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)1787
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1848
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)1802
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(4)238
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(4)1827
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1848
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1851
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)-(1)1852
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(2)1853
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1831
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1813
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1855
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(0)1856
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(1)1857
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1858
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)1859
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1860
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(2)498
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)1861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)425
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1802
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)-(0)-(3)-(3)971
-(2)-(8)-(12)-(0)-(0)-(3)-(3)503
-(2)-(8)-(12)-(0)-(0)-(3)-(3)785
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1861
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1865
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1867
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1868
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1869
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1870
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1867
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1868
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1869
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1871
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1867
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)157
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1868
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1867
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)158
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1868
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1816
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1869
-(2)-(8)-(12)-(0)-(0)-(3)1816
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1869
-(2)-(8)-(12)-(0)-(0)-(3)1816
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)1817
-(2)-(8)-(1)-(1)1818
-(2)-(8)-(1)19
-(2)-(8)-(2)1872
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)63
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1800
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1867
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1803
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1804
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1868
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1800
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1869
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1807
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1803
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1776
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1116
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1873
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1781
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)184
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)15
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)904
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)1799
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1821
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)184
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1874
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1823
-(2)-(8)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1799
-(2)-(8)-(12)-(0)-(0)-(3)1821
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)1817
-(2)-(8)-(1)-(1)1875
-(2)-(8)-(1)19
-(2)-(8)-(2)1876
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)217
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)238
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)419
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)425
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)431
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1785
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1785
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(0)-(3)1245
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1828
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1830
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1833
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(0)-(2)1833
-(2)-(8)90
-(2)-(8)-(1)1837
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)-(1)1836
-(2)-(8)-(1)-(1)-(0)1834
-(2)-(8)-(1)-(1)-(1)1835
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)1817
-(2)-(8)-(1)-(1)1838
-(2)-(8)-(1)19
-(2)-(8)-(2)1877
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)1840
-(2)-(8)-(12)-(0)-(1)-(1)-(1)1841
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1795
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1789
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)1842
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1843
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)1844
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)920
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)1845
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)663
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(2)1655
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)1846
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1787
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)1787
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1866
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1848
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)1801
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(4)238
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)1785
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(0)-(1)1785
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1848
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1806
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1851
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)-(1)1852
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(2)1853
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1813
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1855
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(0)1856
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(1)1857
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1858
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)1832
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1795
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)1859
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)1854
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1849
-(2)-(8)-(7)-(3)1850
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)1878
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)126
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1879
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)1880
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)126
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1879
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1881
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)498
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)1861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)425
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(3)238
-(2)-(8)-(12)-(0)-(0)-(3)-(3)419
-(2)-(8)-(12)-(0)-(0)-(3)-(3)425
-(2)-(8)-(12)-(0)-(0)-(3)-(3)431
-(2)-(8)-(12)-(0)-(0)-(3)-(3)971
-(2)-(8)-(12)-(0)-(0)-(3)-(3)503
-(2)-(8)-(12)-(0)-(0)-(3)-(3)785
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1861
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1859
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1804
-(2)-(8)-(12)-(0)-(0)-(2)1882
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1802
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1804
-(2)-(8)-(12)-(0)-(0)-(2)1882
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1801
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1883
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(2)1883
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)1783
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1802
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1783
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1885
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1883
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)1783
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1783
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1886
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)-(1)1887
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(2)1888
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(10)140
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)1783
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1802
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1783
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1889
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)-(1)1887
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(2)1888
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(10)140
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1802
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)-(1)454
-(2)-(8)-(12)-(0)-(0)-(2)1890
-(2)-(8)-(12)-(0)-(0)-(3)1891
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1892
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(0)-(1)1887
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(2)1888
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(10)140
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)1783
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1783
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1893
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(2)1826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(0)-(1)1887
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(2)1888
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(4)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(10)140
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1862
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1884
-(2)-(8)-(12)-(0)-(0)-(0)-(3)68
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)-(1)454
-(2)-(8)-(12)-(0)-(0)-(2)1890
-(2)-(8)-(12)-(0)-(0)-(3)1891
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1793
-(2)-(8)-(1)19
-(2)-(8)-(2)1894
-(2)-(8)-(4)91
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1844
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)1787
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1895
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1787
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)1847
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)59
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)1785
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)1895
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(2)1801
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)1862
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1852
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1896
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1852
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)100
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(2)1853
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1895
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1809
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1852
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1897
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1852
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)100
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(2)1853
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1245
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1898
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1804
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)1899
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)1896
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)1897

/Users/ashleychen/Desktop/testing/b/5250_b.java
Apr 14, 2017 1:50:13 PM codemining.util.serialization.KryoSerialization deserializeFrom
INFO: Deserializing object from tsg.ser
filename,entropy,cross-entropy
LEFT COMMENTS
/** 
 * Copyright 2015 Netflix, Inc. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
/** 
 * The Single class implements the Reactive Pattern for a single value response. See  {@link Observable} for theimplementation of the Reactive Pattern for a stream or vector of values. <p> {@code Single} behaves the same as {@link Observable} except that it can only emit either a single successfulvalue, or an error (there is no "onComplete" notification as there is for  {@link Observable}) <p> Like an  {@link Observable}, a  {@code Single} is lazy, can be either "hot" or "cold", synchronous orasynchronous. <p> The documentation for this class makes use of marble diagrams. The following legend explains these diagrams: <p> <img width="605" height="285" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.legend.png" alt=""> <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>.
 * @param < T > the type of the item emitted by the Single
 * @since 1.2
 */
/** 
 * Creates a Single with a Function to execute when it is subscribed to (executed). <p> <em>Note:</em> Use  {@link #create(OnSubscribe)} to create a Single, instead of this constructor,unless you specifically have a need for inheritance.
 * @param f {@code f} to be executed when {@code execute(SingleSubscriber)} or{@code subscribe(Subscriber)} is called
 */
/** 
 * Creates a Single with a Function to execute when it is subscribed to (executed). <p> <em>Note:</em> Use  {@link #create(OnSubscribe)} to create a Single, instead of this constructor,unless you specifically have a need for inheritance.
 * @param f {@code f} to be executed when {@code execute(SingleSubscriber)} or{@code subscribe(Subscriber)} is called
 * @deprecated 1.2.1: Not recommended, use {@link #Single(OnSubscribe)} to avoid wrapping andconversion between the Observable and Single protocols.
 */
/** 
 * Returns a Single that will execute the specified function when a  {@link SingleSubscriber} executes it ora  {@link Subscriber} subscribes to it.<p> <img width="640" height="200" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.create.png" alt=""> <p> Write the function you pass to  {@code create} so that it behaves as a Single: It should invoke theSingleSubscriber  {@link SingleSubscriber#onSuccess onSuccess} and/or{@link SingleSubscriber#onError onError} methods appropriately.<p> A well-formed Single must invoke either the SingleSubscriber's  {@code onSuccess} method exactly once orits  {@code onError} method exactly once.<p> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code create} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the type of the item that this Single emits
 * @param f a function that accepts an  {@code SingleSubscriber<T>}, and invokes its  {@code onSuccess} or{@code onError} methods as appropriate
 * @return a Single that, when a {@link Subscriber} subscribes to it, will execute the specified function
 * @see <a href="http://reactivex.io/documentation/operators/create.html">ReactiveX operators documentation: Create</a>
 */
/** 
 * Invoked when Single.execute is called.
 * @param < T > the output value type
 */
//
/** 
 * Lifts a function to the current Single and returns a new Single that when subscribed to will pass the values of the current Single through the Operator function. <p> In other words, this allows chaining TaskExecutors together on a Single for acting on the values within the Single. <p> {@code task.map(...).filter(...).lift(new OperatorA()).lift(new OperatorB(...)).subscribe() }<p> If the operator you are creating is designed to act on the item emitted by a source Single, use {@code lift}. If your operator is designed to transform the source Single as a whole (for instance, by applying a particular set of existing RxJava operators to it) use  {@link #compose}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code lift} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the downstream's value type (output)
 * @param lift the Operator that implements the Single-operating function to be applied to the source Single
 * @return a Single that is the result of applying the lifted Operator to the source Single
 * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
/** 
 * Transform a Single by applying a particular Transformer function to it. <p> This method operates on the Single itself whereas  {@link #lift} operates on the Single's Subscribers orObservers. <p> If the operator you are creating is designed to act on the individual item emitted by a Single, use {@link #lift}. If your operator is designed to transform the source Single as a whole (for instance, by applying a particular set of existing RxJava operators to it) use  {@code compose}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code compose} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the value type of the single returned by the transformer function
 * @param transformer implements the function that transforms the source Single
 * @return the source Single, transformed by the transformer function
 * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
/** 
 * Convenience type that allows a function to fluently transform a Single into another Single via  {@link #compose}. <pre> Transformer&lt;Integer, Integer> transformer = s -> s.subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()); Single.just(1) .compose(transformer) .subscribe(System.out::println); </pre>
 * @param < T > the source Single's value type
 * @param < R > the transformed Single's value type
 */
//
/** 
 * Hides the identity of this Single. <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">
 */
//
/* *//** 
 * Returns an Observable that emits the items emitted by two Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @return an Observable that emits items emitted by the two source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by three Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @return an Observable that emits items emitted by the three source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by four Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @return an Observable that emits items emitted by the four source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by five Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @return an Observable that emits items emitted by the five source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by six Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @return an Observable that emits items emitted by the six source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by seven Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @return an Observable that emits items emitted by the seven source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by eight Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @param t8 a Single to be concatenated
 * @return an Observable that emits items emitted by the eight source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by nine Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @param t8 a Single to be concatenated
 * @param t9 a Single to be concatenated
 * @return an Observable that emits items emitted by the nine source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns a Single that invokes a subscriber's  {@link SingleSubscriber#onError onError} method when thesubscriber subscribes to it. <p> <img width="640" height="190" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.error.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code error} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param exception the particular Throwable to pass to  {@link SingleSubscriber#onError onError}
 * @param < T > the type of the item (ostensibly) emitted by the Single
 * @return a Single that invokes the subscriber's {@link SingleSubscriber#onError onError} method whenthe subscriber subscribes to it
 * @see <a href="http://reactivex.io/documentation/operators/empty-never-throw.html">ReactiveX operators documentation: Throw</a>
 */
/** 
 * Converts a  {@link Future} into a {@code Single}. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a Single that emits the returnvalue of the  {@link Future#get} method of that object, by passing the object into the {@code from}method. <p> <em>Important note:</em> This Single is blocking; you cannot unsubscribe from it. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code from} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param future the source  {@link Future}
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Converts a  {@link Future} into a {@code Single}, with a timeout on the Future. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a {@code Single} that emitsthe return value of the  {@link Future#get} method of that object, by passing the object into the{@code from} method.<p> <em>Important note:</em> This  {@code Single} is blocking; you cannot unsubscribe from it.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code from} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param future the source  {@link Future}
 * @param timeout the maximum time to wait before calling  {@code get}
 * @param unit the  {@link TimeUnit} of the {@code timeout} argument
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Converts a  {@link Future}, operating on a specified  {@link Scheduler}, into a  {@code Single}. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.s.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a {@code Single} that emitsthe return value of the  {@link Future#get} method of that object, by passing the object into the{@code from} method.<dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param future the source  {@link Future}
 * @param scheduler the  {@link Scheduler} to wait for the Future on. Use a Scheduler such as{@link Schedulers#io()} that can block and wait on the Future
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Returns a  {@link Single} that invokes passed function and emits its result for each new Observer that subscribes.<p> Allows you to defer execution of passed function until Observer subscribes to the  {@link Single}. It makes passed function "lazy". Result of the function invocation will be emitted by the  {@link Single}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code fromCallable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param func function which execution should be deferred, it will be invoked when Observer will subscribe to the  {@link Single}.
 * @param < T > the type of the item emitted by the  {@link Single}.
 * @return a {@link Single} whose {@link Observer}s' subscriptions trigger an invocation of the given function.
 */
/** 
 * Provides an API (in a cold Single) that bridges the Single-reactive world with the callback-based world. <p>The  {@link SingleEmitter} allows registering a callback forcancellation/unsubscription of a resource. <p> Example: <pre><code> Single.fromEmitter(emitter -&gt; { Callback listener = new Callback() { &#64;Override public void onEvent(Event e) { emitter.onSuccess(e.getData()); } &#64;Override public void onFailure(Exception e) { emitter.onError(e); } }; AutoCloseable c = api.someMethod(listener); emitter.setCancellation(c::close); }); </code></pre> <p>All of the SingleEmitter's methods are thread-safe and ensure the Single's protocol are held.
 * @param < T > the success value type
 * @param producer the callback invoked for each incoming SingleSubscriber
 * @return the new Single instance
 * @since 1.2.3 - experimental (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a  {@code Single} that emits a specified item.<p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.just.png" alt=""> <p> To convert any object into a  {@code Single} that emits that object, pass that object into the{@code just} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code just} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param value the item to emit
 * @param < T > the type of that item
 * @return a {@code Single} that emits {@code value}
 * @see <a href="http://reactivex.io/documentation/operators/just.html">ReactiveX operators documentation: Just</a>
 */
/** 
 * Flattens a  {@code Single} that emits a {@code Single} into a single {@code Single} that emits the itememitted by the nested  {@code Single}, without any transformation. <p> <img width="640" height="370" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.oo.png" alt=""> <p> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the sources and the output
 * @param source a  {@code Single} that emits a {@code Single}
 * @return a {@code Single} that emits the item that is the result of flattening the {@code Single} emittedby  {@code source}
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens two Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens three Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens four Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens five Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens six Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens seven Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens eight Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @param t8 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens nine Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @param t8 a Single to be merged
 * @param t9 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Merges all Singles emitted by the Observable and runs them together until the source Observable and all inner Singles complete normally. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes items from the Observable in an unbounded manner and honors downstream backpressure.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @return the new Observable instance
 * @see #merge(Observable,int)
 * @see #mergeDelayError(Observable)
 * @see #mergeDelayError(Observable,int)
 * @since 1.2.7 - experimental
 */
/** 
 * Merges the Singles emitted by the Observable and runs up to the given number of them together at a time, until the Observable and all inner Singles terminate. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes at most maxConcurrent items from the Observable and one-by-one after as the inner Singles terminate. The operator ignores downstream backpressure as it doesn't emit items but only the terminal event.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapSingle} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @param maxConcurrency the maximum number of inner Singles to run at a time
 * @return the new Observable instance
 * @since 1.2.7 - experimental
 */
/** 
 * Merges all Singles emitted by the Observable and runs them together, delaying errors from them and the Observable, until the source Observable and all inner Singles complete normally. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes items from the Observable in an unbounded manner and honors downstream backpressure.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @return the new Observable instance
 * @see #mergeDelayError(Observable,int)
 * @see #merge(Observable)
 * @see #merge(Observable,int)
 * @since 1.2.7 - experimental
 */
/** 
 * Merges the Singles emitted by the Observable and runs up to the given number of them together at a time, delaying errors from them and the Observable, until the Observable and all inner Singles terminate. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes at most maxConcurrent items from the Observable and one-by-one after as the inner Singles terminate. The operator ignores downstream backpressure as it doesn't emit items but only the terminal event.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapSingle} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @param maxConcurrency the maximum number of inner Singles to run at a time
 * @return the new Observable instance
 * @since 1.2.7 - experimental
 */
/** 
 * Returns a Single that emits the results of a specified combiner function applied to two items emitted by two other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that emits the results of a specified combiner function applied to three items emitted by three other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to four items emitted by four other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to five items emitted by five other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to six items emitted by six other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to seven items emitted by seven other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to eight items emitted by eight other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < T8 > the eighth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param s8 an eighth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to nine items emitted by nine other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < T8 > the eighth source Single's value type
 * @param < T9 > the ninth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param s8 an eighth source Single
 * @param s9 a ninth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that emits the result of specified combiner function applied to combination of items emitted, in sequence, by an Iterable of other Singles. <p> {@code zip} applies this function in strict sequence.<p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param singles an Iterable of source Singles. Should not be empty because  {@link Single} either emits result or error.{@link java.util.NoSuchElementException} will be emit as error if Iterable will be empty.
 * @param zipFunction a function that, when applied to an item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that subscribes to this Single lazily, caches its success or error event and replays it to all the downstream subscribers. <p> <img width="640" height="410" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/cache.png" alt=""> <p> This is useful when you want a Single to cache its response and you can't control the subscribe/unsubscribe behavior of all the  {@link Subscriber}s. <p> The operator subscribes only when the first downstream subscriber subscribes and maintains a single subscription towards this Single. In contrast, the operator family of  {@link Observable#replay()}that return a  {@link ConnectableObservable} require an explicit call to {@link ConnectableObservable#connect()}. <p> <em>Note:</em> You sacrifice the ability to unsubscribe from the origin when you use the  {@code cache}Observer so be careful not to use this Observer on Observables that emit an infinite or very large number of items that will use up memory. A possible workaround is to apply `takeUntil` with a predicate or another source before (and perhaps after) the application of cache(). <pre><code> AtomicBoolean shouldStop = new AtomicBoolean(); source.takeUntil(v -&gt; shouldStop.get()) .cache() .takeUntil(v -&gt; shouldStop.get()) .subscribe(...); </code></pre> Since the operator doesn't allow clearing the cached values either, the possible workaround is to forget all references to it via  {@link Observable#onTerminateDetach()} applied along with the previousworkaround: <pre><code> AtomicBoolean shouldStop = new AtomicBoolean(); source.takeUntil(v -&gt; shouldStop.get()) .onTerminateDetach() .cache() .takeUntil(v -&gt; shouldStop.get()) .onTerminateDetach() .subscribe(...); </code></pre> <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes this Single in an unbounded fashion but respects the backpressure of each downstream Subscriber individually.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code cache} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a Single that, when first subscribed to, caches its response for thebenefit of subsequent subscribers
 * @see <a href="http://reactivex.io/documentation/operators/replay.html">ReactiveX operators documentation: Replay</a>
 */
/** 
 * Returns an Observable that emits the item emitted by the source Single, then the item emitted by the specified Single. <p> <img width="640" height="335" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatWith.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param t1 a Single to be concatenated after the current
 * @return an Observable that emits the item emitted by the source Single, followed by the item emitted by{@code t1}
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns a Single that is based on applying a specified function to the item emitted by the source Single, where that function returns a Single. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMap} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function that, when applied to the item emitted by the source Single, returns a Single
 * @return the Single returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
/** 
 * Returns an Observable that emits items based on applying a specified function to the item emitted by the source Observable, where that function returns an Observable. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapObservable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function that, when applied to the item emitted by the source Single, returns an Observable
 * @return the Observable returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
/** 
 * Returns a  {@link Completable} that completes based on applying a specified function to the item emitted by thesource  {@link Completable}, where that function returns a  {@link Completable}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapCompletable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param func a function that, when applied to the item emitted by the source Single, returns a Completable
 * @return the Completable returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that applies a specified function to the item emitted by the source Single and emits the result of this function application. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.map.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code map} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function to apply to the item emitted by the Single
 * @return a Single that emits the item from the source Single, transformed by the specified function
 * @see <a href="http://reactivex.io/documentation/operators/map.html">ReactiveX operators documentation: Map</a>
 */
/** 
 * Flattens this and another Single into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code mergeWith} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code mergeWith} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param t1 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Modifies a Single to emit its item (or notify of its error) on a specified  {@link Scheduler}, asynchronously. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.observeOn.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param scheduler the  {@link Scheduler} to notify subscribers on
 * @return the source Single modified so that its subscribers are notified on the specified{@link Scheduler}
 * @see <a href="http://reactivex.io/documentation/operators/observeon.html">ReactiveX operators documentation: ObserveOn</a>
 * @see <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 * @see #subscribeOn
 */
/** 
 * Instructs a Single to emit an item (returned by a specified function) rather than invoking {@link SingleSubscriber#onError onError} if it encounters an error.<p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorReturn.png" alt=""> <p> By default, when a Single encounters an error that prevents it from emitting the expected item to its subscriber, the Single invokes its subscriber's  {@link Subscriber#onError} method, and then quitswithout invoking any more of its subscriber's methods. The  {@code onErrorReturn} method changes thisbehavior. If you pass a function ( {@code resumeFunction}) to a Single's  {@code onErrorReturn} method, ifthe original Single encounters an error, instead of invoking its subscriber's {@link Subscriber#onError} method, it will instead emit the return value of {@code resumeFunction}. <p> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorReturn} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeFunction a function that returns an item that the new Single will emit if the source Single encounters an error
 * @return the original Single with appropriately modified behavior
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 */
/** 
 * Instructs a Single to pass control to another Single rather than invoking {@link Observer#onError(Throwable)} if it encounters an error.<p/> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt=""> <p/> By default, when a Single encounters an error that prevents it from emitting the expected item to its  {@link Observer}, the Single invokes its Observer's  {@code onError} method, and then quitswithout invoking any more of its Observer's methods. The  {@code onErrorResumeNext} method changes thisbehavior. If you pass another Single ( {@code resumeSingleInCaseOfError}) to a Single's {@code onErrorResumeNext} method, if the original Single encounters an error, instead of invoking itsObserver's  {@code onError} method, it will instead relinquish control to {@code resumeSingleInCaseOfError} whichwill invoke the Observer's  {@link Observer#onNext onNext} method if it is able to do so. In such a case,because no Single necessarily invokes  {@code onError}, the Observer may never know that an error happened. <p/> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeSingleInCaseOfError a Single that will take control if source Single encounters an error.
 * @return the original Single, with appropriately modified behavior.
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Instructs a Single to pass control to another Single rather than invoking {@link Observer#onError(Throwable)} if it encounters an error.<p/> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt=""> <p/> By default, when a Single encounters an error that prevents it from emitting the expected item to its  {@link Observer}, the Single invokes its Observer's  {@code onError} method, and then quitswithout invoking any more of its Observer's methods. The  {@code onErrorResumeNext} method changes thisbehavior. If you pass a function that will return another Single ( {@code resumeFunctionInCaseOfError}) to a Single's {@code onErrorResumeNext} method, if the original Single encounters an error, instead of invoking itsObserver's  {@code onError} method, it will instead relinquish control to {@code resumeSingleInCaseOfError} whichwill invoke the Observer's  {@link Observer#onNext onNext} method if it is able to do so. In such a case,because no Single necessarily invokes  {@code onError}, the Observer may never know that an error happened. <p/> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeFunctionInCaseOfError a function that returns a Single that will take control if source Single encounters an error.
 * @return the original Single, with appropriately modified behavior.
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Subscribes to a Single but ignore its emission or notification. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws OnErrorNotImplementedException if the Single tries to call  {@link Subscriber#onError}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
/** 
 * Subscribes to a Single and provides a callback to handle the item it emits. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the  {@code Action1<T>} you have designed to accept the emission from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalArgumentException if  {@code onNext} is null
 * @throws OnErrorNotImplementedException if the Single tries to call  {@link Subscriber#onError}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
/** 
 * Subscribes to a Single and provides callbacks to handle the item it emits or any error notification it issues. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the  {@code Action1<T>} you have designed to accept the emission from the Single
 * @param onError the  {@code Action1<Throwable>} you have designed to accept any error notification from theSingle
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 * @throws IllegalArgumentException if  {@code onNext} is null, orif  {@code onError} is null
 */
/** 
 * Subscribes to a Single and invokes the  {@link OnSubscribe} function without any contract protection,error handling, unsubscribe, or execution hooks. <p> Use this only for implementing an  {@link Operator} that requires nested subscriptions. For otherpurposes, use  {@link #subscribe(Subscriber)} which ensures the Rx contract and other functionality.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code unsafeSubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscriber the Subscriber that will handle the emission or notification from the Single
 * @return the subscription that allows unsubscribing
 */
//
//
//
//
//
//
//
//
/** 
 * Subscribes an Observer to this single and returns a Subscription that allows unsubscription.
 * @param observer the Observer to subscribe
 * @return the Subscription that allows unsubscription
 */
/** 
 * Subscribes to a Single and provides a Subscriber that implements functions to handle the item the Single emits or any error notification it issues. <p> A typical implementation of  {@code subscribe} does the following:<ol> <li>It stores a reference to the Subscriber in a collection object, such as a  {@code List<T>} object.</li><li>It returns a reference to the  {@link Subscription} interface. This enables Subscribers tounsubscribe, that is, to stop receiving the item or notification before the Single completes.</li> </ol><p> A  {@code Single<T>} instance is responsible for accepting all subscriptions and notifying allSubscribers. Unless the documentation for a particular  {@code Single<T>} implementation indicatesotherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will receive their notifications. <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscriber the  {@link Subscriber} that will handle the emission or notification from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalStateException if  {@code subscribe} is unable to obtain an {@code OnSubscribe<>} function
 * @throws IllegalArgumentException if the  {@link Subscriber} provided as the argument to {@code subscribe} is {@code null}
 * @throws OnErrorNotImplementedException if the  {@link Subscriber}'s  {@code onError} method is null
 * @throws RuntimeException if the  {@link Subscriber}'s  {@code onError} method itself threw a {@code Throwable}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
//
//
/* *///
//
/** 
 * Subscribes to a Single and provides a  {@link SingleSubscriber} that implements functions to handle theitem the Single emits or any error notification it issues. <p> A typical implementation of  {@code subscribe} does the following:<ol> <li>It stores a reference to the Subscriber in a collection object, such as a  {@code List<T>} object.</li><li>It returns a reference to the  {@link Subscription} interface. This enables Subscribers tounsubscribe, that is, to stop receiving the item or notification before the Single completes.</li> </ol><p> A  {@code Single<T>} instance is responsible for accepting all subscriptions and notifying allSubscribers. Unless the documentation for a particular  {@code Single<T>} implementation indicatesotherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will receive their notifications. <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param te the  {@link SingleSubscriber} that will handle the emission or notification from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalStateException if  {@code subscribe} is unable to obtain an {@code OnSubscribe<>} function
 * @throws IllegalArgumentException if the  {@link SingleSubscriber} provided as the argument to {@code subscribe} is {@code null}
 * @throws OnErrorNotImplementedException if the  {@link SingleSubscriber}'s  {@code onError} method is null
 * @throws RuntimeException if the  {@link SingleSubscriber}'s  {@code onError} method itself threw a {@code Throwable}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
//
//
//
//
//
//
/** 
 * Asynchronously subscribes subscribers to this Single on the specified  {@link Scheduler}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribeOn.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param scheduler the  {@link Scheduler} to perform subscription actions on
 * @return the source Single modified so that its subscriptions happen on the specified {@link Scheduler}
 * @see <a href="http://reactivex.io/documentation/operators/subscribeon.html">ReactiveX operators documentation: SubscribeOn</a>
 * @see <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 * @see #observeOn
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until a Completable terminates. Upon termination of  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Completable whose termination will cause  {@code takeUntil} to emit the item from the sourceSingle
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} terminates.
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until an Observable emits an item. Upon emission of an item from  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Observable whose first emitted item will cause  {@code takeUntil} to emit the item from the sourceSingle
 * @param < E > the type of items emitted by  {@code other}
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} emitsits first item
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until a second Single emits an item. Upon emission of an item from  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Single whose emitted item will cause  {@code takeUntil} to emit the item from the source Single
 * @param < E > the type of item emitted by  {@code other}
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} emits its item
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Calls the specified converter function during assembly time and returns its resulting value. <p> This allows fluent conversion to any other type.
 * @param < R > the resulting object type
 * @param converter the function that receives the current Single instance and returns a value
 * @return the value returned by the function
 */
/** 
 * Converts this Single into an  {@link Observable}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">
 * @return an {@link Observable} that emits a single item T.
 */
/** 
 * Returns a  {@link Completable} that discards result of the {@link Single} (similar to{@link Observable#ignoreElements()}) and calls  {@code onCompleted} when this source {@link Single} calls{@code onSuccess}. Error terminal event is propagated. <p> <img width="640" height="295" src= "https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toCompletable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code toCompletable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@link Completable} that calls {@code onCompleted} on it's subscriber when the source {@link Single}calls  {@code onSuccess}.
 * @see <a href="http://reactivex.io/documentation/completable.html">ReactiveX documentation: Completable</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parentheticalwith the release number).
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item. If it is not emitted within the specified timeout duration, the resulting Single terminates and notifies subscribers of a  {@code TimeoutException}. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code timeout} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param timeout maximum duration before the Single times out
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument.
 * @return the source Single modified to notify subscribers of a {@code TimeoutException} in case of atimeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, where this policy is governed on a specified Scheduler. If the item is not emitted within the specified timeout duration, the resulting Single terminates and notifies subscribers of a  {@code TimeoutException}. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param timeout maximum duration before the Single times out
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param scheduler the Scheduler to run the timeout timers on
 * @return the source Single modified to notify subscribers of a {@code TimeoutException} in case of atimeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item. If it is not emitted within the specified timeout duration, the resulting Single instead mirrors a fallback Single. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code timeout} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param timeout maximum time before a timeout occurs
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param other the fallback Single to use in case of a timeout
 * @return the source Single modified to switch to the fallback Single in case of a timeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, using a specified Scheduler. If the item isn't emitted within the specified timeout duration, the resulting Single instead mirrors a fallback Single. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param timeout maximum duration before a timeout occurs
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param other the Single to use as the fallback in case of a timeout
 * @param scheduler the  {@link Scheduler} to run the timeout timers on
 * @return the source Single modified so that it will switch to the fallback Single in case of a timeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Converts a Single into a  {@link BlockingSingle} (a Single with blocking operators).<dl> <dt><b>Scheduler:</b></dt> <dd> {@code toBlocking} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@code BlockingSingle} version of this Single.
 * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
 */
/** 
 * Returns a Single that emits the result of applying a specified function to the pair of items emitted by the source Single and another specified Single. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zipWith} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T2 > the type of items emitted by the  {@code other} Single
 * @param < R > the type of items emitted by the resulting Single
 * @param other the other Observable
 * @param zipFunction a function that combines the pairs of items from the two Observables to generate the items to be emitted by the resulting Single
 * @return an Observable that pairs up values from the source Observable and the {@code other} Observableand emits the results of  {@code zipFunction} applied to these pairs
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action if it calls {@code onError}. <p> In case the onError action throws, the downstream will receive a composite exception containing the original exception and the exception thrown by onError. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnError} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onError the action to invoke if the source  {@link Single} calls {@code onError}
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action when it calls {@code onSuccess} or {@code onError}. <p> <img width="640" height="310" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnEach.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnEach} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onNotification the action to invoke when the source  {@link Single} calls {@code onSuccess} or {@code onError}.
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action when it calls {@code onSuccess}. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnNext.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnSuccess} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the action to invoke when the source  {@link Single} calls {@code onSuccess}
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@code Single} so that it invokes the given action when it is subscribed fromits subscribers. Each subscription will result in an invocation of the given action except when the source  {@code Single} is reference counted, in which case the source {@code Single} will invokethe given action for the first subscription. <p> <img width="640" height="390" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSubscribe.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnSubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscribe the action that gets called when an observer subscribes to this  {@code Single}
 * @return the source {@code Single} modified so as to call this Action when appropriate
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that emits the items emitted by the source Single shifted forward in time by a specified delay. Error notifications from the source Single are not delayed. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param delay the delay to shift the source by
 * @param unit the time unit of  {@code delay}
 * @param scheduler the  {@link Scheduler} to use for delaying
 * @return the source Single shifted in time by the specified delay
 * @see <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that emits the items emitted by the source Single shifted forward in time by a specified delay. Error notifications from the source Observable are not delayed. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code delay} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param delay the delay to shift the source by
 * @param unit the  {@link TimeUnit} in which {@code period} is defined
 * @return the source Single shifted in time by the specified delay
 * @see <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a  {@link Single} that calls a {@link Single} factory to create a {@link Single} for each new Observerthat subscribes. That is, for each subscriber, the actual  {@link Single} that subscriber observes isdetermined by the factory function. <p> <img width="640" height="340" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/defer.png" alt=""> <p> The defer Observer allows you to defer or delay emitting value from a  {@link Single} until such time as anObserver subscribes to the  {@link Single}. This allows an  {@link Observer} to easily obtain updates or arefreshed version of the sequence. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code defer} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param singleFactory the  {@link Single} factory function to invoke for each {@link Observer} that subscribes to theresulting  {@link Single}.
 * @param < T > the type of the items emitted by the  {@link Single}.
 * @return a {@link Single} whose {@link Observer}s' subscriptions trigger an invocation of the given {@link Single} factory function.
 * @see <a href="http://reactivex.io/documentation/operators/defer.html">ReactiveX operators documentation: Defer</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes the given action when it is unsubscribed fromits subscribers. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnUnsubscribe.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnUnsubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param action the action that gets called when this  {@link Single} is unsubscribed.
 * @return the source {@link Single} modified so as to call this Action when appropriate.
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Registers an  {@link Action0} to be called when this {@link Single} invokes either{@link SingleSubscriber#onSuccess(Object)}  onSuccess} or {@link SingleSubscriber#onError onError}. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/finallyDo.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doAfterTerminate} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param action an  {@link Action0} to be invoked when the source {@link Single} finishes.
 * @return a {@link Single} that emits the same item or error as the source {@link Single}, then invokes the {@link Action0}
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * FOR INTERNAL USE ONLY. <p> Converts  {@link Iterable} of {@link Single} to array of {@link Single}.
 * @param singlesIterable non null iterable of  {@link Single}.
 * @return array of {@link Single} with same length as passed iterable.
 */
//
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}(infinite retry count). <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> If the source Single calls  {@link SingleSubscriber#onError}, this method will resubscribe to the source Single rather than propagating the  {@code onError} call.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}up to a specified number of retries. <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> If the source Single calls  {@link SingleSubscriber#onError}, this method will resubscribe to the source Single for a maximum of  {@code count} resubscriptions rather than propagating the{@code onError} call.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param count number of retry attempts before failing
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}and the predicate returns true for that specific exception and retry count. <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> <dl> <dt><b>Backpressure Support:</b></dt> <dd>This operator honors backpressure.</td> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param predicate the predicate that determines if a resubscription may happen in case of a specific exception and retry count
 * @return the source Single modified with retry logic
 * @see #retry()
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that emits the same values as the source Single with the exception of an {@code onError}. An  {@code onError} notification from the source will result in the emission of a{@link Throwable} item to the Observable provided as an argument to the {@code notificationHandler}function. <p>Emissions from the handler  {@code Observable} is treated as follows:<ul> <li>If the handler  {@code Observable} emits an {@code onCompleted} the {@code retryWhen} will call {@code onError}with  {@code NoSuchElementException} on the child subscription.</li><li>If the handler  {@code Observable} emits an {@code onError} the {@code retryWhen} will call{@code onError} with the same Throwable instance on the child subscription.<li>Otherwise, the operator will resubscribe to the source Single.</li> </ul> <p>The  {@code notificationHandler} function is called for each subscriber individually. This allows per-Subscriberstate to be added to the error notification sequence.</p> <pre><code> single.retryWhen(error -&gt; { AtomicInteger counter = new AtomicInteger(); return error.takeWhile(e -&gt; counter.incrementAndGet() &lt; 3).map(e -&gt; "retry"); }).subscribe(...); </code></pre> <p> Note that you must compose over the input  {@code Observable} provided in the function call because {@link #retryWhen} expectsan emission of the exception to be matched by an event from the handler Observable. <p> <img width="640" height="430" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retryWhen.f.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code retryWhen} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param notificationHandler receives an Observable of notifications with which a user can complete or error, aborting the retry
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Constructs a Single that creates a dependent resource object which is disposed of on unsubscription. <p> <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code using} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the generated source
 * @param < Resource > the type of the per-subscriber resource
 * @param resourceFactory the factory function to create a resource object that depends on the Single
 * @param singleFactory the factory function to create a Single
 * @param disposeAction the function that will dispose of the resource
 * @return the Single whose lifetime controls the lifetime of the dependent resource object
 * @see <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
 */
/** 
 * Constructs a Single that creates a dependent resource object which is disposed of just before termination if you have set  {@code disposeEagerly} to {@code true} and unsubscription does not occurbefore termination. Otherwise resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous Single that reuses resources.  {@code disposeAction} willonly be called once per subscription. <p> <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code using} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the generated source
 * @param < Resource > the type of the per-subscriber resource
 * @param resourceFactory the factory function to create a resource object that depends on the Single
 * @param singleFactory the factory function to create a Single
 * @param disposeAction the function that will dispose of the resource
 * @param disposeEagerly if  {@code true} then disposal will happen either on unsubscription or just before emission ofa terminal event ( {@code onComplete} or {@code onError}).
 * @return the Single whose lifetime controls the lifetime of the dependent resource object
 * @see <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that delays the subscription to this Single until the Observable completes. In case the  {@code onError} of the supplied observer throws,the exception will be propagated to the downstream subscriber and will result in skipping the subscription of this Single. <p> <dl> <dt><b>Scheduler:</b></dt> <dd>This method does not operate by default on a particular  {@link Scheduler}.</dd> </dl>
 * @param other the Observable that should trigger the subscriptionto this Single.
 * @return a Single that delays the subscription to this Singleuntil the Observable emits an element or completes normally.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single which makes sure when a subscriber cancels the subscription, the dispose is called on the specified scheduler
 * @param scheduler the target scheduler where to execute the cancellation
 * @return the new Single instance
 * @since 1.2.8 - experimental
 */
//
//
//
/** 
 * Creates an AssertableSubscriber that requests  {@code Long.MAX_VALUE} and subscribesit to this Observable. <dl> <dt><b>Backpressure:</b><dt> <dd>The returned AssertableSubscriber consumes this Observable in an unbounded fashion.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code test} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return the new AssertableSubscriber instance
 * @since 1.2.3
 */
RIGHT COMMENTS
/** 
 * Copyright 2015 Netflix, Inc. Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */
/** 
 * The Single class implements the Reactive Pattern for a single value response. See  {@link Observable} for theimplementation of the Reactive Pattern for a stream or vector of values. <p> {@code Single} behaves the same as {@link Observable} except that it can only emit either a single successfulvalue, or an error (there is no "onComplete" notification as there is for  {@link Observable}) <p> Like an  {@link Observable}, a  {@code Single} is lazy, can be either "hot" or "cold", synchronous orasynchronous. <p> The documentation for this class makes use of marble diagrams. The following legend explains these diagrams: <p> <img width="605" height="285" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.legend.png" alt=""> <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>.
 * @param < T > the type of the item emitted by the Single
 * @since 1.2
 */
/** 
 * Creates a Single with a Function to execute when it is subscribed to (executed). <p> <em>Note:</em> Use  {@link #create(OnSubscribe)} to create a Single, instead of this constructor,unless you specifically have a need for inheritance.
 * @param f {@code f} to be executed when {@code execute(SingleSubscriber)} or{@code subscribe(Subscriber)} is called
 */
/** 
 * Creates a Single with a Function to execute when it is subscribed to (executed). <p> <em>Note:</em> Use  {@link #create(OnSubscribe)} to create a Single, instead of this constructor,unless you specifically have a need for inheritance.
 * @param f {@code f} to be executed when {@code execute(SingleSubscriber)} or{@code subscribe(Subscriber)} is called
 * @deprecated 1.2.1: Not recommended, use {@link #Single(OnSubscribe)} to avoid wrapping andconversion between the Observable and Single protocols.
 */
/** 
 * Returns a Single that will execute the specified function when a  {@link SingleSubscriber} executes it ora  {@link Subscriber} subscribes to it.<p> <img width="640" height="200" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.create.png" alt=""> <p> Write the function you pass to  {@code create} so that it behaves as a Single: It should invoke theSingleSubscriber  {@link SingleSubscriber#onSuccess onSuccess} and/or{@link SingleSubscriber#onError onError} methods appropriately.<p> A well-formed Single must invoke either the SingleSubscriber's  {@code onSuccess} method exactly once orits  {@code onError} method exactly once.<p> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code create} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the type of the item that this Single emits
 * @param f a function that accepts an  {@code SingleSubscriber<T>}, and invokes its  {@code onSuccess} or{@code onError} methods as appropriate
 * @return a Single that, when a {@link Subscriber} subscribes to it, will execute the specified function
 * @see <a href="http://reactivex.io/documentation/operators/create.html">ReactiveX operators documentation: Create</a>
 */
/** 
 * Invoked when Single.execute is called.
 * @param < T > the output value type
 */
//
/** 
 * Lifts a function to the current Single and returns a new Single that when subscribed to will pass the values of the current Single through the Operator function. <p> In other words, this allows chaining TaskExecutors together on a Single for acting on the values within the Single. <p> {@code task.map(...).filter(...).lift(new OperatorA()).lift(new OperatorB(...)).subscribe() }<p> If the operator you are creating is designed to act on the item emitted by a source Single, use {@code lift}. If your operator is designed to transform the source Single as a whole (for instance, by applying a particular set of existing RxJava operators to it) use  {@link #compose}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code lift} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the downstream's value type (output)
 * @param lift the Operator that implements the Single-operating function to be applied to the source Single
 * @return a Single that is the result of applying the lifted Operator to the source Single
 * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
/** 
 * Transform a Single by applying a particular Transformer function to it. <p> This method operates on the Single itself whereas  {@link #lift} operates on the Single's Subscribers orObservers. <p> If the operator you are creating is designed to act on the individual item emitted by a Single, use {@link #lift}. If your operator is designed to transform the source Single as a whole (for instance, by applying a particular set of existing RxJava operators to it) use  {@code compose}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code compose} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the value type of the single returned by the transformer function
 * @param transformer implements the function that transforms the source Single
 * @return the source Single, transformed by the transformer function
 * @see <a href="https://github.com/ReactiveX/RxJava/wiki/Implementing-Your-Own-Operators">RxJava wiki: Implementing Your Own Operators</a>
 */
/** 
 * Convenience type that allows a function to fluently transform a Single into another Single via  {@link #compose}. <pre> Transformer&lt;Integer, Integer> transformer = s -> s.subscribeOn(Schedulers.io()) .observeOn(AndroidSchedulers.mainThread()); Single.just(1) .compose(transformer) .subscribe(System.out::println); </pre>
 * @param < T > the source Single's value type
 * @param < R > the transformed Single's value type
 */
//
/** 
 * Hides the identity of this Single. <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">
 */
//
/* *//** 
 * Returns an Observable that emits the items emitted by two Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @return an Observable that emits items emitted by the two source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by three Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @return an Observable that emits items emitted by the three source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by four Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @return an Observable that emits items emitted by the four source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by five Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @return an Observable that emits items emitted by the five source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by six Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @return an Observable that emits items emitted by the six source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by seven Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @return an Observable that emits items emitted by the seven source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by eight Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @param t8 a Single to be concatenated
 * @return an Observable that emits items emitted by the eight source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns an Observable that emits the items emitted by nine Singles, one after the other. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concat.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be concatenated
 * @param t2 a Single to be concatenated
 * @param t3 a Single to be concatenated
 * @param t4 a Single to be concatenated
 * @param t5 a Single to be concatenated
 * @param t6 a Single to be concatenated
 * @param t7 a Single to be concatenated
 * @param t8 a Single to be concatenated
 * @param t9 a Single to be concatenated
 * @return an Observable that emits items emitted by the nine source Singles, one after the other.
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns a Single that invokes a subscriber's  {@link SingleSubscriber#onError onError} method when thesubscriber subscribes to it. <p> <img width="640" height="190" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.error.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code error} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param exception the particular Throwable to pass to  {@link SingleSubscriber#onError onError}
 * @param < T > the type of the item (ostensibly) emitted by the Single
 * @return a Single that invokes the subscriber's {@link SingleSubscriber#onError onError} method whenthe subscriber subscribes to it
 * @see <a href="http://reactivex.io/documentation/operators/empty-never-throw.html">ReactiveX operators documentation: Throw</a>
 */
/** 
 * Converts a  {@link Future} into a {@code Single}. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a Single that emits the returnvalue of the  {@link Future#get} method of that object, by passing the object into the {@code from}method. <p> <em>Important note:</em> This Single is blocking; you cannot unsubscribe from it. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code from} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param future the source  {@link Future}
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Converts a  {@link Future} into a {@code Single}, with a timeout on the Future. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a {@code Single} that emitsthe return value of the  {@link Future#get} method of that object, by passing the object into the{@code from} method.<p> <em>Important note:</em> This  {@code Single} is blocking; you cannot unsubscribe from it.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code from} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param future the source  {@link Future}
 * @param timeout the maximum time to wait before calling  {@code get}
 * @param unit the  {@link TimeUnit} of the {@code timeout} argument
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Converts a  {@link Future}, operating on a specified  {@link Scheduler}, into a  {@code Single}. <p> <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.from.Future.s.png" alt=""> <p> You can convert any object that supports the  {@link Future} interface into a {@code Single} that emitsthe return value of the  {@link Future#get} method of that object, by passing the object into the{@code from} method.<dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param future the source  {@link Future}
 * @param scheduler the  {@link Scheduler} to wait for the Future on. Use a Scheduler such as{@link Schedulers#io()} that can block and wait on the Future
 * @param < T > the type of object that the  {@link Future} returns, and also the type of item to be emitted bythe resulting  {@code Single}
 * @return a {@code Single} that emits the item from the source {@link Future}
 * @see <a href="http://reactivex.io/documentation/operators/from.html">ReactiveX operators documentation: From</a>
 */
/** 
 * Returns a  {@link Single} that invokes passed function and emits its result for each new Observer that subscribes.<p> Allows you to defer execution of passed function until Observer subscribes to the  {@link Single}. It makes passed function "lazy". Result of the function invocation will be emitted by the  {@link Single}. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code fromCallable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param func function which execution should be deferred, it will be invoked when Observer will subscribe to the  {@link Single}.
 * @param < T > the type of the item emitted by the  {@link Single}.
 * @return a {@link Single} whose {@link Observer}s' subscriptions trigger an invocation of the given function.
 */
/** 
 * Provides an API (in a cold Single) that bridges the Single-reactive world with the callback-based world. <p>The  {@link SingleEmitter} allows registering a callback forcancellation/unsubscription of a resource. <p> Example: <pre><code> Single.fromEmitter(emitter -&gt; { Callback listener = new Callback() { &#64;Override public void onEvent(Event e) { emitter.onSuccess(e.getData()); } &#64;Override public void onFailure(Exception e) { emitter.onError(e); } }; AutoCloseable c = api.someMethod(listener); emitter.setCancellation(c::close); }); </code></pre> <p>All of the SingleEmitter's methods are thread-safe and ensure the Single's protocol are held.
 * @param < T > the success value type
 * @param producer the callback invoked for each incoming SingleSubscriber
 * @return the new Single instance
 * @since 1.2.3 - experimental (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a  {@code Single} that emits a specified item.<p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.just.png" alt=""> <p> To convert any object into a  {@code Single} that emits that object, pass that object into the{@code just} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code just} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param value the item to emit
 * @param < T > the type of that item
 * @return a {@code Single} that emits {@code value}
 * @see <a href="http://reactivex.io/documentation/operators/just.html">ReactiveX operators documentation: Just</a>
 */
/** 
 * Flattens a  {@code Single} that emits a {@code Single} into a single {@code Single} that emits the itememitted by the nested  {@code Single}, without any transformation. <p> <img width="640" height="370" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.oo.png" alt=""> <p> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the sources and the output
 * @param source a  {@code Single} that emits a {@code Single}
 * @return a {@code Single} that emits the item that is the result of flattening the {@code Single} emittedby  {@code source}
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens two Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens three Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens four Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens five Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens six Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens seven Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens eight Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @param t8 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Flattens nine Singles into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code merge} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the common value type
 * @param t1 a Single to be merged
 * @param t2 a Single to be merged
 * @param t3 a Single to be merged
 * @param t4 a Single to be merged
 * @param t5 a Single to be merged
 * @param t6 a Single to be merged
 * @param t7 a Single to be merged
 * @param t8 a Single to be merged
 * @param t9 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Merges all Singles emitted by the Observable and runs them together until the source Observable and all inner Singles complete normally. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes items from the Observable in an unbounded manner and honors downstream backpressure.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @return the new Observable instance
 * @see #merge(Observable,int)
 * @see #mergeDelayError(Observable)
 * @see #mergeDelayError(Observable,int)
 * @since 1.2.7 - experimental
 */
/** 
 * Merges the Singles emitted by the Observable and runs up to the given number of them together at a time, until the Observable and all inner Singles terminate. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes at most maxConcurrent items from the Observable and one-by-one after as the inner Singles terminate. The operator ignores downstream backpressure as it doesn't emit items but only the terminal event.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapSingle} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @param maxConcurrency the maximum number of inner Singles to run at a time
 * @return the new Observable instance
 * @since 1.2.7 - experimental
 */
/** 
 * Merges all Singles emitted by the Observable and runs them together, delaying errors from them and the Observable, until the source Observable and all inner Singles complete normally. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes items from the Observable in an unbounded manner and honors downstream backpressure.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code merge} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @return the new Observable instance
 * @see #mergeDelayError(Observable,int)
 * @see #merge(Observable)
 * @see #merge(Observable,int)
 * @since 1.2.7 - experimental
 */
/** 
 * Merges the Singles emitted by the Observable and runs up to the given number of them together at a time, delaying errors from them and the Observable, until the Observable and all inner Singles terminate. <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes at most maxConcurrent items from the Observable and one-by-one after as the inner Singles terminate. The operator ignores downstream backpressure as it doesn't emit items but only the terminal event.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapSingle} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the inner Singles and the resulting Observable
 * @param sources the Observable that emits Singles to be merged
 * @param maxConcurrency the maximum number of inner Singles to run at a time
 * @return the new Observable instance
 * @since 1.2.7 - experimental
 */
/** 
 * Returns a Single that emits the results of a specified combiner function applied to two items emitted by two other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that emits the results of a specified combiner function applied to three items emitted by three other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to four items emitted by four other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to five items emitted by five other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to six items emitted by six other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to seven items emitted by seven other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to eight items emitted by eight other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < T8 > the eighth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param s8 an eighth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns an Observable that emits the results of a specified combiner function applied to nine items emitted by nine other Singles. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T1 > the first source Single's value type
 * @param < T2 > the second source Single's value type
 * @param < T3 > the third source Single's value type
 * @param < T4 > the fourth source Single's value type
 * @param < T5 > the fifth source Single's value type
 * @param < T6 > the sixth source Single's value type
 * @param < T7 > the seventh source Single's value type
 * @param < T8 > the eighth source Single's value type
 * @param < T9 > the ninth source Single's value type
 * @param < R > the result value type
 * @param s1 the first source Single
 * @param s2 a second source Single
 * @param s3 a third source Single
 * @param s4 a fourth source Single
 * @param s5 a fifth source Single
 * @param s6 a sixth source Single
 * @param s7 a seventh source Single
 * @param s8 an eighth source Single
 * @param s9 a ninth source Single
 * @param zipFunction a function that, when applied to the item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that emits the result of specified combiner function applied to combination of items emitted, in sequence, by an Iterable of other Singles. <p> {@code zip} applies this function in strict sequence.<p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zip} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param singles an Iterable of source Singles. Should not be empty because  {@link Single} either emits result or error.{@link java.util.NoSuchElementException} will be emit as error if Iterable will be empty.
 * @param zipFunction a function that, when applied to an item emitted by each of the source Singles, results in an item that will be emitted by the resulting Single
 * @return a Single that emits the zipped results
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Returns a Single that subscribes to this Single lazily, caches its success or error event and replays it to all the downstream subscribers. <p> <img width="640" height="410" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/cache.png" alt=""> <p> This is useful when you want a Single to cache its response and you can't control the subscribe/unsubscribe behavior of all the  {@link Subscriber}s. <p> The operator subscribes only when the first downstream subscriber subscribes and maintains a single subscription towards this Single. In contrast, the operator family of  {@link Observable#replay()}that return a  {@link ConnectableObservable} require an explicit call to {@link ConnectableObservable#connect()}. <p> <em>Note:</em> You sacrifice the ability to unsubscribe from the origin when you use the  {@code cache}Observer so be careful not to use this Observer on Observables that emit an infinite or very large number of items that will use up memory. A possible workaround is to apply `takeUntil` with a predicate or another source before (and perhaps after) the application of cache(). <pre><code> AtomicBoolean shouldStop = new AtomicBoolean(); source.takeUntil(v -&gt; shouldStop.get()) .cache() .takeUntil(v -&gt; shouldStop.get()) .subscribe(...); </code></pre> Since the operator doesn't allow clearing the cached values either, the possible workaround is to forget all references to it via  {@link Observable#onTerminateDetach()} applied along with the previousworkaround: <pre><code> AtomicBoolean shouldStop = new AtomicBoolean(); source.takeUntil(v -&gt; shouldStop.get()) .onTerminateDetach() .cache() .takeUntil(v -&gt; shouldStop.get()) .onTerminateDetach() .subscribe(...); </code></pre> <dl> <dt><b>Backpressure:</b></dt> <dd>The operator consumes this Single in an unbounded fashion but respects the backpressure of each downstream Subscriber individually.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code cache} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a Single that, when first subscribed to, caches its response for thebenefit of subsequent subscribers
 * @see <a href="http://reactivex.io/documentation/operators/replay.html">ReactiveX operators documentation: Replay</a>
 */
/** 
 * Returns an Observable that emits the item emitted by the source Single, then the item emitted by the specified Single. <p> <img width="640" height="335" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatWith.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code concat} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param t1 a Single to be concatenated after the current
 * @return an Observable that emits the item emitted by the source Single, followed by the item emitted by{@code t1}
 * @see <a href="http://reactivex.io/documentation/operators/concat.html">ReactiveX operators documentation: Concat</a>
 */
/** 
 * Returns a Single that is based on applying a specified function to the item emitted by the source Single, where that function returns a Single. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMap} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function that, when applied to the item emitted by the source Single, returns a Single
 * @return the Single returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
/** 
 * Returns an Observable that emits items based on applying a specified function to the item emitted by the source Observable, where that function returns an Observable. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapObservable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function that, when applied to the item emitted by the source Single, returns an Observable
 * @return the Observable returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 */
/** 
 * Returns a  {@link Completable} that completes based on applying a specified function to the item emitted by thesource  {@link Completable}, where that function returns a  {@link Completable}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapCompletable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code flatMapCompletable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param func a function that, when applied to the item emitted by the source Single, returns a Completable
 * @return the Completable returned from {@code func} when applied to the item emitted by the source Single
 * @see <a href="http://reactivex.io/documentation/operators/flatmap.html">ReactiveX operators documentation: FlatMap</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that applies a specified function to the item emitted by the source Single and emits the result of this function application. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.map.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code map} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < R > the result value type
 * @param func a function to apply to the item emitted by the Single
 * @return a Single that emits the item from the source Single, transformed by the specified function
 * @see <a href="http://reactivex.io/documentation/operators/map.html">ReactiveX operators documentation: Map</a>
 */
/** 
 * Flattens this and another Single into a single Observable, without any transformation. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.merge.png" alt=""> <p> You can combine items emitted by multiple Singles so that they appear as a single Observable, by using the  {@code mergeWith} method.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code mergeWith} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param t1 a Single to be merged
 * @return an Observable that emits all of the items emitted by the source Singles
 * @see <a href="http://reactivex.io/documentation/operators/merge.html">ReactiveX operators documentation: Merge</a>
 */
/** 
 * Modifies a Single to emit its item (or notify of its error) on a specified  {@link Scheduler}, asynchronously. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.observeOn.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param scheduler the  {@link Scheduler} to notify subscribers on
 * @return the source Single modified so that its subscribers are notified on the specified{@link Scheduler}
 * @see <a href="http://reactivex.io/documentation/operators/observeon.html">ReactiveX operators documentation: ObserveOn</a>
 * @see <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 * @see #subscribeOn
 */
/** 
 * Instructs a Single to emit an item (returned by a specified function) rather than invoking {@link SingleSubscriber#onError onError} if it encounters an error.<p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorReturn.png" alt=""> <p> By default, when a Single encounters an error that prevents it from emitting the expected item to its subscriber, the Single invokes its subscriber's  {@link Subscriber#onError} method, and then quitswithout invoking any more of its subscriber's methods. The  {@code onErrorReturn} method changes thisbehavior. If you pass a function ( {@code resumeFunction}) to a Single's  {@code onErrorReturn} method, ifthe original Single encounters an error, instead of invoking its subscriber's {@link Subscriber#onError} method, it will instead emit the return value of {@code resumeFunction}. <p> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorReturn} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeFunction a function that returns an item that the new Single will emit if the source Single encounters an error
 * @return the original Single with appropriately modified behavior
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 */
/** 
 * Instructs a Single to pass control to another Single rather than invoking {@link Observer#onError(Throwable)} if it encounters an error.<p/> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt=""> <p/> By default, when a Single encounters an error that prevents it from emitting the expected item to its  {@link Observer}, the Single invokes its Observer's  {@code onError} method, and then quitswithout invoking any more of its Observer's methods. The  {@code onErrorResumeNext} method changes thisbehavior. If you pass another Single ( {@code resumeSingleInCaseOfError}) to a Single's {@code onErrorResumeNext} method, if the original Single encounters an error, instead of invoking itsObserver's  {@code onError} method, it will instead relinquish control to {@code resumeSingleInCaseOfError} whichwill invoke the Observer's  {@link Observer#onNext onNext} method if it is able to do so. In such a case,because no Single necessarily invokes  {@code onError}, the Observer may never know that an error happened. <p/> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeSingleInCaseOfError a Single that will take control if source Single encounters an error.
 * @return the original Single, with appropriately modified behavior.
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Instructs a Single to pass control to another Single rather than invoking {@link Observer#onError(Throwable)} if it encounters an error.<p/> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.png" alt=""> <p/> By default, when a Single encounters an error that prevents it from emitting the expected item to its  {@link Observer}, the Single invokes its Observer's  {@code onError} method, and then quitswithout invoking any more of its Observer's methods. The  {@code onErrorResumeNext} method changes thisbehavior. If you pass a function that will return another Single ( {@code resumeFunctionInCaseOfError}) to a Single's {@code onErrorResumeNext} method, if the original Single encounters an error, instead of invoking itsObserver's  {@code onError} method, it will instead relinquish control to {@code resumeSingleInCaseOfError} whichwill invoke the Observer's  {@link Observer#onNext onNext} method if it is able to do so. In such a case,because no Single necessarily invokes  {@code onError}, the Observer may never know that an error happened. <p/> You can use this to prevent errors from propagating or to supply fallback data should errors be encountered. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code onErrorResumeNext} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param resumeFunctionInCaseOfError a function that returns a Single that will take control if source Single encounters an error.
 * @return the original Single, with appropriately modified behavior.
 * @see <a href="http://reactivex.io/documentation/operators/catch.html">ReactiveX operators documentation: Catch</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Subscribes to a Single but ignore its emission or notification. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws OnErrorNotImplementedException if the Single tries to call  {@link Subscriber#onError}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
/** 
 * Subscribes to a Single and provides a callback to handle the item it emits. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the  {@code Action1<T>} you have designed to accept the emission from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalArgumentException if  {@code onNext} is null
 * @throws OnErrorNotImplementedException if the Single tries to call  {@link Subscriber#onError}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
/** 
 * Subscribes to a Single and provides callbacks to handle the item it emits or any error notification it issues. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the  {@code Action1<T>} you have designed to accept the emission from the Single
 * @param onError the  {@code Action1<Throwable>} you have designed to accept any error notification from theSingle
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 * @throws IllegalArgumentException if  {@code onNext} is null, orif  {@code onError} is null
 */
/** 
 * Subscribes to a Single and invokes the  {@link OnSubscribe} function without any contract protection,error handling, unsubscribe, or execution hooks. <p> Use this only for implementing an  {@link Operator} that requires nested subscriptions. For otherpurposes, use  {@link #subscribe(Subscriber)} which ensures the Rx contract and other functionality.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code unsafeSubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscriber the Subscriber that will handle the emission or notification from the Single
 * @return the subscription that allows unsubscribing
 */
//
//
//
//
//
//
//
//
/** 
 * Subscribes an Observer to this single and returns a Subscription that allows unsubscription.
 * @param observer the Observer to subscribe
 * @return the Subscription that allows unsubscription
 */
/** 
 * Subscribes to a Single and provides a Subscriber that implements functions to handle the item the Single emits or any error notification it issues. <p> A typical implementation of  {@code subscribe} does the following:<ol> <li>It stores a reference to the Subscriber in a collection object, such as a  {@code List<T>} object.</li><li>It returns a reference to the  {@link Subscription} interface. This enables Subscribers tounsubscribe, that is, to stop receiving the item or notification before the Single completes.</li> </ol><p> A  {@code Single<T>} instance is responsible for accepting all subscriptions and notifying allSubscribers. Unless the documentation for a particular  {@code Single<T>} implementation indicatesotherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will receive their notifications. <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscriber the  {@link Subscriber} that will handle the emission or notification from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalStateException if  {@code subscribe} is unable to obtain an {@code OnSubscribe<>} function
 * @throws IllegalArgumentException if the  {@link Subscriber} provided as the argument to {@code subscribe} is {@code null}
 * @throws OnErrorNotImplementedException if the  {@link Subscriber}'s  {@code onError} method is null
 * @throws RuntimeException if the  {@link Subscriber}'s  {@code onError} method itself threw a {@code Throwable}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
//
//
/* *///
//
/** 
 * Subscribes to a Single and provides a  {@link SingleSubscriber} that implements functions to handle theitem the Single emits or any error notification it issues. <p> A typical implementation of  {@code subscribe} does the following:<ol> <li>It stores a reference to the Subscriber in a collection object, such as a  {@code List<T>} object.</li><li>It returns a reference to the  {@link Subscription} interface. This enables Subscribers tounsubscribe, that is, to stop receiving the item or notification before the Single completes.</li> </ol><p> A  {@code Single<T>} instance is responsible for accepting all subscriptions and notifying allSubscribers. Unless the documentation for a particular  {@code Single<T>} implementation indicatesotherwise, Subscribers should make no assumptions about the order in which multiple Subscribers will receive their notifications. <p> For more information see the <a href="http://reactivex.io/documentation/observable.html">ReactiveX documentation</a>. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code subscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param te the  {@link SingleSubscriber} that will handle the emission or notification from the Single
 * @return a {@link Subscription} reference can request the {@link Single} stop work.
 * @throws IllegalStateException if  {@code subscribe} is unable to obtain an {@code OnSubscribe<>} function
 * @throws IllegalArgumentException if the  {@link SingleSubscriber} provided as the argument to {@code subscribe} is {@code null}
 * @throws OnErrorNotImplementedException if the  {@link SingleSubscriber}'s  {@code onError} method is null
 * @throws RuntimeException if the  {@link SingleSubscriber}'s  {@code onError} method itself threw a {@code Throwable}
 * @see <a href="http://reactivex.io/documentation/operators/subscribe.html">ReactiveX operators documentation: Subscribe</a>
 */
//
//
//
//
//
//
/** 
 * Asynchronously subscribes subscribers to this Single on the specified  {@link Scheduler}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribeOn.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param scheduler the  {@link Scheduler} to perform subscription actions on
 * @return the source Single modified so that its subscriptions happen on the specified {@link Scheduler}
 * @see <a href="http://reactivex.io/documentation/operators/subscribeon.html">ReactiveX operators documentation: SubscribeOn</a>
 * @see <a href="http://www.grahamlea.com/2014/07/rxjava-threading-examples/">RxJava Threading Examples</a>
 * @see #observeOn
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until a Completable terminates. Upon termination of  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Completable whose termination will cause  {@code takeUntil} to emit the item from the sourceSingle
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} terminates.
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until an Observable emits an item. Upon emission of an item from  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Observable whose first emitted item will cause  {@code takeUntil} to emit the item from the sourceSingle
 * @param < E > the type of items emitted by  {@code other}
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} emitsits first item
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Returns a Single that emits the item emitted by the source Single until a second Single emits an item. Upon emission of an item from  {@code other}, this will emit a  {@link CancellationException} rather than go to{@link SingleSubscriber#onSuccess(Object)}. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code takeUntil} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param other the Single whose emitted item will cause  {@code takeUntil} to emit the item from the source Single
 * @param < E > the type of item emitted by  {@code other}
 * @return a Single that emits the item emitted by the source Single until such time as {@code other} emits its item
 * @see <a href="http://reactivex.io/documentation/operators/takeuntil.html">ReactiveX operators documentation: TakeUntil</a>
 */
/** 
 * Calls the specified converter function during assembly time and returns its resulting value. <p> This allows fluent conversion to any other type.
 * @param < R > the resulting object type
 * @param converter the function that receives the current Single instance and returns a value
 * @return the value returned by the function
 */
/** 
 * Converts this Single into an  {@link Observable}. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.toObservable.png" alt="">
 * @return an {@link Observable} that emits a single item T.
 */
/** 
 * Returns a  {@link Completable} that discards result of the {@link Single} (similar to{@link Observable#ignoreElements()}) and calls  {@code onCompleted} when this source {@link Single} calls{@code onSuccess}. Error terminal event is propagated. <p> <img width="640" height="295" src= "https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toCompletable.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code toCompletable} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@link Completable} that calls {@code onCompleted} on it's subscriber when the source {@link Single}calls  {@code onSuccess}.
 * @see <a href="http://reactivex.io/documentation/completable.html">ReactiveX documentation: Completable</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parentheticalwith the release number).
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item. If it is not emitted within the specified timeout duration, the resulting Single terminates and notifies subscribers of a  {@code TimeoutException}. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code timeout} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param timeout maximum duration before the Single times out
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument.
 * @return the source Single modified to notify subscribers of a {@code TimeoutException} in case of atimeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, where this policy is governed on a specified Scheduler. If the item is not emitted within the specified timeout duration, the resulting Single terminates and notifies subscribers of a  {@code TimeoutException}. <p> <img width="640" height="300" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.1s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param timeout maximum duration before the Single times out
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param scheduler the Scheduler to run the timeout timers on
 * @return the source Single modified to notify subscribers of a {@code TimeoutException} in case of atimeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item. If it is not emitted within the specified timeout duration, the resulting Single instead mirrors a fallback Single. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code timeout} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param timeout maximum time before a timeout occurs
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param other the fallback Single to use in case of a timeout
 * @return the source Single modified to switch to the fallback Single in case of a timeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Returns a Single that mirrors the source Single but applies a timeout policy for its emitted item, using a specified Scheduler. If the item isn't emitted within the specified timeout duration, the resulting Single instead mirrors a fallback Single. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.2s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param timeout maximum duration before a timeout occurs
 * @param timeUnit the unit of time that applies to the  {@code timeout} argument
 * @param other the Single to use as the fallback in case of a timeout
 * @param scheduler the  {@link Scheduler} to run the timeout timers on
 * @return the source Single modified so that it will switch to the fallback Single in case of a timeout
 * @see <a href="http://reactivex.io/documentation/operators/timeout.html">ReactiveX operators documentation: Timeout</a>
 */
/** 
 * Converts a Single into a  {@link BlockingSingle} (a Single with blocking operators).<dl> <dt><b>Scheduler:</b></dt> <dd> {@code toBlocking} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return a {@code BlockingSingle} version of this Single.
 * @see <a href="http://reactivex.io/documentation/operators/to.html">ReactiveX operators documentation: To</a>
 */
/** 
 * Returns a Single that emits the result of applying a specified function to the pair of items emitted by the source Single and another specified Single. <p> <img width="640" height="380" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code zipWith} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T2 > the type of items emitted by the  {@code other} Single
 * @param < R > the type of items emitted by the resulting Single
 * @param other the other Observable
 * @param zipFunction a function that combines the pairs of items from the two Observables to generate the items to be emitted by the resulting Single
 * @return an Observable that pairs up values from the source Observable and the {@code other} Observableand emits the results of  {@code zipFunction} applied to these pairs
 * @see <a href="http://reactivex.io/documentation/operators/zip.html">ReactiveX operators documentation: Zip</a>
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action if it calls {@code onError}. <p> In case the onError action throws, the downstream will receive a composite exception containing the original exception and the exception thrown by onError. <p> <img width="640" height="305" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnError} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onError the action to invoke if the source  {@link Single} calls {@code onError}
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action when it calls {@code onSuccess} or {@code onError}. <p> <img width="640" height="310" src="https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnEach.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnEach} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onNotification the action to invoke when the source  {@link Single} calls {@code onSuccess} or {@code onError}.
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes an action when it calls {@code onSuccess}. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnNext.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnSuccess} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param onSuccess the action to invoke when the source  {@link Single} calls {@code onSuccess}
 * @return the source {@link Single} with the side-effecting behavior applied
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@code Single} so that it invokes the given action when it is subscribed fromits subscribers. Each subscription will result in an invocation of the given action except when the source  {@code Single} is reference counted, in which case the source {@code Single} will invokethe given action for the first subscription. <p> <img width="640" height="390" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSubscribe.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnSubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param subscribe the action that gets called when an observer subscribes to this  {@code Single}
 * @return the source {@code Single} modified so as to call this Action when appropriate
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that emits the items emitted by the source Single shifted forward in time by a specified delay. Error notifications from the source Single are not delayed. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.s.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>you specify which  {@link Scheduler} this operator will use</dd></dl>
 * @param delay the delay to shift the source by
 * @param unit the time unit of  {@code delay}
 * @param scheduler the  {@link Scheduler} to use for delaying
 * @return the source Single shifted in time by the specified delay
 * @see <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that emits the items emitted by the source Single shifted forward in time by a specified delay. Error notifications from the source Observable are not delayed. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd>This version of  {@code delay} operates by default on the {@code computation} {@link Scheduler}.</dd> </dl>
 * @param delay the delay to shift the source by
 * @param unit the  {@link TimeUnit} in which {@code period} is defined
 * @return the source Single shifted in time by the specified delay
 * @see <a href="http://reactivex.io/documentation/operators/delay.html">ReactiveX operators documentation: Delay</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a  {@link Single} that calls a {@link Single} factory to create a {@link Single} for each new Observerthat subscribes. That is, for each subscriber, the actual  {@link Single} that subscriber observes isdetermined by the factory function. <p> <img width="640" height="340" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/defer.png" alt=""> <p> The defer Observer allows you to defer or delay emitting value from a  {@link Single} until such time as anObserver subscribes to the  {@link Single}. This allows an  {@link Observer} to easily obtain updates or arefreshed version of the sequence. <dl> <dt><b>Scheduler:</b></dt> <dd> {@code defer} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param singleFactory the  {@link Single} factory function to invoke for each {@link Observer} that subscribes to theresulting  {@link Single}.
 * @param < T > the type of the items emitted by the  {@link Single}.
 * @return a {@link Single} whose {@link Observer}s' subscriptions trigger an invocation of the given {@link Single} factory function.
 * @see <a href="http://reactivex.io/documentation/operators/defer.html">ReactiveX operators documentation: Defer</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Modifies the source  {@link Single} so that it invokes the given action when it is unsubscribed fromits subscribers. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnUnsubscribe.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doOnUnsubscribe} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param action the action that gets called when this  {@link Single} is unsubscribed.
 * @return the source {@link Single} modified so as to call this Action when appropriate.
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Registers an  {@link Action0} to be called when this {@link Single} invokes either{@link SingleSubscriber#onSuccess(Object)}  onSuccess} or {@link SingleSubscriber#onError onError}. <p> <img width="640" height="310" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/finallyDo.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code doAfterTerminate} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param action an  {@link Action0} to be invoked when the source {@link Single} finishes.
 * @return a {@link Single} that emits the same item or error as the source {@link Single}, then invokes the {@link Action0}
 * @see <a href="http://reactivex.io/documentation/operators/do.html">ReactiveX operators documentation: Do</a>
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * FOR INTERNAL USE ONLY. <p> Converts  {@link Iterable} of {@link Single} to array of {@link Single}.
 * @param singlesIterable non null iterable of  {@link Single}.
 * @return array of {@link Single} with same length as passed iterable.
 */
//
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}(infinite retry count). <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> If the source Single calls  {@link SingleSubscriber#onError}, this method will resubscribe to the source Single rather than propagating the  {@code onError} call.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}up to a specified number of retries. <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> If the source Single calls  {@link SingleSubscriber#onError}, this method will resubscribe to the source Single for a maximum of  {@code count} resubscriptions rather than propagating the{@code onError} call.<dl> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param count number of retry attempts before failing
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that mirrors the source Single, resubscribing to it if it calls  {@code onError}and the predicate returns true for that specific exception and retry count. <img width="640" height="315" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png" alt=""> <dl> <dt><b>Backpressure Support:</b></dt> <dd>This operator honors backpressure.</td> <dt><b>Scheduler:</b></dt> <dd> {@code retry} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param predicate the predicate that determines if a resubscription may happen in case of a specific exception and retry count
 * @return the source Single modified with retry logic
 * @see #retry()
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Returns a Single that emits the same values as the source Single with the exception of an {@code onError}. An  {@code onError} notification from the source will result in the emission of a{@link Throwable} item to the Observable provided as an argument to the {@code notificationHandler}function. <p>Emissions from the handler  {@code Observable} is treated as follows:<ul> <li>If the handler  {@code Observable} emits an {@code onCompleted} the {@code retryWhen} will call {@code onError}with  {@code NoSuchElementException} on the child subscription.</li><li>If the handler  {@code Observable} emits an {@code onError} the {@code retryWhen} will call{@code onError} with the same Throwable instance on the child subscription.<li>Otherwise, the operator will resubscribe to the source Single.</li> </ul> <p>The  {@code notificationHandler} function is called for each subscriber individually. This allows per-Subscriberstate to be added to the error notification sequence.</p> <pre><code> single.retryWhen(error -&gt; { AtomicInteger counter = new AtomicInteger(); return error.takeWhile(e -&gt; counter.incrementAndGet() &lt; 3).map(e -&gt; "retry"); }).subscribe(...); </code></pre> <p> Note that you must compose over the input  {@code Observable} provided in the function call because {@link #retryWhen} expectsan emission of the exception to be matched by an event from the handler Observable. <p> <img width="640" height="430" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retryWhen.f.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code retryWhen} operates by default on the {@code trampoline} {@link Scheduler}.</dd> </dl>
 * @param notificationHandler receives an Observable of notifications with which a user can complete or error, aborting the retry
 * @return the source Single modified with retry logic
 * @see <a href="http://reactivex.io/documentation/operators/retry.html">ReactiveX operators documentation: Retry</a>
 */
/** 
 * Constructs a Single that creates a dependent resource object which is disposed of on unsubscription. <p> <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code using} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the generated source
 * @param < Resource > the type of the per-subscriber resource
 * @param resourceFactory the factory function to create a resource object that depends on the Single
 * @param singleFactory the factory function to create a Single
 * @param disposeAction the function that will dispose of the resource
 * @return the Single whose lifetime controls the lifetime of the dependent resource object
 * @see <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
 */
/** 
 * Constructs a Single that creates a dependent resource object which is disposed of just before termination if you have set  {@code disposeEagerly} to {@code true} and unsubscription does not occurbefore termination. Otherwise resource disposal will occur on unsubscription.  Eager disposal is particularly appropriate for a synchronous Single that reuses resources.  {@code disposeAction} willonly be called once per subscription. <p> <img width="640" height="400" src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/using.png" alt=""> <dl> <dt><b>Scheduler:</b></dt> <dd> {@code using} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @param < T > the value type of the generated source
 * @param < Resource > the type of the per-subscriber resource
 * @param resourceFactory the factory function to create a resource object that depends on the Single
 * @param singleFactory the factory function to create a Single
 * @param disposeAction the function that will dispose of the resource
 * @param disposeEagerly if  {@code true} then disposal will happen either on unsubscription or just before emission ofa terminal event ( {@code onComplete} or {@code onError}).
 * @return the Single whose lifetime controls the lifetime of the dependent resource object
 * @see <a href="http://reactivex.io/documentation/operators/using.html">ReactiveX operators documentation: Using</a>
 * @Experimental The behavior of this can change at any time.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single that delays the subscription to this Single until the Observable completes. In case the  {@code onError} of the supplied observer throws,the exception will be propagated to the downstream subscriber and will result in skipping the subscription of this Single. <p> <dl> <dt><b>Scheduler:</b></dt> <dd>This method does not operate by default on a particular  {@link Scheduler}.</dd> </dl>
 * @param other the Observable that should trigger the subscriptionto this Single.
 * @return a Single that delays the subscription to this Singleuntil the Observable emits an element or completes normally.
 * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the release number)
 */
/** 
 * Returns a Single which makes sure when a subscriber cancels the subscription, the dispose is called on the specified scheduler
 * @param scheduler the target scheduler where to execute the cancellation
 * @return the new Single instance
 * @since 1.2.8 - experimental
 */
//
//
//
/** 
 * Creates an AssertableSubscriber that requests  {@code Long.MAX_VALUE} and subscribesit to this Observable. <dl> <dt><b>Backpressure:</b><dt> <dd>The returned AssertableSubscriber consumes this Observable in an unbounded fashion.</dd> <dt><b>Scheduler:</b></dt> <dd> {@code test} does not operate by default on a particular {@link Scheduler}.</dd> </dl>
 * @return the new AssertableSubscriber instance
 * @since 1.2.3
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3088660d
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@42cc13a0

#TRAVERSE
LEFTCHILD: CLASS: Single
RIGHTCHILD: CLASS: Single
##SNODE L: CLASS: Single
##SNODE L: CLASS: Single
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@32fdec40
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6813a331

##TRAVERSE
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe(Observer<? super T>)
RIGHTCHILD: METHOD: subscribe(Observer<? super T>)
###SNODE L: METHOD: subscribe(Observer<? super T>)
###SNODE L: METHOD: subscribe(Observer<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: onErrorResumeNext(Func1<Throwable,? extends Single<? extends T>>)
RIGHTCHILD: METHOD: onErrorResumeNext(Func1<Throwable,? extends Single<? extends T>>)
###SNODE L: METHOD: onErrorResumeNext(Func1<Throwable,? extends Single<? extends T>>)
###SNODE L: METHOD: onErrorResumeNext(Func1<Throwable,? extends Single<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concatWith(Single<? extends T>)
RIGHTCHILD: METHOD: concatWith(Single<? extends T>)
###SNODE L: METHOD: concatWith(Single<? extends T>)
###SNODE L: METHOD: concatWith(Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: fromCallable(Callable<? extends T>)
RIGHTCHILD: METHOD: fromCallable(Callable<? extends T>)
###SNODE L: METHOD: fromCallable(Callable<? extends T>)
###SNODE L: METHOD: fromCallable(Callable<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zipWith(Single<? extends T2>,Func2<? super T,? super T2,? extends R>)
RIGHTCHILD: METHOD: zipWith(Single<? extends T2>,Func2<? super T,? super T2,? extends R>)
###SNODE L: METHOD: zipWith(Single<? extends T2>,Func2<? super T,? super T2,? extends R>)
###SNODE L: METHOD: zipWith(Single<? extends T2>,Func2<? super T,? super T2,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Single<? extends T9>,Func9<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? super T9,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Single<? extends T9>,Func9<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? super T9,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Single<? extends T9>,Func9<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? super T9,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Single<? extends T9>,Func9<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? super T9,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: onErrorReturn(Func1<Throwable,? extends T>)
RIGHTCHILD: METHOD: onErrorReturn(Func1<Throwable,? extends T>)
###SNODE L: METHOD: onErrorReturn(Func1<Throwable,? extends T>)
###SNODE L: METHOD: onErrorReturn(Func1<Throwable,? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>,int)
RIGHTCHILD: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>,int)
###SNODE L: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>,int)
###SNODE L: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>)
RIGHTCHILD: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>)
###SNODE L: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>)
###SNODE L: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe(Subscriber<? super T>)
RIGHTCHILD: METHOD: subscribe(Subscriber<? super T>)
###SNODE L: METHOD: subscribe(Subscriber<? super T>)
###SNODE L: METHOD: subscribe(Subscriber<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: mergeWith(Single<? extends T>)
RIGHTCHILD: METHOD: mergeWith(Single<? extends T>)
###SNODE L: METHOD: mergeWith(Single<? extends T>)
###SNODE L: METHOD: mergeWith(Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: Single(Observable.OnSubscribe<T>)
RIGHTCHILD: CONSTRUCTOR: Single(Observable.OnSubscribe<T>)
###SNODE L: CONSTRUCTOR: Single(Observable.OnSubscribe<T>)
###SNODE L: CONSTRUCTOR: Single(Observable.OnSubscribe<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: asObservable(Single<T>)
RIGHTCHILD: METHOD: asObservable(Single<T>)
###SNODE L: METHOD: asObservable(Single<T>)
###SNODE L: METHOD: asObservable(Single<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: delay(long,TimeUnit)
RIGHTCHILD: METHOD: delay(long,TimeUnit)
###SNODE L: METHOD: delay(long,TimeUnit)
###SNODE L: METHOD: delay(long,TimeUnit)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Func3<? super T1,? super T2,? super T3,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Func3<? super T1,? super T2,? super T3,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Func3<? super T1,? super T2,? super T3,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Func3<? super T1,? super T2,? super T3,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe(Action1<? super T>)
RIGHTCHILD: METHOD: subscribe(Action1<? super T>)
###SNODE L: METHOD: subscribe(Action1<? super T>)
###SNODE L: METHOD: subscribe(Action1<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: fromEmitter(Action1<SingleEmitter<T>>)
RIGHTCHILD: METHOD: fromEmitter(Action1<SingleEmitter<T>>)
###SNODE L: METHOD: fromEmitter(Action1<SingleEmitter<T>>)
###SNODE L: METHOD: fromEmitter(Action1<SingleEmitter<T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: timeout(long,TimeUnit)
RIGHTCHILD: METHOD: timeout(long,TimeUnit)
###SNODE L: METHOD: timeout(long,TimeUnit)
###SNODE L: METHOD: timeout(long,TimeUnit)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unsafeSubscribe(Subscriber<? super T>)
RIGHTCHILD: METHOD: unsafeSubscribe(Subscriber<? super T>)
###SNODE L: METHOD: unsafeSubscribe(Subscriber<? super T>)
###SNODE L: METHOD: unsafeSubscribe(Subscriber<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: to(Func1<? super Single<T>,R>)
RIGHTCHILD: METHOD: to(Func1<? super Single<T>,R>)
###SNODE L: METHOD: to(Func1<? super Single<T>,R>)
###SNODE L: METHOD: to(Func1<? super Single<T>,R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: timeout(long,TimeUnit,Single<? extends T>,Scheduler)
RIGHTCHILD: METHOD: timeout(long,TimeUnit,Single<? extends T>,Scheduler)
###SNODE L: METHOD: timeout(long,TimeUnit,Single<? extends T>,Scheduler)
###SNODE L: METHOD: timeout(long,TimeUnit,Single<? extends T>,Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
!!EQUAL!!
DIFF IS NOT NULL
LEFTCHILD: METHOD: from(Future<? extends T>)
RIGHTCHILD: METHOD: from(Future<? extends T>)
###SNODE L: METHOD: from(Future<? extends T>)
###SNODE L: METHOD: from(Future<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends Single<? extends T>>)
RIGHTCHILD: METHOD: merge(Single<? extends Single<? extends T>>)
###SNODE L: METHOD: merge(Single<? extends Single<? extends T>>)
###SNODE L: METHOD: merge(Single<? extends Single<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doOnUnsubscribe(Action0)
RIGHTCHILD: METHOD: doOnUnsubscribe(Action0)
###SNODE L: METHOD: doOnUnsubscribe(Action0)
###SNODE L: METHOD: doOnUnsubscribe(Action0)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lift(Operator<? extends R,? super T>)
RIGHTCHILD: METHOD: lift(Operator<? extends R,? super T>)
###SNODE L: METHOD: lift(Operator<? extends R,? super T>)
###SNODE L: METHOD: lift(Operator<? extends R,? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: onSubscribe : OnSubscribe<T>
RIGHTCHILD: FIELD: onSubscribe : OnSubscribe<T>
###SNODE L: FIELD: onSubscribe : OnSubscribe<T>
###SNODE L: FIELD: onSubscribe : OnSubscribe<T>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: retryWhen(Func1<Observable<? extends Throwable>,? extends Observable<?>>)
RIGHTCHILD: METHOD: retryWhen(Func1<Observable<? extends Throwable>,? extends Observable<?>>)
###SNODE L: METHOD: retryWhen(Func1<Observable<? extends Throwable>,? extends Observable<?>>)
###SNODE L: METHOD: retryWhen(Func1<Observable<? extends Throwable>,? extends Observable<?>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Func5<? super T1,? super T2,? super T3,? super T4,? super T5,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Func5<? super T1,? super T2,? super T3,? super T4,? super T5,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Func5<? super T1,? super T2,? super T3,? super T4,? super T5,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Func5<? super T1,? super T2,? super T3,? super T4,? super T5,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: takeUntil(Observable<? extends E>)
RIGHTCHILD: METHOD: takeUntil(Observable<? extends E>)
###SNODE L: METHOD: takeUntil(Observable<? extends E>)
###SNODE L: METHOD: takeUntil(Observable<? extends E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: from(Future<? extends T>,Scheduler)
RIGHTCHILD: METHOD: from(Future<? extends T>,Scheduler)
###SNODE L: METHOD: from(Future<? extends T>,Scheduler)
###SNODE L: METHOD: from(Future<? extends T>,Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObservable()
RIGHTCHILD: METHOD: toObservable()
###SNODE L: METHOD: toObservable()
###SNODE L: METHOD: toObservable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toCompletable()
RIGHTCHILD: METHOD: toCompletable()
###SNODE L: METHOD: toCompletable()
###SNODE L: METHOD: toCompletable()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>,boolean)
RIGHTCHILD: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>,boolean)
###SNODE L: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>,boolean)
###SNODE L: METHOD: using(Func0<Resource>,Func1<? super Resource,? extends Single<? extends T>>,Action1<? super Resource>,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: from(Future<? extends T>,long,TimeUnit)
RIGHTCHILD: METHOD: from(Future<? extends T>,long,TimeUnit)
###SNODE L: METHOD: from(Future<? extends T>,long,TimeUnit)
###SNODE L: METHOD: from(Future<? extends T>,long,TimeUnit)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: test()
RIGHTCHILD: METHOD: test()
###SNODE L: METHOD: test()
###SNODE L: METHOD: test()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Iterable<? extends Single<?>>,FuncN<? extends R>)
RIGHTCHILD: METHOD: zip(Iterable<? extends Single<?>>,FuncN<? extends R>)
###SNODE L: METHOD: zip(Iterable<? extends Single<?>>,FuncN<? extends R>)
###SNODE L: METHOD: zip(Iterable<? extends Single<?>>,FuncN<? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doOnSubscribe(Action0)
RIGHTCHILD: METHOD: doOnSubscribe(Action0)
###SNODE L: METHOD: doOnSubscribe(Action0)
###SNODE L: METHOD: doOnSubscribe(Action0)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: timeout(long,TimeUnit,Single<? extends T>)
RIGHTCHILD: METHOD: timeout(long,TimeUnit,Single<? extends T>)
###SNODE L: METHOD: timeout(long,TimeUnit,Single<? extends T>)
###SNODE L: METHOD: timeout(long,TimeUnit,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: delaySubscription(Observable<?>)
RIGHTCHILD: METHOD: delaySubscription(Observable<?>)
###SNODE L: METHOD: delaySubscription(Observable<?>)
###SNODE L: METHOD: delaySubscription(Observable<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: flatMapObservable(Func1<? super T,? extends Observable<? extends R>>)
RIGHTCHILD: METHOD: flatMapObservable(Func1<? super T,? extends Observable<? extends R>>)
###SNODE L: METHOD: flatMapObservable(Func1<? super T,? extends Observable<? extends R>>)
###SNODE L: METHOD: flatMapObservable(Func1<? super T,? extends Observable<? extends R>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Observable<? extends Single<? extends T>>)
RIGHTCHILD: METHOD: merge(Observable<? extends Single<? extends T>>)
###SNODE L: METHOD: merge(Observable<? extends Single<? extends T>>)
###SNODE L: METHOD: merge(Observable<? extends Single<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doAfterTerminate(Action0)
RIGHTCHILD: METHOD: doAfterTerminate(Action0)
###SNODE L: METHOD: doAfterTerminate(Action0)
###SNODE L: METHOD: doAfterTerminate(Action0)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: error(Throwable)
RIGHTCHILD: METHOD: error(Throwable)
###SNODE L: METHOD: error(Throwable)
###SNODE L: METHOD: error(Throwable)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: takeUntil(Completable)
RIGHTCHILD: METHOD: takeUntil(Completable)
###SNODE L: METHOD: takeUntil(Completable)
###SNODE L: METHOD: takeUntil(Completable)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doOnError(Action1<Throwable>)
RIGHTCHILD: METHOD: doOnError(Action1<Throwable>)
###SNODE L: METHOD: doOnError(Action1<Throwable>)
###SNODE L: METHOD: doOnError(Action1<Throwable>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: create(OnSubscribe<T>)
RIGHTCHILD: METHOD: create(OnSubscribe<T>)
###SNODE L: METHOD: create(OnSubscribe<T>)
###SNODE L: METHOD: create(OnSubscribe<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: just(T)
RIGHTCHILD: METHOD: just(T)
###SNODE L: METHOD: just(T)
###SNODE L: METHOD: just(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defer(Callable<Single<T>>)
RIGHTCHILD: METHOD: defer(Callable<Single<T>>)
###SNODE L: METHOD: defer(Callable<Single<T>>)
###SNODE L: METHOD: defer(Callable<Single<T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: takeUntil(Single<? extends E>)
RIGHTCHILD: METHOD: takeUntil(Single<? extends E>)
###SNODE L: METHOD: takeUntil(Single<? extends E>)
###SNODE L: METHOD: takeUntil(Single<? extends E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe()
RIGHTCHILD: METHOD: subscribe()
###SNODE L: METHOD: subscribe()
###SNODE L: METHOD: subscribe()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: iterableToArray(Iterable<? extends Single<? extends T>>)
RIGHTCHILD: METHOD: iterableToArray(Iterable<? extends Single<? extends T>>)
###SNODE L: METHOD: iterableToArray(Iterable<? extends Single<? extends T>>)
###SNODE L: METHOD: iterableToArray(Iterable<? extends Single<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Func7<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Func7<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Func7<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Func7<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: retry(long)
RIGHTCHILD: METHOD: retry(long)
###SNODE L: METHOD: retry(long)
###SNODE L: METHOD: retry(long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: retry(Func2<Integer,Throwable,Boolean>)
RIGHTCHILD: METHOD: retry(Func2<Integer,Throwable,Boolean>)
###SNODE L: METHOD: retry(Func2<Integer,Throwable,Boolean>)
###SNODE L: METHOD: retry(Func2<Integer,Throwable,Boolean>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: flatMapCompletable(Func1<? super T,? extends Completable>)
RIGHTCHILD: METHOD: flatMapCompletable(Func1<? super T,? extends Completable>)
###SNODE L: METHOD: flatMapCompletable(Func1<? super T,? extends Completable>)
###SNODE L: METHOD: flatMapCompletable(Func1<? super T,? extends Completable>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribeOn(Scheduler)
RIGHTCHILD: METHOD: subscribeOn(Scheduler)
###SNODE L: METHOD: subscribeOn(Scheduler)
###SNODE L: METHOD: subscribeOn(Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: map(Func1<? super T,? extends R>)
RIGHTCHILD: METHOD: map(Func1<? super T,? extends R>)
###SNODE L: METHOD: map(Func1<? super T,? extends R>)
###SNODE L: METHOD: map(Func1<? super T,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: compose(Transformer<? super T,? extends R>)
RIGHTCHILD: METHOD: compose(Transformer<? super T,? extends R>)
###SNODE L: METHOD: compose(Transformer<? super T,? extends R>)
###SNODE L: METHOD: compose(Transformer<? super T,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Func4<? super T1,? super T2,? super T3,? super T4,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Func4<? super T1,? super T2,? super T3,? super T4,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Func4<? super T1,? super T2,? super T3,? super T4,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Func4<? super T1,? super T2,? super T3,? super T4,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doOnSuccess(Action1<? super T>)
RIGHTCHILD: METHOD: doOnSuccess(Action1<? super T>)
###SNODE L: METHOD: doOnSuccess(Action1<? super T>)
###SNODE L: METHOD: doOnSuccess(Action1<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unsubscribeOn(Scheduler)
RIGHTCHILD: METHOD: unsubscribeOn(Scheduler)
###SNODE L: METHOD: unsubscribeOn(Scheduler)
###SNODE L: METHOD: unsubscribeOn(Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBlocking()
RIGHTCHILD: METHOD: toBlocking()
###SNODE L: METHOD: toBlocking()
###SNODE L: METHOD: toBlocking()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: concat(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Func6<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Func6<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Func6<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Func6<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe(Action1<? super T>,Action1<Throwable>)
RIGHTCHILD: METHOD: subscribe(Action1<? super T>,Action1<Throwable>)
###SNODE L: METHOD: subscribe(Action1<? super T>,Action1<Throwable>)
###SNODE L: METHOD: subscribe(Action1<? super T>,Action1<Throwable>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: Single(OnSubscribe<T>)
RIGHTCHILD: CONSTRUCTOR: Single(OnSubscribe<T>)
###SNODE L: CONSTRUCTOR: Single(OnSubscribe<T>)
###SNODE L: CONSTRUCTOR: Single(OnSubscribe<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: INTERFACE: Transformer
RIGHTCHILD: INTERFACE: Transformer
###SNODE L: INTERFACE: Transformer
###SNODE L: INTERFACE: Transformer
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1bd81830
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@39ab59f8

###TRAVERSE
LEFTCHILD: CONSTRUCTOR: Transformer()
RIGHTCHILD: CONSTRUCTOR: Transformer()
####SNODE L: CONSTRUCTOR: Transformer()
####SNODE L: CONSTRUCTOR: Transformer()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: merge(Observable<? extends Single<? extends T>>,int)
RIGHTCHILD: METHOD: merge(Observable<? extends Single<? extends T>>,int)
###SNODE L: METHOD: merge(Observable<? extends Single<? extends T>>,int)
###SNODE L: METHOD: merge(Observable<? extends Single<? extends T>>,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
RIGHTCHILD: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE L: METHOD: merge(Single<? extends T>,Single<? extends T>,Single<? extends T>,Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>)
RIGHTCHILD: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>)
###SNODE L: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>)
###SNODE L: METHOD: mergeDelayError(Observable<? extends Single<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: doOnEach(Action1<Notification<? extends T>>)
RIGHTCHILD: METHOD: doOnEach(Action1<Notification<? extends T>>)
###SNODE L: METHOD: doOnEach(Action1<Notification<? extends T>>)
###SNODE L: METHOD: doOnEach(Action1<Notification<? extends T>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Func2<? super T1,? super T2,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Func2<? super T1,? super T2,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Func2<? super T1,? super T2,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Func2<? super T1,? super T2,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: retry()
RIGHTCHILD: METHOD: retry()
###SNODE L: METHOD: retry()
###SNODE L: METHOD: retry()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unsafeSubscribe(Subscriber<? super T>,boolean)
RIGHTCHILD: METHOD: unsafeSubscribe(Subscriber<? super T>,boolean)
###SNODE L: METHOD: unsafeSubscribe(Subscriber<? super T>,boolean)
###SNODE L: METHOD: unsafeSubscribe(Subscriber<? super T>,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: cache()
RIGHTCHILD: METHOD: cache()
###SNODE L: METHOD: cache()
###SNODE L: METHOD: cache()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subscribe(SingleSubscriber<? super T>)
RIGHTCHILD: METHOD: subscribe(SingleSubscriber<? super T>)
###SNODE L: METHOD: subscribe(SingleSubscriber<? super T>)
###SNODE L: METHOD: subscribe(SingleSubscriber<? super T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: timeout(long,TimeUnit,Scheduler)
RIGHTCHILD: METHOD: timeout(long,TimeUnit,Scheduler)
###SNODE L: METHOD: timeout(long,TimeUnit,Scheduler)
###SNODE L: METHOD: timeout(long,TimeUnit,Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: onErrorResumeNext(Single<? extends T>)
RIGHTCHILD: METHOD: onErrorResumeNext(Single<? extends T>)
###SNODE L: METHOD: onErrorResumeNext(Single<? extends T>)
###SNODE L: METHOD: onErrorResumeNext(Single<? extends T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: INTERFACE: OnSubscribe
RIGHTCHILD: INTERFACE: OnSubscribe
###SNODE L: INTERFACE: OnSubscribe
###SNODE L: INTERFACE: OnSubscribe
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@64e92d61
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@111610e6

###TRAVERSE
LEFTCHILD: CONSTRUCTOR: OnSubscribe()
RIGHTCHILD: CONSTRUCTOR: OnSubscribe()
####SNODE L: CONSTRUCTOR: OnSubscribe()
####SNODE L: CONSTRUCTOR: OnSubscribe()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: observeOn(Scheduler)
RIGHTCHILD: METHOD: observeOn(Scheduler)
###SNODE L: METHOD: observeOn(Scheduler)
###SNODE L: METHOD: observeOn(Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: delay(long,TimeUnit,Scheduler)
RIGHTCHILD: METHOD: delay(long,TimeUnit,Scheduler)
###SNODE L: METHOD: delay(long,TimeUnit,Scheduler)
###SNODE L: METHOD: delay(long,TimeUnit,Scheduler)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Func8<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? extends R>)
RIGHTCHILD: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Func8<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Func8<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? extends R>)
###SNODE L: METHOD: zip(Single<? extends T1>,Single<? extends T2>,Single<? extends T3>,Single<? extends T4>,Single<? extends T5>,Single<? extends T6>,Single<? extends T7>,Single<? extends T8>,Func8<? super T1,? super T2,? super T3,? super T4,? super T5,? super T6,? super T7,? super T8,? extends R>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: flatMap(Func1<? super T,? extends Single<? extends R>>)
RIGHTCHILD: METHOD: flatMap(Func1<? super T,? extends Single<? extends R>>)
###SNODE L: METHOD: flatMap(Func1<? super T,? extends Single<? extends R>>)
###SNODE L: METHOD: flatMap(Func1<? super T,? extends Single<? extends R>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
DIFF IS NOT NULL
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)1719
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)959
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1772
-(0)-(0)-(1)1773
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)1771
-(0)-(0)-(1)1774
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)1771
-(0)-(0)-(1)1775
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)1771
-(0)-(0)-(1)1776
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(0)-(1)1777
-(0)-(0)-(0)-(1)1778
-(0)-(0)-(1)1779
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1777
-(0)-(0)-(1)1780
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1777
-(0)-(0)-(1)14
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1781
-(0)-(0)-(1)1782
-(0)1664
-(0)-(0)2
-(0)-(0)-(0)1771
-(0)-(0)-(1)1778
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1783
-(0)-(0)-(1)1784
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1785
-(0)-(0)-(1)1786
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1787
-(0)-(0)-(1)1788
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)1771
-(0)-(0)-(0)-(1)1789
-(0)-(0)-(1)1790
-(1)5
-(1)-(2)1771
-(2)185
-(2)-(1)19
-(2)-(2)1791
-(2)-(7)246
-(2)-(7)-(1)245
-(2)-(8)30
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)1792
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)245
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1793
-(2)-(8)101
-(2)-(8)-(1)54
-(2)-(8)-(2)1791
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1792
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1794
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(1)1793
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1784
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1795
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1794
-(2)-(8)101
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)584
-(2)-(8)-(1)54
-(2)-(8)-(2)1791
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)2
-(2)-(8)-(7)-(1)-(0)-(1)-(0)1772
-(2)-(8)-(7)-(1)-(0)-(1)-(1)1792
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1794
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)1793
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1784
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1795
-(2)-(8)-(12)-(0)-(0)-(1)-(3)84
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)-(0)-(1)1796
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(4)1794
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1797
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1792
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1794
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(4)1794
-(2)-(8)1800
-(2)-(8)-(1)19
-(2)-(8)-(2)1792
-(2)-(8)-(6)59
-(2)-(8)-(6)-(0)24
-(2)-(8)-(6)-(0)-(1)1798
-(2)-(8)-(6)-(1)59
-(2)-(8)-(6)-(1)-(0)24
-(2)-(8)-(6)-(1)-(0)-(1)1799
-(2)-(8)-(6)-(1)-(1)1024
-(2)-(8)-(6)-(1)-(1)-(1)24
-(2)-(8)-(6)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)246
-(2)-(8)-(7)-(1)245
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1803
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1773
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1803
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1804
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(4)117
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(1)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1803
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(2)1805
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1806
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1807
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1806
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)1807
-(2)-(8)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)1800
-(2)-(8)-(1)19
-(2)-(8)-(2)1806
-(2)-(8)-(6)59
-(2)-(8)-(6)-(0)24
-(2)-(8)-(6)-(0)-(1)1809
-(2)-(8)-(6)-(1)59
-(2)-(8)-(6)-(1)-(0)24
-(2)-(8)-(6)-(1)-(0)-(1)1791
-(2)-(8)-(6)-(1)-(1)24
-(2)-(8)-(6)-(1)-(1)-(1)245
-(2)-(8)-(6)-(1)59
-(2)-(8)-(6)-(1)-(0)24
-(2)-(8)-(6)-(1)-(0)-(1)1791
-(2)-(8)-(6)-(1)-(1)24
-(2)-(8)-(6)-(1)-(1)-(1)1802
-(2)-(8)-(7)246
-(2)-(8)-(7)-(1)245
-(2)-(8)-(7)246
-(2)-(8)-(7)-(1)1802
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1810
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1034
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1811
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1812
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)2
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(1)1793
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1820
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1820
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1402
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1820
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1821
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1820
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1821
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1822
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1116
-(2)-(8)-(7)-(3)1000
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1792
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1024
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1823
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1823
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1000
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1825
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1826
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1827
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1828
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1827
-(2)-(8)-(12)-(0)-(0)-(3)-(4)86
-(2)-(8)-(12)-(0)-(0)-(3)-(4)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1825
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1826
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1827
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1829
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1831
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1831
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1832
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1828
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1827
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1829
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1831
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1825
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1826
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1827
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1825
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1827
-(2)-(8)-(12)-(0)-(0)-(2)1835
-(2)-(8)-(12)-(0)-(0)-(3)1834
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1836
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1837
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1838
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1839
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1838
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1841
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)1842
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1843
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1843
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1844
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1845
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1843
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1846
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1847
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)97
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)596
-(2)-(8)-(1)-(1)-(0)71
-(2)-(8)-(1)-(1)-(0)1110
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1363
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1847
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)1363
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(1)1809
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(0)1850
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(2)1851
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1792
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1024
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1852
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1853
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)1855
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1855
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(3)1852
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1852
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1852
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1853
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1363
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1853
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1820
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1820
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1814
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1815
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1816
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1817
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1818
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1819
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1820
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1821
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1813
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1814
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1815
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1816
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1817
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1818
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1819
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1820
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1821
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1857
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)1857
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)596
-(2)-(8)-(1)-(1)-(0)71
-(2)-(8)-(1)-(1)-(0)1110
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1848
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1857
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1858
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1857
-(2)-(8)-(12)-(0)-(0)-(2)1859
-(2)-(8)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1809
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)1850
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)1851
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)1858
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1860
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1857
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)1857
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)596
-(2)-(8)-(1)-(1)-(0)71
-(2)-(8)-(1)-(1)-(0)1110
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1860
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1857
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1858
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1857
-(2)-(8)-(12)-(0)-(0)-(2)1859
-(2)-(8)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1809
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)1850
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)1851
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)1858
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1866
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1873
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1876
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1877
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(3)1878
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1879
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1878
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1877
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)425
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1877
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1880
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(3)1878
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(3)1881
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1882
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1878
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1881
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1877
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)425
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1880
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)431
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1877
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1880
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1883
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(3)1878
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(3)1881
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(3)1884
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1885
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1878
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1881
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1884
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1877
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)425
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1880
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)431
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1883
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)971
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1877
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1880
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1883
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1886
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(3)1878
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(3)1881
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(3)1884
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1886
-(2)-(8)-(7)-(3)1887
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1888
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1886
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1878
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1881
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1884
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1887
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1877
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)425
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1880
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)431
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1883
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)971
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1886
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)503
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1861
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1871
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1874
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1877
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1880
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1883
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1886
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1889
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(3)1864
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)1865
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(3)1872
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(3)1875
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(3)1878
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(3)1881
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(3)1884
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1886
-(2)-(8)-(7)-(3)1887
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1889
-(2)-(8)-(7)-(3)1890
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1891
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1861
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1871
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1874
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1877
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1880
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1883
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1886
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1889
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(2)596
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1864
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1865
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1872
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1875
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1878
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1881
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1884
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1887
-(2)-(8)-(12)-(0)-(0)-(3)-(2)-(0)1890
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1869
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)249
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1867
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1861
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1862
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1871
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1874
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1877
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)425
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1880
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)431
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1883
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)971
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1886
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)503
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)-(1)1889
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)182
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(0)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)785
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1863
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(3)1787
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1869
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)1110
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1892
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1892
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1787
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1868
-(2)-(8)-(12)-(0)-(0)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(3)1892
-(2)-(8)-(12)-(0)-(0)-(3)1867
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1893
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1894
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1895
-(2)-(8)-(12)-(0)-(0)-(0)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)1896
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1897
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1402
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)-(12)-(0)-(0)-(3)1813
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1898
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1838
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1847
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1849
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1838
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)229
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1838
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1899
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1838
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1772
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)229
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(3)1838
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1901
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1900
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1900
-(2)-(8)-(7)-(3)1838
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1900
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1902
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1838
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)229
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1838
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1903
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1838
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1904
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1813
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1848
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)-(12)-(0)-(0)-(3)1813
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1905
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1847
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1906
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1834
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1834
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1907
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1908
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1834
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1909
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1910
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1911
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1910
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1912
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1913
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)1914
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1915
-(2)-(8)-(12)-(0)-(0)-(4)-(3)489
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1913
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1912
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1916
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)1914
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1917
-(2)-(8)-(12)-(0)-(0)-(4)-(3)489
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1916
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1919
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1920
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1919
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1921
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1854
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)1854
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1919
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1921
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1854
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(3)1824
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1854
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1922
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1824
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1923
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)334
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(2)1924
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(3)1870
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(2)1924
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1925
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1926
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1927
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1925
-(2)-(8)-(12)-(0)-(0)-(3)1927
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(2)1925
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1926
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1927
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1927
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)1928
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)1929
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)1793
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1804
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)1930
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)1927
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1931
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1927
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(2)-(0)-(3)334
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1932
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1933
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(2)-(1)-(0)128
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)1927
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(0)1784
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(2)1934
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(3)334
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(3)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(0)1932
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(2)1933
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(3)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(1)139
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(0)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(3)-(1)139
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(0)1936
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)-(0)334
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)-(2)1937
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(2)1938
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(2)1934
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(3)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1790
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1939
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1940
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1941
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1941
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1942
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1941
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1943
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1941
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1944
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1941
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1822
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1926
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1927
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1927
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1945
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1927
-(2)-(8)-(12)-(0)-(0)-(2)1928
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1927
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)1946
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1925
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(0)-(1)1946
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(4)1927
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1925
-(2)-(8)-(12)-(0)-(0)-(3)1927
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1856
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1918
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1823
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1823
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1947
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)1929
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)1793
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1823
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1931
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1823
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1932
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1933
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)-(0)128
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)1823
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(0)1784
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(2)1934
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(3)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(0)1932
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(2)1933
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(3)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(1)139
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(0)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(3)-(1)139
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(0)1936
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)-(0)126
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(1)-(2)1937
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)-(2)1938
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(4)1935
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(0)1784
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(2)1934
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(3)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)511
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1790
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1920
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1835
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1847
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1847
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1906
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1834
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1792
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1024
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(0)1833
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)1948
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(0)1834
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(2)1950
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1951
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(1)1952
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(2)1924
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(2)1924
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1953
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1954
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1900
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1955
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)501
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1954
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1956
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)501
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1954
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1957
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)501
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1958
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1959
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1959
-(2)-(8)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1894
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1772
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1810
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1960
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1900
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1900
-(2)-(8)-(12)-(0)-(0)-(2)1961
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1829
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1829
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1962
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)-(0)-(3)1829
-(2)-(8)-(12)-(0)-(0)-(3)1962
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1786
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1963
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1829
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1829
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1962
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)-(0)-(3)1829
-(2)-(8)-(12)-(0)-(0)-(3)1962
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)1834
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1829
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1829
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1962
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1829
-(2)-(8)-(12)-(0)-(0)-(3)1829
-(2)-(8)-(12)-(0)-(0)-(3)1962
-(2)-(8)-(12)-(0)-(0)-(3)501
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1786
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1963
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1829
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1829
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1962
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)501
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)501
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)501
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)1822
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)-(1)1964
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1965
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1829
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1962
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1834
-(2)-(8)-(12)-(0)-(0)-(3)-(4)2
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)501
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(1)1793
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1966
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1788
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1788
-(2)-(8)-(12)-(0)-(0)-(2)1825
-(2)-(8)-(12)-(0)-(0)-(3)489
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)1967
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1968
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)1802
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1862
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)1802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(3)501
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1866
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1862
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)1802
-(2)-(8)-(7)-(3)1867
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)59
-(2)-(8)-(12)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)1802
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1863
-(2)-(8)-(12)-(0)-(0)-(1)-(3)489
-(2)-(8)-(12)-(0)-(0)-(1)-(3)501
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1867
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1969
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(3)1824
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1824
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1970
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1971
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)1919
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(2)1920
-(2)-(8)-(12)-(0)-(0)-(3)-(4)84
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)-(1)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(3)1972
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(0)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)1972
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1973
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)1974
-(2)-(8)-(7)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1975
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1975
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1976
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1971
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)84
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)-(1)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(0)1975
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(0)1974
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(2)1977
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(4)84
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(0)-(1)1798
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(3)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(7)-(3)1972
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(0)1975
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(0)1974
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(2)1978
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(5)-(0)-(12)-(0)-(0)-(3)-(3)1972
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1979
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1854
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1854
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1980
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1798
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1920
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1919
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1920
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1971
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1920
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1981
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1952
-(2)-(8)-(7)-(3)1856
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1982
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1856
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1983
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1983
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1831
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1984
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1983
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1831
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1834
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1983
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)1983
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1830
-(2)-(8)-(7)-(3)1831
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1983
-(2)-(8)-(12)-(0)-(0)-(3)1983
-(2)-(8)-(12)-(0)-(0)-(3)1831
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1786
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1963
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1985
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1837
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1986
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1792
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1024
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1987
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1986
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1932
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1933
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1987
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)-(0)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1987
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1988
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1952
-(2)-(8)-(7)-(3)1989
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1990
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1793
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1989
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1991
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1952
-(2)-(8)-(7)-(3)1989
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1992
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1989
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)22
-(2)-(8)-(2)1892
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)59
-(2)-(8)-(4)-(0)-(0)24
-(2)-(8)-(4)-(0)-(0)-(1)1791
-(2)-(8)-(4)-(0)-(1)58
-(2)-(8)-(4)-(0)-(1)-(1)24
-(2)-(8)-(4)-(0)-(1)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1993
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1994
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)1993
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1719
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)1719
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)1993
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)559
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1994
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)247
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)330
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)785
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)78
-(2)-(8)-(12)-(0)-(2)-(0)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)576
-(2)-(8)-(12)-(0)-(2)-(0)-(1)1993
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)-(1)231
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)-(1)-(0)362
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)-(1)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)-(1)-(0)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)863
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)863
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)576
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1994
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)1994
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)197
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)162
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)1791
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)1995
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)1994
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1994
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1996
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1894
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1996
-(2)-(8)-(12)-(0)-(0)-(2)1896
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1996
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1894
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1996
-(2)-(8)-(12)-(0)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(2)1896
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1996
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1866
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)168
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)176
-(2)-(8)-(7)-(3)1997
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1894
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1996
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1997
-(2)-(8)-(12)-(0)-(0)-(2)1896
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)1998
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)1116
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(3)1999
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1894
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1998
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1999
-(2)-(8)-(12)-(0)-(0)-(2)1896
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)2001
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)2000
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)2002
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(3)2003
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1986
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(3)2004
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)2001
-(2)-(8)-(12)-(0)-(0)-(3)2003
-(2)-(8)-(12)-(0)-(0)-(3)1986
-(2)-(8)-(12)-(0)-(0)-(3)2004
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)2001
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)2000
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)2002
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(3)2003
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1809
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(1)-(0)-(1)1791
-(2)-(8)-(7)-(1)-(1)-(1)-(1)58
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1986
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1798
-(2)-(8)-(7)-(1)-(1)1024
-(2)-(8)-(7)-(1)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)-(1)2000
-(2)-(8)-(7)-(3)2004
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)2005
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2003
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)2006
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1986
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)2007
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2004
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)2008
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)2009
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)2000
-(2)-(8)-(12)-(0)-(0)-(3)-(4)2003
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1986
-(2)-(8)-(12)-(0)-(0)-(3)-(4)2004
-(2)-(8)-(12)-(0)-(0)-(3)-(4)2005
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1801
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)2010
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1772
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)501
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)2011
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(4)489
-(2)-(8)-(12)-(0)-(0)-(3)-(4)501
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)2012
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1791
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1833
-(2)-(8)-(7)-(3)1834
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)-(1)1792
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)1024
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(1)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(7)-(3)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1799
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1854
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)61
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(1)-(1)1116
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(7)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(2)1824
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(5)-(0)-(12)-(0)-(0)-(3)1822
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(0)1790
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(2)1797
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(3)-(1)1952
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(0)1833
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(1)-(1)-(1)1948
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(2)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(0)1834
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(2)-(2)-(2)1950
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1951
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(1)1952
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)100
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)90
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)53
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)-(0)52
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(1)19
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(2)1808
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(4)91
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)128
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)1953
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(2)1924
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(0)1949
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(3)-(5)-(0)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(3)-(0)-(0)-(2)1924
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(0)-(0)1791
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)-(5)-(0)-(12)-(0)-(0)-(3)1953
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)1840
-(2)-(8)-(1)19
-(2)-(8)-(1)23
-(2)-(8)-(2)2014
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)2013
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1779
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1245
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1779
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1797
-(2)-(8)-(12)-(0)-(2)-(2)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)171
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)276
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1856
-(2)-(8)-(12)-(0)-(0)-(3)1245
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1245

/Users/ashleychen/Desktop/testing/b/5246_b.java
Changes: -19099.511862112806
CROSS-ENTROPY-LEFT: -6.487605931424187
CROSS-ENTROPY-RIGHT: -6.135403746261743
CROSS-ENTROPY-AVG: -4.244335969358401
CROSS-ENTROPY-DIFF: -0.3522021851624437

/Users/ashleychen/Desktop/testing/b/5250_b.java
Changes: -60431.296444851505
CROSS-ENTROPY-LEFT: -8.357253000256051
CROSS-ENTROPY-RIGHT: -8.319286404852905
CROSS-ENTROPY-AVG: -5.563039348692949
CROSS-ENTROPY-DIFF: -0.037966595403146286

