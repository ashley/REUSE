----------------------------------------------------------------------------------------------------
May 05, 2017 3:32:25 PM codemining.util.SettingsLoader <init>
INFO: Configuration file not found. Loading defaults.
LEFT COMMENTS
/* *//** 
 * <p>Helper methods for working with  {@link Annotation} instances.</p><p>This class contains various utility methods that make working with annotations simpler.</p> <p> {@link Annotation} instances are always proxy objects; unfortunatelydynamic proxies cannot be depended upon to know how to implement certain methods in the same manner as would be done by "natural"  {@link Annotation}s. The methods presented in this class can be used to avoid that possibility. It is of course also possible for dynamic proxies to actually delegate their e.g.  {@link Annotation#equals(Object)}/ {@link Annotation#hashCode()}/ {@link Annotation#toString()} implementations to {@link AnnotationUtils}.</p> <p>#ThreadSafe#</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * A style that prints annotations as recommended.
 */
/** 
 * Serialization version 
 */
/** 
 * {@inheritDoc}
 */
//
/** 
 * {@inheritDoc}
 */
/** 
 * <p> {@code AnnotationUtils} instances should NOT be constructed instandard programming. Instead, the class should be used statically.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Checks if two annotations are equal using the criteria for equality presented in the  {@link Annotation#equals(Object)} API docs.</p>
 * @param a1 the first Annotation to compare, {@code null} returns{@code false} unless both are {@code null}
 * @param a2 the second Annotation to compare, {@code null} returns{@code false} unless both are {@code null}
 * @return {@code true} if the two annotations are {@code equal} or both{@code null}
 */
/** 
 * <p>Generate a hash code for the given annotation using the algorithm presented in the  {@link Annotation#hashCode()} API docs.</p>
 * @param a the Annotation for a hash code calculation is desired, not{@code null}
 * @return the calculated hash code
 * @throws RuntimeException if an {@code Exception} is encountered duringannotation member access
 * @throws IllegalStateException if an annotation method invocation returns{@code null}
 */
/** 
 * <p>Generate a string representation of an Annotation, as suggested by {@link Annotation#toString()}.</p>
 * @param a the annotation of which a string representation is desired
 * @return the standard string representation of an annotation, not{@code null}
 */
//
/** 
 * <p>Checks if the specified type is permitted as an annotation member.</p> <p>The Java language specification only permits certain types to be used in annotations. These include  {@link String},  {@link Class}, primitive types,  {@link Annotation},  {@link Enum}, and single-dimensional arrays of these types.</p>
 * @param type the type to check, {@code null}
 * @return {@code true} if the type is a valid type to use in an annotation
 */
//
/** 
 * Helper method for generating a hash code for a member of an annotation.
 * @param name the name of the member
 * @param value the value of the member
 * @return a hash code for this member
 */
/** 
 * Helper method for checking whether two objects of the given type are equal. This method is used to compare the parameters of two annotation instances.
 * @param type the type of the objects to be compared
 * @param o1 the first object
 * @param o2 the second object
 * @return a flag whether these objects are equal
 */
/** 
 * Helper method for comparing two objects of an array type.
 * @param componentType the component type of the array
 * @param o1 the first object
 * @param o2 the second object
 * @return a flag whether these objects are equal
 */
/** 
 * Helper method for comparing two arrays of annotations.
 * @param a1 the first array
 * @param a2 the second array
 * @return a flag whether these arrays are equal
 */
/** 
 * Helper method for generating a hash code for an array.
 * @param componentType the component type of the array
 * @param o the array
 * @return a hash code for the specified array
 */
RIGHT COMMENTS
/* *//** 
 * <p>Helper methods for working with  {@link Annotation} instances.</p><p>This class contains various utility methods that make working with annotations simpler.</p> <p> {@link Annotation} instances are always proxy objects; unfortunatelydynamic proxies cannot be depended upon to know how to implement certain methods in the same manner as would be done by "natural"  {@link Annotation}s. The methods presented in this class can be used to avoid that possibility. It is of course also possible for dynamic proxies to actually delegate their e.g.  {@link Annotation#equals(Object)}/ {@link Annotation#hashCode()}/ {@link Annotation#toString()} implementations to {@link AnnotationUtils}.</p> <p>#ThreadSafe#</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * A style that prints annotations as recommended.
 */
/** 
 * Serialization version 
 */
/** 
 * {@inheritDoc}
 */
//
/** 
 * {@inheritDoc}
 */
/** 
 * <p> {@code AnnotationUtils} instances should NOT be constructed instandard programming. Instead, the class should be used statically.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Checks if two annotations are equal using the criteria for equality presented in the  {@link Annotation#equals(Object)} API docs.</p>
 * @param a1 the first Annotation to compare, {@code null} returns{@code false} unless both are {@code null}
 * @param a2 the second Annotation to compare, {@code null} returns{@code false} unless both are {@code null}
 * @return {@code true} if the two annotations are {@code equal} or both{@code null}
 */
/** 
 * <p>Generate a hash code for the given annotation using the algorithm presented in the  {@link Annotation#hashCode()} API docs.</p>
 * @param a the Annotation for a hash code calculation is desired, not{@code null}
 * @return the calculated hash code
 * @throws RuntimeException if an {@code Exception} is encountered duringannotation member access
 * @throws IllegalStateException if an annotation method invocation returns{@code null}
 */
/** 
 * <p>Generate a string representation of an Annotation, as suggested by {@link Annotation#toString()}.</p>
 * @param a the annotation of which a string representation is desired
 * @return the standard string representation of an annotation, not{@code null}
 */
//
/** 
 * <p>Checks if the specified type is permitted as an annotation member.</p> <p>The Java language specification only permits certain types to be used in annotations. These include  {@link String},  {@link Class}, primitive types,  {@link Annotation},  {@link Enum}, and single-dimensional arrays of these types.</p>
 * @param type the type to check, {@code null}
 * @return {@code true} if the type is a valid type to use in an annotation
 */
//
/** 
 * Helper method for generating a hash code for a member of an annotation.
 * @param name the name of the member
 * @param value the value of the member
 * @return a hash code for this member
 */
/** 
 * Helper method for checking whether two objects of the given type are equal. This method is used to compare the parameters of two annotation instances.
 * @param type the type of the objects to be compared
 * @param o1 the first object
 * @param o2 the second object
 * @return a flag whether these objects are equal
 */
/** 
 * Helper method for comparing two objects of an array type.
 * @param componentType the component type of the array
 * @param o1 the first object
 * @param o2 the second object
 * @return a flag whether these objects are equal
 */
/** 
 * Helper method for comparing two arrays of annotations.
 * @param a1 the first array
 * @param a2 the second array
 * @return a flag whether these arrays are equal
 */
/** 
 * Helper method for generating a hash code for an array.
 * @param componentType the component type of the array
 * @param o the array
 * @return a hash code for the specified array
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6150c3ec
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@44c03695

#TRAVERSE
LEFTCHILD: CLASS: AnnotationUtils
RIGHTCHILD: CLASS: AnnotationUtils
##SNODE L: CLASS: AnnotationUtils
##SNODE L: CLASS: AnnotationUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@7e6f74c
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@dd05255

##TRAVERSE
LEFTCHILD: METHOD: isValidAnnotationMemberType(Class<?>)
RIGHTCHILD: METHOD: isValidAnnotationMemberType(Class<?>)
###SNODE L: METHOD: isValidAnnotationMemberType(Class<?>)
###SNODE L: METHOD: isValidAnnotationMemberType(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: TO_STRING_STYLE : ToStringStyle
RIGHTCHILD: FIELD: TO_STRING_STYLE : ToStringStyle
###SNODE L: FIELD: TO_STRING_STYLE : ToStringStyle
###SNODE L: FIELD: TO_STRING_STYLE : ToStringStyle
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: annotationArrayMemberEquals(Annotation[],Annotation[])
RIGHTCHILD: METHOD: annotationArrayMemberEquals(Annotation[],Annotation[])
###SNODE L: METHOD: annotationArrayMemberEquals(Annotation[],Annotation[])
###SNODE L: METHOD: annotationArrayMemberEquals(Annotation[],Annotation[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: arrayMemberHash(Class<?>,Object)
RIGHTCHILD: METHOD: arrayMemberHash(Class<?>,Object)
###SNODE L: METHOD: arrayMemberHash(Class<?>,Object)
###SNODE L: METHOD: arrayMemberHash(Class<?>,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashMember(String,Object)
RIGHTCHILD: METHOD: hashMember(String,Object)
###SNODE L: METHOD: hashMember(String,Object)
###SNODE L: METHOD: hashMember(String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode(Annotation)
RIGHTCHILD: METHOD: hashCode(Annotation)
###SNODE L: METHOD: hashCode(Annotation)
###SNODE L: METHOD: hashCode(Annotation)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: arrayMemberEquals(Class<?>,Object,Object)
RIGHTCHILD: METHOD: arrayMemberEquals(Class<?>,Object,Object)
###SNODE L: METHOD: arrayMemberEquals(Class<?>,Object,Object)
###SNODE L: METHOD: arrayMemberEquals(Class<?>,Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: AnnotationUtils()
RIGHTCHILD: CONSTRUCTOR: AnnotationUtils()
###SNODE L: CONSTRUCTOR: AnnotationUtils()
###SNODE L: CONSTRUCTOR: AnnotationUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(Annotation,Annotation)
RIGHTCHILD: METHOD: equals(Annotation,Annotation)
###SNODE L: METHOD: equals(Annotation,Annotation)
###SNODE L: METHOD: equals(Annotation,Annotation)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: memberEquals(Class<?>,Object,Object)
RIGHTCHILD: METHOD: memberEquals(Class<?>,Object,Object)
###SNODE L: METHOD: memberEquals(Class<?>,Object,Object)
###SNODE L: METHOD: memberEquals(Class<?>,Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Annotation)
RIGHTCHILD: METHOD: toString(Annotation)
###SNODE L: METHOD: toString(Annotation)
###SNODE L: METHOD: toString(Annotation)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)8
-(0)-(0)-(1)9
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)12
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)13
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)15
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)17
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)18
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)20
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)18
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)25
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)18
-(2)-(8)-(3)-(2)-(5)100
-(2)-(8)-(3)-(2)-(5)-(0)30
-(2)-(8)-(3)-(2)-(5)-(0)-(1)21
-(2)-(8)-(3)-(2)-(5)-(0)-(1)22
-(2)-(8)-(3)-(2)-(5)-(0)-(1)23
-(2)-(8)-(3)-(2)-(5)-(0)-(2)26
-(2)-(8)-(3)-(2)-(5)-(0)-(3)29
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(0)27
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(2)28
-(2)-(8)-(3)-(2)-(5)-(0)51
-(2)-(8)-(3)-(2)-(5)-(0)-(2)50
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)31
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)32
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)35
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)32
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)36
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)32
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)37
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)32
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)38
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)39
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)40
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)41
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)42
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)43
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)44
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)45
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)46
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)47
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)48
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)49
-(2)-(8)-(3)-(2)-(5)-(0)90
-(2)-(8)-(3)-(2)-(5)-(0)-(1)53
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(3)-(2)-(5)-(0)-(1)54
-(2)-(8)-(3)-(2)-(5)-(0)-(2)56
-(2)-(8)-(3)-(2)-(5)-(0)-(4)24
-(2)-(8)-(3)-(2)-(5)-(0)-(4)-(1)55
-(2)-(8)-(3)-(2)-(5)-(0)-(7)61
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)23
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)59
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)2
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(0)2
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(0)-(0)6
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(0)-(1)7
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(1)57
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)58
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)60
-(2)-(8)-(3)-(2)-(5)-(0)-(12)50
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)64
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)59
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(1)58
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(1)-(1)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)29
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)62
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(2)63
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)78
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)61
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)23
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)59
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)-(1)58
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)65
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)66
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(2)67
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(3)60
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)50
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)77
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)68
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(2)69
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(3)65
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)72
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)70
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)71
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)23
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)59
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)-(1)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)73
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)59
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)57
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(1)58
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)65
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)62
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)73
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)76
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)89
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)84
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)-(1)79
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)83
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)80
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(0)62
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(1)63
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(1)81
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(0)62
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(2)82
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(2)85
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)86
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)87
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)88
-(2)-(8)-(3)-(2)-(5)-(0)90
-(2)-(8)-(3)-(2)-(5)-(0)-(1)53
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)52
-(2)-(8)-(3)-(2)-(5)-(0)-(1)54
-(2)-(8)-(3)-(2)-(5)-(0)-(2)92
-(2)-(8)-(3)-(2)-(5)-(0)-(4)91
-(2)-(8)-(3)-(2)-(5)-(0)-(7)61
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)23
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)93
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)94
-(2)-(8)-(3)-(2)-(5)-(0)-(7)61
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)23
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)55
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)95
-(2)-(8)-(3)-(2)-(5)-(0)-(7)61
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)96
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)97
-(2)-(8)-(3)-(2)-(5)-(0)-(12)50
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)77
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)98
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)97
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)50
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)97
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(0)20
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(2)88
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)74
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(1)9
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)97
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)34
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)99
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)92
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)94
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)95
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)97
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)20
-(2)-(8)-(12)50
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)9
-(2)-(8)-(7)-(3)104
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)9
-(2)-(8)-(7)-(3)105
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)104
-(2)-(8)-(12)-(0)-(0)-(1)105
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)104
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)105
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)9
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)104
-(2)-(8)-(12)-(0)-(2)-(2)-(2)62
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)9
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)108
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)105
-(2)-(8)-(12)-(0)-(2)-(2)-(2)62
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)107
-(2)-(8)-(12)-(0)-(0)-(3)111
-(2)-(8)-(12)-(0)-(0)-(3)104
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)108
-(2)-(8)-(12)-(0)-(0)-(3)111
-(2)-(8)-(12)-(0)-(0)-(3)105
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(0)-(3)108
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)113
-(2)-(8)-(12)-(0)-(1)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(2)114
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)-(2)115
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(2)118
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(2)119
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)121
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)122
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)104
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)123
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)122
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)105
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(2)124
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(2)119
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)121
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)123
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)125
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)12
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)9
-(2)-(8)-(7)-(3)131
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(1)9
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)131
-(2)-(8)-(12)-(0)-(2)-(2)-(2)62
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(0)-(3)113
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)107
-(2)-(8)-(12)-(0)-(1)-(2)114
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)128
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)122
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)131
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)135
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)137
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(2)82
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)97
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)139
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)140
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)-(1)139
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)9
-(2)-(8)-(7)-(3)131
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)17
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)16
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)17
-(2)-(8)-(12)-(0)-(2)-(2)-(4)131
-(2)-(8)-(12)-(0)-(2)-(2)-(4)25
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(0)-(3)113
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)131
-(2)-(8)-(12)-(0)-(1)-(0)-(2)62
-(2)-(8)-(12)-(0)-(1)-(2)114
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(2)115
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(0)128
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(2)122
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)131
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)139
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)140
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)-(1)139
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)144
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)118
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(2)145
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)146
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)107
-(2)-(8)-(12)-(0)-(0)-(1)-(2)148
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)-(0)-(2)-(2)149
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)68
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(0)-(2)-(3)107
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)68
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(0)-(2)-(3)107
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)137
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)150
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)151
-(2)-(8)-(12)-(0)-(2)-(2)153
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)150
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)130
-(2)-(8)-(12)-(0)-(2)-(2)-(1)152
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(2)145
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)156
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)151
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)155
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)97
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(2)146
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)97
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)9
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)156
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)151
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(1)9
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)97
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)156
-(2)-(8)-(12)-(0)-(0)-(0)151
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(2)130
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)124
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)157
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)158
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)157
-(2)-(8)-(12)-(0)-(0)-(1)158
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)157
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)158
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(2)145
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)159
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)146
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(2)149
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(1)9
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(1)9
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)157
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)158
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)159
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)160
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)157
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)158
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)149
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)161
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)-(1)9
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)-(1)9
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)163
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)165
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)165
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)166
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)167
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)167
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)171
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)26
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)26
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)172
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)173
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)173
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)174
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)175
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)175
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)176
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)158
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(1)157
-(2)-(8)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(1)158
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)161
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)9
-(2)-(8)-(7)-(3)104
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)9
-(2)-(8)-(7)-(3)105
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)104
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)105
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)104
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)112
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)104
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)105
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)155
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)160
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)184
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)163
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)165
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)166
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)167
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)171
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)26
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)172
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)173
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)174
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)175
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)176
-(2)-(8)-(12)-(0)-(0)-(3)-(1)164
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)184
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(0)-(2)130
-(2)-(8)-(12)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(3)-(1)184

LEFT COMMENTS
/* *//** 
 * <p>Operations on arrays, primitive arrays (like  {@code int[]}) and primitive wrapper arrays (like  {@code Integer[]}).</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null}array input. However, an Object array that contains a  {@code null}element may throw an exception. Each method documents its behaviour.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * An empty immutable  {@code Object} array.
 */
/** 
 * An empty immutable  {@code Class} array.
 */
/** 
 * An empty immutable  {@code String} array.
 */
/** 
 * An empty immutable  {@code long} array.
 */
/** 
 * An empty immutable  {@code Long} array.
 */
/** 
 * An empty immutable  {@code int} array.
 */
/** 
 * An empty immutable  {@code Integer} array.
 */
/** 
 * An empty immutable  {@code short} array.
 */
/** 
 * An empty immutable  {@code Short} array.
 */
/** 
 * An empty immutable  {@code byte} array.
 */
/** 
 * An empty immutable  {@code Byte} array.
 */
/** 
 * An empty immutable  {@code double} array.
 */
/** 
 * An empty immutable  {@code Double} array.
 */
/** 
 * An empty immutable  {@code float} array.
 */
/** 
 * An empty immutable  {@code Float} array.
 */
/** 
 * An empty immutable  {@code boolean} array.
 */
/** 
 * An empty immutable  {@code Boolean} array.
 */
/** 
 * An empty immutable  {@code char} array.
 */
/** 
 * An empty immutable  {@code Character} array.
 */
/** 
 * The index value when an element is not found in a list or array:  {@code -1}. This value is returned by methods in this class and can also be used in comparisons with values returned by various method from  {@link java.util.List}.
 */
/** 
 * <p>ArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
//
/** 
 * <p>Outputs an array as a String, treating  {@code null} as an empty array.</p><p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be {@code null}
 * @return a String representation of the array, '{}' if null array input
 */
/** 
 * <p>Outputs an array as a String handling  {@code null}s.</p> <p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be {@code null}
 * @param stringIfNull  the String to return if the array is {@code null}
 * @return a String representation of the array
 */
/** 
 * <p>Get a hash code for an array handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array  the array to get a hash code for, {@code null} returns zero
 * @return a hash code for the array
 */
/** 
 * <p>Compares two arrays, using equals(), handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array1  the left hand array to compare, may be {@code null}
 * @param array2  the right hand array to compare, may be {@code null}
 * @return {@code true} if the arrays are equal
 */
//
//
/** 
 * <p>Converts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value.</p> <p>This method can be used to initialize:</p> <pre> // Create a Map mapping colors. Map colorMap = MapUtils.toMap(new String[][] {{ {"RED", "#FF0000"}, {"GREEN", "#00FF00"}, {"BLUE", "#0000FF"}}); </pre> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be  {@code null}
 * @return a {@code Map} that was created from the array
 * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements
 * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array
 */
//
//
/** 
 * <p>Create a type-safe generic array.</p> <p>The Java language does not allow an array to be created from a generic type:</p> <pre> public static &lt;T&gt; T[] createAnArray(int size) { return new T[size]; // compiler error here } public static &lt;T&gt; T[] createAnArray(int size) { return (T[])new Object[size]; // ClassCastException at runtime } </pre> <p>Therefore new arrays of generic types can be created with this method. For example, an array of Strings can be created:</p> <pre> String[] array = ArrayUtils.toArray("1", "2"); String[] emptyArray = ArrayUtils.&lt;String&gt;toArray(); </pre> <p>The method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array.</p> <p>Note, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))</code>, there is no real advantage when compared to <code>new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}</code>.</p>
 * @param < T >   the array's element type
 * @param items  the varargs array items, null allowed
 * @return the array, not null unless a null array is passed in
 * @since  3.0
 */
//
//
/** 
 * <p>Shallow clones an array returning a typecast result and handling {@code null}.</p> <p>The objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param < T > the component type of the array
 * @param array  the array to shallow clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
//
//
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
//
//
/** 
 * <p>Produces a new array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p> <p>The component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type {@code Date}, the following usage is envisaged:</p> <pre> Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5); </pre>
 * @param < T > the component type of the array
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
//
//
/** 
 * <p>Produces a new  {@code long} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code int} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code short} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code char} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code byte} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code double} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code float} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code boolean} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
//
//
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
//
/** 
 * <p>Returns the length of the specified array. This method can deal with  {@code Object} arrays and with primitive arrays.</p><p>If the input array is  {@code null},  {@code 0} is returned.</p><pre> ArrayUtils.getLength(null)            = 0 ArrayUtils.getLength([])              = 0 ArrayUtils.getLength([null])          = 1 ArrayUtils.getLength([true, false])   = 2 ArrayUtils.getLength([1, 2, 3])       = 3 ArrayUtils.getLength(["a", "b", "c"]) = 3 </pre>
 * @param array  the array to retrieve the length from, may be null
 * @return The length of the array, or {@code 0} if the array is {@code null}
 * @throws IllegalArgumentException if the object argument is not an array.
 * @since 2.1
 */
/** 
 * <p>Checks whether two arrays are the same type taking into account multi-dimensional arrays.</p>
 * @param array1 the first array, must not be {@code null}
 * @param array2 the second array, must not be {@code null}
 * @return {@code true} if type of arrays matches
 * @throws IllegalArgumentException if either array is {@code null}
 */
//
//
/** 
 * <p>Reverses the order of the given array.</p> <p>There is no special handling for multi-dimensional arrays.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
//
//
//
//
/** 
 * <p>Finds the index of the given object in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given object within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the object is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param objectToFind  the object to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 * @since 2.1
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
/** 
 * <p>Checks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance).</p> <p>The method returns  {@code false} if a {@code null} arrayis passed in.</p>
 * @param array  the array to search
 * @param valueToFind  the value to find
 * @param tolerance  the array contains the tolerance of the search
 * @return true if value falling within tolerance is in array
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) if {@code null} array input.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
//
//
/** 
 * <p>Converts an array of object Characters to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Character} array, may be {@code null}
 * @return a {@code char} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Character to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Character} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code char} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive chars to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array a {@code char} array
 * @return a {@code Character} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Longs to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Long} array, may be {@code null}
 * @return a {@code long} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Long to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Long} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code long} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive longs to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code long} array
 * @return a {@code Long} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Integers to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Integer} array, may be {@code null}
 * @return an {@code int} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Integer to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Integer} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return an {@code int} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive ints to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  an {@code int} array
 * @return an {@code Integer} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Shorts to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Short} array, may be {@code null}
 * @return a {@code byte} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Short to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Short} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code byte} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code short} array
 * @return a {@code Short} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Byte} array, may be {@code null}
 * @return a {@code byte} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Bytes to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Byte} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code byte} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive bytes to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code byte} array
 * @return a {@code Byte} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Double} array, may be {@code null}
 * @return a {@code double} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Doubles to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Double} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code double} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code double} array
 * @return a {@code Double} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Floats to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Float} array, may be {@code null}
 * @return a {@code float} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Floats to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Float} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code float} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive floats to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code float} array
 * @return a {@code Float} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Boolean} array, may be {@code null}
 * @return a {@code boolean} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Booleans to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Boolean} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code boolean} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code boolean} array
 * @return a {@code Boolean} array, {@code null} if null array input
 */
//
/** 
 * <p>Checks if an array of Objects is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive longs is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive ints is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive shorts is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive chars is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive bytes is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive doubles is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive floats is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive booleans is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
//
/** 
 * <p>Checks if an array of Objects is not empty or not  {@code null}.</p>
 * @param < T > the component type of the array
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive longs is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive ints is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive shorts is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive chars is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive bytes is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive doubles is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive floats is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive booleans is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(null, null)     = null ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] ArrayUtils.addAll([null], [null]) = [null, null] ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"] </pre>
 * @param < T > the component type of the array
 * @param array1  the first array whose elements are added to the new array, may be {@code null}
 * @param array2  the second array whose elements are added to the new array, may be {@code null}
 * @return The new array, {@code null} if both arrays are {@code null}. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.
 * @since 2.1
 * @throws IllegalArgumentException if the array types are incompatible
 */
//
//
/* *///
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new float[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[]</p> <pre> ArrayUtils.add(null, null)      = [null] ArrayUtils.add(null, "a")       = ["a"] ArrayUtils.add(["a"], null)     = ["a", null] ArrayUtils.add(["a"], "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], "c") = ["a", "b", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to "add" the element to, may be {@code null}
 * @param element  the object to add, may be {@code null}
 * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown
 * @since 2.1
 * @throws IllegalArgumentException if both arguments are null
 */
//
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, true)          = [true] ArrayUtils.add([true], false)       = [true, false] ArrayUtils.add([true, false], true) = [true, false, true] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, '0')       = ['0'] ArrayUtils.add(['1'], '0')      = ['1', '0'] ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1'] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.
 * @param array The array to copy, must not be {@code null}.
 * @param newArrayComponentType If {@code array} is {@code null}, create a size 1 array of this type.
 * @return A new copy of the array of size 1 greater than the input.
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, null)      = [null] ArrayUtils.add(null, 0, "a")       = ["a"] ArrayUtils.add(["a"], 1, null)     = ["a", null] ArrayUtils.add(["a"], 1, "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], 3, "c") = ["a", "b", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 * @throws IllegalArgumentException if both array and element are null
 */
//
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, true)          = [true] ArrayUtils.add([true], 0, false)       = [false, true] ArrayUtils.add([false], 1, true)       = [false, true] ArrayUtils.add([true, false], 1, true) = [true, true, false] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, 'a')            = ['a'] ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a'] ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b'] ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b'] ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c'] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1L], 0, 2L)           = [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @param clss the type of the element being added
 * @return A new array containing the existing elements and the new element
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(["a"], 0)           = [] ArrayUtils.remove(["a", "b"], 0)      = ["b"] ArrayUtils.remove(["a", "b"], 1)      = ["a"] ArrayUtils.remove(["a", "b", "c"], 1) = ["a", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
//
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, "a")            = null ArrayUtils.removeElement([], "a")              = [] ArrayUtils.removeElement(["a"], "b")           = ["a"] ArrayUtils.removeElement(["a", "b"], "a")      = ["b"] ArrayUtils.removeElement(["a", "b", "a"], "a") = ["b", "a"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([true], 0)              = [] ArrayUtils.remove([true, false], 0)       = [false] ArrayUtils.remove([true, false], 1)       = [true] ArrayUtils.remove([true, true, false], 1) = [true, false] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, true)                = null ArrayUtils.removeElement([], true)                  = [] ArrayUtils.removeElement([true], false)             = [true] ArrayUtils.removeElement([true, false], false)      = [true] ArrayUtils.removeElement([true, false, true], true) = [false, true] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)          = [] ArrayUtils.remove([1, 0], 0)       = [0] ArrayUtils.remove([1, 0], 1)       = [1] ArrayUtils.remove([1, 0, 1], 1)    = [1, 1] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)        = null ArrayUtils.removeElement([], 1)          = [] ArrayUtils.removeElement([1], 0)         = [1] ArrayUtils.removeElement([1, 0], 0)      = [1] ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(['a'], 0)           = [] ArrayUtils.remove(['a', 'b'], 0)      = ['b'] ArrayUtils.remove(['a', 'b'], 1)      = ['a'] ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c'] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 'a')            = null ArrayUtils.removeElement([], 'a')              = [] ArrayUtils.removeElement(['a'], 'b')           = ['a'] ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b'] ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a'] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll(["a", "b", "c"], 0, 2) = ["b"] ArrayUtils.removeAll(["a", "b", "c"], 1, 2) = ["a"] </pre>
 * @param < T > the component type of the array
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
//
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, "a", "b")            = null ArrayUtils.removeElements([], "a", "b")              = [] ArrayUtils.removeElements(["a"], "b", "c")           = ["a"] ArrayUtils.removeElements(["a", "b"], "a", "c")      = ["b"] ArrayUtils.removeElements(["a", "b", "a"], "a")      = ["b", "a"] ArrayUtils.removeElements(["a", "b", "a"], "a", "a") = ["b"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
//
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([true, false, true], 0, 2) = [false] ArrayUtils.removeAll([true, false, true], 1, 2) = [true] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, true, false)               = null ArrayUtils.removeElements([], true, false)                 = [] ArrayUtils.removeElements([true], false, false)            = [true] ArrayUtils.removeElements([true, false], true, true)       = [false] ArrayUtils.removeElements([true, false, true], true)       = [false, true] ArrayUtils.removeElements([true, false, true], true, true) = [false] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
//
/** 
 * Removes multiple array elements specified by index.
 * @param array source
 * @param indices to remove, WILL BE SORTED--so only clones of user-owned arrays!
 * @return new array of same type minus elements specified by unique values of {@code indices}
 * @since 3.0.1
 */
//
//
//
//
//
//
/** 
 * Removes multiple array elements specified by indices.
 * @param array source
 * @param indices to remove
 * @return new array of same type minus elements specified by the set bits in {@code indices}
 * @since 3.2
 */
//
//
//
//
//
//
//
//
RIGHT COMMENTS
/* *//** 
 * <p>Operations on arrays, primitive arrays (like  {@code int[]}) and primitive wrapper arrays (like  {@code Integer[]}).</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null}array input. However, an Object array that contains a  {@code null}element may throw an exception. Each method documents its behaviour.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * An empty immutable  {@code Object} array.
 */
/** 
 * An empty immutable  {@code Class} array.
 */
/** 
 * An empty immutable  {@code String} array.
 */
/** 
 * An empty immutable  {@code long} array.
 */
/** 
 * An empty immutable  {@code Long} array.
 */
/** 
 * An empty immutable  {@code int} array.
 */
/** 
 * An empty immutable  {@code Integer} array.
 */
/** 
 * An empty immutable  {@code short} array.
 */
/** 
 * An empty immutable  {@code Short} array.
 */
/** 
 * An empty immutable  {@code byte} array.
 */
/** 
 * An empty immutable  {@code Byte} array.
 */
/** 
 * An empty immutable  {@code double} array.
 */
/** 
 * An empty immutable  {@code Double} array.
 */
/** 
 * An empty immutable  {@code float} array.
 */
/** 
 * An empty immutable  {@code Float} array.
 */
/** 
 * An empty immutable  {@code boolean} array.
 */
/** 
 * An empty immutable  {@code Boolean} array.
 */
/** 
 * An empty immutable  {@code char} array.
 */
/** 
 * An empty immutable  {@code Character} array.
 */
/** 
 * The index value when an element is not found in a list or array:  {@code -1}. This value is returned by methods in this class and can also be used in comparisons with values returned by various method from  {@link java.util.List}.
 */
/** 
 * <p>ArrayUtils instances should NOT be constructed in standard programming. Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
//
/** 
 * <p>Outputs an array as a String, treating  {@code null} as an empty array.</p><p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be {@code null}
 * @return a String representation of the array, '{}' if null array input
 */
/** 
 * <p>Outputs an array as a String handling  {@code null}s.</p> <p>Multi-dimensional arrays are handled correctly, including multi-dimensional primitive arrays.</p> <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 * @param array  the array to get a toString for, may be {@code null}
 * @param stringIfNull  the String to return if the array is {@code null}
 * @return a String representation of the array
 */
/** 
 * <p>Get a hash code for an array handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array  the array to get a hash code for, {@code null} returns zero
 * @return a hash code for the array
 */
/** 
 * <p>Compares two arrays, using equals(), handling multi-dimensional arrays correctly.</p> <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 * @param array1  the left hand array to compare, may be {@code null}
 * @param array2  the right hand array to compare, may be {@code null}
 * @return {@code true} if the arrays are equal
 */
//
//
/** 
 * <p>Converts the given array into a  {@link java.util.Map}. Each element of the array must be either a  {@link java.util.Map.Entry} or an Array, containing at least twoelements, where the first element is used as key and the second as value.</p> <p>This method can be used to initialize:</p> <pre> // Create a Map mapping colors. Map colorMap = MapUtils.toMap(new String[][] {{ {"RED", "#FF0000"}, {"GREEN", "#00FF00"}, {"BLUE", "#0000FF"}}); </pre> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  an array whose elements are either a {@link java.util.Map.Entry} oran Array containing at least two elements, may be  {@code null}
 * @return a {@code Map} that was created from the array
 * @throws IllegalArgumentException  if one element of this Array isitself an Array containing less then two elements
 * @throws IllegalArgumentException  if the array contains elements otherthan  {@link java.util.Map.Entry} and an Array
 */
//
//
/** 
 * <p>Create a type-safe generic array.</p> <p>The Java language does not allow an array to be created from a generic type:</p> <pre> public static &lt;T&gt; T[] createAnArray(int size) { return new T[size]; // compiler error here } public static &lt;T&gt; T[] createAnArray(int size) { return (T[])new Object[size]; // ClassCastException at runtime } </pre> <p>Therefore new arrays of generic types can be created with this method. For example, an array of Strings can be created:</p> <pre> String[] array = ArrayUtils.toArray("1", "2"); String[] emptyArray = ArrayUtils.&lt;String&gt;toArray(); </pre> <p>The method is typically used in scenarios, where the caller itself uses generic types that have to be combined into an array.</p> <p>Note, this method makes only sense to provide arguments of the same type so that the compiler can deduce the type of the array itself. While it is possible to select the type explicitly like in <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), Double.valueOf(Math.PI))</code>, there is no real advantage when compared to <code>new Number[] {Integer.valueOf(42), Double.valueOf(Math.PI)}</code>.</p>
 * @param < T >   the array's element type
 * @param items  the varargs array items, null allowed
 * @return the array, not null unless a null array is passed in
 * @since  3.0
 */
//
//
/** 
 * <p>Shallow clones an array returning a typecast result and handling {@code null}.</p> <p>The objects in the array are not cloned, thus there is no special handling for multi-dimensional arrays.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param < T > the component type of the array
 * @param array  the array to shallow clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
/** 
 * <p>Clones an array returning a typecast result and handling {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  the array to clone, may be {@code null}
 * @return the cloned array, {@code null} if {@code null} input
 */
//
//
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
/** 
 * <p>Defensive programming technique to change a  {@code null}reference to an empty one.</p> <p>This method returns an empty array for a  {@code null} input array.</p><p>As a memory optimizing technique an empty array passed in will be overridden with the empty  {@code public static} references in this class.</p>
 * @param array  the array to check for {@code null} or empty
 * @return the same array, {@code public static} empty array if {@code null} or empty input
 * @since 2.5
 */
//
//
/** 
 * <p>Produces a new array containing the elements between the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p> <p>The component type of the subarray is always the same as that of the input array. Thus, if the input is an array of type {@code Date}, the following usage is envisaged:</p> <pre> Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5); </pre>
 * @param < T > the component type of the array
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
//
//
/** 
 * <p>Produces a new  {@code long} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code int} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code short} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code char} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code byte} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code double} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code float} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
/** 
 * <p>Produces a new  {@code boolean} array containing the elementsbetween the start and end indices.</p> <p>The start index is inclusive, the end index exclusive. Null array input produces null output.</p>
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)is promoted to 0, overvalue (&gt;array.length) results in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in thereturned subarray. Undervalue (&lt; startIndex) produces empty array, overvalue (&gt;array.length) is demoted to array length.
 * @return a new array containing the elements betweenthe start and end indices.
 * @since 2.1
 */
//
//
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}. <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
/** 
 * <p>Checks whether two arrays are the same length, treating {@code null} arrays as length {@code 0}.</p>
 * @param array1 the first array, may be {@code null}
 * @param array2 the second array, may be {@code null}
 * @return {@code true} if length of arrays matches, treating{@code null} as an empty array
 */
//
/** 
 * <p>Returns the length of the specified array. This method can deal with  {@code Object} arrays and with primitive arrays.</p><p>If the input array is  {@code null},  {@code 0} is returned.</p><pre> ArrayUtils.getLength(null)            = 0 ArrayUtils.getLength([])              = 0 ArrayUtils.getLength([null])          = 1 ArrayUtils.getLength([true, false])   = 2 ArrayUtils.getLength([1, 2, 3])       = 3 ArrayUtils.getLength(["a", "b", "c"]) = 3 </pre>
 * @param array  the array to retrieve the length from, may be null
 * @return The length of the array, or {@code 0} if the array is {@code null}
 * @throws IllegalArgumentException if the object argument is not an array.
 * @since 2.1
 */
/** 
 * <p>Checks whether two arrays are the same type taking into account multi-dimensional arrays.</p>
 * @param array1 the first array, must not be {@code null}
 * @param array2 the second array, must not be {@code null}
 * @return {@code true} if type of arrays matches
 * @throws IllegalArgumentException if either array is {@code null}
 */
//
//
/** 
 * <p>Reverses the order of the given array.</p> <p>There is no special handling for multi-dimensional arrays.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
/** 
 * <p>Reverses the order of the given array.</p> <p>This method does nothing for a  {@code null} input array.</p>
 * @param array  the array to reverse, may be {@code null}
 */
//
//
//
//
/** 
 * <p>Finds the index of the given object in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @return the index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given object within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given object in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param objectToFind  the object to find, may be {@code null}
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the object is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param objectToFind  the object to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 * @since 2.1
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 * @since 2.1
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value within a given tolerance in the array. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index. This method will return the index of the first value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within a given tolerance in the array. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index. This method will return the index of the last value which falls between the region defined by valueToFind - tolerance and valueToFind + tolerance.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
/** 
 * <p>Checks if a value falling within the given tolerance is in the given array.  If the array contains a value within the inclusive range defined by (value - tolerance) to (value + tolerance).</p> <p>The method returns  {@code false} if a {@code null} arrayis passed in.</p>
 * @param array  the array to search
 * @param valueToFind  the value to find
 * @param tolerance  the array contains the tolerance of the search
 * @return true if value falling within tolerance is in array
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
/** 
 * <p>Finds the index of the given value in the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex is treated as zero. A startIndex larger than the array length will return  {@link #INDEX_NOT_FOUND} ({@code -1}).</p>
 * @param array  the array to search through for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null}array input
 */
/** 
 * <p>Finds the last index of the given value within the array.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) if {@code null} array input.</p>
 * @param array  the array to travers backwords looking for the object, may be {@code null}
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Finds the last index of the given value in the array starting at the given index.</p> <p>This method returns  {@link #INDEX_NOT_FOUND} ({@code -1}) for a  {@code null} input array.</p><p>A negative startIndex will return  {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the array length will search from the end of the array.</p>
 * @param array  the array to traverse for looking for the object, may be {@code null}
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,{@link #INDEX_NOT_FOUND} ({@code -1}) if not found or  {@code null} array input
 */
/** 
 * <p>Checks if the value is in the given array.</p> <p>The method returns  {@code false} if a {@code null} array is passed in.</p>
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return {@code true} if the array contains the object
 */
//
//
//
//
/** 
 * <p>Converts an array of object Characters to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Character} array, may be {@code null}
 * @return a {@code char} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Character to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Character} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code char} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive chars to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array a {@code char} array
 * @return a {@code Character} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Longs to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Long} array, may be {@code null}
 * @return a {@code long} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Long to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Long} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code long} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive longs to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code long} array
 * @return a {@code Long} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Integers to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Integer} array, may be {@code null}
 * @return an {@code int} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Integer to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Integer} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return an {@code int} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive ints to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  an {@code int} array
 * @return an {@code Integer} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Shorts to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Short} array, may be {@code null}
 * @return a {@code byte} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Short to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Short} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code byte} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive shorts to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code short} array
 * @return a {@code Short} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Bytes to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Byte} array, may be {@code null}
 * @return a {@code byte} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Bytes to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Byte} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code byte} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive bytes to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code byte} array
 * @return a {@code Byte} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Doubles to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Double} array, may be {@code null}
 * @return a {@code double} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Doubles to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Double} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code double} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive doubles to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code double} array
 * @return a {@code Double} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Floats to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Float} array, may be {@code null}
 * @return a {@code float} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Floats to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Float} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code float} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive floats to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code float} array
 * @return a {@code Float} array, {@code null} if null array input
 */
//
//
/** 
 * <p>Converts an array of object Booleans to primitives.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Boolean} array, may be {@code null}
 * @return a {@code boolean} array, {@code null} if null array input
 * @throws NullPointerException if array content is {@code null}
 */
/** 
 * <p>Converts an array of object Booleans to primitives handling  {@code null}.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code Boolean} array, may be {@code null}
 * @param valueForNull  the value to insert if {@code null} found
 * @return a {@code boolean} array, {@code null} if null array input
 */
/** 
 * <p>Converts an array of primitive booleans to objects.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array  a {@code boolean} array
 * @return a {@code Boolean} array, {@code null} if null array input
 */
//
/** 
 * <p>Checks if an array of Objects is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive longs is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive ints is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive shorts is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive chars is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive bytes is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive doubles is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive floats is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
/** 
 * <p>Checks if an array of primitive booleans is empty or  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is empty or {@code null}
 * @since 2.1
 */
//
/** 
 * <p>Checks if an array of Objects is not empty or not  {@code null}.</p>
 * @param < T > the component type of the array
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive longs is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive ints is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive shorts is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive chars is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive bytes is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive doubles is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive floats is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Checks if an array of primitive booleans is not empty or not  {@code null}.</p>
 * @param array  the array to test
 * @return {@code true} if the array is not empty or not {@code null}
 * @since 2.5
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(null, null)     = null ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] ArrayUtils.addAll([null], [null]) = [null, null] ArrayUtils.addAll(["a", "b", "c"], ["1", "2", "3"]) = ["a", "b", "c", "1", "2", "3"] </pre>
 * @param < T > the component type of the array
 * @param array1  the first array whose elements are added to the new array, may be {@code null}
 * @param array2  the second array whose elements are added to the new array, may be {@code null}
 * @return The new array, {@code null} if both arrays are {@code null}. The type of the new array is the type of the first array, unless the first array is null, in which case the type is the same as the second array.
 * @since 2.1
 * @throws IllegalArgumentException if the array types are incompatible
 */
//
//
/* *///
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new float[] array.
 * @since 2.1
 */
/** 
 * <p>Adds all the elements of the given arrays into a new array.</p> <p>The new array contains all of the element of  {@code array1} followedby all of the elements  {@code array2}. When an array is returned, it is always a new array.</p> <pre> ArrayUtils.addAll(array1, null)   = cloned copy of array1 ArrayUtils.addAll(null, array2)   = cloned copy of array2 ArrayUtils.addAll([], [])         = [] </pre>
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element, unless the element itself is null, in which case the return type is Object[]</p> <pre> ArrayUtils.add(null, null)      = [null] ArrayUtils.add(null, "a")       = ["a"] ArrayUtils.add(["a"], null)     = ["a", null] ArrayUtils.add(["a"], "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], "c") = ["a", "b", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to "add" the element to, may be {@code null}
 * @param element  the object to add, may be {@code null}
 * @return A new array containing the existing elements plus the new elementThe returned array type will be that of the input array (unless null), in which case it will have the same type as the element. If both are null, an IllegalArgumentException is thrown
 * @since 2.1
 * @throws IllegalArgumentException if both arguments are null
 */
//
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, true)          = [true] ArrayUtils.add([true], false)       = [true, false] ArrayUtils.add([true, false], true) = [true, false, true] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, '0')       = ['0'] ArrayUtils.add(['1'], '0')      = ['1', '0'] ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1'] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * <p>Copies the given array and adds the given element at the end of the new array.</p> <p>The new array contains the same elements of the input array plus the given element in the last position. The component type of the new array is the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0)   = [0] ArrayUtils.add([1], 0)    = [1, 0] ArrayUtils.add([1, 0], 1) = [1, 0, 1] </pre>
 * @param array  the array to copy and add the element to, may be {@code null}
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */
/** 
 * Returns a copy of the given array of size 1 greater than the argument. The last value of the array is left to the default value.
 * @param array The array to copy, must not be {@code null}.
 * @param newArrayComponentType If {@code array} is {@code null}, create a size 1 array of this type.
 * @return A new copy of the array of size 1 greater than the input.
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, null)      = [null] ArrayUtils.add(null, 0, "a")       = ["a"] ArrayUtils.add(["a"], 1, null)     = ["a", null] ArrayUtils.add(["a"], 1, "b")      = ["a", "b"] ArrayUtils.add(["a", "b"], 3, "c") = ["a", "b", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 * @throws IllegalArgumentException if both array and element are null
 */
//
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, true)          = [true] ArrayUtils.add([true], 0, false)       = [false, true] ArrayUtils.add([false], 1, true)       = [false, true] ArrayUtils.add([true, false], 1, true) = [true, true, false] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add(null, 0, 'a')            = ['a'] ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a'] ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b'] ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b'] ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c'] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3] ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1], 0, 2)         = [2, 1] ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10] ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6] ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1L], 0, 2L)           = [2L, 1L] ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L] ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L] ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f] ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f] ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f] ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * <p>Inserts the specified element at the specified position in the array. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).</p> <p>This method returns a new array with the same elements of the input array plus the given element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, a new one element array is returned whose component type is the same as the element.</p> <pre> ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1] ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5] ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7] ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3] </pre>
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index > array.length).
 */
/** 
 * Underlying implementation of add(array, index, element) methods. The last parameter is the class, which may not equal element.getClass for primitives.
 * @param array  the array to add the element to, may be {@code null}
 * @param index  the position of the new object
 * @param element  the object to add
 * @param clss the type of the element being added
 * @return A new array containing the existing elements and the new element
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(["a"], 0)           = [] ArrayUtils.remove(["a", "b"], 0)      = ["b"] ArrayUtils.remove(["a", "b"], 1)      = ["a"] ArrayUtils.remove(["a", "b", "c"], 1) = ["a", "c"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
//
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, "a")            = null ArrayUtils.removeElement([], "a")              = [] ArrayUtils.removeElement(["a"], "b")           = ["a"] ArrayUtils.removeElement(["a", "b"], "a")      = ["b"] ArrayUtils.removeElement(["a", "b", "a"], "a") = ["b", "a"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([true], 0)              = [] ArrayUtils.remove([true, false], 0)       = [false] ArrayUtils.remove([true, false], 1)       = [true] ArrayUtils.remove([true, true, false], 1) = [true, false] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, true)                = null ArrayUtils.removeElement([], true)                  = [] ArrayUtils.removeElement([true], false)             = [true] ArrayUtils.removeElement([true, false], false)      = [true] ArrayUtils.removeElement([true, false, true], true) = [false, true] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)          = [] ArrayUtils.remove([1, 0], 0)       = [0] ArrayUtils.remove([1, 0], 1)       = [1] ArrayUtils.remove([1, 0, 1], 1)    = [1, 1] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)        = null ArrayUtils.removeElement([], 1)          = [] ArrayUtils.removeElement([1], 0)         = [1] ArrayUtils.removeElement([1, 0], 0)      = [1] ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove(['a'], 0)           = [] ArrayUtils.remove(['a', 'b'], 0)      = ['b'] ArrayUtils.remove(['a', 'b'], 1)      = ['a'] ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c'] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 'a')            = null ArrayUtils.removeElement([], 'a')              = [] ArrayUtils.removeElement(['a'], 'b')           = ['a'] ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b'] ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a'] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1.1], 0)           = [] ArrayUtils.remove([2.5, 6.0], 0)      = [6.0] ArrayUtils.remove([2.5, 6.0], 1)      = [2.5] ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1.1)            = null ArrayUtils.removeElement([], 1.1)              = [] ArrayUtils.removeElement([1.1], 1.2)           = [1.1] ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3] ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.remove([1], 0)         = [] ArrayUtils.remove([2, 6], 0)      = [6] ArrayUtils.remove([2, 6], 1)      = [2] ArrayUtils.remove([2, 6, 3], 1)   = [2, 3] </pre>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the first occurrence of the specified element from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are removed from the array.</p> <p>This method returns a new array with the same elements of the input array except the first occurrence of the specified element. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElement(null, 1)      = null ArrayUtils.removeElement([], 1)        = [] ArrayUtils.removeElement([1], 2)       = [1] ArrayUtils.removeElement([1, 3], 1)    = [3] ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the firstoccurrence of the specified element.
 * @since 2.1
 */
/** 
 * <p>Removes the element at the specified position from the specified array. All subsequent elements are shifted to the left (subtracts one from their indices).</p> <p>This method returns a new array with the same elements of the input array except the element on the specified position. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p>
 * @param array  the array to remove the element from, may not be {@code null}
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the elementat the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 2.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll(["a", "b", "c"], 0, 2) = ["b"] ArrayUtils.removeAll(["a", "b", "c"], 1, 2) = ["a"] </pre>
 * @param < T > the component type of the array
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
//
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, "a", "b")            = null ArrayUtils.removeElements([], "a", "b")              = [] ArrayUtils.removeElements(["a"], "b", "c")           = ["a"] ArrayUtils.removeElements(["a", "b"], "a", "c")      = ["b"] ArrayUtils.removeElements(["a", "b", "a"], "a")      = ["b", "a"] ArrayUtils.removeElements(["a", "b", "a"], "a", "a") = ["b"] </pre>
 * @param < T > the component type of the array
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
//
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([1], 0)             = [] ArrayUtils.removeAll([2, 6], 0)          = [6] ArrayUtils.removeAll([2, 6], 0, 1)       = [] ArrayUtils.removeAll([2, 6, 3], 1, 2)    = [2] ArrayUtils.removeAll([2, 6, 3], 0, 2)    = [6] ArrayUtils.removeAll([2, 6, 3], 0, 1, 2) = [] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, 1, 2)      = null ArrayUtils.removeElements([], 1, 2)        = [] ArrayUtils.removeElements([1], 2, 3)       = [1] ArrayUtils.removeElements([1, 3], 1, 2)    = [3] ArrayUtils.removeElements([1, 3, 1], 1)    = [3, 1] ArrayUtils.removeElements([1, 3, 1], 1, 1) = [3] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
/** 
 * <p>Removes the elements at the specified positions from the specified array. All remaining elements are shifted to the left.</p> <p>This method returns a new array with the same elements of the input array except those at the specified positions. The component type of the returned array is always the same as that of the input array.</p> <p>If the input array is  {@code null}, an IndexOutOfBoundsException will be thrown, because in that case no valid index can be specified.</p> <pre> ArrayUtils.removeAll([true, false, true], 0, 2) = [false] ArrayUtils.removeAll([true, false, true], 1, 2) = [true] </pre>
 * @param array   the array to remove the element from, may not be {@code null}
 * @param indices the positions of the elements to be removed
 * @return A new array containing the existing elements except thoseat the specified positions.
 * @throws IndexOutOfBoundsException if any index is out of range(index < 0 || index >= array.length), or if the array is  {@code null}.
 * @since 3.0.1
 */
/** 
 * <p>Removes occurrences of specified elements, in specified quantities, from the specified array. All subsequent elements are shifted left. For any element-to-be-removed specified in greater quantities than contained in the original array, no change occurs beyond the removal of the existing matching items.</p> <p>This method returns a new array with the same elements of the input array except for the earliest-encountered occurrences of the specified elements. The component type of the returned array is always the same as that of the input array.</p> <pre> ArrayUtils.removeElements(null, true, false)               = null ArrayUtils.removeElements([], true, false)                 = [] ArrayUtils.removeElements([true], false, false)            = [true] ArrayUtils.removeElements([true, false], true, true)       = [false] ArrayUtils.removeElements([true, false, true], true)       = [false, true] ArrayUtils.removeElements([true, false, true], true, true) = [false] </pre>
 * @param array  the array to remove the element from, may be {@code null}
 * @param values the elements to be removed
 * @return A new array containing the existing elements except theearliest-encountered occurrences of the specified elements.
 * @since 3.0.1
 */
//
/** 
 * Removes multiple array elements specified by index.
 * @param array source
 * @param indices to remove, WILL BE SORTED--so only clones of user-owned arrays!
 * @return new array of same type minus elements specified by unique values of {@code indices}
 * @since 3.0.1
 */
//
//
//
//
//
//
/** 
 * Removes multiple array elements specified by indices.
 * @param array source
 * @param indices to remove
 * @return new array of same type minus elements specified by the set bits in {@code indices}
 * @since 3.2
 */
//
//
//
//
//
//
//
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6b58b9e9
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@f14a7d4

#TRAVERSE
LEFTCHILD: CLASS: ArrayUtils
RIGHTCHILD: CLASS: ArrayUtils
##SNODE L: CLASS: ArrayUtils
##SNODE L: CLASS: ArrayUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@52e7a6b2
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@29a5f4e7

##TRAVERSE
LEFTCHILD: METHOD: indexOf(boolean[],boolean)
RIGHTCHILD: METHOD: indexOf(boolean[],boolean)
###SNODE L: METHOD: indexOf(boolean[],boolean)
###SNODE L: METHOD: indexOf(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(int[],int)
RIGHTCHILD: METHOD: remove(int[],int)
###SNODE L: METHOD: remove(int[],int)
###SNODE L: METHOD: remove(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(boolean[])
RIGHTCHILD: METHOD: nullToEmpty(boolean[])
###SNODE L: METHOD: nullToEmpty(boolean[])
###SNODE L: METHOD: nullToEmpty(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Integer[])
RIGHTCHILD: METHOD: nullToEmpty(Integer[])
###SNODE L: METHOD: nullToEmpty(Integer[])
###SNODE L: METHOD: nullToEmpty(Integer[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(char[])
RIGHTCHILD: METHOD: clone(char[])
###SNODE L: METHOD: clone(char[])
###SNODE L: METHOD: clone(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Boolean[])
RIGHTCHILD: METHOD: toPrimitive(Boolean[])
###SNODE L: METHOD: toPrimitive(Boolean[])
###SNODE L: METHOD: toPrimitive(Boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(int[],int)
RIGHTCHILD: METHOD: lastIndexOf(int[],int)
###SNODE L: METHOD: lastIndexOf(int[],int)
###SNODE L: METHOD: lastIndexOf(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(byte[],int)
RIGHTCHILD: METHOD: removeAll(byte[],int)
###SNODE L: METHOD: removeAll(byte[],int)
###SNODE L: METHOD: removeAll(byte[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(T[],T)
RIGHTCHILD: METHOD: addAll(T[],T)
###SNODE L: METHOD: addAll(T[],T)
###SNODE L: METHOD: addAll(T[],T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: copyArrayGrow1(Object,Class<?>)
RIGHTCHILD: METHOD: copyArrayGrow1(Object,Class<?>)
###SNODE L: METHOD: copyArrayGrow1(Object,Class<?>)
###SNODE L: METHOD: copyArrayGrow1(Object,Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(Object,int)
RIGHTCHILD: METHOD: removeAll(Object,int)
###SNODE L: METHOD: removeAll(Object,int)
###SNODE L: METHOD: removeAll(Object,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(double[])
RIGHTCHILD: METHOD: nullToEmpty(double[])
###SNODE L: METHOD: nullToEmpty(double[])
###SNODE L: METHOD: nullToEmpty(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(float[],int)
RIGHTCHILD: METHOD: remove(float[],int)
###SNODE L: METHOD: remove(float[],int)
###SNODE L: METHOD: remove(float[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(double[],double[])
RIGHTCHILD: METHOD: isSameLength(double[],double[])
###SNODE L: METHOD: isSameLength(double[],double[])
###SNODE L: METHOD: isSameLength(double[],double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(byte[])
RIGHTCHILD: METHOD: clone(byte[])
###SNODE L: METHOD: clone(byte[])
###SNODE L: METHOD: clone(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(Object[],Object,int)
RIGHTCHILD: METHOD: indexOf(Object[],Object,int)
###SNODE L: METHOD: indexOf(Object[],Object,int)
###SNODE L: METHOD: indexOf(Object[],Object,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(boolean[],int,int)
RIGHTCHILD: METHOD: subarray(boolean[],int,int)
###SNODE L: METHOD: subarray(boolean[],int,int)
###SNODE L: METHOD: subarray(boolean[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(Object[])
RIGHTCHILD: METHOD: isEmpty(Object[])
###SNODE L: METHOD: isEmpty(Object[])
###SNODE L: METHOD: isEmpty(Object[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_OBJECT_ARRAY : Object[]
RIGHTCHILD: FIELD: EMPTY_OBJECT_ARRAY : Object[]
###SNODE L: FIELD: EMPTY_OBJECT_ARRAY : Object[]
###SNODE L: FIELD: EMPTY_OBJECT_ARRAY : Object[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(short[],int,int)
RIGHTCHILD: METHOD: subarray(short[],int,int)
###SNODE L: METHOD: subarray(short[],int,int)
###SNODE L: METHOD: subarray(short[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(double[],double)
RIGHTCHILD: METHOD: lastIndexOf(double[],double)
###SNODE L: METHOD: lastIndexOf(double[],double)
###SNODE L: METHOD: lastIndexOf(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_SHORT_ARRAY : short[]
RIGHTCHILD: FIELD: EMPTY_SHORT_ARRAY : short[]
###SNODE L: FIELD: EMPTY_SHORT_ARRAY : short[]
###SNODE L: FIELD: EMPTY_SHORT_ARRAY : short[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(long[],long[])
RIGHTCHILD: METHOD: isSameLength(long[],long[])
###SNODE L: METHOD: isSameLength(long[],long[])
###SNODE L: METHOD: isSameLength(long[],long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(double[],double)
RIGHTCHILD: METHOD: contains(double[],double)
###SNODE L: METHOD: contains(double[],double)
###SNODE L: METHOD: contains(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(float[],float)
RIGHTCHILD: METHOD: contains(float[],float)
###SNODE L: METHOD: contains(float[],float)
###SNODE L: METHOD: contains(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(double[],double)
RIGHTCHILD: METHOD: add(double[],double)
###SNODE L: METHOD: add(double[],double)
###SNODE L: METHOD: add(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toArray(T)
RIGHTCHILD: METHOD: toArray(T)
###SNODE L: METHOD: toArray(T)
###SNODE L: METHOD: toArray(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode(Object)
RIGHTCHILD: METHOD: hashCode(Object)
###SNODE L: METHOD: hashCode(Object)
###SNODE L: METHOD: hashCode(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(int[],int)
RIGHTCHILD: METHOD: removeElements(int[],int)
###SNODE L: METHOD: removeElements(int[],int)
###SNODE L: METHOD: removeElements(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(byte[],byte)
RIGHTCHILD: METHOD: removeElements(byte[],byte)
###SNODE L: METHOD: removeElements(byte[],byte)
###SNODE L: METHOD: removeElements(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(long[],long)
RIGHTCHILD: METHOD: lastIndexOf(long[],long)
###SNODE L: METHOD: lastIndexOf(long[],long)
###SNODE L: METHOD: lastIndexOf(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(char[],char)
RIGHTCHILD: METHOD: lastIndexOf(char[],char)
###SNODE L: METHOD: lastIndexOf(char[],char)
###SNODE L: METHOD: lastIndexOf(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(float[],int,int)
RIGHTCHILD: METHOD: subarray(float[],int,int)
###SNODE L: METHOD: subarray(float[],int,int)
###SNODE L: METHOD: subarray(float[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(Object[],Object)
RIGHTCHILD: METHOD: contains(Object[],Object)
###SNODE L: METHOD: contains(Object[],Object)
###SNODE L: METHOD: contains(Object[],Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(int[])
RIGHTCHILD: METHOD: isNotEmpty(int[])
###SNODE L: METHOD: isNotEmpty(int[])
###SNODE L: METHOD: isNotEmpty(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_BOOLEAN_ARRAY : boolean[]
RIGHTCHILD: FIELD: EMPTY_BOOLEAN_ARRAY : boolean[]
###SNODE L: FIELD: EMPTY_BOOLEAN_ARRAY : boolean[]
###SNODE L: FIELD: EMPTY_BOOLEAN_ARRAY : boolean[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Float[])
RIGHTCHILD: METHOD: nullToEmpty(Float[])
###SNODE L: METHOD: nullToEmpty(Float[])
###SNODE L: METHOD: nullToEmpty(Float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(float[],float)
RIGHTCHILD: METHOD: indexOf(float[],float)
###SNODE L: METHOD: indexOf(float[],float)
###SNODE L: METHOD: indexOf(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Byte[],byte)
RIGHTCHILD: METHOD: toPrimitive(Byte[],byte)
###SNODE L: METHOD: toPrimitive(Byte[],byte)
###SNODE L: METHOD: toPrimitive(Byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(double[],double)
RIGHTCHILD: METHOD: indexOf(double[],double)
###SNODE L: METHOD: indexOf(double[],double)
###SNODE L: METHOD: indexOf(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(double[])
RIGHTCHILD: METHOD: toObject(double[])
###SNODE L: METHOD: toObject(double[])
###SNODE L: METHOD: toObject(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(long[],long)
RIGHTCHILD: METHOD: contains(long[],long)
###SNODE L: METHOD: contains(long[],long)
###SNODE L: METHOD: contains(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(long[],int)
RIGHTCHILD: METHOD: removeAll(long[],int)
###SNODE L: METHOD: removeAll(long[],int)
###SNODE L: METHOD: removeAll(long[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Float[],float)
RIGHTCHILD: METHOD: toPrimitive(Float[],float)
###SNODE L: METHOD: toPrimitive(Float[],float)
###SNODE L: METHOD: toPrimitive(Float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(float[])
RIGHTCHILD: METHOD: toObject(float[])
###SNODE L: METHOD: toObject(float[])
###SNODE L: METHOD: toObject(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_STRING_ARRAY : String[]
RIGHTCHILD: FIELD: EMPTY_STRING_ARRAY : String[]
###SNODE L: FIELD: EMPTY_STRING_ARRAY : String[]
###SNODE L: FIELD: EMPTY_STRING_ARRAY : String[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(boolean[],int)
RIGHTCHILD: METHOD: removeAll(boolean[],int)
###SNODE L: METHOD: removeAll(boolean[],int)
###SNODE L: METHOD: removeAll(boolean[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(boolean[])
RIGHTCHILD: METHOD: toObject(boolean[])
###SNODE L: METHOD: toObject(boolean[])
###SNODE L: METHOD: toObject(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(byte[],byte)
RIGHTCHILD: METHOD: removeElement(byte[],byte)
###SNODE L: METHOD: removeElement(byte[],byte)
###SNODE L: METHOD: removeElement(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(float[],float)
RIGHTCHILD: METHOD: addAll(float[],float)
###SNODE L: METHOD: addAll(float[],float)
###SNODE L: METHOD: addAll(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(char[],char)
RIGHTCHILD: METHOD: indexOf(char[],char)
###SNODE L: METHOD: indexOf(char[],char)
###SNODE L: METHOD: indexOf(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(byte[],byte)
RIGHTCHILD: METHOD: addAll(byte[],byte)
###SNODE L: METHOD: addAll(byte[],byte)
###SNODE L: METHOD: addAll(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: INDEX_NOT_FOUND : int
RIGHTCHILD: FIELD: INDEX_NOT_FOUND : int
###SNODE L: FIELD: INDEX_NOT_FOUND : int
###SNODE L: FIELD: INDEX_NOT_FOUND : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(Object,int,Object,Class<?>)
RIGHTCHILD: METHOD: add(Object,int,Object,Class<?>)
###SNODE L: METHOD: add(Object,int,Object,Class<?>)
###SNODE L: METHOD: add(Object,int,Object,Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(byte[],byte[])
RIGHTCHILD: METHOD: isSameLength(byte[],byte[])
###SNODE L: METHOD: isSameLength(byte[],byte[])
###SNODE L: METHOD: isSameLength(byte[],byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_FLOAT_ARRAY : float[]
RIGHTCHILD: FIELD: EMPTY_FLOAT_ARRAY : float[]
###SNODE L: FIELD: EMPTY_FLOAT_ARRAY : float[]
###SNODE L: FIELD: EMPTY_FLOAT_ARRAY : float[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Object,String)
RIGHTCHILD: METHOD: toString(Object,String)
###SNODE L: METHOD: toString(Object,String)
###SNODE L: METHOD: toString(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(float[],float)
RIGHTCHILD: METHOD: add(float[],float)
###SNODE L: METHOD: add(float[],float)
###SNODE L: METHOD: add(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(boolean[],boolean)
RIGHTCHILD: METHOD: removeElements(boolean[],boolean)
###SNODE L: METHOD: removeElements(boolean[],boolean)
###SNODE L: METHOD: removeElements(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Short[])
RIGHTCHILD: METHOD: toPrimitive(Short[])
###SNODE L: METHOD: toPrimitive(Short[])
###SNODE L: METHOD: toPrimitive(Short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Short[],short)
RIGHTCHILD: METHOD: toPrimitive(Short[],short)
###SNODE L: METHOD: toPrimitive(Short[],short)
###SNODE L: METHOD: toPrimitive(Short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Object)
RIGHTCHILD: METHOD: toString(Object)
###SNODE L: METHOD: toString(Object)
###SNODE L: METHOD: toString(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(Object[],Object,int)
RIGHTCHILD: METHOD: lastIndexOf(Object[],Object,int)
###SNODE L: METHOD: lastIndexOf(Object[],Object,int)
###SNODE L: METHOD: lastIndexOf(Object[],Object,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_INTEGER_OBJECT_ARRAY : Integer[]
RIGHTCHILD: FIELD: EMPTY_INTEGER_OBJECT_ARRAY : Integer[]
###SNODE L: FIELD: EMPTY_INTEGER_OBJECT_ARRAY : Integer[]
###SNODE L: FIELD: EMPTY_INTEGER_OBJECT_ARRAY : Integer[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(float[])
RIGHTCHILD: METHOD: reverse(float[])
###SNODE L: METHOD: reverse(float[])
###SNODE L: METHOD: reverse(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(double[],double,int)
RIGHTCHILD: METHOD: lastIndexOf(double[],double,int)
###SNODE L: METHOD: lastIndexOf(double[],double,int)
###SNODE L: METHOD: lastIndexOf(double[],double,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(float[],int)
RIGHTCHILD: METHOD: removeAll(float[],int)
###SNODE L: METHOD: removeAll(float[],int)
###SNODE L: METHOD: removeAll(float[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(float[])
RIGHTCHILD: METHOD: isEmpty(float[])
###SNODE L: METHOD: isEmpty(float[])
###SNODE L: METHOD: isEmpty(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_SHORT_OBJECT_ARRAY : Short[]
RIGHTCHILD: FIELD: EMPTY_SHORT_OBJECT_ARRAY : Short[]
###SNODE L: FIELD: EMPTY_SHORT_OBJECT_ARRAY : Short[]
###SNODE L: FIELD: EMPTY_SHORT_OBJECT_ARRAY : Short[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(long[])
RIGHTCHILD: METHOD: isEmpty(long[])
###SNODE L: METHOD: isEmpty(long[])
###SNODE L: METHOD: isEmpty(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(double[])
RIGHTCHILD: METHOD: isNotEmpty(double[])
###SNODE L: METHOD: isNotEmpty(double[])
###SNODE L: METHOD: isNotEmpty(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(byte[])
RIGHTCHILD: METHOD: nullToEmpty(byte[])
###SNODE L: METHOD: nullToEmpty(byte[])
###SNODE L: METHOD: nullToEmpty(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(short[])
RIGHTCHILD: METHOD: isEmpty(short[])
###SNODE L: METHOD: isEmpty(short[])
###SNODE L: METHOD: isEmpty(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(long[],int)
RIGHTCHILD: METHOD: remove(long[],int)
###SNODE L: METHOD: remove(long[],int)
###SNODE L: METHOD: remove(long[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(byte[],byte,int)
RIGHTCHILD: METHOD: indexOf(byte[],byte,int)
###SNODE L: METHOD: indexOf(byte[],byte,int)
###SNODE L: METHOD: indexOf(byte[],byte,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(short[])
RIGHTCHILD: METHOD: reverse(short[])
###SNODE L: METHOD: reverse(short[])
###SNODE L: METHOD: reverse(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Character[],char)
RIGHTCHILD: METHOD: toPrimitive(Character[],char)
###SNODE L: METHOD: toPrimitive(Character[],char)
###SNODE L: METHOD: toPrimitive(Character[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Double[])
RIGHTCHILD: METHOD: toPrimitive(Double[])
###SNODE L: METHOD: toPrimitive(Double[])
###SNODE L: METHOD: toPrimitive(Double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(boolean[],boolean,int)
RIGHTCHILD: METHOD: lastIndexOf(boolean[],boolean,int)
###SNODE L: METHOD: lastIndexOf(boolean[],boolean,int)
###SNODE L: METHOD: lastIndexOf(boolean[],boolean,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(boolean[])
RIGHTCHILD: METHOD: isNotEmpty(boolean[])
###SNODE L: METHOD: isNotEmpty(boolean[])
###SNODE L: METHOD: isNotEmpty(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(long[],long)
RIGHTCHILD: METHOD: add(long[],long)
###SNODE L: METHOD: add(long[],long)
###SNODE L: METHOD: add(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_BYTE_OBJECT_ARRAY : Byte[]
RIGHTCHILD: FIELD: EMPTY_BYTE_OBJECT_ARRAY : Byte[]
###SNODE L: FIELD: EMPTY_BYTE_OBJECT_ARRAY : Byte[]
###SNODE L: FIELD: EMPTY_BYTE_OBJECT_ARRAY : Byte[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(short[],short)
RIGHTCHILD: METHOD: removeElement(short[],short)
###SNODE L: METHOD: removeElement(short[],short)
###SNODE L: METHOD: removeElement(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(short[],short,int)
RIGHTCHILD: METHOD: lastIndexOf(short[],short,int)
###SNODE L: METHOD: lastIndexOf(short[],short,int)
###SNODE L: METHOD: lastIndexOf(short[],short,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(long[])
RIGHTCHILD: METHOD: clone(long[])
###SNODE L: METHOD: clone(long[])
###SNODE L: METHOD: clone(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(char[],int,int)
RIGHTCHILD: METHOD: subarray(char[],int,int)
###SNODE L: METHOD: subarray(char[],int,int)
###SNODE L: METHOD: subarray(char[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Integer[])
RIGHTCHILD: METHOD: toPrimitive(Integer[])
###SNODE L: METHOD: toPrimitive(Integer[])
###SNODE L: METHOD: toPrimitive(Integer[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(Object[])
RIGHTCHILD: METHOD: reverse(Object[])
###SNODE L: METHOD: reverse(Object[])
###SNODE L: METHOD: reverse(Object[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(double[],double,int,double)
RIGHTCHILD: METHOD: lastIndexOf(double[],double,int,double)
###SNODE L: METHOD: lastIndexOf(double[],double,int,double)
###SNODE L: METHOD: lastIndexOf(double[],double,int,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(Object,int)
RIGHTCHILD: METHOD: remove(Object,int)
###SNODE L: METHOD: remove(Object,int)
###SNODE L: METHOD: remove(Object,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(short[])
RIGHTCHILD: METHOD: isNotEmpty(short[])
###SNODE L: METHOD: isNotEmpty(short[])
###SNODE L: METHOD: isNotEmpty(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(boolean[])
RIGHTCHILD: METHOD: clone(boolean[])
###SNODE L: METHOD: clone(boolean[])
###SNODE L: METHOD: clone(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Long[])
RIGHTCHILD: METHOD: toPrimitive(Long[])
###SNODE L: METHOD: toPrimitive(Long[])
###SNODE L: METHOD: toPrimitive(Long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(char[])
RIGHTCHILD: METHOD: nullToEmpty(char[])
###SNODE L: METHOD: nullToEmpty(char[])
###SNODE L: METHOD: nullToEmpty(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(short[],int,short)
RIGHTCHILD: METHOD: add(short[],int,short)
###SNODE L: METHOD: add(short[],int,short)
###SNODE L: METHOD: add(short[],int,short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(byte[],byte,int)
RIGHTCHILD: METHOD: lastIndexOf(byte[],byte,int)
###SNODE L: METHOD: lastIndexOf(byte[],byte,int)
###SNODE L: METHOD: lastIndexOf(byte[],byte,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_BYTE_ARRAY : byte[]
RIGHTCHILD: FIELD: EMPTY_BYTE_ARRAY : byte[]
###SNODE L: FIELD: EMPTY_BYTE_ARRAY : byte[]
###SNODE L: FIELD: EMPTY_BYTE_ARRAY : byte[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(double[],int,double)
RIGHTCHILD: METHOD: add(double[],int,double)
###SNODE L: METHOD: add(double[],int,double)
###SNODE L: METHOD: add(double[],int,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(T[],Object)
RIGHTCHILD: METHOD: removeElement(T[],Object)
###SNODE L: METHOD: removeElement(T[],Object)
###SNODE L: METHOD: removeElement(T[],Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(float[])
RIGHTCHILD: METHOD: isNotEmpty(float[])
###SNODE L: METHOD: isNotEmpty(float[])
###SNODE L: METHOD: isNotEmpty(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Character[])
RIGHTCHILD: METHOD: nullToEmpty(Character[])
###SNODE L: METHOD: nullToEmpty(Character[])
###SNODE L: METHOD: nullToEmpty(Character[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(boolean[])
RIGHTCHILD: METHOD: isEmpty(boolean[])
###SNODE L: METHOD: isEmpty(boolean[])
###SNODE L: METHOD: isEmpty(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(long[],long)
RIGHTCHILD: METHOD: removeElements(long[],long)
###SNODE L: METHOD: removeElements(long[],long)
###SNODE L: METHOD: removeElements(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_LONG_OBJECT_ARRAY : Long[]
RIGHTCHILD: FIELD: EMPTY_LONG_OBJECT_ARRAY : Long[]
###SNODE L: FIELD: EMPTY_LONG_OBJECT_ARRAY : Long[]
###SNODE L: FIELD: EMPTY_LONG_OBJECT_ARRAY : Long[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(int[],int)
RIGHTCHILD: METHOD: removeElement(int[],int)
###SNODE L: METHOD: removeElement(int[],int)
###SNODE L: METHOD: removeElement(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_INT_ARRAY : int[]
RIGHTCHILD: FIELD: EMPTY_INT_ARRAY : int[]
###SNODE L: FIELD: EMPTY_INT_ARRAY : int[]
###SNODE L: FIELD: EMPTY_INT_ARRAY : int[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(byte[],byte)
RIGHTCHILD: METHOD: indexOf(byte[],byte)
###SNODE L: METHOD: indexOf(byte[],byte)
###SNODE L: METHOD: indexOf(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Float[])
RIGHTCHILD: METHOD: toPrimitive(Float[])
###SNODE L: METHOD: toPrimitive(Float[])
###SNODE L: METHOD: toPrimitive(Float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(float[],float)
RIGHTCHILD: METHOD: lastIndexOf(float[],float)
###SNODE L: METHOD: lastIndexOf(float[],float)
###SNODE L: METHOD: lastIndexOf(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(short[],short,int)
RIGHTCHILD: METHOD: indexOf(short[],short,int)
###SNODE L: METHOD: indexOf(short[],short,int)
###SNODE L: METHOD: indexOf(short[],short,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(int[],int)
RIGHTCHILD: METHOD: add(int[],int)
###SNODE L: METHOD: add(int[],int)
###SNODE L: METHOD: add(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getLength(Object)
RIGHTCHILD: METHOD: getLength(Object)
###SNODE L: METHOD: getLength(Object)
###SNODE L: METHOD: getLength(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(float[],float,int)
RIGHTCHILD: METHOD: indexOf(float[],float,int)
###SNODE L: METHOD: indexOf(float[],float,int)
###SNODE L: METHOD: indexOf(float[],float,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(int[])
RIGHTCHILD: METHOD: isEmpty(int[])
###SNODE L: METHOD: isEmpty(int[])
###SNODE L: METHOD: isEmpty(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(float[],float)
RIGHTCHILD: METHOD: removeElements(float[],float)
###SNODE L: METHOD: removeElements(float[],float)
###SNODE L: METHOD: removeElements(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(double[])
RIGHTCHILD: METHOD: isEmpty(double[])
###SNODE L: METHOD: isEmpty(double[])
###SNODE L: METHOD: isEmpty(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(boolean[],int)
RIGHTCHILD: METHOD: remove(boolean[],int)
###SNODE L: METHOD: remove(boolean[],int)
###SNODE L: METHOD: remove(boolean[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(long[],long)
RIGHTCHILD: METHOD: indexOf(long[],long)
###SNODE L: METHOD: indexOf(long[],long)
###SNODE L: METHOD: indexOf(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(float[])
RIGHTCHILD: METHOD: clone(float[])
###SNODE L: METHOD: clone(float[])
###SNODE L: METHOD: clone(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(boolean[],boolean[])
RIGHTCHILD: METHOD: isSameLength(boolean[],boolean[])
###SNODE L: METHOD: isSameLength(boolean[],boolean[])
###SNODE L: METHOD: isSameLength(boolean[],boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(boolean[],boolean)
RIGHTCHILD: METHOD: add(boolean[],boolean)
###SNODE L: METHOD: add(boolean[],boolean)
###SNODE L: METHOD: add(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(short[],short[])
RIGHTCHILD: METHOD: isSameLength(short[],short[])
###SNODE L: METHOD: isSameLength(short[],short[])
###SNODE L: METHOD: isSameLength(short[],short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(boolean[],int,boolean)
RIGHTCHILD: METHOD: add(boolean[],int,boolean)
###SNODE L: METHOD: add(boolean[],int,boolean)
###SNODE L: METHOD: add(boolean[],int,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(double[],double)
RIGHTCHILD: METHOD: removeElements(double[],double)
###SNODE L: METHOD: removeElements(double[],double)
###SNODE L: METHOD: removeElements(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(int[],int)
RIGHTCHILD: METHOD: contains(int[],int)
###SNODE L: METHOD: contains(int[],int)
###SNODE L: METHOD: contains(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(float[],float)
RIGHTCHILD: METHOD: removeElement(float[],float)
###SNODE L: METHOD: removeElement(float[],float)
###SNODE L: METHOD: removeElement(float[],float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(long[])
RIGHTCHILD: METHOD: nullToEmpty(long[])
###SNODE L: METHOD: nullToEmpty(long[])
###SNODE L: METHOD: nullToEmpty(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(double[])
RIGHTCHILD: METHOD: clone(double[])
###SNODE L: METHOD: clone(double[])
###SNODE L: METHOD: clone(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(char[],char)
RIGHTCHILD: METHOD: removeElement(char[],char)
###SNODE L: METHOD: removeElement(char[],char)
###SNODE L: METHOD: removeElement(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(int[])
RIGHTCHILD: METHOD: toObject(int[])
###SNODE L: METHOD: toObject(int[])
###SNODE L: METHOD: toObject(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_CLASS_ARRAY : Class<?>[]
RIGHTCHILD: FIELD: EMPTY_CLASS_ARRAY : Class<?>[]
###SNODE L: FIELD: EMPTY_CLASS_ARRAY : Class<?>[]
###SNODE L: FIELD: EMPTY_CLASS_ARRAY : Class<?>[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(short[],short)
RIGHTCHILD: METHOD: removeElements(short[],short)
###SNODE L: METHOD: removeElements(short[],short)
###SNODE L: METHOD: removeElements(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: ArrayUtils()
RIGHTCHILD: CONSTRUCTOR: ArrayUtils()
###SNODE L: CONSTRUCTOR: ArrayUtils()
###SNODE L: CONSTRUCTOR: ArrayUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(T[],int)
RIGHTCHILD: METHOD: remove(T[],int)
###SNODE L: METHOD: remove(T[],int)
###SNODE L: METHOD: remove(T[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Object[])
RIGHTCHILD: METHOD: nullToEmpty(Object[])
###SNODE L: METHOD: nullToEmpty(Object[])
###SNODE L: METHOD: nullToEmpty(Object[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(byte[],int,int)
RIGHTCHILD: METHOD: subarray(byte[],int,int)
###SNODE L: METHOD: subarray(byte[],int,int)
###SNODE L: METHOD: subarray(byte[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_FLOAT_OBJECT_ARRAY : Float[]
RIGHTCHILD: FIELD: EMPTY_FLOAT_OBJECT_ARRAY : Float[]
###SNODE L: FIELD: EMPTY_FLOAT_OBJECT_ARRAY : Float[]
###SNODE L: FIELD: EMPTY_FLOAT_OBJECT_ARRAY : Float[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(int[],int,int)
RIGHTCHILD: METHOD: add(int[],int,int)
###SNODE L: METHOD: add(int[],int,int)
###SNODE L: METHOD: add(int[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(double[],double,int)
RIGHTCHILD: METHOD: indexOf(double[],double,int)
###SNODE L: METHOD: indexOf(double[],double,int)
###SNODE L: METHOD: indexOf(double[],double,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(Object[],Object[])
RIGHTCHILD: METHOD: isSameLength(Object[],Object[])
###SNODE L: METHOD: isSameLength(Object[],Object[])
###SNODE L: METHOD: isSameLength(Object[],Object[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_DOUBLE_OBJECT_ARRAY : Double[]
RIGHTCHILD: FIELD: EMPTY_DOUBLE_OBJECT_ARRAY : Double[]
###SNODE L: FIELD: EMPTY_DOUBLE_OBJECT_ARRAY : Double[]
###SNODE L: FIELD: EMPTY_DOUBLE_OBJECT_ARRAY : Double[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(double[],double,double)
RIGHTCHILD: METHOD: contains(double[],double,double)
###SNODE L: METHOD: contains(double[],double,double)
###SNODE L: METHOD: contains(double[],double,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(int[])
RIGHTCHILD: METHOD: reverse(int[])
###SNODE L: METHOD: reverse(int[])
###SNODE L: METHOD: reverse(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(boolean[],boolean,int)
RIGHTCHILD: METHOD: indexOf(boolean[],boolean,int)
###SNODE L: METHOD: indexOf(boolean[],boolean,int)
###SNODE L: METHOD: indexOf(boolean[],boolean,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(byte[])
RIGHTCHILD: METHOD: isEmpty(byte[])
###SNODE L: METHOD: isEmpty(byte[])
###SNODE L: METHOD: isEmpty(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_DOUBLE_ARRAY : double[]
RIGHTCHILD: FIELD: EMPTY_DOUBLE_ARRAY : double[]
###SNODE L: FIELD: EMPTY_DOUBLE_ARRAY : double[]
###SNODE L: FIELD: EMPTY_DOUBLE_ARRAY : double[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(boolean[],boolean)
RIGHTCHILD: METHOD: removeElement(boolean[],boolean)
###SNODE L: METHOD: removeElement(boolean[],boolean)
###SNODE L: METHOD: removeElement(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(long[])
RIGHTCHILD: METHOD: reverse(long[])
###SNODE L: METHOD: reverse(long[])
###SNODE L: METHOD: reverse(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(double[],int,int)
RIGHTCHILD: METHOD: subarray(double[],int,int)
###SNODE L: METHOD: subarray(double[],int,int)
###SNODE L: METHOD: subarray(double[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(T[],T)
RIGHTCHILD: METHOD: add(T[],T)
###SNODE L: METHOD: add(T[],T)
###SNODE L: METHOD: add(T[],T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(float[],float,int)
RIGHTCHILD: METHOD: lastIndexOf(float[],float,int)
###SNODE L: METHOD: lastIndexOf(float[],float,int)
###SNODE L: METHOD: lastIndexOf(float[],float,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toMap(Object[])
RIGHTCHILD: METHOD: toMap(Object[])
###SNODE L: METHOD: toMap(Object[])
###SNODE L: METHOD: toMap(Object[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(int[],int)
RIGHTCHILD: METHOD: indexOf(int[],int)
###SNODE L: METHOD: indexOf(int[],int)
###SNODE L: METHOD: indexOf(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(char[],char)
RIGHTCHILD: METHOD: addAll(char[],char)
###SNODE L: METHOD: addAll(char[],char)
###SNODE L: METHOD: addAll(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_BOOLEAN_OBJECT_ARRAY : Boolean[]
RIGHTCHILD: FIELD: EMPTY_BOOLEAN_OBJECT_ARRAY : Boolean[]
###SNODE L: FIELD: EMPTY_BOOLEAN_OBJECT_ARRAY : Boolean[]
###SNODE L: FIELD: EMPTY_BOOLEAN_OBJECT_ARRAY : Boolean[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(T[])
RIGHTCHILD: METHOD: isNotEmpty(T[])
###SNODE L: METHOD: isNotEmpty(T[])
###SNODE L: METHOD: isNotEmpty(T[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(byte[],byte)
RIGHTCHILD: METHOD: contains(byte[],byte)
###SNODE L: METHOD: contains(byte[],byte)
###SNODE L: METHOD: contains(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(Object,BitSet)
RIGHTCHILD: METHOD: removeAll(Object,BitSet)
###SNODE L: METHOD: removeAll(Object,BitSet)
###SNODE L: METHOD: removeAll(Object,BitSet)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Boolean[],boolean)
RIGHTCHILD: METHOD: toPrimitive(Boolean[],boolean)
###SNODE L: METHOD: toPrimitive(Boolean[],boolean)
###SNODE L: METHOD: toPrimitive(Boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(long[],long)
RIGHTCHILD: METHOD: addAll(long[],long)
###SNODE L: METHOD: addAll(long[],long)
###SNODE L: METHOD: addAll(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(float[],int,float)
RIGHTCHILD: METHOD: add(float[],int,float)
###SNODE L: METHOD: add(float[],int,float)
###SNODE L: METHOD: add(float[],int,float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(short[],short)
RIGHTCHILD: METHOD: lastIndexOf(short[],short)
###SNODE L: METHOD: lastIndexOf(short[],short)
###SNODE L: METHOD: lastIndexOf(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(double[],int)
RIGHTCHILD: METHOD: remove(double[],int)
###SNODE L: METHOD: remove(double[],int)
###SNODE L: METHOD: remove(double[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(T[],int,int)
RIGHTCHILD: METHOD: subarray(T[],int,int)
###SNODE L: METHOD: subarray(T[],int,int)
###SNODE L: METHOD: subarray(T[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(short[],short)
RIGHTCHILD: METHOD: addAll(short[],short)
###SNODE L: METHOD: addAll(short[],short)
###SNODE L: METHOD: addAll(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(double[],double,double)
RIGHTCHILD: METHOD: lastIndexOf(double[],double,double)
###SNODE L: METHOD: lastIndexOf(double[],double,double)
###SNODE L: METHOD: lastIndexOf(double[],double,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(char[],int)
RIGHTCHILD: METHOD: remove(char[],int)
###SNODE L: METHOD: remove(char[],int)
###SNODE L: METHOD: remove(char[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(char[])
RIGHTCHILD: METHOD: isEmpty(char[])
###SNODE L: METHOD: isEmpty(char[])
###SNODE L: METHOD: isEmpty(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(short[],short)
RIGHTCHILD: METHOD: add(short[],short)
###SNODE L: METHOD: add(short[],short)
###SNODE L: METHOD: add(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(short[])
RIGHTCHILD: METHOD: clone(short[])
###SNODE L: METHOD: clone(short[])
###SNODE L: METHOD: clone(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(char[])
RIGHTCHILD: METHOD: toObject(char[])
###SNODE L: METHOD: toObject(char[])
###SNODE L: METHOD: toObject(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(int[],int[])
RIGHTCHILD: METHOD: isSameLength(int[],int[])
###SNODE L: METHOD: isSameLength(int[],int[])
###SNODE L: METHOD: isSameLength(int[],int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(byte[],byte)
RIGHTCHILD: METHOD: add(byte[],byte)
###SNODE L: METHOD: add(byte[],byte)
###SNODE L: METHOD: add(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Byte[])
RIGHTCHILD: METHOD: toPrimitive(Byte[])
###SNODE L: METHOD: toPrimitive(Byte[])
###SNODE L: METHOD: toPrimitive(Byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(short[],int)
RIGHTCHILD: METHOD: removeAll(short[],int)
###SNODE L: METHOD: removeAll(short[],int)
###SNODE L: METHOD: removeAll(short[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Character[])
RIGHTCHILD: METHOD: toPrimitive(Character[])
###SNODE L: METHOD: toPrimitive(Character[])
###SNODE L: METHOD: toPrimitive(Character[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(String[])
RIGHTCHILD: METHOD: nullToEmpty(String[])
###SNODE L: METHOD: nullToEmpty(String[])
###SNODE L: METHOD: nullToEmpty(String[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(short[],short)
RIGHTCHILD: METHOD: indexOf(short[],short)
###SNODE L: METHOD: indexOf(short[],short)
###SNODE L: METHOD: indexOf(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(double[],int)
RIGHTCHILD: METHOD: removeAll(double[],int)
###SNODE L: METHOD: removeAll(double[],int)
###SNODE L: METHOD: removeAll(double[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(int[],int,int)
RIGHTCHILD: METHOD: indexOf(int[],int,int)
###SNODE L: METHOD: indexOf(int[],int,int)
###SNODE L: METHOD: indexOf(int[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(long[],long,int)
RIGHTCHILD: METHOD: lastIndexOf(long[],long,int)
###SNODE L: METHOD: lastIndexOf(long[],long,int)
###SNODE L: METHOD: lastIndexOf(long[],long,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(int[],int,int)
RIGHTCHILD: METHOD: lastIndexOf(int[],int,int)
###SNODE L: METHOD: lastIndexOf(int[],int,int)
###SNODE L: METHOD: lastIndexOf(int[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(short[],int)
RIGHTCHILD: METHOD: remove(short[],int)
###SNODE L: METHOD: remove(short[],int)
###SNODE L: METHOD: remove(short[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(char[],char,int)
RIGHTCHILD: METHOD: lastIndexOf(char[],char,int)
###SNODE L: METHOD: lastIndexOf(char[],char,int)
###SNODE L: METHOD: lastIndexOf(char[],char,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(char[],char,int)
RIGHTCHILD: METHOD: indexOf(char[],char,int)
###SNODE L: METHOD: indexOf(char[],char,int)
###SNODE L: METHOD: indexOf(char[],char,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(long[],long,int)
RIGHTCHILD: METHOD: indexOf(long[],long,int)
###SNODE L: METHOD: indexOf(long[],long,int)
###SNODE L: METHOD: indexOf(long[],long,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(boolean[],boolean)
RIGHTCHILD: METHOD: lastIndexOf(boolean[],boolean)
###SNODE L: METHOD: lastIndexOf(boolean[],boolean)
###SNODE L: METHOD: lastIndexOf(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(char[],char)
RIGHTCHILD: METHOD: removeElements(char[],char)
###SNODE L: METHOD: removeElements(char[],char)
###SNODE L: METHOD: removeElements(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(long[])
RIGHTCHILD: METHOD: toObject(long[])
###SNODE L: METHOD: toObject(long[])
###SNODE L: METHOD: toObject(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(char[])
RIGHTCHILD: METHOD: reverse(char[])
###SNODE L: METHOD: reverse(char[])
###SNODE L: METHOD: reverse(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(long[],long)
RIGHTCHILD: METHOD: removeElement(long[],long)
###SNODE L: METHOD: removeElement(long[],long)
###SNODE L: METHOD: removeElement(long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_CHAR_ARRAY : char[]
RIGHTCHILD: FIELD: EMPTY_CHAR_ARRAY : char[]
###SNODE L: FIELD: EMPTY_CHAR_ARRAY : char[]
###SNODE L: FIELD: EMPTY_CHAR_ARRAY : char[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(float[],float[])
RIGHTCHILD: METHOD: isSameLength(float[],float[])
###SNODE L: METHOD: isSameLength(float[],float[])
###SNODE L: METHOD: isSameLength(float[],float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(double[],double,int,double)
RIGHTCHILD: METHOD: indexOf(double[],double,int,double)
###SNODE L: METHOD: indexOf(double[],double,int,double)
###SNODE L: METHOD: indexOf(double[],double,int,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(boolean[],boolean)
RIGHTCHILD: METHOD: contains(boolean[],boolean)
###SNODE L: METHOD: contains(boolean[],boolean)
###SNODE L: METHOD: contains(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(short[],short)
RIGHTCHILD: METHOD: contains(short[],short)
###SNODE L: METHOD: contains(short[],short)
###SNODE L: METHOD: contains(short[],short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(int[])
RIGHTCHILD: METHOD: nullToEmpty(int[])
###SNODE L: METHOD: nullToEmpty(int[])
###SNODE L: METHOD: nullToEmpty(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(byte[])
RIGHTCHILD: METHOD: reverse(byte[])
###SNODE L: METHOD: reverse(byte[])
###SNODE L: METHOD: reverse(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Integer[],int)
RIGHTCHILD: METHOD: toPrimitive(Integer[],int)
###SNODE L: METHOD: toPrimitive(Integer[],int)
###SNODE L: METHOD: toPrimitive(Integer[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(T[],int)
RIGHTCHILD: METHOD: removeAll(T[],int)
###SNODE L: METHOD: removeAll(T[],int)
###SNODE L: METHOD: removeAll(T[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(boolean[])
RIGHTCHILD: METHOD: reverse(boolean[])
###SNODE L: METHOD: reverse(boolean[])
###SNODE L: METHOD: reverse(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElement(double[],double)
RIGHTCHILD: METHOD: removeElement(double[],double)
###SNODE L: METHOD: removeElement(double[],double)
###SNODE L: METHOD: removeElement(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(byte[])
RIGHTCHILD: METHOD: isNotEmpty(byte[])
###SNODE L: METHOD: isNotEmpty(byte[])
###SNODE L: METHOD: isNotEmpty(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameLength(char[],char[])
RIGHTCHILD: METHOD: isSameLength(char[],char[])
###SNODE L: METHOD: isSameLength(char[],char[])
###SNODE L: METHOD: isSameLength(char[],char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(char[],char)
RIGHTCHILD: METHOD: add(char[],char)
###SNODE L: METHOD: add(char[],char)
###SNODE L: METHOD: add(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(double[])
RIGHTCHILD: METHOD: reverse(double[])
###SNODE L: METHOD: reverse(double[])
###SNODE L: METHOD: reverse(double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(char[],int)
RIGHTCHILD: METHOD: removeAll(char[],int)
###SNODE L: METHOD: removeAll(char[],int)
###SNODE L: METHOD: removeAll(char[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(float[])
RIGHTCHILD: METHOD: nullToEmpty(float[])
###SNODE L: METHOD: nullToEmpty(float[])
###SNODE L: METHOD: nullToEmpty(float[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(char[])
RIGHTCHILD: METHOD: isNotEmpty(char[])
###SNODE L: METHOD: isNotEmpty(char[])
###SNODE L: METHOD: isNotEmpty(char[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(byte[],int)
RIGHTCHILD: METHOD: remove(byte[],int)
###SNODE L: METHOD: remove(byte[],int)
###SNODE L: METHOD: remove(byte[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Long[],long)
RIGHTCHILD: METHOD: toPrimitive(Long[],long)
###SNODE L: METHOD: toPrimitive(Long[],long)
###SNODE L: METHOD: toPrimitive(Long[],long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeAll(int[],int)
RIGHTCHILD: METHOD: removeAll(int[],int)
###SNODE L: METHOD: removeAll(int[],int)
###SNODE L: METHOD: removeAll(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Long[])
RIGHTCHILD: METHOD: nullToEmpty(Long[])
###SNODE L: METHOD: nullToEmpty(Long[])
###SNODE L: METHOD: nullToEmpty(Long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeElements(T[],T)
RIGHTCHILD: METHOD: removeElements(T[],T)
###SNODE L: METHOD: removeElements(T[],T)
###SNODE L: METHOD: removeElements(T[],T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(byte[])
RIGHTCHILD: METHOD: toObject(byte[])
###SNODE L: METHOD: toObject(byte[])
###SNODE L: METHOD: toObject(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(char[],int,char)
RIGHTCHILD: METHOD: add(char[],int,char)
###SNODE L: METHOD: add(char[],int,char)
###SNODE L: METHOD: add(char[],int,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Boolean[])
RIGHTCHILD: METHOD: nullToEmpty(Boolean[])
###SNODE L: METHOD: nullToEmpty(Boolean[])
###SNODE L: METHOD: nullToEmpty(Boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(int[],int)
RIGHTCHILD: METHOD: addAll(int[],int)
###SNODE L: METHOD: addAll(int[],int)
###SNODE L: METHOD: addAll(int[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(boolean[],boolean)
RIGHTCHILD: METHOD: addAll(boolean[],boolean)
###SNODE L: METHOD: addAll(boolean[],boolean)
###SNODE L: METHOD: addAll(boolean[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAll(double[],double)
RIGHTCHILD: METHOD: addAll(double[],double)
###SNODE L: METHOD: addAll(double[],double)
###SNODE L: METHOD: addAll(double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSameType(Object,Object)
RIGHTCHILD: METHOD: isSameType(Object,Object)
###SNODE L: METHOD: isSameType(Object,Object)
###SNODE L: METHOD: isSameType(Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(char[],char)
RIGHTCHILD: METHOD: contains(char[],char)
###SNODE L: METHOD: contains(char[],char)
###SNODE L: METHOD: contains(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(int[],int,int)
RIGHTCHILD: METHOD: subarray(int[],int,int)
###SNODE L: METHOD: subarray(int[],int,int)
###SNODE L: METHOD: subarray(int[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(byte[],byte)
RIGHTCHILD: METHOD: lastIndexOf(byte[],byte)
###SNODE L: METHOD: lastIndexOf(byte[],byte)
###SNODE L: METHOD: lastIndexOf(byte[],byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(long[],int,long)
RIGHTCHILD: METHOD: add(long[],int,long)
###SNODE L: METHOD: add(long[],int,long)
###SNODE L: METHOD: add(long[],int,long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(byte[],int,byte)
RIGHTCHILD: METHOD: add(byte[],int,byte)
###SNODE L: METHOD: add(byte[],int,byte)
###SNODE L: METHOD: add(byte[],int,byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEquals(Object,Object)
RIGHTCHILD: METHOD: isEquals(Object,Object)
###SNODE L: METHOD: isEquals(Object,Object)
###SNODE L: METHOD: isEquals(Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Double[])
RIGHTCHILD: METHOD: nullToEmpty(Double[])
###SNODE L: METHOD: nullToEmpty(Double[])
###SNODE L: METHOD: nullToEmpty(Double[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_CHARACTER_OBJECT_ARRAY : Character[]
RIGHTCHILD: FIELD: EMPTY_CHARACTER_OBJECT_ARRAY : Character[]
###SNODE L: FIELD: EMPTY_CHARACTER_OBJECT_ARRAY : Character[]
###SNODE L: FIELD: EMPTY_CHARACTER_OBJECT_ARRAY : Character[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: subarray(long[],int,int)
RIGHTCHILD: METHOD: subarray(long[],int,int)
###SNODE L: METHOD: subarray(long[],int,int)
###SNODE L: METHOD: subarray(long[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(long[])
RIGHTCHILD: METHOD: isNotEmpty(long[])
###SNODE L: METHOD: isNotEmpty(long[])
###SNODE L: METHOD: isNotEmpty(long[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toPrimitive(Double[],double)
RIGHTCHILD: METHOD: toPrimitive(Double[],double)
###SNODE L: METHOD: toPrimitive(Double[],double)
###SNODE L: METHOD: toPrimitive(Double[],double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY_LONG_ARRAY : long[]
RIGHTCHILD: FIELD: EMPTY_LONG_ARRAY : long[]
###SNODE L: FIELD: EMPTY_LONG_ARRAY : long[]
###SNODE L: FIELD: EMPTY_LONG_ARRAY : long[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(Object[],Object)
RIGHTCHILD: METHOD: indexOf(Object[],Object)
###SNODE L: METHOD: indexOf(Object[],Object)
###SNODE L: METHOD: indexOf(Object[],Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(double[],double,double)
RIGHTCHILD: METHOD: indexOf(double[],double,double)
###SNODE L: METHOD: indexOf(double[],double,double)
###SNODE L: METHOD: indexOf(double[],double,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(int[])
RIGHTCHILD: METHOD: clone(int[])
###SNODE L: METHOD: clone(int[])
###SNODE L: METHOD: clone(int[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(Object[],Object)
RIGHTCHILD: METHOD: lastIndexOf(Object[],Object)
###SNODE L: METHOD: lastIndexOf(Object[],Object)
###SNODE L: METHOD: lastIndexOf(Object[],Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toObject(short[])
RIGHTCHILD: METHOD: toObject(short[])
###SNODE L: METHOD: toObject(short[])
###SNODE L: METHOD: toObject(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Byte[])
RIGHTCHILD: METHOD: nullToEmpty(Byte[])
###SNODE L: METHOD: nullToEmpty(Byte[])
###SNODE L: METHOD: nullToEmpty(Byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(short[])
RIGHTCHILD: METHOD: nullToEmpty(short[])
###SNODE L: METHOD: nullToEmpty(short[])
###SNODE L: METHOD: nullToEmpty(short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: add(T[],int,T)
RIGHTCHILD: METHOD: add(T[],int,T)
###SNODE L: METHOD: add(T[],int,T)
###SNODE L: METHOD: add(T[],int,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(T[])
RIGHTCHILD: METHOD: clone(T[])
###SNODE L: METHOD: clone(T[])
###SNODE L: METHOD: clone(T[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: nullToEmpty(Short[])
RIGHTCHILD: METHOD: nullToEmpty(Short[])
###SNODE L: METHOD: nullToEmpty(Short[])
###SNODE L: METHOD: nullToEmpty(Short[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)187
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)15
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)188
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)189
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)191
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)192
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)17
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)16
-(0)-(0)-(1)18
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)193
-(0)-(0)-(1)194
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)195
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)96
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)196
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)96
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)59
-(2)-(8)-(2)-(0)-(0)24
-(2)-(8)-(2)-(0)-(0)-(1)57
-(2)-(8)-(2)-(0)-(1)58
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)198
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)57
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)199
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)26
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)200
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)26
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)171
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)201
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)171
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)202
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)129
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)168
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)203
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)168
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)167
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)204
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)167
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)166
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)205
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)166
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)165
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)206
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)165
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)163
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)207
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)163
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)175
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)208
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)175
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)174
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)209
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)174
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)173
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)210
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)173
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)172
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)211
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)172
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)212
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)102
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)176
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)213
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)176
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)214
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)170
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)169
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)215
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)169
-(2)-(8)-(3)-(2)-(1)86
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)216
-(2)-(8)-(3)-(2)218
-(2)-(8)-(3)-(2)-(0)217
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)195
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)221
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)222
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)222
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(1)17
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(4)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(4)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(4)-(0)18
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(4)-(1)223
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(1)192
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(2)224
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)225
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(1)191
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(2)225
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)228
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)190
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)96
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)190
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)229
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)-(2)-(4)74
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)231
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)-(0)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)-(0)-(1)230
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)232
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)98
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)59
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)-(1)58
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(1)232
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)229
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)236
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)237
-(2)-(8)-(12)-(0)-(3)-(0)-(2)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)98
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)232
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(2)-(0)-(0)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(2)-(2)-(1)232
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(0)240
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)241
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)232
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)242
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)229
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)-(0)234
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)136
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)-(0)240
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)-(2)241
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)-(2)232
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(4)-(2)244
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)229
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)247
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)248
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)248
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)196
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)199
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)200
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)202
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)204
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)214
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)206
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)208
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)210
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)212
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)171
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)171
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)201
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)168
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)203
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)166
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)166
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)205
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)169
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)169
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)215
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)163
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)163
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)207
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)174
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)174
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)209
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)172
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)172
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)211
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)251
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)213
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)-(2)146
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)72
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)258
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(2)259
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(3)107
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)258
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)107
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)200
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)202
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)204
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)167
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)214
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)206
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)165
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)208
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)175
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)210
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)173
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)254
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)254
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)255
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)254
-(2)-(8)-(12)-(0)-(2)-(2)-(1)253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)255
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)212
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)252
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)255
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)253
-(2)-(8)-(12)-(0)-(0)-(3)252
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)255
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)252
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)262
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)263
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)187
-(2)-(8)-(12)-(0)-(0)-(2)263
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)264
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)227
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(0)-(2)82
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)272
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)272
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)272
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)146
-(2)-(8)-(12)-(0)-(2)-(0)-(2)274
-(2)-(8)-(12)-(0)-(2)-(0)-(3)272
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)183
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(0)272
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)272
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)272
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)272
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(2)269
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)146
-(2)-(8)-(12)-(0)-(2)-(0)-(2)274
-(2)-(8)-(12)-(0)-(2)-(0)-(3)272
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)183
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)277
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(0)272
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)272
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)280
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)280
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)280
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)282
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)279
-(2)-(8)-(12)-(0)-(2)-(2)-(1)280
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(0)279
-(2)-(8)-(12)-(0)-(2)-(2)-(1)280
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)282
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)283
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)280
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)-(12)-(0)-(0)-(3)280
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)280
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)282
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)279
-(2)-(8)-(12)-(0)-(2)-(2)-(1)280
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(0)279
-(2)-(8)-(12)-(0)-(2)-(2)-(1)280
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)282
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)283
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)280
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(0)-(3)280
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)279
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)273
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)279
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)279
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(0)-(3)279
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)169
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)214
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)285
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)169
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)214
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)285
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)169
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)215
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)169
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)169
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)171
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)200
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)290
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)171
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)200
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)171
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)290
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)171
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)201
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)171
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)171
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)168
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)202
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)291
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)168
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)202
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)168
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)291
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)203
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)168
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)168
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)166
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)204
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)167
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)292
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)166
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)204
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)167
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)166
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)292
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)166
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)205
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)166
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)166
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)166
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)163
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)206
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)165
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)293
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)163
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)206
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)165
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)163
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)293
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)163
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)207
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)163
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)163
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)163
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)174
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)208
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)175
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)294
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)174
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)208
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)175
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)174
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)294
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)174
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)209
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)174
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)174
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)174
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)172
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)210
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)173
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)295
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)172
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)210
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)173
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)172
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)295
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)172
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)211
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)172
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)172
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)172
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)212
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)296
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)284
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)286
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)212
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)176
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)286
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)287
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(2)296
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)288
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)213
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)176
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)176
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)-(1)297
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)2
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)-(1)298
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)301
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)-(2)146
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)301
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)303
-(2)-(8)-(12)-(0)-(2)-(0)-(3)304
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)108
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(2)146
-(2)-(8)-(12)-(0)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)112
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(0)301
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(2)69
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(3)108
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(0)305
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(1)-(0)108
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(1)-(2)82
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)306
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)-(0)301
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)-(2)-(2)82
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(4)304
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)304
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)165
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)167
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)173
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)300
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)226
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)227
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)226
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)227
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)175
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)226
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)227
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)226
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)227
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)226
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)227
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)302
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)154
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)308
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)308
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)136
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(4)309
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)107
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)176
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)165
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)163
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)169
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)175
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)175
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)174
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)173
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)173
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)172
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)168
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)171
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)167
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)311
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(0)166
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)-(1)164
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)308
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)311
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)312
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)313
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(2)146
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)313
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)310
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)313
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)310
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)187
-(2)-(8)-(12)-(0)-(0)-(2)259
-(2)-(8)-(12)-(0)-(0)-(3)312
-(2)-(8)-(12)-(0)-(0)-(3)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)315
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)315
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)146
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)308
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)315
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)308
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)136
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(4)316
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)310
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)307
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)314
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)308
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)315
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)310
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)170
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)163
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)163
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)166
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)166
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)129
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)26
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)171
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)171
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)173
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)172
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)172
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)175
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)307
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)174
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)174
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)164
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)307
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)315
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)318
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)319
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)302
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)315
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)302
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)302
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)318
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)321
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(3)315
-(2)-(8)-(12)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)187
-(2)-(8)-(12)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)314
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)170
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)175
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)173
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)129
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)26
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)322
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)322
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)318
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)321
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)146
-(2)-(8)-(12)-(0)-(2)-(2)-(3)256
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)217
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)324
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(3)333
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)163
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)163
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)165
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)163
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)163
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)163
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)163
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)293
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)166
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)166
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)167
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)166
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)166
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)166
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)166
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)292
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)129
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)168
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)168
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)168
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)129
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)170
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)169
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)169
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)170
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)169
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)169
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)169
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)169
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)285
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)170
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)26
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)171
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)171
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)26
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)171
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)171
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)171
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)290
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)26
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)173
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)172
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)172
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)173
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)172
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)172
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)172
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)172
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)295
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)173
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)175
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)174
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)174
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)327
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)175
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)174
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)174
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)174
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)174
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)294
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)175
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)74
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)96
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)325
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)326
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)327
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)176
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)176
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(2)-(4)238
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)102
-(2)-(8)-(12)-(0)-(0)-(3)329
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)176
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)337
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)176
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)289
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)329
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)337
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)188
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)333
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)188
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)176
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)176
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)236
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)336
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)336
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(0)329
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)-(2)296
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)333
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(3)-(0)73
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)324
-(2)-(8)-(12)-(0)-(0)-(1)-(3)220
-(2)-(8)-(12)-(0)-(0)-(1)-(3)333
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)338
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)299
-(2)-(8)-(12)-(0)-(0)-(3)325
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)339
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)325
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)325
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)340
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)341
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)325
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)318
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)321
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)340
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)338
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)340
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)314
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)146
-(2)-(8)-(12)-(0)-(2)-(2)-(3)256
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)338
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)338
-(2)-(8)-(12)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)343
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)338
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)-(0)-(0)325
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(2)269
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)325
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)-(0)344
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(2)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)345
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)343
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(1)344
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)314
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)343
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)344
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)314
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)342
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)324
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)96
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)188
-(2)-(8)-(7)-(3)325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)346
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)347
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)325
-(2)-(8)-(12)-(0)-(2)-(2)-(2)348
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(2)-(2)-(2)259
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)146
-(2)-(8)-(12)-(0)-(2)-(2)-(3)256
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)346
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)347
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)349
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)350
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)320
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)325
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(2)351
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(3)349
-(2)-(8)-(12)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)320
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)349
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)349
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)350
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)350
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)349
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)325
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)352
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)346
-(2)-(8)-(12)-(0)-(0)-(1)-(1)349
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)349
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)350
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132

LEFT COMMENTS
/* *//** 
 * <p>Operations on bit-mapped fields.</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * <p>Creates a BitField instance.</p>
 * @param mask the mask specifying which bits apply to thisBitField. Bits that are set in this mask are the bits that this BitField operates on
 */
/** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setValue(int,int)
 * @param holder the int data containing the bits we're interestedin
 * @return the selected bits, shifted right appropriately
 */
/** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right, as a short.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setShortValue(short,short)
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits, shifted right appropriately
 */
/** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the selected bits
 */
/** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits
 */
/** 
 * <p>Returns whether the field is set or not.</p> <p>This is most commonly used for a single-bit field, which is often used to represent a boolean value; the results of using it for a multi-bit field is to determine whether *any* of its bits are set.</p>
 * @param holder the int data containing the bits we're interestedin
 * @return {@code true} if any of the bits are set,else  {@code false}
 */
/** 
 * <p>Returns whether all of the bits are set or not.</p> <p>This is a stricter test than  {@link #isSet(int)}, in that all of the bits in a multi-bit set must be set for this method to return  {@code true}.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return {@code true} if all of the bits are set,else  {@code false}
 */
/** 
 * <p>Replaces the bits with new values.</p>
 * @see #getValue(int)
 * @param holder the int data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */
/** 
 * <p>Replaces the bits with new values.</p>
 * @see #getShortValue(short)
 * @param holder the short data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on bit-mapped fields.</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * <p>Creates a BitField instance.</p>
 * @param mask the mask specifying which bits apply to thisBitField. Bits that are set in this mask are the bits that this BitField operates on
 */
/** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setValue(int,int)
 * @param holder the int data containing the bits we're interestedin
 * @return the selected bits, shifted right appropriately
 */
/** 
 * <p>Obtains the value for the specified BitField, appropriately shifted right, as a short.</p> <p>Many users of a BitField will want to treat the specified bits as an int value, and will not want to be aware that the value is stored as a BitField (and so shifted left so many bits).</p>
 * @see #setShortValue(short,short)
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits, shifted right appropriately
 */
/** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the selected bits
 */
/** 
 * <p>Obtains the value for the specified BitField, unshifted.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the selected bits
 */
/** 
 * <p>Returns whether the field is set or not.</p> <p>This is most commonly used for a single-bit field, which is often used to represent a boolean value; the results of using it for a multi-bit field is to determine whether *any* of its bits are set.</p>
 * @param holder the int data containing the bits we're interestedin
 * @return {@code true} if any of the bits are set,else  {@code false}
 */
/** 
 * <p>Returns whether all of the bits are set or not.</p> <p>This is a stricter test than  {@link #isSet(int)}, in that all of the bits in a multi-bit set must be set for this method to return  {@code true}.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return {@code true} if all of the bits are set,else  {@code false}
 */
/** 
 * <p>Replaces the bits with new values.</p>
 * @see #getValue(int)
 * @param holder the int data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */
/** 
 * <p>Replaces the bits with new values.</p>
 * @see #getShortValue(short)
 * @param holder the short data containing the bits we'reinterested in
 * @param value the new value for the specified bits
 * @return the value of holder with the bits from the valueparameter replacing the old bits
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Clears the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits cleared(set to  {@code 0})
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets the bits.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @return the value of holder with the specified bits setto  {@code 1}
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the int data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the short data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
/** 
 * <p>Sets a boolean BitField.</p>
 * @param holder the byte data containing the bits we'reinterested in
 * @param flag indicating whether to set or clear the bits
 * @return the value of holder with the specified bits set orcleared
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@125f16b2
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5384ce66

#TRAVERSE
LEFTCHILD: CLASS: BitField
RIGHTCHILD: CLASS: BitField
##SNODE L: CLASS: BitField
##SNODE L: CLASS: BitField
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6b42e36d
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@13192275

##TRAVERSE
LEFTCHILD: METHOD: clearByte(byte)
RIGHTCHILD: METHOD: clearByte(byte)
###SNODE L: METHOD: clearByte(byte)
###SNODE L: METHOD: clearByte(byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setShortBoolean(short,boolean)
RIGHTCHILD: METHOD: setShortBoolean(short,boolean)
###SNODE L: METHOD: setShortBoolean(short,boolean)
###SNODE L: METHOD: setShortBoolean(short,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getValue(int)
RIGHTCHILD: METHOD: getValue(int)
###SNODE L: METHOD: getValue(int)
###SNODE L: METHOD: getValue(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getRawValue(int)
RIGHTCHILD: METHOD: getRawValue(int)
###SNODE L: METHOD: getRawValue(int)
###SNODE L: METHOD: getRawValue(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clear(int)
RIGHTCHILD: METHOD: clear(int)
###SNODE L: METHOD: clear(int)
###SNODE L: METHOD: clear(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortRawValue(short)
RIGHTCHILD: METHOD: getShortRawValue(short)
###SNODE L: METHOD: getShortRawValue(short)
###SNODE L: METHOD: getShortRawValue(short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSet(int)
RIGHTCHILD: METHOD: isSet(int)
###SNODE L: METHOD: isSet(int)
###SNODE L: METHOD: isSet(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setShortValue(short,short)
RIGHTCHILD: METHOD: setShortValue(short,short)
###SNODE L: METHOD: setShortValue(short,short)
###SNODE L: METHOD: setShortValue(short,short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setValue(int,int)
RIGHTCHILD: METHOD: setValue(int,int)
###SNODE L: METHOD: setValue(int,int)
###SNODE L: METHOD: setValue(int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: _shift_count : int
RIGHTCHILD: FIELD: _shift_count : int
###SNODE L: FIELD: _shift_count : int
###SNODE L: FIELD: _shift_count : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: _mask : int
RIGHTCHILD: FIELD: _mask : int
###SNODE L: FIELD: _mask : int
###SNODE L: FIELD: _mask : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setShort(short)
RIGHTCHILD: METHOD: setShort(short)
###SNODE L: METHOD: setShort(short)
###SNODE L: METHOD: setShort(short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clearShort(short)
RIGHTCHILD: METHOD: clearShort(short)
###SNODE L: METHOD: clearShort(short)
###SNODE L: METHOD: clearShort(short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setByteBoolean(byte,boolean)
RIGHTCHILD: METHOD: setByteBoolean(byte,boolean)
###SNODE L: METHOD: setByteBoolean(byte,boolean)
###SNODE L: METHOD: setByteBoolean(byte,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setBoolean(int,boolean)
RIGHTCHILD: METHOD: setBoolean(int,boolean)
###SNODE L: METHOD: setBoolean(int,boolean)
###SNODE L: METHOD: setBoolean(int,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: BitField(int)
RIGHTCHILD: CONSTRUCTOR: BitField(int)
###SNODE L: CONSTRUCTOR: BitField(int)
###SNODE L: CONSTRUCTOR: BitField(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: set(int)
RIGHTCHILD: METHOD: set(int)
###SNODE L: METHOD: set(int)
###SNODE L: METHOD: set(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: setByte(byte)
RIGHTCHILD: METHOD: setByte(byte)
###SNODE L: METHOD: setByte(byte)
###SNODE L: METHOD: setByte(byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortValue(short)
RIGHTCHILD: METHOD: getShortValue(short)
###SNODE L: METHOD: getShortValue(short)
###SNODE L: METHOD: getShortValue(short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAllSet(int)
RIGHTCHILD: METHOD: isAllSet(int)
###SNODE L: METHOD: isAllSet(int)
###SNODE L: METHOD: isAllSet(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)353
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)354
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)355
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)353
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)356
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)354
-(2)-(8)-(12)-(0)-(0)-(1)356
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)357
-(2)-(8)-(12)-(0)-(2)-(2)356
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)357
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)357
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)359
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)357
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)355
-(2)-(8)-(12)-(0)-(0)-(1)330
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)237
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)362
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)361
-(2)-(8)-(12)-(0)-(0)-(0)-(3)360
-(2)-(8)-(12)-(0)-(0)-(1)355
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)363
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)237
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)361
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)358
-(2)-(8)-(12)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(1)354
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)364
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)361
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)365
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)354
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)366
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)354
-(2)-(8)-(12)-(0)-(0)-(1)354
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)367
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)370
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)354
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)358
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)369
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)-(1)355
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)354
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)371
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)367
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)-(12)-(0)-(0)-(1)-(3)97
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)372
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)358
-(2)-(8)-(12)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(0)-(1)-(0)354
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)373
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)372
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)374
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)372
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)320
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)370
-(2)-(8)-(12)-(0)-(0)-(0)360
-(2)-(8)-(12)-(0)-(0)-(1)354
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)375
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)320
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)376
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)320
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)377
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)378
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)378
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)320
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)372
-(2)-(8)-(12)-(0)-(0)-(2)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)379
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)378
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)378
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)375
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)373
-(2)-(8)-(12)-(0)-(0)-(2)-(3)360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)380
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)378
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)378
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)376
-(2)-(8)-(12)-(0)-(0)-(1)-(3)360
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)374
-(2)-(8)-(12)-(0)-(0)-(2)-(3)360

LEFT COMMENTS
/* *//** 
 * <p>Operations on boolean primitives and Boolean objects.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * <p> {@code BooleanUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code BooleanUtils.negate(true);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Negates the specified boolean.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE; BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE; BooleanUtils.negate(null)          = null; </pre>
 * @param bool  the Boolean to negate, may be null
 * @return the negated Boolean, or {@code null} if {@code null} input
 */
//
//
/** 
 * <p>Checks if a  {@code Boolean} value is {@code true}, handling  {@code null} by returning {@code false}.</p> <pre> BooleanUtils.isTrue(Boolean.TRUE)  = true BooleanUtils.isTrue(Boolean.FALSE) = false BooleanUtils.isTrue(null)          = false </pre>
 * @param bool  the boolean to check, null returns {@code false}
 * @return {@code true} only if the input is non-null and true
 * @since 2.1
 */
/** 
 * <p>Checks if a  {@code Boolean} value is <i>not</i> {@code true}, handling  {@code null} by returning {@code true}.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>
 * @param bool  the boolean to check, null returns {@code true}
 * @return {@code true} if the input is null or false
 * @since 2.3
 */
/** 
 * <p>Checks if a  {@code Boolean} value is {@code false}, handling  {@code null} by returning {@code false}.</p> <pre> BooleanUtils.isFalse(Boolean.TRUE)  = false BooleanUtils.isFalse(Boolean.FALSE) = true BooleanUtils.isFalse(null)          = false </pre>
 * @param bool  the boolean to check, null returns {@code false}
 * @return {@code true} only if the input is non-null and false
 * @since 2.1
 */
/** 
 * <p>Checks if a  {@code Boolean} value is <i>not</i> {@code false}, handling  {@code null} by returning {@code true}.</p> <pre> BooleanUtils.isNotFalse(Boolean.TRUE)  = true BooleanUtils.isNotFalse(Boolean.FALSE) = false BooleanUtils.isNotFalse(null)          = true </pre>
 * @param bool  the boolean to check, null returns {@code true}
 * @return {@code true} if the input is null or true
 * @since 2.3
 */
//
/** 
 * <p>Converts a Boolean to a boolean handling  {@code null}by returning  {@code false}.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>
 * @param bool  the boolean to convert
 * @return {@code true} or {@code false},  {@code null} returns {@code false}
 */
/** 
 * <p>Converts a Boolean to a boolean handling  {@code null}.</p> <pre> BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false BooleanUtils.toBooleanDefaultIfNull(null, true)          = true </pre>
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if {@code null}
 * @return {@code true} or {@code false}
 */
//
//
/** 
 * <p>Converts an int to a boolean using the convention that  {@code zero}is  {@code false}.</p> <pre> BooleanUtils.toBoolean(0) = false BooleanUtils.toBoolean(1) = true BooleanUtils.toBoolean(2) = true </pre>
 * @param value  the int to convert
 * @return {@code true} if non-zero, {@code false}if zero
 */
/** 
 * <p>Converts an int to a Boolean using the convention that  {@code zero}is  {@code false}.</p> <pre> BooleanUtils.toBoolean(0) = Boolean.FALSE BooleanUtils.toBoolean(1) = Boolean.TRUE BooleanUtils.toBoolean(2) = Boolean.TRUE </pre>
 * @param value  the int to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,{@code null} if {@code null}
 */
/** 
 * <p>Converts an Integer to a Boolean using the convention that  {@code zero}is  {@code false}.</p> <p> {@code null} will be converted to {@code null}.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBoolean(Integer.valueOf(0))    = Boolean.FALSE BooleanUtils.toBoolean(Integer.valueOf(1))    = Boolean.TRUE BooleanUtils.toBoolean(Integer.valueOf(null)) = null </pre>
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,{@code null} if {@code null} input
 */
/** 
 * <p>Converts an int to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(0, 1, 0) = false BooleanUtils.toBoolean(1, 1, 0) = true BooleanUtils.toBoolean(2, 1, 2) = false BooleanUtils.toBoolean(2, 2, 0) = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}
 * @param falseValue  the value to match for {@code false}
 * @return {@code true} or {@code false}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an Integer to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(0)) = false BooleanUtils.toBoolean(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0)) = true BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2)) = false BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(0)) = true BooleanUtils.toBoolean(null, null, Integer.valueOf(0))                     = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}, may be  {@code null}
 * @param falseValue  the value to match for {@code false}, may be  {@code null}
 * @return {@code true} or {@code false}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an int to a Boolean specifying the conversion values.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE BooleanUtils.toBooleanObject(3, 1, 2, 3) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}
 * @param falseValue  the value to match for {@code false}
 * @param nullValue  the value to to match for {@code null}
 * @return Boolean.TRUE, Boolean.FALSE, or {@code null}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject(Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.TRUE BooleanUtils.toBooleanObject(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.FALSE BooleanUtils.toBooleanObject(Integer.valueOf(3), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}, may be  {@code null}
 * @param falseValue  the value to match for {@code false}, may be  {@code null}
 * @param nullValue  the value to to match for {@code null}, may be  {@code null}
 * @return Boolean.TRUE, Boolean.FALSE, or {@code null}
 * @throws IllegalArgumentException if no match
 */
//
//
//
/** 
 * <p>Converts a boolean to an int using the convention that {@code zero} is {@code false}.</p> <pre> BooleanUtils.toInteger(true)  = 1 BooleanUtils.toInteger(false) = 0 </pre>
 * @param bool  the boolean to convert
 * @return one if {@code true}, zero if  {@code false}
 */
/** 
 * <p>Converts a boolean to an Integer using the convention that {@code zero} is {@code false}.</p> <pre> BooleanUtils.toIntegerObject(true)  = Integer.valueOf(1) BooleanUtils.toIntegerObject(false) = Integer.valueOf(0) </pre>
 * @param bool  the boolean to convert
 * @return one if {@code true}, zero if  {@code false}
 */
/** 
 * <p>Converts a Boolean to a Integer using the convention that {@code zero} is {@code false}.</p> <p> {@code null} will be converted to {@code null}.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE)  = Integer.valueOf(1) BooleanUtils.toIntegerObject(Boolean.FALSE) = Integer.valueOf(0) </pre>
 * @param bool  the Boolean to convert
 * @return one if Boolean.TRUE, zero if Boolean.FALSE, {@code null} if {@code null}
 */
/** 
 * <p>Converts a boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(true, 1, 0)  = 1 BooleanUtils.toInteger(false, 1, 0) = 0 </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if {@code true}
 * @param falseValue  the value to return if {@code false}
 * @return the appropriate value
 */
/** 
 * <p>Converts a Boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1 BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0 BooleanUtils.toInteger(null, 1, 0, 2)          = 2 </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if {@code true}
 * @param falseValue  the value to return if {@code false}
 * @param nullValue  the value to return if {@code null}
 * @return the appropriate value
 */
/** 
 * <p>Converts a boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(true, Integer.valueOf(1), Integer.valueOf(0))  = Integer.valueOf(1) BooleanUtils.toIntegerObject(false, Integer.valueOf(1), Integer.valueOf(0)) = Integer.valueOf(0) </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if {@code true}, may be  {@code null}
 * @param falseValue  the value to return if {@code false}, may be  {@code null}
 * @return the appropriate value
 */
/** 
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))  = Integer.valueOf(1) BooleanUtils.toIntegerObject(Boolean.FALSE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2)) = Integer.valueOf(0) BooleanUtils.toIntegerObject(null, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))          = Integer.valueOf(2) </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if {@code true}, may be  {@code null}
 * @param falseValue  the value to return if {@code false}, may be  {@code null}
 * @param nullValue  the value to return if {@code null}, may be  {@code null}
 * @return the appropriate value
 */
//
//
/** 
 * <p>Converts a String to a Boolean.</p> <p> {@code 'true'},  {@code 'on'},  {@code 'y'},  {@code 't'} or {@code 'yes'}(case insensitive) will return  {@code true}. {@code 'false'},  {@code 'off'},  {@code 'n'},  {@code 'f'} or {@code 'no'}(case insensitive) will return  {@code false}. Otherwise,  {@code null} is returned.</p><p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> // N.B. case is not significant BooleanUtils.toBooleanObject(null)    = null BooleanUtils.toBooleanObject("true")  = Boolean.TRUE BooleanUtils.toBooleanObject("T")     = Boolean.TRUE // i.e. T[RUE] BooleanUtils.toBooleanObject("false") = Boolean.FALSE BooleanUtils.toBooleanObject("f")     = Boolean.FALSE // i.e. f[alse] BooleanUtils.toBooleanObject("No")    = Boolean.FALSE BooleanUtils.toBooleanObject("n")     = Boolean.FALSE // i.e. n[o] BooleanUtils.toBooleanObject("on")    = Boolean.TRUE BooleanUtils.toBooleanObject("ON")    = Boolean.TRUE BooleanUtils.toBooleanObject("off")   = Boolean.FALSE BooleanUtils.toBooleanObject("oFf")   = Boolean.FALSE BooleanUtils.toBooleanObject("yes")   = Boolean.TRUE BooleanUtils.toBooleanObject("Y")     = Boolean.TRUE // i.e. Y[ES] BooleanUtils.toBooleanObject("blue")  = null </pre>
 * @param str  the String to check; upper and lower case are treated as the same
 * @return the Boolean value of the string, {@code null} if no match or {@code null} input
 */
//
//
//
//
//
//
/** 
 * <p>Converts a String to a Boolean throwing an exception if no match.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject("true", "true", "false", "null")  = Boolean.TRUE BooleanUtils.toBooleanObject("false", "true", "false", "null") = Boolean.FALSE BooleanUtils.toBooleanObject("null", "true", "false", "null")  = null </pre>
 * @param str  the String to check
 * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}
 * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}
 * @param nullString  the String to match for {@code null} (case sensitive), may be {@code null}
 * @return the Boolean value of the string, {@code null} if either the String matches {@code nullString}or if  {@code null} input and {@code nullString} is {@code null}
 * @throws IllegalArgumentException if the String doesn't match
 */
//
//
//
/** 
 * <p>Converts a String to a boolean (optimised for performance).</p> <p> {@code 'true'},  {@code 'on'},  {@code 'y'},  {@code 't'} or {@code 'yes'}(case insensitive) will return  {@code true}. Otherwise, {@code false} is returned.</p><p>This method performs 4 times faster (JDK1.4) than {@code Boolean.valueOf(String)}. However, this method accepts 'on' and 'yes', 't', 'y' as true values. <pre> BooleanUtils.toBoolean(null)    = false BooleanUtils.toBoolean("true")  = true BooleanUtils.toBoolean("TRUE")  = true BooleanUtils.toBoolean("tRUe")  = true BooleanUtils.toBoolean("on")    = true BooleanUtils.toBoolean("yes")   = true BooleanUtils.toBoolean("false") = false BooleanUtils.toBoolean("x gti") = false BooleanUtils.toBooleanObject("y") = true BooleanUtils.toBooleanObject("n") = false BooleanUtils.toBooleanObject("t") = true BooleanUtils.toBooleanObject("f") = false  </pre>
 * @param str  the String to check
 * @return the boolean value of the string, {@code false} if no match or the String is null
 */
/** 
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p> <pre> BooleanUtils.toBoolean("true", "true", "false")  = true BooleanUtils.toBoolean("false", "true", "false") = false </pre>
 * @param str  the String to check
 * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}
 * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
//
//
//
/** 
 * <p>Converts a Boolean to a String returning  {@code 'true'}, {@code 'false'}, or  {@code null}.</p> <pre> BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = "true" BooleanUtils.toStringTrueFalse(Boolean.FALSE) = "false" BooleanUtils.toStringTrueFalse(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'true'},  {@code 'false'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning  {@code 'on'}, {@code 'off'}, or  {@code null}.</p> <pre> BooleanUtils.toStringOnOff(Boolean.TRUE)  = "on" BooleanUtils.toStringOnOff(Boolean.FALSE) = "off" BooleanUtils.toStringOnOff(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'on'},  {@code 'off'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning  {@code 'yes'}, {@code 'no'}, or  {@code null}.</p> <pre> BooleanUtils.toStringYesNo(Boolean.TRUE)  = "yes" BooleanUtils.toStringYesNo(Boolean.FALSE) = "no" BooleanUtils.toStringYesNo(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'yes'},  {@code 'no'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(Boolean.TRUE, "true", "false", null)   = "true" BooleanUtils.toString(Boolean.FALSE, "true", "false", null)  = "false" BooleanUtils.toString(null, "true", "false", null)           = null; </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if {@code true}, may be  {@code null}
 * @param falseString  the String to return if {@code false}, may be  {@code null}
 * @param nullString  the String to return if {@code null}, may be  {@code null}
 * @return one of the three input Strings
 */
//
//
/** 
 * <p>Converts a boolean to a String returning  {@code 'true'}or  {@code 'false'}.</p> <pre> BooleanUtils.toStringTrueFalse(true)   = "true" BooleanUtils.toStringTrueFalse(false)  = "false" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'true'},  {@code 'false'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning  {@code 'on'}or  {@code 'off'}.</p> <pre> BooleanUtils.toStringOnOff(true)   = "on" BooleanUtils.toStringOnOff(false)  = "off" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'on'},  {@code 'off'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning  {@code 'yes'}or  {@code 'no'}.</p> <pre> BooleanUtils.toStringYesNo(true)   = "yes" BooleanUtils.toStringYesNo(false)  = "no" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'yes'},  {@code 'no'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(true, "true", "false")   = "true" BooleanUtils.toString(false, "true", "false")  = "false" </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if {@code true}, may be  {@code null}
 * @param falseString  the String to return if {@code false}, may be  {@code null}
 * @return one of the two input Strings
 */
//
//
/** 
 * <p>Performs an and on a set of booleans.</p> <pre> BooleanUtils.and(true, true)         = true BooleanUtils.and(false, false)       = false BooleanUtils.and(true, false)        = false BooleanUtils.and(true, true, false)  = false BooleanUtils.and(true, true, true)   = true </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the and is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @since 3.0.1
 */
//
/** 
 * <p>Performs an and on an array of Booleans.</p> <pre> BooleanUtils.and(Boolean.TRUE, Boolean.TRUE)                 = Boolean.TRUE BooleanUtils.and(Boolean.FALSE, Boolean.FALSE)               = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.FALSE)                = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)   = Boolean.TRUE BooleanUtils.and(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE) = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)  = Boolean.FALSE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the and is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 * @since 3.0.1
 */
/** 
 * <p>Performs an or on a set of booleans.</p> <pre> BooleanUtils.or(true, true)          = true BooleanUtils.or(false, false)        = false BooleanUtils.or(true, false)         = true BooleanUtils.or(true, true, false)   = true BooleanUtils.or(true, true, true)    = true BooleanUtils.or(false, false, false) = false </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the or is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @since 3.0.1
 */
//
/** 
 * <p>Performs an or on an array of Booleans.</p> <pre> BooleanUtils.or(Boolean.TRUE, Boolean.TRUE)                  = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE)                = Boolean.FALSE BooleanUtils.or(Boolean.TRUE, Boolean.FALSE)                 = Boolean.TRUE BooleanUtils.or(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)    = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE)  = Boolean.TRUE BooleanUtils.or(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)   = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE) = Boolean.FALSE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the or is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 * @since 3.0.1
 */
/** 
 * <p>Performs an xor on a set of booleans.</p> <pre> BooleanUtils.xor(true, true)   = false BooleanUtils.xor(false, false) = false BooleanUtils.xor(true, false)  = true BooleanUtils.xor(true, true)   = false BooleanUtils.xor(false, false) = false BooleanUtils.xor(true, false)  = true </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the xor is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 */
//
//
//
//
//
/** 
 * <p>Performs an xor on an array of Booleans.</p> <pre> BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the xor is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on boolean primitives and Boolean objects.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * <p> {@code BooleanUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code BooleanUtils.negate(true);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Negates the specified boolean.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE; BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE; BooleanUtils.negate(null)          = null; </pre>
 * @param bool  the Boolean to negate, may be null
 * @return the negated Boolean, or {@code null} if {@code null} input
 */
//
//
/** 
 * <p>Checks if a  {@code Boolean} value is {@code true}, handling  {@code null} by returning {@code false}.</p> <pre> BooleanUtils.isTrue(Boolean.TRUE)  = true BooleanUtils.isTrue(Boolean.FALSE) = false BooleanUtils.isTrue(null)          = false </pre>
 * @param bool  the boolean to check, null returns {@code false}
 * @return {@code true} only if the input is non-null and true
 * @since 2.1
 */
/** 
 * <p>Checks if a  {@code Boolean} value is <i>not</i> {@code true}, handling  {@code null} by returning {@code true}.</p> <pre> BooleanUtils.isNotTrue(Boolean.TRUE)  = false BooleanUtils.isNotTrue(Boolean.FALSE) = true BooleanUtils.isNotTrue(null)          = true </pre>
 * @param bool  the boolean to check, null returns {@code true}
 * @return {@code true} if the input is null or false
 * @since 2.3
 */
/** 
 * <p>Checks if a  {@code Boolean} value is {@code false}, handling  {@code null} by returning {@code false}.</p> <pre> BooleanUtils.isFalse(Boolean.TRUE)  = false BooleanUtils.isFalse(Boolean.FALSE) = true BooleanUtils.isFalse(null)          = false </pre>
 * @param bool  the boolean to check, null returns {@code false}
 * @return {@code true} only if the input is non-null and false
 * @since 2.1
 */
/** 
 * <p>Checks if a  {@code Boolean} value is <i>not</i> {@code false}, handling  {@code null} by returning {@code true}.</p> <pre> BooleanUtils.isNotFalse(Boolean.TRUE)  = true BooleanUtils.isNotFalse(Boolean.FALSE) = false BooleanUtils.isNotFalse(null)          = true </pre>
 * @param bool  the boolean to check, null returns {@code true}
 * @return {@code true} if the input is null or true
 * @since 2.3
 */
//
/** 
 * <p>Converts a Boolean to a boolean handling  {@code null}by returning  {@code false}.</p> <pre> BooleanUtils.toBoolean(Boolean.TRUE)  = true BooleanUtils.toBoolean(Boolean.FALSE) = false BooleanUtils.toBoolean(null)          = false </pre>
 * @param bool  the boolean to convert
 * @return {@code true} or {@code false},  {@code null} returns {@code false}
 */
/** 
 * <p>Converts a Boolean to a boolean handling  {@code null}.</p> <pre> BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false BooleanUtils.toBooleanDefaultIfNull(null, true)          = true </pre>
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if {@code null}
 * @return {@code true} or {@code false}
 */
//
//
/** 
 * <p>Converts an int to a boolean using the convention that  {@code zero}is  {@code false}.</p> <pre> BooleanUtils.toBoolean(0) = false BooleanUtils.toBoolean(1) = true BooleanUtils.toBoolean(2) = true </pre>
 * @param value  the int to convert
 * @return {@code true} if non-zero, {@code false}if zero
 */
/** 
 * <p>Converts an int to a Boolean using the convention that  {@code zero}is  {@code false}.</p> <pre> BooleanUtils.toBoolean(0) = Boolean.FALSE BooleanUtils.toBoolean(1) = Boolean.TRUE BooleanUtils.toBoolean(2) = Boolean.TRUE </pre>
 * @param value  the int to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,{@code null} if {@code null}
 */
/** 
 * <p>Converts an Integer to a Boolean using the convention that  {@code zero}is  {@code false}.</p> <p> {@code null} will be converted to {@code null}.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBoolean(Integer.valueOf(0))    = Boolean.FALSE BooleanUtils.toBoolean(Integer.valueOf(1))    = Boolean.TRUE BooleanUtils.toBoolean(Integer.valueOf(null)) = null </pre>
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,{@code null} if {@code null} input
 */
/** 
 * <p>Converts an int to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(0, 1, 0) = false BooleanUtils.toBoolean(1, 1, 0) = true BooleanUtils.toBoolean(2, 1, 2) = false BooleanUtils.toBoolean(2, 2, 0) = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}
 * @param falseValue  the value to match for {@code false}
 * @return {@code true} or {@code false}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an Integer to a boolean specifying the conversion values.</p> <pre> BooleanUtils.toBoolean(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(0)) = false BooleanUtils.toBoolean(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0)) = true BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2)) = false BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(0)) = true BooleanUtils.toBoolean(null, null, Integer.valueOf(0))                     = true </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}, may be  {@code null}
 * @param falseValue  the value to match for {@code false}, may be  {@code null}
 * @return {@code true} or {@code false}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an int to a Boolean specifying the conversion values.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE BooleanUtils.toBooleanObject(3, 1, 2, 3) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}
 * @param falseValue  the value to match for {@code false}
 * @param nullValue  the value to to match for {@code null}
 * @return Boolean.TRUE, Boolean.FALSE, or {@code null}
 * @throws IllegalArgumentException if no match
 */
//
/** 
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject(Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.TRUE BooleanUtils.toBooleanObject(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.FALSE BooleanUtils.toBooleanObject(Integer.valueOf(3), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = null </pre>
 * @param value  the Integer to convert
 * @param trueValue  the value to match for {@code true}, may be  {@code null}
 * @param falseValue  the value to match for {@code false}, may be  {@code null}
 * @param nullValue  the value to to match for {@code null}, may be  {@code null}
 * @return Boolean.TRUE, Boolean.FALSE, or {@code null}
 * @throws IllegalArgumentException if no match
 */
//
//
//
/** 
 * <p>Converts a boolean to an int using the convention that {@code zero} is {@code false}.</p> <pre> BooleanUtils.toInteger(true)  = 1 BooleanUtils.toInteger(false) = 0 </pre>
 * @param bool  the boolean to convert
 * @return one if {@code true}, zero if  {@code false}
 */
/** 
 * <p>Converts a boolean to an Integer using the convention that {@code zero} is {@code false}.</p> <pre> BooleanUtils.toIntegerObject(true)  = Integer.valueOf(1) BooleanUtils.toIntegerObject(false) = Integer.valueOf(0) </pre>
 * @param bool  the boolean to convert
 * @return one if {@code true}, zero if  {@code false}
 */
/** 
 * <p>Converts a Boolean to a Integer using the convention that {@code zero} is {@code false}.</p> <p> {@code null} will be converted to {@code null}.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE)  = Integer.valueOf(1) BooleanUtils.toIntegerObject(Boolean.FALSE) = Integer.valueOf(0) </pre>
 * @param bool  the Boolean to convert
 * @return one if Boolean.TRUE, zero if Boolean.FALSE, {@code null} if {@code null}
 */
/** 
 * <p>Converts a boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(true, 1, 0)  = 1 BooleanUtils.toInteger(false, 1, 0) = 0 </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if {@code true}
 * @param falseValue  the value to return if {@code false}
 * @return the appropriate value
 */
/** 
 * <p>Converts a Boolean to an int specifying the conversion values.</p> <pre> BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1 BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0 BooleanUtils.toInteger(null, 1, 0, 2)          = 2 </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if {@code true}
 * @param falseValue  the value to return if {@code false}
 * @param nullValue  the value to return if {@code null}
 * @return the appropriate value
 */
/** 
 * <p>Converts a boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(true, Integer.valueOf(1), Integer.valueOf(0))  = Integer.valueOf(1) BooleanUtils.toIntegerObject(false, Integer.valueOf(1), Integer.valueOf(0)) = Integer.valueOf(0) </pre>
 * @param bool  the to convert
 * @param trueValue  the value to return if {@code true}, may be  {@code null}
 * @param falseValue  the value to return if {@code false}, may be  {@code null}
 * @return the appropriate value
 */
/** 
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p> <pre> BooleanUtils.toIntegerObject(Boolean.TRUE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))  = Integer.valueOf(1) BooleanUtils.toIntegerObject(Boolean.FALSE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2)) = Integer.valueOf(0) BooleanUtils.toIntegerObject(null, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))          = Integer.valueOf(2) </pre>
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if {@code true}, may be  {@code null}
 * @param falseValue  the value to return if {@code false}, may be  {@code null}
 * @param nullValue  the value to return if {@code null}, may be  {@code null}
 * @return the appropriate value
 */
//
//
/** 
 * <p>Converts a String to a Boolean.</p> <p> {@code 'true'},  {@code 'on'},  {@code 'y'},  {@code 't'} or {@code 'yes'}(case insensitive) will return  {@code true}. {@code 'false'},  {@code 'off'},  {@code 'n'},  {@code 'f'} or {@code 'no'}(case insensitive) will return  {@code false}. Otherwise,  {@code null} is returned.</p><p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> // N.B. case is not significant BooleanUtils.toBooleanObject(null)    = null BooleanUtils.toBooleanObject("true")  = Boolean.TRUE BooleanUtils.toBooleanObject("T")     = Boolean.TRUE // i.e. T[RUE] BooleanUtils.toBooleanObject("false") = Boolean.FALSE BooleanUtils.toBooleanObject("f")     = Boolean.FALSE // i.e. f[alse] BooleanUtils.toBooleanObject("No")    = Boolean.FALSE BooleanUtils.toBooleanObject("n")     = Boolean.FALSE // i.e. n[o] BooleanUtils.toBooleanObject("on")    = Boolean.TRUE BooleanUtils.toBooleanObject("ON")    = Boolean.TRUE BooleanUtils.toBooleanObject("off")   = Boolean.FALSE BooleanUtils.toBooleanObject("oFf")   = Boolean.FALSE BooleanUtils.toBooleanObject("yes")   = Boolean.TRUE BooleanUtils.toBooleanObject("Y")     = Boolean.TRUE // i.e. Y[ES] BooleanUtils.toBooleanObject("blue")  = null </pre>
 * @param str  the String to check; upper and lower case are treated as the same
 * @return the Boolean value of the string, {@code null} if no match or {@code null} input
 */
//
//
//
//
//
//
/** 
 * <p>Converts a String to a Boolean throwing an exception if no match.</p> <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p> <pre> BooleanUtils.toBooleanObject("true", "true", "false", "null")  = Boolean.TRUE BooleanUtils.toBooleanObject("false", "true", "false", "null") = Boolean.FALSE BooleanUtils.toBooleanObject("null", "true", "false", "null")  = null </pre>
 * @param str  the String to check
 * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}
 * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}
 * @param nullString  the String to match for {@code null} (case sensitive), may be {@code null}
 * @return the Boolean value of the string, {@code null} if either the String matches {@code nullString}or if  {@code null} input and {@code nullString} is {@code null}
 * @throws IllegalArgumentException if the String doesn't match
 */
//
//
//
/** 
 * <p>Converts a String to a boolean (optimised for performance).</p> <p> {@code 'true'},  {@code 'on'},  {@code 'y'},  {@code 't'} or {@code 'yes'}(case insensitive) will return  {@code true}. Otherwise, {@code false} is returned.</p><p>This method performs 4 times faster (JDK1.4) than {@code Boolean.valueOf(String)}. However, this method accepts 'on' and 'yes', 't', 'y' as true values. <pre> BooleanUtils.toBoolean(null)    = false BooleanUtils.toBoolean("true")  = true BooleanUtils.toBoolean("TRUE")  = true BooleanUtils.toBoolean("tRUe")  = true BooleanUtils.toBoolean("on")    = true BooleanUtils.toBoolean("yes")   = true BooleanUtils.toBoolean("false") = false BooleanUtils.toBoolean("x gti") = false BooleanUtils.toBooleanObject("y") = true BooleanUtils.toBooleanObject("n") = false BooleanUtils.toBooleanObject("t") = true BooleanUtils.toBooleanObject("f") = false  </pre>
 * @param str  the String to check
 * @return the boolean value of the string, {@code false} if no match or the String is null
 */
/** 
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p> <pre> BooleanUtils.toBoolean("true", "true", "false")  = true BooleanUtils.toBoolean("false", "true", "false") = false </pre>
 * @param str  the String to check
 * @param trueString  the String to match for {@code true} (case sensitive), may be {@code null}
 * @param falseString  the String to match for {@code false} (case sensitive), may be {@code null}
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
//
//
//
/** 
 * <p>Converts a Boolean to a String returning  {@code 'true'}, {@code 'false'}, or  {@code null}.</p> <pre> BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = "true" BooleanUtils.toStringTrueFalse(Boolean.FALSE) = "false" BooleanUtils.toStringTrueFalse(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'true'},  {@code 'false'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning  {@code 'on'}, {@code 'off'}, or  {@code null}.</p> <pre> BooleanUtils.toStringOnOff(Boolean.TRUE)  = "on" BooleanUtils.toStringOnOff(Boolean.FALSE) = "off" BooleanUtils.toStringOnOff(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'on'},  {@code 'off'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning  {@code 'yes'}, {@code 'no'}, or  {@code null}.</p> <pre> BooleanUtils.toStringYesNo(Boolean.TRUE)  = "yes" BooleanUtils.toStringYesNo(Boolean.FALSE) = "no" BooleanUtils.toStringYesNo(null)          = null; </pre>
 * @param bool  the Boolean to check
 * @return {@code 'yes'},  {@code 'no'}, or  {@code null}
 */
/** 
 * <p>Converts a Boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(Boolean.TRUE, "true", "false", null)   = "true" BooleanUtils.toString(Boolean.FALSE, "true", "false", null)  = "false" BooleanUtils.toString(null, "true", "false", null)           = null; </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if {@code true}, may be  {@code null}
 * @param falseString  the String to return if {@code false}, may be  {@code null}
 * @param nullString  the String to return if {@code null}, may be  {@code null}
 * @return one of the three input Strings
 */
//
//
/** 
 * <p>Converts a boolean to a String returning  {@code 'true'}or  {@code 'false'}.</p> <pre> BooleanUtils.toStringTrueFalse(true)   = "true" BooleanUtils.toStringTrueFalse(false)  = "false" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'true'},  {@code 'false'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning  {@code 'on'}or  {@code 'off'}.</p> <pre> BooleanUtils.toStringOnOff(true)   = "on" BooleanUtils.toStringOnOff(false)  = "off" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'on'},  {@code 'off'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning  {@code 'yes'}or  {@code 'no'}.</p> <pre> BooleanUtils.toStringYesNo(true)   = "yes" BooleanUtils.toStringYesNo(false)  = "no" </pre>
 * @param bool  the Boolean to check
 * @return {@code 'yes'},  {@code 'no'}, or  {@code null}
 */
/** 
 * <p>Converts a boolean to a String returning one of the input Strings.</p> <pre> BooleanUtils.toString(true, "true", "false")   = "true" BooleanUtils.toString(false, "true", "false")  = "false" </pre>
 * @param bool  the Boolean to check
 * @param trueString  the String to return if {@code true}, may be  {@code null}
 * @param falseString  the String to return if {@code false}, may be  {@code null}
 * @return one of the two input Strings
 */
//
//
/** 
 * <p>Performs an and on a set of booleans.</p> <pre> BooleanUtils.and(true, true)         = true BooleanUtils.and(false, false)       = false BooleanUtils.and(true, false)        = false BooleanUtils.and(true, true, false)  = false BooleanUtils.and(true, true, true)   = true </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the and is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @since 3.0.1
 */
//
/** 
 * <p>Performs an and on an array of Booleans.</p> <pre> BooleanUtils.and(Boolean.TRUE, Boolean.TRUE)                 = Boolean.TRUE BooleanUtils.and(Boolean.FALSE, Boolean.FALSE)               = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.FALSE)                = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)   = Boolean.TRUE BooleanUtils.and(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE) = Boolean.FALSE BooleanUtils.and(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)  = Boolean.FALSE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the and is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 * @since 3.0.1
 */
/** 
 * <p>Performs an or on a set of booleans.</p> <pre> BooleanUtils.or(true, true)          = true BooleanUtils.or(false, false)        = false BooleanUtils.or(true, false)         = true BooleanUtils.or(true, true, false)   = true BooleanUtils.or(true, true, true)    = true BooleanUtils.or(false, false, false) = false </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the or is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @since 3.0.1
 */
//
/** 
 * <p>Performs an or on an array of Booleans.</p> <pre> BooleanUtils.or(Boolean.TRUE, Boolean.TRUE)                  = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE)                = Boolean.FALSE BooleanUtils.or(Boolean.TRUE, Boolean.FALSE)                 = Boolean.TRUE BooleanUtils.or(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)    = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE)  = Boolean.TRUE BooleanUtils.or(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)   = Boolean.TRUE BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE) = Boolean.FALSE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the or is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 * @since 3.0.1
 */
/** 
 * <p>Performs an xor on a set of booleans.</p> <pre> BooleanUtils.xor(true, true)   = false BooleanUtils.xor(false, false) = false BooleanUtils.xor(true, false)  = true BooleanUtils.xor(true, true)   = false BooleanUtils.xor(false, false) = false BooleanUtils.xor(true, false)  = true </pre>
 * @param array  an array of {@code boolean}s
 * @return {@code true} if the xor is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 */
//
//
//
//
//
/** 
 * <p>Performs an xor on an array of Booleans.</p> <pre> BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE </pre>
 * @param array  an array of {@code Boolean}s
 * @return {@code true} if the xor is successful.
 * @throws IllegalArgumentException if {@code array} is {@code null}
 * @throws IllegalArgumentException if {@code array} is empty.
 * @throws IllegalArgumentException if {@code array} contains a {@code null}
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@54247647
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4975dda1

#TRAVERSE
LEFTCHILD: CLASS: BooleanUtils
RIGHTCHILD: CLASS: BooleanUtils
##SNODE L: CLASS: BooleanUtils
##SNODE L: CLASS: BooleanUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@e0d1dc4
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5463f035

##TRAVERSE
LEFTCHILD: METHOD: toBoolean(int,int,int)
RIGHTCHILD: METHOD: toBoolean(int,int,int)
###SNODE L: METHOD: toBoolean(int,int,int)
###SNODE L: METHOD: toBoolean(int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringOnOff(Boolean)
RIGHTCHILD: METHOD: toStringOnOff(Boolean)
###SNODE L: METHOD: toStringOnOff(Boolean)
###SNODE L: METHOD: toStringOnOff(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBoolean(int)
RIGHTCHILD: METHOD: toBoolean(int)
###SNODE L: METHOD: toBoolean(int)
###SNODE L: METHOD: toBoolean(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isTrue(Boolean)
RIGHTCHILD: METHOD: isTrue(Boolean)
###SNODE L: METHOD: isTrue(Boolean)
###SNODE L: METHOD: isTrue(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: or(boolean)
RIGHTCHILD: METHOD: or(boolean)
###SNODE L: METHOD: or(boolean)
###SNODE L: METHOD: or(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntegerObject(boolean,Integer,Integer)
RIGHTCHILD: METHOD: toIntegerObject(boolean,Integer,Integer)
###SNODE L: METHOD: toIntegerObject(boolean,Integer,Integer)
###SNODE L: METHOD: toIntegerObject(boolean,Integer,Integer)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: and(boolean)
RIGHTCHILD: METHOD: and(boolean)
###SNODE L: METHOD: and(boolean)
###SNODE L: METHOD: and(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(int)
RIGHTCHILD: METHOD: toBooleanObject(int)
###SNODE L: METHOD: toBooleanObject(int)
###SNODE L: METHOD: toBooleanObject(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: or(Boolean)
RIGHTCHILD: METHOD: or(Boolean)
###SNODE L: METHOD: or(Boolean)
###SNODE L: METHOD: or(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toInteger(boolean,int,int)
RIGHTCHILD: METHOD: toInteger(boolean,int,int)
###SNODE L: METHOD: toInteger(boolean,int,int)
###SNODE L: METHOD: toInteger(boolean,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: BooleanUtils()
RIGHTCHILD: CONSTRUCTOR: BooleanUtils()
###SNODE L: CONSTRUCTOR: BooleanUtils()
###SNODE L: CONSTRUCTOR: BooleanUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringTrueFalse(Boolean)
RIGHTCHILD: METHOD: toStringTrueFalse(Boolean)
###SNODE L: METHOD: toStringTrueFalse(Boolean)
###SNODE L: METHOD: toStringTrueFalse(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBoolean(Boolean)
RIGHTCHILD: METHOD: toBoolean(Boolean)
###SNODE L: METHOD: toBoolean(Boolean)
###SNODE L: METHOD: toBoolean(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotFalse(Boolean)
RIGHTCHILD: METHOD: isNotFalse(Boolean)
###SNODE L: METHOD: isNotFalse(Boolean)
###SNODE L: METHOD: isNotFalse(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: and(Boolean)
RIGHTCHILD: METHOD: and(Boolean)
###SNODE L: METHOD: and(Boolean)
###SNODE L: METHOD: and(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringYesNo(boolean)
RIGHTCHILD: METHOD: toStringYesNo(boolean)
###SNODE L: METHOD: toStringYesNo(boolean)
###SNODE L: METHOD: toStringYesNo(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(boolean,String,String)
RIGHTCHILD: METHOD: toString(boolean,String,String)
###SNODE L: METHOD: toString(boolean,String,String)
###SNODE L: METHOD: toString(boolean,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntegerObject(Boolean,Integer,Integer,Integer)
RIGHTCHILD: METHOD: toIntegerObject(Boolean,Integer,Integer,Integer)
###SNODE L: METHOD: toIntegerObject(Boolean,Integer,Integer,Integer)
###SNODE L: METHOD: toIntegerObject(Boolean,Integer,Integer,Integer)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringTrueFalse(boolean)
RIGHTCHILD: METHOD: toStringTrueFalse(boolean)
###SNODE L: METHOD: toStringTrueFalse(boolean)
###SNODE L: METHOD: toStringTrueFalse(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotTrue(Boolean)
RIGHTCHILD: METHOD: isNotTrue(Boolean)
###SNODE L: METHOD: isNotTrue(Boolean)
###SNODE L: METHOD: isNotTrue(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(String)
RIGHTCHILD: METHOD: toBooleanObject(String)
###SNODE L: METHOD: toBooleanObject(String)
###SNODE L: METHOD: toBooleanObject(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: negate(Boolean)
RIGHTCHILD: METHOD: negate(Boolean)
###SNODE L: METHOD: negate(Boolean)
###SNODE L: METHOD: negate(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringOnOff(boolean)
RIGHTCHILD: METHOD: toStringOnOff(boolean)
###SNODE L: METHOD: toStringOnOff(boolean)
###SNODE L: METHOD: toStringOnOff(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntegerObject(boolean)
RIGHTCHILD: METHOD: toIntegerObject(boolean)
###SNODE L: METHOD: toIntegerObject(boolean)
###SNODE L: METHOD: toIntegerObject(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(Integer)
RIGHTCHILD: METHOD: toBooleanObject(Integer)
###SNODE L: METHOD: toBooleanObject(Integer)
###SNODE L: METHOD: toBooleanObject(Integer)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: xor(boolean)
RIGHTCHILD: METHOD: xor(boolean)
###SNODE L: METHOD: xor(boolean)
###SNODE L: METHOD: xor(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntegerObject(Boolean)
RIGHTCHILD: METHOD: toIntegerObject(Boolean)
###SNODE L: METHOD: toIntegerObject(Boolean)
###SNODE L: METHOD: toIntegerObject(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBoolean(String,String,String)
RIGHTCHILD: METHOD: toBoolean(String,String,String)
###SNODE L: METHOD: toBoolean(String,String,String)
###SNODE L: METHOD: toBoolean(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toStringYesNo(Boolean)
RIGHTCHILD: METHOD: toStringYesNo(Boolean)
###SNODE L: METHOD: toStringYesNo(Boolean)
###SNODE L: METHOD: toStringYesNo(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBoolean(String)
RIGHTCHILD: METHOD: toBoolean(String)
###SNODE L: METHOD: toBoolean(String)
###SNODE L: METHOD: toBoolean(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanDefaultIfNull(Boolean,boolean)
RIGHTCHILD: METHOD: toBooleanDefaultIfNull(Boolean,boolean)
###SNODE L: METHOD: toBooleanDefaultIfNull(Boolean,boolean)
###SNODE L: METHOD: toBooleanDefaultIfNull(Boolean,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Boolean,String,String,String)
RIGHTCHILD: METHOD: toString(Boolean,String,String,String)
###SNODE L: METHOD: toString(Boolean,String,String,String)
###SNODE L: METHOD: toString(Boolean,String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toInteger(Boolean,int,int,int)
RIGHTCHILD: METHOD: toInteger(Boolean,int,int,int)
###SNODE L: METHOD: toInteger(Boolean,int,int,int)
###SNODE L: METHOD: toInteger(Boolean,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(Integer,Integer,Integer,Integer)
RIGHTCHILD: METHOD: toBooleanObject(Integer,Integer,Integer,Integer)
###SNODE L: METHOD: toBooleanObject(Integer,Integer,Integer,Integer)
###SNODE L: METHOD: toBooleanObject(Integer,Integer,Integer,Integer)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isFalse(Boolean)
RIGHTCHILD: METHOD: isFalse(Boolean)
###SNODE L: METHOD: isFalse(Boolean)
###SNODE L: METHOD: isFalse(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBoolean(Integer,Integer,Integer)
RIGHTCHILD: METHOD: toBoolean(Integer,Integer,Integer)
###SNODE L: METHOD: toBoolean(Integer,Integer,Integer)
###SNODE L: METHOD: toBoolean(Integer,Integer,Integer)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(int,int,int,int)
RIGHTCHILD: METHOD: toBooleanObject(int,int,int,int)
###SNODE L: METHOD: toBooleanObject(int,int,int,int)
###SNODE L: METHOD: toBooleanObject(int,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toInteger(boolean)
RIGHTCHILD: METHOD: toInteger(boolean)
###SNODE L: METHOD: toInteger(boolean)
###SNODE L: METHOD: toInteger(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toBooleanObject(String,String,String,String)
RIGHTCHILD: METHOD: toBooleanObject(String,String,String,String)
###SNODE L: METHOD: toBooleanObject(String,String,String,String)
###SNODE L: METHOD: toBooleanObject(String,String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: xor(Boolean)
RIGHTCHILD: METHOD: xor(Boolean)
###SNODE L: METHOD: xor(Boolean)
###SNODE L: METHOD: xor(Boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)381
-(0)-(0)-(1)382
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)383
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)383
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)384
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(2)296
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(1)298
-(2)-(8)-(12)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(0)-(2)-(1)297
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)386
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)387
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)386
-(2)-(8)-(12)-(0)-(0)-(0)-(3)385
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)388
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)389
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)388
-(2)-(8)-(12)-(0)-(0)-(0)-(3)385
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)-(2)296
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)391
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(2)296
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(1)298
-(2)-(8)-(12)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(0)-(2)-(1)297
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)291
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(1)298
-(2)-(8)-(12)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(0)-(2)-(1)297
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)395
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)395
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)396
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)395
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)394
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)395
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(0)-(3)394
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)395
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)396
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)395
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)397
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)395
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)397
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)398
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)395
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)397
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)394
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)395
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)397
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(0)-(3)394
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)395
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(2)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(3)397
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)398
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)399
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(2)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)400
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)382
-(2)-(8)-(12)-(0)-(0)-(1)-(1)401
-(2)-(8)-(12)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)382
-(2)-(8)-(12)-(0)-(0)-(2)-(1)402
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)400
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(2)296
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)382
-(2)-(8)-(12)-(0)-(0)-(1)-(1)401
-(2)-(8)-(12)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(0)-(2)-(0)382
-(2)-(8)-(12)-(0)-(0)-(2)-(1)402
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)399
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)395
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(0)-(2)395
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)399
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)395
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)397
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)397
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(2)296
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(0)-(2)395
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)400
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)395
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(0)-(2)395
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)400
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)168
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)394
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)395
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)168
-(2)-(8)-(7)-(3)397
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)397
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(2)296
-(2)-(8)-(12)-(0)-(0)-(1)394
-(2)-(8)-(12)-(0)-(0)-(2)395
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)404
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)408
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)409
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)410
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)411
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)412
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)413
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)414
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)415
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)238
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)417
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)418
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)412
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)413
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)412
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)413
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)417
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)418
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)419
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)408
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)409
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)421
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)422
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)423
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)424
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)417
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)418
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)414
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)415
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)414
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)415
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)425
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)410
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)411
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)427
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)428
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)429
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)430
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)421
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)422
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)431
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)432
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)425
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)414
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(1)415
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)433
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)434
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)435
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)436
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)423
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)426
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)424
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(0)432
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(0)-(1)421
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(0)432
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)-(1)-(1)422
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)393
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)438
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)439
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)440
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)438
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)439
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)440
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(0)-(3)438
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)297
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)439
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)298
-(2)-(8)-(12)-(0)-(2)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(3)440
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)441
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)393
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(1)297
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)390
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)438
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)439
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)438
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(0)-(1)439
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(3)438
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(0)-(3)439
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(0)-(4)442
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)443
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)404
-(2)-(8)-(12)-(0)-(0)-(3)444
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)445
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)446
-(2)-(8)-(12)-(0)-(0)-(3)447
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)448
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)449
-(2)-(8)-(12)-(0)-(0)-(3)450
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)438
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)439
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)440
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)440
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(0)-(2)296
-(2)-(8)-(12)-(0)-(0)-(1)438
-(2)-(8)-(12)-(0)-(0)-(2)439
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)443
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)404
-(2)-(8)-(12)-(0)-(0)-(3)444
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)445
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)446
-(2)-(8)-(12)-(0)-(0)-(3)447
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)448
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)385
-(2)-(8)-(12)-(0)-(0)-(3)449
-(2)-(8)-(12)-(0)-(0)-(3)450
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)385
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)438
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)439
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)385
-(2)-(8)-(12)-(0)-(0)-(1)438
-(2)-(8)-(12)-(0)-(0)-(2)439
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)451
-(2)-(8)-(4)102
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)102
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(1)220
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)112
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)451
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)453
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)284
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)451
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)453
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(1)298
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)454
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)455
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)456
-(2)-(8)-(4)102
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)102
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(1)220
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)308
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)456
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)453
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)284
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)456
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)453
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(1)298
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)454
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)455
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)457
-(2)-(8)-(4)102
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)458
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)102
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(1)220
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)308
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)458
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)458
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)458
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)457
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)176
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)176
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)265
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)452
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)453
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)284
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)220
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)457
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)453
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)297
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(1)298
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)454
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)455

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/builder (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/builder (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>Character encoding names required of every implementation of the Java platform.</p> <p>According to <a href="http://docs.oracle.com/javase/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>:</p> <p><cite>Every implementation of the Java platform is required to support the following character encodings. Consult the release documentation for your implementation to see if any other encodings are supported. </cite></p>
 * @see <a href="http://download.oracle.com/javase/1.3/docs/guide/intl/encoding.doc.html">JRE character encoding names</a>
 * @since 2.1
 * @version $Id$
 */
/** 
 * <p>ISO Latin Alphabet #1, also known as ISO-LATIN-1.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order accepted on input, big-endian used on output).</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, big-endian byte order.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, little-endian byte order.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Eight-bit Unicode Transformation Format.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
//
/** 
 * <p>Returns whether the named charset is supported.</p> <p>This is similar to <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported%28java.lang.String%29"> java.nio.charset.Charset.isSupported(String)</a> but handles more formats</p>
 * @param name  the name of the requested charset; may be either a canonical name or an alias, null returns false
 * @return {@code true} if the charset is available in the current Java virtual machine
 */
RIGHT COMMENTS
/* *//** 
 * <p>Character encoding names required of every implementation of the Java platform.</p> <p>According to <a href="http://docs.oracle.com/javase/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>:</p> <p><cite>Every implementation of the Java platform is required to support the following character encodings. Consult the release documentation for your implementation to see if any other encodings are supported. </cite></p>
 * @see <a href="http://download.oracle.com/javase/1.3/docs/guide/intl/encoding.doc.html">JRE character encoding names</a>
 * @since 2.1
 * @version $Id$
 */
/** 
 * <p>ISO Latin Alphabet #1, also known as ISO-LATIN-1.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order accepted on input, big-endian used on output).</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, big-endian byte order.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Sixteen-bit Unicode Transformation Format, little-endian byte order.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
/** 
 * <p>Eight-bit Unicode Transformation Format.</p> <p>Every implementation of the Java platform is required to support this character encoding.</p>
 */
//
/** 
 * <p>Returns whether the named charset is supported.</p> <p>This is similar to <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported%28java.lang.String%29"> java.nio.charset.Charset.isSupported(String)</a> but handles more formats</p>
 * @param name  the name of the requested charset; may be either a canonical name or an alias, null returns false
 * @return {@code true} if the charset is available in the current Java virtual machine
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5b3518e1
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5fd18419

#TRAVERSE
LEFTCHILD: CLASS: CharEncoding
RIGHTCHILD: CLASS: CharEncoding
##SNODE L: CLASS: CharEncoding
##SNODE L: CLASS: CharEncoding
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3a88f6fb
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@7b451bf4

##TRAVERSE
LEFTCHILD: FIELD: ISO_8859_1 : String
RIGHTCHILD: FIELD: ISO_8859_1 : String
###SNODE L: FIELD: ISO_8859_1 : String
###SNODE L: FIELD: ISO_8859_1 : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UTF_16 : String
RIGHTCHILD: FIELD: UTF_16 : String
###SNODE L: FIELD: UTF_16 : String
###SNODE L: FIELD: UTF_16 : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isSupported(String)
RIGHTCHILD: METHOD: isSupported(String)
###SNODE L: METHOD: isSupported(String)
###SNODE L: METHOD: isSupported(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UTF_8 : String
RIGHTCHILD: FIELD: UTF_8 : String
###SNODE L: FIELD: UTF_8 : String
###SNODE L: FIELD: UTF_8 : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharEncoding()
RIGHTCHILD: CONSTRUCTOR: CharEncoding()
###SNODE L: CONSTRUCTOR: CharEncoding()
###SNODE L: CONSTRUCTOR: CharEncoding()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UTF_16LE : String
RIGHTCHILD: FIELD: UTF_16LE : String
###SNODE L: FIELD: UTF_16LE : String
###SNODE L: FIELD: UTF_16LE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: US_ASCII : String
RIGHTCHILD: FIELD: US_ASCII : String
###SNODE L: FIELD: US_ASCII : String
###SNODE L: FIELD: US_ASCII : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UTF_16BE : String
RIGHTCHILD: FIELD: UTF_16BE : String
###SNODE L: FIELD: UTF_16BE : String
###SNODE L: FIELD: UTF_16BE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)459
-(0)-(0)-(0)-(1)460
-(0)-(0)-(1)461
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)459
-(0)-(0)-(0)-(1)460
-(0)-(0)-(1)462
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)463
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)464
-(2)-(8)-(3)-(2)465
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)466
-(2)-(8)-(3)-(2)467
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)468
-(2)-(8)-(3)-(2)469
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)470
-(2)-(8)-(3)-(2)471
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)472
-(2)-(8)-(3)-(2)473
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)474
-(2)-(8)-(3)-(2)475
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)476
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)150
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)150
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)461
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)476
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)150
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)462
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39

LEFT COMMENTS
/* *//** 
 * <p>A contiguous range of characters, optionally negated.</p> <p>Instances are immutable.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
//
//
/** 
 * Required for serialization support. Lang version 2.0. 
 * @see java.io.Serializable
 */
/** 
 * The first character, inclusive, in the range. 
 */
/** 
 * The last character, inclusive, in the range. 
 */
/** 
 * True if the range is everything except the characters specified. 
 */
/** 
 * Cached toString. 
 */
/** 
 * <p>Constructs a  {@code CharRange} over a set of characters,optionally negating the range.</p> <p>A negated range includes everything except that defined by the start and end characters.</p> <p>If start and end are in the wrong order, they are reversed. Thus  {@code a-e} is the same as {@code e-a}.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @param negated  true to express everything except the range
 */
/** 
 * <p>Constructs a  {@code CharRange} over a single character.</p>
 * @param ch  only character in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a negated  {@code CharRange} over a single character.</p>
 * @param ch  only character in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a  {@code CharRange} over a set of characters.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a negated  {@code CharRange} over a set of characters.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
//
//
/** 
 * <p>Gets the start character for this character range.</p>
 * @return the start char (inclusive)
 */
/** 
 * <p>Gets the end character for this character range.</p>
 * @return the end char (inclusive)
 */
/** 
 * <p>Is this  {@code CharRange} negated.</p><p>A negated range includes everything except that defined by the start and end characters.</p>
 * @return {@code true} if negated
 */
//
//
/** 
 * <p>Is the character specified contained in this range.</p>
 * @param ch  the character to check
 * @return {@code true} if this range contains the input character
 */
/** 
 * <p>Are all the characters of the passed in range contained in this range.</p>
 * @param range  the range to check against
 * @return {@code true} if this range entirely contains the input range
 * @throws IllegalArgumentException if {@code null} input
 */
//
//
/** 
 * <p>Compares two CharRange objects, returning true if they represent exactly the same range of characters defined in the same way.</p>
 * @param obj  the object to compare to
 * @return true if equal
 */
/** 
 * <p>Gets a hashCode compatible with the equals method.</p>
 * @return a suitable hashCode
 */
/** 
 * <p>Gets a string representation of the character range.</p>
 * @return string representation of this range
 */
//
//
/** 
 * <p>Returns an iterator which can be used to walk through the characters described by this range.</p> <p>#NotThreadSafe# the iterator is not thread-safe</p>
 * @return an iterator to the chars represented by this range
 * @since 2.5
 */
/** 
 * Character  {@link Iterator}. <p>#NotThreadSafe#</p>
 */
/** 
 * The current character 
 */
/** 
 * Construct a new iterator for the character range.
 * @param r The character range
 */
//
/** 
 * Prepare the next character in the range.
 */
/** 
 * Has the iterator not reached the end character yet?
 * @return {@code true} if the iterator has yet to reach the character date
 */
/** 
 * Return the next character in the iteration
 * @return {@code Character} for the next character
 */
/** 
 * Always throws UnsupportedOperationException.
 * @throws UnsupportedOperationException
 * @see java.util.Iterator#remove()
 */
RIGHT COMMENTS
/* *//** 
 * <p>A contiguous range of characters, optionally negated.</p> <p>Instances are immutable.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
//
//
/** 
 * Required for serialization support. Lang version 2.0. 
 * @see java.io.Serializable
 */
/** 
 * The first character, inclusive, in the range. 
 */
/** 
 * The last character, inclusive, in the range. 
 */
/** 
 * True if the range is everything except the characters specified. 
 */
/** 
 * Cached toString. 
 */
/** 
 * <p>Constructs a  {@code CharRange} over a set of characters,optionally negating the range.</p> <p>A negated range includes everything except that defined by the start and end characters.</p> <p>If start and end are in the wrong order, they are reversed. Thus  {@code a-e} is the same as {@code e-a}.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @param negated  true to express everything except the range
 */
/** 
 * <p>Constructs a  {@code CharRange} over a single character.</p>
 * @param ch  only character in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a negated  {@code CharRange} over a single character.</p>
 * @param ch  only character in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a  {@code CharRange} over a set of characters.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
/** 
 * <p>Constructs a negated  {@code CharRange} over a set of characters.</p>
 * @param start  first character, inclusive, in this range
 * @param end  last character, inclusive, in this range
 * @return the new CharRange object
 * @see CharRange#CharRange(char,char,boolean)
 * @since 2.5
 */
//
//
/** 
 * <p>Gets the start character for this character range.</p>
 * @return the start char (inclusive)
 */
/** 
 * <p>Gets the end character for this character range.</p>
 * @return the end char (inclusive)
 */
/** 
 * <p>Is this  {@code CharRange} negated.</p><p>A negated range includes everything except that defined by the start and end characters.</p>
 * @return {@code true} if negated
 */
//
//
/** 
 * <p>Is the character specified contained in this range.</p>
 * @param ch  the character to check
 * @return {@code true} if this range contains the input character
 */
/** 
 * <p>Are all the characters of the passed in range contained in this range.</p>
 * @param range  the range to check against
 * @return {@code true} if this range entirely contains the input range
 * @throws IllegalArgumentException if {@code null} input
 */
//
//
/** 
 * <p>Compares two CharRange objects, returning true if they represent exactly the same range of characters defined in the same way.</p>
 * @param obj  the object to compare to
 * @return true if equal
 */
/** 
 * <p>Gets a hashCode compatible with the equals method.</p>
 * @return a suitable hashCode
 */
/** 
 * <p>Gets a string representation of the character range.</p>
 * @return string representation of this range
 */
//
//
/** 
 * <p>Returns an iterator which can be used to walk through the characters described by this range.</p> <p>#NotThreadSafe# the iterator is not thread-safe</p>
 * @return an iterator to the chars represented by this range
 * @since 2.5
 */
/** 
 * Character  {@link Iterator}. <p>#NotThreadSafe#</p>
 */
/** 
 * The current character 
 */
/** 
 * Construct a new iterator for the character range.
 * @param r The character range
 */
//
/** 
 * Prepare the next character in the range.
 */
/** 
 * Has the iterator not reached the end character yet?
 * @return {@code true} if the iterator has yet to reach the character date
 */
/** 
 * Return the next character in the iteration
 * @return {@code Character} for the next character
 */
/** 
 * Always throws UnsupportedOperationException.
 * @throws UnsupportedOperationException
 * @see java.util.Iterator#remove()
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2ab8589a
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@21b744ec

#TRAVERSE
LEFTCHILD: CLASS: CharRange
RIGHTCHILD: CLASS: CharRange
##SNODE L: CLASS: CharRange
##SNODE L: CLASS: CharRange
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@697a92af
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@7ea3839e

##TRAVERSE
LEFTCHILD: CLASS: CharacterIterator
RIGHTCHILD: CLASS: CharacterIterator
###SNODE L: CLASS: CharacterIterator
###SNODE L: CLASS: CharacterIterator
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@16b76858
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@d3cce46

###TRAVERSE
LEFTCHILD: FIELD: current : char
RIGHTCHILD: FIELD: current : char
####SNODE L: FIELD: current : char
####SNODE L: FIELD: current : char
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: hasNext : boolean
RIGHTCHILD: FIELD: hasNext : boolean
####SNODE L: FIELD: hasNext : boolean
####SNODE L: FIELD: hasNext : boolean
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: prepareNext()
RIGHTCHILD: METHOD: prepareNext()
####SNODE L: METHOD: prepareNext()
####SNODE L: METHOD: prepareNext()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: CharacterIterator(CharRange)
RIGHTCHILD: CONSTRUCTOR: CharacterIterator(CharRange)
####SNODE L: CONSTRUCTOR: CharacterIterator(CharRange)
####SNODE L: CONSTRUCTOR: CharacterIterator(CharRange)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: hasNext()
RIGHTCHILD: METHOD: hasNext()
####SNODE L: METHOD: hasNext()
####SNODE L: METHOD: hasNext()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: next()
RIGHTCHILD: METHOD: next()
####SNODE L: METHOD: next()
####SNODE L: METHOD: next()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: remove()
RIGHTCHILD: METHOD: remove()
####SNODE L: METHOD: remove()
####SNODE L: METHOD: remove()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: range : CharRange
RIGHTCHILD: FIELD: range : CharRange
####SNODE L: FIELD: range : CharRange
####SNODE L: FIELD: range : CharRange
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: isIn(char,char)
RIGHTCHILD: METHOD: isIn(char,char)
###SNODE L: METHOD: isIn(char,char)
###SNODE L: METHOD: isIn(char,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: serialVersionUID : long
RIGHTCHILD: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode()
RIGHTCHILD: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: is(char)
RIGHTCHILD: METHOD: is(char)
###SNODE L: METHOD: is(char)
###SNODE L: METHOD: is(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString()
RIGHTCHILD: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: negated : boolean
RIGHTCHILD: FIELD: negated : boolean
###SNODE L: FIELD: negated : boolean
###SNODE L: FIELD: negated : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getEnd()
RIGHTCHILD: METHOD: getEnd()
###SNODE L: METHOD: getEnd()
###SNODE L: METHOD: getEnd()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(char)
RIGHTCHILD: METHOD: contains(char)
###SNODE L: METHOD: contains(char)
###SNODE L: METHOD: contains(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(CharRange)
RIGHTCHILD: METHOD: contains(CharRange)
###SNODE L: METHOD: contains(CharRange)
###SNODE L: METHOD: contains(CharRange)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(Object)
RIGHTCHILD: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: end : char
RIGHTCHILD: FIELD: end : char
###SNODE L: FIELD: end : char
###SNODE L: FIELD: end : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNot(char)
RIGHTCHILD: METHOD: isNot(char)
###SNODE L: METHOD: isNot(char)
###SNODE L: METHOD: isNot(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: iterator()
RIGHTCHILD: METHOD: iterator()
###SNODE L: METHOD: iterator()
###SNODE L: METHOD: iterator()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: iToString : String
RIGHTCHILD: FIELD: iToString : String
###SNODE L: FIELD: iToString : String
###SNODE L: FIELD: iToString : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharRange(char,char,boolean)
RIGHTCHILD: CONSTRUCTOR: CharRange(char,char,boolean)
###SNODE L: CONSTRUCTOR: CharRange(char,char,boolean)
###SNODE L: CONSTRUCTOR: CharRange(char,char,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getStart()
RIGHTCHILD: METHOD: getStart()
###SNODE L: METHOD: getStart()
###SNODE L: METHOD: getStart()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotIn(char,char)
RIGHTCHILD: METHOD: isNotIn(char,char)
###SNODE L: METHOD: isNotIn(char,char)
###SNODE L: METHOD: isNotIn(char,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: start : char
RIGHTCHILD: FIELD: start : char
###SNODE L: FIELD: start : char
###SNODE L: FIELD: start : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNegated()
RIGHTCHILD: METHOD: isNegated()
###SNODE L: METHOD: isNegated()
###SNODE L: METHOD: isNegated()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)478
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)479
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)480
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)23
-(2)-(2)481
-(2)-(6)59
-(2)-(6)-(0)24
-(2)-(6)-(0)-(1)482
-(2)-(6)-(1)24
-(2)-(6)-(1)-(1)169
-(2)-(6)24
-(2)-(6)-(1)478
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)26
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)27
-(2)-(8)-(3)-(2)483
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)484
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)342
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)485
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)486
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)487
-(2)-(8)101
-(2)-(8)-(1)21
-(2)-(8)-(2)481
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)485
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)488
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)488
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(1)485
-(2)-(8)-(12)-(0)-(0)-(1)485
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)490
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)481
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)481
-(2)-(8)-(12)-(0)-(0)-(4)491
-(2)-(8)-(12)-(0)-(0)-(4)491
-(2)-(8)-(12)-(0)-(0)-(4)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)492
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)481
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)481
-(2)-(8)-(12)-(0)-(0)-(4)491
-(2)-(8)-(12)-(0)-(0)-(4)491
-(2)-(8)-(12)-(0)-(0)-(4)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)493
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)481
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)342
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)481
-(2)-(8)-(12)-(0)-(0)-(4)484
-(2)-(8)-(12)-(0)-(0)-(4)342
-(2)-(8)-(12)-(0)-(0)-(4)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)494
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)481
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)342
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)481
-(2)-(8)-(12)-(0)-(0)-(4)484
-(2)-(8)-(12)-(0)-(0)-(4)342
-(2)-(8)-(12)-(0)-(0)-(4)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)495
-(2)-(8)-(4)170
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(1)484
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)496
-(2)-(8)-(4)170
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(1)342
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)497
-(2)-(8)-(4)102
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)485
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)342
-(2)-(8)-(12)-(0)-(0)-(1)485
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)481
-(2)-(8)-(7)-(3)498
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)498
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)499
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)485
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)498
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)485
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)498
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)498
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(1)342
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)498
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)498
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)342
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)498
-(2)-(8)-(12)-(0)-(0)-(1)485
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)276
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)498
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)484
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)498
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)342
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)481
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)481
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)481
-(2)-(8)-(12)-(0)-(2)-(2)-(1)500
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)501
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)-(0)501
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)-(1)342
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)485
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)501
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)485
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)502
-(2)-(8)-(12)-(0)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(0)-(0)-(2)153
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)503
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(1)342
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)83
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)485
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)86
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)487
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(4)425
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)497
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)505
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)506
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)342
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)487
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)88
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)487
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)507
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)479
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)169
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)508
-(2)-(8)-(12)-(0)-(0)-(4)489
-(2)-(8)185
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)508
-(2)-(8)-(6)59
-(2)-(8)-(6)-(0)24
-(2)-(8)-(6)-(0)-(1)479
-(2)-(8)-(6)-(1)24
-(2)-(8)-(6)-(1)-(1)169
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(2)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)509
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)24
-(2)-(8)-(8)-(2)-(1)481
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)498
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(2)102
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)510
-(2)-(8)-(8)101
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(2)508
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)481
-(2)-(8)-(8)-(7)-(3)511
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(0)-(1)511
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(0)-(1)32
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(0)-(1)485
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)484
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)342
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)276
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)74
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)170
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(1)342
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)217
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(8)-(12)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)498
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)484
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(2)512
-(2)-(8)-(8)-(4)91
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(0)-(1)485
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)276
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)77
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)80
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)243
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)217
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(1)484
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)77
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)80
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)-(1)342
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(1)-(1)276
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)74
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(0)170
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(0)498
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(1)342
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)217
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)74
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(0)170
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)-(1)217
-(2)-(8)-(8)-(12)-(0)-(2)77
-(2)-(8)-(8)-(12)-(0)-(2)-(0)180
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(1)-(0)498
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(1)-(1)342
-(2)-(8)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)74
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)170
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)231
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)-(0)-(0)509
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(1)-(0)-(1)217
-(2)-(8)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)39
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)510
-(2)-(8)-(8)-(4)102
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)89
-(2)-(8)-(8)-(12)-(0)-(0)510
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)513
-(2)-(8)-(8)-(4)24
-(2)-(8)-(8)-(4)-(1)169
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)80
-(2)-(8)-(8)-(12)-(0)-(0)-(0)510
-(2)-(8)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)480
-(2)-(8)-(8)-(12)-(0)64
-(2)-(8)-(8)-(12)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(1)170
-(2)-(8)-(8)-(12)-(0)-(2)29
-(2)-(8)-(8)-(12)-(0)-(2)-(0)514
-(2)-(8)-(8)-(12)-(0)-(2)-(2)509
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(2)512
-(2)-(8)-(8)-(12)-(0)89
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)169
-(2)-(8)-(8)-(12)-(0)-(0)-(2)289
-(2)-(8)-(8)-(12)-(0)-(0)-(3)514
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)322
-(2)-(8)-(8)-(4)91
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)136
-(2)-(8)-(8)-(12)-(0)-(0)84
-(2)-(8)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(1)515

LEFT COMMENTS
/* *//** 
 * <p>Operations on  {@link java.lang.CharSequence} that are{@code null} safe.</p>
 * @see java.lang.CharSequence
 * @since 3.0
 * @version $Id$
 */
/** 
 * <p> {@code CharSequenceUtils} instances should NOT be constructed instandard programming. </p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Returns a new  {@code CharSequence} that is a subsequence of thissequence starting with the  {@code char} value at the specified index.</p><p>This provides the  {@code CharSequence} equivalent to {@link String#substring(int)}. The length (in  {@code char}) of the returned sequence is  {@code length() - start}, so if  {@code start == end} then an empty sequence is returned.</p>
 * @param cs  the specified subsequence, null returns null
 * @param start  the start index, inclusive, valid
 * @return a new subsequence, may be null
 * @throws IndexOutOfBoundsException if {@code start} is negative or if {@code start} is greater than {@code length()}
 */
//
/** 
 * <p>Finds the first index in the  {@code CharSequence} that matches thespecified character.</p>
 * @param cs  the {@code CharSequence} to be processed, not null
 * @param searchChar  the char to be searched for
 * @param start  the start index, negative starts at the string start
 * @return the index where the search char was found, -1 if not found
 */
/** 
 * Used by the indexOf(CharSequence methods) as a green implementation of indexOf.
 * @param cs the {@code CharSequence} to be processed
 * @param searchChar the {@code CharSequence} to be searched for
 * @param start the start index
 * @return the index where the search sequence was found
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Finds the last index in the  {@code CharSequence} that matches thespecified character.</p>
 * @param cs  the {@code CharSequence} to be processed
 * @param searchChar  the char to be searched for
 * @param start  the start index, negative returns -1, beyond length starts at end
 * @return the index where the search char was found, -1 if not found
 */
/** 
 * Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
 * @param cs the {@code CharSequence} to be processed
 * @param searchChar the {@code CharSequence} to be searched for
 * @param start the start index
 * @return the index where the search sequence was found
 */
//
//
//
//
//
//
//
//
//
/** 
 * Green implementation of toCharArray.
 * @param cs the {@code CharSequence} to be processed
 * @return the resulting char array
 */
/** 
 * Green implementation of regionMatches.
 * @param cs the {@code CharSequence} to be processed
 * @param ignoreCase whether or not to be case insensitive
 * @param thisStart the index to start on the {@code cs} CharSequence
 * @param substring the {@code CharSequence} to be looked for
 * @param start the index to start on the {@code substring} CharSequence
 * @param length character length of the region
 * @return whether the region matched
 */
//
RIGHT COMMENTS
/* *//** 
 * <p>Operations on  {@link java.lang.CharSequence} that are{@code null} safe.</p>
 * @see java.lang.CharSequence
 * @since 3.0
 * @version $Id$
 */
/** 
 * <p> {@code CharSequenceUtils} instances should NOT be constructed instandard programming. </p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Returns a new  {@code CharSequence} that is a subsequence of thissequence starting with the  {@code char} value at the specified index.</p><p>This provides the  {@code CharSequence} equivalent to {@link String#substring(int)}. The length (in  {@code char}) of the returned sequence is  {@code length() - start}, so if  {@code start == end} then an empty sequence is returned.</p>
 * @param cs  the specified subsequence, null returns null
 * @param start  the start index, inclusive, valid
 * @return a new subsequence, may be null
 * @throws IndexOutOfBoundsException if {@code start} is negative or if {@code start} is greater than {@code length()}
 */
//
/** 
 * <p>Finds the first index in the  {@code CharSequence} that matches thespecified character.</p>
 * @param cs  the {@code CharSequence} to be processed, not null
 * @param searchChar  the char to be searched for
 * @param start  the start index, negative starts at the string start
 * @return the index where the search char was found, -1 if not found
 */
/** 
 * Used by the indexOf(CharSequence methods) as a green implementation of indexOf.
 * @param cs the {@code CharSequence} to be processed
 * @param searchChar the {@code CharSequence} to be searched for
 * @param start the start index
 * @return the index where the search sequence was found
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Finds the last index in the  {@code CharSequence} that matches thespecified character.</p>
 * @param cs  the {@code CharSequence} to be processed
 * @param searchChar  the char to be searched for
 * @param start  the start index, negative returns -1, beyond length starts at end
 * @return the index where the search char was found, -1 if not found
 */
/** 
 * Used by the lastIndexOf(CharSequence methods) as a green implementation of lastIndexOf
 * @param cs the {@code CharSequence} to be processed
 * @param searchChar the {@code CharSequence} to be searched for
 * @param start the start index
 * @return the index where the search sequence was found
 */
//
//
//
//
//
//
//
//
//
/** 
 * Green implementation of toCharArray.
 * @param cs the {@code CharSequence} to be processed
 * @return the resulting char array
 */
/** 
 * Green implementation of regionMatches.
 * @param cs the {@code CharSequence} to be processed
 * @param ignoreCase whether or not to be case insensitive
 * @param thisStart the index to start on the {@code cs} CharSequence
 * @param substring the {@code CharSequence} to be looked for
 * @param start the index to start on the {@code substring} CharSequence
 * @param length character length of the region
 * @return whether the region matched
 */
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@34cf0e80
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@38ef1a0a

#TRAVERSE
LEFTCHILD: CLASS: CharSequenceUtils
RIGHTCHILD: CLASS: CharSequenceUtils
##SNODE L: CLASS: CharSequenceUtils
##SNODE L: CLASS: CharSequenceUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@56f9de3b
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6728370a

##TRAVERSE
LEFTCHILD: METHOD: subSequence(CharSequence,int)
RIGHTCHILD: METHOD: subSequence(CharSequence,int)
###SNODE L: METHOD: subSequence(CharSequence,int)
###SNODE L: METHOD: subSequence(CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharSequenceUtils()
RIGHTCHILD: CONSTRUCTOR: CharSequenceUtils()
###SNODE L: CONSTRUCTOR: CharSequenceUtils()
###SNODE L: CONSTRUCTOR: CharSequenceUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,int,int)
RIGHTCHILD: METHOD: indexOf(CharSequence,int,int)
###SNODE L: METHOD: indexOf(CharSequence,int,int)
###SNODE L: METHOD: indexOf(CharSequence,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,int,int)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: regionMatches(CharSequence,boolean,int,CharSequence,int,int)
RIGHTCHILD: METHOD: regionMatches(CharSequence,boolean,int,CharSequence,int,int)
###SNODE L: METHOD: regionMatches(CharSequence,boolean,int,CharSequence,int,int)
###SNODE L: METHOD: regionMatches(CharSequence,boolean,int,CharSequence,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toCharArray(CharSequence)
RIGHTCHILD: METHOD: toCharArray(CharSequence)
###SNODE L: METHOD: toCharArray(CharSequence)
###SNODE L: METHOD: toCharArray(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)516
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)516
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)518
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)519
-(2)-(8)-(12)-(0)-(0)-(2)-(2)518
-(2)-(8)-(12)-(0)-(0)-(2)-(3)484
-(2)-(8)-(12)-(0)-(0)-(2)-(3)33
-(2)-(8)-(12)-(0)-(0)-(2)-(3)-(0)519
-(2)-(8)-(12)-(0)-(0)-(2)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)519
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)520
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(0)218
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)217
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)520
-(2)-(8)-(12)-(0)-(0)-(3)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)519
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)218
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)217
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)521
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)521
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)277
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)341
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)520
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(0)218
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)217
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)520
-(2)-(8)-(12)-(0)-(0)-(3)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)522
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)519
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)522
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(2)-(0)-(3)-(0)-(0)-(1)-(3)178
-(2)-(8)-(12)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)523
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)524
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)525
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)526
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)116
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(0)-(1)98
-(2)-(8)-(12)-(0)-(0)-(1)-(0)526
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)519
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)524
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)525
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)74
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)116
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)527
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)525
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)528
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)529
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)270
-(2)-(8)-(12)-(0)-(2)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)269
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)529
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)530
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)-(0)527
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)531
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)526
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)181
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)-(0)528
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)530
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)531
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)112
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)524
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(2)532
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(3)530
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(2)532
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(3)531
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)-(0)169
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)-(2)533
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)-(3)530
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(0)169
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(2)533
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(3)531
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(0)32

LEFT COMMENTS
/* *//** 
 * <p>A set of characters.</p> <p>Instances are immutable, but instances of subclasses may not be.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * Required for serialization support. Lang version 2.0. 
 * @see java.io.Serializable
 */
/** 
 * A CharSet defining no characters. 
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "a-zA-Z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "a-z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "A-Z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "0-9".
 * @since 2.0
 */
/** 
 * A Map of the common cases used in the factory. Subclasses can add more common patterns if desired
 * @since 2.0
 */
/** 
 * The set of CharRange objects. 
 */
//
/** 
 * <p>Factory method to create a new CharSet using a special syntax.</p> <ul> <li> {@code null} or empty string ("")- set containing no characters</li> <li>Single character, such as "a" - set containing just that character</li> <li>Multi character, such as "a-e" - set containing characters from one character to the other</li> <li>Negated, such as "^a" or "^a-e" - set containing all characters except those defined</li> <li>Combinations, such as "abe-g" - set containing all the characters from the individual sets</li> </ul> <p>The matching order is:</p> <ol> <li>Negated multi character range, such as "^a-e" <li>Ordinary multi character range, such as "a-e" <li>Negated single character, such as "^a" <li>Ordinary single character, such as "a" </ol> <p>Matching works left to right. Once a match is found the search starts again from the next character.</p> <p>If the same range is defined twice using the same syntax, only one range will be kept. Thus, "a-ca-c" creates only one range of "a-c".</p> <p>If the start and end of a range are in the wrong order, they are reversed. Thus "a-e" is the same as "e-a". As a result, "a-ee-a" would create only one range, as the "a-e" and "e-a" are the same.</p> <p>The set of characters represented is the union of the specified ranges.</p> <p>All CharSet objects returned by this method will be immutable.</p>
 * @param setStrs  Strings to merge into the set, may be null
 * @return a CharSet instance
 * @since 2.4
 */
//
/** 
 * <p>Constructs a new CharSet using the set syntax. Each string is merged in with the set.</p>
 * @param set  Strings to merge into the initial set
 * @throws NullPointerException if set is {@code null}
 */
//
/** 
 * <p>Add a set definition string to the  {@code CharSet}.</p>
 * @param str  set definition string
 */
//
//
//
//
//
/** 
 * <p>Gets the internal set as an array of CharRange objects.</p>
 * @return an array of immutable CharRange objects
 * @since 2.0
 */
//
//
/* *///
/** 
 * <p>Does the  {@code CharSet} contain the specifiedcharacter  {@code ch}.</p>
 * @param ch  the character to check for
 * @return {@code true} if the set contains the characters
 */
//
//
/** 
 * <p>Compares two  {@code CharSet} objects, returning true if they representexactly the same set of characters defined in the same way.</p> <p>The two sets  {@code abc} and {@code a-c} are <i>not</i>equal according to this method.</p>
 * @param obj  the object to compare to
 * @return true if equal
 * @since 2.0
 */
/** 
 * <p>Gets a hash code compatible with the equals method.</p>
 * @return a suitable hash code
 * @since 2.0
 */
/** 
 * <p>Gets a string representation of the set.</p>
 * @return string representation of the set
 */
RIGHT COMMENTS
/* *//** 
 * <p>A set of characters.</p> <p>Instances are immutable, but instances of subclasses may not be.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * Required for serialization support. Lang version 2.0. 
 * @see java.io.Serializable
 */
/** 
 * A CharSet defining no characters. 
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "a-zA-Z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "a-z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "A-Z".
 * @since 2.0
 */
/** 
 * A CharSet defining ASCII alphabetic characters "0-9".
 * @since 2.0
 */
/** 
 * A Map of the common cases used in the factory. Subclasses can add more common patterns if desired
 * @since 2.0
 */
/** 
 * The set of CharRange objects. 
 */
//
/** 
 * <p>Factory method to create a new CharSet using a special syntax.</p> <ul> <li> {@code null} or empty string ("")- set containing no characters</li> <li>Single character, such as "a" - set containing just that character</li> <li>Multi character, such as "a-e" - set containing characters from one character to the other</li> <li>Negated, such as "^a" or "^a-e" - set containing all characters except those defined</li> <li>Combinations, such as "abe-g" - set containing all the characters from the individual sets</li> </ul> <p>The matching order is:</p> <ol> <li>Negated multi character range, such as "^a-e" <li>Ordinary multi character range, such as "a-e" <li>Negated single character, such as "^a" <li>Ordinary single character, such as "a" </ol> <p>Matching works left to right. Once a match is found the search starts again from the next character.</p> <p>If the same range is defined twice using the same syntax, only one range will be kept. Thus, "a-ca-c" creates only one range of "a-c".</p> <p>If the start and end of a range are in the wrong order, they are reversed. Thus "a-e" is the same as "e-a". As a result, "a-ee-a" would create only one range, as the "a-e" and "e-a" are the same.</p> <p>The set of characters represented is the union of the specified ranges.</p> <p>All CharSet objects returned by this method will be immutable.</p>
 * @param setStrs  Strings to merge into the set, may be null
 * @return a CharSet instance
 * @since 2.4
 */
//
/** 
 * <p>Constructs a new CharSet using the set syntax. Each string is merged in with the set.</p>
 * @param set  Strings to merge into the initial set
 * @throws NullPointerException if set is {@code null}
 */
//
/** 
 * <p>Add a set definition string to the  {@code CharSet}.</p>
 * @param str  set definition string
 */
//
//
//
//
//
/** 
 * <p>Gets the internal set as an array of CharRange objects.</p>
 * @return an array of immutable CharRange objects
 * @since 2.0
 */
//
//
/* *///
/** 
 * <p>Does the  {@code CharSet} contain the specifiedcharacter  {@code ch}.</p>
 * @param ch  the character to check for
 * @return {@code true} if the set contains the characters
 */
//
//
/** 
 * <p>Compares two  {@code CharSet} objects, returning true if they representexactly the same set of characters defined in the same way.</p> <p>The two sets  {@code abc} and {@code a-c} are <i>not</i>equal according to this method.</p>
 * @param obj  the object to compare to
 * @return true if equal
 * @since 2.0
 */
/** 
 * <p>Gets a hash code compatible with the equals method.</p>
 * @return a suitable hash code
 * @since 2.0
 */
/** 
 * <p>Gets a string representation of the set.</p>
 * @return string representation of the set
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@d1f23a0
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2976ca51

#TRAVERSE
LEFTCHILD: CLASS: CharSet
RIGHTCHILD: CLASS: CharSet
##SNODE L: CLASS: CharSet
##SNODE L: CLASS: CharSet
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6b091a92
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6996bbc4

##TRAVERSE
LEFTCHILD: METHOD: add(String)
RIGHTCHILD: METHOD: add(String)
###SNODE L: METHOD: add(String)
###SNODE L: METHOD: add(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getCharRanges()
RIGHTCHILD: METHOD: getCharRanges()
###SNODE L: METHOD: getCharRanges()
###SNODE L: METHOD: getCharRanges()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: serialVersionUID : long
RIGHTCHILD: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode()
RIGHTCHILD: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString()
RIGHTCHILD: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ASCII_ALPHA_LOWER : CharSet
RIGHTCHILD: FIELD: ASCII_ALPHA_LOWER : CharSet
###SNODE L: FIELD: ASCII_ALPHA_LOWER : CharSet
###SNODE L: FIELD: ASCII_ALPHA_LOWER : CharSet
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ASCII_ALPHA_UPPER : CharSet
RIGHTCHILD: FIELD: ASCII_ALPHA_UPPER : CharSet
###SNODE L: FIELD: ASCII_ALPHA_UPPER : CharSet
###SNODE L: FIELD: ASCII_ALPHA_UPPER : CharSet
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharSet(String)
RIGHTCHILD: CONSTRUCTOR: CharSet(String)
###SNODE L: CONSTRUCTOR: CharSet(String)
###SNODE L: CONSTRUCTOR: CharSet(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(char)
RIGHTCHILD: METHOD: contains(char)
###SNODE L: METHOD: contains(char)
###SNODE L: METHOD: contains(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ASCII_NUMERIC : CharSet
RIGHTCHILD: FIELD: ASCII_NUMERIC : CharSet
###SNODE L: FIELD: ASCII_NUMERIC : CharSet
###SNODE L: FIELD: ASCII_NUMERIC : CharSet
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: set : Set<CharRange>
RIGHTCHILD: FIELD: set : Set<CharRange>
###SNODE L: FIELD: set : Set<CharRange>
###SNODE L: FIELD: set : Set<CharRange>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(Object)
RIGHTCHILD: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ASCII_ALPHA : CharSet
RIGHTCHILD: FIELD: ASCII_ALPHA : CharSet
###SNODE L: FIELD: ASCII_ALPHA : CharSet
###SNODE L: FIELD: ASCII_ALPHA : CharSet
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getInstance(String)
RIGHTCHILD: METHOD: getInstance(String)
###SNODE L: METHOD: getInstance(String)
###SNODE L: METHOD: getInstance(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: COMMON : Map<String,CharSet>
RIGHTCHILD: FIELD: COMMON : Map<String,CharSet>
###SNODE L: FIELD: COMMON : Map<String,CharSet>
###SNODE L: FIELD: COMMON : Map<String,CharSet>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY : CharSet
RIGHTCHILD: FIELD: EMPTY : CharSet
###SNODE L: FIELD: EMPTY : CharSet
###SNODE L: FIELD: EMPTY : CharSet
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)478
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)534
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)189
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)535
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)536
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)537
-(2)-(6)24
-(2)-(6)-(1)478
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)26
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)27
-(2)-(8)-(3)-(2)538
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)539
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)537
-(2)-(8)-(3)-(2)-(4)74
-(2)-(8)-(3)-(2)-(4)-(0)24
-(2)-(8)-(3)-(2)-(4)-(0)-(1)55
-(2)-(8)-(3)-(2)-(4)-(1)63
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)540
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)537
-(2)-(8)-(3)-(2)-(4)541
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)542
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)537
-(2)-(8)-(3)-(2)-(4)543
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)544
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)537
-(2)-(8)-(3)-(2)-(4)545
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)546
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)537
-(2)-(8)-(3)-(2)-(4)547
-(2)-(8)30
-(2)-(8)-(1)54
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)190
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)537
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)548
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)534
-(2)-(8)-(3)-(2)-(2)549
-(2)-(8)-(3)-(2)-(3)84
-(2)-(8)-(3)-(2)-(3)-(3)59
-(2)-(8)-(3)-(2)-(3)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(3)-(0)-(1)189
-(2)-(8)-(3)-(2)-(3)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(3)-(1)-(1)55
-(2)-(8)-(3)-(2)-(3)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(3)-(1)-(1)537
-(2)-(8)51
-(2)-(8)-(1)22
-(2)-(8)-(2)50
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)63
-(2)-(8)-(2)-(0)-(0)-(3)539
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)81
-(2)-(8)-(2)-(0)-(0)-(3)539
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)541
-(2)-(8)-(2)-(0)-(0)-(3)540
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)550
-(2)-(8)-(2)-(0)-(0)-(3)540
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)543
-(2)-(8)-(2)-(0)-(0)-(3)542
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)545
-(2)-(8)-(2)-(0)-(0)-(3)544
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)548
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)547
-(2)-(8)-(2)-(0)-(0)-(3)546
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)536
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)481
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)320
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)534
-(2)-(8)-(3)-(2)-(2)551
-(2)-(8)-(3)-(2)-(3)84
-(2)-(8)-(3)-(2)-(3)-(3)59
-(2)-(8)-(3)-(2)-(3)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(3)-(0)-(1)535
-(2)-(8)-(3)-(2)-(3)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(3)-(1)-(1)481
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)552
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)537
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)553
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)553
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)553
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)554
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)548
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)553
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)554
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)554
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)537
-(2)-(8)-(12)-(0)-(0)-(4)553
-(2)-(8)101
-(2)-(8)-(1)54
-(2)-(8)-(2)537
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)320
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)320
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)90
-(2)-(8)-(1)54
-(2)-(8)-(2)307
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)557
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)555
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)556
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)557
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(3)556
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)505
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)506
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)481
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)494
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(3)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(1)-(0)-(2)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)557
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(1)506
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(0)481
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(2)493
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(3)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(3)-(3)-(3)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(0)557
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(0)-(3)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)505
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(0)481
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(2)492
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)-(3)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(3)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(0)481
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(2)490
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(3)-(3)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(1)217
-(2)-(8)90
-(2)-(8)-(2)558
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)481
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)481
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)320
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)481
-(2)-(8)-(12)-(0)-(0)-(3)498
-(2)-(8)-(12)-(0)-(1)320
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)498
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)537
-(2)-(8)-(12)-(0)-(2)-(2)-(1)500
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)501
-(2)-(8)-(12)-(0)-(0)-(3)-(1)320
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)560
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)320
-(2)-(8)-(12)-(0)-(0)-(1)-(2)130
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)320
-(2)-(8)-(12)-(0)-(0)-(2)88

LEFT COMMENTS
/* *//** 
 * <p>Operations on  {@code CharSet} instances.</p><p>This class handles  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @see CharSet
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>CharSetUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code CharSetUtils.evaluateSet(null);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Squeezes any repetitions of a character that is mentioned in the supplied set.</p> <pre> CharSetUtils.squeeze(null, *)        = null CharSetUtils.squeeze("", *)          = "" CharSetUtils.squeeze(*, null)        =  CharSetUtils.squeeze(*, "")          =  CharSetUtils.squeeze("hello", "k-p") = "helo" CharSetUtils.squeeze("hello", "a-e") = "hello" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  the string to squeeze, may be null
 * @param set  the character set to use for manipulation, may be null
 * @return the modified String, {@code null} if null string input
 */
//
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and identifies whether any of the characters are present in the specified string.</p> <pre> CharSetUtils.containsAny(null, *)        = false CharSetUtils.containsAny("", *)          = false CharSetUtils.containsAny(*, null)        = false CharSetUtils.containsAny(*, "")          = false CharSetUtils.containsAny("hello", "k-p") = true CharSetUtils.containsAny("hello", "a-d") = false </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to look for characters in, may be null
 * @param set  String[] set of characters to identify, may be null
 * @return whether or not the characters in the set are in the primary string
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and returns the number of characters present in the specified string.</p> <pre> CharSetUtils.count(null, *)        = 0 CharSetUtils.count("", *)          = 0 CharSetUtils.count(*, null)        = 0 CharSetUtils.count(*, "")          = 0 CharSetUtils.count("hello", "k-p") = 3 CharSetUtils.count("hello", "a-e") = 1 </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to count characters in, may be null
 * @param set  String[] set of characters to count, may be null
 * @return the character count, zero if null string input
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and keeps any of characters present in the specified string.</p> <pre> CharSetUtils.keep(null, *)        = null CharSetUtils.keep("", *)          = "" CharSetUtils.keep(*, null)        = "" CharSetUtils.keep(*, "")          = "" CharSetUtils.keep("hello", "hl")  = "hll" CharSetUtils.keep("hello", "le")  = "ell" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to keep characters from, may be null
 * @param set  String[] set of characters to keep, may be null
 * @return the modified String, {@code null} if null string input
 * @since 2.0
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and deletes any of characters present in the specified string.</p> <pre> CharSetUtils.delete(null, *)        = null CharSetUtils.delete("", *)          = "" CharSetUtils.delete(*, null)        =  CharSetUtils.delete(*, "")          =  CharSetUtils.delete("hello", "hl")  = "eo" CharSetUtils.delete("hello", "le")  = "ho" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to delete characters from, may be null
 * @param set  String[] set of characters to delete, may be null
 * @return the modified String, {@code null} if null string input
 */
//
/** 
 * Implementation of delete and keep
 * @param str String to modify characters within
 * @param set String[] set of characters to modify
 * @param expect whether to evaluate on match, or non-match
 * @return the modified String, not null
 */
/** 
 * Determines whether or not all the Strings in an array are  empty or not.
 * @param strings String[] whose elements are being checked for emptiness
 * @return whether or not the String is empty
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on  {@code CharSet} instances.</p><p>This class handles  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @see CharSet
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>CharSetUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code CharSetUtils.evaluateSet(null);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Squeezes any repetitions of a character that is mentioned in the supplied set.</p> <pre> CharSetUtils.squeeze(null, *)        = null CharSetUtils.squeeze("", *)          = "" CharSetUtils.squeeze(*, null)        =  CharSetUtils.squeeze(*, "")          =  CharSetUtils.squeeze("hello", "k-p") = "helo" CharSetUtils.squeeze("hello", "a-e") = "hello" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  the string to squeeze, may be null
 * @param set  the character set to use for manipulation, may be null
 * @return the modified String, {@code null} if null string input
 */
//
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and identifies whether any of the characters are present in the specified string.</p> <pre> CharSetUtils.containsAny(null, *)        = false CharSetUtils.containsAny("", *)          = false CharSetUtils.containsAny(*, null)        = false CharSetUtils.containsAny(*, "")          = false CharSetUtils.containsAny("hello", "k-p") = true CharSetUtils.containsAny("hello", "a-d") = false </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to look for characters in, may be null
 * @param set  String[] set of characters to identify, may be null
 * @return whether or not the characters in the set are in the primary string
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and returns the number of characters present in the specified string.</p> <pre> CharSetUtils.count(null, *)        = 0 CharSetUtils.count("", *)          = 0 CharSetUtils.count(*, null)        = 0 CharSetUtils.count(*, "")          = 0 CharSetUtils.count("hello", "k-p") = 3 CharSetUtils.count("hello", "a-e") = 1 </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to count characters in, may be null
 * @param set  String[] set of characters to count, may be null
 * @return the character count, zero if null string input
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and keeps any of characters present in the specified string.</p> <pre> CharSetUtils.keep(null, *)        = null CharSetUtils.keep("", *)          = "" CharSetUtils.keep(*, null)        = "" CharSetUtils.keep(*, "")          = "" CharSetUtils.keep("hello", "hl")  = "hll" CharSetUtils.keep("hello", "le")  = "ell" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to keep characters from, may be null
 * @param set  String[] set of characters to keep, may be null
 * @return the modified String, {@code null} if null string input
 * @since 2.0
 */
//
//
/** 
 * <p>Takes an argument in set-syntax, see evaluateSet, and deletes any of characters present in the specified string.</p> <pre> CharSetUtils.delete(null, *)        = null CharSetUtils.delete("", *)          = "" CharSetUtils.delete(*, null)        =  CharSetUtils.delete(*, "")          =  CharSetUtils.delete("hello", "hl")  = "eo" CharSetUtils.delete("hello", "le")  = "ho" </pre>
 * @see CharSet#getInstance(java.lang.String) for set-syntax.
 * @param str  String to delete characters from, may be null
 * @param set  String[] set of characters to delete, may be null
 * @return the modified String, {@code null} if null string input
 */
//
/** 
 * Implementation of delete and keep
 * @param str String to modify characters within
 * @param set String[] set of characters to modify
 * @param expect whether to evaluate on match, or non-match
 * @return the modified String, not null
 */
/** 
 * Determines whether or not all the Strings in an array are  empty or not.
 * @param strings String[] whose elements are being checked for emptiness
 * @return whether or not the String is empty
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@53525379
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1be3f8f8

#TRAVERSE
LEFTCHILD: CLASS: CharSetUtils
RIGHTCHILD: CLASS: CharSetUtils
##SNODE L: CLASS: CharSetUtils
##SNODE L: CLASS: CharSetUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@78b9155e
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2ceb68a1

##TRAVERSE
LEFTCHILD: METHOD: count(String,String)
RIGHTCHILD: METHOD: count(String,String)
###SNODE L: METHOD: count(String,String)
###SNODE L: METHOD: count(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: delete(String,String)
RIGHTCHILD: METHOD: delete(String,String)
###SNODE L: METHOD: delete(String,String)
###SNODE L: METHOD: delete(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: deepEmpty(String[])
RIGHTCHILD: METHOD: deepEmpty(String[])
###SNODE L: METHOD: deepEmpty(String[])
###SNODE L: METHOD: deepEmpty(String[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharSetUtils()
RIGHTCHILD: CONSTRUCTOR: CharSetUtils()
###SNODE L: CONSTRUCTOR: CharSetUtils()
###SNODE L: CONSTRUCTOR: CharSetUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsAny(String,String)
RIGHTCHILD: METHOD: containsAny(String,String)
###SNODE L: METHOD: containsAny(String,String)
###SNODE L: METHOD: containsAny(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: modify(String,String[],boolean)
RIGHTCHILD: METHOD: modify(String,String[],boolean)
###SNODE L: METHOD: modify(String,String[],boolean)
###SNODE L: METHOD: modify(String,String[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: keep(String,String)
RIGHTCHILD: METHOD: keep(String,String)
###SNODE L: METHOD: keep(String,String)
###SNODE L: METHOD: keep(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: squeeze(String,String)
RIGHTCHILD: METHOD: squeeze(String,String)
###SNODE L: METHOD: squeeze(String,String)
###SNODE L: METHOD: squeeze(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)561
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)561
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)562
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)564
-(2)-(8)-(12)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)565
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)537
-(2)-(8)-(12)-(0)-(2)-(2)-(2)552
-(2)-(8)-(12)-(0)-(2)-(2)-(3)320
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)94
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)566
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)566
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)567
-(2)-(8)-(12)-(0)-(2)-(2)568
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(2)-(2)568
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)566
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)567
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)565
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)278
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)567
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)569
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)564
-(2)-(8)-(12)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)565
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)537
-(2)-(8)-(12)-(0)-(2)-(2)-(2)552
-(2)-(8)-(12)-(0)-(2)-(2)-(3)320
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)170
-(2)-(8)-(12)-(0)-(0)-(3)570
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(2)522
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)570
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)330
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)564
-(2)-(8)-(12)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)565
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)537
-(2)-(8)-(12)-(0)-(2)-(2)-(2)552
-(2)-(8)-(12)-(0)-(2)-(2)-(3)320
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)170
-(2)-(8)-(12)-(0)-(0)-(3)570
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(2)522
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)570
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)330
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)571
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)564
-(2)-(8)-(12)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)572
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)320
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)573
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)564
-(2)-(8)-(12)-(0)-(0)-(1)-(3)320
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)572
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)320
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)572
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)320
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)574
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)537
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)565
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)537
-(2)-(8)-(12)-(0)-(2)-(2)-(2)552
-(2)-(8)-(12)-(0)-(2)-(2)-(3)320
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)94
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)566
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)566
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)566
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)574
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)566
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)564
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)575
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)575
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)576
-(2)-(8)-(12)-(0)-(1)-(0)-(1)575
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(2)299
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)576
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32

LEFT COMMENTS
/* *//** 
 * <p>Operations on char primitives and Character objects.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 2.1
 * @version $Id$
 */
/** 
 * {@code } linefeed LF ('\n').
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 2.2
 */
/** 
 * {@code } carriage return CR ('\r').
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 2.2
 */
/** 
 * <p> {@code CharUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code CharUtils.toString('c');}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>
 * @deprecated Java 5 introduced {@link Character#valueOf(char)} which caches chars 0 through 127.
 * @param ch  the character to convert
 * @return a Character of the specified character
 */
/** 
 * <p>Converts the String to a Character using the first character, returning null for empty Strings.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(null) = null CharUtils.toCharacterObject("")   = null CharUtils.toCharacterObject("A")  = 'A' CharUtils.toCharacterObject("BA") = 'B' </pre>
 * @param str  the character to convert
 * @return the Character value of the first letter of the String
 */
//
/** 
 * <p>Converts the Character to a char throwing an exception for  {@code null}.</p> <pre> CharUtils.toChar(' ')  = ' ' CharUtils.toChar('A')  = 'A' CharUtils.toChar(null) throws IllegalArgumentException </pre>
 * @param ch  the character to convert
 * @return the char value of the Character
 * @throws IllegalArgumentException if the Character is null
 */
/** 
 * <p>Converts the Character to a char handling  {@code null}.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>
 * @param ch  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the Character or the default if null
 */
//
/** 
 * <p>Converts the String to a char using the first character, throwing an exception on empty Strings.</p> <pre> CharUtils.toChar("A")  = 'A' CharUtils.toChar("BA") = 'B' CharUtils.toChar(null) throws IllegalArgumentException CharUtils.toChar("")   throws IllegalArgumentException </pre>
 * @param str  the character to convert
 * @return the char value of the first letter of the String
 * @throws IllegalArgumentException if the String is empty
 */
/** 
 * <p>Converts the String to a char using the first character, defaulting the value on empty Strings.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar("", 'X')   = 'X' CharUtils.toChar("A", 'X')  = 'A' CharUtils.toChar("BA", 'X') = 'B' </pre>
 * @param str  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the first letter of the String or the default if null
 */
//
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue('A')  throws IllegalArgumentException </pre>
 * @param ch  the character to convert
 * @return the int value of the character
 * @throws IllegalArgumentException if the character is not ASCII numeric
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue(null) throws IllegalArgumentException CharUtils.toIntValue('A')  throws IllegalArgumentException </pre>
 * @param ch  the character to convert, not null
 * @return the int value of the character
 * @throws IllegalArgumentException if the Character is not ASCII numeric or is null
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue(null, -1) = -1 CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */
//
/** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */
/** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><pre> CharUtils.toString(null) = null CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */
//
/** 
 * <p>Converts the string to the Unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <pre> CharUtils.unicodeEscaped(' ') = "\u0020" CharUtils.unicodeEscaped('A') = "\u0041" </pre>
 * @param ch  the character to convert
 * @return the escaped Unicode string
 */
/** 
 * <p>Converts the string to the Unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><pre> CharUtils.unicodeEscaped(null) = null CharUtils.unicodeEscaped(' ')  = "\u0020" CharUtils.unicodeEscaped('A')  = "\u0041" </pre>
 * @param ch  the character to convert, may be null
 * @return the escaped Unicode string, null if null input
 */
//
/** 
 * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\n') = true CharUtils.isAscii('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 128
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit printable.</p> <pre> CharUtils.isAsciiPrintable('a')  = true CharUtils.isAsciiPrintable('A')  = true CharUtils.isAsciiPrintable('3')  = true CharUtils.isAsciiPrintable('-')  = true CharUtils.isAsciiPrintable('\n') = false CharUtils.isAsciiPrintable('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 32 and 126 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 32 or equals 127
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic.</p> <pre> CharUtils.isAsciiAlpha('a')  = true CharUtils.isAsciiAlpha('A')  = true CharUtils.isAsciiAlpha('3')  = false CharUtils.isAsciiAlpha('-')  = false CharUtils.isAsciiAlpha('\n') = false CharUtils.isAsciiAlpha('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 or 97 and 122 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic lower case.</p> <pre> CharUtils.isAsciiAlphaLower('a')  = true CharUtils.isAsciiAlphaLower('A')  = false CharUtils.isAsciiAlphaLower('3')  = false CharUtils.isAsciiAlphaLower('-')  = false CharUtils.isAsciiAlphaLower('\n') = false CharUtils.isAsciiAlphaLower('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 97 and 122 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiNumeric('a')  = false CharUtils.isAsciiNumeric('A')  = false CharUtils.isAsciiNumeric('3')  = true CharUtils.isAsciiNumeric('-')  = false CharUtils.isAsciiNumeric('\n') = false CharUtils.isAsciiNumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiAlphanumeric('a')  = true CharUtils.isAsciiAlphanumeric('A')  = true CharUtils.isAsciiAlphanumeric('3')  = true CharUtils.isAsciiAlphanumeric('-')  = false CharUtils.isAsciiAlphanumeric('\n') = false CharUtils.isAsciiAlphanumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on char primitives and Character objects.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 2.1
 * @version $Id$
 */
/** 
 * {@code } linefeed LF ('\n').
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 2.2
 */
/** 
 * {@code } carriage return CR ('\r').
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 2.2
 */
/** 
 * <p> {@code CharUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code CharUtils.toString('c');}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Converts the character to a Character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(' ')  = ' ' CharUtils.toCharacterObject('A')  = 'A' </pre>
 * @deprecated Java 5 introduced {@link Character#valueOf(char)} which caches chars 0 through 127.
 * @param ch  the character to convert
 * @return a Character of the specified character
 */
/** 
 * <p>Converts the String to a Character using the first character, returning null for empty Strings.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same Character object each time.</p> <pre> CharUtils.toCharacterObject(null) = null CharUtils.toCharacterObject("")   = null CharUtils.toCharacterObject("A")  = 'A' CharUtils.toCharacterObject("BA") = 'B' </pre>
 * @param str  the character to convert
 * @return the Character value of the first letter of the String
 */
//
/** 
 * <p>Converts the Character to a char throwing an exception for  {@code null}.</p> <pre> CharUtils.toChar(' ')  = ' ' CharUtils.toChar('A')  = 'A' CharUtils.toChar(null) throws IllegalArgumentException </pre>
 * @param ch  the character to convert
 * @return the char value of the Character
 * @throws IllegalArgumentException if the Character is null
 */
/** 
 * <p>Converts the Character to a char handling  {@code null}.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar(' ', 'X')  = ' ' CharUtils.toChar('A', 'X')  = 'A' </pre>
 * @param ch  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the Character or the default if null
 */
//
/** 
 * <p>Converts the String to a char using the first character, throwing an exception on empty Strings.</p> <pre> CharUtils.toChar("A")  = 'A' CharUtils.toChar("BA") = 'B' CharUtils.toChar(null) throws IllegalArgumentException CharUtils.toChar("")   throws IllegalArgumentException </pre>
 * @param str  the character to convert
 * @return the char value of the first letter of the String
 * @throws IllegalArgumentException if the String is empty
 */
/** 
 * <p>Converts the String to a char using the first character, defaulting the value on empty Strings.</p> <pre> CharUtils.toChar(null, 'X') = 'X' CharUtils.toChar("", 'X')   = 'X' CharUtils.toChar("A", 'X')  = 'A' CharUtils.toChar("BA", 'X') = 'B' </pre>
 * @param str  the character to convert
 * @param defaultValue  the value to use if the  Character is null
 * @return the char value of the first letter of the String or the default if null
 */
//
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue('A')  throws IllegalArgumentException </pre>
 * @param ch  the character to convert
 * @return the int value of the character
 * @throws IllegalArgumentException if the character is not ASCII numeric
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue('3')  = 3 CharUtils.toIntValue(null) throws IllegalArgumentException CharUtils.toIntValue('A')  throws IllegalArgumentException </pre>
 * @param ch  the character to convert, not null
 * @return the int value of the character
 * @throws IllegalArgumentException if the Character is not ASCII numeric or is null
 */
/** 
 * <p>Converts the character to the Integer it represents, throwing an exception if the character is not numeric.</p> <p>This method coverts the char '1' to the int 1 and so on.</p> <pre> CharUtils.toIntValue(null, -1) = -1 CharUtils.toIntValue('3', -1)  = 3 CharUtils.toIntValue('A', -1)  = -1 </pre>
 * @param ch  the character to convert
 * @param defaultValue  the default value to use if the character is not numeric
 * @return the int value of the character
 */
//
/** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <pre> CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */
/** 
 * <p>Converts the character to a String that contains the one character.</p> <p>For ASCII 7 bit characters, this uses a cache that will return the same String object each time.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><pre> CharUtils.toString(null) = null CharUtils.toString(' ')  = " " CharUtils.toString('A')  = "A" </pre>
 * @param ch  the character to convert
 * @return a String containing the one specified character
 */
//
/** 
 * <p>Converts the string to the Unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <pre> CharUtils.unicodeEscaped(' ') = "\u0020" CharUtils.unicodeEscaped('A') = "\u0041" </pre>
 * @param ch  the character to convert
 * @return the escaped Unicode string
 */
/** 
 * <p>Converts the string to the Unicode format '\u0020'.</p> <p>This format is the Java source code format.</p> <p>If  {@code null} is passed in, {@code null} will be returned.</p><pre> CharUtils.unicodeEscaped(null) = null CharUtils.unicodeEscaped(' ')  = "\u0020" CharUtils.unicodeEscaped('A')  = "\u0041" </pre>
 * @param ch  the character to convert, may be null
 * @return the escaped Unicode string, null if null input
 */
//
/** 
 * <p>Checks whether the character is ASCII 7 bit.</p> <pre> CharUtils.isAscii('a')  = true CharUtils.isAscii('A')  = true CharUtils.isAscii('3')  = true CharUtils.isAscii('-')  = true CharUtils.isAscii('\n') = true CharUtils.isAscii('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 128
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit printable.</p> <pre> CharUtils.isAsciiPrintable('a')  = true CharUtils.isAsciiPrintable('A')  = true CharUtils.isAsciiPrintable('3')  = true CharUtils.isAsciiPrintable('-')  = true CharUtils.isAsciiPrintable('\n') = false CharUtils.isAsciiPrintable('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 32 and 126 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit control.</p> <pre> CharUtils.isAsciiControl('a')  = false CharUtils.isAsciiControl('A')  = false CharUtils.isAsciiControl('3')  = false CharUtils.isAsciiControl('-')  = false CharUtils.isAsciiControl('\n') = true CharUtils.isAsciiControl('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if less than 32 or equals 127
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic.</p> <pre> CharUtils.isAsciiAlpha('a')  = true CharUtils.isAsciiAlpha('A')  = true CharUtils.isAsciiAlpha('3')  = false CharUtils.isAsciiAlpha('-')  = false CharUtils.isAsciiAlpha('\n') = false CharUtils.isAsciiAlpha('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 or 97 and 122 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p> <pre> CharUtils.isAsciiAlphaUpper('a')  = false CharUtils.isAsciiAlphaUpper('A')  = true CharUtils.isAsciiAlphaUpper('3')  = false CharUtils.isAsciiAlphaUpper('-')  = false CharUtils.isAsciiAlphaUpper('\n') = false CharUtils.isAsciiAlphaUpper('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 65 and 90 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit alphabetic lower case.</p> <pre> CharUtils.isAsciiAlphaLower('a')  = true CharUtils.isAsciiAlphaLower('A')  = false CharUtils.isAsciiAlphaLower('3')  = false CharUtils.isAsciiAlphaLower('-')  = false CharUtils.isAsciiAlphaLower('\n') = false CharUtils.isAsciiAlphaLower('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 97 and 122 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiNumeric('a')  = false CharUtils.isAsciiNumeric('A')  = false CharUtils.isAsciiNumeric('3')  = true CharUtils.isAsciiNumeric('-')  = false CharUtils.isAsciiNumeric('\n') = false CharUtils.isAsciiNumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 inclusive
 */
/** 
 * <p>Checks whether the character is ASCII 7 bit numeric.</p> <pre> CharUtils.isAsciiAlphanumeric('a')  = true CharUtils.isAsciiAlphanumeric('A')  = true CharUtils.isAsciiAlphanumeric('3')  = true CharUtils.isAsciiAlphanumeric('-')  = false CharUtils.isAsciiAlphanumeric('\n') = false CharUtils.isAsciiAlphanumeric('&copy;') = false </pre>
 * @param ch  the character to check
 * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4470106b
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@690ed13a

#TRAVERSE
LEFTCHILD: CLASS: CharUtils
RIGHTCHILD: CLASS: CharUtils
##SNODE L: CLASS: CharUtils
##SNODE L: CLASS: CharUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@681311a7
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2c7375da

##TRAVERSE
LEFTCHILD: METHOD: unicodeEscaped(char)
RIGHTCHILD: METHOD: unicodeEscaped(char)
###SNODE L: METHOD: unicodeEscaped(char)
###SNODE L: METHOD: unicodeEscaped(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiPrintable(char)
RIGHTCHILD: METHOD: isAsciiPrintable(char)
###SNODE L: METHOD: isAsciiPrintable(char)
###SNODE L: METHOD: isAsciiPrintable(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toCharacterObject(char)
RIGHTCHILD: METHOD: toCharacterObject(char)
###SNODE L: METHOD: toCharacterObject(char)
###SNODE L: METHOD: toCharacterObject(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: CR : char
RIGHTCHILD: FIELD: CR : char
###SNODE L: FIELD: CR : char
###SNODE L: FIELD: CR : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: LF : char
RIGHTCHILD: FIELD: LF : char
###SNODE L: FIELD: LF : char
###SNODE L: FIELD: LF : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Character)
RIGHTCHILD: METHOD: toString(Character)
###SNODE L: METHOD: toString(Character)
###SNODE L: METHOD: toString(Character)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntValue(Character)
RIGHTCHILD: METHOD: toIntValue(Character)
###SNODE L: METHOD: toIntValue(Character)
###SNODE L: METHOD: toIntValue(Character)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntValue(Character,int)
RIGHTCHILD: METHOD: toIntValue(Character,int)
###SNODE L: METHOD: toIntValue(Character,int)
###SNODE L: METHOD: toIntValue(Character,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toChar(Character)
RIGHTCHILD: METHOD: toChar(Character)
###SNODE L: METHOD: toChar(Character)
###SNODE L: METHOD: toChar(Character)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toChar(String,char)
RIGHTCHILD: METHOD: toChar(String,char)
###SNODE L: METHOD: toChar(String,char)
###SNODE L: METHOD: toChar(String,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiControl(char)
RIGHTCHILD: METHOD: isAsciiControl(char)
###SNODE L: METHOD: isAsciiControl(char)
###SNODE L: METHOD: isAsciiControl(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAscii(char)
RIGHTCHILD: METHOD: isAscii(char)
###SNODE L: METHOD: isAscii(char)
###SNODE L: METHOD: isAscii(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiAlpha(char)
RIGHTCHILD: METHOD: isAsciiAlpha(char)
###SNODE L: METHOD: isAsciiAlpha(char)
###SNODE L: METHOD: isAsciiAlpha(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntValue(char)
RIGHTCHILD: METHOD: toIntValue(char)
###SNODE L: METHOD: toIntValue(char)
###SNODE L: METHOD: toIntValue(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiAlphaLower(char)
RIGHTCHILD: METHOD: isAsciiAlphaLower(char)
###SNODE L: METHOD: isAsciiAlphaLower(char)
###SNODE L: METHOD: isAsciiAlphaLower(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unicodeEscaped(Character)
RIGHTCHILD: METHOD: unicodeEscaped(Character)
###SNODE L: METHOD: unicodeEscaped(Character)
###SNODE L: METHOD: unicodeEscaped(Character)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiAlphanumeric(char)
RIGHTCHILD: METHOD: isAsciiAlphanumeric(char)
###SNODE L: METHOD: isAsciiAlphanumeric(char)
###SNODE L: METHOD: isAsciiAlphanumeric(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toChar(Character,char)
RIGHTCHILD: METHOD: toChar(Character,char)
###SNODE L: METHOD: toChar(Character,char)
###SNODE L: METHOD: toChar(Character,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toChar(String)
RIGHTCHILD: METHOD: toChar(String)
###SNODE L: METHOD: toChar(String)
###SNODE L: METHOD: toChar(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(char)
RIGHTCHILD: METHOD: toString(char)
###SNODE L: METHOD: toString(char)
###SNODE L: METHOD: toString(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiAlphaUpper(char)
RIGHTCHILD: METHOD: isAsciiAlphaUpper(char)
###SNODE L: METHOD: isAsciiAlphaUpper(char)
###SNODE L: METHOD: isAsciiAlphaUpper(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiNumeric(char)
RIGHTCHILD: METHOD: isAsciiNumeric(char)
###SNODE L: METHOD: isAsciiNumeric(char)
###SNODE L: METHOD: isAsciiNumeric(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: CharUtils()
RIGHTCHILD: CONSTRUCTOR: CharUtils()
###SNODE L: CONSTRUCTOR: CharUtils()
###SNODE L: CONSTRUCTOR: CharUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toCharacterObject(String)
RIGHTCHILD: METHOD: toCharacterObject(String)
###SNODE L: METHOD: toCharacterObject(String)
###SNODE L: METHOD: toCharacterObject(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: CHAR_STRING_ARRAY : String[]
RIGHTCHILD: FIELD: CHAR_STRING_ARRAY : String[]
###SNODE L: FIELD: CHAR_STRING_ARRAY : String[]
###SNODE L: FIELD: CHAR_STRING_ARRAY : String[]
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toIntValue(char,int)
RIGHTCHILD: METHOD: toIntValue(char,int)
###SNODE L: METHOD: toIntValue(char,int)
###SNODE L: METHOD: toIntValue(char,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)577
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)162
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)578
-(2)-(8)-(3)-(2)197
-(2)-(8)-(3)-(2)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(1)579
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)580
-(2)-(8)-(3)-(2)581
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)582
-(2)-(8)-(3)-(2)583
-(2)-(8)51
-(2)-(8)-(1)22
-(2)-(8)-(2)50
-(2)-(8)-(2)-(0)183
-(2)-(8)-(2)-(0)-(0)179
-(2)-(8)-(2)-(0)-(0)-(1)170
-(2)-(8)-(2)-(0)-(0)-(2)29
-(2)-(8)-(2)-(0)-(0)-(2)-(0)570
-(2)-(8)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(2)-(0)-(1)180
-(2)-(8)-(2)-(0)-(1)-(0)570
-(2)-(8)-(2)-(0)-(1)-(1)2
-(2)-(8)-(2)-(0)-(1)-(1)-(0)578
-(2)-(8)-(2)-(0)-(1)-(1)-(1)116
-(2)-(8)-(2)-(0)-(2)181
-(2)-(8)-(2)-(0)-(2)-(0)570
-(2)-(8)-(2)-(0)-(3)50
-(2)-(8)-(2)-(0)-(3)-(0)34
-(2)-(8)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(0)-(0)578
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(0)-(1)570
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(1)-(0)55
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(1)-(2)289
-(2)-(8)-(2)-(0)-(3)-(0)-(0)-(1)-(3)570
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)577
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)584
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)585
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)169
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(2)289
-(2)-(8)-(12)-(0)-(0)-(3)491
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)585
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)169
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(2)289
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(0)-(3)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)586
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)587
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(2)285
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)586
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)588
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)588
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(2)285
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)586
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)589
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)586
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)588
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)588
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)590
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)591
-(2)-(8)-(12)-(0)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)592
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)491
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)593
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)594
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)590
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)588
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)591
-(2)-(8)-(12)-(0)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)588
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)594
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)590
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)595
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)590
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)491
-(2)-(8)-(12)-(0)-(0)-(3)-(2)285
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)590
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)588
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)588
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)590
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)491
-(2)-(8)-(12)-(0)-(0)-(3)-(2)285
-(2)-(8)-(12)-(0)-(0)-(3)588
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)579
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)578
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)197
-(2)-(8)-(12)-(0)-(0)-(4)-(0)162
-(2)-(8)-(12)-(0)-(0)-(4)-(0)-(0)170
-(2)-(8)-(12)-(0)-(0)-(4)-(2)596
-(2)-(8)-(12)-(0)-(0)-(4)-(2)-(0)491
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)491
-(2)-(8)-(12)-(0)-(0)-(3)-(2)285
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)597
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)598
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)599
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)600
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)491
-(2)-(8)-(12)-(0)-(2)-(0)-(1)601
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)602
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(2)600
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)491
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)603
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)604
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(2)600
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)605
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(0)-(1)-(2)600
-(2)-(8)-(12)-(0)-(0)-(1)-(3)491
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)597
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)169
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)597
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)491
-(2)-(8)-(12)-(0)-(0)-(3)-(2)285
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)606
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)579
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)607
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(1)152
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)609
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(1)152
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)610
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)434
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)611
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)433
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)612
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)613
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(1)434
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(1)611
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)614
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(1)433
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(1)612
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)591
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(1)615
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(1)616
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)617
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)434
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)611
-(2)-(8)-(12)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)433
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)-(1)612
-(2)-(8)-(12)-(0)-(0)-(2)231
-(2)-(8)-(12)-(0)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)615
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(1)-(1)616

LEFT COMMENTS
/* *//** 
 * <p>Operates on classes without using reflection.</p> <p>This class handles invalid  {@code null} inputs as best it can.Each method documents its behaviour in more detail.</p> <p>The notion of a  {@code canonical name} includes the humanreadable name for the type, for example  {@code int[]}. The non-canonical method variants work with the JVM names, such as {@code [I}. </p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * The package separator character: <code>'&#x2e;' ==  {@value}</code>.
 */
/** 
 * The package separator String: <code>"&#x2e;"</code>.
 */
/** 
 * The inner class separator character: <code>'$' ==  {@value}</code>.
 */
/** 
 * The inner class separator String:  {@code "$"}.
 */
/** 
 * Maps primitive  {@code Class}es to their corresponding wrapper  {@code Class}.
 */
/** 
 * Maps wrapper  {@code Class}es to their corresponding primitive types.
 */
/** 
 * Maps a primitive class name to its corresponding abbreviation used in array class names.
 */
/** 
 * Maps an abbreviation used in array class names to corresponding primitive class name.
 */
/** 
 * Add primitive type abbreviation to maps of abbreviations.
 * @param primitive Canonical name of primitive type
 * @param abbreviation Corresponding abbreviation of primitive type
 */
/** 
 * Feed abbreviation maps
 */
/** 
 * <p>ClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code ClassUtils.getShortClassName(cls)}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Gets the class name minus the package name for an  {@code Object}.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the class name of the object without the package name, or the null value
 */
/** 
 * <p>Gets the class name minus the package name from a  {@code Class}.</p> <p>Consider using the Java 5 API  {@link Class#getSimpleName()} instead.The one known difference is that this code will return  {@code "Map.Entry"} whilethe  {@code java.lang.Class} variant will simply return {@code "Entry"}. </p>
 * @param cls  the class to get the short name for.
 * @return the class name without the package name or an empty string
 */
/** 
 * <p>Gets the class name minus the package name from a String.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>Note that this method differs from Class.getSimpleName() in that this will return  {@code "Map.Entry"} whilst the {@code java.lang.Class} variant will simplyreturn  {@code "Entry"}. </p>
 * @param className  the className to get the short name for
 * @return the class name of the class without the package name or an empty string
 */
//
//
/** 
 * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>
 * @param cls the class for which to get the simple name.
 * @return the simple class name.
 * @since 3.0
 * @see Class#getSimpleName()
 */
/** 
 * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>
 * @param object the object for which to get the simple class name.
 * @param valueIfNull the value to return if <code>object</code> is <code>null</code>
 * @return the simple class name.
 * @since 3.0
 * @see Class#getSimpleName()
 */
//
//
/** 
 * <p>Gets the package name of an  {@code Object}.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 */
/** 
 * <p>Gets the package name of a  {@code Class}.</p>
 * @param cls  the class to get the package name for, may be {@code null}.
 * @return the package name or an empty string
 */
/** 
 * <p>Gets the package name from a  {@code String}.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param className  the className to get the package name for, may be {@code null}
 * @return the package name or an empty string
 */
//
//
//
//
/** 
 * <p>Gets a  {@code List} of superclasses for the given class.</p>
 * @param cls  the class to look up, may be {@code null}
 * @return the {@code List} of superclasses in order going up from this one{@code null} if null input
 */
/** 
 * <p>Gets a  {@code List} of all interfaces implemented by the givenclass and its superclasses.</p> <p>The order is determined by looking through each interface in turn as declared in the source file and following its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order is maintained.</p>
 * @param cls  the class to look up, may be {@code null}
 * @return the {@code List} of interfaces in order,{@code null} if null input
 */
/** 
 * Get the interfaces for the specified class.
 * @param cls  the class to look up, may be {@code null}
 * @param interfacesFound the {@code Set} of interfaces for the class
 */
//
//
/** 
 * <p>Given a  {@code List} of class names, this method converts them into classes.</p><p>A new  {@code List} is returned. If the class name cannot be found, {@code null}is stored in the  {@code List}. If the class name in the  {@code List} is{@code null},  {@code null} is stored in the output {@code List}.</p>
 * @param classNames  the classNames to change
 * @return a {@code List} of Class objects corresponding to the class names,{@code null} if null input
 * @throws ClassCastException if classNames contains a non String entry
 */
/** 
 * <p>Given a  {@code List} of {@code Class} objects, this method convertsthem into class names.</p> <p>A new  {@code List} is returned. {@code null} objects will be copied intothe returned list as  {@code null}.</p>
 * @param classes  the classes to change
 * @return a {@code List} of class names corresponding to the Class objects,{@code null} if null input
 * @throws ClassCastException if {@code classes} contains a non-{@code Class} entry
 */
//
//
/** 
 * <p>Checks if an array of Classes can be assigned to another array of Classes.</p> <p>This method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p> <p><strong>Since Lang 3.0,</strong> this method will default behavior for calculating assignability between primitive and wrapper types <em>corresponding to the running Java version</em>; i.e. autoboxing will be the default behavior in VMs running Java versions >= 1.5.</p>
 * @param classArray  the array of Classes to check, may be {@code null}
 * @param toClassArray  the array of Classes to try to assign into, may be {@code null}
 * @return {@code true} if assignment possible
 */
/** 
 * <p>Checks if an array of Classes can be assigned to another array of Classes.</p> <p>This method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param classArray  the array of Classes to check, may be {@code null}
 * @param toClassArray  the array of Classes to try to assign into, may be {@code null}
 * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
 * @return {@code true} if assignment possible
 */
/** 
 * Returns whether the given  {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @param type The class to query or null.
 * @return true if the given {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @since 3.1
 */
/** 
 * Returns whether the given  {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @param type The class to query or null.
 * @return true if the given {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @since 3.1
 */
/** 
 * <p>Checks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p> <p><strong>Since Lang 3.0,</strong> this method will default behavior for calculating assignability between primitive and wrapper types <em>corresponding to the running Java version</em>; i.e. autoboxing will be the default behavior in VMs running Java versions >= 1.5.</p>
 * @param cls  the Class to check, may be null
 * @param toClass  the Class to try to assign into, returns false if null
 * @return {@code true} if assignment possible
 */
/** 
 * <p>Checks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param cls  the Class to check, may be null
 * @param toClass  the Class to try to assign into, returns false if null
 * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
 * @return {@code true} if assignment possible
 */
//
//
//
/** 
 * <p>Converts the specified primitive Class object to its corresponding wrapper Class object.</p> <p>NOTE: From v2.2, this method handles  {@code Void.TYPE}, returning  {@code Void.TYPE}.</p>
 * @param cls  the class to convert, may be null
 * @return the wrapper class for {@code cls} or {@code cls} if{@code cls} is not a primitive. {@code null} if null input.
 * @since 2.1
 */
/** 
 * <p>Converts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the wrapper class orthe original class if class is not a primitive.  {@code null} if null input.Empty array if an empty array passed in.
 * @since 2.1
 */
/** 
 * <p>Converts the specified wrapper class to its corresponding primitive class.</p> <p>This method is the counter part of  {@code primitiveToWrapper()}. If the passed in class is a wrapper class for a primitive type, this primitive type will be returned (e.g.  {@code Integer.TYPE} for{@code Integer.class}). For other classes, or if the parameter is <b>null</b>, the return value is <b>null</b>.</p>
 * @param cls the class to convert, may be <b>null</b>
 * @return the corresponding primitive type if {@code cls} is awrapper class, <b>null</b> otherwise
 * @see #primitiveToWrapper(Class)
 * @since 2.4
 */
/** 
 * <p>Converts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.</p> <p>This method invokes  {@code wrapperToPrimitive()} for each elementof the passed in array.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the primitive class or<b>null</b> if the original class is not a wrapper class.  {@code null} if null input.Empty array if an empty array passed in.
 * @see #wrapperToPrimitive(Class)
 * @since 2.4
 */
//
//
/** 
 * <p>Is the specified class an inner class or static nested class.</p>
 * @param cls  the class to check, may be null
 * @return {@code true} if the class is an inner or static nested class,false if not or  {@code null}
 */
//
//
/** 
 * Returns the class represented by  {@code className} using the{@code classLoader}.  This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by {@code className} using the {@code classLoader}
 * @throws ClassNotFoundException if the class is not found
 */
//
//
//
/** 
 * Returns the (initialized) class represented by  {@code className}using the  {@code classLoader}.  This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @return the class represented by {@code className} using the {@code classLoader}
 * @throws ClassNotFoundException if the class is not found
 */
/** 
 * Returns the (initialized) class represented by  {@code className}using the current thread's context class loader. This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param className  the class name
 * @return the class represented by {@code className} using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */
/** 
 * Returns the class represented by  {@code className} using thecurrent thread's context class loader. This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by {@code className} using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */
//
//
/** 
 * <p>Returns the desired Method much like  {@code Class.getMethod}, however it ensures that the returned Method is from a public class or interface and not from an anonymous inner class. This means that the Method is invokable and doesn't fall foul of Java bug <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957">4071957</a>). <code><pre>Set set = Collections.unmodifiableSet(...); Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); Object result = method.invoke(set, new Object[]);</pre></code> </p>
 * @param cls  the class to check, not null
 * @param methodName  the name of the method
 * @param parameterTypes  the list of parameters
 * @return the method
 * @throws NullPointerException if the class is null
 * @throws SecurityException if a security violation occurred
 * @throws NoSuchMethodException if the method is not found in the given classor if the metothod doen't conform with the requirements
 */
//
/** 
 * Converts a class name to a JLS style class name.
 * @param className  the class name
 * @return the converted name
 */
/** 
 * <p>Converts an array of  {@code Object} in to an array of {@code Class} objects.If any of these objects is null, a null element will be inserted into the array.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array an {@code Object} array
 * @return a {@code Class} array, {@code null} if null array input
 * @since 2.4
 */
//
//
/** 
 * <p>Gets the canonical name minus the package name for an  {@code Object}.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the canonical name of the object without the package name, or the null value
 * @since 2.4
 */
/** 
 * <p>Gets the canonical name minus the package name from a  {@code Class}.</p>
 * @param cls  the class to get the short name for.
 * @return the canonical name without the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Gets the canonical name minus the package name from a String.</p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p>
 * @param canonicalName  the class name to get the short name for
 * @return the canonical name of the class without the package name or an empty string
 * @since 2.4
 */
//
//
/** 
 * <p>Gets the package name from the canonical name of an  {@code Object}.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 * @since 2.4
 */
/** 
 * <p>Gets the package name from the canonical name of a  {@code Class}.</p>
 * @param cls  the class to get the package name for, may be {@code null}.
 * @return the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Gets the package name from the canonical name. </p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param canonicalName  the canonical name to get the package name for, may be {@code null}
 * @return the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Converts a given name of class into canonical format. If name of class is not a name of array class it returns unchanged name.</p> <p>Example: <ul> <li> {@code getCanonicalName("[I") = "int[]"}</li> <li> {@code getCanonicalName("[Ljava.lang.String;") = "java.lang.String[]"}</li> <li> {@code getCanonicalName("java.lang.String") = "java.lang.String"}</li> </ul> </p>
 * @param className the name of class
 * @return canonical form of class name
 * @since 2.4
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operates on classes without using reflection.</p> <p>This class handles invalid  {@code null} inputs as best it can.Each method documents its behaviour in more detail.</p> <p>The notion of a  {@code canonical name} includes the humanreadable name for the type, for example  {@code int[]}. The non-canonical method variants work with the JVM names, such as {@code [I}. </p>
 * @since 2.0
 * @version $Id$
 */
/** 
 * The package separator character: <code>'&#x2e;' ==  {@value}</code>.
 */
/** 
 * The package separator String: <code>"&#x2e;"</code>.
 */
/** 
 * The inner class separator character: <code>'$' ==  {@value}</code>.
 */
/** 
 * The inner class separator String:  {@code "$"}.
 */
/** 
 * Maps primitive  {@code Class}es to their corresponding wrapper  {@code Class}.
 */
/** 
 * Maps wrapper  {@code Class}es to their corresponding primitive types.
 */
/** 
 * Maps a primitive class name to its corresponding abbreviation used in array class names.
 */
/** 
 * Maps an abbreviation used in array class names to corresponding primitive class name.
 */
/** 
 * Add primitive type abbreviation to maps of abbreviations.
 * @param primitive Canonical name of primitive type
 * @param abbreviation Corresponding abbreviation of primitive type
 */
/** 
 * Feed abbreviation maps
 */
/** 
 * <p>ClassUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code ClassUtils.getShortClassName(cls)}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Gets the class name minus the package name for an  {@code Object}.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the class name of the object without the package name, or the null value
 */
/** 
 * <p>Gets the class name minus the package name from a  {@code Class}.</p> <p>Consider using the Java 5 API  {@link Class#getSimpleName()} instead.The one known difference is that this code will return  {@code "Map.Entry"} whilethe  {@code java.lang.Class} variant will simply return {@code "Entry"}. </p>
 * @param cls  the class to get the short name for.
 * @return the class name without the package name or an empty string
 */
/** 
 * <p>Gets the class name minus the package name from a String.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>Note that this method differs from Class.getSimpleName() in that this will return  {@code "Map.Entry"} whilst the {@code java.lang.Class} variant will simplyreturn  {@code "Entry"}. </p>
 * @param className  the className to get the short name for
 * @return the class name of the class without the package name or an empty string
 */
//
//
/** 
 * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>
 * @param cls the class for which to get the simple name.
 * @return the simple class name.
 * @since 3.0
 * @see Class#getSimpleName()
 */
/** 
 * <p>Null-safe version of <code>aClass.getSimpleName()</code></p>
 * @param object the object for which to get the simple class name.
 * @param valueIfNull the value to return if <code>object</code> is <code>null</code>
 * @return the simple class name.
 * @since 3.0
 * @see Class#getSimpleName()
 */
//
//
/** 
 * <p>Gets the package name of an  {@code Object}.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 */
/** 
 * <p>Gets the package name of a  {@code Class}.</p>
 * @param cls  the class to get the package name for, may be {@code null}.
 * @return the package name or an empty string
 */
/** 
 * <p>Gets the package name from a  {@code String}.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param className  the className to get the package name for, may be {@code null}
 * @return the package name or an empty string
 */
//
//
//
//
/** 
 * <p>Gets a  {@code List} of superclasses for the given class.</p>
 * @param cls  the class to look up, may be {@code null}
 * @return the {@code List} of superclasses in order going up from this one{@code null} if null input
 */
/** 
 * <p>Gets a  {@code List} of all interfaces implemented by the givenclass and its superclasses.</p> <p>The order is determined by looking through each interface in turn as declared in the source file and following its hierarchy up. Then each superclass is considered in the same way. Later duplicates are ignored, so the order is maintained.</p>
 * @param cls  the class to look up, may be {@code null}
 * @return the {@code List} of interfaces in order,{@code null} if null input
 */
/** 
 * Get the interfaces for the specified class.
 * @param cls  the class to look up, may be {@code null}
 * @param interfacesFound the {@code Set} of interfaces for the class
 */
//
//
/** 
 * <p>Given a  {@code List} of class names, this method converts them into classes.</p><p>A new  {@code List} is returned. If the class name cannot be found, {@code null}is stored in the  {@code List}. If the class name in the  {@code List} is{@code null},  {@code null} is stored in the output {@code List}.</p>
 * @param classNames  the classNames to change
 * @return a {@code List} of Class objects corresponding to the class names,{@code null} if null input
 * @throws ClassCastException if classNames contains a non String entry
 */
/** 
 * <p>Given a  {@code List} of {@code Class} objects, this method convertsthem into class names.</p> <p>A new  {@code List} is returned. {@code null} objects will be copied intothe returned list as  {@code null}.</p>
 * @param classes  the classes to change
 * @return a {@code List} of class names corresponding to the Class objects,{@code null} if null input
 * @throws ClassCastException if {@code classes} contains a non-{@code Class} entry
 */
//
//
/** 
 * <p>Checks if an array of Classes can be assigned to another array of Classes.</p> <p>This method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p> <p><strong>Since Lang 3.0,</strong> this method will default behavior for calculating assignability between primitive and wrapper types <em>corresponding to the running Java version</em>; i.e. autoboxing will be the default behavior in VMs running Java versions >= 1.5.</p>
 * @param classArray  the array of Classes to check, may be {@code null}
 * @param toClassArray  the array of Classes to try to assign into, may be {@code null}
 * @return {@code true} if assignment possible
 */
/** 
 * <p>Checks if an array of Classes can be assigned to another array of Classes.</p> <p>This method calls  {@link #isAssignable(Class,Class) isAssignable} for eachClass pair in the input arrays. It can be used to check if a set of arguments (the first parameter) are suitably compatible with a set of method parameter types (the second parameter).</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method, thismethod takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a  {@code long}, {@code float} or {@code double}. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This method willreturn  {@code true} if {@code null} is passed in and the toClass isnon-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param classArray  the array of Classes to check, may be {@code null}
 * @param toClassArray  the array of Classes to try to assign into, may be {@code null}
 * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
 * @return {@code true} if assignment possible
 */
/** 
 * Returns whether the given  {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @param type The class to query or null.
 * @return true if the given {@code type} is a primitive or primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character}, {@link Short},  {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @since 3.1
 */
/** 
 * Returns whether the given  {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @param type The class to query or null.
 * @return true if the given {@code type} is a primitive wrapper ({@link Boolean},  {@link Byte},  {@link Character},  {@link Short}, {@link Integer},  {@link Long},  {@link Double},  {@link Float}).
 * @since 3.1
 */
/** 
 * <p>Checks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p> <p><strong>Since Lang 3.0,</strong> this method will default behavior for calculating assignability between primitive and wrapper types <em>corresponding to the running Java version</em>; i.e. autoboxing will be the default behavior in VMs running Java versions >= 1.5.</p>
 * @param cls  the Class to check, may be null
 * @param toClass  the Class to try to assign into, returns false if null
 * @return {@code true} if assignment possible
 */
/** 
 * <p>Checks if one  {@code Class} can be assigned to a variable ofanother  {@code Class}.</p> <p>Unlike the  {@link Class#isAssignableFrom(java.lang.Class)} method,this method takes into account widenings of primitive classes and {@code null}s.</p> <p>Primitive widenings allow an int to be assigned to a long, float or double. This method returns the correct result for these cases.</p> <p> {@code Null} may be assigned to any reference type. This methodwill return  {@code true} if {@code null} is passed in and thetoClass is non-primitive.</p> <p>Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionwidening primitive or widening reference conversion. See <em><a href="http://docs.oracle.com/javase/specs/">The Java Language Specification</a></em>, sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>
 * @param cls  the Class to check, may be null
 * @param toClass  the Class to try to assign into, returns false if null
 * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers
 * @return {@code true} if assignment possible
 */
//
//
//
/** 
 * <p>Converts the specified primitive Class object to its corresponding wrapper Class object.</p> <p>NOTE: From v2.2, this method handles  {@code Void.TYPE}, returning  {@code Void.TYPE}.</p>
 * @param cls  the class to convert, may be null
 * @return the wrapper class for {@code cls} or {@code cls} if{@code cls} is not a primitive. {@code null} if null input.
 * @since 2.1
 */
/** 
 * <p>Converts the specified array of primitive Class objects to an array of its corresponding wrapper Class objects.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the wrapper class orthe original class if class is not a primitive.  {@code null} if null input.Empty array if an empty array passed in.
 * @since 2.1
 */
/** 
 * <p>Converts the specified wrapper class to its corresponding primitive class.</p> <p>This method is the counter part of  {@code primitiveToWrapper()}. If the passed in class is a wrapper class for a primitive type, this primitive type will be returned (e.g.  {@code Integer.TYPE} for{@code Integer.class}). For other classes, or if the parameter is <b>null</b>, the return value is <b>null</b>.</p>
 * @param cls the class to convert, may be <b>null</b>
 * @return the corresponding primitive type if {@code cls} is awrapper class, <b>null</b> otherwise
 * @see #primitiveToWrapper(Class)
 * @since 2.4
 */
/** 
 * <p>Converts the specified array of wrapper Class objects to an array of its corresponding primitive Class objects.</p> <p>This method invokes  {@code wrapperToPrimitive()} for each elementof the passed in array.</p>
 * @param classes  the class array to convert, may be null or empty
 * @return an array which contains for each given class, the primitive class or<b>null</b> if the original class is not a wrapper class.  {@code null} if null input.Empty array if an empty array passed in.
 * @see #wrapperToPrimitive(Class)
 * @since 2.4
 */
//
//
/** 
 * <p>Is the specified class an inner class or static nested class.</p>
 * @param cls  the class to check, may be null
 * @return {@code true} if the class is an inner or static nested class,false if not or  {@code null}
 */
//
//
/** 
 * Returns the class represented by  {@code className} using the{@code classLoader}.  This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by {@code className} using the {@code classLoader}
 * @throws ClassNotFoundException if the class is not found
 */
//
//
//
/** 
 * Returns the (initialized) class represented by  {@code className}using the  {@code classLoader}.  This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param classLoader  the class loader to use to load the class
 * @param className  the class name
 * @return the class represented by {@code className} using the {@code classLoader}
 * @throws ClassNotFoundException if the class is not found
 */
/** 
 * Returns the (initialized) class represented by  {@code className}using the current thread's context class loader. This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param className  the class name
 * @return the class represented by {@code className} using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */
/** 
 * Returns the class represented by  {@code className} using thecurrent thread's context class loader. This implementation supports the syntaxes " {@code java.util.Map.Entry[]}", " {@code java.util.Map$Entry[]}", " {@code [Ljava.util.Map.Entry;}", and " {@code [Ljava.util.Map$Entry;}".
 * @param className  the class name
 * @param initialize  whether the class must be initialized
 * @return the class represented by {@code className} using the current thread's context class loader
 * @throws ClassNotFoundException if the class is not found
 */
//
//
/** 
 * <p>Returns the desired Method much like  {@code Class.getMethod}, however it ensures that the returned Method is from a public class or interface and not from an anonymous inner class. This means that the Method is invokable and doesn't fall foul of Java bug <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957">4071957</a>). <code><pre>Set set = Collections.unmodifiableSet(...); Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); Object result = method.invoke(set, new Object[]);</pre></code> </p>
 * @param cls  the class to check, not null
 * @param methodName  the name of the method
 * @param parameterTypes  the list of parameters
 * @return the method
 * @throws NullPointerException if the class is null
 * @throws SecurityException if a security violation occurred
 * @throws NoSuchMethodException if the method is not found in the given classor if the metothod doen't conform with the requirements
 */
//
/** 
 * Converts a class name to a JLS style class name.
 * @param className  the class name
 * @return the converted name
 */
/** 
 * <p>Converts an array of  {@code Object} in to an array of {@code Class} objects.If any of these objects is null, a null element will be inserted into the array.</p> <p>This method returns  {@code null} for a {@code null} input array.</p>
 * @param array an {@code Object} array
 * @return a {@code Class} array, {@code null} if null array input
 * @since 2.4
 */
//
//
/** 
 * <p>Gets the canonical name minus the package name for an  {@code Object}.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the canonical name of the object without the package name, or the null value
 * @since 2.4
 */
/** 
 * <p>Gets the canonical name minus the package name from a  {@code Class}.</p>
 * @param cls  the class to get the short name for.
 * @return the canonical name without the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Gets the canonical name minus the package name from a String.</p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p>
 * @param canonicalName  the class name to get the short name for
 * @return the canonical name of the class without the package name or an empty string
 * @since 2.4
 */
//
//
/** 
 * <p>Gets the package name from the canonical name of an  {@code Object}.</p>
 * @param object  the class to get the package name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the package name of the object, or the null value
 * @since 2.4
 */
/** 
 * <p>Gets the package name from the canonical name of a  {@code Class}.</p>
 * @param cls  the class to get the package name for, may be {@code null}.
 * @return the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Gets the package name from the canonical name. </p> <p>The string passed in is assumed to be a canonical name - it is not checked.</p> <p>If the class is unpackaged, return an empty string.</p>
 * @param canonicalName  the canonical name to get the package name for, may be {@code null}
 * @return the package name or an empty string
 * @since 2.4
 */
/** 
 * <p>Converts a given name of class into canonical format. If name of class is not a name of array class it returns unchanged name.</p> <p>Example: <ul> <li> {@code getCanonicalName("[I") = "int[]"}</li> <li> {@code getCanonicalName("[Ljava.lang.String;") = "java.lang.String[]"}</li> <li> {@code getCanonicalName("java.lang.String") = "java.lang.String"}</li> </ul> </p>
 * @param className the name of class
 * @return canonical form of class name
 * @since 2.4
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4e51eda7
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2862271a

#TRAVERSE
LEFTCHILD: CLASS: ClassUtils
RIGHTCHILD: CLASS: ClassUtils
##SNODE L: CLASS: ClassUtils
##SNODE L: CLASS: ClassUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2419fe6f
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@78fb72cb

##TRAVERSE
LEFTCHILD: FIELD: primitiveWrapperMap : Map<Class<?>,Class<?>>
RIGHTCHILD: FIELD: primitiveWrapperMap : Map<Class<?>,Class<?>>
###SNODE L: FIELD: primitiveWrapperMap : Map<Class<?>,Class<?>>
###SNODE L: FIELD: primitiveWrapperMap : Map<Class<?>,Class<?>>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: PACKAGE_SEPARATOR_CHAR : char
RIGHTCHILD: FIELD: PACKAGE_SEPARATOR_CHAR : char
###SNODE L: FIELD: PACKAGE_SEPARATOR_CHAR : char
###SNODE L: FIELD: PACKAGE_SEPARATOR_CHAR : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: convertClassesToClassNames(List<Class<?>>)
RIGHTCHILD: METHOD: convertClassesToClassNames(List<Class<?>>)
###SNODE L: METHOD: convertClassesToClassNames(List<Class<?>>)
###SNODE L: METHOD: convertClassesToClassNames(List<Class<?>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getAllSuperclasses(Class<?>)
RIGHTCHILD: METHOD: getAllSuperclasses(Class<?>)
###SNODE L: METHOD: getAllSuperclasses(Class<?>)
###SNODE L: METHOD: getAllSuperclasses(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getClass(String,boolean)
RIGHTCHILD: METHOD: getClass(String,boolean)
###SNODE L: METHOD: getClass(String,boolean)
###SNODE L: METHOD: getClass(String,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: INNER_CLASS_SEPARATOR : String
RIGHTCHILD: FIELD: INNER_CLASS_SEPARATOR : String
###SNODE L: FIELD: INNER_CLASS_SEPARATOR : String
###SNODE L: FIELD: INNER_CLASS_SEPARATOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: primitivesToWrappers(Class<?>)
RIGHTCHILD: METHOD: primitivesToWrappers(Class<?>)
###SNODE L: METHOD: primitivesToWrappers(Class<?>)
###SNODE L: METHOD: primitivesToWrappers(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toCanonicalName(String)
RIGHTCHILD: METHOD: toCanonicalName(String)
###SNODE L: METHOD: toCanonicalName(String)
###SNODE L: METHOD: toCanonicalName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageName(Object,String)
RIGHTCHILD: METHOD: getPackageName(Object,String)
###SNODE L: METHOD: getPackageName(Object,String)
###SNODE L: METHOD: getPackageName(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortClassName(Object,String)
RIGHTCHILD: METHOD: getShortClassName(Object,String)
###SNODE L: METHOD: getShortClassName(Object,String)
###SNODE L: METHOD: getShortClassName(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: wrapperToPrimitive(Class<?>)
RIGHTCHILD: METHOD: wrapperToPrimitive(Class<?>)
###SNODE L: METHOD: wrapperToPrimitive(Class<?>)
###SNODE L: METHOD: wrapperToPrimitive(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getAllInterfaces(Class<?>,HashSet<Class<?>>)
RIGHTCHILD: METHOD: getAllInterfaces(Class<?>,HashSet<Class<?>>)
###SNODE L: METHOD: getAllInterfaces(Class<?>,HashSet<Class<?>>)
###SNODE L: METHOD: getAllInterfaces(Class<?>,HashSet<Class<?>>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getClass(ClassLoader,String,boolean)
RIGHTCHILD: METHOD: getClass(ClassLoader,String,boolean)
###SNODE L: METHOD: getClass(ClassLoader,String,boolean)
###SNODE L: METHOD: getClass(ClassLoader,String,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPublicMethod(Class<?>,String,Class<?>)
RIGHTCHILD: METHOD: getPublicMethod(Class<?>,String,Class<?>)
###SNODE L: METHOD: getPublicMethod(Class<?>,String,Class<?>)
###SNODE L: METHOD: getPublicMethod(Class<?>,String,Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortCanonicalName(Object,String)
RIGHTCHILD: METHOD: getShortCanonicalName(Object,String)
###SNODE L: METHOD: getShortCanonicalName(Object,String)
###SNODE L: METHOD: getShortCanonicalName(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageName(Class<?>)
RIGHTCHILD: METHOD: getPackageName(Class<?>)
###SNODE L: METHOD: getPackageName(Class<?>)
###SNODE L: METHOD: getPackageName(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: wrappersToPrimitives(Class<?>)
RIGHTCHILD: METHOD: wrappersToPrimitives(Class<?>)
###SNODE L: METHOD: wrappersToPrimitives(Class<?>)
###SNODE L: METHOD: wrappersToPrimitives(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageCanonicalName(Object,String)
RIGHTCHILD: METHOD: getPackageCanonicalName(Object,String)
###SNODE L: METHOD: getPackageCanonicalName(Object,String)
###SNODE L: METHOD: getPackageCanonicalName(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignable(Class<?>[],Class<?>[],boolean)
RIGHTCHILD: METHOD: isAssignable(Class<?>[],Class<?>[],boolean)
###SNODE L: METHOD: isAssignable(Class<?>[],Class<?>[],boolean)
###SNODE L: METHOD: isAssignable(Class<?>[],Class<?>[],boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isPrimitiveWrapper(Class<?>)
RIGHTCHILD: METHOD: isPrimitiveWrapper(Class<?>)
###SNODE L: METHOD: isPrimitiveWrapper(Class<?>)
###SNODE L: METHOD: isPrimitiveWrapper(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: ClassUtils()
RIGHTCHILD: CONSTRUCTOR: ClassUtils()
###SNODE L: CONSTRUCTOR: ClassUtils()
###SNODE L: CONSTRUCTOR: ClassUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortClassName(String)
RIGHTCHILD: METHOD: getShortClassName(String)
###SNODE L: METHOD: getShortClassName(String)
###SNODE L: METHOD: getShortClassName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getAllInterfaces(Class<?>)
RIGHTCHILD: METHOD: getAllInterfaces(Class<?>)
###SNODE L: METHOD: getAllInterfaces(Class<?>)
###SNODE L: METHOD: getAllInterfaces(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: wrapperPrimitiveMap : Map<Class<?>,Class<?>>
RIGHTCHILD: FIELD: wrapperPrimitiveMap : Map<Class<?>,Class<?>>
###SNODE L: FIELD: wrapperPrimitiveMap : Map<Class<?>,Class<?>>
###SNODE L: FIELD: wrapperPrimitiveMap : Map<Class<?>,Class<?>>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getSimpleName(Object,String)
RIGHTCHILD: METHOD: getSimpleName(Object,String)
###SNODE L: METHOD: getSimpleName(Object,String)
###SNODE L: METHOD: getSimpleName(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageName(String)
RIGHTCHILD: METHOD: getPackageName(String)
###SNODE L: METHOD: getPackageName(String)
###SNODE L: METHOD: getPackageName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: abbreviationMap : Map<String,String>
RIGHTCHILD: FIELD: abbreviationMap : Map<String,String>
###SNODE L: FIELD: abbreviationMap : Map<String,String>
###SNODE L: FIELD: abbreviationMap : Map<String,String>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: INNER_CLASS_SEPARATOR_CHAR : char
RIGHTCHILD: FIELD: INNER_CLASS_SEPARATOR_CHAR : char
###SNODE L: FIELD: INNER_CLASS_SEPARATOR_CHAR : char
###SNODE L: FIELD: INNER_CLASS_SEPARATOR_CHAR : char
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: primitiveToWrapper(Class<?>)
RIGHTCHILD: METHOD: primitiveToWrapper(Class<?>)
###SNODE L: METHOD: primitiveToWrapper(Class<?>)
###SNODE L: METHOD: primitiveToWrapper(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getClass(ClassLoader,String)
RIGHTCHILD: METHOD: getClass(ClassLoader,String)
###SNODE L: METHOD: getClass(ClassLoader,String)
###SNODE L: METHOD: getClass(ClassLoader,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortCanonicalName(String)
RIGHTCHILD: METHOD: getShortCanonicalName(String)
###SNODE L: METHOD: getShortCanonicalName(String)
###SNODE L: METHOD: getShortCanonicalName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignable(Class<?>,Class<?>,boolean)
RIGHTCHILD: METHOD: isAssignable(Class<?>,Class<?>,boolean)
###SNODE L: METHOD: isAssignable(Class<?>,Class<?>,boolean)
###SNODE L: METHOD: isAssignable(Class<?>,Class<?>,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isInnerClass(Class<?>)
RIGHTCHILD: METHOD: isInnerClass(Class<?>)
###SNODE L: METHOD: isInnerClass(Class<?>)
###SNODE L: METHOD: isInnerClass(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignable(Class<?>[],Class<?>)
RIGHTCHILD: METHOD: isAssignable(Class<?>[],Class<?>)
###SNODE L: METHOD: isAssignable(Class<?>[],Class<?>)
###SNODE L: METHOD: isAssignable(Class<?>[],Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortClassName(Class<?>)
RIGHTCHILD: METHOD: getShortClassName(Class<?>)
###SNODE L: METHOD: getShortClassName(Class<?>)
###SNODE L: METHOD: getShortClassName(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getClass(String)
RIGHTCHILD: METHOD: getClass(String)
###SNODE L: METHOD: getClass(String)
###SNODE L: METHOD: getClass(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toClass(Object)
RIGHTCHILD: METHOD: toClass(Object)
###SNODE L: METHOD: toClass(Object)
###SNODE L: METHOD: toClass(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageCanonicalName(String)
RIGHTCHILD: METHOD: getPackageCanonicalName(String)
###SNODE L: METHOD: getPackageCanonicalName(String)
###SNODE L: METHOD: getPackageCanonicalName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getSimpleName(Class<?>)
RIGHTCHILD: METHOD: getSimpleName(Class<?>)
###SNODE L: METHOD: getSimpleName(Class<?>)
###SNODE L: METHOD: getSimpleName(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getCanonicalName(String)
RIGHTCHILD: METHOD: getCanonicalName(String)
###SNODE L: METHOD: getCanonicalName(String)
###SNODE L: METHOD: getCanonicalName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getShortCanonicalName(Class<?>)
RIGHTCHILD: METHOD: getShortCanonicalName(Class<?>)
###SNODE L: METHOD: getShortCanonicalName(Class<?>)
###SNODE L: METHOD: getShortCanonicalName(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: reverseAbbreviationMap : Map<String,String>
RIGHTCHILD: FIELD: reverseAbbreviationMap : Map<String,String>
###SNODE L: FIELD: reverseAbbreviationMap : Map<String,String>
###SNODE L: FIELD: reverseAbbreviationMap : Map<String,String>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getPackageCanonicalName(Class<?>)
RIGHTCHILD: METHOD: getPackageCanonicalName(Class<?>)
###SNODE L: METHOD: getPackageCanonicalName(Class<?>)
###SNODE L: METHOD: getPackageCanonicalName(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: addAbbreviation(String,String)
RIGHTCHILD: METHOD: addAbbreviation(String,String)
###SNODE L: METHOD: addAbbreviation(String,String)
###SNODE L: METHOD: addAbbreviation(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isPrimitiveOrWrapper(Class<?>)
RIGHTCHILD: METHOD: isPrimitiveOrWrapper(Class<?>)
###SNODE L: METHOD: isPrimitiveOrWrapper(Class<?>)
###SNODE L: METHOD: isPrimitiveOrWrapper(Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: PACKAGE_SEPARATOR : String
RIGHTCHILD: FIELD: PACKAGE_SEPARATOR : String
###SNODE L: FIELD: PACKAGE_SEPARATOR : String
###SNODE L: FIELD: PACKAGE_SEPARATOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: convertClassNamesToClasses(List<String>)
RIGHTCHILD: METHOD: convertClassNamesToClasses(List<String>)
###SNODE L: METHOD: convertClassNamesToClasses(List<String>)
###SNODE L: METHOD: convertClassNamesToClasses(List<String>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignable(Class<?>,Class<?>)
RIGHTCHILD: METHOD: isAssignable(Class<?>,Class<?>)
###SNODE L: METHOD: isAssignable(Class<?>,Class<?>)
###SNODE L: METHOD: isAssignable(Class<?>,Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)13
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)618
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)619
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)189
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)535
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)620
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)621
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)66
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)622
-(2)-(8)-(3)-(2)623
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)624
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)55
-(2)-(8)-(3)-(2)-(2)289
-(2)-(8)-(3)-(2)-(3)622
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)170
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)625
-(2)-(8)-(3)-(2)626
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)627
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)55
-(2)-(8)-(3)-(2)-(2)289
-(2)-(8)-(3)-(2)-(3)625
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)190
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)57
-(2)-(8)-(2)-(1)-(1)58
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)57
-(2)-(8)-(2)-(1)-(1)58
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)628
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)189
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(3)-(1)-(1)58
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(3)-(1)-(1)58
-(2)-(8)51
-(2)-(8)-(1)22
-(2)-(8)-(2)50
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)176
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)176
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)163
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)163
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)169
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)169
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)166
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)166
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)168
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)168
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)171
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)171
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)174
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)174
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)172
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)68
-(2)-(8)-(2)-(0)-(0)-(3)-(0)24
-(2)-(8)-(2)-(0)-(0)-(3)-(0)-(1)172
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(0)628
-(2)-(8)-(2)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)629
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)-(2)-(0)-(0)-(3)2
-(2)-(8)-(2)-(0)-(0)-(3)-(0)629
-(2)-(8)-(2)-(0)-(0)-(3)-(1)164
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)190
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)57
-(2)-(8)-(2)-(1)-(1)58
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)57
-(2)-(8)-(2)-(1)-(1)58
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)630
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)189
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(3)-(1)-(1)58
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(3)-(2)-(3)-(1)-(1)58
-(2)-(8)51
-(2)-(8)-(1)22
-(2)-(8)-(2)50
-(2)-(8)-(2)-(0)78
-(2)-(8)-(2)-(0)-(0)61
-(2)-(8)-(2)-(0)-(0)-(0)23
-(2)-(8)-(2)-(0)-(0)-(1)59
-(2)-(8)-(2)-(0)-(0)-(1)-(0)24
-(2)-(8)-(2)-(0)-(0)-(1)-(0)-(1)57
-(2)-(8)-(2)-(0)-(0)-(1)-(1)58
-(2)-(8)-(2)-(0)-(0)-(3)631
-(2)-(8)-(2)-(0)-(1)33
-(2)-(8)-(2)-(0)-(1)-(0)628
-(2)-(8)-(2)-(0)-(1)-(2)632
-(2)-(8)-(2)-(0)-(2)50
-(2)-(8)-(2)-(0)-(2)-(0)64
-(2)-(8)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(2)-(0)-(2)-(0)-(1)59
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)24
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(1)57
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(1)58
-(2)-(8)-(2)-(0)-(2)-(0)-(2)29
-(2)-(8)-(2)-(0)-(2)-(0)-(2)-(0)633
-(2)-(8)-(2)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(2)-(0)-(2)-(0)-(2)-(2)-(0)628
-(2)-(8)-(2)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(2)-(0)-(2)-(0)-(2)-(2)-(3)631
-(2)-(8)-(2)-(0)-(2)-(0)77
-(2)-(8)-(2)-(0)-(2)-(0)-(0)112
-(2)-(8)-(2)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(2)-(0)-(2)-(0)-(0)-(0)-(0)631
-(2)-(8)-(2)-(0)-(2)-(0)-(0)-(0)-(2)103
-(2)-(8)-(2)-(0)-(2)-(0)-(0)-(0)-(3)633
-(2)-(8)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)630
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)633
-(2)-(8)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(3)631
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)190
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)634
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)189
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)190
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)635
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)189
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)636
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)453
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)637
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)634
-(2)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(0)-(3)453
-(2)-(8)-(12)-(0)-(0)-(3)637
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)635
-(2)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(0)-(3)637
-(2)-(8)-(12)-(0)-(0)-(3)453
-(2)-(8)51
-(2)-(8)-(1)22
-(2)-(8)-(2)50
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)638
-(2)-(8)-(2)-(0)-(0)-(3)639
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)640
-(2)-(8)-(2)-(0)-(0)-(3)641
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)642
-(2)-(8)-(2)-(0)-(0)-(3)643
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)644
-(2)-(8)-(2)-(0)-(0)-(3)645
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)646
-(2)-(8)-(2)-(0)-(0)-(3)647
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)648
-(2)-(8)-(2)-(0)-(0)-(3)649
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)650
-(2)-(8)-(2)-(0)-(0)-(3)651
-(2)-(8)-(2)-(0)34
-(2)-(8)-(2)-(0)-(0)33
-(2)-(8)-(2)-(0)-(0)-(2)636
-(2)-(8)-(2)-(0)-(0)-(3)652
-(2)-(8)-(2)-(0)-(0)-(3)653
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)66
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)56
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)56
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)232
-(2)-(8)-(12)-(0)-(0)-(3)-(2)154
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)56
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)56
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)60
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)56
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)655
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)47
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)657
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)655
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)658
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)436
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)659
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)635
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)660
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)635
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)654
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)661
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(2)-(2)275
-(2)-(8)-(12)-(0)-(2)-(2)-(3)622
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)662
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)625
-(2)-(8)-(12)-(0)-(2)-(2)-(3)83
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)80
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(0)661
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)218
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)-(0)661
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(2)-(2)526
-(2)-(8)-(12)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)661
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)662
-(2)-(8)-(12)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)663
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)664
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)625
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)622
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(0)-(1)655
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)665
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(2)665
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)665
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)665
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)232
-(2)-(8)-(12)-(0)-(0)-(3)-(2)154
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)666
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)666
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)232
-(2)-(8)-(12)-(0)-(0)-(3)-(2)154
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)666
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)666
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)60
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)666
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(1)657
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(0)-(1)436
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)-(1)659
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(2)-(2)275
-(2)-(8)-(12)-(0)-(2)-(2)-(3)622
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)178
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)667
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)59
-(2)-(8)-(4)-(1)-(0)24
-(2)-(8)-(4)-(1)-(0)-(1)57
-(2)-(8)-(4)-(1)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)669
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)60
-(2)-(8)-(12)-(0)-(2)-(2)-(2)670
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)669
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)669
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)669
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)669
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)670
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)668
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)67
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)59
-(2)-(8)-(4)-(1)-(0)24
-(2)-(8)-(4)-(1)-(0)-(1)57
-(2)-(8)-(4)-(1)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)620
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)671
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)620
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)67
-(2)-(8)-(12)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(0)-(3)671
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(0)-(3)-(1)59
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(4)671
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)67
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)535
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)-(1)58
-(2)-(8)-(7)-(3)671
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)672
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)673
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)672
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)671
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(2)67
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)671
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)670
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)674
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)59
-(2)-(8)-(4)-(1)-(0)24
-(2)-(8)-(4)-(1)-(0)-(1)57
-(2)-(8)-(4)-(1)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)621
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)55
-(2)-(8)-(7)-(3)675
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)675
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)-(2)-(4)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)675
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(2)559
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(1)675
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)128
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(0)57
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(2)676
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)140
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)668
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)677
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)621
-(2)-(8)-(7)-(1)-(1)59
-(2)-(8)-(7)-(1)-(1)-(0)24
-(2)-(8)-(7)-(1)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)-(1)58
-(2)-(8)-(7)-(3)668
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)675
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)-(2)-(4)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(2)559
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)668
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)675
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)675
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)-(0)60
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)675
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)678
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)59
-(2)-(8)-(7)-(1)-(0)-(0)24
-(2)-(8)-(7)-(1)-(0)-(0)-(1)57
-(2)-(8)-(7)-(1)-(0)-(1)58
-(2)-(8)-(7)-(3)679
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)680
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)678
-(2)-(8)-(12)-(0)-(0)-(3)679
-(2)-(8)-(12)-(0)-(0)-(3)680
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)681
-(2)-(8)-(12)-(0)-(0)-(3)-(2)682
-(2)-(8)-(12)-(0)-(0)-(3)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)683
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)684
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)678
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)59
-(2)-(8)-(7)-(1)-(0)-(0)24
-(2)-(8)-(7)-(1)-(0)-(0)-(1)57
-(2)-(8)-(7)-(1)-(0)-(1)58
-(2)-(8)-(7)-(3)679
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)59
-(2)-(8)-(7)-(1)-(0)-(0)24
-(2)-(8)-(7)-(1)-(0)-(0)-(1)57
-(2)-(8)-(7)-(1)-(0)-(1)58
-(2)-(8)-(7)-(3)680
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)685
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(0)-(2)262
-(2)-(8)-(12)-(0)-(0)-(0)-(3)679
-(2)-(8)-(12)-(0)-(0)-(0)-(3)680
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)679
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)679
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)198
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)680
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)680
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)198
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)679
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)678
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)679
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)680
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)685
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)686
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)687
-(2)-(8)-(12)-(0)-(0)-(1)-(3)107
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)687
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)630
-(2)-(8)-(12)-(0)-(0)-(2)660
-(2)-(8)-(12)-(0)-(0)-(3)107
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)678
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)688
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)678
-(2)-(8)-(12)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)681
-(2)-(8)-(12)-(0)-(0)-(3)-(2)682
-(2)-(8)-(12)-(0)-(0)-(3)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)683
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)684
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)678
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)688
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)685
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)688
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)688
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)685
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)688
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)689
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)688
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)690
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)688
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)176
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)166
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)163
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)60
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)166
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)172
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(0)-(1)164
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)-(3)688
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)688
-(2)-(8)-(12)-(0)-(0)-(2)69
-(2)-(8)-(12)-(0)-(0)-(3)60
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)689
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)691
-(2)-(8)-(12)-(0)-(2)-(2)60
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)-(2)147
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)691
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)628
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)60
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)691
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)692
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)59
-(2)-(8)-(4)-(0)-(0)24
-(2)-(8)-(4)-(0)-(0)-(1)57
-(2)-(8)-(4)-(0)-(1)58
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)668
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)668
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)693
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)668
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)693
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)689
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)668
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)693
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)690
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)630
-(2)-(8)-(12)-(0)-(0)-(2)331
-(2)-(8)-(12)-(0)-(0)-(3)60
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)694
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)59
-(2)-(8)-(4)-(0)-(0)24
-(2)-(8)-(4)-(0)-(0)-(1)57
-(2)-(8)-(4)-(0)-(1)58
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)668
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)668
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)693
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)668
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)693
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)690
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)668
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)693
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)695
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)696
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)154
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)697
-(2)-(8)-(7)-(3)698
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)699
-(2)-(8)-(10)700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)701
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)634
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)660
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)702
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)47
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(0)634
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(3)654
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)701
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(2)676
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(3)702
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(3)699
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(3)698
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)146
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)701
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)57
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(2)676
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(2)703
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(3)654
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)699
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)698
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)701
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)704
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(2)275
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(3)622
-(2)-(8)-(12)-(0)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)704
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)128
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)698
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(3)704
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)625
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)-(3)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)-(3)-(0)704
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)699
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(0)-(3)705
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)126
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)154
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)697
-(2)-(8)-(7)-(3)698
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(10)700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)698
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)154
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(10)700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)154
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)699
-(2)-(8)-(10)700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)697
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)706
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)707
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)708
-(2)-(8)-(12)-(0)-(2)-(2)-(2)709
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)697
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)710
-(2)-(8)-(12)-(0)-(2)-(2)83
-(2)-(8)-(12)-(0)-(2)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)706
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)68
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)66
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)711
-(2)-(8)-(12)-(0)-(2)-(2)-(2)706
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)710
-(2)-(8)-(12)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(0)-(3)699
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)712
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)13
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)713
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)714
-(2)-(8)-(10)715
-(2)-(8)-(10)716
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)717
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)60
-(2)-(8)-(12)-(0)-(2)-(2)-(2)718
-(2)-(8)-(12)-(0)-(2)-(2)-(3)713
-(2)-(8)-(12)-(0)-(2)-(2)-(3)714
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)618
-(2)-(8)-(12)-(0)-(0)-(2)719
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)717
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)720
-(2)-(8)-(12)-(0)-(0)-(3)-(2)721
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)717
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)59
-(2)-(8)-(12)-(0)-(1)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(1)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)722
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)58
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)722
-(2)-(8)-(12)-(0)-(0)-(2)300
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)67
-(2)-(8)-(12)-(0)-(0)-(3)-(3)60
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)722
-(2)-(8)-(12)-(0)-(0)-(2)300
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)667
-(2)-(8)-(12)-(0)-(0)-(3)-(3)60
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(3)723
-(2)-(8)-(12)-(0)-(1)722
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)112
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)618
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(2)719
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(3)-(0)723
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(3)-(2)721
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)724
-(2)-(8)-(12)-(0)-(2)-(0)128
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)724
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)723
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)718
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)713
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)714
-(2)-(8)-(12)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)716
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)618
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)719
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)-(0)724
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)-(2)720
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(2)721
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)724
-(2)-(8)-(12)-(0)136
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)716
-(2)-(8)-(12)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(0)-(4)-(0)725
-(2)-(8)-(12)-(0)-(0)-(4)-(1)713
-(2)-(8)-(12)-(0)-(0)-(4)-(2)726
-(2)-(8)-(12)-(0)-(0)-(4)-(2)33
-(2)-(8)-(12)-(0)-(0)-(4)-(2)-(0)195
-(2)-(8)-(12)-(0)-(0)-(4)-(2)-(2)88
-(2)-(8)-(12)-(0)-(0)-(4)-(2)-(3)714
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)703
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)563
-(2)-(8)-(12)-(0)-(0)-(1)-(2)727
-(2)-(8)-(12)-(0)-(0)-(1)-(3)654
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)728
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)729
-(2)-(8)-(12)-(0)-(2)-(0)-(3)658
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)730
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(1)-(0)270
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)658
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(1)238
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)730
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)47
-(2)-(8)-(12)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)637
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)634
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(3)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)637
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)730
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)637
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)730
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(3)731
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(3)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(3)732
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(0)730
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)-(2)88
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)654
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)688
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)59
-(2)-(8)-(4)-(0)-(0)24
-(2)-(8)-(4)-(0)-(0)-(1)57
-(2)-(8)-(4)-(0)-(1)58
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)198
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)58
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)668
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)57
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)220
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)668
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)83
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)-(2)154
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)668
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)733
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)733
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)733
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)733
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)60
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)733
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)734
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)66
-(2)-(8)-(12)-(0)-(0)-(2)56
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)735
-(2)-(8)-(12)-(0)-(0)-(3)-(3)734
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)736
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)392
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)736
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)736
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)60
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)60
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)736
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)60
-(2)-(8)-(12)-(0)-(0)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)736
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)734
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)66
-(2)-(8)-(12)-(0)-(0)-(2)666
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)735
-(2)-(8)-(12)-(0)-(0)-(3)-(3)734
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)735
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)654
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)563
-(2)-(8)-(12)-(0)-(0)-(1)-(2)727
-(2)-(8)-(12)-(0)-(0)-(1)-(3)654
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)737
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)270
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)47
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)737
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)737
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(3)731
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)83
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(2)729
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(3)732
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(1)256
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(2)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(2)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(2)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)635
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)331
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(0)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(2)526
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(3)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)-(3)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)738
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(2)-(4)654
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(1)737
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)-(0)-(0)-(0)738
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)-(0)-(0)-(3)658
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)738
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(2)88

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/concurrent (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/concurrent (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/** 
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.
 */
/** 
 * <p> Static methods to convert a type into another, with endianness and bit ordering awareness. </p> <p> The methods names follow a naming rule:</br> {@code <source type>[source endianness][source bit ordering]To<destination type>[destination endianness][destination bit ordering]}</p> <p> Source/destination type fields is one of the following: <ul> <li>binary: an array of booleans</li> <li>byte or byteArray</li> <li>int or intArray</li> <li>long or longArray</li> <li>hex: a String containing hexadecimal digits (lowercase in destination)</li> <li>hexDigit: a Char containing a hexadecimal digit (lowercase in destination)</li> <li>uuid</li> </ul> Endianness field: little endian is the default, in this case the field is absent. In case of big endian, the field is "Be".</br> Bit ordering: Lsb0 is the default, in this case the field is absent. In case of Msb0, the field is "Msb0". </p> <p> Example: intBeMsb0ToHex convert an int with big endian byte order and Msb0 bit order into its hexadecimal string representation </p> <p> Most of the methods provide only default encoding for destination, this limits the number of ways to do one thing. Unless you are dealing with data from/to outside of the JVM platform, you should not need to use "Be" and "Msb0" methods. </p> <p> Development status: work on going, only a part of the little endian, Lsb0 methods implemented so far. </p>
 * @since Lang 3.2
 * @version $Id$
 */
/** 
 * <p> Converts a hexadecimal digit into an int using the default (Lsb0) bit ordering. </p> <p> '1' is converted to 1 </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return an int equals to {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
/** 
 * <p> Converts a hexadecimal digit into an int using the Msb0 bit ordering. </p> <p> '1' is converted to 8 </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return an int equals to {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts a hexadecimal digit into binary (represented as boolean array) using the default (Lsb0) bit ordering. </p> <p> '1' is converted as follow: (1, 0, 0, 0) </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return a boolean array with the binary representation of {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0 bit ordering. </p> <p> '1' is converted as follow: (0, 0, 0, 1) </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return a boolean array with the binary representation of {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '1' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '1' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '8' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty, {@code src.length < 4} or{@code src.length > 8}
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '8' (1,0,0,1,1,0,1,0) with srcPos = 3 is converted to 'D' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty, {@code src.length > 8} or{@code src.length - srcPos < 4}
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts the first 4 bits of a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal digit. </p> <p> (1, 0, 0, 0) is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0) is converted to '4' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal digit. </p> <p> (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,1,0,1,0,0) with srcPos = 2 is converted to '5' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts the 4 lsb of an int to a hexadecimal digit. </p> <p> 0 returns '0' </p> <p> 1 returns '1' </p> <p> 10 returns 'A' and so on... </p>
 * @param nibble the 4 bits to convert
 * @return a hexadecimal digit representing the 4 lsb of {@code nibble}
 * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}
 */
/** 
 * <p> Converts the 4 lsb of an int to a hexadecimal digit encoded using the Msb0 bit ordering. </p> <p> 0 returns '0' </p> <p> 1 returns '8' </p> <p> 10 returns '5' and so on... </p>
 * @param nibble the 4 bits to convert
 * @return a hexadecimal digit representing the 4 lsb of {@code nibble}
 * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}
 */
/** 
 * <p> Converts an array of int into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int array to convert
 * @param srcPos the position in {@code src}, in int unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nInts the number of ints to convert
 * @return a long containing the selected bits
 * @throws IllegalArgumentException if {@code (nInts-1)*32+dstPos >= 64}
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nInts > src.length}
 */
/** 
 * <p> Converts an array of short into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short array to convert
 * @param srcPos the position in {@code src}, in short unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nShorts the number of shorts to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}
 */
/** 
 * <p> Converts an array of short into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short array to convert
 * @param srcPos the position in {@code src}, in short unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nShorts the number of shorts to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}
 */
/** 
 * <p> Converts an array of byte into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nBytes the number of bytes to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of byte into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nBytes the number of bytes to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of byte into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nBytes the number of bytes to convert
 * @return a short containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of Char into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nHex the number of Chars to convert
 * @return a long containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 64}
 */
/** 
 * <p> Converts an array of Char into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nHex the number of Chars to convert
 * @return a int containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 32}
 */
/** 
 * <p> Converts an array of Char into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nHex the number of Chars to convert
 * @return a short containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 16}
 */
/** 
 * <p> Converts an array of Char into a byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination byte
 * @param dstPos the position of the lsb, in bits, in the result byte
 * @param nHex the number of Chars to convert
 * @return a byte containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 8}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nBools the number of booleans to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nBools the number of booleans to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nBools the number of booleans to convert
 * @return a short containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination byte
 * @param dstPos the position of the lsb, in bits, in the result byte
 * @param nBools the number of booleans to convert
 * @return a byte containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 8}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts a long into an array of int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nInts the number of ints to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null} and {@code nInts > 0}
 * @throws IllegalArgumentException if {@code (nInts-1)*32+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nInts > dst.length}
 */
/** 
 * <p> Converts a long into an array of short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}
 */
/** 
 * <p> Converts a int into an array of short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}
 */
/** 
 * <p> Converts a long into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a int into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a short into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a long into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 64}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a int into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 32}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a short into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 16}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a byte into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 8}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a long into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a int into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a short into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a byte into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 8}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts UUID into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the UUID to convert
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBytes > 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts bytes from an array into a UUID using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src} where to copy the result from
 * @return a UUID
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if array does not contain at least 16 bytes beginningwith  {@code srcPos}
 */
RIGHT COMMENTS
/** 
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.
 */
/** 
 * <p> Static methods to convert a type into another, with endianness and bit ordering awareness. </p> <p> The methods names follow a naming rule:</br> {@code <source type>[source endianness][source bit ordering]To<destination type>[destination endianness][destination bit ordering]}</p> <p> Source/destination type fields is one of the following: <ul> <li>binary: an array of booleans</li> <li>byte or byteArray</li> <li>int or intArray</li> <li>long or longArray</li> <li>hex: a String containing hexadecimal digits (lowercase in destination)</li> <li>hexDigit: a Char containing a hexadecimal digit (lowercase in destination)</li> <li>uuid</li> </ul> Endianness field: little endian is the default, in this case the field is absent. In case of big endian, the field is "Be".</br> Bit ordering: Lsb0 is the default, in this case the field is absent. In case of Msb0, the field is "Msb0". </p> <p> Example: intBeMsb0ToHex convert an int with big endian byte order and Msb0 bit order into its hexadecimal string representation </p> <p> Most of the methods provide only default encoding for destination, this limits the number of ways to do one thing. Unless you are dealing with data from/to outside of the JVM platform, you should not need to use "Be" and "Msb0" methods. </p> <p> Development status: work on going, only a part of the little endian, Lsb0 methods implemented so far. </p>
 * @since Lang 3.2
 * @version $Id$
 */
/** 
 * <p> Converts a hexadecimal digit into an int using the default (Lsb0) bit ordering. </p> <p> '1' is converted to 1 </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return an int equals to {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
/** 
 * <p> Converts a hexadecimal digit into an int using the Msb0 bit ordering. </p> <p> '1' is converted to 8 </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return an int equals to {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts a hexadecimal digit into binary (represented as boolean array) using the default (Lsb0) bit ordering. </p> <p> '1' is converted as follow: (1, 0, 0, 0) </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return a boolean array with the binary representation of {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0 bit ordering. </p> <p> '1' is converted as follow: (0, 0, 0, 1) </p>
 * @param hexDigit the hexadecimal digit to convert
 * @return a boolean array with the binary representation of {@code hexDigit}
 * @throws IllegalArgumentException if {@code hexDigit} is not a hexadecimal digit
 */
//
//
//
//
//
//
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '1' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '1' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '8' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty, {@code src.length < 4} or{@code src.length > 8}
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering. </p> <p> (1, 0, 0, 0) is converted as follow: '8' (1,0,0,1,1,0,1,0) with srcPos = 3 is converted to 'D' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty, {@code src.length > 8} or{@code src.length - srcPos < 4}
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts the first 4 bits of a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal digit. </p> <p> (1, 0, 0, 0) is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0) is converted to '4' </p>
 * @param src the binary to convert
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal digit. </p> <p> (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,1,0,1,0,0) with srcPos = 2 is converted to '5' </p>
 * @param src the binary to convert
 * @param srcPos the position of the lsb to start the conversion
 * @return a hexadecimal digit representing the selected bits
 * @throws IllegalArgumentException if {@code src} is empty
 * @throws NullPointerException if {@code src} is {@code null}
 */
/** 
 * <p> Converts the 4 lsb of an int to a hexadecimal digit. </p> <p> 0 returns '0' </p> <p> 1 returns '1' </p> <p> 10 returns 'A' and so on... </p>
 * @param nibble the 4 bits to convert
 * @return a hexadecimal digit representing the 4 lsb of {@code nibble}
 * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}
 */
/** 
 * <p> Converts the 4 lsb of an int to a hexadecimal digit encoded using the Msb0 bit ordering. </p> <p> 0 returns '0' </p> <p> 1 returns '8' </p> <p> 10 returns '5' and so on... </p>
 * @param nibble the 4 bits to convert
 * @return a hexadecimal digit representing the 4 lsb of {@code nibble}
 * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}
 */
/** 
 * <p> Converts an array of int into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int array to convert
 * @param srcPos the position in {@code src}, in int unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nInts the number of ints to convert
 * @return a long containing the selected bits
 * @throws IllegalArgumentException if {@code (nInts-1)*32+dstPos >= 64}
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nInts > src.length}
 */
/** 
 * <p> Converts an array of short into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short array to convert
 * @param srcPos the position in {@code src}, in short unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nShorts the number of shorts to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}
 */
/** 
 * <p> Converts an array of short into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short array to convert
 * @param srcPos the position in {@code src}, in short unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nShorts the number of shorts to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nShorts > src.length}
 */
/** 
 * <p> Converts an array of byte into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nBytes the number of bytes to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of byte into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nBytes the number of bytes to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of byte into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src}, in byte unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nBytes the number of bytes to convert
 * @return a short containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+dstPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBytes > src.length}
 */
/** 
 * <p> Converts an array of Char into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nHex the number of Chars to convert
 * @return a long containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 64}
 */
/** 
 * <p> Converts an array of Char into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nHex the number of Chars to convert
 * @return a int containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 32}
 */
/** 
 * <p> Converts an array of Char into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nHex the number of Chars to convert
 * @return a short containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 16}
 */
/** 
 * <p> Converts an array of Char into a byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the hex string to convert
 * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion
 * @param dstInit initial value of the destination byte
 * @param dstPos the position of the lsb, in bits, in the result byte
 * @param nHex the number of Chars to convert
 * @return a byte containing the selected bits
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 8}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a long using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination long
 * @param dstPos the position of the lsb, in bits, in the result long
 * @param nBools the number of booleans to convert
 * @return a long containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination int
 * @param dstPos the position of the lsb, in bits, in the result int
 * @param nBools the number of booleans to convert
 * @return a int containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination short
 * @param dstPos the position of the lsb, in bits, in the result short
 * @param nBools the number of booleans to convert
 * @return a short containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts binary (represented as boolean array) into a byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the binary to convert
 * @param srcPos the position in {@code src}, in boolean unit, from where to start the conversion
 * @param dstInit initial value of the destination byte
 * @param dstPos the position of the lsb, in bits, in the result byte
 * @param nBools the number of booleans to convert
 * @return a byte containing the selected bits
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+dstPos >= 8}
 * @throws ArrayIndexOutOfBoundsException if {@code srcPos + nBools > src.length}
 */
/** 
 * <p> Converts a long into an array of int using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nInts the number of ints to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null} and {@code nInts > 0}
 * @throws IllegalArgumentException if {@code (nInts-1)*32+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nInts > dst.length}
 */
/** 
 * <p> Converts a long into an array of short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}
 */
/** 
 * <p> Converts a int into an array of short using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nShorts the number of shorts to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nShorts-1)*16+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nShorts > dst.length}
 */
/** 
 * <p> Converts a long into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a int into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a short into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code (nBytes-1)*8+srcPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts a long into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 64}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a int into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 32}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a short into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 16}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a byte into an array of Char using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dstInit the initial value for the result String
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nHexs the number of Chars to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws IllegalArgumentException if {@code (nHexs-1)*4+srcPos >= 8}
 * @throws StringIndexOutOfBoundsException if {@code dst.init.length() < dstPos}
 */
/** 
 * <p> Converts a long into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the long to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 64}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a int into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the int to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 32}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a short into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the short to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts a byte into an array of boolean using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte to convert
 * @param srcPos the position in {@code src}, in bits, from where to start the conversion
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBools the number of booleans to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBools-1+srcPos >= 8}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBools > dst.length}
 */
/** 
 * <p> Converts UUID into an array of byte using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the UUID to convert
 * @param dst the destination array
 * @param dstPos the position in {@code dst} where to copy the result
 * @param nBytes the number of bytes to copy to {@code dst}, must be smaller or equal to the width of the input (from srcPos to msb)
 * @return {@code dst}
 * @throws NullPointerException if {@code dst} is {@code null}
 * @throws IllegalArgumentException if {@code nBytes > 16}
 * @throws ArrayIndexOutOfBoundsException if {@code dstPos + nBytes > dst.length}
 */
/** 
 * <p> Converts bytes from an array into a UUID using the default (little endian, Lsb0) byte and bit ordering. </p>
 * @param src the byte array to convert
 * @param srcPos the position in {@code src} where to copy the result from
 * @return a UUID
 * @throws NullPointerException if {@code src} is {@code null}
 * @throws IllegalArgumentException if array does not contain at least 16 bytes beginningwith  {@code srcPos}
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2431050d
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@441016d6

#TRAVERSE
LEFTCHILD: CLASS: Conversion
RIGHTCHILD: CLASS: Conversion
##SNODE L: CLASS: Conversion
##SNODE L: CLASS: Conversion
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@522f0bb8
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@468f2a6f

##TRAVERSE
LEFTCHILD: METHOD: binaryToHexDigitMsb0_4bits(boolean[],int)
RIGHTCHILD: METHOD: binaryToHexDigitMsb0_4bits(boolean[],int)
###SNODE L: METHOD: binaryToHexDigitMsb0_4bits(boolean[],int)
###SNODE L: METHOD: binaryToHexDigitMsb0_4bits(boolean[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexToLong(String,int,long,int,int)
RIGHTCHILD: METHOD: hexToLong(String,int,long,int,int)
###SNODE L: METHOD: hexToLong(String,int,long,int,int)
###SNODE L: METHOD: hexToLong(String,int,long,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToInt(boolean[],int,int,int,int)
RIGHTCHILD: METHOD: binaryToInt(boolean[],int,int,int,int)
###SNODE L: METHOD: binaryToInt(boolean[],int,int,int,int)
###SNODE L: METHOD: binaryToInt(boolean[],int,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: longToBinary(long,int,boolean[],int,int)
RIGHTCHILD: METHOD: longToBinary(long,int,boolean[],int,int)
###SNODE L: METHOD: longToBinary(long,int,boolean[],int,int)
###SNODE L: METHOD: longToBinary(long,int,boolean[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryBeMsb0ToHexDigit(boolean[],int)
RIGHTCHILD: METHOD: binaryBeMsb0ToHexDigit(boolean[],int)
###SNODE L: METHOD: binaryBeMsb0ToHexDigit(boolean[],int)
###SNODE L: METHOD: binaryBeMsb0ToHexDigit(boolean[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToLong(boolean[],int,long,int,int)
RIGHTCHILD: METHOD: binaryToLong(boolean[],int,long,int,int)
###SNODE L: METHOD: binaryToLong(boolean[],int,long,int,int)
###SNODE L: METHOD: binaryToLong(boolean[],int,long,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexToInt(String,int,int,int,int)
RIGHTCHILD: METHOD: hexToInt(String,int,int,int,int)
###SNODE L: METHOD: hexToInt(String,int,int,int,int)
###SNODE L: METHOD: hexToInt(String,int,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToByte(boolean[],int,byte,int,int)
RIGHTCHILD: METHOD: binaryToByte(boolean[],int,byte,int,int)
###SNODE L: METHOD: binaryToByte(boolean[],int,byte,int,int)
###SNODE L: METHOD: binaryToByte(boolean[],int,byte,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: longToByteArray(long,int,byte[],int,int)
RIGHTCHILD: METHOD: longToByteArray(long,int,byte[],int,int)
###SNODE L: METHOD: longToByteArray(long,int,byte[],int,int)
###SNODE L: METHOD: longToByteArray(long,int,byte[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryBeMsb0ToHexDigit(boolean[])
RIGHTCHILD: METHOD: binaryBeMsb0ToHexDigit(boolean[])
###SNODE L: METHOD: binaryBeMsb0ToHexDigit(boolean[])
###SNODE L: METHOD: binaryBeMsb0ToHexDigit(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexToShort(String,int,short,int,int)
RIGHTCHILD: METHOD: hexToShort(String,int,short,int,int)
###SNODE L: METHOD: hexToShort(String,int,short,int,int)
###SNODE L: METHOD: hexToShort(String,int,short,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteToBinary(byte,int,boolean[],int,int)
RIGHTCHILD: METHOD: byteToBinary(byte,int,boolean[],int,int)
###SNODE L: METHOD: byteToBinary(byte,int,boolean[],int,int)
###SNODE L: METHOD: byteToBinary(byte,int,boolean[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToHexDigitMsb0_4bits(boolean[])
RIGHTCHILD: METHOD: binaryToHexDigitMsb0_4bits(boolean[])
###SNODE L: METHOD: binaryToHexDigitMsb0_4bits(boolean[])
###SNODE L: METHOD: binaryToHexDigitMsb0_4bits(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToHexDigitMsb0(int)
RIGHTCHILD: METHOD: intToHexDigitMsb0(int)
###SNODE L: METHOD: intToHexDigitMsb0(int)
###SNODE L: METHOD: intToHexDigitMsb0(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexDigitMsb0ToBinary(char)
RIGHTCHILD: METHOD: hexDigitMsb0ToBinary(char)
###SNODE L: METHOD: hexDigitMsb0ToBinary(char)
###SNODE L: METHOD: hexDigitMsb0ToBinary(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: shortToByteArray(short,int,byte[],int,int)
RIGHTCHILD: METHOD: shortToByteArray(short,int,byte[],int,int)
###SNODE L: METHOD: shortToByteArray(short,int,byte[],int,int)
###SNODE L: METHOD: shortToByteArray(short,int,byte[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteToHex(byte,int,String,int,int)
RIGHTCHILD: METHOD: byteToHex(byte,int,String,int,int)
###SNODE L: METHOD: byteToHex(byte,int,String,int,int)
###SNODE L: METHOD: byteToHex(byte,int,String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteArrayToLong(byte[],int,long,int,int)
RIGHTCHILD: METHOD: byteArrayToLong(byte[],int,long,int,int)
###SNODE L: METHOD: byteArrayToLong(byte[],int,long,int,int)
###SNODE L: METHOD: byteArrayToLong(byte[],int,long,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexToByte(String,int,byte,int,int)
RIGHTCHILD: METHOD: hexToByte(String,int,byte,int,int)
###SNODE L: METHOD: hexToByte(String,int,byte,int,int)
###SNODE L: METHOD: hexToByte(String,int,byte,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToHex(int,int,String,int,int)
RIGHTCHILD: METHOD: intToHex(int,int,String,int,int)
###SNODE L: METHOD: intToHex(int,int,String,int,int)
###SNODE L: METHOD: intToHex(int,int,String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: longToShortArray(long,int,short[],int,int)
RIGHTCHILD: METHOD: longToShortArray(long,int,short[],int,int)
###SNODE L: METHOD: longToShortArray(long,int,short[],int,int)
###SNODE L: METHOD: longToShortArray(long,int,short[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToHexDigit(boolean[])
RIGHTCHILD: METHOD: binaryToHexDigit(boolean[])
###SNODE L: METHOD: binaryToHexDigit(boolean[])
###SNODE L: METHOD: binaryToHexDigit(boolean[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToBinary(int,int,boolean[],int,int)
RIGHTCHILD: METHOD: intToBinary(int,int,boolean[],int,int)
###SNODE L: METHOD: intToBinary(int,int,boolean[],int,int)
###SNODE L: METHOD: intToBinary(int,int,boolean[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: Conversion()
RIGHTCHILD: CONSTRUCTOR: Conversion()
###SNODE L: CONSTRUCTOR: Conversion()
###SNODE L: CONSTRUCTOR: Conversion()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexDigitMsb0ToInt(char)
RIGHTCHILD: METHOD: hexDigitMsb0ToInt(char)
###SNODE L: METHOD: hexDigitMsb0ToInt(char)
###SNODE L: METHOD: hexDigitMsb0ToInt(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToByteArray(int,int,byte[],int,int)
RIGHTCHILD: METHOD: intToByteArray(int,int,byte[],int,int)
###SNODE L: METHOD: intToByteArray(int,int,byte[],int,int)
###SNODE L: METHOD: intToByteArray(int,int,byte[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: shortToHex(short,int,String,int,int)
RIGHTCHILD: METHOD: shortToHex(short,int,String,int,int)
###SNODE L: METHOD: shortToHex(short,int,String,int,int)
###SNODE L: METHOD: shortToHex(short,int,String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteArrayToInt(byte[],int,int,int,int)
RIGHTCHILD: METHOD: byteArrayToInt(byte[],int,int,int,int)
###SNODE L: METHOD: byteArrayToInt(byte[],int,int,int,int)
###SNODE L: METHOD: byteArrayToInt(byte[],int,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToHexDigit(boolean[],int)
RIGHTCHILD: METHOD: binaryToHexDigit(boolean[],int)
###SNODE L: METHOD: binaryToHexDigit(boolean[],int)
###SNODE L: METHOD: binaryToHexDigit(boolean[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToHexDigit(int)
RIGHTCHILD: METHOD: intToHexDigit(int)
###SNODE L: METHOD: intToHexDigit(int)
###SNODE L: METHOD: intToHexDigit(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteArrayToShort(byte[],int,short,int,int)
RIGHTCHILD: METHOD: byteArrayToShort(byte[],int,short,int,int)
###SNODE L: METHOD: byteArrayToShort(byte[],int,short,int,int)
###SNODE L: METHOD: byteArrayToShort(byte[],int,short,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: longToIntArray(long,int,int[],int,int)
RIGHTCHILD: METHOD: longToIntArray(long,int,int[],int,int)
###SNODE L: METHOD: longToIntArray(long,int,int[],int,int)
###SNODE L: METHOD: longToIntArray(long,int,int[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexDigitToBinary(char)
RIGHTCHILD: METHOD: hexDigitToBinary(char)
###SNODE L: METHOD: hexDigitToBinary(char)
###SNODE L: METHOD: hexDigitToBinary(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: longToHex(long,int,String,int,int)
RIGHTCHILD: METHOD: longToHex(long,int,String,int,int)
###SNODE L: METHOD: longToHex(long,int,String,int,int)
###SNODE L: METHOD: longToHex(long,int,String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: shortArrayToInt(short[],int,int,int,int)
RIGHTCHILD: METHOD: shortArrayToInt(short[],int,int,int,int)
###SNODE L: METHOD: shortArrayToInt(short[],int,int,int,int)
###SNODE L: METHOD: shortArrayToInt(short[],int,int,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: uuidToByteArray(UUID,byte[],int,int)
RIGHTCHILD: METHOD: uuidToByteArray(UUID,byte[],int,int)
###SNODE L: METHOD: uuidToByteArray(UUID,byte[],int,int)
###SNODE L: METHOD: uuidToByteArray(UUID,byte[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: binaryToShort(boolean[],int,short,int,int)
RIGHTCHILD: METHOD: binaryToShort(boolean[],int,short,int,int)
###SNODE L: METHOD: binaryToShort(boolean[],int,short,int,int)
###SNODE L: METHOD: binaryToShort(boolean[],int,short,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: shortToBinary(short,int,boolean[],int,int)
RIGHTCHILD: METHOD: shortToBinary(short,int,boolean[],int,int)
###SNODE L: METHOD: shortToBinary(short,int,boolean[],int,int)
###SNODE L: METHOD: shortToBinary(short,int,boolean[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hexDigitToInt(char)
RIGHTCHILD: METHOD: hexDigitToInt(char)
###SNODE L: METHOD: hexDigitToInt(char)
###SNODE L: METHOD: hexDigitToInt(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: shortArrayToLong(short[],int,long,int,int)
RIGHTCHILD: METHOD: shortArrayToLong(short[],int,long,int,int)
###SNODE L: METHOD: shortArrayToLong(short[],int,long,int,int)
###SNODE L: METHOD: shortArrayToLong(short[],int,long,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intToShortArray(int,int,short[],int,int)
RIGHTCHILD: METHOD: intToShortArray(int,int,short[],int,int)
###SNODE L: METHOD: intToShortArray(int,int,short[],int,int)
###SNODE L: METHOD: intToShortArray(int,int,short[],int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: byteArrayToUuid(byte[],int)
RIGHTCHILD: METHOD: byteArrayToUuid(byte[],int)
###SNODE L: METHOD: byteArrayToUuid(byte[],int)
###SNODE L: METHOD: byteArrayToUuid(byte[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intArrayToLong(int[],int,long,int,int)
RIGHTCHILD: METHOD: intArrayToLong(int[],int,long,int,int)
###SNODE L: METHOD: intArrayToLong(int[],int,long,int,int)
###SNODE L: METHOD: intArrayToLong(int[],int,long,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)739
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)740
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)741
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)742
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)743
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)169
-(2)-(8)-(12)-(0)-(2)-(2)-(2)743
-(2)-(8)-(12)-(0)-(2)-(2)-(3)742
-(2)-(8)-(12)-(0)-(2)-(2)-(3)744
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)743
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)745
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)742
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)746
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)743
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)747
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)742
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)742
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)615
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)748
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)749
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)750
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)751
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)752
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)753
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)754
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)755
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)756
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)757
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)758
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)759
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)760
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)761
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)762
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)763
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)764
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)616
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)765
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)433
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)434
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)766
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)767
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)768
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)769
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)770
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)771
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)772
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)773
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)774
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)775
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)421
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)422
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)776
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)414
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)415
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)777
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)136
-(2)-(8)-(12)-(0)-(1)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(0)745
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(1)742
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(2)746
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)778
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)742
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)742
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)615
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)749
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)751
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)753
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)755
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)757
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)759
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)761
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)763
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)616
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)433
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)434
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)767
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)768
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)770
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)771
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)773
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)774
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)421
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)422
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)414
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)415
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)136
-(2)-(8)-(12)-(0)-(1)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(0)745
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(1)742
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(2)746
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)779
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)742
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)742
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)615
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)749
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)751
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)753
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)755
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)757
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)759
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)761
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)763
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)616
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)433
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)434
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)767
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)768
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)770
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)771
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)773
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)774
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)421
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)422
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)39
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)414
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)415
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)197
-(2)-(8)-(12)-(0)-(1)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)102
-(2)-(8)-(12)-(0)-(1)-(0)-(2)596
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)32
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)136
-(2)-(8)-(12)-(0)-(1)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(0)745
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(1)742
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(2)746
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)780
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)780
-(2)-(8)-(12)-(0)-(0)-(3)781
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)780
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)783
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)414
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)421
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)773
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)770
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)767
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)433
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)616
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)763
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)761
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)759
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)757
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)755
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)753
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)751
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)749
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)615
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)784
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)784
-(2)-(8)-(12)-(0)-(0)-(3)781
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)784
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)786
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)-(1)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)787
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)788
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)782
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)414
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)761
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)767
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)753
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)773
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)757
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)616
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)749
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)421
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)759
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)433
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)751
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)770
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)755
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)763
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)615
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)789
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)789
-(2)-(8)-(12)-(0)-(0)-(3)781
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)789
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)783
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)790
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(2)782
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)791
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)792
-(2)-(8)-(12)-(0)-(2)-(2)-(2)282
-(2)-(8)-(12)-(0)-(2)-(2)-(3)425
-(2)-(8)-(12)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)790
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)793
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)425
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(0)-(2)261
-(2)-(8)-(12)-(0)-(0)-(3)781
-(2)-(8)-(12)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(3)-(0)243
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)790
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(3)-(1)791
-(2)-(8)-(12)-(0)-(0)-(3)793
-(2)-(8)-(12)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(3)-(0)425
-(2)-(8)-(12)-(0)-(0)-(3)-(1)791
-(2)-(8)-(12)-(0)-(0)-(3)791
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(1)793
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)782
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)414
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)421
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)773
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)770
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)767
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)433
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)616
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)763
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)761
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)759
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)757
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)755
-(2)-(8)-(12)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)753
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)751
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(0)782
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)-(1)419
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(1)-(0)-(0)749
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(2)-(0)-(0)615
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)794
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)795
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)570
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)169
-(2)-(8)-(12)-(0)-(2)-(2)-(2)796
-(2)-(8)-(12)-(0)-(2)-(2)-(3)795
-(2)-(8)-(12)-(0)-(2)-(2)-(3)744
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)570
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(0)-(1)-(1)797
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)798
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)795
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)570
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)799
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)795
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)795
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)748
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)615
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)764
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)763
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)756
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)755
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)772
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)770
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)752
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)751
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)766
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)433
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)760
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)759
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)776
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)421
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)750
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)749
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)765
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)616
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)758
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)757
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)775
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)773
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)754
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)753
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)769
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)767
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)762
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)761
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)777
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)414
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)136
-(2)-(8)-(12)-(0)-(1)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(0)798
-(2)-(8)-(12)-(0)-(1)-(0)-(4)-(1)795
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)800
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)803
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)803
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)803
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)805
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)803
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)608
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(0)808
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)808
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)809
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)810
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)810
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)811
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)744
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)812
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)812
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)813
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)810
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)810
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)814
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)744
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)815
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)815
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)816
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)818
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)819
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)819
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)820
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)821
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)823
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)824
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)825
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)826
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)826
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)827
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)826
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)828
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(2)741
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)828
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)829
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)826
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)826
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)830
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)826
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(2)741
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)832
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)826
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)826
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)833
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)826
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(2)741
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)834
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)826
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)826
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)826
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)835
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)826
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(2)741
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(3)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)831
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)836
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)838
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)28
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)26
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)839
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)840
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)841
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)842
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)843
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)167
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)844
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)782
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)802
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)845
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)802
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)83
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)368
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)-(0)-(1)-(0)356
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)663
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)846
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)803
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)803
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)803
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)848
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)803
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)608
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)849
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)850
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)810
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)810
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)810
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)851
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)744
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)815
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)852
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)810
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)810
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)810
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)853
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)810
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)744
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)167
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)815
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)854
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)855
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)856
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)857
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)858
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)859
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)817
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)785
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(0)822
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)860
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)861
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)861
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)862
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)143
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)861
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)777
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)864
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)865
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)866
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)861
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)861
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)867
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)143
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)861
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)777
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)864
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)865
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)868
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)861
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)861
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)869
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)143
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)861
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)777
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)864
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)865
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)870
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)801
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)861
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)861
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)801
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)861
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)871
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)801
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)143
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)863
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)861
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)425
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)358
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)777
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)864
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)865
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(2)794
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)807
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)863
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)872
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)804
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)873
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)874
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)608
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)875
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)876
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)877
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)878
-(2)-(8)-(12)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)153
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)744
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)879
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)102
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)837
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)837
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)837
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)880
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)806
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)837
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)782
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)847
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)802
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)358
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(0)764
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)231
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)362
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(0)781
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)-(1)-(0)-(1)806
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)881
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)739
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)847
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)802
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)817
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)86
-(2)-(8)-(12)-(0)-(0)-(1)817
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)847
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)882
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)854
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)781
-(2)-(8)-(12)-(0)-(0)-(3)-(2)883
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)847
-(2)-(8)-(12)-(0)-(0)-(3)802
-(2)-(8)-(12)-(0)-(0)-(3)83
-(2)-(8)-(12)-(0)-(0)-(3)-(0)141
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)785
-(2)-(8)-(12)-(0)-(0)-(3)-(1)785
-(2)-(8)-(12)-(0)-(0)-(3)-(2)817
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)817
-(2)-(8)-(12)-(0)-(0)-(1)785
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)854
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)781
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)884
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)847
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)802
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)785
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)817
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)785
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)847
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)885
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)739
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)781
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)782
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)781
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)782
-(2)-(8)-(12)-(0)-(0)-(1)744
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)886
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)739
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(2)816
-(2)-(8)-(12)-(0)-(0)-(4)-(3)781
-(2)-(8)-(12)-(0)-(0)-(4)-(3)782
-(2)-(8)-(12)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(0)-(4)-(3)785
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(2)816
-(2)-(8)-(12)-(0)-(0)-(4)-(3)781
-(2)-(8)-(12)-(0)-(0)-(4)-(3)243
-(2)-(8)-(12)-(0)-(0)-(4)-(3)-(0)782
-(2)-(8)-(12)-(0)-(0)-(4)-(3)-(1)785
-(2)-(8)-(12)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(0)-(4)-(3)785

LEFT COMMENTS
/* *//** 
 * <p>Utility library to provide helper methods for Java enums.</p> <p>#ThreadSafe#</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * This constructor is public to permit tools that require a JavaBean instance to operate.
 */
/** 
 * <p>Gets the  {@code Map} of enums by name.</p><p>This method is useful when you need a map of enums by name.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @return the modifiable map of enum names to enums, never null
 */
/** 
 * <p>Gets the  {@code List} of enums.</p><p>This method is useful when you need a list of enums rather than an array.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @return the modifiable list of enums, never null
 */
/** 
 * <p>Checks if the specified name is a valid enum for the class.</p> <p>This method differs from  {@link Enum#valueOf} in that checks if the name isa valid enum without needing to catch the exception.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @param enumName   the enum name, null returns false
 * @return true if the enum name is valid, otherwise false
 */
/** 
 * <p>Gets the enum for the class, returning  {@code null} if not found.</p><p>This method differs from  {@link Enum#valueOf} in that it does not throw an exceptionfor an invalid enum name.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @param enumName   the enum name, null returns null
 * @return the enum, null if not found
 */
/** 
 * <p>Creates a long bit vector representation of the given subset of an Enum.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVector}.</p> <p>Do not use this method if you have more than 64 values in your Enum, as this would create a value greater than a long can hold.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long whose value provides a binary representation of the given set of enum values.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values,or if any  {@code values} {@code null}
 * @since 3.0.1
 * @see #generateBitVectors(Class,Iterable)
 */
/** 
 * <p>Creates a bit vector representation of the given subset of an Enum using as many  {@code long}s as needed.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVectors}.</p> <p>Use this method if you have more than 64 values in your Enum.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long[] whose values provide a binary representation of the given set of enum valueswith least significant digits rightmost.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}
 * @since 3.2
 */
/** 
 * <p>Creates a long bit vector representation of the given array of Enum values.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVector}.</p> <p>Do not use this method if you have more than 64 values in your Enum, as this would create a value greater than a long can hold.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}
 * @param < E >       the type of the enumeration
 * @return a long whose value provides a binary representation of the given set of enum values.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 * @see #generateBitVectors(Class,Iterable)
 */
/** 
 * <p>Creates a bit vector representation of the given subset of an Enum using as many  {@code long}s as needed.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVectors}.</p> <p>Use this method if you have more than 64 values in your Enum.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long[] whose values provide a binary representation of the given set of enum valueswith least significant digits rightmost.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}
 * @since 3.2
 */
/** 
 * <p>Convert a long value created by  {@link EnumUtils#generateBitVector} into the set ofenum values that it represents.</p> <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param value     the long value representation of a set of enum values
 * @param < E >       the type of the enumeration
 * @return a set of enum values
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 */
/** 
 * <p>Convert a  {@code long[]} created by {@link EnumUtils#generateBitVectors} into the set ofenum values that it represents.</p> <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values     the long[] bearing the representation of a set of enum values, least significant digits rightmost, not {@code null}
 * @param < E >       the type of the enumeration
 * @return a set of enum values
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class
 * @since 3.2
 */
/** 
 * Validate that  {@code enumClass} is compatible with representation in a {@code long}.
 * @param < E > the type of the enumeration
 * @param enumClass to check
 * @return {@code enumClass}
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 */
/** 
 * Validate  {@code enumClass}.
 * @param < E > the type of the enumeration
 * @param enumClass to check
 * @return {@code enumClass}
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class
 * @since 3.2
 */
RIGHT COMMENTS
/* *//** 
 * <p>Utility library to provide helper methods for Java enums.</p> <p>#ThreadSafe#</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * This constructor is public to permit tools that require a JavaBean instance to operate.
 */
/** 
 * <p>Gets the  {@code Map} of enums by name.</p><p>This method is useful when you need a map of enums by name.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @return the modifiable map of enum names to enums, never null
 */
/** 
 * <p>Gets the  {@code List} of enums.</p><p>This method is useful when you need a list of enums rather than an array.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @return the modifiable list of enums, never null
 */
/** 
 * <p>Checks if the specified name is a valid enum for the class.</p> <p>This method differs from  {@link Enum#valueOf} in that checks if the name isa valid enum without needing to catch the exception.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @param enumName   the enum name, null returns false
 * @return true if the enum name is valid, otherwise false
 */
/** 
 * <p>Gets the enum for the class, returning  {@code null} if not found.</p><p>This method differs from  {@link Enum#valueOf} in that it does not throw an exceptionfor an invalid enum name.</p>
 * @param < E > the type of the enumeration
 * @param enumClass  the class of the enum to query, not null
 * @param enumName   the enum name, null returns null
 * @return the enum, null if not found
 */
/** 
 * <p>Creates a long bit vector representation of the given subset of an Enum.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVector}.</p> <p>Do not use this method if you have more than 64 values in your Enum, as this would create a value greater than a long can hold.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long whose value provides a binary representation of the given set of enum values.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values,or if any  {@code values} {@code null}
 * @since 3.0.1
 * @see #generateBitVectors(Class,Iterable)
 */
/** 
 * <p>Creates a bit vector representation of the given subset of an Enum using as many  {@code long}s as needed.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVectors}.</p> <p>Use this method if you have more than 64 values in your Enum.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long[] whose values provide a binary representation of the given set of enum valueswith least significant digits rightmost.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}
 * @since 3.2
 */
/** 
 * <p>Creates a long bit vector representation of the given array of Enum values.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVector}.</p> <p>Do not use this method if you have more than 64 values in your Enum, as this would create a value greater than a long can hold.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}
 * @param < E >       the type of the enumeration
 * @return a long whose value provides a binary representation of the given set of enum values.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 * @see #generateBitVectors(Class,Iterable)
 */
/** 
 * <p>Creates a bit vector representation of the given subset of an Enum using as many  {@code long}s as needed.</p> <p>This generates a value that is usable by  {@link EnumUtils#processBitVectors}.</p> <p>Use this method if you have more than 64 values in your Enum.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values    the values we want to convert, not {@code null}, neither containing  {@code null}
 * @param < E >       the type of the enumeration
 * @return a long[] whose values provide a binary representation of the given set of enum valueswith least significant digits rightmost.
 * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class, or if any {@code values} {@code null}
 * @since 3.2
 */
/** 
 * <p>Convert a long value created by  {@link EnumUtils#generateBitVector} into the set ofenum values that it represents.</p> <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param value     the long value representation of a set of enum values
 * @param < E >       the type of the enumeration
 * @return a set of enum values
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 */
/** 
 * <p>Convert a  {@code long[]} created by {@link EnumUtils#generateBitVectors} into the set ofenum values that it represents.</p> <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>
 * @param enumClass the class of the enum we are working with, not {@code null}
 * @param values     the long[] bearing the representation of a set of enum values, least significant digits rightmost, not {@code null}
 * @param < E >       the type of the enumeration
 * @return a set of enum values
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class
 * @since 3.2
 */
/** 
 * Validate that  {@code enumClass} is compatible with representation in a {@code long}.
 * @param < E > the type of the enumeration
 * @param enumClass to check
 * @return {@code enumClass}
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values
 * @since 3.0.1
 */
/** 
 * Validate  {@code enumClass}.
 * @param < E > the type of the enumeration
 * @param enumClass to check
 * @return {@code enumClass}
 * @throws NullPointerException if {@code enumClass} is {@code null}
 * @throws IllegalArgumentException if {@code enumClass} is not an enum class
 * @since 3.2
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@689ea211
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3f1e18b1

#TRAVERSE
LEFTCHILD: CLASS: EnumUtils
RIGHTCHILD: CLASS: EnumUtils
##SNODE L: CLASS: EnumUtils
##SNODE L: CLASS: EnumUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@727de450
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6de4071b

##TRAVERSE
LEFTCHILD: FIELD: NULL_ELEMENTS_NOT_PERMITTED : String
RIGHTCHILD: FIELD: NULL_ELEMENTS_NOT_PERMITTED : String
###SNODE L: FIELD: NULL_ELEMENTS_NOT_PERMITTED : String
###SNODE L: FIELD: NULL_ELEMENTS_NOT_PERMITTED : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: generateBitVectors(Class<E>,Iterable<E>)
RIGHTCHILD: METHOD: generateBitVectors(Class<E>,Iterable<E>)
###SNODE L: METHOD: generateBitVectors(Class<E>,Iterable<E>)
###SNODE L: METHOD: generateBitVectors(Class<E>,Iterable<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: asEnum(Class<E>)
RIGHTCHILD: METHOD: asEnum(Class<E>)
###SNODE L: METHOD: asEnum(Class<E>)
###SNODE L: METHOD: asEnum(Class<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isValidEnum(Class<E>,String)
RIGHTCHILD: METHOD: isValidEnum(Class<E>,String)
###SNODE L: METHOD: isValidEnum(Class<E>,String)
###SNODE L: METHOD: isValidEnum(Class<E>,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: generateBitVector(Class<E>,E)
RIGHTCHILD: METHOD: generateBitVector(Class<E>,E)
###SNODE L: METHOD: generateBitVector(Class<E>,E)
###SNODE L: METHOD: generateBitVector(Class<E>,E)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: EnumUtils()
RIGHTCHILD: CONSTRUCTOR: EnumUtils()
###SNODE L: CONSTRUCTOR: EnumUtils()
###SNODE L: CONSTRUCTOR: EnumUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: processBitVector(Class<E>,long)
RIGHTCHILD: METHOD: processBitVector(Class<E>,long)
###SNODE L: METHOD: processBitVector(Class<E>,long)
###SNODE L: METHOD: processBitVector(Class<E>,long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getEnumMap(Class<E>)
RIGHTCHILD: METHOD: getEnumMap(Class<E>)
###SNODE L: METHOD: getEnumMap(Class<E>)
###SNODE L: METHOD: getEnumMap(Class<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: CANNOT_STORE_S_S_VALUES_IN_S_BITS : String
RIGHTCHILD: FIELD: CANNOT_STORE_S_S_VALUES_IN_S_BITS : String
###SNODE L: FIELD: CANNOT_STORE_S_S_VALUES_IN_S_BITS : String
###SNODE L: FIELD: CANNOT_STORE_S_S_VALUES_IN_S_BITS : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: generateBitVectors(Class<E>,E)
RIGHTCHILD: METHOD: generateBitVectors(Class<E>,E)
###SNODE L: METHOD: generateBitVectors(Class<E>,E)
###SNODE L: METHOD: generateBitVectors(Class<E>,E)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE : String
RIGHTCHILD: FIELD: S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE : String
###SNODE L: FIELD: S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE : String
###SNODE L: FIELD: S_DOES_NOT_SEEM_TO_BE_AN_ENUM_TYPE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ENUM_CLASS_MUST_BE_DEFINED : String
RIGHTCHILD: FIELD: ENUM_CLASS_MUST_BE_DEFINED : String
###SNODE L: FIELD: ENUM_CLASS_MUST_BE_DEFINED : String
###SNODE L: FIELD: ENUM_CLASS_MUST_BE_DEFINED : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getEnum(Class<E>,String)
RIGHTCHILD: METHOD: getEnum(Class<E>,String)
###SNODE L: METHOD: getEnum(Class<E>,String)
###SNODE L: METHOD: getEnum(Class<E>,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: checkBitVectorable(Class<E>)
RIGHTCHILD: METHOD: checkBitVectorable(Class<E>)
###SNODE L: METHOD: checkBitVectorable(Class<E>)
###SNODE L: METHOD: checkBitVectorable(Class<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: generateBitVector(Class<E>,Iterable<E>)
RIGHTCHILD: METHOD: generateBitVector(Class<E>,Iterable<E>)
###SNODE L: METHOD: generateBitVector(Class<E>,Iterable<E>)
###SNODE L: METHOD: generateBitVector(Class<E>,Iterable<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: processBitVectors(Class<E>,long)
RIGHTCHILD: METHOD: processBitVectors(Class<E>,long)
###SNODE L: METHOD: processBitVectors(Class<E>,long)
###SNODE L: METHOD: processBitVectors(Class<E>,long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getEnumList(Class<E>)
RIGHTCHILD: METHOD: getEnumList(Class<E>)
###SNODE L: METHOD: getEnumList(Class<E>)
###SNODE L: METHOD: getEnumList(Class<E>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)619
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)15
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)534
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)887
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)888
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)621
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)889
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)890
-(2)-(8)-(3)-(2)891
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)892
-(2)-(8)-(3)-(2)893
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)894
-(2)-(8)-(3)-(2)895
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)896
-(2)-(8)-(3)-(2)897
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)889
-(2)-(8)-(12)50
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)900
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)190
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)55
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)190
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)898
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)229
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)888
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)898
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)901
-(2)-(8)-(12)-(0)-(1)-(2)902
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)229
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)334
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(2)150
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)229
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)903
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)15
-(2)-(8)-(12)-(0)-(0)-(4)-(2)904
-(2)-(8)-(12)-(0)-(0)-(4)-(3)33
-(2)-(8)-(12)-(0)-(0)-(4)-(3)-(0)901
-(2)-(8)-(12)-(0)-(0)-(4)-(3)-(2)902
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)905
-(2)-(8)-(4)102
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)906
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)906
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)899
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)906
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)239
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)907
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)906
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)906
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)899
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)906
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)239
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)908
-(2)-(8)-(4)26
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)909
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)910
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)911
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)386
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)911
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)890
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)913
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)910
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)369
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)911
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(2)912
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)910
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)914
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)915
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)887
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)898
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)916
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)887
-(2)-(8)-(12)-(0)-(2)-(2)-(2)917
-(2)-(8)-(12)-(0)-(2)-(2)-(3)901
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)911
-(2)-(8)-(12)-(0)-(1)327
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)386
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)911
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)890
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)916
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)911
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)919
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)-(0)901
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)-(2)902
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)916
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)913
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)919
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)369
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)920
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(1)918
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)266
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)908
-(2)-(8)-(4)26
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)898
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)908
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)15
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)-(2)904
-(2)-(8)-(12)-(0)-(0)-(3)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)914
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)26
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)898
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)915
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)887
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)898
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)916
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)887
-(2)-(8)-(12)-(0)-(2)-(2)-(2)917
-(2)-(8)-(12)-(0)-(2)-(2)-(3)901
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(0)-(2)300
-(2)-(8)-(12)-(0)-(0)-(3)916
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)26
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)26
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)919
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)231
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)-(0)901
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(0)-(2)902
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)916
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)913
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)919
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)369
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)920
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(1)918
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)266
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)922
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)887
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)909
-(2)-(8)-(12)-(0)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(0)-(2)902
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)923
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(0)-(3)97
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)923
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)887
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(7)249
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)887
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)898
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)924
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)887
-(2)-(8)-(12)-(0)-(2)-(2)-(2)917
-(2)-(8)-(12)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(2)915
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(3)901
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)327
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)109
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)110
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(3)327
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)266
-(2)-(8)-(12)-(0)-(0)-(3)327
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)898
-(2)-(8)-(12)-(0)-(0)-(3)911
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)901
-(2)-(8)-(12)-(0)-(1)-(2)902
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)925
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)919
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)-(0)911
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(2)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)925
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(0)327
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)358
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(0)-(0)327
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(0)-(1)925
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)369
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)920
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)-(0)911
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)-(2)912
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)-(0)171
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)-(1)918
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)924
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)911
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)924
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)909
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)898
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)926
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)915
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)901
-(2)-(8)-(12)-(0)-(2)-(2)-(2)902
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)386
-(2)-(8)-(12)-(0)-(0)-(3)257
-(2)-(8)-(12)-(0)-(0)-(3)-(0)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)926
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)-(1)2
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)171
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)918
-(2)-(8)-(12)-(0)-(0)-(3)892
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)926
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)901
-(2)-(8)-(12)-(0)-(0)-(3)-(2)665
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)171
-(2)-(8)-(12)-(0)-(0)-(3)-(1)918
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)901
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)915
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)57
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)898
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)898
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)899
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)898
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)898
-(2)-(8)-(7)-(3)901
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)-(0)-(3)896
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)386
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)901
-(2)-(8)-(12)-(0)-(0)-(3)-(2)148
-(2)-(8)-(12)-(0)-(0)-(3)894
-(2)-(8)-(12)-(0)-(0)-(3)901
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)901

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/event (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/event (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/exception (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/exception (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>An enum representing all the versions of the Java specification. This is intended to mirror available values from the <em>java.specification.version</em> System property. </p>
 * @since 3.0
 * @version $Id: $
 */
/** 
 * The Java version reported by Android. This is not an official Java version number.
 */
/** 
 * Java 1.1.
 */
/** 
 * Java 1.2.
 */
/** 
 * Java 1.3.
 */
/** 
 * Java 1.4.
 */
/** 
 * Java 1.5.
 */
/** 
 * Java 1.6.
 */
/** 
 * Java 1.7.
 */
/** 
 * Java 1.8.
 */
/** 
 * The float value.
 */
/** 
 * The standard name.
 */
/** 
 * Constructor.
 * @param value  the float value
 * @param name  the standard name, not null
 */
//
/** 
 * <p>Whether this version of Java is at least the version of Java passed in.</p> <p>For example:<br /> {@code myVersion.atLeast(JavaVersion.JAVA_1_4)}<p>
 * @param requiredVersion  the version to check against, not null
 * @return true if this version is equal to or greater than the specified version
 */
/** 
 * Transforms the given string with a Java version number to the corresponding constant of this enumeration class. This method is used internally.
 * @param nom the Java version as string
 * @return the corresponding enumeration constant or <b>null</b> if theversion is unknown
 */
//
/** 
 * Transforms the given string with a Java version number to the corresponding constant of this enumeration class. This method is used internally.
 * @param nom the Java version as string
 * @return the corresponding enumeration constant or <b>null</b> if theversion is unknown
 */
//
/** 
 * <p>The string value is overridden to return the standard name.</p> <p>For example, <code>"1.5"</code>.</p>
 * @return the name, not null
 */
RIGHT COMMENTS
/* *//** 
 * <p>An enum representing all the versions of the Java specification. This is intended to mirror available values from the <em>java.specification.version</em> System property. </p>
 * @since 3.0
 * @version $Id: $
 */
/** 
 * The Java version reported by Android. This is not an official Java version number.
 */
/** 
 * Java 1.1.
 */
/** 
 * Java 1.2.
 */
/** 
 * Java 1.3.
 */
/** 
 * Java 1.4.
 */
/** 
 * Java 1.5.
 */
/** 
 * Java 1.6.
 */
/** 
 * Java 1.7.
 */
/** 
 * Java 1.8.
 */
/** 
 * The float value.
 */
/** 
 * The standard name.
 */
/** 
 * Constructor.
 * @param value  the float value
 * @param name  the standard name, not null
 */
//
/** 
 * <p>Whether this version of Java is at least the version of Java passed in.</p> <p>For example:<br /> {@code myVersion.atLeast(JavaVersion.JAVA_1_4)}<p>
 * @param requiredVersion  the version to check against, not null
 * @return true if this version is equal to or greater than the specified version
 */
/** 
 * Transforms the given string with a Java version number to the corresponding constant of this enumeration class. This method is used internally.
 * @param nom the Java version as string
 * @return the corresponding enumeration constant or <b>null</b> if theversion is unknown
 */
//
/** 
 * Transforms the given string with a Java version number to the corresponding constant of this enumeration class. This method is used internally.
 * @param nom the Java version as string
 * @return the corresponding enumeration constant or <b>null</b> if theversion is unknown
 */
//
/** 
 * <p>The string value is overridden to return the standard name.</p> <p>For example, <code>"1.5"</code>.</p>
 * @return the name, not null
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@32182bf8
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@75aeec0a

#TRAVERSE
LEFTCHILD: ENUM: JavaVersion
RIGHTCHILD: ENUM: JavaVersion
##SNODE L: ENUM: JavaVersion
##SNODE L: ENUM: JavaVersion
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6b8cdc4
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@79e28671

##TRAVERSE
LEFTCHILD: FIELD: name : String
RIGHTCHILD: FIELD: name : String
###SNODE L: FIELD: name : String
###SNODE L: FIELD: name : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: JavaVersion(float,String)
RIGHTCHILD: CONSTRUCTOR: JavaVersion(float,String)
###SNODE L: CONSTRUCTOR: JavaVersion(float,String)
###SNODE L: CONSTRUCTOR: JavaVersion(float,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: atLeast(JavaVersion)
RIGHTCHILD: METHOD: atLeast(JavaVersion)
###SNODE L: METHOD: atLeast(JavaVersion)
###SNODE L: METHOD: atLeast(JavaVersion)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString()
RIGHTCHILD: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: get(String)
RIGHTCHILD: METHOD: get(String)
###SNODE L: METHOD: get(String)
###SNODE L: METHOD: get(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: value : float
RIGHTCHILD: FIELD: value : float
###SNODE L: FIELD: value : float
###SNODE L: FIELD: value : float
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getJavaVersion(String)
RIGHTCHILD: METHOD: getJavaVersion(String)
###SNODE L: METHOD: getJavaVersion(String)
###SNODE L: METHOD: getJavaVersion(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)957
-(2)-(1)19
-(2)-(2)683
-(2)-(4)930
-(2)-(4)-(2)927
-(2)-(4)-(3)928
-(2)-(4)-(3)929
-(2)-(4)930
-(2)-(4)-(2)931
-(2)-(4)-(3)932
-(2)-(4)-(3)933
-(2)-(4)930
-(2)-(4)-(2)934
-(2)-(4)-(3)935
-(2)-(4)-(3)936
-(2)-(4)930
-(2)-(4)-(2)937
-(2)-(4)-(3)938
-(2)-(4)-(3)939
-(2)-(4)930
-(2)-(4)-(2)940
-(2)-(4)-(3)941
-(2)-(4)-(3)942
-(2)-(4)930
-(2)-(4)-(2)684
-(2)-(4)-(3)928
-(2)-(4)-(3)943
-(2)-(4)930
-(2)-(4)-(2)944
-(2)-(4)-(3)945
-(2)-(4)-(3)946
-(2)-(4)930
-(2)-(4)-(2)947
-(2)-(4)-(3)948
-(2)-(4)-(3)949
-(2)-(4)930
-(2)-(4)-(2)950
-(2)-(4)-(3)951
-(2)-(4)-(3)952
-(2)-(5)30
-(2)-(5)-(1)21
-(2)-(5)-(2)173
-(2)-(5)-(3)29
-(2)-(5)-(3)-(0)97
-(2)-(5)30
-(2)-(5)-(1)21
-(2)-(5)-(2)24
-(2)-(5)-(2)-(1)55
-(2)-(5)-(3)29
-(2)-(5)-(3)-(0)150
-(2)-(5)101
-(2)-(5)-(2)683
-(2)-(5)-(7)61
-(2)-(5)-(7)-(0)23
-(2)-(5)-(7)-(1)173
-(2)-(5)-(7)-(3)97
-(2)-(5)-(7)61
-(2)-(5)-(7)-(0)23
-(2)-(5)-(7)-(1)24
-(2)-(5)-(7)-(1)-(1)55
-(2)-(5)-(7)-(3)150
-(2)-(5)-(12)50
-(2)-(5)-(12)-(0)34
-(2)-(5)-(12)-(0)-(0)75
-(2)-(5)-(12)-(0)-(0)-(0)117
-(2)-(5)-(12)-(0)-(0)-(0)-(0)489
-(2)-(5)-(12)-(0)-(0)-(0)-(1)97
-(2)-(5)-(12)-(0)-(0)-(1)97
-(2)-(5)-(12)-(0)34
-(2)-(5)-(12)-(0)-(0)75
-(2)-(5)-(12)-(0)-(0)-(0)117
-(2)-(5)-(12)-(0)-(0)-(0)-(0)489
-(2)-(5)-(12)-(0)-(0)-(0)-(1)150
-(2)-(5)-(12)-(0)-(0)-(1)150
-(2)-(5)90
-(2)-(5)-(1)19
-(2)-(5)-(2)953
-(2)-(5)-(4)102
-(2)-(5)-(7)61
-(2)-(5)-(7)-(0)23
-(2)-(5)-(7)-(1)24
-(2)-(5)-(7)-(1)-(1)683
-(2)-(5)-(7)-(3)954
-(2)-(5)-(12)50
-(2)-(5)-(12)-(0)89
-(2)-(5)-(12)-(0)-(0)277
-(2)-(5)-(12)-(0)-(0)-(0)117
-(2)-(5)-(12)-(0)-(0)-(0)-(0)489
-(2)-(5)-(12)-(0)-(0)-(0)-(1)97
-(2)-(5)-(12)-(0)-(0)-(1)2
-(2)-(5)-(12)-(0)-(0)-(1)-(0)954
-(2)-(5)-(12)-(0)-(0)-(1)-(1)97
-(2)-(5)90
-(2)-(5)-(1)22
-(2)-(5)-(2)955
-(2)-(5)-(4)24
-(2)-(5)-(4)-(1)683
-(2)-(5)-(7)61
-(2)-(5)-(7)-(0)23
-(2)-(5)-(7)-(1)24
-(2)-(5)-(7)-(1)-(1)55
-(2)-(5)-(7)-(3)956
-(2)-(5)-(12)50
-(2)-(5)-(12)-(0)89
-(2)-(5)-(12)-(0)-(0)33
-(2)-(5)-(12)-(0)-(0)-(2)331
-(2)-(5)-(12)-(0)-(0)-(3)956
-(2)-(5)90
-(2)-(5)-(1)22
-(2)-(5)-(2)331
-(2)-(5)-(4)24
-(2)-(5)-(4)-(1)683
-(2)-(5)-(7)61
-(2)-(5)-(7)-(0)23
-(2)-(5)-(7)-(1)24
-(2)-(5)-(7)-(1)-(1)55
-(2)-(5)-(7)-(3)956
-(2)-(5)-(12)50
-(2)-(5)-(12)-(0)77
-(2)-(5)-(12)-(0)-(0)33
-(2)-(5)-(12)-(0)-(0)-(0)929
-(2)-(5)-(12)-(0)-(0)-(2)103
-(2)-(5)-(12)-(0)-(0)-(3)956
-(2)-(5)-(12)-(0)-(1)50
-(2)-(5)-(12)-(0)-(1)-(0)89
-(2)-(5)-(12)-(0)-(1)-(0)-(0)927
-(2)-(5)-(12)-(0)-(2)77
-(2)-(5)-(12)-(0)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(0)-(0)933
-(2)-(5)-(12)-(0)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(1)-(0)-(0)931
-(2)-(5)-(12)-(0)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(0)-(0)936
-(2)-(5)-(12)-(0)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(1)-(0)-(0)934
-(2)-(5)-(12)-(0)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(0)-(0)939
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(1)-(0)-(0)937
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(0)-(0)942
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(1)-(0)-(0)940
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(0)-(0)943
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(1)-(0)-(0)684
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(0)946
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)-(0)944
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(0)949
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)-(0)947
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)77
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)33
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(0)952
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(2)103
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(3)956
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(1)-(0)-(0)950
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)50
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)89
-(2)-(5)-(12)-(0)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(2)-(0)-(0)63
-(2)-(5)90
-(2)-(5)-(1)53
-(2)-(5)-(1)-(0)52
-(2)-(5)-(1)19
-(2)-(5)-(2)88
-(2)-(5)-(4)24
-(2)-(5)-(4)-(1)55
-(2)-(5)-(12)50
-(2)-(5)-(12)-(0)89
-(2)-(5)-(12)-(0)-(0)150

LEFT COMMENTS
/* *//** 
 * <p>Operations to assist when working with a  {@link Locale}.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p>
 * @since 2.2
 * @version $Id$
 */
/** 
 * Concurrent map of language locales by country. 
 */
/** 
 * Concurrent map of country locales by language. 
 */
/** 
 * <p> {@code LocaleUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code LocaleUtils.toLocale("en_GB");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Converts a String to a Locale.</p> <p>This method takes the string format of a locale and creates the locale object from it.</p> <pre> LocaleUtils.toLocale("en")         = new Locale("en", "") LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB") LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#) </pre> <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4. In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't. Thus, the result from getVariant() may vary depending on your JDK.</p> <p>This method validates the input strictly. The language code must be lowercase. The country code must be uppercase. The separator must be an underscore. The length must be correct. </p>
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
//
//
/** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr","CA","xxx")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr")] </pre>
 * @param locale  the locale to start from
 * @return the unmodifiable list of Locale objects, 0 being locale, not null
 */
//
/** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr", "CA", "xxx"), Locale("en")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr"), Locale("en"] </pre> <p>The result list begins with the most specific locale, then the next more general and so on, finishing with the default locale. The list will never contain the same locale twice.</p>
 * @param locale  the locale to start from, null returns empty list
 * @param defaultLocale  the default locale to use if no other is found
 * @return the unmodifiable list of Locale objects, 0 being locale, not null
 */
//
/** 
 * <p>Obtains an unmodifiable list of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable list of available locales
 */
//
/** 
 * <p>Obtains an unmodifiable set of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable set of available locales
 */
//
/** 
 * <p>Checks if the locale specified is in the list of available locales.</p>
 * @param locale the Locale object to check if it is available
 * @return true if the locale is a known locale
 */
//
/** 
 * <p>Obtains the list of languages supported for a given country.</p> <p>This method takes a country code and searches to find the languages available for that country. Variant locales are removed.</p>
 * @param countryCode  the 2 letter country code, null returns empty
 * @return an unmodifiable List of Locale objects, not null
 */
//
/** 
 * <p>Obtains the list of countries supported for a given language.</p> <p>This method takes a language code and searches to find the countries available for that language. Variant locales are removed.</p>
 * @param languageCode  the 2 letter language code, null returns empty
 * @return an unmodifiable List of Locale objects, not null
 */
//
//
/** 
 * Unmodifiable list of available locales. 
 */
/** 
 * Unmodifiable set of available locales. 
 */
//
RIGHT COMMENTS
/* *//** 
 * <p>Operations to assist when working with a  {@link Locale}.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p>
 * @since 2.2
 * @version $Id$
 */
/** 
 * Concurrent map of language locales by country. 
 */
/** 
 * Concurrent map of country locales by language. 
 */
/** 
 * <p> {@code LocaleUtils} instances should NOT be constructed in standard programming.Instead, the class should be used as  {@code LocaleUtils.toLocale("en_GB");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
/** 
 * <p>Converts a String to a Locale.</p> <p>This method takes the string format of a locale and creates the locale object from it.</p> <pre> LocaleUtils.toLocale("en")         = new Locale("en", "") LocaleUtils.toLocale("en_GB")      = new Locale("en", "GB") LocaleUtils.toLocale("en_GB_xxx")  = new Locale("en", "GB", "xxx")   (#) </pre> <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4. In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't. Thus, the result from getVariant() may vary depending on your JDK.</p> <p>This method validates the input strictly. The language code must be lowercase. The country code must be uppercase. The separator must be an underscore. The length must be correct. </p>
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
//
//
/** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr","CA","xxx")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr")] </pre>
 * @param locale  the locale to start from
 * @return the unmodifiable list of Locale objects, 0 being locale, not null
 */
//
/** 
 * <p>Obtains the list of locales to search through when performing a locale search.</p> <pre> localeLookupList(Locale("fr", "CA", "xxx"), Locale("en")) = [Locale("fr","CA","xxx"), Locale("fr","CA"), Locale("fr"), Locale("en"] </pre> <p>The result list begins with the most specific locale, then the next more general and so on, finishing with the default locale. The list will never contain the same locale twice.</p>
 * @param locale  the locale to start from, null returns empty list
 * @param defaultLocale  the default locale to use if no other is found
 * @return the unmodifiable list of Locale objects, 0 being locale, not null
 */
//
/** 
 * <p>Obtains an unmodifiable list of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable list of available locales
 */
//
/** 
 * <p>Obtains an unmodifiable set of installed locales.</p> <p>This method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.</p>
 * @return the unmodifiable set of available locales
 */
//
/** 
 * <p>Checks if the locale specified is in the list of available locales.</p>
 * @param locale the Locale object to check if it is available
 * @return true if the locale is a known locale
 */
//
/** 
 * <p>Obtains the list of languages supported for a given country.</p> <p>This method takes a country code and searches to find the languages available for that country. Variant locales are removed.</p>
 * @param countryCode  the 2 letter country code, null returns empty
 * @return an unmodifiable List of Locale objects, not null
 */
//
/** 
 * <p>Obtains the list of countries supported for a given language.</p> <p>This method takes a language code and searches to find the countries available for that language. Variant locales are removed.</p>
 * @param languageCode  the 2 letter language code, null returns empty
 * @return an unmodifiable List of Locale objects, not null
 */
//
//
/** 
 * Unmodifiable list of available locales. 
 */
/** 
 * Unmodifiable set of available locales. 
 */
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@341141ab
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1773faf8

#TRAVERSE
LEFTCHILD: CLASS: LocaleUtils
RIGHTCHILD: CLASS: LocaleUtils
##SNODE L: CLASS: LocaleUtils
##SNODE L: CLASS: LocaleUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3ef4a8fb
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@30f99ca1

##TRAVERSE
LEFTCHILD: METHOD: isAvailableLocale(Locale)
RIGHTCHILD: METHOD: isAvailableLocale(Locale)
###SNODE L: METHOD: isAvailableLocale(Locale)
###SNODE L: METHOD: isAvailableLocale(Locale)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CLASS: SyncAvoid
RIGHTCHILD: CLASS: SyncAvoid
###SNODE L: CLASS: SyncAvoid
###SNODE L: CLASS: SyncAvoid
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@edb8f0c
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6f70015

###TRAVERSE
LEFTCHILD: CONSTRUCTOR: SyncAvoid()
RIGHTCHILD: CONSTRUCTOR: SyncAvoid()
####SNODE L: CONSTRUCTOR: SyncAvoid()
####SNODE L: CONSTRUCTOR: SyncAvoid()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: AVAILABLE_LOCALE_LIST : List<Locale>
RIGHTCHILD: FIELD: AVAILABLE_LOCALE_LIST : List<Locale>
####SNODE L: FIELD: AVAILABLE_LOCALE_LIST : List<Locale>
####SNODE L: FIELD: AVAILABLE_LOCALE_LIST : List<Locale>
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: AVAILABLE_LOCALE_SET : Set<Locale>
RIGHTCHILD: FIELD: AVAILABLE_LOCALE_SET : Set<Locale>
####SNODE L: FIELD: AVAILABLE_LOCALE_SET : Set<Locale>
####SNODE L: FIELD: AVAILABLE_LOCALE_SET : Set<Locale>
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: availableLocaleList()
RIGHTCHILD: METHOD: availableLocaleList()
###SNODE L: METHOD: availableLocaleList()
###SNODE L: METHOD: availableLocaleList()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: cLanguagesByCountry : ConcurrentMap<String,List<Locale>>
RIGHTCHILD: FIELD: cLanguagesByCountry : ConcurrentMap<String,List<Locale>>
###SNODE L: FIELD: cLanguagesByCountry : ConcurrentMap<String,List<Locale>>
###SNODE L: FIELD: cLanguagesByCountry : ConcurrentMap<String,List<Locale>>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: cCountriesByLanguage : ConcurrentMap<String,List<Locale>>
RIGHTCHILD: FIELD: cCountriesByLanguage : ConcurrentMap<String,List<Locale>>
###SNODE L: FIELD: cCountriesByLanguage : ConcurrentMap<String,List<Locale>>
###SNODE L: FIELD: cCountriesByLanguage : ConcurrentMap<String,List<Locale>>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: countriesByLanguage(String)
RIGHTCHILD: METHOD: countriesByLanguage(String)
###SNODE L: METHOD: countriesByLanguage(String)
###SNODE L: METHOD: countriesByLanguage(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: availableLocaleSet()
RIGHTCHILD: METHOD: availableLocaleSet()
###SNODE L: METHOD: availableLocaleSet()
###SNODE L: METHOD: availableLocaleSet()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: LocaleUtils()
RIGHTCHILD: CONSTRUCTOR: LocaleUtils()
###SNODE L: CONSTRUCTOR: LocaleUtils()
###SNODE L: CONSTRUCTOR: LocaleUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toLocale(String)
RIGHTCHILD: METHOD: toLocale(String)
###SNODE L: METHOD: toLocale(String)
###SNODE L: METHOD: toLocale(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: localeLookupList(Locale,Locale)
RIGHTCHILD: METHOD: localeLookupList(Locale,Locale)
###SNODE L: METHOD: localeLookupList(Locale,Locale)
###SNODE L: METHOD: localeLookupList(Locale,Locale)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: languagesByCountry(String)
RIGHTCHILD: METHOD: languagesByCountry(String)
###SNODE L: METHOD: languagesByCountry(String)
###SNODE L: METHOD: languagesByCountry(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: localeLookupList(Locale)
RIGHTCHILD: METHOD: localeLookupList(Locale)
###SNODE L: METHOD: localeLookupList(Locale)
###SNODE L: METHOD: localeLookupList(Locale)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)619
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)15
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)534
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)535
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)621
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)958
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)536
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)14
-(0)-(0)-(0)-(1)959
-(0)-(0)-(1)960
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)14
-(0)-(0)-(0)-(1)959
-(0)-(0)-(1)961
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)962
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)961
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)621
-(2)-(8)-(2)-(1)-(1)24
-(2)-(8)-(2)-(1)-(1)-(1)958
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)963
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)960
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(3)-(2)-(3)-(1)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)-(1)958
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)961
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)55
-(2)-(8)-(2)-(1)59
-(2)-(8)-(2)-(1)-(0)24
-(2)-(8)-(2)-(1)-(0)-(1)621
-(2)-(8)-(2)-(1)-(1)24
-(2)-(8)-(2)-(1)-(1)-(1)958
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)964
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)59
-(2)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(3)-(2)-(3)-(0)-(1)960
-(2)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(3)-(2)-(3)-(1)-(0)-(1)621
-(2)-(8)-(3)-(2)-(3)-(1)-(1)24
-(2)-(8)-(3)-(2)-(3)-(1)-(1)-(1)958
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)962
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)965
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)958
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(0)-(3)966
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)406
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)406
-(2)-(8)-(12)-(0)-(0)-(1)968
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)420
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(2)969
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(3)416
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)969
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(3)420
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)81
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)431
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)968
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)81
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)425
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)416
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)970
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)406
-(2)-(8)-(12)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)970
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)416
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)431
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(0)-(3)238
-(2)-(8)-(12)-(0)-(0)-(1)968
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)426
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)419
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)426
-(2)-(8)-(12)-(0)-(0)-(1)968
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)81
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)425
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)432
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)425
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)969
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)426
-(2)-(8)-(12)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)969
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)432
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)431
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)238
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)419
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)431
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)503
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(0)-(3)431
-(2)-(8)-(12)-(0)-(0)-(1)968
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)967
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)958
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(0)-(4)-(3)86
-(2)-(8)-(12)-(0)-(0)-(4)-(3)238
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(0)-(4)-(3)419
-(2)-(8)-(12)-(0)-(0)-(4)-(3)431
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)403
-(2)-(8)-(12)-(0)-(0)-(4)-(2)526
-(2)-(8)-(12)-(0)-(0)-(4)-(3)971
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)972
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)973
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)972
-(2)-(8)-(12)-(0)-(0)-(3)973
-(2)-(8)-(12)-(0)-(0)-(3)973
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)972
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)973
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)974
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)958
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)958
-(2)-(8)-(12)-(0)-(2)-(2)-(4)425
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)973
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)973
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(2)976
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(2)977
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(2)978
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(2)978
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(2)977
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)81
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)974
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)974
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(0)-(2)979
-(2)-(8)-(12)-(0)-(0)-(3)975
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)980
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)981
-(2)-(8)-(12)-(0)-(0)-(1)982
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)983
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)536
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)981
-(2)-(8)-(12)-(0)-(0)-(1)984
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)985
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)973
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)980
-(2)-(8)-(12)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(0)-(3)973
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)986
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)987
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)987
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)988
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)958
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)989
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)963
-(2)-(8)-(12)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(2)-(3)987
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)989
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)989
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)980
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(2)559
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)987
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(3)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(3)-(2)978
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(2)976
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)989
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)973
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)989
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)534
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)979
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)989
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)963
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)991
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)987
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)989
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)989
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)963
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)987
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)989
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)992
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)621
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)958
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)993
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)993
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)988
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)958
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)994
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)964
-(2)-(8)-(12)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(2)-(2)-(3)993
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)994
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)994
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)980
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(2)559
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(1)958
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(0)990
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(0)993
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(2)977
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(0)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(0)-(2)978
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(0)973
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(2)976
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)994
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(3)973
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)994
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)534
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)979
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)994
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)964
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)991
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)993
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)994
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)994
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)964
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)993
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)994
-(2)-(8)185
-(2)-(8)-(1)22
-(2)-(8)-(2)981
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)59
-(2)-(8)-(8)-(2)-(0)24
-(2)-(8)-(8)-(2)-(0)-(1)621
-(2)-(8)-(8)-(2)-(1)24
-(2)-(8)-(8)-(2)-(1)-(1)958
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)982
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)59
-(2)-(8)-(8)-(2)-(0)24
-(2)-(8)-(8)-(2)-(0)-(1)536
-(2)-(8)-(8)-(2)-(1)24
-(2)-(8)-(8)-(2)-(1)-(1)958
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)984
-(2)-(8)-(8)51
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(2)50
-(2)-(8)-(8)-(2)-(0)64
-(2)-(8)-(8)-(2)-(0)-(0)23
-(2)-(8)-(8)-(2)-(0)-(1)59
-(2)-(8)-(8)-(2)-(0)-(1)-(0)24
-(2)-(8)-(8)-(2)-(0)-(1)-(0)-(1)621
-(2)-(8)-(8)-(2)-(0)-(1)-(1)24
-(2)-(8)-(8)-(2)-(0)-(1)-(1)-(1)958
-(2)-(8)-(8)-(2)-(0)-(2)29
-(2)-(8)-(8)-(2)-(0)-(2)-(0)975
-(2)-(8)-(8)-(2)-(0)-(2)-(2)84
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(3)59
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(3)-(1)-(1)958
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)33
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)-(0)15
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)-(2)904
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)-(3)33
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)-(3)-(0)958
-(2)-(8)-(8)-(2)-(0)-(2)-(2)-(4)-(3)-(2)995
-(2)-(8)-(8)-(2)-(0)34
-(2)-(8)-(8)-(2)-(0)-(0)75
-(2)-(8)-(8)-(2)-(0)-(0)-(0)982
-(2)-(8)-(8)-(2)-(0)-(0)-(1)33
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(0)534
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(2)979
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)975
-(2)-(8)-(8)-(2)-(0)34
-(2)-(8)-(8)-(2)-(0)-(0)75
-(2)-(8)-(8)-(2)-(0)-(0)-(0)984
-(2)-(8)-(8)-(2)-(0)-(0)-(1)33
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(0)534
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(2)996
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)84
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(3)59
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(3)-(0)24
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(3)-(0)-(1)535
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(3)-(1)24
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(3)-(1)-(1)958
-(2)-(8)-(8)-(2)-(0)-(0)-(1)-(3)-(4)975

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/math (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/math (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/mutable (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/mutable (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>Operations on  {@code Object}.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will generally not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
//
/** 
 * <p>Singleton used as a  {@code null} placeholder where{@code null} has another meaning.</p><p>For example, in a  {@code HashMap} the{@link java.util.HashMap#get(java.lang.Object)} method returns{@code null} if the {@code Map} contains {@code null} or if thereis no matching key. The  {@code Null} placeholder can be used todistinguish between these two cases.</p> <p>Another example is  {@code Hashtable}, where  {@code null}cannot be stored.</p> <p>This instance is Serializable.</p>
 */
/** 
 * <p> {@code ObjectUtils} instances should NOT be constructed instandard programming. Instead, the static methods on the class should be used, such as  {@code ObjectUtils.defaultIfNull("a","b");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Returns a default value if the object passed is  {@code null}.</p> <pre> ObjectUtils.defaultIfNull(null, null)      = null ObjectUtils.defaultIfNull(null, "")        = "" ObjectUtils.defaultIfNull(null, "zz")      = "zz" ObjectUtils.defaultIfNull("abc", *)        = "abc" ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE </pre>
 * @param < T > the type of the object
 * @param object  the {@code Object} to test, may be {@code null}
 * @param defaultValue  the default value to return, may be {@code null}
 * @return {@code object} if it is not {@code null}, defaultValue otherwise
 */
/** 
 * <p>Returns the first value in the array which is not  {@code null}. If all the values are  {@code null} or the array is {@code null}or empty then  {@code null} is returned.</p><pre> ObjectUtils.firstNonNull(null, null)      = null ObjectUtils.firstNonNull(null, "")        = "" ObjectUtils.firstNonNull(null, null, "")  = "" ObjectUtils.firstNonNull(null, "zz")      = "zz" ObjectUtils.firstNonNull("abc", *)        = "abc" ObjectUtils.firstNonNull(null, "xyz", *)  = "xyz" ObjectUtils.firstNonNull(Boolean.TRUE, *) = Boolean.TRUE ObjectUtils.firstNonNull()                = null </pre>
 * @param < T > the component type of the array
 * @param values  the values to test, may be {@code null} or empty
 * @return the first value from {@code values} which is not {@code null}, or  {@code null} if there are no non-null values
 * @since 3.0
 */
//
//
/** 
 * <p>Compares two objects for equality, where either one or both objects may be  {@code null}.</p> <pre> ObjectUtils.equals(null, null)                  = true ObjectUtils.equals(null, "")                    = false ObjectUtils.equals("", null)                    = false ObjectUtils.equals("", "")                      = true ObjectUtils.equals(Boolean.TRUE, null)          = false ObjectUtils.equals(Boolean.TRUE, "true")        = false ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false </pre>
 * @param object1  the first object, may be {@code null}
 * @param object2  the second object, may be {@code null}
 * @return {@code true} if the values of both objects are the same
 */
/** 
 * <p>Compares two objects for inequality, where either one or both objects may be  {@code null}.</p> <pre> ObjectUtils.notEqual(null, null)                  = false ObjectUtils.notEqual(null, "")                    = true ObjectUtils.notEqual("", null)                    = true ObjectUtils.notEqual("", "")                      = false ObjectUtils.notEqual(Boolean.TRUE, null)          = true ObjectUtils.notEqual(Boolean.TRUE, "true")        = true ObjectUtils.notEqual(Boolean.TRUE, Boolean.TRUE)  = false ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) = true </pre>
 * @param object1  the first object, may be {@code null}
 * @param object2  the second object, may be {@code null}
 * @return {@code false} if the values of both objects are the same
 */
/** 
 * <p>Gets the hash code of an object returning zero when the object is  {@code null}.</p> <pre> ObjectUtils.hashCode(null)   = 0 ObjectUtils.hashCode(obj)    = obj.hashCode() </pre>
 * @param obj  the object to obtain the hash code of, may be {@code null}
 * @return the hash code of the object, or zero if null
 * @since 2.1
 */
//
/** 
 * <p>Gets the hash code for multiple objects.</p> <p>This allows a hash code to be rapidly calculated for a number of objects. The hash code for a single object is the <em>not</em> same as  {@link #hashCode(Object)}. The hash code for multiple objects is the same as that calculated by an {@code ArrayList} containing the specified objects.</p><pre> ObjectUtils.hashCodeMulti()                 = 1 ObjectUtils.hashCodeMulti((Object[]) null)  = 1 ObjectUtils.hashCodeMulti(a)                = 31 + a.hashCode() ObjectUtils.hashCodeMulti(a,b)              = (31 + a.hashCode()) * 31 + b.hashCode() ObjectUtils.hashCodeMulti(a,b,c)            = ((31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode() </pre>
 * @param objects  the objects to obtain the hash code of, may be {@code null}
 * @return the hash code of the objects, or zero if null
 * @since 3.0
 */
//
//
/** 
 * <p>Gets the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will return  {@code null}.</p> <pre> ObjectUtils.identityToString(null)         = null ObjectUtils.identityToString("")           = "java.lang.String@1e23" ObjectUtils.identityToString(Boolean.TRUE) = "java.lang.Boolean@7fa" </pre>
 * @param object  the object to create a toString for, may be{@code null}
 * @return the default toString text, or {@code null} if{@code null} passed in
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(appendable, "")            = appendable.append("java.lang.String@1e23" ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append("java.lang.Boolean@7fa") </pre>
 * @param appendable  the appendable to append to
 * @param object  the object to create a toString for
 * @throws IOException 
 * @since 3.2
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(builder, "")            = builder.append("java.lang.String@1e23" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa") </pre>
 * @param builder  the builder to append to
 * @param object  the object to create a toString for
 * @since 3.2
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(buf, "")            = buf.append("java.lang.String@1e23" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa") </pre>
 * @param buffer  the buffer to append to
 * @param object  the object to create a toString for
 * @since 2.4
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(builder, "")            = builder.append("java.lang.String@1e23" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa") </pre>
 * @param builder  the builder to append to
 * @param object  the object to create a toString for
 * @since 3.2
 */
//
//
/** 
 * <p>Gets the  {@code toString} of an {@code Object} returningan empty string ("") if  {@code null} input.</p><pre> ObjectUtils.toString(null)         = "" ObjectUtils.toString("")           = "" ObjectUtils.toString("bat")        = "bat" ObjectUtils.toString(Boolean.TRUE) = "true" </pre>
 * @see StringUtils#defaultString(String)
 * @see String#valueOf(Object)
 * @param obj  the Object to {@code toString}, may be null
 * @return the passed in Object's toString, or {@code ""} if {@code null} input
 * @since 2.0
 */
/** 
 * <p>Gets the  {@code toString} of an {@code Object} returninga specified text if  {@code null} input.</p><pre> ObjectUtils.toString(null, null)           = null ObjectUtils.toString(null, "null")         = "null" ObjectUtils.toString("", "null")           = "" ObjectUtils.toString("bat", "null")        = "bat" ObjectUtils.toString(Boolean.TRUE, "null") = "true" </pre>
 * @see StringUtils#defaultString(String,String)
 * @see String#valueOf(Object)
 * @param obj  the Object to {@code toString}, may be null
 * @param nullStr  the String to return if {@code null} input, may be null
 * @return the passed in Object's toString, or {@code nullStr} if {@code null} input
 * @since 2.0
 */
//
//
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param values the set of comparable values, may be null
 * @return <ul> <li>If any objects are non-null and unequal, the lesser object. <li>If all objects are non-null and equal, the first. <li>If any of the comparables are null, the lesser of the non-null objects. <li>If all the comparables are null, null is returned. </ul>
 */
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param values the set of comparable values, may be null
 * @return <ul> <li>If any objects are non-null and unequal, the greater object. <li>If all objects are non-null and equal, the first. <li>If any of the comparables are null, the greater of the non-null objects. <li>If all the comparables are null, null is returned. </ul>
 */
/** 
 * <p>Null safe comparison of Comparables. {@code null} is assumed to be less than a non-{@code null} value.</p>
 * @param < T > type of the values processed by this method
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @return a negative value if c1 < c2, zero if c1 = c2and a positive value if c1 > c2
 */
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @param nullGreater if true {@code null} is considered greaterthan a non- {@code null} value or if false {@code null} isconsidered less than a Non- {@code null} value
 * @return a negative value if c1 < c2, zero if c1 = c2and a positive value if c1 > c2
 * @see java.util.Comparator#compare(Object,Object)
 */
/** 
 * Find the "best guess" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.
 * @param < T > type of values processed by this method
 * @param items to compare
 * @return T at middle position
 * @throws NullPointerException if items is {@code null}
 * @throws IllegalArgumentException if items is empty or contains {@code null} values
 * @since 3.0.1
 */
//
/** 
 * Find the "best guess" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.
 * @param < T > type of values processed by this method
 * @param comparator to use for comparisons
 * @param items to compare
 * @return T at middle position
 * @throws NullPointerException if items or comparator is {@code null}
 * @throws IllegalArgumentException if items is empty or contains {@code null} values
 * @since 3.0.1
 */
//
//
//
/** 
 * Find the most frequently occurring item.
 * @param < T > type of values processed by this method
 * @param items to check
 * @return most populous T, {@code null} if non-unique or no items supplied
 * @since 3.0.1
 */
//
//
/** 
 * <p>Clone an object.</p>
 * @param < T > the type of the object
 * @param obj  the object to clone, null returns null
 * @return the clone if the object implements {@link Cloneable} otherwise {@code null}
 * @throws CloneFailedException if the object is cloneable and the clone operation fails
 * @since 3.0
 */
//
/** 
 * <p>Clone an object if possible.</p> <p>This method is similar to  {@link #clone(Object)}, but will return the provided instance as the return value instead of  {@code null} if the instanceis not cloneable. This is more convenient if the caller uses different implementations (e.g. of a service) and some of the implementations do not allow concurrent processing or have state. In such cases the implementation can simply provide a proper clone implementation and the caller's code does not have to change.</p>
 * @param < T > the type of the object
 * @param obj  the object to clone, null returns null
 * @return the clone if the object implements {@link Cloneable} otherwise the object itself
 * @throws CloneFailedException if the object is cloneable and the clone operation fails
 * @since 3.0
 */
//
//
/** 
 * <p>Class used as a null placeholder where  {@code null}has another meaning.</p> <p>For example, in a  {@code HashMap} the{@link java.util.HashMap#get(java.lang.Object)} method returns{@code null} if the {@code Map} contains {@code null} or if there isno matching key. The  {@code Null} placeholder can be used to distinguishbetween these two cases.</p> <p>Another example is  {@code Hashtable}, where  {@code null}cannot be stored.</p>
 */
/** 
 * Required for serialization support. Declare serialization compatibility with Commons Lang 1.0
 * @see java.io.Serializable
 */
/** 
 * Restricted constructor - singleton.
 */
/** 
 * <p>Ensure singleton.</p>
 * @return the singleton value
 */
//
/* *//** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static boolean MAGIC_FLAG = ObjectUtils.CONST(true); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the boolean value to return
 * @return the boolean v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static byte MAGIC_BYTE = ObjectUtils.CONST((byte) 127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the byte value to return
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static byte MAGIC_BYTE = ObjectUtils.CONST_BYTE(127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the byte literal (as an int) value to return
 * @throws IllegalArgumentException if the value passed to vis larger than a byte, that is, smaller than -128 or larger than 127.
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static char MAGIC_CHAR = ObjectUtils.CONST('a'); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the char value to return
 * @return the char v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static short MAGIC_SHORT = ObjectUtils.CONST((short) 123); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the short value to return
 * @return the short v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static short MAGIC_SHORT = ObjectUtils.CONST_SHORT(127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the short literal (as an int) value to return
 * @throws IllegalArgumentException if the value passed to vis larger than a short, that is, smaller than -32768 or larger than 32767.
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static int MAGIC_INT = ObjectUtils.CONST(123); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the int value to return
 * @return the int v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static long MAGIC_LONG = ObjectUtils.CONST(123L); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the long value to return
 * @return the long v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the float value to return
 * @return the float v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the double value to return
 * @return the double v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static String MAGIC_STRING = ObjectUtils.CONST("abc"); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param < T > the Object type 
 * @param v the genericized Object value to return (typically a String).
 * @return the genericized Object v, unchanged (typically a String).
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on  {@code Object}.</p> <p>This class tries to handle  {@code null} input gracefully.An exception will generally not be thrown for a  {@code null} input.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
//
/** 
 * <p>Singleton used as a  {@code null} placeholder where{@code null} has another meaning.</p><p>For example, in a  {@code HashMap} the{@link java.util.HashMap#get(java.lang.Object)} method returns{@code null} if the {@code Map} contains {@code null} or if thereis no matching key. The  {@code Null} placeholder can be used todistinguish between these two cases.</p> <p>Another example is  {@code Hashtable}, where  {@code null}cannot be stored.</p> <p>This instance is Serializable.</p>
 */
/** 
 * <p> {@code ObjectUtils} instances should NOT be constructed instandard programming. Instead, the static methods on the class should be used, such as  {@code ObjectUtils.defaultIfNull("a","b");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Returns a default value if the object passed is  {@code null}.</p> <pre> ObjectUtils.defaultIfNull(null, null)      = null ObjectUtils.defaultIfNull(null, "")        = "" ObjectUtils.defaultIfNull(null, "zz")      = "zz" ObjectUtils.defaultIfNull("abc", *)        = "abc" ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE </pre>
 * @param < T > the type of the object
 * @param object  the {@code Object} to test, may be {@code null}
 * @param defaultValue  the default value to return, may be {@code null}
 * @return {@code object} if it is not {@code null}, defaultValue otherwise
 */
/** 
 * <p>Returns the first value in the array which is not  {@code null}. If all the values are  {@code null} or the array is {@code null}or empty then  {@code null} is returned.</p><pre> ObjectUtils.firstNonNull(null, null)      = null ObjectUtils.firstNonNull(null, "")        = "" ObjectUtils.firstNonNull(null, null, "")  = "" ObjectUtils.firstNonNull(null, "zz")      = "zz" ObjectUtils.firstNonNull("abc", *)        = "abc" ObjectUtils.firstNonNull(null, "xyz", *)  = "xyz" ObjectUtils.firstNonNull(Boolean.TRUE, *) = Boolean.TRUE ObjectUtils.firstNonNull()                = null </pre>
 * @param < T > the component type of the array
 * @param values  the values to test, may be {@code null} or empty
 * @return the first value from {@code values} which is not {@code null}, or  {@code null} if there are no non-null values
 * @since 3.0
 */
//
//
/** 
 * <p>Compares two objects for equality, where either one or both objects may be  {@code null}.</p> <pre> ObjectUtils.equals(null, null)                  = true ObjectUtils.equals(null, "")                    = false ObjectUtils.equals("", null)                    = false ObjectUtils.equals("", "")                      = true ObjectUtils.equals(Boolean.TRUE, null)          = false ObjectUtils.equals(Boolean.TRUE, "true")        = false ObjectUtils.equals(Boolean.TRUE, Boolean.TRUE)  = true ObjectUtils.equals(Boolean.TRUE, Boolean.FALSE) = false </pre>
 * @param object1  the first object, may be {@code null}
 * @param object2  the second object, may be {@code null}
 * @return {@code true} if the values of both objects are the same
 */
/** 
 * <p>Compares two objects for inequality, where either one or both objects may be  {@code null}.</p> <pre> ObjectUtils.notEqual(null, null)                  = false ObjectUtils.notEqual(null, "")                    = true ObjectUtils.notEqual("", null)                    = true ObjectUtils.notEqual("", "")                      = false ObjectUtils.notEqual(Boolean.TRUE, null)          = true ObjectUtils.notEqual(Boolean.TRUE, "true")        = true ObjectUtils.notEqual(Boolean.TRUE, Boolean.TRUE)  = false ObjectUtils.notEqual(Boolean.TRUE, Boolean.FALSE) = true </pre>
 * @param object1  the first object, may be {@code null}
 * @param object2  the second object, may be {@code null}
 * @return {@code false} if the values of both objects are the same
 */
/** 
 * <p>Gets the hash code of an object returning zero when the object is  {@code null}.</p> <pre> ObjectUtils.hashCode(null)   = 0 ObjectUtils.hashCode(obj)    = obj.hashCode() </pre>
 * @param obj  the object to obtain the hash code of, may be {@code null}
 * @return the hash code of the object, or zero if null
 * @since 2.1
 */
//
/** 
 * <p>Gets the hash code for multiple objects.</p> <p>This allows a hash code to be rapidly calculated for a number of objects. The hash code for a single object is the <em>not</em> same as  {@link #hashCode(Object)}. The hash code for multiple objects is the same as that calculated by an {@code ArrayList} containing the specified objects.</p><pre> ObjectUtils.hashCodeMulti()                 = 1 ObjectUtils.hashCodeMulti((Object[]) null)  = 1 ObjectUtils.hashCodeMulti(a)                = 31 + a.hashCode() ObjectUtils.hashCodeMulti(a,b)              = (31 + a.hashCode()) * 31 + b.hashCode() ObjectUtils.hashCodeMulti(a,b,c)            = ((31 + a.hashCode()) * 31 + b.hashCode()) * 31 + c.hashCode() </pre>
 * @param objects  the objects to obtain the hash code of, may be {@code null}
 * @return the hash code of the objects, or zero if null
 * @since 3.0
 */
//
//
/** 
 * <p>Gets the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will return  {@code null}.</p> <pre> ObjectUtils.identityToString(null)         = null ObjectUtils.identityToString("")           = "java.lang.String@1e23" ObjectUtils.identityToString(Boolean.TRUE) = "java.lang.Boolean@7fa" </pre>
 * @param object  the object to create a toString for, may be{@code null}
 * @return the default toString text, or {@code null} if{@code null} passed in
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(appendable, "")            = appendable.append("java.lang.String@1e23" ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(appendable, Boolean.TRUE)  = appendable.append("java.lang.Boolean@7fa") </pre>
 * @param appendable  the appendable to append to
 * @param object  the object to create a toString for
 * @throws IOException 
 * @since 3.2
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(builder, "")            = builder.append("java.lang.String@1e23" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa") </pre>
 * @param builder  the builder to append to
 * @param object  the object to create a toString for
 * @since 3.2
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(buf, "")            = buf.append("java.lang.String@1e23" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append("java.lang.Boolean@7fa") </pre>
 * @param buffer  the buffer to append to
 * @param object  the object to create a toString for
 * @since 2.4
 */
/** 
 * <p>Appends the toString that would be produced by  {@code Object}if a class did not override toString itself.  {@code null}will throw a NullPointerException for either of the two parameters. </p> <pre> ObjectUtils.identityToString(builder, "")            = builder.append("java.lang.String@1e23" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa" ObjectUtils.identityToString(builder, Boolean.TRUE)  = builder.append("java.lang.Boolean@7fa") </pre>
 * @param builder  the builder to append to
 * @param object  the object to create a toString for
 * @since 3.2
 */
//
//
/** 
 * <p>Gets the  {@code toString} of an {@code Object} returningan empty string ("") if  {@code null} input.</p><pre> ObjectUtils.toString(null)         = "" ObjectUtils.toString("")           = "" ObjectUtils.toString("bat")        = "bat" ObjectUtils.toString(Boolean.TRUE) = "true" </pre>
 * @see StringUtils#defaultString(String)
 * @see String#valueOf(Object)
 * @param obj  the Object to {@code toString}, may be null
 * @return the passed in Object's toString, or {@code ""} if {@code null} input
 * @since 2.0
 */
/** 
 * <p>Gets the  {@code toString} of an {@code Object} returninga specified text if  {@code null} input.</p><pre> ObjectUtils.toString(null, null)           = null ObjectUtils.toString(null, "null")         = "null" ObjectUtils.toString("", "null")           = "" ObjectUtils.toString("bat", "null")        = "bat" ObjectUtils.toString(Boolean.TRUE, "null") = "true" </pre>
 * @see StringUtils#defaultString(String,String)
 * @see String#valueOf(Object)
 * @param obj  the Object to {@code toString}, may be null
 * @param nullStr  the String to return if {@code null} input, may be null
 * @return the passed in Object's toString, or {@code nullStr} if {@code null} input
 * @since 2.0
 */
//
//
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param values the set of comparable values, may be null
 * @return <ul> <li>If any objects are non-null and unequal, the lesser object. <li>If all objects are non-null and equal, the first. <li>If any of the comparables are null, the lesser of the non-null objects. <li>If all the comparables are null, null is returned. </ul>
 */
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param values the set of comparable values, may be null
 * @return <ul> <li>If any objects are non-null and unequal, the greater object. <li>If all objects are non-null and equal, the first. <li>If any of the comparables are null, the greater of the non-null objects. <li>If all the comparables are null, null is returned. </ul>
 */
/** 
 * <p>Null safe comparison of Comparables. {@code null} is assumed to be less than a non-{@code null} value.</p>
 * @param < T > type of the values processed by this method
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @return a negative value if c1 < c2, zero if c1 = c2and a positive value if c1 > c2
 */
/** 
 * <p>Null safe comparison of Comparables.</p>
 * @param < T > type of the values processed by this method
 * @param c1  the first comparable, may be null
 * @param c2  the second comparable, may be null
 * @param nullGreater if true {@code null} is considered greaterthan a non- {@code null} value or if false {@code null} isconsidered less than a Non- {@code null} value
 * @return a negative value if c1 < c2, zero if c1 = c2and a positive value if c1 > c2
 * @see java.util.Comparator#compare(Object,Object)
 */
/** 
 * Find the "best guess" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.
 * @param < T > type of values processed by this method
 * @param items to compare
 * @return T at middle position
 * @throws NullPointerException if items is {@code null}
 * @throws IllegalArgumentException if items is empty or contains {@code null} values
 * @since 3.0.1
 */
//
/** 
 * Find the "best guess" middle value among comparables. If there is an even number of total values, the lower of the two middle values will be returned.
 * @param < T > type of values processed by this method
 * @param comparator to use for comparisons
 * @param items to compare
 * @return T at middle position
 * @throws NullPointerException if items or comparator is {@code null}
 * @throws IllegalArgumentException if items is empty or contains {@code null} values
 * @since 3.0.1
 */
//
//
//
/** 
 * Find the most frequently occurring item.
 * @param < T > type of values processed by this method
 * @param items to check
 * @return most populous T, {@code null} if non-unique or no items supplied
 * @since 3.0.1
 */
//
//
/** 
 * <p>Clone an object.</p>
 * @param < T > the type of the object
 * @param obj  the object to clone, null returns null
 * @return the clone if the object implements {@link Cloneable} otherwise {@code null}
 * @throws CloneFailedException if the object is cloneable and the clone operation fails
 * @since 3.0
 */
//
/** 
 * <p>Clone an object if possible.</p> <p>This method is similar to  {@link #clone(Object)}, but will return the provided instance as the return value instead of  {@code null} if the instanceis not cloneable. This is more convenient if the caller uses different implementations (e.g. of a service) and some of the implementations do not allow concurrent processing or have state. In such cases the implementation can simply provide a proper clone implementation and the caller's code does not have to change.</p>
 * @param < T > the type of the object
 * @param obj  the object to clone, null returns null
 * @return the clone if the object implements {@link Cloneable} otherwise the object itself
 * @throws CloneFailedException if the object is cloneable and the clone operation fails
 * @since 3.0
 */
//
//
/** 
 * <p>Class used as a null placeholder where  {@code null}has another meaning.</p> <p>For example, in a  {@code HashMap} the{@link java.util.HashMap#get(java.lang.Object)} method returns{@code null} if the {@code Map} contains {@code null} or if there isno matching key. The  {@code Null} placeholder can be used to distinguishbetween these two cases.</p> <p>Another example is  {@code Hashtable}, where  {@code null}cannot be stored.</p>
 */
/** 
 * Required for serialization support. Declare serialization compatibility with Commons Lang 1.0
 * @see java.io.Serializable
 */
/** 
 * Restricted constructor - singleton.
 */
/** 
 * <p>Ensure singleton.</p>
 * @return the singleton value
 */
//
/* *//** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static boolean MAGIC_FLAG = ObjectUtils.CONST(true); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the boolean value to return
 * @return the boolean v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static byte MAGIC_BYTE = ObjectUtils.CONST((byte) 127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the byte value to return
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static byte MAGIC_BYTE = ObjectUtils.CONST_BYTE(127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the byte literal (as an int) value to return
 * @throws IllegalArgumentException if the value passed to vis larger than a byte, that is, smaller than -128 or larger than 127.
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static char MAGIC_CHAR = ObjectUtils.CONST('a'); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the char value to return
 * @return the char v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static short MAGIC_SHORT = ObjectUtils.CONST((short) 123); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the short value to return
 * @return the short v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static short MAGIC_SHORT = ObjectUtils.CONST_SHORT(127); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the short literal (as an int) value to return
 * @throws IllegalArgumentException if the value passed to vis larger than a short, that is, smaller than -32768 or larger than 32767.
 * @return the byte v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static int MAGIC_INT = ObjectUtils.CONST(123); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the int value to return
 * @return the int v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static long MAGIC_LONG = ObjectUtils.CONST(123L); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the long value to return
 * @return the long v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the float value to return
 * @return the float v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param v the double value to return
 * @return the double v, unchanged
 */
/** 
 * This method returns the provided value unchanged. This can prevent javac from inlining a constant field, e.g., <pre> public final static String MAGIC_STRING = ObjectUtils.CONST("abc"); </pre> This way any jars that refer to this field do not have to recompile themselves if the field's value changes at some future date.
 * @param < T > the Object type 
 * @param v the genericized Object value to return (typically a String).
 * @return the genericized Object v, unchanged (typically a String).
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3ac76ad9
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@213c812a

#TRAVERSE
LEFTCHILD: CLASS: ObjectUtils
RIGHTCHILD: CLASS: ObjectUtils
##SNODE L: CLASS: ObjectUtils
##SNODE L: CLASS: ObjectUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@25814d3c
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@436103b1

##TRAVERSE
LEFTCHILD: METHOD: toString(Object)
RIGHTCHILD: METHOD: toString(Object)
###SNODE L: METHOD: toString(Object)
###SNODE L: METHOD: toString(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(int)
RIGHTCHILD: METHOD: CONST(int)
###SNODE L: METHOD: CONST(int)
###SNODE L: METHOD: CONST(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: mode(T)
RIGHTCHILD: METHOD: mode(T)
###SNODE L: METHOD: mode(T)
###SNODE L: METHOD: mode(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: clone(T)
RIGHTCHILD: METHOD: clone(T)
###SNODE L: METHOD: clone(T)
###SNODE L: METHOD: clone(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(float)
RIGHTCHILD: METHOD: CONST(float)
###SNODE L: METHOD: CONST(float)
###SNODE L: METHOD: CONST(float)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defaultIfNull(T,T)
RIGHTCHILD: METHOD: defaultIfNull(T,T)
###SNODE L: METHOD: defaultIfNull(T,T)
###SNODE L: METHOD: defaultIfNull(T,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: median(T)
RIGHTCHILD: METHOD: median(T)
###SNODE L: METHOD: median(T)
###SNODE L: METHOD: median(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(long)
RIGHTCHILD: METHOD: CONST(long)
###SNODE L: METHOD: CONST(long)
###SNODE L: METHOD: CONST(long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: identityToString(StringBuilder,Object)
RIGHTCHILD: METHOD: identityToString(StringBuilder,Object)
###SNODE L: METHOD: identityToString(StringBuilder,Object)
###SNODE L: METHOD: identityToString(StringBuilder,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: compare(T,T,boolean)
RIGHTCHILD: METHOD: compare(T,T,boolean)
###SNODE L: METHOD: compare(T,T,boolean)
###SNODE L: METHOD: compare(T,T,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(double)
RIGHTCHILD: METHOD: CONST(double)
###SNODE L: METHOD: CONST(double)
###SNODE L: METHOD: CONST(double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCodeMulti(Object)
RIGHTCHILD: METHOD: hashCodeMulti(Object)
###SNODE L: METHOD: hashCodeMulti(Object)
###SNODE L: METHOD: hashCodeMulti(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: cloneIfPossible(T)
RIGHTCHILD: METHOD: cloneIfPossible(T)
###SNODE L: METHOD: cloneIfPossible(T)
###SNODE L: METHOD: cloneIfPossible(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(T)
RIGHTCHILD: METHOD: CONST(T)
###SNODE L: METHOD: CONST(T)
###SNODE L: METHOD: CONST(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: firstNonNull(T)
RIGHTCHILD: METHOD: firstNonNull(T)
###SNODE L: METHOD: firstNonNull(T)
###SNODE L: METHOD: firstNonNull(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST_BYTE(int)
RIGHTCHILD: METHOD: CONST_BYTE(int)
###SNODE L: METHOD: CONST_BYTE(int)
###SNODE L: METHOD: CONST_BYTE(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notEqual(Object,Object)
RIGHTCHILD: METHOD: notEqual(Object,Object)
###SNODE L: METHOD: notEqual(Object,Object)
###SNODE L: METHOD: notEqual(Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: median(Comparator<T>,T)
RIGHTCHILD: METHOD: median(Comparator<T>,T)
###SNODE L: METHOD: median(Comparator<T>,T)
###SNODE L: METHOD: median(Comparator<T>,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: identityToString(Object)
RIGHTCHILD: METHOD: identityToString(Object)
###SNODE L: METHOD: identityToString(Object)
###SNODE L: METHOD: identityToString(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: compare(T,T)
RIGHTCHILD: METHOD: compare(T,T)
###SNODE L: METHOD: compare(T,T)
###SNODE L: METHOD: compare(T,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: ObjectUtils()
RIGHTCHILD: CONSTRUCTOR: ObjectUtils()
###SNODE L: CONSTRUCTOR: ObjectUtils()
###SNODE L: CONSTRUCTOR: ObjectUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode(Object)
RIGHTCHILD: METHOD: hashCode(Object)
###SNODE L: METHOD: hashCode(Object)
###SNODE L: METHOD: hashCode(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(short)
RIGHTCHILD: METHOD: CONST(short)
###SNODE L: METHOD: CONST(short)
###SNODE L: METHOD: CONST(short)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(Object,String)
RIGHTCHILD: METHOD: toString(Object,String)
###SNODE L: METHOD: toString(Object,String)
###SNODE L: METHOD: toString(Object,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(char)
RIGHTCHILD: METHOD: CONST(char)
###SNODE L: METHOD: CONST(char)
###SNODE L: METHOD: CONST(char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(Object,Object)
RIGHTCHILD: METHOD: equals(Object,Object)
###SNODE L: METHOD: equals(Object,Object)
###SNODE L: METHOD: equals(Object,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST_SHORT(int)
RIGHTCHILD: METHOD: CONST_SHORT(int)
###SNODE L: METHOD: CONST_SHORT(int)
###SNODE L: METHOD: CONST_SHORT(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: min(T)
RIGHTCHILD: METHOD: min(T)
###SNODE L: METHOD: min(T)
###SNODE L: METHOD: min(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: max(T)
RIGHTCHILD: METHOD: max(T)
###SNODE L: METHOD: max(T)
###SNODE L: METHOD: max(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CLASS: Null
RIGHTCHILD: CLASS: Null
###SNODE L: CLASS: Null
###SNODE L: CLASS: Null
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@427128a6
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@701c413

###TRAVERSE
LEFTCHILD: METHOD: readResolve()
RIGHTCHILD: METHOD: readResolve()
####SNODE L: METHOD: readResolve()
####SNODE L: METHOD: readResolve()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: serialVersionUID : long
RIGHTCHILD: FIELD: serialVersionUID : long
####SNODE L: FIELD: serialVersionUID : long
####SNODE L: FIELD: serialVersionUID : long
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: Null()
RIGHTCHILD: CONSTRUCTOR: Null()
####SNODE L: CONSTRUCTOR: Null()
####SNODE L: CONSTRUCTOR: Null()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: CONST(byte)
RIGHTCHILD: METHOD: CONST(byte)
###SNODE L: METHOD: CONST(byte)
###SNODE L: METHOD: CONST(byte)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: identityToString(StrBuilder,Object)
RIGHTCHILD: METHOD: identityToString(StrBuilder,Object)
###SNODE L: METHOD: identityToString(StrBuilder,Object)
###SNODE L: METHOD: identityToString(StrBuilder,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: CONST(boolean)
RIGHTCHILD: METHOD: CONST(boolean)
###SNODE L: METHOD: CONST(boolean)
###SNODE L: METHOD: CONST(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: NULL : Null
RIGHTCHILD: FIELD: NULL : Null
###SNODE L: FIELD: NULL : Null
###SNODE L: FIELD: NULL : Null
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: identityToString(Appendable,Object)
RIGHTCHILD: METHOD: identityToString(Appendable,Object)
###SNODE L: METHOD: identityToString(Appendable,Object)
###SNODE L: METHOD: identityToString(Appendable,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: identityToString(StringBuffer,Object)
RIGHTCHILD: METHOD: identityToString(StringBuffer,Object)
###SNODE L: METHOD: identityToString(StringBuffer,Object)
###SNODE L: METHOD: identityToString(StringBuffer,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)997
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)478
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)187
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)12
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)7
-(0)-(0)-(0)-(1)11
-(0)-(0)-(1)13
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)534
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)998
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)189
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)999
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)1000
-(0)-(0)-(1)1001
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)193
-(0)-(0)-(1)194
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(1)1002
-(0)-(0)-(1)1003
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)1004
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1005
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1006
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1005
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1004
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1007
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)588
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)232
-(2)-(8)-(12)-(0)-(0)-(2)588
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1008
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)327
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1009
-(2)-(8)-(12)-(0)-(1)-(0)-(1)327
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1009
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)1009
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)1010
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)1011
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1010
-(2)-(8)-(12)-(0)-(0)-(1)1011
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1010
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1011
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1010
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)1011
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1012
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)1010
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)1011
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1004
-(2)-(8)-(12)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1010
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1011
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(0)-(2)-(2)130
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1013
-(2)-(8)-(4)129
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)1014
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1015
-(2)-(8)-(12)-(0)-(2)-(2)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)1014
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)232
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1014
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1015
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)-(0)1015
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)-(1)1016
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)1004
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(3)232
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1015
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1017
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)16
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1017
-(2)-(8)-(12)-(0)-(0)-(3)16
-(2)-(8)-(12)-(0)-(0)-(3)232
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1017
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1018
-(2)-(8)-(7)-(3)1019
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(10)997
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1020
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1019
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)87
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)600
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)260
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)1021
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(3)232
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1017
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1003
-(2)-(8)-(7)-(3)16
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1020
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)87
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)600
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)260
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)1021
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(3)232
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1017
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)93
-(2)-(8)-(7)-(3)94
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1020
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)87
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)600
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)260
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)1021
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(3)232
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1017
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)79
-(2)-(8)-(7)-(3)16
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1020
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)-(2)154
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)82
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)87
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)600
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)260
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)1021
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(3)232
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)81
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(0)-(2)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1022
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)1022
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(0)-(2)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)282
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)1024
-(2)-(8)-(6)-(2)-(1)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)327
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(1)327
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)97
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)283
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)1024
-(2)-(8)-(6)-(2)-(1)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)327
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(1)327
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)97
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1025
-(2)-(8)-(4)129
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)1024
-(2)-(8)-(6)-(2)-(1)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)530
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)531
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(3)530
-(2)-(8)-(12)-(0)-(0)-(3)531
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1025
-(2)-(8)-(4)129
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)1024
-(2)-(8)-(6)-(2)-(1)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)530
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)531
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1026
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)530
-(2)-(8)-(12)-(0)-(0)-(1)531
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)530
-(2)-(8)-(12)-(0)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1026
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)218
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(0)217
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)531
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(0)1026
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)-(2)217
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)530
-(2)-(8)-(12)-(0)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(3)531
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1028
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)1024
-(2)-(8)-(6)-(2)-(1)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)248
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)999
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)999
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(0)-(2)300
-(2)-(8)-(12)-(0)-(0)-(3)339
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)182
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)247
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)919
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)231
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)256
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)-(2)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1028
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)998
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1030
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)248
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)-(0)-(3)1031
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)1030
-(2)-(8)-(12)-(0)-(0)-(3)1032
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)999
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)999
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1030
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)534
-(2)-(8)-(12)-(0)-(0)-(2)300
-(2)-(8)-(12)-(0)-(0)-(3)339
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)72
-(2)-(8)-(12)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(1)182
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(2)247
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)919
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)231
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)256
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)-(0)339
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(0)-(2)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1033
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)248
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)299
-(2)-(8)-(12)-(0)-(0)-(3)248
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)328
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)-(1)189
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)-(1)194
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(4)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(4)-(0)248
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(4)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(1)248
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(1)194
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(0)328
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(3)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)328
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(2)235
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)-(1)194
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(4)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(2)332
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)190
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)233
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)194
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)328
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(2)335
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)1035
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(0)-(0)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(0)-(2)237
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(2)291
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1035
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)1035
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)283
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(0)283
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(1)1035
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(1)-(0)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(1)-(2)236
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1036
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)145
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)57
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)160
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)146
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)160
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(2)147
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)74
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)162
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(0)-(0)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)-(1)500
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)250
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(0)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(2)263
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(2)-(2)-(3)500
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(2)259
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)160
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(2)320
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(0)187
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(2)331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)500
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(3)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)128
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)13
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)250
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)718
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)1037
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)250
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)122
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(1)716
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1001
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(0)1038
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(2)82
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(2)1039
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(1)125
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1001
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(0)1040
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(2)82
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)127
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(1)-(1)12
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(3)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1001
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(0)1041
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(1)-(2)82
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(0)334
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(1)-(0)-(0)-(4)-(2)1042
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)72
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)1043
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)132
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1043
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1044
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)250
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)250
-(2)-(8)-(12)-(0)-(2)-(2)-(3)500
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)250
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)500
-(2)-(8)-(12)-(0)-(0)-(2)250
-(2)-(8)185
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1005
-(2)-(8)-(6)24
-(2)-(8)-(6)-(1)478
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)26
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)27
-(2)-(8)-(8)-(3)-(2)1045
-(2)-(8)-(8)101
-(2)-(8)-(8)-(2)1005
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)219
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(2)1046
-(2)-(8)-(8)-(4)24
-(2)-(8)-(8)-(4)-(1)96
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)89
-(2)-(8)-(8)-(12)-(0)-(0)2
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1004
-(2)-(8)-(8)-(12)-(0)-(0)-(1)1006
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)165
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1048
-(2)-(8)-(4)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)329
-(2)-(8)-(10)239
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)329
-(2)-(8)-(12)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)163
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)797
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)329
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)163
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)276
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)1049
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)329
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)49
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)165
-(2)-(8)-(12)-(0)-(0)-(1)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)170
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)167
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1050
-(2)-(8)-(4)167
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)329
-(2)-(8)-(10)239
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)329
-(2)-(8)-(12)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)166
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)797
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)329
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)166
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)276
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)1051
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)329
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)49
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)74
-(2)-(8)-(12)-(0)-(0)-(0)167
-(2)-(8)-(12)-(0)-(0)-(1)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)26
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)173
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)173
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)175
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1047
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)329
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)329

LEFT COMMENTS
//
RIGHT COMMENTS
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
//
RIGHT COMMENTS
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>Operations for random  {@code String}s.</p> <p>Currently <em>private high surrogate</em> characters are ignored.  These are Unicode characters that fall between the values 56192 (db80) and 56319 (dbff) as we don't know how to handle them.  High and low surrogates are correctly dealt with - that is if a  high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f)  then it is followed by a low surrogate. If a low surrogate is chosen,  56320 (dc00) to 57343 (dfff) then it is placed after a randomly  chosen high surrogate. </p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>Random object used by random method. This has to be not local to the random method so as to not return the same value in the  same millisecond.</p>
 */
/** 
 * <p> {@code RandomStringUtils} instances should NOT be constructed instandard programming. Instead, the class should be used as {@code RandomStringUtils.random(5);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of all characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters whose ASCII value is between  {@code 32} and {@code 126} (inclusive).</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alphabetic characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param letters  if {@code true}, generated string will include alphabetic characters
 * @param numbers  if {@code true}, generated string will include numeric characters
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include alphabetic characters
 * @param numbers  if {@code true}, generated string will include numeric characters
 * @return the random string
 */
/** 
 * <p>Creates a random string based on a variety of options, using default source of randomness.</p> <p>This method has exactly the same semantics as {@link #random(int,int,int,boolean,boolean,char[],Random)}, but instead of using an externally supplied source of randomness, it uses the internal static  {@link Random} instance.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If  {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not{@code (end - start) + 1} characters in the set array.
 */
/** 
 * <p>Creates a random string based on a variety of options, using supplied source of randomness.</p> <p>If start and end are both  {@code 0}, start and end are set to  {@code ' '} and {@code 'z'}, the ASCII printable characters, will be used, unless letters and numbers are both {@code false}, in which case, start and end are set to {@code 0} and {@code Integer.MAX_VALUE}. <p>If set is not  {@code null}, characters between start and end are chosen.</p> <p>This method accepts a user-supplied  {@link Random}instance to use as a source of randomness. By seeding a single  {@link Random} instance with a fixed seed and using it for each call,the same random sequence of strings can be generated repeatedly and predictably.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.If  {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not{@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */
//
//
//
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified by the string, must not be empty.  If null, the set of all characters is used.</p>
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified.</p>
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations for random  {@code String}s.</p> <p>Currently <em>private high surrogate</em> characters are ignored.  These are Unicode characters that fall between the values 56192 (db80) and 56319 (dbff) as we don't know how to handle them.  High and low surrogates are correctly dealt with - that is if a  high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f)  then it is followed by a low surrogate. If a low surrogate is chosen,  56320 (dc00) to 57343 (dfff) then it is placed after a randomly  chosen high surrogate. </p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>Random object used by random method. This has to be not local to the random method so as to not return the same value in the  same millisecond.</p>
 */
/** 
 * <p> {@code RandomStringUtils} instances should NOT be constructed instandard programming. Instead, the class should be used as {@code RandomStringUtils.random(5);}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of all characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters whose ASCII value is between  {@code 32} and {@code 126} (inclusive).</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alphabetic characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of numeric characters.</p>
 * @param count  the length of random string to create
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param letters  if {@code true}, generated string will include alphabetic characters
 * @param numbers  if {@code true}, generated string will include numeric characters
 * @return the random string
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of alpha-numeric characters as indicated by the arguments.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include alphabetic characters
 * @param numbers  if {@code true}, generated string will include numeric characters
 * @return the random string
 */
/** 
 * <p>Creates a random string based on a variety of options, using default source of randomness.</p> <p>This method has exactly the same semantics as {@link #random(int,int,int,boolean,boolean,char[],Random)}, but instead of using an externally supplied source of randomness, it uses the internal static  {@link Random} instance.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.If  {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not{@code (end - start) + 1} characters in the set array.
 */
/** 
 * <p>Creates a random string based on a variety of options, using supplied source of randomness.</p> <p>If start and end are both  {@code 0}, start and end are set to  {@code ' '} and {@code 'z'}, the ASCII printable characters, will be used, unless letters and numbers are both {@code false}, in which case, start and end are set to {@code 0} and {@code Integer.MAX_VALUE}. <p>If set is not  {@code null}, characters between start and end are chosen.</p> <p>This method accepts a user-supplied  {@link Random}instance to use as a source of randomness. By seeding a single  {@link Random} instance with a fixed seed and using it for each call,the same random sequence of strings can be generated repeatedly and predictably.</p>
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.If  {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not{@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */
//
//
//
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified by the string, must not be empty.  If null, the set of all characters is used.</p>
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */
/** 
 * <p>Creates a random string whose length is the number of characters specified.</p> <p>Characters will be chosen from the set of characters specified.</p>
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@17adbecf
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@59eb987a

#TRAVERSE
LEFTCHILD: CLASS: RandomStringUtils
RIGHTCHILD: CLASS: RandomStringUtils
##SNODE L: CLASS: RandomStringUtils
##SNODE L: CLASS: RandomStringUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@31b4c003
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@74214ac3

##TRAVERSE
LEFTCHILD: METHOD: random(int)
RIGHTCHILD: METHOD: random(int)
###SNODE L: METHOD: random(int)
###SNODE L: METHOD: random(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,boolean,boolean)
RIGHTCHILD: METHOD: random(int,boolean,boolean)
###SNODE L: METHOD: random(int,boolean,boolean)
###SNODE L: METHOD: random(int,boolean,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: randomNumeric(int)
RIGHTCHILD: METHOD: randomNumeric(int)
###SNODE L: METHOD: randomNumeric(int)
###SNODE L: METHOD: randomNumeric(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: RANDOM : Random
RIGHTCHILD: FIELD: RANDOM : Random
###SNODE L: FIELD: RANDOM : Random
###SNODE L: FIELD: RANDOM : Random
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: RandomStringUtils()
RIGHTCHILD: CONSTRUCTOR: RandomStringUtils()
###SNODE L: CONSTRUCTOR: RandomStringUtils()
###SNODE L: CONSTRUCTOR: RandomStringUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: randomAscii(int)
RIGHTCHILD: METHOD: randomAscii(int)
###SNODE L: METHOD: randomAscii(int)
###SNODE L: METHOD: randomAscii(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,char)
RIGHTCHILD: METHOD: random(int,char)
###SNODE L: METHOD: random(int,char)
###SNODE L: METHOD: random(int,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,int,int,boolean,boolean,char)
RIGHTCHILD: METHOD: random(int,int,int,boolean,boolean,char)
###SNODE L: METHOD: random(int,int,int,boolean,boolean,char)
###SNODE L: METHOD: random(int,int,int,boolean,boolean,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,int,int,boolean,boolean,char[],Random)
RIGHTCHILD: METHOD: random(int,int,int,boolean,boolean,char[],Random)
###SNODE L: METHOD: random(int,int,int,boolean,boolean,char[],Random)
###SNODE L: METHOD: random(int,int,int,boolean,boolean,char[],Random)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,int,int,boolean,boolean)
RIGHTCHILD: METHOD: random(int,int,int,boolean,boolean)
###SNODE L: METHOD: random(int,int,int,boolean,boolean)
###SNODE L: METHOD: random(int,int,int,boolean,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: randomAlphanumeric(int)
RIGHTCHILD: METHOD: randomAlphanumeric(int)
###SNODE L: METHOD: randomAlphanumeric(int)
###SNODE L: METHOD: randomAlphanumeric(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: randomAlphabetic(int)
RIGHTCHILD: METHOD: randomAlphabetic(int)
###SNODE L: METHOD: randomAlphabetic(int)
###SNODE L: METHOD: randomAlphabetic(int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: random(int,String)
RIGHTCHILD: METHOD: random(int,String)
###SNODE L: METHOD: random(int,String)
###SNODE L: METHOD: random(int,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)1052
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)1053
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1052
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1054
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1052
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1053
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1056
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)608
-(2)-(8)-(12)-(0)-(0)-(3)152
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1057
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1058
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1059
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1060
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1061
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)1060
-(2)-(8)-(12)-(0)-(0)-(3)1061
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1060
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1061
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(3)1060
-(2)-(8)-(12)-(0)-(0)-(3)1061
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)1054
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1060
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1061
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)565
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(3)1060
-(2)-(8)-(12)-(0)-(0)-(3)1061
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(0)-(3)1054
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1060
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1061
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)565
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1052
-(2)-(8)-(7)-(3)1055
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)81
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)330
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)-(0)1062
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)-(1)330
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)-(2)1063
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1064
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)565
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)1060
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)112
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)1061
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(1)276
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(0)612
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(2)-(0)-(0)-(1)568
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)257
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)-(0)1065
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)-(1)342
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)-(2)1066
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)-(2)484
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(4)-(2)43
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)94
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)330
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1067
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)342
-(2)-(8)-(12)-(0)-(2)-(2)-(1)484
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)269
-(2)-(8)-(12)-(0)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)-(0)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)-(2)1068
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)-(3)1067
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)484
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)565
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(2)1068
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(3)1067
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(1)484
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(0)1060
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(2)1069
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)1061
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)-(2)1070
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)-(3)491
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1060
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)112
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)1061
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)1071
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)1072
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)1073
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(0)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(2)1068
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(3)579
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)1073
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(1)1074
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)74
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(0)1071
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(0)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(2)1068
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)-(1)-(0)-(1)-(3)579
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(0)277
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(0)-(1)1075
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(0)-(1)-(1)1076
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(0)-(1)330
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(2)-(2)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)94
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)565
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1054
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)565
-(2)-(8)-(12)-(0)-(0)-(3)-(2)522
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1055
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)330
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)565
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1054
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1055
-(2)-(8)-(12)-(0)-(0)-(3)330
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)565
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(0)-(3)1054

LEFT COMMENTS
/* *//** 
 * <p>An immutable range of objects from a minimum to maximum point inclusive.</p> <p>The objects need to either be implementations of  {@code Comparable}or you need to supply a  {@code Comparator}. </p> <p>#ThreadSafe# if the objects and comparator are thread-safe</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * Serialization version.
 * @see java.io.Serializable
 */
/** 
 * The ordering scheme used in this range.
 */
/** 
 * The minimum value in this range (inclusive).
 */
/** 
 * The maximum value in this range (inclusive).
 */
/** 
 * Cached output hashCode (class is immutable).
 */
/** 
 * Cached output toString (class is immutable).
 */
/** 
 * <p>Obtains a range using the specified element as both the minimum and maximum in this range.</p> <p>The range uses the natural ordering of the elements to determine where values lie in the range.</p>
 * @param < T > the type of the elements in this range
 * @param element  the value to use for this range, not null
 * @return the range object, not null
 * @throws IllegalArgumentException if the element is null
 * @throws ClassCastException if the element is not {@code Comparable}
 */
/** 
 * <p>Obtains a range using the specified element as both the minimum and maximum in this range.</p> <p>The range uses the specified  {@code Comparator} to determine wherevalues lie in the range.</p>
 * @param < T > the type of the elements in this range
 * @param element  the value to use for this range, must not be {@code null}
 * @param comparator  the comparator to be used, null for natural ordering
 * @return the range object, not null
 * @throws IllegalArgumentException if the element is null
 * @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
 */
/** 
 * <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p> <p>The range uses the natural ordering of the elements to determine where values lie in the range.</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param < T > the type of the elements in this range
 * @param fromInclusive  the first value that defines the edge of the range, inclusive
 * @param toInclusive  the second value that defines the edge of the range, inclusive
 * @return the range object, not null
 * @throws IllegalArgumentException if either element is null
 * @throws ClassCastException if the elements are not {@code Comparable}
 */
/** 
 * <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p> <p>The range uses the specified  {@code Comparator} to determine wherevalues lie in the range.</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param < T > the type of the elements in this range
 * @param fromInclusive  the first value that defines the edge of the range, inclusive
 * @param toInclusive  the second value that defines the edge of the range, inclusive
 * @param comparator  the comparator to be used, null for natural ordering
 * @return the range object, not null
 * @throws IllegalArgumentException if either element is null
 * @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
 */
/** 
 * Creates an instance.
 * @param element1  the first element, not null
 * @param element2  the second element, not null
 * @param comparator  the comparator to be used, null for natural ordering
 */
//
//
/** 
 * <p>Gets the minimum value in this range.</p>
 * @return the minimum value in this range, not null
 */
/** 
 * <p>Gets the maximum value in this range.</p>
 * @return the maximum value in this range, not null
 */
/** 
 * <p>Gets the comparator being used to determine if objects are within the range.</p> <p>Natural ordering uses an internal comparator implementation, thus this method never returns null. See  {@link #isNaturalOrdering()}.</p>
 * @return the comparator being used, not null
 */
/** 
 * <p>Whether or not the Range is using the natural ordering of the elements.</p> <p>Natural ordering uses an internal comparator implementation, thus this method is the only way to check if a null comparator was specified.</p>
 * @return true if using natural ordering
 */
//
//
/** 
 * <p>Checks whether the specified element occurs within this range.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range is after the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if this range is entirely after the specified element
 */
/** 
 * <p>Checks whether this range starts with the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range starts with the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range is before the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if this range is entirely before the specified element
 */
/** 
 * <p>Checks where the specified element occurs relative to this range.</p> <p>The API is reminiscent of the Comparable interface returning  {@code -1} ifthe element is before the range,  {@code 0} if contained within the range and{@code 1} if the element is after the range. </p>
 * @param element  the element to check for, not null
 * @return -1, 0 or +1 depending on the element's location relative to the range
 */
//
//
//
/** 
 * <p>Checks whether this range contains all the elements of the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range contains the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is completely after the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range is completely after the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is overlapped by the specified range.</p> <p>Two ranges overlap if there is at least one element in common.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to test, null returns false
 * @return true if the specified range overlaps with thisrange; otherwise,  {@code false}
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is completely before the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range is completely before the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * Calculate the intersection of  {@code this} and an overlapping Range.
 * @param other overlapping Range
 * @return range representing the intersection of {@code this} and {@code other} ({@code this} if equal)
 * @throws IllegalArgumentException if {@code other} does not overlap {@code this}
 * @since 3.0.1
 */
//
//
/** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the minimum and maximum values must be equal, which ignores any differences in the comparator.</p>
 * @param obj the reference object with which to compare
 * @return true if this object is equal
 */
//
/** 
 * <p>Gets a suitable hash code for the range.</p>
 * @return a hash code value for this object
 */
/** 
 * <p>Gets the range as a  {@code String}.</p> <p>The format of the String is '[<i>min</i>..<i>max</i>]'.</p>
 * @return the {@code String} representation of this range
 */
/** 
 * <p>Formats the receiver using the given format.</p> <p>This uses  {@link java.util.Formattable} to perform the formatting. Three variables maybe used to embed the minimum, maximum and comparator. Use  {@code %1$s} for the minimum element, {@code %2$s} for the maximum elementand  {@code %3$s} for the comparator.The default format used by  {@code toString()} is {@code [%1$s..%2$s]}.</p>
 * @param format  the format string, optionally containing {@code %1$s},  {@code %2$s} and  {@code %3$s}, not null
 * @return the formatted string, not null
 */
//
/** 
 * Comparable based compare implementation. 
 * @param obj1 left hand side of comparison
 * @param obj2 right hand side of comparison
 * @return negative, 0, positive comparison value
 */
RIGHT COMMENTS
/* *//** 
 * <p>An immutable range of objects from a minimum to maximum point inclusive.</p> <p>The objects need to either be implementations of  {@code Comparable}or you need to supply a  {@code Comparator}. </p> <p>#ThreadSafe# if the objects and comparator are thread-safe</p>
 * @since 3.0
 * @version $Id$
 */
/** 
 * Serialization version.
 * @see java.io.Serializable
 */
/** 
 * The ordering scheme used in this range.
 */
/** 
 * The minimum value in this range (inclusive).
 */
/** 
 * The maximum value in this range (inclusive).
 */
/** 
 * Cached output hashCode (class is immutable).
 */
/** 
 * Cached output toString (class is immutable).
 */
/** 
 * <p>Obtains a range using the specified element as both the minimum and maximum in this range.</p> <p>The range uses the natural ordering of the elements to determine where values lie in the range.</p>
 * @param < T > the type of the elements in this range
 * @param element  the value to use for this range, not null
 * @return the range object, not null
 * @throws IllegalArgumentException if the element is null
 * @throws ClassCastException if the element is not {@code Comparable}
 */
/** 
 * <p>Obtains a range using the specified element as both the minimum and maximum in this range.</p> <p>The range uses the specified  {@code Comparator} to determine wherevalues lie in the range.</p>
 * @param < T > the type of the elements in this range
 * @param element  the value to use for this range, must not be {@code null}
 * @param comparator  the comparator to be used, null for natural ordering
 * @return the range object, not null
 * @throws IllegalArgumentException if the element is null
 * @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
 */
/** 
 * <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p> <p>The range uses the natural ordering of the elements to determine where values lie in the range.</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param < T > the type of the elements in this range
 * @param fromInclusive  the first value that defines the edge of the range, inclusive
 * @param toInclusive  the second value that defines the edge of the range, inclusive
 * @return the range object, not null
 * @throws IllegalArgumentException if either element is null
 * @throws ClassCastException if the elements are not {@code Comparable}
 */
/** 
 * <p>Obtains a range with the specified minimum and maximum values (both inclusive).</p> <p>The range uses the specified  {@code Comparator} to determine wherevalues lie in the range.</p> <p>The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.</p>
 * @param < T > the type of the elements in this range
 * @param fromInclusive  the first value that defines the edge of the range, inclusive
 * @param toInclusive  the second value that defines the edge of the range, inclusive
 * @param comparator  the comparator to be used, null for natural ordering
 * @return the range object, not null
 * @throws IllegalArgumentException if either element is null
 * @throws ClassCastException if using natural ordering and the elements are not {@code Comparable}
 */
/** 
 * Creates an instance.
 * @param element1  the first element, not null
 * @param element2  the second element, not null
 * @param comparator  the comparator to be used, null for natural ordering
 */
//
//
/** 
 * <p>Gets the minimum value in this range.</p>
 * @return the minimum value in this range, not null
 */
/** 
 * <p>Gets the maximum value in this range.</p>
 * @return the maximum value in this range, not null
 */
/** 
 * <p>Gets the comparator being used to determine if objects are within the range.</p> <p>Natural ordering uses an internal comparator implementation, thus this method never returns null. See  {@link #isNaturalOrdering()}.</p>
 * @return the comparator being used, not null
 */
/** 
 * <p>Whether or not the Range is using the natural ordering of the elements.</p> <p>Natural ordering uses an internal comparator implementation, thus this method is the only way to check if a null comparator was specified.</p>
 * @return true if using natural ordering
 */
//
//
/** 
 * <p>Checks whether the specified element occurs within this range.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range is after the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if this range is entirely after the specified element
 */
/** 
 * <p>Checks whether this range starts with the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range starts with the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if the specified element occurs within this range
 */
/** 
 * <p>Checks whether this range is before the specified element.</p>
 * @param element  the element to check for, null returns false
 * @return true if this range is entirely before the specified element
 */
/** 
 * <p>Checks where the specified element occurs relative to this range.</p> <p>The API is reminiscent of the Comparable interface returning  {@code -1} ifthe element is before the range,  {@code 0} if contained within the range and{@code 1} if the element is after the range. </p>
 * @param element  the element to check for, not null
 * @return -1, 0 or +1 depending on the element's location relative to the range
 */
//
//
//
/** 
 * <p>Checks whether this range contains all the elements of the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range contains the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is completely after the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range is completely after the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is overlapped by the specified range.</p> <p>Two ranges overlap if there is at least one element in common.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to test, null returns false
 * @return true if the specified range overlaps with thisrange; otherwise,  {@code false}
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * <p>Checks whether this range is completely before the specified range.</p> <p>This method may fail if the ranges have two different comparators or element types.</p>
 * @param otherRange  the range to check, null returns false
 * @return true if this range is completely before the specified range
 * @throws RuntimeException if ranges cannot be compared
 */
/** 
 * Calculate the intersection of  {@code this} and an overlapping Range.
 * @param other overlapping Range
 * @return range representing the intersection of {@code this} and {@code other} ({@code this} if equal)
 * @throws IllegalArgumentException if {@code other} does not overlap {@code this}
 * @since 3.0.1
 */
//
//
/** 
 * <p>Compares this range to another object to test if they are equal.</p>. <p>To be equal, the minimum and maximum values must be equal, which ignores any differences in the comparator.</p>
 * @param obj the reference object with which to compare
 * @return true if this object is equal
 */
//
/** 
 * <p>Gets a suitable hash code for the range.</p>
 * @return a hash code value for this object
 */
/** 
 * <p>Gets the range as a  {@code String}.</p> <p>The format of the String is '[<i>min</i>..<i>max</i>]'.</p>
 * @return the {@code String} representation of this range
 */
/** 
 * <p>Formats the receiver using the given format.</p> <p>This uses  {@link java.util.Formattable} to perform the formatting. Three variables maybe used to embed the minimum, maximum and comparator. Use  {@code %1$s} for the minimum element, {@code %2$s} for the maximum elementand  {@code %3$s} for the comparator.The default format used by  {@code toString()} is {@code [%1$s..%2$s]}.</p>
 * @param format  the format string, optionally containing {@code %1$s},  {@code %2$s} and  {@code %3$s}, not null
 * @return the formatted string, not null
 */
//
/** 
 * Comparable based compare implementation. 
 * @param obj1 left hand side of comparison
 * @param obj2 right hand side of comparison
 * @return negative, 0, positive comparison value
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5a9004e1
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@17af9f67

#TRAVERSE
LEFTCHILD: CLASS: Range
RIGHTCHILD: CLASS: Range
##SNODE L: CLASS: Range
##SNODE L: CLASS: Range
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6b6d8671
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@484b187c

##TRAVERSE
LEFTCHILD: METHOD: is(T)
RIGHTCHILD: METHOD: is(T)
###SNODE L: METHOD: is(T)
###SNODE L: METHOD: is(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: toString : String
RIGHTCHILD: FIELD: toString : String
###SNODE L: FIELD: toString : String
###SNODE L: FIELD: toString : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: elementCompareTo(T)
RIGHTCHILD: METHOD: elementCompareTo(T)
###SNODE L: METHOD: elementCompareTo(T)
###SNODE L: METHOD: elementCompareTo(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: serialVersionUID : long
RIGHTCHILD: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getMinimum()
RIGHTCHILD: METHOD: getMinimum()
###SNODE L: METHOD: getMinimum()
###SNODE L: METHOD: getMinimum()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: hashCode()
RIGHTCHILD: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE L: METHOD: hashCode()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: minimum : T
RIGHTCHILD: FIELD: minimum : T
###SNODE L: FIELD: minimum : T
###SNODE L: FIELD: minimum : T
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: hashCode : int
RIGHTCHILD: FIELD: hashCode : int
###SNODE L: FIELD: hashCode : int
###SNODE L: FIELD: hashCode : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isBefore(T)
RIGHTCHILD: METHOD: isBefore(T)
###SNODE L: METHOD: isBefore(T)
###SNODE L: METHOD: isBefore(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isOverlappedBy(Range<T>)
RIGHTCHILD: METHOD: isOverlappedBy(Range<T>)
###SNODE L: METHOD: isOverlappedBy(Range<T>)
###SNODE L: METHOD: isOverlappedBy(Range<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getComparator()
RIGHTCHILD: METHOD: getComparator()
###SNODE L: METHOD: getComparator()
###SNODE L: METHOD: getComparator()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsRange(Range<T>)
RIGHTCHILD: METHOD: containsRange(Range<T>)
###SNODE L: METHOD: containsRange(Range<T>)
###SNODE L: METHOD: containsRange(Range<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: maximum : T
RIGHTCHILD: FIELD: maximum : T
###SNODE L: FIELD: maximum : T
###SNODE L: FIELD: maximum : T
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(String)
RIGHTCHILD: METHOD: toString(String)
###SNODE L: METHOD: toString(String)
###SNODE L: METHOD: toString(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isStartedBy(T)
RIGHTCHILD: METHOD: isStartedBy(T)
###SNODE L: METHOD: isStartedBy(T)
###SNODE L: METHOD: isStartedBy(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isBeforeRange(Range<T>)
RIGHTCHILD: METHOD: isBeforeRange(Range<T>)
###SNODE L: METHOD: isBeforeRange(Range<T>)
###SNODE L: METHOD: isBeforeRange(Range<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAfterRange(Range<T>)
RIGHTCHILD: METHOD: isAfterRange(Range<T>)
###SNODE L: METHOD: isAfterRange(Range<T>)
###SNODE L: METHOD: isAfterRange(Range<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: is(T,Comparator<T>)
RIGHTCHILD: METHOD: is(T,Comparator<T>)
###SNODE L: METHOD: is(T,Comparator<T>)
###SNODE L: METHOD: is(T,Comparator<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: between(T,T,Comparator<T>)
RIGHTCHILD: METHOD: between(T,T,Comparator<T>)
###SNODE L: METHOD: between(T,T,Comparator<T>)
###SNODE L: METHOD: between(T,T,Comparator<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNaturalOrdering()
RIGHTCHILD: METHOD: isNaturalOrdering()
###SNODE L: METHOD: isNaturalOrdering()
###SNODE L: METHOD: isNaturalOrdering()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString()
RIGHTCHILD: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE L: METHOD: toString()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(T)
RIGHTCHILD: METHOD: contains(T)
###SNODE L: METHOD: contains(T)
###SNODE L: METHOD: contains(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: between(T,T)
RIGHTCHILD: METHOD: between(T,T)
###SNODE L: METHOD: between(T,T)
###SNODE L: METHOD: between(T,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getMaximum()
RIGHTCHILD: METHOD: getMaximum()
###SNODE L: METHOD: getMaximum()
###SNODE L: METHOD: getMaximum()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(Object)
RIGHTCHILD: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE L: METHOD: equals(Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: comparator : Comparator<T>
RIGHTCHILD: FIELD: comparator : Comparator<T>
###SNODE L: FIELD: comparator : Comparator<T>
###SNODE L: FIELD: comparator : Comparator<T>
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: ENUM: ComparableComparator
RIGHTCHILD: ENUM: ComparableComparator
###SNODE L: ENUM: ComparableComparator
###SNODE L: ENUM: ComparableComparator
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1226ba98
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@79194b1c

###TRAVERSE
LEFTCHILD: METHOD: compare(Object,Object)
RIGHTCHILD: METHOD: compare(Object,Object)
####SNODE L: METHOD: compare(Object,Object)
####SNODE L: METHOD: compare(Object,Object)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: Range(T,T,Comparator<T>)
RIGHTCHILD: CONSTRUCTOR: Range(T,T,Comparator<T>)
###SNODE L: CONSTRUCTOR: Range(T,T,Comparator<T>)
###SNODE L: CONSTRUCTOR: Range(T,T,Comparator<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEndedBy(T)
RIGHTCHILD: METHOD: isEndedBy(T)
###SNODE L: METHOD: isEndedBy(T)
###SNODE L: METHOD: isEndedBy(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAfter(T)
RIGHTCHILD: METHOD: isAfter(T)
###SNODE L: METHOD: isAfter(T)
###SNODE L: METHOD: isAfter(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: intersectionWith(Range<T>)
RIGHTCHILD: METHOD: intersectionWith(Range<T>)
###SNODE L: METHOD: intersectionWith(Range<T>)
###SNODE L: METHOD: intersectionWith(Range<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)478
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)998
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(1)23
-(2)-(2)1077
-(2)-(6)24
-(2)-(6)-(1)478
-(2)-(7)246
-(2)-(7)-(1)245
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)26
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)27
-(2)-(8)-(3)-(2)28
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)59
-(2)-(8)-(2)-(0)24
-(2)-(8)-(2)-(0)-(1)998
-(2)-(8)-(2)-(1)24
-(2)-(8)-(2)-(1)-(1)245
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1030
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)245
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1078
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)245
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1079
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)486
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)130
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)486
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)490
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1077
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1080
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)490
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1077
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)998
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1030
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1080
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(3)1030
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1080
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1077
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1023
-(2)-(8)-(6)-(2)-(1)24
-(2)-(8)-(6)-(2)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1081
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1082
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1080
-(2)-(8)-(12)-(0)-(0)-(3)1081
-(2)-(8)-(12)-(0)-(0)-(3)1082
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1080
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1077
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1081
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1082
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)998
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1030
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)59
-(2)-(8)-(12)-(0)-(0)-(3)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(1)1077
-(2)-(8)-(12)-(0)-(0)-(3)-(1)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(4)1081
-(2)-(8)-(12)-(0)-(0)-(4)1082
-(2)-(8)-(12)-(0)-(0)-(4)1030
-(2)-(8)101
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)71
-(2)-(8)-(1)21
-(2)-(8)-(2)1077
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1083
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1084
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)998
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1030
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1083
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1084
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)1085
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)1083
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)1086
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)1084
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1087
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)1088
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1083
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1084
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)1078
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1083
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)1079
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1084
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)1078
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)1084
-(2)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)-(1)1079
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)1083
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(1)1030
-(2)-(8)-(12)-(0)-(0)-(1)1030
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1089
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1078
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1090
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1079
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1091
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)998
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1030
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1092
-(2)-(8)-(4)102
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1087
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1088
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(0)-(1)-(1)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1093
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1094
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1095
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1096
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1030
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1097
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1098
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1093
-(2)-(8)-(12)-(0)-(0)-(3)308
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)217
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(2)1096
-(2)-(8)-(12)-(0)-(2)-(0)-(3)308
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)217
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1099
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1077
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1100
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(1)1078
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)278
-(2)-(8)-(12)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)1079
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1101
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1077
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1100
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1093
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1079
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1102
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1077
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1100
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(0)-(2)278
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)-(2)278
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1079
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)278
-(2)-(8)-(12)-(0)-(0)-(2)-(3)2
-(2)-(8)-(12)-(0)-(0)-(2)-(3)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(2)-(3)-(1)1078
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1077
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)1100
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1096
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1100
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1078
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)1104
-(2)-(8)-(4)59
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)1077
-(2)-(8)-(4)-(1)24
-(2)-(8)-(4)-(1)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1077
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)501
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1102
-(2)-(8)-(12)-(0)-(0)-(0)-(3)501
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1105
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)501
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)489
-(2)-(8)-(12)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(0)-(3)501
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)489
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)282
-(2)-(8)-(12)-(0)-(2)-(2)83
-(2)-(8)-(12)-(0)-(2)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(2)1091
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(1)1078
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(1)2
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)1078
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1078
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(2)-(2)83
-(2)-(8)-(12)-(0)-(2)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(2)1091
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1025
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(1)1079
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1079
-(2)-(8)-(12)-(0)-(2)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)501
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)1079
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1080
-(2)-(8)-(12)-(0)-(0)-(3)282
-(2)-(8)-(12)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1091
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(0)-(1)489
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)106
-(2)-(8)-(12)-(0)-(2)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(0)-(1)177
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)500
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)-(2)154
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)72
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)59
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)1077
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)498
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)59
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(0)-(1)1077
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(1)500
-(2)-(8)-(12)-(0)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(0)1078
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(3)-(0)498
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(3)-(1)1078
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)1079
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(0)498
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(3)-(1)1079
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)130
-(2)-(8)-(4)129
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)130
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)130
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1106
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)1078
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)153
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(1)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)1079
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(2)130
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)52
-(2)-(8)-(1)19
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)88
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(4)608
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)657
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1108
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1109
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)132
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)88
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)88
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)132
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)134
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)55
-(2)-(8)-(12)-(0)-(0)-(2)134
-(2)-(8)-(12)-(0)-(0)-(3)134
-(2)-(8)-(12)-(0)-(0)-(3)1078
-(2)-(8)-(12)-(0)-(0)-(3)1079
-(2)-(8)-(12)-(0)-(0)-(3)1030
-(2)-(8)957
-(2)-(8)-(1)72
-(2)-(8)-(1)-(0)70
-(2)-(8)-(1)-(1)596
-(2)-(8)-(1)-(1)-(0)1110
-(2)-(8)-(1)-(1)-(0)71
-(2)-(8)-(1)21
-(2)-(8)-(2)1087
-(2)-(8)-(3)24
-(2)-(8)-(3)-(1)998
-(2)-(8)-(4)930
-(2)-(8)-(4)-(2)1088
-(2)-(8)-(5)90
-(2)-(8)-(5)-(1)53
-(2)-(8)-(5)-(1)-(0)52
-(2)-(8)-(5)-(1)19
-(2)-(8)-(5)-(2)1025
-(2)-(8)-(5)-(4)129
-(2)-(8)-(5)-(7)61
-(2)-(8)-(5)-(7)-(0)23
-(2)-(8)-(5)-(7)-(1)24
-(2)-(8)-(5)-(7)-(1)-(1)96
-(2)-(8)-(5)-(7)-(3)1111
-(2)-(8)-(5)-(7)61
-(2)-(8)-(5)-(7)-(0)23
-(2)-(8)-(5)-(7)-(1)24
-(2)-(8)-(5)-(7)-(1)-(1)96
-(2)-(8)-(5)-(7)-(3)1112
-(2)-(8)-(5)-(12)50
-(2)-(8)-(5)-(12)-(0)89
-(2)-(8)-(5)-(12)-(0)-(0)33
-(2)-(8)-(5)-(12)-(0)-(0)-(0)231
-(2)-(8)-(5)-(12)-(0)-(0)-(0)-(0)74
-(2)-(8)-(5)-(12)-(0)-(0)-(0)-(0)-(0)24
-(2)-(8)-(5)-(12)-(0)-(0)-(0)-(0)-(0)-(1)1023
-(2)-(8)-(5)-(12)-(0)-(0)-(0)-(0)-(1)1111
-(2)-(8)-(5)-(12)-(0)-(0)-(2)1027
-(2)-(8)-(5)-(12)-(0)-(0)-(3)1112

java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/reflect (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/reflect (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>Exception thrown when the Serialization process fails.</p> <p>The original error is wrapped within this one.</p> <p>#NotThreadSafe# because Throwable is not thread-safe</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * Required for serialization support.
 * @see java.io.Serializable
 */
/** 
 * <p>Constructs a new  {@code SerializationException} without specifieddetail message.</p>
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifieddetail message.</p>
 * @param msg  The error message.
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifiednested  {@code Throwable}.</p>
 * @param cause  The {@code Exception} or {@code Error}that caused this exception to be thrown.
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifieddetail message and nested  {@code Throwable}.</p>
 * @param msg    The error message.
 * @param cause  The {@code Exception} or {@code Error}that caused this exception to be thrown.
 */
RIGHT COMMENTS
/* *//** 
 * <p>Exception thrown when the Serialization process fails.</p> <p>The original error is wrapped within this one.</p> <p>#NotThreadSafe# because Throwable is not thread-safe</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * Required for serialization support.
 * @see java.io.Serializable
 */
/** 
 * <p>Constructs a new  {@code SerializationException} without specifieddetail message.</p>
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifieddetail message.</p>
 * @param msg  The error message.
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifiednested  {@code Throwable}.</p>
 * @param cause  The {@code Exception} or {@code Error}that caused this exception to be thrown.
 */
/** 
 * <p>Constructs a new  {@code SerializationException} with specifieddetail message and nested  {@code Throwable}.</p>
 * @param msg    The error message.
 * @param cause  The {@code Exception} or {@code Error}that caused this exception to be thrown.
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@54d62c35
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5eb4b746

#TRAVERSE
LEFTCHILD: CLASS: SerializationException
RIGHTCHILD: CLASS: SerializationException
##SNODE L: CLASS: SerializationException
##SNODE L: CLASS: SerializationException
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4ed94e6a
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@16c6d5a2

##TRAVERSE
LEFTCHILD: CONSTRUCTOR: SerializationException()
RIGHTCHILD: CONSTRUCTOR: SerializationException()
###SNODE L: CONSTRUCTOR: SerializationException()
###SNODE L: CONSTRUCTOR: SerializationException()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: SerializationException(Throwable)
RIGHTCHILD: CONSTRUCTOR: SerializationException(Throwable)
###SNODE L: CONSTRUCTOR: SerializationException(Throwable)
###SNODE L: CONSTRUCTOR: SerializationException(Throwable)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: serialVersionUID : long
RIGHTCHILD: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE L: FIELD: serialVersionUID : long
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: SerializationException(String,Throwable)
RIGHTCHILD: CONSTRUCTOR: SerializationException(String,Throwable)
###SNODE L: CONSTRUCTOR: SerializationException(String,Throwable)
###SNODE L: CONSTRUCTOR: SerializationException(String,Throwable)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: SerializationException(String)
RIGHTCHILD: CONSTRUCTOR: SerializationException(String)
###SNODE L: CONSTRUCTOR: SerializationException(String)
###SNODE L: CONSTRUCTOR: SerializationException(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)1113
-(2)-(5)24
-(2)-(5)-(1)139
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)26
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)27
-(2)-(8)-(3)-(2)1114
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1113
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1113
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1115
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)-(12)-(0)-(2)1115
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1113
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1116
-(2)-(8)-(7)-(3)1117
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)-(12)-(0)-(2)1117
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1113
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1115
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1116
-(2)-(8)-(7)-(3)1117
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)-(12)-(0)-(2)1115
-(2)-(8)-(12)-(0)-(2)1117

LEFT COMMENTS
/* *//** 
 * <p>Assists with the serialization process and performs additional functionality based on serialization.</p> <p> <ul> <li>Deep clone using serialization <li>Serialize managing finally and IOException <li>Deserialize managing finally and IOException </ul> <p>This class throws exceptions for invalid  {@code null} inputs.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>SerializationUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code SerializationUtils.clone(object)}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 * @since 2.0
 */
//
//
/** 
 * <p>Deep clone an  {@code Object} using serialization.</p><p>This is many times slower than writing clone methods by hand on all objects in your object graph. However, for complex object graphs, or for those that don't support deep cloning this can be a simple alternative implementation. Of course all the objects must be  {@code Serializable}.</p>
 * @param < T > the type of the object involved
 * @param object  the {@code Serializable} object to clone
 * @return the cloned object
 * @throws SerializationException (runtime) if the serialization fails
 */
//
/* *///
//
//
/** 
 * <p>Serializes an  {@code Object} to the specified stream.</p><p>The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code.</p> <p>The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired.</p>
 * @param obj  the object to serialize to bytes, may be null
 * @param outputStream  the stream to write to, must not be null
 * @throws IllegalArgumentException if {@code outputStream} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
//
/** 
 * <p>Serializes an  {@code Object} to a byte array forstorage/serialization.</p>
 * @param obj  the object to serialize to bytes
 * @return a byte[] with the converted Serializable
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
/** 
 * <p> Deserializes an  {@code Object} from the specified stream.</p> <p> The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code. </p> <p> The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired. </p> <p> If the call site incorrectly types the return value, a  {@link ClassCastException} is thrown from the call site.Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException. Note that in both cases, the ClassCastException is in the call site, not in this method. </p>
 * @param < T >  the object type to be deserialized
 * @param inputStream the serialized object input stream, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if  {@code inputStream} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
//
//
/** 
 * <p> Deserializes a single  {@code Object} from an array of bytes.</p> <p> If the call site incorrectly types the return value, a  {@link ClassCastException} is thrown from the call site.Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException. Note that in both cases, the ClassCastException is in the call site, not in this method. </p>
 * @param < T >  the object type to be deserialized
 * @param objectData the serialized object, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if  {@code objectData} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
/** 
 * <p>Custom specialization of the standard JDK  {@link java.io.ObjectInputStream}that uses a custom  <code>ClassLoader</code> to resolve a class. If the specified <code>ClassLoader</code> is not able to resolve the class, the context classloader of the current thread will be used. This way, the standard deserialization work also in web-application containers and application servers, no matter in which of the <code>ClassLoader</code> the particular class that encapsulates serialization/deserialization lives. </p> <p>For more in-depth information about the problem for which this class here is a workaround, see the JIRA issue LANG-626. </p>
 */
/** 
 * Constructor.
 * @param in The <code>InputStream</code>.
 * @param classLoader classloader to use
 * @throws IOException if an I/O error occurs while reading stream header.
 * @see java.io.ObjectInputStream
 */
/** 
 * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code> of the current <code>Thread</code> to resolve the class.
 * @param desc An instance of class <code>ObjectStreamClass</code>.
 * @return A <code>Class</code> object corresponding to <code>desc</code>.
 * @throws IOException Any of the usual Input/Output exceptions.
 * @throws ClassNotFoundException If class of a serialized object cannot be found.
 */
RIGHT COMMENTS
/* *//** 
 * <p>Assists with the serialization process and performs additional functionality based on serialization.</p> <p> <ul> <li>Deep clone using serialization <li>Serialize managing finally and IOException <li>Deserialize managing finally and IOException </ul> <p>This class throws exceptions for invalid  {@code null} inputs.Each method documents its behaviour in more detail.</p> <p>#ThreadSafe#</p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * <p>SerializationUtils instances should NOT be constructed in standard programming. Instead, the class should be used as  {@code SerializationUtils.clone(object)}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 * @since 2.0
 */
//
//
/** 
 * <p>Deep clone an  {@code Object} using serialization.</p><p>This is many times slower than writing clone methods by hand on all objects in your object graph. However, for complex object graphs, or for those that don't support deep cloning this can be a simple alternative implementation. Of course all the objects must be  {@code Serializable}.</p>
 * @param < T > the type of the object involved
 * @param object  the {@code Serializable} object to clone
 * @return the cloned object
 * @throws SerializationException (runtime) if the serialization fails
 */
//
/* *///
//
//
/** 
 * <p>Serializes an  {@code Object} to the specified stream.</p><p>The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code.</p> <p>The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired.</p>
 * @param obj  the object to serialize to bytes, may be null
 * @param outputStream  the stream to write to, must not be null
 * @throws IllegalArgumentException if {@code outputStream} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
//
/** 
 * <p>Serializes an  {@code Object} to a byte array forstorage/serialization.</p>
 * @param obj  the object to serialize to bytes
 * @return a byte[] with the converted Serializable
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
/** 
 * <p> Deserializes an  {@code Object} from the specified stream.</p> <p> The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also exception handling, in the application code. </p> <p> The stream passed in is not buffered internally within this method. This is the responsibility of your application if desired. </p> <p> If the call site incorrectly types the return value, a  {@link ClassCastException} is thrown from the call site.Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException. Note that in both cases, the ClassCastException is in the call site, not in this method. </p>
 * @param < T >  the object type to be deserialized
 * @param inputStream the serialized object input stream, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if  {@code inputStream} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
//
//
//
//
/** 
 * <p> Deserializes a single  {@code Object} from an array of bytes.</p> <p> If the call site incorrectly types the return value, a  {@link ClassCastException} is thrown from the call site.Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException. Note that in both cases, the ClassCastException is in the call site, not in this method. </p>
 * @param < T >  the object type to be deserialized
 * @param objectData the serialized object, must not be null
 * @return the deserialized object
 * @throws IllegalArgumentException if  {@code objectData} is {@code null}
 * @throws SerializationException (runtime) if the serialization fails
 */
/** 
 * <p>Custom specialization of the standard JDK  {@link java.io.ObjectInputStream}that uses a custom  <code>ClassLoader</code> to resolve a class. If the specified <code>ClassLoader</code> is not able to resolve the class, the context classloader of the current thread will be used. This way, the standard deserialization work also in web-application containers and application servers, no matter in which of the <code>ClassLoader</code> the particular class that encapsulates serialization/deserialization lives. </p> <p>For more in-depth information about the problem for which this class here is a workaround, see the JIRA issue LANG-626. </p>
 */
/** 
 * Constructor.
 * @param in The <code>InputStream</code>.
 * @param classLoader classloader to use
 * @throws IOException if an I/O error occurs while reading stream header.
 * @see java.io.ObjectInputStream
 */
/** 
 * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code> of the current <code>Thread</code> to resolve the class.
 * @param desc An instance of class <code>ObjectStreamClass</code>.
 * @return A <code>Class</code> object corresponding to <code>desc</code>.
 * @throws IOException Any of the usual Input/Output exceptions.
 * @throws ClassNotFoundException If class of a serialized object cannot be found.
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6def1699
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@64dbb343

#TRAVERSE
LEFTCHILD: CLASS: SerializationUtils
RIGHTCHILD: CLASS: SerializationUtils
##SNODE L: CLASS: SerializationUtils
##SNODE L: CLASS: SerializationUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2b0483f2
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@b8e6981

##TRAVERSE
LEFTCHILD: METHOD: clone(T)
RIGHTCHILD: METHOD: clone(T)
###SNODE L: METHOD: clone(T)
###SNODE L: METHOD: clone(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: SerializationUtils()
RIGHTCHILD: CONSTRUCTOR: SerializationUtils()
###SNODE L: CONSTRUCTOR: SerializationUtils()
###SNODE L: CONSTRUCTOR: SerializationUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CLASS: ClassLoaderAwareObjectInputStream
RIGHTCHILD: CLASS: ClassLoaderAwareObjectInputStream
###SNODE L: CLASS: ClassLoaderAwareObjectInputStream
###SNODE L: CLASS: ClassLoaderAwareObjectInputStream
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1e40edb7
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@27381497

###TRAVERSE
LEFTCHILD: METHOD: resolveClass(ObjectStreamClass)
RIGHTCHILD: METHOD: resolveClass(ObjectStreamClass)
####SNODE L: METHOD: resolveClass(ObjectStreamClass)
####SNODE L: METHOD: resolveClass(ObjectStreamClass)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: ClassLoaderAwareObjectInputStream(InputStream,ClassLoader)
RIGHTCHILD: CONSTRUCTOR: ClassLoaderAwareObjectInputStream(InputStream,ClassLoader)
####SNODE L: CONSTRUCTOR: ClassLoaderAwareObjectInputStream(InputStream,ClassLoader)
####SNODE L: CONSTRUCTOR: ClassLoaderAwareObjectInputStream(InputStream,ClassLoader)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: primitiveTypes : Map<String,Class<?>>
RIGHTCHILD: FIELD: primitiveTypes : Map<String,Class<?>>
####SNODE L: FIELD: primitiveTypes : Map<String,Class<?>>
####SNODE L: FIELD: primitiveTypes : Map<String,Class<?>>
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: classLoader : ClassLoader
RIGHTCHILD: FIELD: classLoader : ClassLoader
####SNODE L: FIELD: classLoader : ClassLoader
####SNODE L: FIELD: classLoader : ClassLoader
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: serialize(Serializable)
RIGHTCHILD: METHOD: serialize(Serializable)
###SNODE L: METHOD: serialize(Serializable)
###SNODE L: METHOD: serialize(Serializable)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: serialize(Serializable,OutputStream)
RIGHTCHILD: METHOD: serialize(Serializable,OutputStream)
###SNODE L: METHOD: serialize(Serializable,OutputStream)
###SNODE L: METHOD: serialize(Serializable,OutputStream)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: deserialize(byte[])
RIGHTCHILD: METHOD: deserialize(byte[])
###SNODE L: METHOD: deserialize(byte[])
###SNODE L: METHOD: deserialize(byte[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: deserialize(InputStream)
RIGHTCHILD: METHOD: deserialize(InputStream)
###SNODE L: METHOD: deserialize(InputStream)
###SNODE L: METHOD: deserialize(InputStream)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1118
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1119
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)997
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1120
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1121
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1122
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1123
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1124
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)478
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)189
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)1125
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1125
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)250
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)478
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)165
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1126
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1127
-(2)-(8)-(12)-(0)-(2)-(2)-(3)232
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1118
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1128
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)1118
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1126
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1130
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)1129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)1128
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)-(0)-(0)232
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)-(2)711
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)72
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)1131
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)1130
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(2)1131
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1131
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)1132
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)1133
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)128
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(2)1134
-(2)-(8)-(12)-(0)-(3)-(0)-(2)127
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(4)1135
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1127
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)478
-(2)-(8)-(7)-(3)500
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1124
-(2)-(8)-(7)-(3)1136
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1136
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1137
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1122
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)663
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)1122
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)1136
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1138
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)128
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(2)1134
-(2)-(8)-(12)-(0)-(3)-(0)-(2)127
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)50
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1127
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)165
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)478
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1119
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1139
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)1119
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1140
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1127
-(2)-(8)-(12)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)-(0)-(3)1139
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1139
-(2)-(8)-(12)-(0)-(0)-(2)1141
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1142
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)1120
-(2)-(8)-(7)-(3)1143
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1143
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1144
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1121
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1130
-(2)-(8)-(12)-(0)-(2)-(2)63
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)1121
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(4)1143
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)72
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)70
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)71
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)74
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)245
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(0)1130
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)-(2)1131
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)500
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)1145
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)136
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1113
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(4)126
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)128
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1130
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(2)1134
-(2)-(8)-(12)-(0)-(3)-(0)-(2)127
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(1)997
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)50
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1142
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)1126
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1126
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1146
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1125
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)245
-(2)-(8)-(12)-(0)-(0)-(2)1142
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)1118
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1126
-(2)-(8)185
-(2)-(8)-(1)22
-(2)-(8)-(2)1129
-(2)-(8)-(5)24
-(2)-(8)-(5)-(1)1121
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)59
-(2)-(8)-(8)-(2)-(0)24
-(2)-(8)-(8)-(2)-(0)-(1)190
-(2)-(8)-(8)-(2)-(1)24
-(2)-(8)-(8)-(2)-(1)-(1)55
-(2)-(8)-(8)-(2)-(1)59
-(2)-(8)-(8)-(2)-(1)-(0)24
-(2)-(8)-(8)-(2)-(1)-(0)-(1)57
-(2)-(8)-(8)-(2)-(1)-(1)58
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1147
-(2)-(8)-(8)-(3)-(2)84
-(2)-(8)-(8)-(3)-(2)-(3)59
-(2)-(8)-(8)-(3)-(2)-(3)-(0)24
-(2)-(8)-(8)-(3)-(2)-(3)-(0)-(1)189
-(2)-(8)-(8)-(3)-(2)-(3)-(1)24
-(2)-(8)-(8)-(3)-(2)-(3)-(1)-(1)55
-(2)-(8)-(8)-(3)-(2)-(3)-(1)59
-(2)-(8)-(8)-(3)-(2)-(3)-(1)-(0)24
-(2)-(8)-(8)-(3)-(2)-(3)-(1)-(0)-(1)57
-(2)-(8)-(8)-(3)-(2)-(3)-(1)-(1)58
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)24
-(2)-(8)-(8)-(2)-(1)697
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)698
-(2)-(8)-(8)101
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)1129
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)1120
-(2)-(8)-(8)-(7)-(3)1130
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)697
-(2)-(8)-(8)-(7)-(3)698
-(2)-(8)-(8)-(10)997
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)219
-(2)-(8)-(8)-(12)-(0)-(2)1130
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)75
-(2)-(8)-(8)-(12)-(0)-(0)-(0)117
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(0)489
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(1)698
-(2)-(8)-(8)-(12)-(0)-(0)-(1)698
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)648
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)165
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)646
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)167
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)638
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)129
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)644
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)26
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)642
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)173
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)650
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)175
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)640
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)102
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)652
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)170
-(2)-(8)-(8)-(12)-(0)34
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(0)-(2)235
-(2)-(8)-(8)-(12)-(0)-(0)-(3)1148
-(2)-(8)-(8)-(12)-(0)-(0)-(3)68
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)91
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)54
-(2)-(8)-(8)-(2)1149
-(2)-(8)-(8)-(4)59
-(2)-(8)-(8)-(4)-(0)24
-(2)-(8)-(8)-(4)-(0)-(1)57
-(2)-(8)-(8)-(4)-(1)58
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)1123
-(2)-(8)-(8)-(7)-(3)1150
-(2)-(8)-(8)-(10)997
-(2)-(8)-(8)-(10)700
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)64
-(2)-(8)-(8)-(12)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(1)24
-(2)-(8)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(8)-(12)-(0)-(2)29
-(2)-(8)-(8)-(12)-(0)-(2)-(0)150
-(2)-(8)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)1150
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(2)82
-(2)-(8)-(8)-(12)-(0)128
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)57
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(2)676
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)150
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)698
-(2)-(8)-(8)-(12)-(0)-(2)127
-(2)-(8)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)128
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)89
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)57
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(2)676
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)150
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)39
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(0)707
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(0)-(2)708
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(3)-(2)709
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)127
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)61
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)24
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(1)-(1)700
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)-(3)1151
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)64
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)59
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(0)24
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(1)57
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(1)58
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(0)60
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)33
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(0)1147
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(2)331
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(2)-(3)150
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)77
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)177
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(0)60
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(0)-(1)63
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(0)89
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(1)-(0)-(0)60
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(0)136
-(2)-(8)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(1)-(0)-(2)-(0)-(0)1151

LEFT COMMENTS
/* *//** 
 * <p>Escapes and unescapes  {@code String}s for Java, Java Script, HTML and XML.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/* *//** 
 * Translator object for escaping Java.  While  {@link #escapeJava(String)} is the expected method of use, this object allows the Java escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping EcmaScript/JavaScript.  While  {@link #escapeEcmaScript(String)} is the expected method of use, this object allows the EcmaScript escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping Json. While  {@link #escapeJson(String)} is the expected method of use, thisobject allows the Json escaping functionality to be used as the foundation for a custom translator.
 * @since 3.2
 */
/** 
 * Translator object for escaping XML. While  {@link #escapeXml(String)} is the expected method of use, this object allows the XML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping HTML version 3.0. While  {@link #escapeHtml3(String)} is the expected method of use, this object allows the HTML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping HTML version 4.0. While  {@link #escapeHtml4(String)} is the expected method of use, this object allows the HTML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping individual Comma Separated Values.  While  {@link #escapeCsv(String)} is the expected method of use, this object allows the CSV escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
//
/* *//** 
 * Translator object for unescaping escaped Java.  While  {@link #unescapeJava(String)} is the expected method of use, this object allows the Java unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
/** 
 * Translator object for unescaping escaped EcmaScript.  While  {@link #unescapeEcmaScript(String)} is the expected method of use, this object allows the EcmaScript unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped Json. While  {@link #unescapeJson(String)} is the expected method of use, thisobject allows the Json unescaping functionality to be used as the foundation for a custom translator.
 * @since 3.2
 */
/** 
 * Translator object for unescaping escaped HTML 3.0.  While  {@link #unescapeHtml3(String)} is the expected method of use, this object allows the HTML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped HTML 4.0.  While  {@link #unescapeHtml4(String)} is the expected method of use, this object allows the HTML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped XML. While  {@link #unescapeXml(String)} is the expected method of use, this object allows the XML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped Comma Separated Value entries. While  {@link #unescapeCsv(String)} is the expected method of use, this object allows the CSV unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
/* *//** 
 * <p> {@code StringEscapeUtils} instances should NOT be constructed instandard programming.</p> <p>Instead, the class should be used as: <pre>StringEscapeUtils.escapeJava("foo");</pre></p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Escapes the characters in a  {@code String} using Java String rules.</p><p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote and forward-slash (/) are escaped.</p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 */
/** 
 * <p>Escapes the characters in a  {@code String} using EcmaScript String rules.</p><p>Escapes any values it finds into their EcmaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and EcmaScript strings is that in EcmaScript, a single quote and forward-slash (/) are escaped.</p> <p>Note that EcmaScript is best known by the JavaScript and ActionScript dialects. </p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn\'t say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Escapes the characters in a  {@code String} using Json String rules.</p><p>Escapes any values it finds into their Json String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and Json strings is that in Json, forward-slash (/) is escaped.</p> <p>See http://www.ietf.org/rfc/rfc4627.txt for further details. </p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 * @since 3.2
 */
/** 
 * <p>Unescapes any Java literals found in the  {@code String}. For example, it will turn a sequence of  {@code '\'} and{@code 'n'} into a newline character, unless the {@code '\'}is preceded by another  {@code '\'}.</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 */
/** 
 * <p>Unescapes any EcmaScript literals found in the  {@code String}.</p> <p>For example, it will turn a sequence of  {@code '\'} and {@code 'n'}into a newline character, unless the  {@code '\'} is preceded by another{@code '\'}.</p>
 * @see #unescapeJava(String)
 * @param input  the {@code String} to unescape, may be null
 * @return A new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Unescapes any Json literals found in the  {@code String}.</p> <p>For example, it will turn a sequence of  {@code '\'} and {@code 'n'}into a newline character, unless the  {@code '\'} is preceded by another{@code '\'}.</p>
 * @see #unescapeJava(String)
 * @param input  the {@code String} to unescape, may be null
 * @return A new unescaped {@code String},  {@code null} if null string input
 * @since 3.2
 */
//
//
/** 
 * <p>Escapes the characters in a  {@code String} using HTML entities.</p><p> For example: </p>  <p><code>"bread" & "butter"</code></p> becomes: <p> <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>. </p> <p>Supports all known HTML 4.0 entities, including funky accents. Note that the commonly used apostrophe escape character (&amp;apos;) is not a legal entity and so is not supported). </p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
 * @since 3.0
 */
/** 
 * <p>Escapes the characters in a  {@code String} using HTML entities.</p><p>Supports only the HTML 3.0 entities. </p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
//
/** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities.</p> <p>For example, the string "&amp;lt;Fran&amp;ccedil;ais&amp;gt;" will become "&lt;Fran&ccedil;ais&gt;"</p> <p>If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports only HTML 3.0 entities.</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
//
/** 
 * <p>Escapes the characters in a  {@code String} using XML entities.</p><p>For example: <tt>"bread" & "butter"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>. </p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that Unicode characters greater than 0x7f are as of 3.0, no longer  escaped. If you still wish this functionality, you can achieve it  via the following:  {@code StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );}</p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @see #unescapeXml(java.lang.String)
 */
//
/** 
 * <p>Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes.</p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that numerical \\u Unicode codes are unescaped to their respective  Unicode characters. This may change in future releases. </p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @see #escapeXml(String)
 */
//
/** 
 * <p>Returns a  {@code String} value for a CSV column enclosed in double quotes,if required.</p> <p>If the value contains a comma, newline or double quote, then the String value is returned enclosed in double quotes.</p> </p> <p>Any double quote characters in the value are escaped with another double quote.</p> <p>If the value does not contain a comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param input the input CSV column String, may be null
 * @return the input String, enclosed in double quotes if the value contains a comma,newline or double quote,  {@code null} if null string input
 * @since 2.4
 */
/** 
 * <p>Returns a  {@code String} value for an unescaped CSV column. </p><p>If the value is enclosed in double quotes, and contains a comma, newline  or double quote, then quotes are removed.  </p> <p>Any double quote escaped characters (a pair of double quotes) are unescaped  to just one double quote. </p> <p>If the value is not enclosed in double quotes, or is and does not contain a  comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param input the input CSV column String, may be null
 * @return the input String, with enclosing double quotes removed and embedded double quotes unescaped,  {@code null} if null string input
 * @since 2.4
 */
RIGHT COMMENTS
/* *//** 
 * <p>Escapes and unescapes  {@code String}s for Java, Java Script, HTML and XML.</p> <p>#ThreadSafe#</p>
 * @since 2.0
 * @version $Id$
 */
/* *//** 
 * Translator object for escaping Java.  While  {@link #escapeJava(String)} is the expected method of use, this object allows the Java escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping EcmaScript/JavaScript.  While  {@link #escapeEcmaScript(String)} is the expected method of use, this object allows the EcmaScript escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping Json. While  {@link #escapeJson(String)} is the expected method of use, thisobject allows the Json escaping functionality to be used as the foundation for a custom translator.
 * @since 3.2
 */
/** 
 * Translator object for escaping XML. While  {@link #escapeXml(String)} is the expected method of use, this object allows the XML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping HTML version 3.0. While  {@link #escapeHtml3(String)} is the expected method of use, this object allows the HTML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping HTML version 4.0. While  {@link #escapeHtml4(String)} is the expected method of use, this object allows the HTML escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for escaping individual Comma Separated Values.  While  {@link #escapeCsv(String)} is the expected method of use, this object allows the CSV escaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
//
/* *//** 
 * Translator object for unescaping escaped Java.  While  {@link #unescapeJava(String)} is the expected method of use, this object allows the Java unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
/** 
 * Translator object for unescaping escaped EcmaScript.  While  {@link #unescapeEcmaScript(String)} is the expected method of use, this object allows the EcmaScript unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped Json. While  {@link #unescapeJson(String)} is the expected method of use, thisobject allows the Json unescaping functionality to be used as the foundation for a custom translator.
 * @since 3.2
 */
/** 
 * Translator object for unescaping escaped HTML 3.0.  While  {@link #unescapeHtml3(String)} is the expected method of use, this object allows the HTML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped HTML 4.0.  While  {@link #unescapeHtml4(String)} is the expected method of use, this object allows the HTML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped XML. While  {@link #unescapeXml(String)} is the expected method of use, this object allows the XML unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
/** 
 * Translator object for unescaping escaped Comma Separated Value entries. While  {@link #unescapeCsv(String)} is the expected method of use, this object allows the CSV unescaping functionality to be used  as the foundation for a custom translator. 
 * @since 3.0
 */
//
//
/* *//** 
 * <p> {@code StringEscapeUtils} instances should NOT be constructed instandard programming.</p> <p>Instead, the class should be used as: <pre>StringEscapeUtils.escapeJava("foo");</pre></p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Escapes the characters in a  {@code String} using Java String rules.</p><p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and JavaScript strings is that in JavaScript, a single quote and forward-slash (/) are escaped.</p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 */
/** 
 * <p>Escapes the characters in a  {@code String} using EcmaScript String rules.</p><p>Escapes any values it finds into their EcmaScript String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and EcmaScript strings is that in EcmaScript, a single quote and forward-slash (/) are escaped.</p> <p>Note that EcmaScript is best known by the JavaScript and ActionScript dialects. </p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn\'t say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Escapes the characters in a  {@code String} using Json String rules.</p><p>Escapes any values it finds into their Json String form. Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p> <p>So a tab becomes the characters  {@code '\\'} and{@code 't'}.</p> <p>The only difference between Java strings and Json strings is that in Json, forward-slash (/) is escaped.</p> <p>See http://www.ietf.org/rfc/rfc4627.txt for further details. </p> <p>Example: <pre> input string: He didn't say, "Stop!" output string: He didn't say, \"Stop!\" </pre> </p>
 * @param input  String to escape values in, may be null
 * @return String with escaped values, {@code null} if null string input
 * @since 3.2
 */
/** 
 * <p>Unescapes any Java literals found in the  {@code String}. For example, it will turn a sequence of  {@code '\'} and{@code 'n'} into a newline character, unless the {@code '\'}is preceded by another  {@code '\'}.</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 */
/** 
 * <p>Unescapes any EcmaScript literals found in the  {@code String}.</p> <p>For example, it will turn a sequence of  {@code '\'} and {@code 'n'}into a newline character, unless the  {@code '\'} is preceded by another{@code '\'}.</p>
 * @see #unescapeJava(String)
 * @param input  the {@code String} to unescape, may be null
 * @return A new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Unescapes any Json literals found in the  {@code String}.</p> <p>For example, it will turn a sequence of  {@code '\'} and {@code 'n'}into a newline character, unless the  {@code '\'} is preceded by another{@code '\'}.</p>
 * @see #unescapeJava(String)
 * @param input  the {@code String} to unescape, may be null
 * @return A new unescaped {@code String},  {@code null} if null string input
 * @since 3.2
 */
//
//
/** 
 * <p>Escapes the characters in a  {@code String} using HTML entities.</p><p> For example: </p>  <p><code>"bread" & "butter"</code></p> becomes: <p> <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>. </p> <p>Supports all known HTML 4.0 entities, including funky accents. Note that the commonly used apostrophe escape character (&amp;apos;) is not a legal entity and so is not supported). </p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @see <a href="http://hotwired.lycos.com/webmonkey/reference/special_characters/">ISO Entities</a>
 * @see <a href="http://www.w3.org/TR/REC-html32#latin1">HTML 3.2 Character Entities for ISO Latin-1</a>
 * @see <a href="http://www.w3.org/TR/REC-html40/sgml/entities.html">HTML 4.0 Character entity references</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#h-5.3">HTML 4.01 Character References</a>
 * @see <a href="http://www.w3.org/TR/html401/charset.html#code-position">HTML 4.01 Code positions</a>
 * @since 3.0
 */
/** 
 * <p>Escapes the characters in a  {@code String} using HTML entities.</p><p>Supports only the HTML 3.0 entities. </p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
//
/** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports HTML 4.0 entities.</p> <p>For example, the string "&amp;lt;Fran&amp;ccedil;ais&amp;gt;" will become "&lt;Fran&ccedil;ais&gt;"</p> <p>If an entity is unrecognized, it is left alone, and inserted verbatim into the result string. e.g. "&amp;gt;&amp;zzzz;x" will become "&gt;&amp;zzzz;x".</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
/** 
 * <p>Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes. Supports only HTML 3.0 entities.</p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @since 3.0
 */
//
/** 
 * <p>Escapes the characters in a  {@code String} using XML entities.</p><p>For example: <tt>"bread" & "butter"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>. </p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that Unicode characters greater than 0x7f are as of 3.0, no longer  escaped. If you still wish this functionality, you can achieve it  via the following:  {@code StringEscapeUtils.ESCAPE_XML.with( NumericEntityEscaper.between(0x7f, Integer.MAX_VALUE) );}</p>
 * @param input  the {@code String} to escape, may be null
 * @return a new escaped {@code String},  {@code null} if null string input
 * @see #unescapeXml(java.lang.String)
 */
//
/** 
 * <p>Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes.</p> <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos). Does not support DTDs or external entities.</p> <p>Note that numerical \\u Unicode codes are unescaped to their respective  Unicode characters. This may change in future releases. </p>
 * @param input  the {@code String} to unescape, may be null
 * @return a new unescaped {@code String},  {@code null} if null string input
 * @see #escapeXml(String)
 */
//
/** 
 * <p>Returns a  {@code String} value for a CSV column enclosed in double quotes,if required.</p> <p>If the value contains a comma, newline or double quote, then the String value is returned enclosed in double quotes.</p> </p> <p>Any double quote characters in the value are escaped with another double quote.</p> <p>If the value does not contain a comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param input the input CSV column String, may be null
 * @return the input String, enclosed in double quotes if the value contains a comma,newline or double quote,  {@code null} if null string input
 * @since 2.4
 */
/** 
 * <p>Returns a  {@code String} value for an unescaped CSV column. </p><p>If the value is enclosed in double quotes, and contains a comma, newline  or double quote, then quotes are removed.  </p> <p>Any double quote escaped characters (a pair of double quotes) are unescaped  to just one double quote. </p> <p>If the value is not enclosed in double quotes, or is and does not contain a  comma, newline or double quote, then the String value is returned unchanged.</p> </p> see <a href="http://en.wikipedia.org/wiki/Comma-separated_values">Wikipedia</a> and <a href="http://tools.ietf.org/html/rfc4180">RFC 4180</a>.
 * @param input the input CSV column String, may be null
 * @return the input String, with enclosing double quotes removed and embedded double quotes unescaped,  {@code null} if null string input
 * @since 2.4
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4414ee28
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3533b614

#TRAVERSE
LEFTCHILD: CLASS: StringEscapeUtils
RIGHTCHILD: CLASS: StringEscapeUtils
##SNODE L: CLASS: StringEscapeUtils
##SNODE L: CLASS: StringEscapeUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1caa1866
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4fec93d0

##TRAVERSE
LEFTCHILD: FIELD: ESCAPE_JAVA : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_JAVA : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_JAVA : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_JAVA : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_JSON : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_JSON : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_JSON : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_JSON : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeEcmaScript(String)
RIGHTCHILD: METHOD: unescapeEcmaScript(String)
###SNODE L: METHOD: unescapeEcmaScript(String)
###SNODE L: METHOD: unescapeEcmaScript(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_HTML4 : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_HTML4 : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_HTML4 : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_HTML4 : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_XML : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_XML : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_XML : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_XML : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CLASS: CsvUnescaper
RIGHTCHILD: CLASS: CsvUnescaper
###SNODE L: CLASS: CsvUnescaper
###SNODE L: CLASS: CsvUnescaper
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@2cea41ab
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@4c1c134

###TRAVERSE
LEFTCHILD: FIELD: CSV_QUOTE : char
RIGHTCHILD: FIELD: CSV_QUOTE : char
####SNODE L: FIELD: CSV_QUOTE : char
####SNODE L: FIELD: CSV_QUOTE : char
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: translate(CharSequence,int,Writer)
RIGHTCHILD: METHOD: translate(CharSequence,int,Writer)
####SNODE L: METHOD: translate(CharSequence,int,Writer)
####SNODE L: METHOD: translate(CharSequence,int,Writer)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_SEARCH_CHARS : char[]
RIGHTCHILD: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE L: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE L: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_DELIMITER : char
RIGHTCHILD: FIELD: CSV_DELIMITER : char
####SNODE L: FIELD: CSV_DELIMITER : char
####SNODE L: FIELD: CSV_DELIMITER : char
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: CsvUnescaper()
RIGHTCHILD: CONSTRUCTOR: CsvUnescaper()
####SNODE L: CONSTRUCTOR: CsvUnescaper()
####SNODE L: CONSTRUCTOR: CsvUnescaper()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_QUOTE_STR : String
RIGHTCHILD: FIELD: CSV_QUOTE_STR : String
####SNODE L: FIELD: CSV_QUOTE_STR : String
####SNODE L: FIELD: CSV_QUOTE_STR : String
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: UNESCAPE_HTML3 : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_HTML3 : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_HTML3 : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_HTML3 : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_JSON : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_JSON : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_JSON : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_JSON : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeJson(String)
RIGHTCHILD: METHOD: unescapeJson(String)
###SNODE L: METHOD: unescapeJson(String)
###SNODE L: METHOD: unescapeJson(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_JAVA : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_JAVA : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_JAVA : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_JAVA : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CLASS: CsvEscaper
RIGHTCHILD: CLASS: CsvEscaper
###SNODE L: CLASS: CsvEscaper
###SNODE L: CLASS: CsvEscaper
###SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@486480e2
###SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@63bdf82d

###TRAVERSE
LEFTCHILD: FIELD: CSV_QUOTE : char
RIGHTCHILD: FIELD: CSV_QUOTE : char
####SNODE L: FIELD: CSV_QUOTE : char
####SNODE L: FIELD: CSV_QUOTE : char
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: translate(CharSequence,int,Writer)
RIGHTCHILD: METHOD: translate(CharSequence,int,Writer)
####SNODE L: METHOD: translate(CharSequence,int,Writer)
####SNODE L: METHOD: translate(CharSequence,int,Writer)
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_SEARCH_CHARS : char[]
RIGHTCHILD: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE L: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE L: FIELD: CSV_SEARCH_CHARS : char[]
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: CONSTRUCTOR: CsvEscaper()
RIGHTCHILD: CONSTRUCTOR: CsvEscaper()
####SNODE L: CONSTRUCTOR: CsvEscaper()
####SNODE L: CONSTRUCTOR: CsvEscaper()
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_DELIMITER : char
RIGHTCHILD: FIELD: CSV_DELIMITER : char
####SNODE L: FIELD: CSV_DELIMITER : char
####SNODE L: FIELD: CSV_DELIMITER : char
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: FIELD: CSV_QUOTE_STR : String
RIGHTCHILD: FIELD: CSV_QUOTE_STR : String
####SNODE L: FIELD: CSV_QUOTE_STR : String
####SNODE L: FIELD: CSV_QUOTE_STR : String
####SNODE[] L: null
####SNODE[] R: null

####EXTRACT
LEFTCHILD: METHOD: escapeCsv(String)
RIGHTCHILD: METHOD: escapeCsv(String)
###SNODE L: METHOD: escapeCsv(String)
###SNODE L: METHOD: escapeCsv(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeJava(String)
RIGHTCHILD: METHOD: escapeJava(String)
###SNODE L: METHOD: escapeJava(String)
###SNODE L: METHOD: escapeJava(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeJava(String)
RIGHTCHILD: METHOD: unescapeJava(String)
###SNODE L: METHOD: unescapeJava(String)
###SNODE L: METHOD: unescapeJava(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeEcmaScript(String)
RIGHTCHILD: METHOD: escapeEcmaScript(String)
###SNODE L: METHOD: escapeEcmaScript(String)
###SNODE L: METHOD: escapeEcmaScript(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_ECMASCRIPT : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_HTML3 : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_HTML3 : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_HTML3 : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_HTML3 : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeHtml4(String)
RIGHTCHILD: METHOD: unescapeHtml4(String)
###SNODE L: METHOD: unescapeHtml4(String)
###SNODE L: METHOD: unescapeHtml4(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeCsv(String)
RIGHTCHILD: METHOD: unescapeCsv(String)
###SNODE L: METHOD: unescapeCsv(String)
###SNODE L: METHOD: unescapeCsv(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeXml(String)
RIGHTCHILD: METHOD: escapeXml(String)
###SNODE L: METHOD: escapeXml(String)
###SNODE L: METHOD: escapeXml(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeJson(String)
RIGHTCHILD: METHOD: escapeJson(String)
###SNODE L: METHOD: escapeJson(String)
###SNODE L: METHOD: escapeJson(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeHtml3(String)
RIGHTCHILD: METHOD: unescapeHtml3(String)
###SNODE L: METHOD: unescapeHtml3(String)
###SNODE L: METHOD: unescapeHtml3(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_CSV : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_CSV : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_CSV : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_CSV : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_HTML4 : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_HTML4 : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_HTML4 : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_HTML4 : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeHtml3(String)
RIGHTCHILD: METHOD: escapeHtml3(String)
###SNODE L: METHOD: escapeHtml3(String)
###SNODE L: METHOD: escapeHtml3(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: escapeHtml4(String)
RIGHTCHILD: METHOD: escapeHtml4(String)
###SNODE L: METHOD: escapeHtml4(String)
###SNODE L: METHOD: escapeHtml4(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: StringEscapeUtils()
RIGHTCHILD: CONSTRUCTOR: StringEscapeUtils()
###SNODE L: CONSTRUCTOR: StringEscapeUtils()
###SNODE L: CONSTRUCTOR: StringEscapeUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: unescapeXml(String)
RIGHTCHILD: METHOD: unescapeXml(String)
###SNODE L: METHOD: unescapeXml(String)
###SNODE L: METHOD: unescapeXml(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_XML : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_XML : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_XML : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_XML : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: UNESCAPE_CSV : CharSequenceTranslator
RIGHTCHILD: FIELD: UNESCAPE_CSV : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_CSV : CharSequenceTranslator
###SNODE L: FIELD: UNESCAPE_CSV : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: ESCAPE_ECMASCRIPT : CharSequenceTranslator
RIGHTCHILD: FIELD: ESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE L: FIELD: ESCAPE_ECMASCRIPT : CharSequenceTranslator
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)997
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1152
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1154
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1155
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1156
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1157
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1158
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1159
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1160
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)0
-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)1
-(0)-(0)-(0)-(0)-(0)-(0)-(1)3
-(0)-(0)-(0)-(0)-(0)-(1)4
-(0)-(0)-(0)-(0)-(1)1002
-(0)-(0)-(0)-(1)1153
-(0)-(0)-(1)1161
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)1162
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1163
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)33
-(2)-(8)-(3)-(2)-(0)-(0)84
-(2)-(8)-(3)-(2)-(0)-(0)-(3)24
-(2)-(8)-(3)-(2)-(0)-(0)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(0)-(0)-(4)197
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(0)-(0)162
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(0)-(0)-(0)24
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(0)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)596
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)-(0)1164
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)-(0)1165
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)-(0)1166
-(2)-(8)-(3)-(2)-(0)-(0)-(4)-(2)-(0)-(0)1167
-(2)-(8)-(3)-(2)-(0)-(2)1168
-(2)-(8)-(3)-(2)-(0)-(3)84
-(2)-(8)-(3)-(2)-(0)-(3)-(3)24
-(2)-(8)-(3)-(2)-(0)-(3)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(0)-(3)-(4)33
-(2)-(8)-(3)-(2)-(0)-(3)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(0)-(3)-(4)-(2)1169
-(2)-(8)-(3)-(2)-(2)1168
-(2)-(8)-(3)-(2)-(3)33
-(2)-(8)-(3)-(2)-(3)-(0)1157
-(2)-(8)-(3)-(2)-(3)-(2)1170
-(2)-(8)-(3)-(2)-(3)-(3)608
-(2)-(8)-(3)-(2)-(3)-(3)1171
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1172
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)197
-(2)-(8)-(3)-(2)-(4)-(4)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)24
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(4)-(4)-(2)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1173
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1174
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1164
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1165
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1166
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1167
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1175
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1176
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1169
-(2)-(8)-(3)-(2)-(4)33
-(2)-(8)-(3)-(2)-(4)-(0)1157
-(2)-(8)-(3)-(2)-(4)-(2)1170
-(2)-(8)-(3)-(2)-(4)-(3)608
-(2)-(8)-(3)-(2)-(4)-(3)1171
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1177
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)197
-(2)-(8)-(3)-(2)-(4)-(4)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)24
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(4)-(4)-(2)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1164
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1165
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1166
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1167
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1175
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1176
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1169
-(2)-(8)-(3)-(2)-(4)33
-(2)-(8)-(3)-(2)-(4)-(0)1157
-(2)-(8)-(3)-(2)-(4)-(2)1170
-(2)-(8)-(3)-(2)-(4)-(3)608
-(2)-(8)-(3)-(2)-(4)-(3)1171
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1178
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1179
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1180
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1181
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1179
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1182
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1183
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1179
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1182
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1184
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1185
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1186
-(2)-(8)185
-(2)-(8)-(1)22
-(2)-(8)-(2)1186
-(2)-(8)-(5)24
-(2)-(8)-(5)-(1)1155
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1187
-(2)-(8)-(8)-(3)-(2)1188
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1189
-(2)-(8)-(8)-(3)-(2)1190
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)24
-(2)-(8)-(8)-(2)-(1)55
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1191
-(2)-(8)-(8)-(3)-(2)33
-(2)-(8)-(8)-(3)-(2)-(0)55
-(2)-(8)-(8)-(3)-(2)-(2)289
-(2)-(8)-(8)-(3)-(2)-(3)1189
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)162
-(2)-(8)-(8)-(2)-(0)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1192
-(2)-(8)-(8)-(3)-(2)197
-(2)-(8)-(8)-(3)-(2)-(0)162
-(2)-(8)-(8)-(3)-(2)-(0)-(0)170
-(2)-(8)-(8)-(3)-(2)-(2)596
-(2)-(8)-(8)-(3)-(2)-(2)-(0)1187
-(2)-(8)-(8)-(3)-(2)-(2)-(0)1189
-(2)-(8)-(8)-(3)-(2)-(2)-(0)2
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(0)577
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(1)582
-(2)-(8)-(8)-(3)-(2)-(2)-(0)2
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(0)577
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(1)580
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)1153
-(2)-(8)-(8)-(4)129
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)517
-(2)-(8)-(8)-(7)-(3)1193
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)129
-(2)-(8)-(8)-(7)-(3)314
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)1152
-(2)-(8)-(8)-(7)-(3)663
-(2)-(8)-(8)-(10)997
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)177
-(2)-(8)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1194
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(8)-(12)-(0)-(0)-(2)1195
-(2)-(8)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(3)-(2)88
-(2)-(8)-(8)-(12)-(0)-(0)-(3)1192
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)88
-(2)-(8)-(8)-(12)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1189
-(2)-(8)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)563
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(2)664
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)-(2)88
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)1191
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)243
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)-(0)1191
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(3)-(1)1191
-(2)-(8)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1189
-(2)-(8)-(8)-(12)-(0)89
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(2)116
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1197
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1160
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1161
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1198
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)197
-(2)-(8)-(3)-(2)-(4)-(4)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)162
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)24
-(2)-(8)-(3)-(2)-(4)-(4)-(0)-(0)-(0)-(1)55
-(2)-(8)-(3)-(2)-(4)-(4)-(2)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1167
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1166
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1165
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1164
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1174
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1173
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)596
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)1166
-(2)-(8)-(3)-(2)-(4)-(4)-(2)-(0)-(0)81
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1199
-(2)-(8)-(3)-(2)1197
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1200
-(2)-(8)-(3)-(2)1197
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1201
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1202
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1203
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1159
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1204
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1202
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1203
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1205
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1159
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1206
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1154
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1202
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1158
-(2)-(8)-(3)-(2)-(4)-(4)33
-(2)-(8)-(3)-(2)-(4)-(4)-(0)1156
-(2)-(8)-(3)-(2)-(4)-(4)-(2)1207
-(2)-(8)-(3)-(2)-(4)84
-(2)-(8)-(3)-(2)-(4)-(3)24
-(2)-(8)-(3)-(2)-(4)-(3)-(1)1159
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1155
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1208
-(2)-(8)-(3)-(2)84
-(2)-(8)-(3)-(2)-(3)24
-(2)-(8)-(3)-(2)-(3)-(1)1209
-(2)-(8)185
-(2)-(8)-(1)22
-(2)-(8)-(2)1209
-(2)-(8)-(5)24
-(2)-(8)-(5)-(1)1155
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1187
-(2)-(8)-(8)-(3)-(2)1188
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1189
-(2)-(8)-(8)-(3)-(2)1190
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)24
-(2)-(8)-(8)-(2)-(1)55
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1191
-(2)-(8)-(8)-(3)-(2)33
-(2)-(8)-(8)-(3)-(2)-(0)55
-(2)-(8)-(8)-(3)-(2)-(2)289
-(2)-(8)-(8)-(3)-(2)-(3)1189
-(2)-(8)-(8)30
-(2)-(8)-(8)-(1)21
-(2)-(8)-(8)-(1)22
-(2)-(8)-(8)-(1)23
-(2)-(8)-(8)-(2)162
-(2)-(8)-(8)-(2)-(0)170
-(2)-(8)-(8)-(3)29
-(2)-(8)-(8)-(3)-(0)1192
-(2)-(8)-(8)-(3)-(2)197
-(2)-(8)-(8)-(3)-(2)-(0)162
-(2)-(8)-(8)-(3)-(2)-(0)-(0)170
-(2)-(8)-(8)-(3)-(2)-(2)596
-(2)-(8)-(8)-(3)-(2)-(2)-(0)1187
-(2)-(8)-(8)-(3)-(2)-(2)-(0)1189
-(2)-(8)-(8)-(3)-(2)-(2)-(0)2
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(0)577
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(1)582
-(2)-(8)-(8)-(3)-(2)-(2)-(0)2
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(0)577
-(2)-(8)-(8)-(3)-(2)-(2)-(0)-(1)580
-(2)-(8)-(8)90
-(2)-(8)-(8)-(1)53
-(2)-(8)-(8)-(1)-(0)52
-(2)-(8)-(8)-(1)19
-(2)-(8)-(8)-(2)1153
-(2)-(8)-(8)-(4)129
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)517
-(2)-(8)-(8)-(7)-(3)1193
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)129
-(2)-(8)-(8)-(7)-(3)314
-(2)-(8)-(8)-(7)61
-(2)-(8)-(8)-(7)-(0)23
-(2)-(8)-(8)-(7)-(1)24
-(2)-(8)-(8)-(7)-(1)-(1)1152
-(2)-(8)-(8)-(7)-(3)663
-(2)-(8)-(8)-(10)997
-(2)-(8)-(8)-(12)50
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)177
-(2)-(8)-(8)-(12)-(0)-(0)-(0)314
-(2)-(8)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1210
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)106
-(2)-(8)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(0)-(2)407
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(0)-(3)86
-(2)-(8)-(8)-(12)-(0)-(0)-(0)-(1)1189
-(2)-(8)-(8)-(12)-(0)-(0)-(1)177
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(3)256
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)-(2)116
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(1)217
-(2)-(8)-(8)-(12)-(0)-(0)-(1)-(1)1189
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)88
-(2)-(8)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(2)116
-(2)-(8)-(8)-(12)-(0)64
-(2)-(8)-(8)-(12)-(0)-(0)23
-(2)-(8)-(8)-(12)-(0)-(1)24
-(2)-(8)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(8)-(12)-(0)-(2)29
-(2)-(8)-(8)-(12)-(0)-(2)-(0)1211
-(2)-(8)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(2)518
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)217
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)256
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(2)116
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(1)217
-(2)-(8)-(8)-(12)-(0)-(2)-(2)-(2)88
-(2)-(8)-(8)-(12)-(0)77
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(8)-(12)-(0)-(0)-(2)569
-(2)-(8)-(8)-(12)-(0)-(0)-(3)1211
-(2)-(8)-(8)-(12)-(0)-(0)-(3)1192
-(2)-(8)-(8)-(12)-(0)-(1)50
-(2)-(8)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)563
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)664
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)1211
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)243
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(0)1191
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)-(1)1191
-(2)-(8)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)1191
-(2)-(8)-(8)-(12)-(0)-(2)50
-(2)-(8)-(8)-(12)-(0)-(2)-(0)34
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(0)663
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(2)1196
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(2)-(0)-(0)-(3)-(2)88
-(2)-(8)-(8)-(12)-(0)89
-(2)-(8)-(8)-(12)-(0)-(0)33
-(2)-(8)-(8)-(12)-(0)-(0)-(0)1193
-(2)-(8)-(8)-(12)-(0)-(0)-(2)116
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)1162
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1212
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1163
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1213
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1172
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1214
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1177
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1215
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1197
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1216
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1199
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1217
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1200
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1218
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1183
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1219
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1181
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1220
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1204
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1221
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1201
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1222
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1178
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1223
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1206
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1224
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1185
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)1225
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1208
-(2)-(8)-(12)-(0)-(0)-(2)1153
-(2)-(8)-(12)-(0)-(0)-(3)1193

LEFT COMMENTS
/* *//** 
 * <p>Operations on  {@link java.lang.String} that are{@code null} safe.</p><ul> <li><b>IsEmpty/IsBlank</b> - checks if a String contains text</li> <li><b>Trim/Strip</b> - removes leading and trailing whitespace</li> <li><b>Equals</b> - compares two strings null-safe</li> <li><b>startsWith</b> - check if a String starts with a prefix null-safe</li> <li><b>endsWith</b> - check if a String ends with a suffix null-safe</li> <li><b>IndexOf/LastIndexOf/Contains</b> - null-safe index-of checks <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b> - index-of any of a set of Strings</li> <li><b>ContainsOnly/ContainsNone/ContainsAny</b> - does String contains only/none/any of these characters</li> <li><b>Substring/Left/Right/Mid</b> - null-safe substring extractions</li> <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b> - substring extraction relative to other strings</li> <li><b>Split/Join</b> - splits a String into an array of substrings and vice versa</li> <li><b>Remove/Delete</b> - removes part of a String</li> <li><b>Replace/Overlay</b> - Searches a String and replaces one String with another</li> <li><b>Chomp/Chop</b> - removes the last part of a String</li> <li><b>AppendIfMissing</b> - appends a suffix to the end of the String if not present</li> <li><b>PrependIfMissing</b> - prepends a prefix to the start of the String if not present</li> <li><b>LeftPad/RightPad/Center/Repeat</b> - pads a String</li> <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b> - changes the case of a String</li> <li><b>CountMatches</b> - counts the number of occurrences of one String in another</li> <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b> - checks the characters in a String</li> <li><b>DefaultString</b> - protects against a null input String</li> <li><b>Reverse/ReverseDelimited</b> - reverses a String</li> <li><b>Abbreviate</b> - abbreviates a string using ellipsis</li> <li><b>Difference</b> - compares Strings and reports on their differences</li> <li><b>LevenshteinDistance</b> - the number of changes needed to change one String into another</li> </ul> <p>The  {@code StringUtils} class defines certain words related toString handling.</p> <ul> <li>null -  {@code null}</li> <li>empty - a zero-length string ( {@code ""})</li> <li>space - the space character ( {@code ' '}, char 32)</li> <li>whitespace - the characters defined by  {@link Character#isWhitespace(char)}</li> <li>trim - the characters &lt;= 32 as in  {@link String#trim()}</li> </ul> <p> {@code StringUtils} handles {@code null} input Strings quietly.That is to say that a  {@code null} input will return {@code null}. Where a  {@code boolean} or {@code int} is being returneddetails vary by method.</p> <p>A side effect of the  {@code null} handling is that a{@code NullPointerException} should be considered a bug in{@code StringUtils}.</p> <p>Methods in this class give sample code to explain their operation. The symbol  {@code *} is used to indicate any input including {@code null}.</p> <p>#ThreadSafe#</p>
 * @see java.lang.String
 * @since 1.0
 * @version $Id$
 */
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * A String for a space character.
 * @since 3.2
 */
/** 
 * The empty String  {@code ""}.
 * @since 2.0
 */
/** 
 * A String for linefeed LF ("\n").
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 3.2
 */
/** 
 * A String for carriage return CR ("\r").
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 3.2
 */
/** 
 * Represents a failed index search.
 * @since 2.1
 */
/** 
 * <p>The maximum size to which the padding constant(s) can expand.</p>
 */
/** 
 * A regex pattern for recognizing blocks of whitespace characters. The apparent convolutedness of the pattern serves the purpose of ignoring "blocks" consisting of only a single space:  the pattern is used only to normalize whitespace, condensing "blocks" down to a single space, thus matching the same would likely cause a great many noop replacements.
 */
/** 
 * <p> {@code StringUtils} instances should NOT be constructed instandard programming. Instead, the class should be used as {@code StringUtils.trim(" foo ");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Checks if a CharSequence is empty ("") or null.</p> <pre> StringUtils.isEmpty(null)      = true StringUtils.isEmpty("")        = true StringUtils.isEmpty(" ")       = false StringUtils.isEmpty("bob")     = false StringUtils.isEmpty("  bob  ") = false </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer trims the CharSequence. That functionality is available in isBlank().</p>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is empty or null
 * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is not empty ("") and not null.</p> <pre> StringUtils.isNotEmpty(null)      = false StringUtils.isNotEmpty("")        = false StringUtils.isNotEmpty(" ")       = true StringUtils.isNotEmpty("bob")     = true StringUtils.isNotEmpty("  bob  ") = true </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is not empty and not null
 * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is whitespace, empty ("") or null.</p> <pre> StringUtils.isBlank(null)      = true StringUtils.isBlank("")        = true StringUtils.isBlank(" ")       = true StringUtils.isBlank("bob")     = false StringUtils.isBlank("  bob  ") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is null, empty or whitespace
 * @since 2.0
 * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is not empty (""), not null and not whitespace only.</p> <pre> StringUtils.isNotBlank(null)      = false StringUtils.isNotBlank("")        = false StringUtils.isNotBlank(" ")       = false StringUtils.isNotBlank("bob")     = true StringUtils.isNotBlank("  bob  ") = true </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence isnot empty and not null and not whitespace
 * @since 2.0
 * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)
 */
//
//
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String, handling  {@code null} by returning{@code null}.</p> <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #strip(String)}.</p> <p>To trim your choice of characters, use the {@link #strip(String,String)} methods.</p><pre> StringUtils.trim(null)          = null StringUtils.trim("")            = "" StringUtils.trim("     ")       = "" StringUtils.trim("abc")         = "abc" StringUtils.trim("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed string, {@code null} if null String input
 */
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning  {@code null} if the String isempty ("") after the trim or if it is  {@code null}. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToNull(String)}.</p> <pre> StringUtils.trimToNull(null)          = null StringUtils.trimToNull("")            = null StringUtils.trimToNull("     ")       = null StringUtils.trimToNull("abc")         = "abc" StringUtils.trimToNull("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String,{@code null} if only chars &lt;= 32, empty or null String input
 * @since 2.0
 */
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning an empty String ("") if the String is empty ("") after the trim or if it is  {@code null}. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToEmpty(String)}.</p> <pre> StringUtils.trimToEmpty(null)          = "" StringUtils.trimToEmpty("")            = "" StringUtils.trimToEmpty("     ")       = "" StringUtils.trimToEmpty("abc")         = "abc" StringUtils.trimToEmpty("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String, or an empty String if {@code null} input
 * @since 2.0
 */
//
//
/** 
 * <p>Strips whitespace from the start and end of a String.</p> <p>This is similar to  {@link #trim(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.strip(null)     = null StringUtils.strip("")       = "" StringUtils.strip("   ")    = "" StringUtils.strip("abc")    = "abc" StringUtils.strip("  abc")  = "abc" StringUtils.strip("abc  ")  = "abc" StringUtils.strip(" abc ")  = "abc" StringUtils.strip(" ab c ") = "ab c" </pre>
 * @param str  the String to remove whitespace from, may be null
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips whitespace from the start and end of a String  returning {@code null} if the String is empty ("") after the strip.</p><p>This is similar to  {@link #trimToNull(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToNull(null)     = null StringUtils.stripToNull("")       = null StringUtils.stripToNull("   ")    = null StringUtils.stripToNull("abc")    = "abc" StringUtils.stripToNull("  abc")  = "abc" StringUtils.stripToNull("abc  ")  = "abc" StringUtils.stripToNull(" abc ")  = "abc" StringUtils.stripToNull(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the stripped String,{@code null} if whitespace, empty or null String input
 * @since 2.0
 */
/** 
 * <p>Strips whitespace from the start and end of a String  returning an empty String if  {@code null} input.</p><p>This is similar to  {@link #trimToEmpty(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToEmpty(null)     = "" StringUtils.stripToEmpty("")       = "" StringUtils.stripToEmpty("   ")    = "" StringUtils.stripToEmpty("abc")    = "abc" StringUtils.stripToEmpty("  abc")  = "abc" StringUtils.stripToEmpty("abc  ")  = "abc" StringUtils.stripToEmpty(" abc ")  = "abc" StringUtils.stripToEmpty(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the trimmed String, or an empty String if {@code null} input
 * @since 2.0
 */
/** 
 * <p>Strips any of a set of characters from the start and end of a String. This is similar to  {@link String#trim()} but allows the charactersto be stripped to be controlled.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}. Alternatively use  {@link #strip(String)}.</p> <pre> StringUtils.strip(null, *)          = null StringUtils.strip("", *)            = "" StringUtils.strip("abc", null)      = "abc" StringUtils.strip("  abc", null)    = "abc" StringUtils.strip("abc  ", null)    = "abc" StringUtils.strip(" abc ", null)    = "abc" StringUtils.strip("  abcyx", "xyz") = "  abc" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips any of a set of characters from the start of a String.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripStart(null, *)          = null StringUtils.stripStart("", *)            = "" StringUtils.stripStart("abc", "")        = "abc" StringUtils.stripStart("abc", null)      = "abc" StringUtils.stripStart("  abc", null)    = "abc" StringUtils.stripStart("abc  ", null)    = "abc  " StringUtils.stripStart(" abc ", null)    = "abc " StringUtils.stripStart("yxabc  ", "xyz") = "abc  " </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips any of a set of characters from the end of a String.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripEnd(null, *)          = null StringUtils.stripEnd("", *)            = "" StringUtils.stripEnd("abc", "")        = "abc" StringUtils.stripEnd("abc", null)      = "abc" StringUtils.stripEnd("  abc", null)    = "  abc" StringUtils.stripEnd("abc  ", null)    = "abc" StringUtils.stripEnd(" abc ", null)    = " abc" StringUtils.stripEnd("  abcyx", "xyz") = "  abc" StringUtils.stripEnd("120.00", ".0")   = "12" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the set of characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
//
//
/** 
 * <p>Strips whitespace from the start and end of every String in an array. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.</p><pre> StringUtils.stripAll(null)             = null StringUtils.stripAll([])               = [] StringUtils.stripAll(["abc", "  abc"]) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null])  = ["abc", null] </pre>
 * @param strs  the array to remove whitespace from, may be null
 * @return the stripped Strings, {@code null} if null array input
 */
/** 
 * <p>Strips any of a set of characters from the start and end of every String in an array.</p> Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.A  {@code null} stripChars will strip whitespace as defined by{@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripAll(null, *)                = null StringUtils.stripAll([], *)                  = [] StringUtils.stripAll(["abc", "  abc"], null) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null], null)  = ["abc", null] StringUtils.stripAll(["abc  ", null], "yz")  = ["abc  ", null] StringUtils.stripAll(["yabcz", null], "yz")  = ["abc", null] </pre>
 * @param strs  the array to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped Strings, {@code null} if null array input
 */
/** 
 * <p>Removes diacritics (~= accents) from a string. The case will not be altered.</p> <p>For instance, '&agrave;' will be replaced by 'a'.</p> <p>Note that ligatures will be left as is.</p> <pre> StringUtils.stripAccents(null)                = null StringUtils.stripAccents("")                  = "" StringUtils.stripAccents("control")           = "control" StringUtils.stripAccents("&eacute;clair")     = "eclair" </pre>
 * @param input String to be stripped
 * @return input text with diacritics removed
 * @since 3.0
 */
//
//
//
//
//
//
/** 
 * <p>Compares two CharSequences, returning  {@code true} if they representequal sequences of characters.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.equals(null, null)   = true StringUtils.equals(null, "abc")  = false StringUtils.equals("abc", null)  = false StringUtils.equals("abc", "abc") = true StringUtils.equals("abc", "ABC") = false </pre>
 * @see Object#equals(Object)
 * @param cs1  the first CharSequence, may be {@code null}
 * @param cs2  the second CharSequence, may be {@code null}
 * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
 * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
 */
/** 
 * <p>Compares two CharSequences, returning  {@code true} if they representequal sequences of characters, ignoring case.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered equal. Comparison is case insensitive.</p> <pre> StringUtils.equalsIgnoreCase(null, null)   = true StringUtils.equalsIgnoreCase(null, "abc")  = false StringUtils.equalsIgnoreCase("abc", null)  = false StringUtils.equalsIgnoreCase("abc", "abc") = true StringUtils.equalsIgnoreCase("abc", "ABC") = true </pre>
 * @param str1  the first CharSequence, may be null
 * @param str2  the second CharSequence, may be null
 * @return {@code true} if the CharSequence are equal, case insensitive, orboth  {@code null}
 * @since 3.0 Changed signature from equalsIgnoreCase(String, String) to equalsIgnoreCase(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.</p> <pre> StringUtils.indexOf(null, *)         = -1 StringUtils.indexOf("", *)           = -1 StringUtils.indexOf("aabaabaa", 'a') = 0 StringUtils.indexOf("aabaabaa", 'b') = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return the first index of the search character,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)
 */
/** 
 * <p>Finds the first index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code (INDEX_NOT_FOUND) -1}. A negative start position is treated as zero. A start position greater than the string length returns  {@code -1}.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf("", *, *)            = -1 StringUtils.indexOf("aabaabaa", 'b', 0)  = 2 StringUtils.indexOf("aabaabaa", 'b', 3)  = 5 StringUtils.indexOf("aabaabaa", 'b', 9)  = -1 StringUtils.indexOf("aabaabaa", 'b', -1) = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search character (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)
 */
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.indexOf(null, *)          = -1 StringUtils.indexOf(*, null)          = -1 StringUtils.indexOf("", "")           = 0 StringUtils.indexOf("", *)            = -1 (except when * = "") StringUtils.indexOf("aabaabaa", "a")  = 0 StringUtils.indexOf("aabaabaa", "b")  = 2 StringUtils.indexOf("aabaabaa", "ab") = 1 StringUtils.indexOf("aabaabaa", "")   = 0 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)
 */
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf(*, null, *)          = -1 StringUtils.indexOf("", "", 0)           = 0 StringUtils.indexOf("", *, 0)            = -1 (except when * = "") StringUtils.indexOf("aabaabaa", "a", 0)  = 0 StringUtils.indexOf("aabaabaa", "b", 0)  = 2 StringUtils.indexOf("aabaabaa", "ab", 0) = 1 StringUtils.indexOf("aabaabaa", "b", 3)  = 5 StringUtils.indexOf("aabaabaa", "b", 9)  = -1 StringUtils.indexOf("aabaabaa", "b", -1) = 2 StringUtils.indexOf("aabaabaa", "", 2)   = 2 StringUtils.indexOf("abc", "", 9)        = 3 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search CharSequence (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the n-th index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.ordinalIndexOf(null, *, *)          = -1 StringUtils.ordinalIndexOf(*, null, *)          = -1 StringUtils.ordinalIndexOf("", "", *)           = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 1)  = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 2)  = 1 StringUtils.ordinalIndexOf("aabaabaa", "b", 1)  = 2 StringUtils.ordinalIndexOf("aabaabaa", "b", 2)  = 5 StringUtils.ordinalIndexOf("aabaabaa", "ab", 1) = 1 StringUtils.ordinalIndexOf("aabaabaa", "ab", 2) = 4 StringUtils.ordinalIndexOf("aabaabaa", "", 1)   = 0 StringUtils.ordinalIndexOf("aabaabaa", "", 2)   = 0 </pre> <p>Note that 'head(CharSequence str, int n)' may be implemented as: </p> <pre> str.substring(0, lastOrdinalIndexOf(str, "\n", n)) </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th {@code searchStr} to find
 * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 * @since 2.1
 * @since 3.0 Changed signature from ordinalIndexOf(String, String, int) to ordinalIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the n-th index within a String, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th {@code searchStr} to find
 * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()
 * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 */
//
/** 
 * <p>Case in-sensitive find of the first index within a CharSequence.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOfIgnoreCase(null, *)          = -1 StringUtils.indexOfIgnoreCase(*, null)          = -1 StringUtils.indexOfIgnoreCase("", "")           = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "a")  = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "b")  = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "ab") = 1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from indexOfIgnoreCase(String, String) to indexOfIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Case in-sensitive find of the first index within a CharSequence from the specified position.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOfIgnoreCase(null, *, *)          = -1 StringUtils.indexOfIgnoreCase(*, null, *)          = -1 StringUtils.indexOfIgnoreCase("", "", 0)           = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "A", 0)  = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 0)  = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0) = 1 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 3)  = 5 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 9)  = -1 StringUtils.indexOfIgnoreCase("aabaabaa", "B", -1) = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "", 2)   = 2 StringUtils.indexOfIgnoreCase("abc", "", 9)        = 3 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search CharSequence (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from indexOfIgnoreCase(String, String, int) to indexOfIgnoreCase(CharSequence, CharSequence, int)
 */
//
//
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code -1}.</p> <pre> StringUtils.lastIndexOf(null, *)         = -1 StringUtils.lastIndexOf("", *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'a') = 7 StringUtils.lastIndexOf("aabaabaa", 'b') = 5 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return the last index of the search character,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, int) to lastIndexOf(CharSequence, int)
 */
/** 
 * <p>Finds the last index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#lastIndexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code -1}. A negative start position returns  {@code -1}. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf("", *,  *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 8)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', 4)  = 2 StringUtils.lastIndexOf("aabaabaa", 'b', 0)  = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 9)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', -1) = -1 StringUtils.lastIndexOf("aabaabaa", 'a', 0)  = 0 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position
 * @return the last index of the search character (always &le; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, int, int) to lastIndexOf(CharSequence, int, int)
 */
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.lastIndexOf(null, *)          = -1 StringUtils.lastIndexOf(*, null)          = -1 StringUtils.lastIndexOf("", "")           = 0 StringUtils.lastIndexOf("aabaabaa", "a")  = 7 StringUtils.lastIndexOf("aabaabaa", "b")  = 5 StringUtils.lastIndexOf("aabaabaa", "ab") = 4 StringUtils.lastIndexOf("aabaabaa", "")   = 8 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return the last index of the search String,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, String) to lastIndexOf(CharSequence, CharSequence)
 */
/** 
 * <p>Finds the n-th last index within a String, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)}.</p> <p>A  {@code null} String will return {@code -1}.</p> <pre> StringUtils.lastOrdinalIndexOf(null, *, *)          = -1 StringUtils.lastOrdinalIndexOf(*, null, *)          = -1 StringUtils.lastOrdinalIndexOf("", "", *)           = 0 StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)  = 7 StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)  = 6 StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)  = 5 StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)  = 2 StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) = 4 StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) = 1 StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)   = 8 StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)   = 8 </pre> <p>Note that 'tail(CharSequence str, int n)' may be implemented as: </p> <pre> str.substring(lastOrdinalIndexOf(str, "\n", n) + 1) </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th last {@code searchStr} to find
 * @return the n-th last index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from lastOrdinalIndexOf(String, String, int) to lastOrdinalIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf(*, null, *)          = -1 StringUtils.lastIndexOf("aabaabaa", "a", 8)  = 7 StringUtils.lastIndexOf("aabaabaa", "b", 8)  = 5 StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4 StringUtils.lastIndexOf("aabaabaa", "b", 9)  = 5 StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1 StringUtils.lastIndexOf("aabaabaa", "a", 0)  = 0 StringUtils.lastIndexOf("aabaabaa", "b", 0)  = -1 StringUtils.lastIndexOf("aabaabaa", "b", 1)  = -1 StringUtils.lastIndexOf("aabaabaa", "b", 2)  = 2 StringUtils.lastIndexOf("aabaabaa", "ba", 2)  = -1 StringUtils.lastIndexOf("aabaabaa", "ba", 2)  = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the last index of the search CharSequence (always &le; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, String, int) to lastIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Case in-sensitive find of the last index within a CharSequence.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string.</p> <pre> StringUtils.lastIndexOfIgnoreCase(null, *)          = -1 StringUtils.lastIndexOfIgnoreCase(*, null)          = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")  = 7 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB") = 4 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String) to lastIndexOfIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Case in-sensitive find of the last index within a CharSequence from the specified position.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1 StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)  = 7 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)  = 0 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)  = -1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param startPos  the start position
 * @return the last index of the search CharSequence (always &le; startPos),-1 if no match or  {@code null} input
 * @since 2.5
 * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String, int) to lastIndexOfIgnoreCase(CharSequence, CharSequence, int)
 */
//
//
/** 
 * <p>Checks if CharSequence contains a search character, handling  {@code null}. This method uses  {@link String#indexOf(int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *)    = false StringUtils.contains("", *)      = false StringUtils.contains("abc", 'a') = true StringUtils.contains("abc", 'z') = false </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return true if the CharSequence contains the search character,false if not or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from contains(String, int) to contains(CharSequence, int)
 */
/** 
 * <p>Checks if CharSequence contains a search CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *)     = false StringUtils.contains(*, null)     = false StringUtils.contains("", "")      = true StringUtils.contains("abc", "")   = true StringUtils.contains("abc", "a")  = true StringUtils.contains("abc", "z")  = false </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return true if the CharSequence contains the search CharSequence,false if not or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from contains(String, String) to contains(CharSequence, CharSequence)
 */
/** 
 * <p>Checks if CharSequence contains a search CharSequence irrespective of case, handling  {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. <p>A  {@code null} CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *) = false StringUtils.contains(*, null) = false StringUtils.contains("", "") = true StringUtils.contains("abc", "") = true StringUtils.contains("abc", "a") = true StringUtils.contains("abc", "z") = false StringUtils.contains("abc", "A") = true StringUtils.contains("abc", "Z") = false </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return true if the CharSequence contains the search CharSequence irrespective ofcase or false if not or  {@code null} string input
 * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * Check whether the given CharSequence contains any whitespace characters.
 * @param seq the CharSequence to check (may be {@code null})
 * @return {@code true} if the CharSequence is not empty andcontains at least 1 whitespace character
 * @see java.lang.Character#isWhitespace
 * @since 3.0
 */
//
//
//
/** 
 * <p>Search a CharSequence to find the first index of any character in the given set of characters.</p> <p>A  {@code null} String will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.</p> <pre> StringUtils.indexOfAny(null, *)                = -1 StringUtils.indexOfAny("", *)                  = -1 StringUtils.indexOfAny(*, null)                = -1 StringUtils.indexOfAny(*, [])                  = -1 StringUtils.indexOfAny("zzabyycdxx",['z','a']) = 0 StringUtils.indexOfAny("zzabyycdxx",['b','y']) = 3 StringUtils.indexOfAny("aba", ['z'])           = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAny(String, char[]) to indexOfAny(CharSequence, char...)
 */
//
/** 
 * <p>Search a CharSequence to find the first index of any character in the given set of characters.</p> <p>A  {@code null} String will return {@code -1}. A  {@code null} search string will return {@code -1}.</p> <pre> StringUtils.indexOfAny(null, *)            = -1 StringUtils.indexOfAny("", *)              = -1 StringUtils.indexOfAny(*, null)            = -1 StringUtils.indexOfAny(*, "")              = -1 StringUtils.indexOfAny("zzabyycdxx", "za") = 0 StringUtils.indexOfAny("zzabyycdxx", "by") = 3 StringUtils.indexOfAny("aba","z")          = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAny(String, String) to indexOfAny(CharSequence, String)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains any character in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} or zero length search array will return {@code false}.</p> <pre> StringUtils.containsAny(null, *)                = false StringUtils.containsAny("", *)                  = false StringUtils.containsAny(*, null)                = false StringUtils.containsAny(*, [])                  = false StringUtils.containsAny("zzabyycdxx",['z','a']) = true StringUtils.containsAny("zzabyycdxx",['b','y']) = true StringUtils.containsAny("aba", ['z'])           = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the {@code true} if any of the chars are found,{@code false} if no match or null input
 * @since 2.4
 * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char...)
 */
//
//
/** 
 * <p> Checks if the CharSequence contains any character in the given set of characters. </p> <p> A  {@code null} CharSequence will return {@code false}. A  {@code null} search CharSequence will return{@code false}. </p> <pre> StringUtils.containsAny(null, *)            = false StringUtils.containsAny("", *)              = false StringUtils.containsAny(*, null)            = false StringUtils.containsAny(*, "")              = false StringUtils.containsAny("zzabyycdxx", "za") = true StringUtils.containsAny("zzabyycdxx", "by") = true StringUtils.containsAny("aba","z")          = false </pre>
 * @param cs the CharSequence to check, may be null
 * @param searchChars the chars to search for, may be null
 * @return the {@code true} if any of the chars are found, {@code false} if no match or null input
 * @since 2.4
 * @since 3.0 Changed signature from containsAny(String, String) to containsAny(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Searches a CharSequence to find the first index of any character not in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.</p> <pre> StringUtils.indexOfAnyBut(null, *)                              = -1 StringUtils.indexOfAnyBut("", *)                                = -1 StringUtils.indexOfAnyBut(*, null)                              = -1 StringUtils.indexOfAnyBut(*, [])                                = -1 StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z', 'a'} ) = 3 StringUtils.indexOfAnyBut("aba", new char[] {'z'} )             = 0 StringUtils.indexOfAnyBut("aba", new char[] {'a', 'b'} )        = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAnyBut(String, char[]) to indexOfAnyBut(CharSequence, char...)
 */
/** 
 * <p>Search a CharSequence to find the first index of any character not in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or empty search string will return {@code -1}.</p> <pre> StringUtils.indexOfAnyBut(null, *)            = -1 StringUtils.indexOfAnyBut("", *)              = -1 StringUtils.indexOfAnyBut(*, null)            = -1 StringUtils.indexOfAnyBut(*, "")              = -1 StringUtils.indexOfAnyBut("zzabyycdxx", "za") = 3 StringUtils.indexOfAnyBut("zzabyycdxx", "")   = -1 StringUtils.indexOfAnyBut("aba","ab")         = -1 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAnyBut(String, String) to indexOfAnyBut(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains only certain characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} valid character array will return {@code false}. An empty CharSequence (length()=0) always returns  {@code true}.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", '')      = false StringUtils.containsOnly("abab", 'abc') = true StringUtils.containsOnly("ab1", 'abc')  = false StringUtils.containsOnly("abz", 'abc')  = false </pre>
 * @param cs  the String to check, may be null
 * @param valid  an array of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 * @since 3.0 Changed signature from containsOnly(String, char[]) to containsOnly(CharSequence, char...)
 */
//
/** 
 * <p>Checks if the CharSequence contains only certain characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} valid character String will return {@code false}. An empty String (length()=0) always returns  {@code true}.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", "")      = false StringUtils.containsOnly("abab", "abc") = true StringUtils.containsOnly("ab1", "abc")  = false StringUtils.containsOnly("abz", "abc")  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param validChars  a String of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 * @since 2.0
 * @since 3.0 Changed signature from containsOnly(String, String) to containsOnly(CharSequence, String)
 */
//
//
/** 
 * <p>Checks that the CharSequence does not contain certain characters.</p> <p>A  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty CharSequence (length()=0) always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", '')      = true StringUtils.containsNone("abab", 'xyz') = true StringUtils.containsNone("ab1", 'xyz')  = true StringUtils.containsNone("abz", 'xyz')  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  an array of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 * @since 3.0 Changed signature from containsNone(String, char[]) to containsNone(CharSequence, char...)
 */
//
//
/** 
 * <p>Checks that the CharSequence does not contain certain characters.</p> <p>A  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty String ("") always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", "")      = true StringUtils.containsNone("abab", "xyz") = true StringUtils.containsNone("ab1", "xyz")  = true StringUtils.containsNone("abz", "xyz")  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param invalidChars  a String of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 * @since 3.0 Changed signature from containsNone(String, String) to containsNone(CharSequence, String)
 */
//
//
/** 
 * <p>Find the first index of any of a set of potential substrings.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}. A  {@code null} search array entry will be ignored, but a searcharray containing "" will return  {@code 0} if {@code str} is notnull. This method uses  {@link String#indexOf(String)} if possible.</p><pre> StringUtils.indexOfAny(null, *)                     = -1 StringUtils.indexOfAny(*, null)                     = -1 StringUtils.indexOfAny(*, [])                       = -1 StringUtils.indexOfAny("zzabyycdxx", ["ab","cd"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["cd","ab"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["mn","op"])   = -1 StringUtils.indexOfAny("zzabyycdxx", ["zab","aby"]) = 1 StringUtils.indexOfAny("zzabyycdxx", [""])          = 0 StringUtils.indexOfAny("", [""])                    = 0 StringUtils.indexOfAny("", ["a"])                   = -1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStrs  the CharSequences to search for, may be null
 * @return the first index of any of the searchStrs in str, -1 if no match
 * @since 3.0 Changed signature from indexOfAny(String, String[]) to indexOfAny(CharSequence, CharSequence...)
 */
//
/** 
 * <p>Find the latest index of any of a set of potential substrings.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} search array will return {@code -1}. A  {@code null} or zero length search array entry will be ignored,but a search array containing "" will return the length of  {@code str}if  {@code str} is not null. This method uses {@link String#indexOf(String)} if possible</p><pre> StringUtils.lastIndexOfAny(null, *)                   = -1 StringUtils.lastIndexOfAny(*, null)                   = -1 StringUtils.lastIndexOfAny(*, [])                     = -1 StringUtils.lastIndexOfAny(*, [null])                 = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["ab","cd"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["cd","ab"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn",""])   = 10 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStrs  the CharSequences to search for, may be null
 * @return the last index of any of the CharSequences, -1 if no match
 * @since 3.0 Changed signature from lastIndexOfAny(String, String[]) to lastIndexOfAny(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start  {@code n}characters from the end of the String.</p> <p>A  {@code null} String will return {@code null}. An empty ("") String will return "".</p> <pre> StringUtils.substring(null, *)   = null StringUtils.substring("", *)     = "" StringUtils.substring("abc", 0)  = "abc" StringUtils.substring("abc", 2)  = "c" StringUtils.substring("abc", 4)  = "" StringUtils.substring("abc", -2) = "bc" StringUtils.substring("abc", -4) = "abc" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @return substring from start position, {@code null} if null String input
 */
//
//
/** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start/end  {@code n}characters from the end of the String.</p> <p>The returned substring starts with the character in the  {@code start}position and ends before the  {@code end} position. All position counting iszero-based -- i.e., to start at the beginning of the string use {@code start = 0}. Negative start and end positions can be used to specify offsets relative to the end of the String.</p> <p>If  {@code start} is not strictly to the left of {@code end}, "" is returned.</p> <pre> StringUtils.substring(null, *, *)    = null StringUtils.substring("", * ,  *)    = ""; StringUtils.substring("abc", 0, 2)   = "ab" StringUtils.substring("abc", 2, 0)   = "" StringUtils.substring("abc", 2, 4)   = "c" StringUtils.substring("abc", 4, 6)   = "" StringUtils.substring("abc", 2, 2)   = "" StringUtils.substring("abc", -2, -1) = "b" StringUtils.substring("abc", -4, 2)  = "ab" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @param end  the position to end at (exclusive), negative meanscount back from the end of the String by this many characters
 * @return substring from start position to end position,{@code null} if null String input
 */
//
//
//
//
//
//
//
/** 
 * <p>Gets the leftmost  {@code len} characters of a String.</p><p>If  {@code len} characters are not available, or theString is  {@code null}, the String will be returned without an exception. An empty String is returned if len is negative.</p> <pre> StringUtils.left(null, *)    = null StringUtils.left(*, -ve)     = "" StringUtils.left("", *)      = "" StringUtils.left("abc", 0)   = "" StringUtils.left("abc", 2)   = "ab" StringUtils.left("abc", 4)   = "abc" </pre>
 * @param str  the String to get the leftmost characters from, may be null
 * @param len  the length of the required String
 * @return the leftmost characters, {@code null} if null String input
 */
/** 
 * <p>Gets the rightmost  {@code len} characters of a String.</p><p>If  {@code len} characters are not available, or the Stringis  {@code null}, the String will be returned without an an exception. An empty String is returned if len is negative.</p> <pre> StringUtils.right(null, *)    = null StringUtils.right(*, -ve)     = "" StringUtils.right("", *)      = "" StringUtils.right("abc", 0)   = "" StringUtils.right("abc", 2)   = "bc" StringUtils.right("abc", 4)   = "abc" </pre>
 * @param str  the String to get the rightmost characters from, may be null
 * @param len  the length of the required String
 * @return the rightmost characters, {@code null} if null String input
 */
/** 
 * <p>Gets  {@code len} characters from the middle of a String.</p><p>If  {@code len} characters are not available, the remainderof the String will be returned without an exception. If the String is  {@code null},  {@code null} will be returned.An empty String is returned if len is negative or exceeds the length of  {@code str}.</p> <pre> StringUtils.mid(null, *, *)    = null StringUtils.mid(*, *, -ve)     = "" StringUtils.mid("", 0, *)      = "" StringUtils.mid("abc", 0, 2)   = "ab" StringUtils.mid("abc", 0, 4)   = "abc" StringUtils.mid("abc", 2, 4)   = "c" StringUtils.mid("abc", 4, 2)   = "" StringUtils.mid("abc", -2, 2)  = "ab" </pre>
 * @param str  the String to get the characters from, may be null
 * @param pos  the position to start from, negative treated as zero
 * @param len  the length of the required String
 * @return the middle characters, {@code null} if null String input
 */
//
//
/** 
 * <p>Gets the substring before the first occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. A  {@code null} separator will return the input string.</p><p>If nothing is found, the string input is returned.</p> <pre> StringUtils.substringBefore(null, *)      = null StringUtils.substringBefore("", *)        = "" StringUtils.substringBefore("abc", "a")   = "" StringUtils.substringBefore("abcba", "b") = "a" StringUtils.substringBefore("abc", "c")   = "ab" StringUtils.substringBefore("abc", "d")   = "abc" StringUtils.substringBefore("abc", "")    = "" StringUtils.substringBefore("abc", null)  = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the first occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring after the first occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. A  {@code null} separator will return the empty string if theinput string is not  {@code null}.</p> <p>If nothing is found, the empty string is returned.</p> <pre> StringUtils.substringAfter(null, *)      = null StringUtils.substringAfter("", *)        = "" StringUtils.substringAfter(*, null)      = "" StringUtils.substringAfter("abc", "a")   = "bc" StringUtils.substringAfter("abcba", "b") = "cba" StringUtils.substringAfter("abc", "c")   = "" StringUtils.substringAfter("abc", "d")   = "" StringUtils.substringAfter("abc", "")    = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the first occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring before the last occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. An empty or  {@code null} separator will return the input string.</p><p>If nothing is found, the string input is returned.</p> <pre> StringUtils.substringBeforeLast(null, *)      = null StringUtils.substringBeforeLast("", *)        = "" StringUtils.substringBeforeLast("abcba", "b") = "abc" StringUtils.substringBeforeLast("abc", "c")   = "ab" StringUtils.substringBeforeLast("a", "a")     = "" StringUtils.substringBeforeLast("a", "z")     = "a" StringUtils.substringBeforeLast("a", null)    = "a" StringUtils.substringBeforeLast("a", "")      = "a" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the last occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring after the last occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. An empty or  {@code null} separator will return the empty string ifthe input string is not  {@code null}.</p> <p>If nothing is found, the empty string is returned.</p> <pre> StringUtils.substringAfterLast(null, *)      = null StringUtils.substringAfterLast("", *)        = "" StringUtils.substringAfterLast(*, "")        = "" StringUtils.substringAfterLast(*, null)      = "" StringUtils.substringAfterLast("abc", "a")   = "bc" StringUtils.substringAfterLast("abcba", "b") = "a" StringUtils.substringAfterLast("abc", "c")   = "" StringUtils.substringAfterLast("a", "a")     = "" StringUtils.substringAfterLast("a", "z")     = "" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the last occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
//
//
/** 
 * <p>Gets the String that is nested in between two instances of the same String.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} tag returns {@code null}.</p> <pre> StringUtils.substringBetween(null, *)            = null StringUtils.substringBetween("", "")             = "" StringUtils.substringBetween("", "tag")          = null StringUtils.substringBetween("tagabctag", null)  = null StringUtils.substringBetween("tagabctag", "")    = "" StringUtils.substringBetween("tagabctag", "tag") = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param tag  the String before and after the substring, may be null
 * @return the substring, {@code null} if no match
 * @since 2.0
 */
/** 
 * <p>Gets the String that is nested in between two Strings. Only the first match is returned.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty ("") open and close returns an empty string.</p> <pre> StringUtils.substringBetween("wx[b]yz", "[", "]") = "b" StringUtils.substringBetween(null, *, *)          = null StringUtils.substringBetween(*, null, *)          = null StringUtils.substringBetween(*, *, null)          = null StringUtils.substringBetween("", "", "")          = "" StringUtils.substringBetween("", "", "]")         = null StringUtils.substringBetween("", "[", "]")        = null StringUtils.substringBetween("yabcz", "", "")     = "" StringUtils.substringBetween("yabcz", "y", "z")   = "abc" StringUtils.substringBetween("yabczyabcz", "y", "z")   = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param open  the String before the substring, may be null
 * @param close  the String after the substring, may be null
 * @return the substring, {@code null} if no match
 * @since 2.0
 */
/** 
 * <p>Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty ("") open/close returns  {@code null} (no match).</p><pre> StringUtils.substringsBetween("[a][b][c]", "[", "]") = ["a","b","c"] StringUtils.substringsBetween(null, *, *)            = null StringUtils.substringsBetween(*, null, *)            = null StringUtils.substringsBetween(*, *, null)            = null StringUtils.substringsBetween("", "[", "]")          = [] </pre>
 * @param str  the String containing the substrings, null returns null, empty returns empty
 * @param open  the String identifying the start of the substring, empty returns null
 * @param close  the String identifying the end of the substring, empty returns null
 * @return a String Array of substrings, or {@code null} if no match
 * @since 2.3
 */
//
//
//
//
/** 
 * <p>Splits the provided text into an array, using whitespace as the separator. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.split(null)       = null StringUtils.split("")         = [] StringUtils.split("abc def")  = ["abc", "def"] StringUtils.split("abc  def") = ["abc", "def"] StringUtils.split(" abc ")    = ["abc"] </pre>
 * @param str  the String to parse, may be null
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array, separator specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("a.b.c", '.')    = ["a", "b", "c"] StringUtils.split("a..b.c", '.')   = ["a", "b", "c"] StringUtils.split("a:b:c", '.')    = ["a:b:c"] StringUtils.split("a b c", ' ')    = ["a", "b", "c"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChar  the character used as the delimiter
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Splits the provided text into an array, separators specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("abc def", null) = ["abc", "def"] StringUtils.split("abc def", " ")  = ["abc", "def"] StringUtils.split("abc  def", " ") = ["abc", "def"] StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array with a maximum length, separators specified.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><p>If more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).</p> <pre> StringUtils.split(null, *, *)            = null StringUtils.split("", *, *)              = [] StringUtils.split("ab cd ef", null, 0)   = ["ab", "cd", "ef"] StringUtils.split("ab   cd ef", null, 0) = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified.</p> <p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparator(null, *)               = null StringUtils.splitByWholeSeparator("", *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String was input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.</p><p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparator(null, *, *)               = null StringUtils.splitByWholeSeparator("", *, *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null, 0)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, {@code null} if null String was input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. </p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String was input
 * @since 2.4
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.</p><p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *, *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null, 0)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, {@code null} if null String was input
 * @since 2.4
 */
/** 
 * Performs the logic for the  {@code splitByWholeSeparatorPreserveAllTokens} methods.
 * @param str  the String to parse, may be {@code null}
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.splitPreserveAllTokens(null)       = null StringUtils.splitPreserveAllTokens("")         = [] StringUtils.splitPreserveAllTokens("abc def")  = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def") = ["abc", "", "def"] StringUtils.splitPreserveAllTokens(" abc ")    = ["", "abc", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Splits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.splitPreserveAllTokens(null, *)         = null StringUtils.splitPreserveAllTokens("", *)           = [] StringUtils.splitPreserveAllTokens("a.b.c", '.')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a..b.c", '.')   = ["a", "", "b", "c"] StringUtils.splitPreserveAllTokens("a:b:c", '.')    = ["a:b:c"] StringUtils.splitPreserveAllTokens("a\tb\nc", null) = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c", ' ')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c ", ' ')   = ["a", "b", "c", ""] StringUtils.splitPreserveAllTokens("a b c  ", ' ')   = ["a", "b", "c", "", ""] StringUtils.splitPreserveAllTokens(" a b c", ' ')   = ["", a", "b", "c"] StringUtils.splitPreserveAllTokens("  a b c", ' ')  = ["", "", a", "b", "c"] StringUtils.splitPreserveAllTokens(" a b c ", ' ')  = ["", a", "b", "c", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChar  the character used as the delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that do not return amaximum array length.
 * @param str  the String to parse, may be {@code null}
 * @param separatorChar the separate character
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 */
//
/** 
 * <p>Splits the provided text into an array, separators specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><pre> StringUtils.splitPreserveAllTokens(null, *)           = null StringUtils.splitPreserveAllTokens("", *)             = [] StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""] StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""] StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"] StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Splits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><p>If more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).</p> <pre> StringUtils.splitPreserveAllTokens(null, *, *)            = null StringUtils.splitPreserveAllTokens("", *, *)              = [] StringUtils.splitPreserveAllTokens("ab de fg", null, 0)   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 0) = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 2) = ["ab", "  de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 3) = ["ab", "", " de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 4) = ["ab", "", "", "de fg"] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that return a maximum arraylength.
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars the separate character
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit.
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 */
//
//
//
//
//
//
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens. <pre> StringUtils.splitByCharacterType(null)         = null StringUtils.splitByCharacterType("")           = [] StringUtils.splitByCharacterType("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterType("number5")    = ["number", "5"] StringUtils.splitByCharacterType("fooBar")     = ["foo", "B", "ar"] StringUtils.splitByCharacterType("foo200Bar")  = ["foo", "200", "B", "ar"] StringUtils.splitByCharacterType("ASFRules")   = ["ASFR", "ules"] </pre>
 * @param str the String to split, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: the character of type {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.<pre> StringUtils.splitByCharacterTypeCamelCase(null)         = null StringUtils.splitByCharacterTypeCamelCase("")           = [] StringUtils.splitByCharacterTypeCamelCase("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterTypeCamelCase("number5")    = ["number", "5"] StringUtils.splitByCharacterTypeCamelCase("fooBar")     = ["foo", "Bar"] StringUtils.splitByCharacterTypeCamelCase("foo200Bar")  = ["foo", "200", "Bar"] StringUtils.splitByCharacterTypeCamelCase("ASFRules")   = ["ASF", "Rules"] </pre>
 * @param str the String to split, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: if  {@code camelCase} is {@code true}, the character of type  {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.
 * @param str the String to split, may be {@code null}
 * @param camelCase whether to use so-called "camel-case" for letter types
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
//
//
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No separator is added to the joined String. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null)            = null StringUtils.join([])              = "" StringUtils.join([null])          = "" StringUtils.join(["a", "b", "c"]) = "abc" StringUtils.join([null, "", "a"]) = "a" </pre>
 * @param < T > the specific type of values to join together
 * @param elements  the values to join together, may be null
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 * @since 3.0 Changed signature to use varargs
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)                = null StringUtils.join([], *)                  = "" StringUtils.join([null], *)              = "" StringUtils.join(["a", "b", "c"], "--")  = "a--b--c" StringUtils.join(["a", "b", "c"], null)  = "abc" StringUtils.join(["a", "b", "c"], "")    = "abc" StringUtils.join([null, "", "a"], ',')   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null array input
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *, *, *)                = null StringUtils.join([], *, *, *)                  = "" StringUtils.join([null], *, *, *)              = "" StringUtils.join(["a", "b", "c"], "--", 0, 3)  = "a--b--c" StringUtils.join(["a", "b", "c"], "--", 1, 3)  = "b--c" StringUtils.join(["a", "b", "c"], "--", 2, 3)  = "c" StringUtils.join(["a", "b", "c"], "--", 2, 2)  = "" StringUtils.join(["a", "b", "c"], null, 0, 3)  = "abc" StringUtils.join(["a", "b", "c"], "", 0, 3)    = "abc" StringUtils.join([null, "", "a"], ',', 0, 3)   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @param startIndex the first index to start joining from.
 * @param endIndex the index to stop joining from (exclusive).
 * @return the joined String, {@code null} if null array input; or the empty stringif  {@code endIndex - startIndex <= 0}. The number of joined entries is given by {@code endIndex - startIndex}
 * @throws ArrayIndexOutOfBoundsException ife<br/>{@code startIndex < 0} or <br/>{@code startIndex >= array.length()} or <br/>{@code endIndex < 0} or <br/>{@code endIndex > array.length()} 
 */
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null iterator input
 * @since 2.0
 */
//
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").</p><p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null iterator input
 */
//
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param iterable  the {@code Iterable} providing the values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null iterator input
 * @since 2.3
 */
/** 
 * <p>Joins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").</p><p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param iterable  the {@code Iterable} providing the values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null iterator input
 * @since 2.3
 */
//
//
/** 
 * <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.deleteWhitespace(null)         = null StringUtils.deleteWhitespace("")           = "" StringUtils.deleteWhitespace("abc")        = "abc" StringUtils.deleteWhitespace("   ab  c  ") = "abc" </pre>
 * @param str  the String to delete whitespace from, may be null
 * @return the String without whitespaces, {@code null} if null String input
 */
//
//
/** 
 * <p>Removes a substring only if it is at the beginning of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeStart(null, *)      = null StringUtils.removeStart("", *)        = "" StringUtils.removeStart(*, null)      =  StringUtils.removeStart("www.domain.com", "www.")   = "domain.com" StringUtils.removeStart("domain.com", "www.")       = "domain.com" StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStart("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Case insensitive removal of a substring if it is at the beginning of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeStartIgnoreCase(null, *)      = null StringUtils.removeStartIgnoreCase("", *)        = "" StringUtils.removeStartIgnoreCase(*, null)      =  StringUtils.removeStartIgnoreCase("www.domain.com", "www.")   = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "WWW.")   = "domain.com" StringUtils.removeStartIgnoreCase("domain.com", "www.")       = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStartIgnoreCase("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Removes a substring only if it is at the end of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeEnd(null, *)      = null StringUtils.removeEnd("", *)        = "" StringUtils.removeEnd(*, null)      =  StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com" StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain" StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEnd("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeEndIgnoreCase(null, *)      = null StringUtils.removeEndIgnoreCase("", *)        = "" StringUtils.removeEndIgnoreCase(*, null)      =  StringUtils.removeEndIgnoreCase("www.domain.com", ".com.")  = "www.domain.com" StringUtils.removeEndIgnoreCase("www.domain.com", ".com")   = "www.domain" StringUtils.removeEndIgnoreCase("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEndIgnoreCase("abc", "")    = "abc" StringUtils.removeEndIgnoreCase("www.domain.com", ".COM") = "www.domain") StringUtils.removeEndIgnoreCase("www.domain.COM", ".com") = "www.domain") </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Removes all occurrences of a substring from within the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} remove string will return the source string.An empty ("") remove string will return the source string.</p> <pre> StringUtils.remove(null, *)        = null StringUtils.remove("", *)          = "" StringUtils.remove(*, null)        =  StringUtils.remove(*, "")          =  StringUtils.remove("queued", "ue") = "qd" StringUtils.remove("queued", "zz") = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Removes all occurrences of a character from within the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string.</p> <pre> StringUtils.remove(null, *)       = null StringUtils.remove("", *)         = "" StringUtils.remove("queued", 'u') = "qeed" StringUtils.remove("queued", 'z') = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the char to search for and remove, may be null
 * @return the substring with the char removed if found,{@code null} if null String input
 * @since 2.1
 */
//
//
/** 
 * <p>Replaces a String with another String inside a larger String, once.</p> <p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replaceOnce(null, *, *)        = null StringUtils.replaceOnce("", *, *)          = "" StringUtils.replaceOnce("any", null, *)    = "any" StringUtils.replaceOnce("any", *, null)    = "any" StringUtils.replaceOnce("any", "", *)      = "any" StringUtils.replaceOnce("aba", "a", null)  = "aba" StringUtils.replaceOnce("aba", "a", "")    = "ba" StringUtils.replaceOnce("aba", "a", "z")   = "zba" </pre>
 * @see #replace(String text,String searchString,String replacement,int max)
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace with, may be null
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * Replaces each substring of the source String that matches the given regular expression with the given replacement using the  {@link Pattern#DOTALL} option. DOTALL is also know as single-line mode in Perl. This callis also equivalent to: <ul> <li> {@code source.replaceAll(&quot;(?s)&quot; + regex, replacement)}</li> <li> {@code Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement)}</li> </ul>
 * @param source the source string
 * @param regex the regular expression to which this string is to be matched
 * @param replacement the string to be substituted for each match
 * @return The resulting {@code String}
 * @see String#replaceAll(String,String)
 * @see Pattern#DOTALL
 * @since 3.2
 */
/** 
 * Removes each substring of the source String that matches the given regular expression using the DOTALL option.
 * @param source the source string
 * @param regex the regular expression to which this string is to be matched
 * @return The resulting {@code String}
 * @see String#replaceAll(String,String)
 * @see Pattern#DOTALL
 * @since 3.2
 */
/** 
 * <p>Replaces all occurrences of a String within another String.</p> <p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replace(null, *, *)        = null StringUtils.replace("", *, *)          = "" StringUtils.replace("any", null, *)    = "any" StringUtils.replace("any", *, null)    = "any" StringUtils.replace("any", "", *)      = "any" StringUtils.replace("aba", "a", null)  = "aba" StringUtils.replace("aba", "a", "")    = "b" StringUtils.replace("aba", "a", "z")   = "zbz" </pre>
 * @see #replace(String text,String searchString,String replacement,int max)
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace it with, may be null
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * <p>Replaces a String with another String inside a larger String, for the first  {@code max} values of the search String.</p><p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replace(null, *, *, *)         = null StringUtils.replace("", *, *, *)           = "" StringUtils.replace("any", null, *, *)     = "any" StringUtils.replace("any", *, null, *)     = "any" StringUtils.replace("any", "", *, *)       = "any" StringUtils.replace("any", *, *, 0)        = "any" StringUtils.replace("abaa", "a", null, -1) = "abaa" StringUtils.replace("abaa", "a", "", -1)   = "b" StringUtils.replace("abaa", "a", "z", 0)   = "abaa" StringUtils.replace("abaa", "a", "z", 1)   = "zbaa" StringUtils.replace("abaa", "a", "z", 2)   = "zbza" StringUtils.replace("abaa", "a", "z", -1)  = "zbzz" </pre>
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace it with, may be null
 * @param max  maximum number of values to replace, or {@code -1} if no maximum
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. </p> <pre> StringUtils.replaceEach(null, *, *)        = null StringUtils.replaceEach("", *, *)          = "" StringUtils.replaceEach("aba", null, null) = "aba" StringUtils.replaceEach("aba", new String[0], null) = "aba" StringUtils.replaceEach("aba", null, new String[0]) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null)  = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""})  = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"})  = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"})  = "wcte" (example of how it does not repeat) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"})  = "dcte" </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored.  </p> <pre> StringUtils.replaceEach(null, *, *, *) = null StringUtils.replaceEach("", *, *, *) = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, true) = IllegalStateException StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, false) = "dcabe" </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalStateException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
//
//
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored. </p> <pre> StringUtils.replaceEach(null, *, *, *) = null StringUtils.replaceEach("", *, *, *) = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) = IllegalStateException </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @param repeat if true, then replace repeatedlyuntil there are no more possible replacements or timeToLive < 0
 * @param timeToLive if less than 0 then there is a circular reference and endless loop
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalStateException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Replaces all occurrences of a character in a String with another. This is a null-safe version of  {@link String#replace(char,char)}.</p> <p>A  {@code null} string input returns {@code null}. An empty ("") string input returns an empty string.</p> <pre> StringUtils.replaceChars(null, *, *)        = null StringUtils.replaceChars("", *, *)          = "" StringUtils.replaceChars("abcba", 'b', 'y') = "aycya" StringUtils.replaceChars("abcba", 'z', 'y') = "abcba" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChar  the character to search for, may be null
 * @param replaceChar  the character to replace, may be null
 * @return modified String, {@code null} if null string input
 * @since 2.0
 */
/** 
 * <p>Replaces multiple characters in a String in one go. This method can also be used to delete characters.</p> <p>For example:<br /> <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p> <p>A  {@code null} string input returns {@code null}. An empty ("") string input returns an empty string. A null or empty set of search characters returns the input string.</p> <p>The length of the search characters should normally equal the length of the replace characters. If the search characters is longer, then the extra search characters are deleted. If the search characters is shorter, then the extra replace characters are ignored.</p> <pre> StringUtils.replaceChars(null, *, *)           = null StringUtils.replaceChars("", *, *)             = "" StringUtils.replaceChars("abc", null, *)       = "abc" StringUtils.replaceChars("abc", "", *)         = "abc" StringUtils.replaceChars("abc", "b", null)     = "ac" StringUtils.replaceChars("abc", "b", "")       = "ac" StringUtils.replaceChars("abcba", "bc", "yz")  = "ayzya" StringUtils.replaceChars("abcba", "bc", "y")   = "ayya" StringUtils.replaceChars("abcba", "bc", "yzx") = "ayzya" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChars  a set of characters to search for, may be null
 * @param replaceChars  a set of characters to replace, may be null
 * @return modified String, {@code null} if null string input
 * @since 2.0
 */
//
//
/** 
 * <p>Overlays part of a String with another String.</p> <p>A  {@code null} string input returns {@code null}. A negative index is treated as zero. An index greater than the string length is treated as the string length. The start index is always the smaller of the two indices.</p> <pre> StringUtils.overlay(null, *, *, *)            = null StringUtils.overlay("", "abc", 0, 0)          = "abc" StringUtils.overlay("abcdef", null, 2, 4)     = "abef" StringUtils.overlay("abcdef", "", 2, 4)       = "abef" StringUtils.overlay("abcdef", "", 4, 2)       = "abef" StringUtils.overlay("abcdef", "zzzz", 2, 4)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", 4, 2)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", -1, 4)  = "zzzzef" StringUtils.overlay("abcdef", "zzzz", 2, 8)   = "abzzzz" StringUtils.overlay("abcdef", "zzzz", -2, -3) = "zzzzabcdef" StringUtils.overlay("abcdef", "zzzz", 8, 10)  = "abcdefzzzz" </pre>
 * @param str  the String to do overlaying in, may be null
 * @param overlay  the String to overlay, may be null
 * @param start  the position to start overlaying at
 * @param end  the position to stop overlaying before
 * @return overlayed String, {@code null} if null String input
 * @since 2.0
 */
//
//
/** 
 * <p>Removes one newline from end of a String if it's there, otherwise leave it alone.  A newline is &quot; {@code \n}&quot;, &quot; {@code \r}&quot;, or &quot; {@code \r\n}&quot;.</p> <p>NOTE: This method changed in 2.0. It now more closely matches Perl chomp.</p> <pre> StringUtils.chomp(null)          = null StringUtils.chomp("")            = "" StringUtils.chomp("abc \r")      = "abc " StringUtils.chomp("abc\n")       = "abc" StringUtils.chomp("abc\r\n")     = "abc" StringUtils.chomp("abc\r\n\r\n") = "abc\r\n" StringUtils.chomp("abc\n\r")     = "abc\n" StringUtils.chomp("abc\n\rabc")  = "abc\n\rabc" StringUtils.chomp("\r")          = "" StringUtils.chomp("\n")          = "" StringUtils.chomp("\r\n")        = "" </pre>
 * @param str  the String to chomp a newline from, may be null
 * @return String without newline, {@code null} if null String input
 */
/** 
 * <p>Removes  {@code separator} from the end of{@code str} if it's there, otherwise leave it alone.</p><p>NOTE: This method changed in version 2.0. It now more closely matches Perl chomp. For the previous behavior, use  {@link #substringBeforeLast(String,String)}. This method uses  {@link String#endsWith(String)}.</p> <pre> StringUtils.chomp(null, *)         = null StringUtils.chomp("", *)           = "" StringUtils.chomp("foobar", "bar") = "foo" StringUtils.chomp("foobar", "baz") = "foobar" StringUtils.chomp("foo", "foo")    = "" StringUtils.chomp("foo ", "foo")   = "foo " StringUtils.chomp(" foo", "foo")   = " " StringUtils.chomp("foo", "foooo")  = "foo" StringUtils.chomp("foo", "")       = "foo" StringUtils.chomp("foo", null)     = "foo" </pre>
 * @param str  the String to chomp from, may be null
 * @param separator  separator String, may be null
 * @return String without trailing separator, {@code null} if null String input
 * @deprecated This feature will be removed in Lang 4.0, use {@link StringUtils#removeEnd(String,String)} instead
 */
//
//
/** 
 * <p>Remove the last character from a String.</p> <p>If the String ends in  {@code \r\n}, then remove both of them.</p> <pre> StringUtils.chop(null)          = null StringUtils.chop("")            = "" StringUtils.chop("abc \r")      = "abc " StringUtils.chop("abc\n")       = "abc" StringUtils.chop("abc\r\n")     = "abc" StringUtils.chop("abc")         = "ab" StringUtils.chop("abc\nabc")    = "abc\nab" StringUtils.chop("a")           = "" StringUtils.chop("\r")          = "" StringUtils.chop("\n")          = "" StringUtils.chop("\r\n")        = "" </pre>
 * @param str  the String to chop last character from, may be null
 * @return String without last character, {@code null} if null String input
 */
//
//
//
//
/** 
 * <p>Repeat a String  {@code repeat} times to form anew String.</p> <pre> StringUtils.repeat(null, 2) = null StringUtils.repeat("", 0)   = "" StringUtils.repeat("", 2)   = "" StringUtils.repeat("a", 3)  = "aaa" StringUtils.repeat("ab", 2) = "abab" StringUtils.repeat("a", -2) = "" </pre>
 * @param str  the String to repeat, may be null
 * @param repeat  number of times to repeat str, negative treated as zero
 * @return a new String consisting of the original String repeated,{@code null} if null String input
 */
//
/** 
 * <p>Repeat a String  {@code repeat} times to form anew String, with a String separator injected each time. </p> <pre> StringUtils.repeat(null, null, 2) = null StringUtils.repeat(null, "x", 2)  = null StringUtils.repeat("", null, 0)   = "" StringUtils.repeat("", "", 2)     = "" StringUtils.repeat("", "x", 3)    = "xxx" StringUtils.repeat("?", ", ", 3)  = "?, ?, ?" </pre>
 * @param str        the String to repeat, may be null
 * @param separator  the String to inject, may be null
 * @param repeat     number of times to repeat str, negative treated as zero
 * @return a new String consisting of the original String repeated,{@code null} if null String input
 * @since 2.5
 */
//
/** 
 * <p>Returns padding using the specified delimiter repeated to a given length.</p> <pre> StringUtils.repeat('e', 0)  = "" StringUtils.repeat('e', 3)  = "eee" StringUtils.repeat('e', -2) = "" </pre> <p>Note: this method doesn't not support padding with <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a> as they require a pair of  {@code char}s to be represented. If you are needing to support full I18N of your applications consider using  {@link #repeat(String,int)} instead.</p>
 * @param ch  character to repeat
 * @param repeat  number of times to repeat char, negative treated as zero
 * @return String with repeated character
 * @see #repeat(String,int)
 */
/** 
 * <p>Right pad a String with spaces (' ').</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *)   = null StringUtils.rightPad("", 3)     = "   " StringUtils.rightPad("bat", 3)  = "bat" StringUtils.rightPad("bat", 5)  = "bat  " StringUtils.rightPad("bat", 1)  = "bat" StringUtils.rightPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 */
/** 
 * <p>Right pad a String with a specified character.</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *, *)     = null StringUtils.rightPad("", 3, 'z')     = "zzz" StringUtils.rightPad("bat", 3, 'z')  = "bat" StringUtils.rightPad("bat", 5, 'z')  = "batzz" StringUtils.rightPad("bat", 1, 'z')  = "bat" StringUtils.rightPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 * @since 2.0
 */
//
/** 
 * <p>Right pad a String with a specified String.</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *, *)      = null StringUtils.rightPad("", 3, "z")      = "zzz" StringUtils.rightPad("bat", 3, "yz")  = "bat" StringUtils.rightPad("bat", 5, "yz")  = "batyz" StringUtils.rightPad("bat", 8, "yz")  = "batyzyzy" StringUtils.rightPad("bat", 1, "yz")  = "bat" StringUtils.rightPad("bat", -1, "yz") = "bat" StringUtils.rightPad("bat", 5, null)  = "bat  " StringUtils.rightPad("bat", 5, "")    = "bat  " </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 */
//
/** 
 * <p>Left pad a String with spaces (' ').</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *)   = null StringUtils.leftPad("", 3)     = "   " StringUtils.leftPad("bat", 3)  = "bat" StringUtils.leftPad("bat", 5)  = "  bat" StringUtils.leftPad("bat", 1)  = "bat" StringUtils.leftPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 */
/** 
 * <p>Left pad a String with a specified character.</p> <p>Pad to a size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *, *)     = null StringUtils.leftPad("", 3, 'z')     = "zzz" StringUtils.leftPad("bat", 3, 'z')  = "bat" StringUtils.leftPad("bat", 5, 'z')  = "zzbat" StringUtils.leftPad("bat", 1, 'z')  = "bat" StringUtils.leftPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 * @since 2.0
 */
//
/** 
 * <p>Left pad a String with a specified String.</p> <p>Pad to a size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *, *)      = null StringUtils.leftPad("", 3, "z")      = "zzz" StringUtils.leftPad("bat", 3, "yz")  = "bat" StringUtils.leftPad("bat", 5, "yz")  = "yzbat" StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat" StringUtils.leftPad("bat", 1, "yz")  = "bat" StringUtils.leftPad("bat", -1, "yz") = "bat" StringUtils.leftPad("bat", 5, null)  = "  bat" StringUtils.leftPad("bat", 5, "")    = "  bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 */
//
/** 
 * Gets a CharSequence length or  {@code 0} if the CharSequence is{@code null}.
 * @param cs a CharSequence or  {@code null}
 * @return CharSequence length or {@code 0} if the CharSequence is{@code null}.
 * @since 2.4
 * @since 3.0 Changed signature from length(String) to length(CharSequence)
 */
//
//
/** 
 * <p>Centers a String in a larger String of size  {@code size}using the space character (' ').<p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <p>Equivalent to  {@code center(str, size, " ")}.</p> <pre> StringUtils.center(null, *)   = null StringUtils.center("", 4)     = "    " StringUtils.center("ab", -1)  = "ab" StringUtils.center("ab", 4)   = " ab " StringUtils.center("abcd", 2) = "abcd" StringUtils.center("a", 4)    = " a  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @return centered String, {@code null} if null String input
 */
/** 
 * <p>Centers a String in a larger String of size  {@code size}. Uses a supplied character as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, ' ')     = "    " StringUtils.center("ab", -1, ' ')  = "ab" StringUtils.center("ab", 4, ' ')   = " ab " StringUtils.center("abcd", 2, ' ') = "abcd" StringUtils.center("a", 4, ' ')    = " a  " StringUtils.center("a", 4, 'y')    = "yayy" </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padChar  the character to pad the new String with
 * @return centered String, {@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Centers a String in a larger String of size  {@code size}. Uses a supplied String as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, " ")     = "    " StringUtils.center("ab", -1, " ")  = "ab" StringUtils.center("ab", 4, " ")   = " ab " StringUtils.center("abcd", 2, " ") = "abcd" StringUtils.center("a", 4, " ")    = " a  " StringUtils.center("a", 4, "yz")   = "yayz" StringUtils.center("abc", 7, null) = "  abc  " StringUtils.center("abc", 7, "")   = "  abc  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padStr  the String to pad the new String with, must not be null or empty
 * @return centered String, {@code null} if null String input
 * @throws IllegalArgumentException if padStr is {@code null} or empty
 */
//
//
/** 
 * <p>Converts a String to upper case as per  {@link String#toUpperCase()}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.upperCase(null)  = null StringUtils.upperCase("")    = "" StringUtils.upperCase("aBc") = "ABC" </pre> <p><strong>Note:</strong> As described in the documentation for  {@link String#toUpperCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).</p>
 * @param str  the String to upper case, may be null
 * @return the upper cased String, {@code null} if null String input
 */
/** 
 * <p>Converts a String to upper case as per  {@link String#toUpperCase(Locale)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.upperCase(null, Locale.ENGLISH)  = null StringUtils.upperCase("", Locale.ENGLISH)    = "" StringUtils.upperCase("aBc", Locale.ENGLISH) = "ABC" </pre>
 * @param str  the String to upper case, may be null
 * @param locale  the locale that defines the case transformation rules, must not be null
 * @return the upper cased String, {@code null} if null String input
 * @since 2.5
 */
/** 
 * <p>Converts a String to lower case as per  {@link String#toLowerCase()}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.lowerCase(null)  = null StringUtils.lowerCase("")    = "" StringUtils.lowerCase("aBc") = "abc" </pre> <p><strong>Note:</strong> As described in the documentation for  {@link String#toLowerCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).</p>
 * @param str  the String to lower case, may be null
 * @return the lower cased String, {@code null} if null String input
 */
/** 
 * <p>Converts a String to lower case as per  {@link String#toLowerCase(Locale)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.lowerCase(null, Locale.ENGLISH)  = null StringUtils.lowerCase("", Locale.ENGLISH)    = "" StringUtils.lowerCase("aBc", Locale.ENGLISH) = "abc" </pre>
 * @param str  the String to lower case, may be null
 * @param locale  the locale that defines the case transformation rules, must not be null
 * @return the lower cased String, {@code null} if null String input
 * @since 2.5
 */
/** 
 * <p>Capitalizes a String changing the first letter to title case as per  {@link Character#toTitleCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.capitalize(null)  = null StringUtils.capitalize("")    = "" StringUtils.capitalize("cat") = "Cat" StringUtils.capitalize("cAt") = "CAt" </pre>
 * @param str the String to capitalize, may be null
 * @return the capitalized String, {@code null} if null String input
 * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)
 * @see #uncapitalize(String)
 * @since 2.0
 */
//
/** 
 * <p>Uncapitalizes a String changing the first letter to title case as per  {@link Character#toLowerCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.uncapitalize(null)  = null StringUtils.uncapitalize("")    = "" StringUtils.uncapitalize("Cat") = "cat" StringUtils.uncapitalize("CAT") = "cAT" </pre>
 * @param str the String to uncapitalize, may be null
 * @return the uncapitalized String, {@code null} if null String input
 * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)
 * @see #capitalize(String)
 * @since 2.0
 */
//
/** 
 * <p>Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.</p> <ul> <li>Upper case character converts to Lower case</li> <li>Title case character converts to Lower case</li> <li>Lower case character converts to Upper case</li> </ul> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#swapCase(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.swapCase(null)                 = null StringUtils.swapCase("")                   = "" StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone" </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer performs a word based algorithm. If you only use ASCII, you will notice no change. That functionality is available in org.apache.commons.lang3.text.WordUtils.</p>
 * @param str  the String to swap case, may be null
 * @return the changed String, {@code null} if null String input
 */
//
//
/** 
 * <p>Counts how many times the substring appears in the larger string.</p> <p>A  {@code null} or empty ("") String input returns {@code 0}.</p> <pre> StringUtils.countMatches(null, *)       = 0 StringUtils.countMatches("", *)         = 0 StringUtils.countMatches("abba", null)  = 0 StringUtils.countMatches("abba", "")    = 0 StringUtils.countMatches("abba", "a")   = 2 StringUtils.countMatches("abba", "ab")  = 1 StringUtils.countMatches("abba", "xxx") = 0 </pre>
 * @param str  the CharSequence to check, may be null
 * @param sub  the substring to count, may be null
 * @return the number of occurrences, 0 if either CharSequence is {@code null}
 * @since 3.0 Changed signature from countMatches(String, String) to countMatches(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains only Unicode letters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAlpha(null)   = false StringUtils.isAlpha("")     = false StringUtils.isAlpha("  ")   = false StringUtils.isAlpha("abc")  = true StringUtils.isAlpha("ab2c") = false StringUtils.isAlpha("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters, and is non-null
 * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters and space (' ').</p> <p> {@code null} will return {@code false}An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAlphaSpace(null)   = false StringUtils.isAlphaSpace("")     = true StringUtils.isAlphaSpace("  ")   = true StringUtils.isAlphaSpace("abc")  = true StringUtils.isAlphaSpace("ab c") = true StringUtils.isAlphaSpace("ab2c") = false StringUtils.isAlphaSpace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters and space,and is non-null
 * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters or digits.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAlphanumeric(null)   = false StringUtils.isAlphanumeric("")     = false StringUtils.isAlphanumeric("  ")   = false StringUtils.isAlphanumeric("abc")  = true StringUtils.isAlphanumeric("ab c") = false StringUtils.isAlphanumeric("ab2c") = true StringUtils.isAlphanumeric("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters or digits,and is non-null
 * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters, digits or space ( {@code ' '}).</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAlphanumericSpace(null)   = false StringUtils.isAlphanumericSpace("")     = true StringUtils.isAlphanumericSpace("  ")   = true StringUtils.isAlphanumericSpace("abc")  = true StringUtils.isAlphanumericSpace("ab c") = true StringUtils.isAlphanumericSpace("ab2c") = true StringUtils.isAlphanumericSpace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters, digits or space,and is non-null
 * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only ASCII printable characters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAsciiPrintable(null)     = false StringUtils.isAsciiPrintable("")       = true StringUtils.isAsciiPrintable(" ")      = true StringUtils.isAsciiPrintable("Ceki")   = true StringUtils.isAsciiPrintable("ab2c")   = true StringUtils.isAsciiPrintable("!ab-c~") = true StringUtils.isAsciiPrintable("\u0020") = true StringUtils.isAsciiPrintable("\u0021") = true StringUtils.isAsciiPrintable("\u007e") = true StringUtils.isAsciiPrintable("\u007f") = false StringUtils.isAsciiPrintable("Ceki G\u00fclc\u00fc") = false </pre>
 * @param cs the CharSequence to check, may be null
 * @return {@code true} if every character is in the range32 thru 126
 * @since 2.1
 * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode digits. A decimal point is not a Unicode digit and returns false.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <p>Note that the method does not allow for a leading sign, either positive or negative. Also, if a String passes the numeric test, it may still generate a NumberFormatException when parsed by Integer.parseInt or Long.parseLong, e.g. if the value is outside the range for int or long respectively.</p> <pre> StringUtils.isNumeric(null)   = false StringUtils.isNumeric("")     = false StringUtils.isNumeric("  ")   = false StringUtils.isNumeric("123")  = true StringUtils.isNumeric("12 3") = false StringUtils.isNumeric("ab2c") = false StringUtils.isNumeric("12-3") = false StringUtils.isNumeric("12.3") = false StringUtils.isNumeric("-123") = false StringUtils.isNumeric("+123") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains digits, and is non-null
 * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode digits or space ( {@code ' '}). A decimal point is not a Unicode digit and returns false.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isNumericSpace(null)   = false StringUtils.isNumericSpace("")     = true StringUtils.isNumericSpace("  ")   = true StringUtils.isNumericSpace("123")  = true StringUtils.isNumericSpace("12 3") = true StringUtils.isNumericSpace("ab2c") = false StringUtils.isNumericSpace("12-3") = false StringUtils.isNumericSpace("12.3") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains digits or space,and is non-null
 * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only whitespace.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isWhitespace(null)   = false StringUtils.isWhitespace("")     = true StringUtils.isWhitespace("  ")   = true StringUtils.isWhitespace("abc")  = false StringUtils.isWhitespace("ab2c") = false StringUtils.isWhitespace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains whitespace, and is non-null
 * @since 2.0
 * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only lowercase characters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAllLowerCase(null)   = false StringUtils.isAllLowerCase("")     = false StringUtils.isAllLowerCase("  ")   = false StringUtils.isAllLowerCase("abc")  = true StringUtils.isAllLowerCase("abC") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains lowercase characters, and is non-null
 * @since 2.5
 * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only uppercase characters.</p> <p> {@code null} will return {@code false}. An empty String (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAllUpperCase(null)   = false StringUtils.isAllUpperCase("")     = false StringUtils.isAllUpperCase("  ")   = false StringUtils.isAllUpperCase("ABC")  = true StringUtils.isAllUpperCase("aBC") = false </pre>
 * @param cs the CharSequence to check, may be null
 * @return {@code true} if only contains uppercase characters, and is non-null
 * @since 2.5
 * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)
 */
//
//
/** 
 * <p>Returns either the passed in String, or if the String is  {@code null}, an empty String ("").</p> <pre> StringUtils.defaultString(null)  = "" StringUtils.defaultString("")    = "" StringUtils.defaultString("bat") = "bat" </pre>
 * @see ObjectUtils#toString(Object)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @return the passed in String, or the empty String if itwas  {@code null}
 */
/** 
 * <p>Returns either the passed in String, or if the String is {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultString(null, "NULL")  = "NULL" StringUtils.defaultString("", "NULL")    = "" StringUtils.defaultString("bat", "NULL") = "bat" </pre>
 * @see ObjectUtils#toString(Object,String)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @param defaultStr  the default String to returnif the input is  {@code null}, may be null
 * @return the passed in String, or the default if it was {@code null}
 */
/** 
 * <p>Returns either the passed in CharSequence, or if the CharSequence is whitespace, empty ("") or  {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultIfBlank(null, "NULL")  = "NULL" StringUtils.defaultIfBlank("", "NULL")    = "NULL" StringUtils.defaultIfBlank(" ", "NULL")   = "NULL" StringUtils.defaultIfBlank("bat", "NULL") = "bat" StringUtils.defaultIfBlank("", null)      = null </pre>
 * @param < T > the specific kind of CharSequence
 * @param str the CharSequence to check, may be null
 * @param defaultStr  the default CharSequence to returnif the input is whitespace, empty ("") or  {@code null}, may be null
 * @return the passed in CharSequence, or the default
 * @see StringUtils#defaultString(String,String)
 */
/** 
 * <p>Returns either the passed in CharSequence, or if the CharSequence is empty or  {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultIfEmpty(null, "NULL")  = "NULL" StringUtils.defaultIfEmpty("", "NULL")    = "NULL" StringUtils.defaultIfEmpty(" ", "NULL")   = " " StringUtils.defaultIfEmpty("bat", "NULL") = "bat" StringUtils.defaultIfEmpty("", null)      = null </pre>
 * @param < T > the specific kind of CharSequence
 * @param str  the CharSequence to check, may be null
 * @param defaultStr  the default CharSequence to returnif the input is empty ("") or  {@code null}, may be null
 * @return the passed in CharSequence, or the default
 * @see StringUtils#defaultString(String,String)
 */
//
//
/** 
 * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A  {@code null} String returns {@code null}.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse("")    = "" StringUtils.reverse("bat") = "tab" </pre>
 * @param str  the String to reverse, may be null
 * @return the reversed String, {@code null} if null String input
 */
/** 
 * <p>Reverses a String that is delimited by a specific character.</p> <p>The Strings between the delimiters are not reversed. Thus java.lang.String becomes String.lang.java (if the delimiter is  {@code '.'}).</p> <pre> StringUtils.reverseDelimited(null, *)      = null StringUtils.reverseDelimited("", *)        = "" StringUtils.reverseDelimited("a.b.c", 'x') = "a.b.c" StringUtils.reverseDelimited("a.b.c", ".") = "c.b.a" </pre>
 * @param str  the String to reverse, may be null
 * @param separatorChar  the separator character to use
 * @return the reversed String, {@code null} if null String input
 * @since 2.0
 */
//
//
//
//
/** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "Now is the time for..."</p> <p>Specifically: <ul> <li>If  {@code str} is less than {@code maxWidth} characterslong, return it.</li> <li>Else abbreviate it to  {@code (substring(str, 0, max-3) + "...")}.</li> <li>If  {@code maxWidth} is less than {@code 4}, throw an {@code IllegalArgumentException}.</li> <li>In no case will it return a String of length greater than {@code maxWidth}.</li> </ul> </p> <pre> StringUtils.abbreviate(null, *)      = null StringUtils.abbreviate("", 4)        = "" StringUtils.abbreviate("abcdefg", 6) = "abc..." StringUtils.abbreviate("abcdefg", 7) = "abcdefg" StringUtils.abbreviate("abcdefg", 8) = "abcdefg" StringUtils.abbreviate("abcdefg", 4) = "a..." StringUtils.abbreviate("abcdefg", 3) = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, {@code null} if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */
/** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "...is the time for..."</p> <p>Works like  {@code abbreviate(String, int)}, but allows you to specify a "left edge" offset.  Note that this left edge is not necessarily going to be the leftmost character in the result, or the first character following the ellipses, but it will appear somewhere in the result. <p>In no case will it return a String of length greater than {@code maxWidth}.</p> <pre> StringUtils.abbreviate(null, *, *)                = null StringUtils.abbreviate("", 0, 4)                  = "" StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..." StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..." StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param offset  left edge of source String
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, {@code null} if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */
/** 
 * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.</p> <p>This abbreviation only occurs if the following criteria is met: <ul> <li>Neither the String for abbreviation nor the replacement String are null or empty </li> <li>The length to truncate to is less than the length of the supplied String</li> <li>The length to truncate to is greater than 0</li> <li>The abbreviated String will have enough room for the length supplied replacement String and the first and last characters of the supplied String for abbreviation</li> </ul> Otherwise, the returned String will be the same as the supplied String for abbreviation. </p> <pre> StringUtils.abbreviateMiddle(null, null, 0)      = null StringUtils.abbreviateMiddle("abc", null, 0)      = "abc" StringUtils.abbreviateMiddle("abc", ".", 0)      = "abc" StringUtils.abbreviateMiddle("abc", ".", 3)      = "abc" StringUtils.abbreviateMiddle("abcdef", ".", 4)     = "ab.f" </pre>
 * @param str  the String to abbreviate, may be null
 * @param middle the String to replace the middle characters with, may be null
 * @param length the length to abbreviate {@code str} to.
 * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.
 * @since 2.5
 */
//
//
/** 
 * <p>Compares two Strings, and returns the portion where they differ. More precisely, return the remainder of the second String, starting from where it's different from the first. This means that  the difference between "abc" and "ab" is the empty String and not "c". </p> <p>For example, {@code difference("i am a machine", "i am a robot") -> "robot"}.</p> <pre> StringUtils.difference(null, null) = null StringUtils.difference("", "") = "" StringUtils.difference("", "abc") = "abc" StringUtils.difference("abc", "") = "" StringUtils.difference("abc", "abc") = "" StringUtils.difference("abc", "ab") = "" StringUtils.difference("ab", "abxyz") = "xyz" StringUtils.difference("abcde", "abxyz") = "xyz" StringUtils.difference("abcde", "xyz") = "xyz" </pre>
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return the portion of str2 where it differs from str1; returns theempty String if they are equal
 * @see #indexOfDifference(CharSequence,CharSequence)
 * @since 2.0
 */
/** 
 * <p>Compares two CharSequences, and returns the index at which the CharSequences begin to differ.</p> <p>For example, {@code indexOfDifference("i am a machine", "i am a robot") -> 7}</p> <pre> StringUtils.indexOfDifference(null, null) = -1 StringUtils.indexOfDifference("", "") = -1 StringUtils.indexOfDifference("", "abc") = 0 StringUtils.indexOfDifference("abc", "") = 0 StringUtils.indexOfDifference("abc", "abc") = -1 StringUtils.indexOfDifference("ab", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "xyz") = 0 </pre>
 * @param cs1  the first CharSequence, may be null
 * @param cs2  the second CharSequence, may be null
 * @return the index where cs1 and cs2 begin to differ; -1 if they are equal
 * @since 2.0
 * @since 3.0 Changed signature from indexOfDifference(String, String) toindexOfDifference(CharSequence, CharSequence)
 */
/** 
 * <p>Compares all CharSequences in an array and returns the index at which the CharSequences begin to differ.</p> <p>For example, <code>indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -> 7</code></p> <pre> StringUtils.indexOfDifference(null) = -1 StringUtils.indexOfDifference(new String[] {}) = -1 StringUtils.indexOfDifference(new String[] {"abc"}) = -1 StringUtils.indexOfDifference(new String[] {null, null}) = -1 StringUtils.indexOfDifference(new String[] {"", ""}) = -1 StringUtils.indexOfDifference(new String[] {"", null}) = 0 StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0 StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0 StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1 StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1 StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0 StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0 StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7 </pre>
 * @param css  array of CharSequences, entries may be null
 * @return the index where the strings begin to differ; -1 if they are all equal
 * @since 2.4
 * @since 3.0 Changed signature from indexOfDifference(String...) to indexOfDifference(CharSequence...)
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Compares all Strings in an array and returns the initial sequence of characters that is common to all of them.</p> <p>For example, <code>getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) -> "i am a "</code></p> <pre> StringUtils.getCommonPrefix(null) = "" StringUtils.getCommonPrefix(new String[] {}) = "" StringUtils.getCommonPrefix(new String[] {"abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {null, null}) = "" StringUtils.getCommonPrefix(new String[] {"", ""}) = "" StringUtils.getCommonPrefix(new String[] {"", null}) = "" StringUtils.getCommonPrefix(new String[] {"abc", null, null}) = "" StringUtils.getCommonPrefix(new String[] {null, null, "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"", "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"abc", ""}) = "" StringUtils.getCommonPrefix(new String[] {"abc", "abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {"abc", "a"}) = "a" StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}) = "" StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}) = "" StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) = "i am a " </pre>
 * @param strs  array of String objects, entries may be null
 * @return the initial sequence of characters that are common to all Stringsin the array; empty String if the array is null, the elements are all null or if there is no common prefix.
 * @since 2.4
 */
//
//
//
//
//
/** 
 * <p>Find the Levenshtein distance between two Strings.</p> <p>This is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).</p> <p>The previous implementation of the Levenshtein distance algorithm was from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p> <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError which can occur when my Java implementation is used with very large strings.<br> This implementation of the Levenshtein distance algorithm is from <a href="http://www.merriampark.com/ldjava.htm">http://www.merriampark.com/ldjava.htm</a></p> <pre> StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException StringUtils.getLevenshteinDistance("","")               = 0 StringUtils.getLevenshteinDistance("","a")              = 1 StringUtils.getLevenshteinDistance("aaapppp", "")       = 7 StringUtils.getLevenshteinDistance("frog", "fog")       = 1 StringUtils.getLevenshteinDistance("fly", "ant")        = 3 StringUtils.getLevenshteinDistance("elephant", "hippo") = 7 StringUtils.getLevenshteinDistance("hippo", "elephant") = 7 StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") = 8 StringUtils.getLevenshteinDistance("hello", "hallo")    = 1 </pre>
 * @param s  the first String, must not be null
 * @param t  the second String, must not be null
 * @return result distance
 * @throws IllegalArgumentException if either String input {@code null}
 * @since 3.0 Changed signature from getLevenshteinDistance(String, String) togetLevenshteinDistance(CharSequence, CharSequence)
 */
/* *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Find the Levenshtein distance between two Strings if it's less than or equal to a given  threshold.</p> <p>This is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).</p> <p>This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield and Chas Emerick's implementation of the Levenshtein distance algorithm from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p> <pre> StringUtils.getLevenshteinDistance(null, *, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, null, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, *, -1)               = IllegalArgumentException StringUtils.getLevenshteinDistance("","", 0)               = 0 StringUtils.getLevenshteinDistance("aaapppp", "", 8)       = 7 StringUtils.getLevenshteinDistance("aaapppp", "", 7)       = 7 StringUtils.getLevenshteinDistance("aaapppp", "", 6))      = -1 StringUtils.getLevenshteinDistance("elephant", "hippo", 7) = 7 StringUtils.getLevenshteinDistance("elephant", "hippo", 6) = -1 StringUtils.getLevenshteinDistance("hippo", "elephant", 7) = 7 StringUtils.getLevenshteinDistance("hippo", "elephant", 6) = -1 </pre>
 * @param s  the first String, must not be null
 * @param t  the second String, must not be null
 * @param threshold the target threshold, must not be negative
 * @return result distance, or {@code -1} if the distance would be greater than the threshold
 * @throws IllegalArgumentException if either String input {@code null} or negative threshold
 */
/* *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Check if a CharSequence starts with a specified prefix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.startsWith(null, null)      = true StringUtils.startsWith(null, "abc")     = false StringUtils.startsWith("abcdef", null)  = false StringUtils.startsWith("abcdef", "abc") = true StringUtils.startsWith("ABCDEF", "abc") = false </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @return {@code true} if the CharSequence starts with the prefix, case sensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from startsWith(String, String) to startsWith(CharSequence, CharSequence)
 */
/** 
 * <p>Case insensitive check if a CharSequence starts with a specified prefix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.startsWithIgnoreCase(null, null)      = true StringUtils.startsWithIgnoreCase(null, "abc")     = false StringUtils.startsWithIgnoreCase("abcdef", null)  = false StringUtils.startsWithIgnoreCase("abcdef", "abc") = true StringUtils.startsWithIgnoreCase("ABCDEF", "abc") = true </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @return {@code true} if the CharSequence starts with the prefix, case insensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from startsWithIgnoreCase(String, String) to startsWithIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Check if a CharSequence starts with a specified prefix (optionally case insensitive).</p>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @param ignoreCase indicates whether the compare should ignore case(case insensitive) or not.
 * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}
 */
/** 
 * <p>Check if a CharSequence starts with any of an array of specified strings.</p> <pre> StringUtils.startsWithAny(null, null)      = false StringUtils.startsWithAny(null, new String[] {"abc"})  = false StringUtils.startsWithAny("abcxyz", null)     = false StringUtils.startsWithAny("abcxyz", new String[] {""}) = false StringUtils.startsWithAny("abcxyz", new String[] {"abc"}) = true StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true </pre>
 * @param string  the CharSequence to check, may be null
 * @param searchStrings the CharSequences to find, may be null or empty
 * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, orboth  {@code null}
 * @since 2.5
 * @since 3.0 Changed signature from startsWithAny(String, String[]) to startsWithAny(CharSequence, CharSequence...)
 */
//
//
/** 
 * <p>Check if a CharSequence ends with a specified suffix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.endsWith(null, null)      = true StringUtils.endsWith(null, "def")     = false StringUtils.endsWith("abcdef", null)  = false StringUtils.endsWith("abcdef", "def") = true StringUtils.endsWith("ABCDEF", "def") = false StringUtils.endsWith("ABCDEF", "cde") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @return {@code true} if the CharSequence ends with the suffix, case sensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from endsWith(String, String) to endsWith(CharSequence, CharSequence)
 */
/** 
 * <p>Case insensitive check if a CharSequence ends with a specified suffix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.endsWithIgnoreCase(null, null)      = true StringUtils.endsWithIgnoreCase(null, "def")     = false StringUtils.endsWithIgnoreCase("abcdef", null)  = false StringUtils.endsWithIgnoreCase("abcdef", "def") = true StringUtils.endsWithIgnoreCase("ABCDEF", "def") = true StringUtils.endsWithIgnoreCase("ABCDEF", "cde") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @return {@code true} if the CharSequence ends with the suffix, case insensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from endsWithIgnoreCase(String, String) to endsWithIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Check if a CharSequence ends with a specified suffix (optionally case insensitive).</p>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @param ignoreCase indicates whether the compare should ignore case(case insensitive) or not.
 * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}
 */
/** 
 * <p> Similar to <a href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize -space</a> </p> <p> The function returns the argument string with whitespace normalized by using <code> {@link #trim(String)}</code> to remove leading and trailing whitespace and then replacing sequences of whitespace characters by a single space. </p> In XML Whitespace characters are the same as those allowed by the <a href="http://www.w3.org/TR/REC-xml/#NT-S">S</a> production, which is S ::= (#x20 | #x9 | #xD | #xA)+ <p> Java's regexp pattern \s defines whitespace as [ \t\n\x0B\f\r] <p> For reference: <ul> <li>\x0B = vertical tab</li> <li>\f = #xC = form feed</li> <li>#x20 = space</li> <li>#x9 = \t</li> <li>#xA = \n</li> <li>#xD = \r</li> </ul> </p> <p> The difference is that Java's whitespace includes vertical tab and form feed, which this functional will also normalize. Additionally <code> {@link #trim(String)}</code> removes control characters (char &lt;= 32) from both ends of this String. </p>
 * @see Pattern
 * @see #trim(String)
 * @see <a
     *      href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize-space</a>
 * @param str the source String to normalize whitespaces from, may be null
 * @return the modified string with whitespace normalized, {@code null} if null String input
 * @since 3.0
 */
/** 
 * <p>Check if a CharSequence ends with any of an array of specified strings.</p> <pre> StringUtils.endsWithAny(null, null)      = false StringUtils.endsWithAny(null, new String[] {"abc"})  = false StringUtils.endsWithAny("abcxyz", null)     = false StringUtils.endsWithAny("abcxyz", new String[] {""}) = true StringUtils.endsWithAny("abcxyz", new String[] {"xyz"}) = true StringUtils.endsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true </pre>
 * @param string  the CharSequence to check, may be null
 * @param searchStrings the CharSequences to find, may be null or empty
 * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, orboth  {@code null}
 * @since 3.0
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end in the suffix.
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param ignoreCase Indicates whether the compare should ignore case.
 * @param suffixes Additional suffixes that are valid terminators (optional).
 * @return A new String if suffix was appened, the same string otherwise.
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end with any the suffixes. <pre> StringUtils.appendIfMissing(null, null) = null StringUtils.appendIfMissing("abc", null) = "abc" StringUtils.appendIfMissing("", "xyz") = "xyz" StringUtils.appendIfMissing("abc", "xyz") = "abcxyz" StringUtils.appendIfMissing("abcxyz", "xyz") = "abcxyz" StringUtils.appendIfMissing("abcXYZ", "xyz") = "abcXYZxyz" </pre> <p>With additional suffixes,</p> <pre> StringUtils.appendIfMissing(null, null, null) = null StringUtils.appendIfMissing("abc", null, null) = "abc" StringUtils.appendIfMissing("", "xyz", null) = "xyz" StringUtils.appendIfMissing("abc", "xyz", new CharSequence[]{null}) = "abcxyz" StringUtils.appendIfMissing("abc", "xyz", "") = "abc" StringUtils.appendIfMissing("abc", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissing("abcxyz", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissing("abcmno", "xyz", "mno") = "abcmno" StringUtils.appendIfMissing("abcXYZ", "xyz", "mno") = "abcXYZxyz" StringUtils.appendIfMissing("abcMNO", "xyz", "mno") = "abcMNOxyz" </pre>
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param suffixes Additional suffixes that are valid terminators.
 * @return A new String if suffix was appened, the same string otherwise.
 * @since 3.2
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end, case insensitive, with any of the suffixes. <pre> StringUtils.appendIfMissingIgnoreCase(null, null) = null StringUtils.appendIfMissingIgnoreCase("abc", null) = "abc" StringUtils.appendIfMissingIgnoreCase("", "xyz") = "xyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz") = "abcXYZ" </pre> <p>With additional suffixes,</p> <pre> StringUtils.appendIfMissingIgnoreCase(null, null, null) = null StringUtils.appendIfMissingIgnoreCase("abc", null, null) = "abc" StringUtils.appendIfMissingIgnoreCase("", "xyz", null) = "xyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[]{null}) = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "") = "abc" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno") = "axyz" StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno") = "abcmno" StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno") = "abcXYZ" StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno") = "abcMNO" </pre>
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param suffixes Additional suffixes that are valid terminators.
 * @return A new String if suffix was appened, the same string otherwise.
 * @since 3.2
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes.
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param ignoreCase Indicates whether the compare should ignore case.
 * @param prefixes Additional prefixes that are valid (optional).
 * @return A new String if prefix was prepended, the same string otherwise.
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes. <pre> StringUtils.prependIfMissing(null, null) = null StringUtils.prependIfMissing("abc", null) = "abc" StringUtils.prependIfMissing("", "xyz") = "xyz" StringUtils.prependIfMissing("abc", "xyz") = "xyzabc" StringUtils.prependIfMissing("xyzabc", "xyz") = "xyzabc" StringUtils.prependIfMissing("XYZabc", "xyz") = "xyzXYZabc" </pre> <p>With additional prefixes,</p> <pre> StringUtils.prependIfMissing(null, null, null) = null StringUtils.prependIfMissing("abc", null, null) = "abc" StringUtils.prependIfMissing("", "xyz", null) = "xyz" StringUtils.prependIfMissing("abc", "xyz", new CharSequence[]{null}) = "xyzabc" StringUtils.prependIfMissing("abc", "xyz", "") = "abc" StringUtils.prependIfMissing("abc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissing("xyzabc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissing("mnoabc", "xyz", "mno") = "mnoabc" StringUtils.prependIfMissing("XYZabc", "xyz", "mno") = "xyzXYZabc" StringUtils.prependIfMissing("MNOabc", "xyz", "mno") = "xyzMNOabc" </pre>
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param prefixes Additional prefixes that are valid.
 * @return A new String if prefix was prepended, the same string otherwise.
 * @since 3.2
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start, case insensitive, with any of the prefixes. <pre> StringUtils.prependIfMissingIgnoreCase(null, null) = null StringUtils.prependIfMissingIgnoreCase("abc", null) = "abc" StringUtils.prependIfMissingIgnoreCase("", "xyz") = "xyz" StringUtils.prependIfMissingIgnoreCase("abc", "xyz") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz") = "XYZabc" </pre> <p>With additional prefixes,</p> <pre> StringUtils.prependIfMissingIgnoreCase(null, null, null) = null StringUtils.prependIfMissingIgnoreCase("abc", null, null) = "abc" StringUtils.prependIfMissingIgnoreCase("", "xyz", null) = "xyz" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[]{null}) = "xyzabc" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "") = "abc" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno") = "mnoabc" StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno") = "XYZabc" StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno") = "MNOabc" </pre>
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param prefixes Additional prefixes that are valid (optional).
 * @return A new String if prefix was prepended, the same string otherwise.
 * @since 3.2
 */
/** 
 * Converts a <code>byte[]</code> to a String using the specified character encoding.
 * @param bytes the byte array to read from
 * @param charsetName the encoding to use, if null then use the platform default
 * @return a new String
 * @throws UnsupportedEncodingException If the named charset is not supported
 * @throws NullPointerException if the input is null
 * @since 3.1
 */
RIGHT COMMENTS
/* *//** 
 * <p>Operations on  {@link java.lang.String} that are{@code null} safe.</p><ul> <li><b>IsEmpty/IsBlank</b> - checks if a String contains text</li> <li><b>Trim/Strip</b> - removes leading and trailing whitespace</li> <li><b>Equals</b> - compares two strings null-safe</li> <li><b>startsWith</b> - check if a String starts with a prefix null-safe</li> <li><b>endsWith</b> - check if a String ends with a suffix null-safe</li> <li><b>IndexOf/LastIndexOf/Contains</b> - null-safe index-of checks <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b> - index-of any of a set of Strings</li> <li><b>ContainsOnly/ContainsNone/ContainsAny</b> - does String contains only/none/any of these characters</li> <li><b>Substring/Left/Right/Mid</b> - null-safe substring extractions</li> <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b> - substring extraction relative to other strings</li> <li><b>Split/Join</b> - splits a String into an array of substrings and vice versa</li> <li><b>Remove/Delete</b> - removes part of a String</li> <li><b>Replace/Overlay</b> - Searches a String and replaces one String with another</li> <li><b>Chomp/Chop</b> - removes the last part of a String</li> <li><b>AppendIfMissing</b> - appends a suffix to the end of the String if not present</li> <li><b>PrependIfMissing</b> - prepends a prefix to the start of the String if not present</li> <li><b>LeftPad/RightPad/Center/Repeat</b> - pads a String</li> <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b> - changes the case of a String</li> <li><b>CountMatches</b> - counts the number of occurrences of one String in another</li> <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b> - checks the characters in a String</li> <li><b>DefaultString</b> - protects against a null input String</li> <li><b>Reverse/ReverseDelimited</b> - reverses a String</li> <li><b>Abbreviate</b> - abbreviates a string using ellipsis</li> <li><b>Difference</b> - compares Strings and reports on their differences</li> <li><b>LevenshteinDistance</b> - the number of changes needed to change one String into another</li> </ul> <p>The  {@code StringUtils} class defines certain words related toString handling.</p> <ul> <li>null -  {@code null}</li> <li>empty - a zero-length string ( {@code ""})</li> <li>space - the space character ( {@code ' '}, char 32)</li> <li>whitespace - the characters defined by  {@link Character#isWhitespace(char)}</li> <li>trim - the characters &lt;= 32 as in  {@link String#trim()}</li> </ul> <p> {@code StringUtils} handles {@code null} input Strings quietly.That is to say that a  {@code null} input will return {@code null}. Where a  {@code boolean} or {@code int} is being returneddetails vary by method.</p> <p>A side effect of the  {@code null} handling is that a{@code NullPointerException} should be considered a bug in{@code StringUtils}.</p> <p>Methods in this class give sample code to explain their operation. The symbol  {@code *} is used to indicate any input including {@code null}.</p> <p>#ThreadSafe#</p>
 * @see java.lang.String
 * @since 1.0
 * @version $Id$
 */
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * A String for a space character.
 * @since 3.2
 */
/** 
 * The empty String  {@code ""}.
 * @since 2.0
 */
/** 
 * A String for linefeed LF ("\n").
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 3.2
 */
/** 
 * A String for carriage return CR ("\r").
 * @see <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-3.html#jls-3.10.6">JLF: Escape Sequences
     *      for Character and String Literals</a>
 * @since 3.2
 */
/** 
 * Represents a failed index search.
 * @since 2.1
 */
/** 
 * <p>The maximum size to which the padding constant(s) can expand.</p>
 */
/** 
 * A regex pattern for recognizing blocks of whitespace characters. The apparent convolutedness of the pattern serves the purpose of ignoring "blocks" consisting of only a single space:  the pattern is used only to normalize whitespace, condensing "blocks" down to a single space, thus matching the same would likely cause a great many noop replacements.
 */
/** 
 * <p> {@code StringUtils} instances should NOT be constructed instandard programming. Instead, the class should be used as {@code StringUtils.trim(" foo ");}.</p> <p>This constructor is public to permit tools that require a JavaBean instance to operate.</p>
 */
//
//
/** 
 * <p>Checks if a CharSequence is empty ("") or null.</p> <pre> StringUtils.isEmpty(null)      = true StringUtils.isEmpty("")        = true StringUtils.isEmpty(" ")       = false StringUtils.isEmpty("bob")     = false StringUtils.isEmpty("  bob  ") = false </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer trims the CharSequence. That functionality is available in isBlank().</p>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is empty or null
 * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is not empty ("") and not null.</p> <pre> StringUtils.isNotEmpty(null)      = false StringUtils.isNotEmpty("")        = false StringUtils.isNotEmpty(" ")       = true StringUtils.isNotEmpty("bob")     = true StringUtils.isNotEmpty("  bob  ") = true </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is not empty and not null
 * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is whitespace, empty ("") or null.</p> <pre> StringUtils.isBlank(null)      = true StringUtils.isBlank("")        = true StringUtils.isBlank(" ")       = true StringUtils.isBlank("bob")     = false StringUtils.isBlank("  bob  ") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence is null, empty or whitespace
 * @since 2.0
 * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)
 */
/** 
 * <p>Checks if a CharSequence is not empty (""), not null and not whitespace only.</p> <pre> StringUtils.isNotBlank(null)      = false StringUtils.isNotBlank("")        = false StringUtils.isNotBlank(" ")       = false StringUtils.isNotBlank("bob")     = true StringUtils.isNotBlank("  bob  ") = true </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if the CharSequence isnot empty and not null and not whitespace
 * @since 2.0
 * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)
 */
//
//
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String, handling  {@code null} by returning{@code null}.</p> <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #strip(String)}.</p> <p>To trim your choice of characters, use the {@link #strip(String,String)} methods.</p><pre> StringUtils.trim(null)          = null StringUtils.trim("")            = "" StringUtils.trim("     ")       = "" StringUtils.trim("abc")         = "abc" StringUtils.trim("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed string, {@code null} if null String input
 */
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning  {@code null} if the String isempty ("") after the trim or if it is  {@code null}. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToNull(String)}.</p> <pre> StringUtils.trimToNull(null)          = null StringUtils.trimToNull("")            = null StringUtils.trimToNull("     ")       = null StringUtils.trimToNull("abc")         = "abc" StringUtils.trimToNull("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String,{@code null} if only chars &lt;= 32, empty or null String input
 * @since 2.0
 */
/** 
 * <p>Removes control characters (char &lt;= 32) from both ends of this String returning an empty String ("") if the String is empty ("") after the trim or if it is  {@code null}. <p>The String is trimmed using  {@link String#trim()}. Trim removes start and end characters &lt;= 32. To strip whitespace use  {@link #stripToEmpty(String)}.</p> <pre> StringUtils.trimToEmpty(null)          = "" StringUtils.trimToEmpty("")            = "" StringUtils.trimToEmpty("     ")       = "" StringUtils.trimToEmpty("abc")         = "abc" StringUtils.trimToEmpty("    abc    ") = "abc" </pre>
 * @param str  the String to be trimmed, may be null
 * @return the trimmed String, or an empty String if {@code null} input
 * @since 2.0
 */
//
//
/** 
 * <p>Strips whitespace from the start and end of a String.</p> <p>This is similar to  {@link #trim(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.strip(null)     = null StringUtils.strip("")       = "" StringUtils.strip("   ")    = "" StringUtils.strip("abc")    = "abc" StringUtils.strip("  abc")  = "abc" StringUtils.strip("abc  ")  = "abc" StringUtils.strip(" abc ")  = "abc" StringUtils.strip(" ab c ") = "ab c" </pre>
 * @param str  the String to remove whitespace from, may be null
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips whitespace from the start and end of a String  returning {@code null} if the String is empty ("") after the strip.</p><p>This is similar to  {@link #trimToNull(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToNull(null)     = null StringUtils.stripToNull("")       = null StringUtils.stripToNull("   ")    = null StringUtils.stripToNull("abc")    = "abc" StringUtils.stripToNull("  abc")  = "abc" StringUtils.stripToNull("abc  ")  = "abc" StringUtils.stripToNull(" abc ")  = "abc" StringUtils.stripToNull(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the stripped String,{@code null} if whitespace, empty or null String input
 * @since 2.0
 */
/** 
 * <p>Strips whitespace from the start and end of a String  returning an empty String if  {@code null} input.</p><p>This is similar to  {@link #trimToEmpty(String)} but removes whitespace.Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripToEmpty(null)     = "" StringUtils.stripToEmpty("")       = "" StringUtils.stripToEmpty("   ")    = "" StringUtils.stripToEmpty("abc")    = "abc" StringUtils.stripToEmpty("  abc")  = "abc" StringUtils.stripToEmpty("abc  ")  = "abc" StringUtils.stripToEmpty(" abc ")  = "abc" StringUtils.stripToEmpty(" ab c ") = "ab c" </pre>
 * @param str  the String to be stripped, may be null
 * @return the trimmed String, or an empty String if {@code null} input
 * @since 2.0
 */
/** 
 * <p>Strips any of a set of characters from the start and end of a String. This is similar to  {@link String#trim()} but allows the charactersto be stripped to be controlled.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}. Alternatively use  {@link #strip(String)}.</p> <pre> StringUtils.strip(null, *)          = null StringUtils.strip("", *)            = "" StringUtils.strip("abc", null)      = "abc" StringUtils.strip("  abc", null)    = "abc" StringUtils.strip("abc  ", null)    = "abc" StringUtils.strip(" abc ", null)    = "abc" StringUtils.strip("  abcyx", "xyz") = "  abc" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips any of a set of characters from the start of a String.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripStart(null, *)          = null StringUtils.stripStart("", *)            = "" StringUtils.stripStart("abc", "")        = "abc" StringUtils.stripStart("abc", null)      = "abc" StringUtils.stripStart("  abc", null)    = "abc" StringUtils.stripStart("abc  ", null)    = "abc  " StringUtils.stripStart(" abc ", null)    = "abc " StringUtils.stripStart("yxabc  ", "xyz") = "abc  " </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
/** 
 * <p>Strips any of a set of characters from the end of a String.</p> <p>A  {@code null} input String returns {@code null}. An empty string ("") input returns the empty string.</p> <p>If the stripChars String is  {@code null}, whitespace is stripped as defined by  {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripEnd(null, *)          = null StringUtils.stripEnd("", *)            = "" StringUtils.stripEnd("abc", "")        = "abc" StringUtils.stripEnd("abc", null)      = "abc" StringUtils.stripEnd("  abc", null)    = "  abc" StringUtils.stripEnd("abc  ", null)    = "abc" StringUtils.stripEnd(" abc ", null)    = " abc" StringUtils.stripEnd("  abcyx", "xyz") = "  abc" StringUtils.stripEnd("120.00", ".0")   = "12" </pre>
 * @param str  the String to remove characters from, may be null
 * @param stripChars  the set of characters to remove, null treated as whitespace
 * @return the stripped String, {@code null} if null String input
 */
//
//
/** 
 * <p>Strips whitespace from the start and end of every String in an array. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.</p><pre> StringUtils.stripAll(null)             = null StringUtils.stripAll([])               = [] StringUtils.stripAll(["abc", "  abc"]) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null])  = ["abc", null] </pre>
 * @param strs  the array to remove whitespace from, may be null
 * @return the stripped Strings, {@code null} if null array input
 */
/** 
 * <p>Strips any of a set of characters from the start and end of every String in an array.</p> Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>A new array is returned each time, except for length zero. A  {@code null} array will return {@code null}. An empty array will return itself. A  {@code null} array entry will be ignored.A  {@code null} stripChars will strip whitespace as defined by{@link Character#isWhitespace(char)}.</p> <pre> StringUtils.stripAll(null, *)                = null StringUtils.stripAll([], *)                  = [] StringUtils.stripAll(["abc", "  abc"], null) = ["abc", "abc"] StringUtils.stripAll(["abc  ", null], null)  = ["abc", null] StringUtils.stripAll(["abc  ", null], "yz")  = ["abc  ", null] StringUtils.stripAll(["yabcz", null], "yz")  = ["abc", null] </pre>
 * @param strs  the array to remove characters from, may be null
 * @param stripChars  the characters to remove, null treated as whitespace
 * @return the stripped Strings, {@code null} if null array input
 */
/** 
 * <p>Removes diacritics (~= accents) from a string. The case will not be altered.</p> <p>For instance, '&agrave;' will be replaced by 'a'.</p> <p>Note that ligatures will be left as is.</p> <pre> StringUtils.stripAccents(null)                = null StringUtils.stripAccents("")                  = "" StringUtils.stripAccents("control")           = "control" StringUtils.stripAccents("&eacute;clair")     = "eclair" </pre>
 * @param input String to be stripped
 * @return input text with diacritics removed
 * @since 3.0
 */
//
//
//
//
//
//
/** 
 * <p>Compares two CharSequences, returning  {@code true} if they representequal sequences of characters.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.equals(null, null)   = true StringUtils.equals(null, "abc")  = false StringUtils.equals("abc", null)  = false StringUtils.equals("abc", "abc") = true StringUtils.equals("abc", "ABC") = false </pre>
 * @see Object#equals(Object)
 * @param cs1  the first CharSequence, may be {@code null}
 * @param cs2  the second CharSequence, may be {@code null}
 * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
 * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
 */
/** 
 * <p>Compares two CharSequences, returning  {@code true} if they representequal sequences of characters, ignoring case.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered equal. Comparison is case insensitive.</p> <pre> StringUtils.equalsIgnoreCase(null, null)   = true StringUtils.equalsIgnoreCase(null, "abc")  = false StringUtils.equalsIgnoreCase("abc", null)  = false StringUtils.equalsIgnoreCase("abc", "abc") = true StringUtils.equalsIgnoreCase("abc", "ABC") = true </pre>
 * @param str1  the first CharSequence, may be null
 * @param str2  the second CharSequence, may be null
 * @return {@code true} if the CharSequence are equal, case insensitive, orboth  {@code null}
 * @since 3.0 Changed signature from equalsIgnoreCase(String, String) to equalsIgnoreCase(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code INDEX_NOT_FOUND (-1)}.</p> <pre> StringUtils.indexOf(null, *)         = -1 StringUtils.indexOf("", *)           = -1 StringUtils.indexOf("aabaabaa", 'a') = 0 StringUtils.indexOf("aabaabaa", 'b') = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return the first index of the search character,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, int) to indexOf(CharSequence, int)
 */
/** 
 * <p>Finds the first index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#indexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code (INDEX_NOT_FOUND) -1}. A negative start position is treated as zero. A start position greater than the string length returns  {@code -1}.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf("", *, *)            = -1 StringUtils.indexOf("aabaabaa", 'b', 0)  = 2 StringUtils.indexOf("aabaabaa", 'b', 3)  = 5 StringUtils.indexOf("aabaabaa", 'b', 9)  = -1 StringUtils.indexOf("aabaabaa", 'b', -1) = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search character (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, int, int) to indexOf(CharSequence, int, int)
 */
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.indexOf(null, *)          = -1 StringUtils.indexOf(*, null)          = -1 StringUtils.indexOf("", "")           = 0 StringUtils.indexOf("", *)            = -1 (except when * = "") StringUtils.indexOf("aabaabaa", "a")  = 0 StringUtils.indexOf("aabaabaa", "b")  = 2 StringUtils.indexOf("aabaabaa", "ab") = 1 StringUtils.indexOf("aabaabaa", "")   = 0 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, String) to indexOf(CharSequence, CharSequence)
 */
/** 
 * <p>Finds the first index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOf(null, *, *)          = -1 StringUtils.indexOf(*, null, *)          = -1 StringUtils.indexOf("", "", 0)           = 0 StringUtils.indexOf("", *, 0)            = -1 (except when * = "") StringUtils.indexOf("aabaabaa", "a", 0)  = 0 StringUtils.indexOf("aabaabaa", "b", 0)  = 2 StringUtils.indexOf("aabaabaa", "ab", 0) = 1 StringUtils.indexOf("aabaabaa", "b", 3)  = 5 StringUtils.indexOf("aabaabaa", "b", 9)  = -1 StringUtils.indexOf("aabaabaa", "b", -1) = 2 StringUtils.indexOf("aabaabaa", "", 2)   = 2 StringUtils.indexOf("abc", "", 9)        = 3 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search CharSequence (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from indexOf(String, String, int) to indexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the n-th index within a CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.ordinalIndexOf(null, *, *)          = -1 StringUtils.ordinalIndexOf(*, null, *)          = -1 StringUtils.ordinalIndexOf("", "", *)           = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 1)  = 0 StringUtils.ordinalIndexOf("aabaabaa", "a", 2)  = 1 StringUtils.ordinalIndexOf("aabaabaa", "b", 1)  = 2 StringUtils.ordinalIndexOf("aabaabaa", "b", 2)  = 5 StringUtils.ordinalIndexOf("aabaabaa", "ab", 1) = 1 StringUtils.ordinalIndexOf("aabaabaa", "ab", 2) = 4 StringUtils.ordinalIndexOf("aabaabaa", "", 1)   = 0 StringUtils.ordinalIndexOf("aabaabaa", "", 2)   = 0 </pre> <p>Note that 'head(CharSequence str, int n)' may be implemented as: </p> <pre> str.substring(0, lastOrdinalIndexOf(str, "\n", n)) </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th {@code searchStr} to find
 * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 * @since 2.1
 * @since 3.0 Changed signature from ordinalIndexOf(String, String, int) to ordinalIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the n-th index within a String, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th {@code searchStr} to find
 * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()
 * @return the n-th index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 */
//
/** 
 * <p>Case in-sensitive find of the first index within a CharSequence.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOfIgnoreCase(null, *)          = -1 StringUtils.indexOfIgnoreCase(*, null)          = -1 StringUtils.indexOfIgnoreCase("", "")           = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "a")  = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "b")  = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "ab") = 1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from indexOfIgnoreCase(String, String) to indexOfIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Case in-sensitive find of the first index within a CharSequence from the specified position.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position is treated as zero. An empty ("") search CharSequence always matches. A start position greater than the string length only matches an empty search CharSequence.</p> <pre> StringUtils.indexOfIgnoreCase(null, *, *)          = -1 StringUtils.indexOfIgnoreCase(*, null, *)          = -1 StringUtils.indexOfIgnoreCase("", "", 0)           = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "A", 0)  = 0 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 0)  = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0) = 1 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 3)  = 5 StringUtils.indexOfIgnoreCase("aabaabaa", "B", 9)  = -1 StringUtils.indexOfIgnoreCase("aabaabaa", "B", -1) = 2 StringUtils.indexOfIgnoreCase("aabaabaa", "", 2)   = 2 StringUtils.indexOfIgnoreCase("abc", "", 9)        = 3 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the first index of the search CharSequence (always &ge; startPos),-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from indexOfIgnoreCase(String, String, int) to indexOfIgnoreCase(CharSequence, CharSequence, int)
 */
//
//
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code -1}.</p> <pre> StringUtils.lastIndexOf(null, *)         = -1 StringUtils.lastIndexOf("", *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'a') = 7 StringUtils.lastIndexOf("aabaabaa", 'b') = 5 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return the last index of the search character,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, int) to lastIndexOf(CharSequence, int)
 */
/** 
 * <p>Finds the last index within a CharSequence from a start position, handling  {@code null}. This method uses  {@link String#lastIndexOf(int,int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code -1}. A negative start position returns  {@code -1}. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf("", *,  *)           = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 8)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', 4)  = 2 StringUtils.lastIndexOf("aabaabaa", 'b', 0)  = -1 StringUtils.lastIndexOf("aabaabaa", 'b', 9)  = 5 StringUtils.lastIndexOf("aabaabaa", 'b', -1) = -1 StringUtils.lastIndexOf("aabaabaa", 'a', 0)  = 0 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @param startPos  the start position
 * @return the last index of the search character (always &le; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, int, int) to lastIndexOf(CharSequence, int, int)
 */
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}.</p> <pre> StringUtils.lastIndexOf(null, *)          = -1 StringUtils.lastIndexOf(*, null)          = -1 StringUtils.lastIndexOf("", "")           = 0 StringUtils.lastIndexOf("aabaabaa", "a")  = 7 StringUtils.lastIndexOf("aabaabaa", "b")  = 5 StringUtils.lastIndexOf("aabaabaa", "ab") = 4 StringUtils.lastIndexOf("aabaabaa", "")   = 8 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return the last index of the search String,-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, String) to lastIndexOf(CharSequence, CharSequence)
 */
/** 
 * <p>Finds the n-th last index within a String, handling  {@code null}. This method uses  {@link String#lastIndexOf(String)}.</p> <p>A  {@code null} String will return {@code -1}.</p> <pre> StringUtils.lastOrdinalIndexOf(null, *, *)          = -1 StringUtils.lastOrdinalIndexOf(*, null, *)          = -1 StringUtils.lastOrdinalIndexOf("", "", *)           = 0 StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)  = 7 StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)  = 6 StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)  = 5 StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)  = 2 StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1) = 4 StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2) = 1 StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)   = 8 StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)   = 8 </pre> <p>Note that 'tail(CharSequence str, int n)' may be implemented as: </p> <pre> str.substring(lastOrdinalIndexOf(str, "\n", n) + 1) </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param ordinal  the n-th last {@code searchStr} to find
 * @return the n-th last index of the search CharSequence,{@code -1} ({@code INDEX_NOT_FOUND}) if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from lastOrdinalIndexOf(String, String, int) to lastOrdinalIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Finds the last index within a CharSequence, handling  {@code null}. This method uses  {@link String#lastIndexOf(String,int)} if possible.</p><p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOf(null, *, *)          = -1 StringUtils.lastIndexOf(*, null, *)          = -1 StringUtils.lastIndexOf("aabaabaa", "a", 8)  = 7 StringUtils.lastIndexOf("aabaabaa", "b", 8)  = 5 StringUtils.lastIndexOf("aabaabaa", "ab", 8) = 4 StringUtils.lastIndexOf("aabaabaa", "b", 9)  = 5 StringUtils.lastIndexOf("aabaabaa", "b", -1) = -1 StringUtils.lastIndexOf("aabaabaa", "a", 0)  = 0 StringUtils.lastIndexOf("aabaabaa", "b", 0)  = -1 StringUtils.lastIndexOf("aabaabaa", "b", 1)  = -1 StringUtils.lastIndexOf("aabaabaa", "b", 2)  = 2 StringUtils.lastIndexOf("aabaabaa", "ba", 2)  = -1 StringUtils.lastIndexOf("aabaabaa", "ba", 2)  = 2 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @param startPos  the start position, negative treated as zero
 * @return the last index of the search CharSequence (always &le; startPos),-1 if no match or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from lastIndexOf(String, String, int) to lastIndexOf(CharSequence, CharSequence, int)
 */
/** 
 * <p>Case in-sensitive find of the last index within a CharSequence.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string.</p> <pre> StringUtils.lastIndexOfIgnoreCase(null, *)          = -1 StringUtils.lastIndexOfIgnoreCase(*, null)          = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")  = 7 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB") = 4 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return the first index of the search CharSequence,-1 if no match or  {@code null} string input
 * @since 2.5
 * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String) to lastIndexOfIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Case in-sensitive find of the last index within a CharSequence from the specified position.</p> <p>A  {@code null} CharSequence will return {@code -1}. A negative start position returns  {@code -1}. An empty ("") search CharSequence always matches unless the start position is negative. A start position greater than the string length searches the whole string. The search starts at the startPos and works backwards; matches starting after the start position are ignored. </p> <pre> StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1 StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)  = 7 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8) = 4 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)  = 5 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1) = -1 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)  = 0 StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)  = -1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @param startPos  the start position
 * @return the last index of the search CharSequence (always &le; startPos),-1 if no match or  {@code null} input
 * @since 2.5
 * @since 3.0 Changed signature from lastIndexOfIgnoreCase(String, String, int) to lastIndexOfIgnoreCase(CharSequence, CharSequence, int)
 */
//
//
/** 
 * <p>Checks if CharSequence contains a search character, handling  {@code null}. This method uses  {@link String#indexOf(int)} if possible.</p><p>A  {@code null} or empty ("") CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *)    = false StringUtils.contains("", *)      = false StringUtils.contains("abc", 'a') = true StringUtils.contains("abc", 'z') = false </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChar  the character to find
 * @return true if the CharSequence contains the search character,false if not or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from contains(String, int) to contains(CharSequence, int)
 */
/** 
 * <p>Checks if CharSequence contains a search CharSequence, handling  {@code null}. This method uses  {@link String#indexOf(String)} if possible.</p><p>A  {@code null} CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *)     = false StringUtils.contains(*, null)     = false StringUtils.contains("", "")      = true StringUtils.contains("abc", "")   = true StringUtils.contains("abc", "a")  = true StringUtils.contains("abc", "z")  = false </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchSeq  the CharSequence to find, may be null
 * @return true if the CharSequence contains the search CharSequence,false if not or  {@code null} string input
 * @since 2.0
 * @since 3.0 Changed signature from contains(String, String) to contains(CharSequence, CharSequence)
 */
/** 
 * <p>Checks if CharSequence contains a search CharSequence irrespective of case, handling  {@code null}. Case-insensitivity is defined as by {@link String#equalsIgnoreCase(String)}. <p>A  {@code null} CharSequence will return {@code false}.</p> <pre> StringUtils.contains(null, *) = false StringUtils.contains(*, null) = false StringUtils.contains("", "") = true StringUtils.contains("abc", "") = true StringUtils.contains("abc", "a") = true StringUtils.contains("abc", "z") = false StringUtils.contains("abc", "A") = true StringUtils.contains("abc", "Z") = false </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStr  the CharSequence to find, may be null
 * @return true if the CharSequence contains the search CharSequence irrespective ofcase or false if not or  {@code null} string input
 * @since 3.0 Changed signature from containsIgnoreCase(String, String) to containsIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * Check whether the given CharSequence contains any whitespace characters.
 * @param seq the CharSequence to check (may be {@code null})
 * @return {@code true} if the CharSequence is not empty andcontains at least 1 whitespace character
 * @see java.lang.Character#isWhitespace
 * @since 3.0
 */
//
//
//
/** 
 * <p>Search a CharSequence to find the first index of any character in the given set of characters.</p> <p>A  {@code null} String will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.</p> <pre> StringUtils.indexOfAny(null, *)                = -1 StringUtils.indexOfAny("", *)                  = -1 StringUtils.indexOfAny(*, null)                = -1 StringUtils.indexOfAny(*, [])                  = -1 StringUtils.indexOfAny("zzabyycdxx",['z','a']) = 0 StringUtils.indexOfAny("zzabyycdxx",['b','y']) = 3 StringUtils.indexOfAny("aba", ['z'])           = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAny(String, char[]) to indexOfAny(CharSequence, char...)
 */
//
/** 
 * <p>Search a CharSequence to find the first index of any character in the given set of characters.</p> <p>A  {@code null} String will return {@code -1}. A  {@code null} search string will return {@code -1}.</p> <pre> StringUtils.indexOfAny(null, *)            = -1 StringUtils.indexOfAny("", *)              = -1 StringUtils.indexOfAny(*, null)            = -1 StringUtils.indexOfAny(*, "")              = -1 StringUtils.indexOfAny("zzabyycdxx", "za") = 0 StringUtils.indexOfAny("zzabyycdxx", "by") = 3 StringUtils.indexOfAny("aba","z")          = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAny(String, String) to indexOfAny(CharSequence, String)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains any character in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} or zero length search array will return {@code false}.</p> <pre> StringUtils.containsAny(null, *)                = false StringUtils.containsAny("", *)                  = false StringUtils.containsAny(*, null)                = false StringUtils.containsAny(*, [])                  = false StringUtils.containsAny("zzabyycdxx",['z','a']) = true StringUtils.containsAny("zzabyycdxx",['b','y']) = true StringUtils.containsAny("aba", ['z'])           = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the {@code true} if any of the chars are found,{@code false} if no match or null input
 * @since 2.4
 * @since 3.0 Changed signature from containsAny(String, char[]) to containsAny(CharSequence, char...)
 */
//
//
/** 
 * <p> Checks if the CharSequence contains any character in the given set of characters. </p> <p> A  {@code null} CharSequence will return {@code false}. A  {@code null} search CharSequence will return{@code false}. </p> <pre> StringUtils.containsAny(null, *)            = false StringUtils.containsAny("", *)              = false StringUtils.containsAny(*, null)            = false StringUtils.containsAny(*, "")              = false StringUtils.containsAny("zzabyycdxx", "za") = true StringUtils.containsAny("zzabyycdxx", "by") = true StringUtils.containsAny("aba","z")          = false </pre>
 * @param cs the CharSequence to check, may be null
 * @param searchChars the chars to search for, may be null
 * @return the {@code true} if any of the chars are found, {@code false} if no match or null input
 * @since 2.4
 * @since 3.0 Changed signature from containsAny(String, String) to containsAny(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Searches a CharSequence to find the first index of any character not in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}.</p> <pre> StringUtils.indexOfAnyBut(null, *)                              = -1 StringUtils.indexOfAnyBut("", *)                                = -1 StringUtils.indexOfAnyBut(*, null)                              = -1 StringUtils.indexOfAnyBut(*, [])                                = -1 StringUtils.indexOfAnyBut("zzabyycdxx", new char[] {'z', 'a'} ) = 3 StringUtils.indexOfAnyBut("aba", new char[] {'z'} )             = 0 StringUtils.indexOfAnyBut("aba", new char[] {'a', 'b'} )        = -1 </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAnyBut(String, char[]) to indexOfAnyBut(CharSequence, char...)
 */
/** 
 * <p>Search a CharSequence to find the first index of any character not in the given set of characters.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or empty search string will return {@code -1}.</p> <pre> StringUtils.indexOfAnyBut(null, *)            = -1 StringUtils.indexOfAnyBut("", *)              = -1 StringUtils.indexOfAnyBut(*, null)            = -1 StringUtils.indexOfAnyBut(*, "")              = -1 StringUtils.indexOfAnyBut("zzabyycdxx", "za") = 3 StringUtils.indexOfAnyBut("zzabyycdxx", "")   = -1 StringUtils.indexOfAnyBut("aba","ab")         = -1 </pre>
 * @param seq  the CharSequence to check, may be null
 * @param searchChars  the chars to search for, may be null
 * @return the index of any of the chars, -1 if no match or null input
 * @since 2.0
 * @since 3.0 Changed signature from indexOfAnyBut(String, String) to indexOfAnyBut(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains only certain characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} valid character array will return {@code false}. An empty CharSequence (length()=0) always returns  {@code true}.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", '')      = false StringUtils.containsOnly("abab", 'abc') = true StringUtils.containsOnly("ab1", 'abc')  = false StringUtils.containsOnly("abz", 'abc')  = false </pre>
 * @param cs  the String to check, may be null
 * @param valid  an array of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 * @since 3.0 Changed signature from containsOnly(String, char[]) to containsOnly(CharSequence, char...)
 */
//
/** 
 * <p>Checks if the CharSequence contains only certain characters.</p> <p>A  {@code null} CharSequence will return {@code false}. A  {@code null} valid character String will return {@code false}. An empty String (length()=0) always returns  {@code true}.</p> <pre> StringUtils.containsOnly(null, *)       = false StringUtils.containsOnly(*, null)       = false StringUtils.containsOnly("", *)         = true StringUtils.containsOnly("ab", "")      = false StringUtils.containsOnly("abab", "abc") = true StringUtils.containsOnly("ab1", "abc")  = false StringUtils.containsOnly("abz", "abc")  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param validChars  a String of valid chars, may be null
 * @return true if it only contains valid chars and is non-null
 * @since 2.0
 * @since 3.0 Changed signature from containsOnly(String, String) to containsOnly(CharSequence, String)
 */
//
//
/** 
 * <p>Checks that the CharSequence does not contain certain characters.</p> <p>A  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty CharSequence (length()=0) always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", '')      = true StringUtils.containsNone("abab", 'xyz') = true StringUtils.containsNone("ab1", 'xyz')  = true StringUtils.containsNone("abz", 'xyz')  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param searchChars  an array of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 * @since 3.0 Changed signature from containsNone(String, char[]) to containsNone(CharSequence, char...)
 */
//
//
/** 
 * <p>Checks that the CharSequence does not contain certain characters.</p> <p>A  {@code null} CharSequence will return {@code true}. A  {@code null} invalid character array will return {@code true}. An empty String ("") always returns true.</p> <pre> StringUtils.containsNone(null, *)       = true StringUtils.containsNone(*, null)       = true StringUtils.containsNone("", *)         = true StringUtils.containsNone("ab", "")      = true StringUtils.containsNone("abab", "xyz") = true StringUtils.containsNone("ab1", "xyz")  = true StringUtils.containsNone("abz", "xyz")  = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @param invalidChars  a String of invalid chars, may be null
 * @return true if it contains none of the invalid chars, or is null
 * @since 2.0
 * @since 3.0 Changed signature from containsNone(String, String) to containsNone(CharSequence, String)
 */
//
//
/** 
 * <p>Find the first index of any of a set of potential substrings.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} or zero length search array will return {@code -1}. A  {@code null} search array entry will be ignored, but a searcharray containing "" will return  {@code 0} if {@code str} is notnull. This method uses  {@link String#indexOf(String)} if possible.</p><pre> StringUtils.indexOfAny(null, *)                     = -1 StringUtils.indexOfAny(*, null)                     = -1 StringUtils.indexOfAny(*, [])                       = -1 StringUtils.indexOfAny("zzabyycdxx", ["ab","cd"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["cd","ab"])   = 2 StringUtils.indexOfAny("zzabyycdxx", ["mn","op"])   = -1 StringUtils.indexOfAny("zzabyycdxx", ["zab","aby"]) = 1 StringUtils.indexOfAny("zzabyycdxx", [""])          = 0 StringUtils.indexOfAny("", [""])                    = 0 StringUtils.indexOfAny("", ["a"])                   = -1 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStrs  the CharSequences to search for, may be null
 * @return the first index of any of the searchStrs in str, -1 if no match
 * @since 3.0 Changed signature from indexOfAny(String, String[]) to indexOfAny(CharSequence, CharSequence...)
 */
//
/** 
 * <p>Find the latest index of any of a set of potential substrings.</p> <p>A  {@code null} CharSequence will return {@code -1}. A  {@code null} search array will return {@code -1}. A  {@code null} or zero length search array entry will be ignored,but a search array containing "" will return the length of  {@code str}if  {@code str} is not null. This method uses {@link String#indexOf(String)} if possible</p><pre> StringUtils.lastIndexOfAny(null, *)                   = -1 StringUtils.lastIndexOfAny(*, null)                   = -1 StringUtils.lastIndexOfAny(*, [])                     = -1 StringUtils.lastIndexOfAny(*, [null])                 = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["ab","cd"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["cd","ab"]) = 6 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn","op"]) = -1 StringUtils.lastIndexOfAny("zzabyycdxx", ["mn",""])   = 10 </pre>
 * @param str  the CharSequence to check, may be null
 * @param searchStrs  the CharSequences to search for, may be null
 * @return the last index of any of the CharSequences, -1 if no match
 * @since 3.0 Changed signature from lastIndexOfAny(String, String[]) to lastIndexOfAny(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start  {@code n}characters from the end of the String.</p> <p>A  {@code null} String will return {@code null}. An empty ("") String will return "".</p> <pre> StringUtils.substring(null, *)   = null StringUtils.substring("", *)     = "" StringUtils.substring("abc", 0)  = "abc" StringUtils.substring("abc", 2)  = "c" StringUtils.substring("abc", 4)  = "" StringUtils.substring("abc", -2) = "bc" StringUtils.substring("abc", -4) = "abc" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @return substring from start position, {@code null} if null String input
 */
//
//
/** 
 * <p>Gets a substring from the specified String avoiding exceptions.</p> <p>A negative start position can be used to start/end  {@code n}characters from the end of the String.</p> <p>The returned substring starts with the character in the  {@code start}position and ends before the  {@code end} position. All position counting iszero-based -- i.e., to start at the beginning of the string use {@code start = 0}. Negative start and end positions can be used to specify offsets relative to the end of the String.</p> <p>If  {@code start} is not strictly to the left of {@code end}, "" is returned.</p> <pre> StringUtils.substring(null, *, *)    = null StringUtils.substring("", * ,  *)    = ""; StringUtils.substring("abc", 0, 2)   = "ab" StringUtils.substring("abc", 2, 0)   = "" StringUtils.substring("abc", 2, 4)   = "c" StringUtils.substring("abc", 4, 6)   = "" StringUtils.substring("abc", 2, 2)   = "" StringUtils.substring("abc", -2, -1) = "b" StringUtils.substring("abc", -4, 2)  = "ab" </pre>
 * @param str  the String to get the substring from, may be null
 * @param start  the position to start from, negative meanscount back from the end of the String by this many characters
 * @param end  the position to end at (exclusive), negative meanscount back from the end of the String by this many characters
 * @return substring from start position to end position,{@code null} if null String input
 */
//
//
//
//
//
//
//
/** 
 * <p>Gets the leftmost  {@code len} characters of a String.</p><p>If  {@code len} characters are not available, or theString is  {@code null}, the String will be returned without an exception. An empty String is returned if len is negative.</p> <pre> StringUtils.left(null, *)    = null StringUtils.left(*, -ve)     = "" StringUtils.left("", *)      = "" StringUtils.left("abc", 0)   = "" StringUtils.left("abc", 2)   = "ab" StringUtils.left("abc", 4)   = "abc" </pre>
 * @param str  the String to get the leftmost characters from, may be null
 * @param len  the length of the required String
 * @return the leftmost characters, {@code null} if null String input
 */
/** 
 * <p>Gets the rightmost  {@code len} characters of a String.</p><p>If  {@code len} characters are not available, or the Stringis  {@code null}, the String will be returned without an an exception. An empty String is returned if len is negative.</p> <pre> StringUtils.right(null, *)    = null StringUtils.right(*, -ve)     = "" StringUtils.right("", *)      = "" StringUtils.right("abc", 0)   = "" StringUtils.right("abc", 2)   = "bc" StringUtils.right("abc", 4)   = "abc" </pre>
 * @param str  the String to get the rightmost characters from, may be null
 * @param len  the length of the required String
 * @return the rightmost characters, {@code null} if null String input
 */
/** 
 * <p>Gets  {@code len} characters from the middle of a String.</p><p>If  {@code len} characters are not available, the remainderof the String will be returned without an exception. If the String is  {@code null},  {@code null} will be returned.An empty String is returned if len is negative or exceeds the length of  {@code str}.</p> <pre> StringUtils.mid(null, *, *)    = null StringUtils.mid(*, *, -ve)     = "" StringUtils.mid("", 0, *)      = "" StringUtils.mid("abc", 0, 2)   = "ab" StringUtils.mid("abc", 0, 4)   = "abc" StringUtils.mid("abc", 2, 4)   = "c" StringUtils.mid("abc", 4, 2)   = "" StringUtils.mid("abc", -2, 2)  = "ab" </pre>
 * @param str  the String to get the characters from, may be null
 * @param pos  the position to start from, negative treated as zero
 * @param len  the length of the required String
 * @return the middle characters, {@code null} if null String input
 */
//
//
/** 
 * <p>Gets the substring before the first occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. A  {@code null} separator will return the input string.</p><p>If nothing is found, the string input is returned.</p> <pre> StringUtils.substringBefore(null, *)      = null StringUtils.substringBefore("", *)        = "" StringUtils.substringBefore("abc", "a")   = "" StringUtils.substringBefore("abcba", "b") = "a" StringUtils.substringBefore("abc", "c")   = "ab" StringUtils.substringBefore("abc", "d")   = "abc" StringUtils.substringBefore("abc", "")    = "" StringUtils.substringBefore("abc", null)  = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the first occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring after the first occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. A  {@code null} separator will return the empty string if theinput string is not  {@code null}.</p> <p>If nothing is found, the empty string is returned.</p> <pre> StringUtils.substringAfter(null, *)      = null StringUtils.substringAfter("", *)        = "" StringUtils.substringAfter(*, null)      = "" StringUtils.substringAfter("abc", "a")   = "bc" StringUtils.substringAfter("abcba", "b") = "cba" StringUtils.substringAfter("abc", "c")   = "" StringUtils.substringAfter("abc", "d")   = "" StringUtils.substringAfter("abc", "")    = "abc" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the first occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring before the last occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. An empty or  {@code null} separator will return the input string.</p><p>If nothing is found, the string input is returned.</p> <pre> StringUtils.substringBeforeLast(null, *)      = null StringUtils.substringBeforeLast("", *)        = "" StringUtils.substringBeforeLast("abcba", "b") = "abc" StringUtils.substringBeforeLast("abc", "c")   = "ab" StringUtils.substringBeforeLast("a", "a")     = "" StringUtils.substringBeforeLast("a", "z")     = "a" StringUtils.substringBeforeLast("a", null)    = "a" StringUtils.substringBeforeLast("a", "")      = "a" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring before the last occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Gets the substring after the last occurrence of a separator. The separator is not returned.</p> <p>A  {@code null} string input will return {@code null}. An empty ("") string input will return the empty string. An empty or  {@code null} separator will return the empty string ifthe input string is not  {@code null}.</p> <p>If nothing is found, the empty string is returned.</p> <pre> StringUtils.substringAfterLast(null, *)      = null StringUtils.substringAfterLast("", *)        = "" StringUtils.substringAfterLast(*, "")        = "" StringUtils.substringAfterLast(*, null)      = "" StringUtils.substringAfterLast("abc", "a")   = "bc" StringUtils.substringAfterLast("abcba", "b") = "a" StringUtils.substringAfterLast("abc", "c")   = "" StringUtils.substringAfterLast("a", "a")     = "" StringUtils.substringAfterLast("a", "z")     = "" </pre>
 * @param str  the String to get a substring from, may be null
 * @param separator  the String to search for, may be null
 * @return the substring after the last occurrence of the separator,{@code null} if null String input
 * @since 2.0
 */
//
//
/** 
 * <p>Gets the String that is nested in between two instances of the same String.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} tag returns {@code null}.</p> <pre> StringUtils.substringBetween(null, *)            = null StringUtils.substringBetween("", "")             = "" StringUtils.substringBetween("", "tag")          = null StringUtils.substringBetween("tagabctag", null)  = null StringUtils.substringBetween("tagabctag", "")    = "" StringUtils.substringBetween("tagabctag", "tag") = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param tag  the String before and after the substring, may be null
 * @return the substring, {@code null} if no match
 * @since 2.0
 */
/** 
 * <p>Gets the String that is nested in between two Strings. Only the first match is returned.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty ("") open and close returns an empty string.</p> <pre> StringUtils.substringBetween("wx[b]yz", "[", "]") = "b" StringUtils.substringBetween(null, *, *)          = null StringUtils.substringBetween(*, null, *)          = null StringUtils.substringBetween(*, *, null)          = null StringUtils.substringBetween("", "", "")          = "" StringUtils.substringBetween("", "", "]")         = null StringUtils.substringBetween("", "[", "]")        = null StringUtils.substringBetween("yabcz", "", "")     = "" StringUtils.substringBetween("yabcz", "y", "z")   = "abc" StringUtils.substringBetween("yabczyabcz", "y", "z")   = "abc" </pre>
 * @param str  the String containing the substring, may be null
 * @param open  the String before the substring, may be null
 * @param close  the String after the substring, may be null
 * @return the substring, {@code null} if no match
 * @since 2.0
 */
/** 
 * <p>Searches a String for substrings delimited by a start and end tag, returning all matching substrings in an array.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} open/close returns {@code null} (no match).An empty ("") open/close returns  {@code null} (no match).</p><pre> StringUtils.substringsBetween("[a][b][c]", "[", "]") = ["a","b","c"] StringUtils.substringsBetween(null, *, *)            = null StringUtils.substringsBetween(*, null, *)            = null StringUtils.substringsBetween(*, *, null)            = null StringUtils.substringsBetween("", "[", "]")          = [] </pre>
 * @param str  the String containing the substrings, null returns null, empty returns empty
 * @param open  the String identifying the start of the substring, empty returns null
 * @param close  the String identifying the end of the substring, empty returns null
 * @return a String Array of substrings, or {@code null} if no match
 * @since 2.3
 */
//
//
//
//
/** 
 * <p>Splits the provided text into an array, using whitespace as the separator. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.split(null)       = null StringUtils.split("")         = [] StringUtils.split("abc def")  = ["abc", "def"] StringUtils.split("abc  def") = ["abc", "def"] StringUtils.split(" abc ")    = ["abc"] </pre>
 * @param str  the String to parse, may be null
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array, separator specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("a.b.c", '.')    = ["a", "b", "c"] StringUtils.split("a..b.c", '.')   = ["a", "b", "c"] StringUtils.split("a:b:c", '.')    = ["a:b:c"] StringUtils.split("a b c", ' ')    = ["a", "b", "c"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChar  the character used as the delimiter
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Splits the provided text into an array, separators specified. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><pre> StringUtils.split(null, *)         = null StringUtils.split("", *)           = [] StringUtils.split("abc def", null) = ["abc", "def"] StringUtils.split("abc def", " ")  = ["abc", "def"] StringUtils.split("abc  def", " ") = ["abc", "def"] StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array with a maximum length, separators specified.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><p>If more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).</p> <pre> StringUtils.split(null, *, *)            = null StringUtils.split("", *, *)              = [] StringUtils.split("ab cd ef", null, 0)   = ["ab", "cd", "ef"] StringUtils.split("ab   cd ef", null, 0) = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, {@code null} if null String input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified.</p> <p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparator(null, *)               = null StringUtils.splitByWholeSeparator("", *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String was input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.</p><p>The separator(s) will not be included in the returned String array. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparator(null, *, *)               = null StringUtils.splitByWholeSeparator("", *, *)                 = [] StringUtils.splitByWholeSeparator("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab   de fg", null, 0)    = ["ab", "de", "fg"] StringUtils.splitByWholeSeparator("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparator("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, {@code null} if null String was input
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. </p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":")       = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-") = ["ab", "cd", "ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String was input
 * @since 2.4
 */
/** 
 * <p>Splits the provided text into an array, separator string specified. Returns a maximum of  {@code max} substrings.</p><p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separator splits on whitespace.</p><pre> StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null StringUtils.splitByWholeSeparatorPreserveAllTokens("", *, *)                 = [] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab de fg", null, 0)      = ["ab", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab   de fg", null, 0)    = ["ab", "", "", "de", "fg"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab:cd:ef", ":", 2)       = ["ab", "cd:ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 5) = ["ab", "cd", "ef"] StringUtils.splitByWholeSeparatorPreserveAllTokens("ab-!-cd-!-ef", "-!-", 2) = ["ab", "cd-!-ef"] </pre>
 * @param str  the String to parse, may be null
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @return an array of parsed Strings, {@code null} if null String was input
 * @since 2.4
 */
/** 
 * Performs the logic for the  {@code splitByWholeSeparatorPreserveAllTokens} methods.
 * @param str  the String to parse, may be {@code null}
 * @param separator  String containing the String to be used as a delimiter,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in the returnedarray. A zero or negative value implies no limit.
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Splits the provided text into an array, using whitespace as the separator, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer. Whitespace is defined by  {@link Character#isWhitespace(char)}.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.splitPreserveAllTokens(null)       = null StringUtils.splitPreserveAllTokens("")         = [] StringUtils.splitPreserveAllTokens("abc def")  = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def") = ["abc", "", "def"] StringUtils.splitPreserveAllTokens(" abc ")    = ["", "abc", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Splits the provided text into an array, separator specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.splitPreserveAllTokens(null, *)         = null StringUtils.splitPreserveAllTokens("", *)           = [] StringUtils.splitPreserveAllTokens("a.b.c", '.')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a..b.c", '.')   = ["a", "", "b", "c"] StringUtils.splitPreserveAllTokens("a:b:c", '.')    = ["a:b:c"] StringUtils.splitPreserveAllTokens("a\tb\nc", null) = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c", ' ')    = ["a", "b", "c"] StringUtils.splitPreserveAllTokens("a b c ", ' ')   = ["a", "b", "c", ""] StringUtils.splitPreserveAllTokens("a b c  ", ' ')   = ["a", "b", "c", "", ""] StringUtils.splitPreserveAllTokens(" a b c", ' ')   = ["", a", "b", "c"] StringUtils.splitPreserveAllTokens("  a b c", ' ')  = ["", "", a", "b", "c"] StringUtils.splitPreserveAllTokens(" a b c ", ' ')  = ["", a", "b", "c", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChar  the character used as the delimiter,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that do not return amaximum array length.
 * @param str  the String to parse, may be {@code null}
 * @param separatorChar the separate character
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 */
//
/** 
 * <p>Splits the provided text into an array, separators specified, preserving all tokens, including empty tokens created by adjacent separators. This is an alternative to using StringTokenizer.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. For more control over the split use the StrTokenizer class.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><pre> StringUtils.splitPreserveAllTokens(null, *)           = null StringUtils.splitPreserveAllTokens("", *)             = [] StringUtils.splitPreserveAllTokens("abc def", null)   = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc def", " ")    = ["abc", "def"] StringUtils.splitPreserveAllTokens("abc  def", " ")   = ["abc", "", def"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":")   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef:", ":")  = ["ab", "cd", "ef", ""] StringUtils.splitPreserveAllTokens("ab:cd:ef::", ":") = ["ab", "cd", "ef", "", ""] StringUtils.splitPreserveAllTokens("ab::cd:ef", ":")  = ["ab", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef", ":")     = ["", cd", "ef"] StringUtils.splitPreserveAllTokens("::cd:ef", ":")    = ["", "", cd", "ef"] StringUtils.splitPreserveAllTokens(":cd:ef:", ":")    = ["", cd", "ef", ""] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Splits the provided text into an array with a maximum length, separators specified, preserving all tokens, including empty tokens created by adjacent separators.</p> <p>The separator is not included in the returned String array. Adjacent separators are treated as separators for empty tokens. Adjacent separators are treated as one separator.</p> <p>A  {@code null} input String returns {@code null}. A  {@code null} separatorChars splits on whitespace.</p><p>If more than  {@code max} delimited substrings are found, the lastreturned string includes all characters after the first  {@code max - 1}returned strings (including separator characters).</p> <pre> StringUtils.splitPreserveAllTokens(null, *, *)            = null StringUtils.splitPreserveAllTokens("", *, *)              = [] StringUtils.splitPreserveAllTokens("ab de fg", null, 0)   = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 0) = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"] StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 2) = ["ab", "  de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 3) = ["ab", "", " de fg"] StringUtils.splitPreserveAllTokens("ab   de fg", null, 4) = ["ab", "", "", "de fg"] </pre>
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars  the characters used as the delimiters,{@code null} splits on whitespace
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.1
 */
/** 
 * Performs the logic for the  {@code split} and{@code splitPreserveAllTokens} methods that return a maximum arraylength.
 * @param str  the String to parse, may be {@code null}
 * @param separatorChars the separate character
 * @param max  the maximum number of elements to include in thearray. A zero or negative value implies no limit.
 * @param preserveAllTokens if {@code true}, adjacent separators are treated as empty token separators; if  {@code false}, adjacent separators are treated as one separator.
 * @return an array of parsed Strings, {@code null} if null String input
 */
//
//
//
//
//
//
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens. <pre> StringUtils.splitByCharacterType(null)         = null StringUtils.splitByCharacterType("")           = [] StringUtils.splitByCharacterType("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterType("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterType("number5")    = ["number", "5"] StringUtils.splitByCharacterType("fooBar")     = ["foo", "B", "ar"] StringUtils.splitByCharacterType("foo200Bar")  = ["foo", "200", "B", "ar"] StringUtils.splitByCharacterType("ASFRules")   = ["ASFR", "ules"] </pre>
 * @param str the String to split, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: the character of type {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.<pre> StringUtils.splitByCharacterTypeCamelCase(null)         = null StringUtils.splitByCharacterTypeCamelCase("")           = [] StringUtils.splitByCharacterTypeCamelCase("ab de fg")   = ["ab", " ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab   de fg") = ["ab", "   ", "de", " ", "fg"] StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef")   = ["ab", ":", "cd", ":", "ef"] StringUtils.splitByCharacterTypeCamelCase("number5")    = ["number", "5"] StringUtils.splitByCharacterTypeCamelCase("fooBar")     = ["foo", "Bar"] StringUtils.splitByCharacterTypeCamelCase("foo200Bar")  = ["foo", "200", "Bar"] StringUtils.splitByCharacterTypeCamelCase("ASFRules")   = ["ASF", "Rules"] </pre>
 * @param str the String to split, may be {@code null}
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Splits a String by Character type as returned by {@code java.lang.Character.getType(char)}. Groups of contiguous characters of the same type are returned as complete tokens, with the following exception: if  {@code camelCase} is {@code true}, the character of type  {@code Character.UPPERCASE_LETTER}, if any, immediately preceding a token of type  {@code Character.LOWERCASE_LETTER}will belong to the following token rather than to the preceding, if any, {@code Character.UPPERCASE_LETTER} token.
 * @param str the String to split, may be {@code null}
 * @param camelCase whether to use so-called "camel-case" for letter types
 * @return an array of parsed Strings, {@code null} if null String input
 * @since 2.4
 */
//
//
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No separator is added to the joined String. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null)            = null StringUtils.join([])              = "" StringUtils.join([null])          = "" StringUtils.join(["a", "b", "c"]) = "abc" StringUtils.join([null, "", "a"]) = "a" </pre>
 * @param < T > the specific type of values to join together
 * @param elements  the values to join together, may be null
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 * @since 3.0 Changed signature to use varargs
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join(["a", "b", "c"], ';')  = "a;b;c" StringUtils.join(["a", "b", "c"], null) = "abc" StringUtils.join([null, "", "a"], ';')  = ";;a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use
 * @param startIndex the first index to start joining from.  It isan error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It isan error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 2.0
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p> Joins the elements of the provided array into a single String containing the provided list of elements. </p> <p> No delimiter is added before or after the list. Null objects or empty strings within the array are represented by empty strings. </p> <pre> StringUtils.join(null, *)               = null StringUtils.join([], *)                 = "" StringUtils.join([null], *)             = "" StringUtils.join([1, 2, 3], ';')  = "1;2;3" StringUtils.join([1, 2, 3], null) = "123" </pre>
 * @param array the array of values to join together, may be null
 * @param separator the separator character to use
 * @param startIndex the first index to start joining from. It is an error to pass in an end index past the end of the array
 * @param endIndex the index to stop joining from (exclusive). It is an error to pass in an end index past the end of the array
 * @return the joined String, {@code null} if null array input
 * @since 3.2
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *)                = null StringUtils.join([], *)                  = "" StringUtils.join([null], *)              = "" StringUtils.join(["a", "b", "c"], "--")  = "a--b--c" StringUtils.join(["a", "b", "c"], null)  = "abc" StringUtils.join(["a", "b", "c"], "")    = "abc" StringUtils.join([null, "", "a"], ',')   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null array input
 */
/** 
 * <p>Joins the elements of the provided array into a single String containing the provided list of elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").Null objects or empty strings within the array are represented by empty strings.</p> <pre> StringUtils.join(null, *, *, *)                = null StringUtils.join([], *, *, *)                  = "" StringUtils.join([null], *, *, *)              = "" StringUtils.join(["a", "b", "c"], "--", 0, 3)  = "a--b--c" StringUtils.join(["a", "b", "c"], "--", 1, 3)  = "b--c" StringUtils.join(["a", "b", "c"], "--", 2, 3)  = "c" StringUtils.join(["a", "b", "c"], "--", 2, 2)  = "" StringUtils.join(["a", "b", "c"], null, 0, 3)  = "abc" StringUtils.join(["a", "b", "c"], "", 0, 3)    = "abc" StringUtils.join([null, "", "a"], ',', 0, 3)   = ",,a" </pre>
 * @param array  the array of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @param startIndex the first index to start joining from.
 * @param endIndex the index to stop joining from (exclusive).
 * @return the joined String, {@code null} if null array input; or the empty stringif  {@code endIndex - startIndex <= 0}. The number of joined entries is given by {@code endIndex - startIndex}
 * @throws ArrayIndexOutOfBoundsException ife<br/>{@code startIndex < 0} or <br/>{@code startIndex >= array.length()} or <br/>{@code endIndex < 0} or <br/>{@code endIndex > array.length()} 
 */
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null iterator input
 * @since 2.0
 */
//
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").</p><p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null iterator input
 */
//
//
//
/** 
 * <p>Joins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. Null objects or empty strings within the iteration are represented by empty strings.</p> <p>See the examples here:  {@link #join(Object[],char)}. </p>
 * @param iterable  the {@code Iterable} providing the values to join together, may be null
 * @param separator  the separator character to use
 * @return the joined String, {@code null} if null iterator input
 * @since 2.3
 */
/** 
 * <p>Joins the elements of the provided  {@code Iterable} intoa single String containing the provided elements.</p> <p>No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("").</p><p>See the examples here:  {@link #join(Object[],String)}. </p>
 * @param iterable  the {@code Iterable} providing the values to join together, may be null
 * @param separator  the separator character to use, null treated as ""
 * @return the joined String, {@code null} if null iterator input
 * @since 2.3
 */
//
//
/** 
 * <p>Deletes all whitespaces from a String as defined by {@link Character#isWhitespace(char)}.</p> <pre> StringUtils.deleteWhitespace(null)         = null StringUtils.deleteWhitespace("")           = "" StringUtils.deleteWhitespace("abc")        = "abc" StringUtils.deleteWhitespace("   ab  c  ") = "abc" </pre>
 * @param str  the String to delete whitespace from, may be null
 * @return the String without whitespaces, {@code null} if null String input
 */
//
//
/** 
 * <p>Removes a substring only if it is at the beginning of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeStart(null, *)      = null StringUtils.removeStart("", *)        = "" StringUtils.removeStart(*, null)      =  StringUtils.removeStart("www.domain.com", "www.")   = "domain.com" StringUtils.removeStart("domain.com", "www.")       = "domain.com" StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStart("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Case insensitive removal of a substring if it is at the beginning of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeStartIgnoreCase(null, *)      = null StringUtils.removeStartIgnoreCase("", *)        = "" StringUtils.removeStartIgnoreCase(*, null)      =  StringUtils.removeStartIgnoreCase("www.domain.com", "www.")   = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "WWW.")   = "domain.com" StringUtils.removeStartIgnoreCase("domain.com", "www.")       = "domain.com" StringUtils.removeStartIgnoreCase("www.domain.com", "domain") = "www.domain.com" StringUtils.removeStartIgnoreCase("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Removes a substring only if it is at the end of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeEnd(null, *)      = null StringUtils.removeEnd("", *)        = "" StringUtils.removeEnd(*, null)      =  StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com" StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain" StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEnd("abc", "")    = "abc" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Case insensitive removal of a substring if it is at the end of a source string, otherwise returns the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} search string will return the source string.</p><pre> StringUtils.removeEndIgnoreCase(null, *)      = null StringUtils.removeEndIgnoreCase("", *)        = "" StringUtils.removeEndIgnoreCase(*, null)      =  StringUtils.removeEndIgnoreCase("www.domain.com", ".com.")  = "www.domain.com" StringUtils.removeEndIgnoreCase("www.domain.com", ".com")   = "www.domain" StringUtils.removeEndIgnoreCase("www.domain.com", "domain") = "www.domain.com" StringUtils.removeEndIgnoreCase("abc", "")    = "abc" StringUtils.removeEndIgnoreCase("www.domain.com", ".COM") = "www.domain") StringUtils.removeEndIgnoreCase("www.domain.COM", ".com") = "www.domain") </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for (case insensitive) and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.4
 */
/** 
 * <p>Removes all occurrences of a substring from within the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string. A  {@code null} remove string will return the source string.An empty ("") remove string will return the source string.</p> <pre> StringUtils.remove(null, *)        = null StringUtils.remove("", *)          = "" StringUtils.remove(*, null)        =  StringUtils.remove(*, "")          =  StringUtils.remove("queued", "ue") = "qd" StringUtils.remove("queued", "zz") = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the String to search for and remove, may be null
 * @return the substring with the string removed if found,{@code null} if null String input
 * @since 2.1
 */
/** 
 * <p>Removes all occurrences of a character from within the source string.</p> <p>A  {@code null} source string will return {@code null}. An empty ("") source string will return the empty string.</p> <pre> StringUtils.remove(null, *)       = null StringUtils.remove("", *)         = "" StringUtils.remove("queued", 'u') = "qeed" StringUtils.remove("queued", 'z') = "queued" </pre>
 * @param str  the source String to search, may be null
 * @param remove  the char to search for and remove, may be null
 * @return the substring with the char removed if found,{@code null} if null String input
 * @since 2.1
 */
//
//
/** 
 * <p>Replaces a String with another String inside a larger String, once.</p> <p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replaceOnce(null, *, *)        = null StringUtils.replaceOnce("", *, *)          = "" StringUtils.replaceOnce("any", null, *)    = "any" StringUtils.replaceOnce("any", *, null)    = "any" StringUtils.replaceOnce("any", "", *)      = "any" StringUtils.replaceOnce("aba", "a", null)  = "aba" StringUtils.replaceOnce("aba", "a", "")    = "ba" StringUtils.replaceOnce("aba", "a", "z")   = "zba" </pre>
 * @see #replace(String text,String searchString,String replacement,int max)
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace with, may be null
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * Replaces each substring of the source String that matches the given regular expression with the given replacement using the  {@link Pattern#DOTALL} option. DOTALL is also know as single-line mode in Perl. This callis also equivalent to: <ul> <li> {@code source.replaceAll(&quot;(?s)&quot; + regex, replacement)}</li> <li> {@code Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement)}</li> </ul>
 * @param source the source string
 * @param regex the regular expression to which this string is to be matched
 * @param replacement the string to be substituted for each match
 * @return The resulting {@code String}
 * @see String#replaceAll(String,String)
 * @see Pattern#DOTALL
 * @since 3.2
 */
/** 
 * Removes each substring of the source String that matches the given regular expression using the DOTALL option.
 * @param source the source string
 * @param regex the regular expression to which this string is to be matched
 * @return The resulting {@code String}
 * @see String#replaceAll(String,String)
 * @see Pattern#DOTALL
 * @since 3.2
 */
/** 
 * <p>Replaces all occurrences of a String within another String.</p> <p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replace(null, *, *)        = null StringUtils.replace("", *, *)          = "" StringUtils.replace("any", null, *)    = "any" StringUtils.replace("any", *, null)    = "any" StringUtils.replace("any", "", *)      = "any" StringUtils.replace("aba", "a", null)  = "aba" StringUtils.replace("aba", "a", "")    = "b" StringUtils.replace("aba", "a", "z")   = "zbz" </pre>
 * @see #replace(String text,String searchString,String replacement,int max)
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace it with, may be null
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * <p>Replaces a String with another String inside a larger String, for the first  {@code max} values of the search String.</p><p>A  {@code null} reference passed to this method is a no-op.</p><pre> StringUtils.replace(null, *, *, *)         = null StringUtils.replace("", *, *, *)           = "" StringUtils.replace("any", null, *, *)     = "any" StringUtils.replace("any", *, null, *)     = "any" StringUtils.replace("any", "", *, *)       = "any" StringUtils.replace("any", *, *, 0)        = "any" StringUtils.replace("abaa", "a", null, -1) = "abaa" StringUtils.replace("abaa", "a", "", -1)   = "b" StringUtils.replace("abaa", "a", "z", 0)   = "abaa" StringUtils.replace("abaa", "a", "z", 1)   = "zbaa" StringUtils.replace("abaa", "a", "z", 2)   = "zbza" StringUtils.replace("abaa", "a", "z", -1)  = "zbzz" </pre>
 * @param text  text to search and replace in, may be null
 * @param searchString  the String to search for, may be null
 * @param replacement  the String to replace it with, may be null
 * @param max  maximum number of values to replace, or {@code -1} if no maximum
 * @return the text with any replacements processed,{@code null} if null String input
 */
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored. This will not repeat. For repeating replaces, call the overloaded method. </p> <pre> StringUtils.replaceEach(null, *, *)        = null StringUtils.replaceEach("", *, *)          = "" StringUtils.replaceEach("aba", null, null) = "aba" StringUtils.replaceEach("aba", new String[0], null) = "aba" StringUtils.replaceEach("aba", null, new String[0]) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null)  = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""})  = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"})  = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"})  = "wcte" (example of how it does not repeat) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"})  = "dcte" </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored.  </p> <pre> StringUtils.replaceEach(null, *, *, *) = null StringUtils.replaceEach("", *, *, *) = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, true) = IllegalStateException StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, false) = "dcabe" </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalStateException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
//
//
/** 
 * <p> Replaces all occurrences of Strings within another String. </p> <p> A  {@code null} reference passed to this method is a no-op, or ifany "search string" or "string to replace" is null, that replace will be ignored. </p> <pre> StringUtils.replaceEach(null, *, *, *) = null StringUtils.replaceEach("", *, *, *) = "" StringUtils.replaceEach("aba", null, null, *) = "aba" StringUtils.replaceEach("aba", new String[0], null, *) = "aba" StringUtils.replaceEach("aba", null, new String[0], *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, null, *) = "aba" StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}, *) = "b" StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}, *) = "aba" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}, *) = "wcte" (example of how it repeats) StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, false) = "dcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}, true) = "tcte" StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}, *) = IllegalStateException </pre>
 * @param text text to search and replace in, no-op if null
 * @param searchList the Strings to search for, no-op if null
 * @param replacementList the Strings to replace them with, no-op if null
 * @param repeat if true, then replace repeatedlyuntil there are no more possible replacements or timeToLive < 0
 * @param timeToLive if less than 0 then there is a circular reference and endless loop
 * @return the text with any replacements processed, {@code null} ifnull String input
 * @throws IllegalStateException if the search is repeating and there is an endless loop due to outputs of one being inputs to another
 * @throws IllegalArgumentException if the lengths of the arrays are not the same (null is ok, and/or size 0)
 * @since 2.4
 */
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Replaces all occurrences of a character in a String with another. This is a null-safe version of  {@link String#replace(char,char)}.</p> <p>A  {@code null} string input returns {@code null}. An empty ("") string input returns an empty string.</p> <pre> StringUtils.replaceChars(null, *, *)        = null StringUtils.replaceChars("", *, *)          = "" StringUtils.replaceChars("abcba", 'b', 'y') = "aycya" StringUtils.replaceChars("abcba", 'z', 'y') = "abcba" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChar  the character to search for, may be null
 * @param replaceChar  the character to replace, may be null
 * @return modified String, {@code null} if null string input
 * @since 2.0
 */
/** 
 * <p>Replaces multiple characters in a String in one go. This method can also be used to delete characters.</p> <p>For example:<br /> <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p> <p>A  {@code null} string input returns {@code null}. An empty ("") string input returns an empty string. A null or empty set of search characters returns the input string.</p> <p>The length of the search characters should normally equal the length of the replace characters. If the search characters is longer, then the extra search characters are deleted. If the search characters is shorter, then the extra replace characters are ignored.</p> <pre> StringUtils.replaceChars(null, *, *)           = null StringUtils.replaceChars("", *, *)             = "" StringUtils.replaceChars("abc", null, *)       = "abc" StringUtils.replaceChars("abc", "", *)         = "abc" StringUtils.replaceChars("abc", "b", null)     = "ac" StringUtils.replaceChars("abc", "b", "")       = "ac" StringUtils.replaceChars("abcba", "bc", "yz")  = "ayzya" StringUtils.replaceChars("abcba", "bc", "y")   = "ayya" StringUtils.replaceChars("abcba", "bc", "yzx") = "ayzya" </pre>
 * @param str  String to replace characters in, may be null
 * @param searchChars  a set of characters to search for, may be null
 * @param replaceChars  a set of characters to replace, may be null
 * @return modified String, {@code null} if null string input
 * @since 2.0
 */
//
//
/** 
 * <p>Overlays part of a String with another String.</p> <p>A  {@code null} string input returns {@code null}. A negative index is treated as zero. An index greater than the string length is treated as the string length. The start index is always the smaller of the two indices.</p> <pre> StringUtils.overlay(null, *, *, *)            = null StringUtils.overlay("", "abc", 0, 0)          = "abc" StringUtils.overlay("abcdef", null, 2, 4)     = "abef" StringUtils.overlay("abcdef", "", 2, 4)       = "abef" StringUtils.overlay("abcdef", "", 4, 2)       = "abef" StringUtils.overlay("abcdef", "zzzz", 2, 4)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", 4, 2)   = "abzzzzef" StringUtils.overlay("abcdef", "zzzz", -1, 4)  = "zzzzef" StringUtils.overlay("abcdef", "zzzz", 2, 8)   = "abzzzz" StringUtils.overlay("abcdef", "zzzz", -2, -3) = "zzzzabcdef" StringUtils.overlay("abcdef", "zzzz", 8, 10)  = "abcdefzzzz" </pre>
 * @param str  the String to do overlaying in, may be null
 * @param overlay  the String to overlay, may be null
 * @param start  the position to start overlaying at
 * @param end  the position to stop overlaying before
 * @return overlayed String, {@code null} if null String input
 * @since 2.0
 */
//
//
/** 
 * <p>Removes one newline from end of a String if it's there, otherwise leave it alone.  A newline is &quot; {@code \n}&quot;, &quot; {@code \r}&quot;, or &quot; {@code \r\n}&quot;.</p> <p>NOTE: This method changed in 2.0. It now more closely matches Perl chomp.</p> <pre> StringUtils.chomp(null)          = null StringUtils.chomp("")            = "" StringUtils.chomp("abc \r")      = "abc " StringUtils.chomp("abc\n")       = "abc" StringUtils.chomp("abc\r\n")     = "abc" StringUtils.chomp("abc\r\n\r\n") = "abc\r\n" StringUtils.chomp("abc\n\r")     = "abc\n" StringUtils.chomp("abc\n\rabc")  = "abc\n\rabc" StringUtils.chomp("\r")          = "" StringUtils.chomp("\n")          = "" StringUtils.chomp("\r\n")        = "" </pre>
 * @param str  the String to chomp a newline from, may be null
 * @return String without newline, {@code null} if null String input
 */
/** 
 * <p>Removes  {@code separator} from the end of{@code str} if it's there, otherwise leave it alone.</p><p>NOTE: This method changed in version 2.0. It now more closely matches Perl chomp. For the previous behavior, use  {@link #substringBeforeLast(String,String)}. This method uses  {@link String#endsWith(String)}.</p> <pre> StringUtils.chomp(null, *)         = null StringUtils.chomp("", *)           = "" StringUtils.chomp("foobar", "bar") = "foo" StringUtils.chomp("foobar", "baz") = "foobar" StringUtils.chomp("foo", "foo")    = "" StringUtils.chomp("foo ", "foo")   = "foo " StringUtils.chomp(" foo", "foo")   = " " StringUtils.chomp("foo", "foooo")  = "foo" StringUtils.chomp("foo", "")       = "foo" StringUtils.chomp("foo", null)     = "foo" </pre>
 * @param str  the String to chomp from, may be null
 * @param separator  separator String, may be null
 * @return String without trailing separator, {@code null} if null String input
 * @deprecated This feature will be removed in Lang 4.0, use {@link StringUtils#removeEnd(String,String)} instead
 */
//
//
/** 
 * <p>Remove the last character from a String.</p> <p>If the String ends in  {@code \r\n}, then remove both of them.</p> <pre> StringUtils.chop(null)          = null StringUtils.chop("")            = "" StringUtils.chop("abc \r")      = "abc " StringUtils.chop("abc\n")       = "abc" StringUtils.chop("abc\r\n")     = "abc" StringUtils.chop("abc")         = "ab" StringUtils.chop("abc\nabc")    = "abc\nab" StringUtils.chop("a")           = "" StringUtils.chop("\r")          = "" StringUtils.chop("\n")          = "" StringUtils.chop("\r\n")        = "" </pre>
 * @param str  the String to chop last character from, may be null
 * @return String without last character, {@code null} if null String input
 */
//
//
//
//
/** 
 * <p>Repeat a String  {@code repeat} times to form anew String.</p> <pre> StringUtils.repeat(null, 2) = null StringUtils.repeat("", 0)   = "" StringUtils.repeat("", 2)   = "" StringUtils.repeat("a", 3)  = "aaa" StringUtils.repeat("ab", 2) = "abab" StringUtils.repeat("a", -2) = "" </pre>
 * @param str  the String to repeat, may be null
 * @param repeat  number of times to repeat str, negative treated as zero
 * @return a new String consisting of the original String repeated,{@code null} if null String input
 */
//
/** 
 * <p>Repeat a String  {@code repeat} times to form anew String, with a String separator injected each time. </p> <pre> StringUtils.repeat(null, null, 2) = null StringUtils.repeat(null, "x", 2)  = null StringUtils.repeat("", null, 0)   = "" StringUtils.repeat("", "", 2)     = "" StringUtils.repeat("", "x", 3)    = "xxx" StringUtils.repeat("?", ", ", 3)  = "?, ?, ?" </pre>
 * @param str        the String to repeat, may be null
 * @param separator  the String to inject, may be null
 * @param repeat     number of times to repeat str, negative treated as zero
 * @return a new String consisting of the original String repeated,{@code null} if null String input
 * @since 2.5
 */
//
/** 
 * <p>Returns padding using the specified delimiter repeated to a given length.</p> <pre> StringUtils.repeat('e', 0)  = "" StringUtils.repeat('e', 3)  = "eee" StringUtils.repeat('e', -2) = "" </pre> <p>Note: this method doesn't not support padding with <a href="http://www.unicode.org/glossary/#supplementary_character">Unicode Supplementary Characters</a> as they require a pair of  {@code char}s to be represented. If you are needing to support full I18N of your applications consider using  {@link #repeat(String,int)} instead.</p>
 * @param ch  character to repeat
 * @param repeat  number of times to repeat char, negative treated as zero
 * @return String with repeated character
 * @see #repeat(String,int)
 */
/** 
 * <p>Right pad a String with spaces (' ').</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *)   = null StringUtils.rightPad("", 3)     = "   " StringUtils.rightPad("bat", 3)  = "bat" StringUtils.rightPad("bat", 5)  = "bat  " StringUtils.rightPad("bat", 1)  = "bat" StringUtils.rightPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 */
/** 
 * <p>Right pad a String with a specified character.</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *, *)     = null StringUtils.rightPad("", 3, 'z')     = "zzz" StringUtils.rightPad("bat", 3, 'z')  = "bat" StringUtils.rightPad("bat", 5, 'z')  = "batzz" StringUtils.rightPad("bat", 1, 'z')  = "bat" StringUtils.rightPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 * @since 2.0
 */
//
/** 
 * <p>Right pad a String with a specified String.</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.rightPad(null, *, *)      = null StringUtils.rightPad("", 3, "z")      = "zzz" StringUtils.rightPad("bat", 3, "yz")  = "bat" StringUtils.rightPad("bat", 5, "yz")  = "batyz" StringUtils.rightPad("bat", 8, "yz")  = "batyzyzy" StringUtils.rightPad("bat", 1, "yz")  = "bat" StringUtils.rightPad("bat", -1, "yz") = "bat" StringUtils.rightPad("bat", 5, null)  = "bat  " StringUtils.rightPad("bat", 5, "")    = "bat  " </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return right padded String or original String if no padding is necessary,{@code null} if null String input
 */
//
/** 
 * <p>Left pad a String with spaces (' ').</p> <p>The String is padded to the size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *)   = null StringUtils.leftPad("", 3)     = "   " StringUtils.leftPad("bat", 3)  = "bat" StringUtils.leftPad("bat", 5)  = "  bat" StringUtils.leftPad("bat", 1)  = "bat" StringUtils.leftPad("bat", -1) = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 */
/** 
 * <p>Left pad a String with a specified character.</p> <p>Pad to a size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *, *)     = null StringUtils.leftPad("", 3, 'z')     = "zzz" StringUtils.leftPad("bat", 3, 'z')  = "bat" StringUtils.leftPad("bat", 5, 'z')  = "zzbat" StringUtils.leftPad("bat", 1, 'z')  = "bat" StringUtils.leftPad("bat", -1, 'z') = "bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padChar  the character to pad with
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 * @since 2.0
 */
//
/** 
 * <p>Left pad a String with a specified String.</p> <p>Pad to a size of  {@code size}.</p> <pre> StringUtils.leftPad(null, *, *)      = null StringUtils.leftPad("", 3, "z")      = "zzz" StringUtils.leftPad("bat", 3, "yz")  = "bat" StringUtils.leftPad("bat", 5, "yz")  = "yzbat" StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat" StringUtils.leftPad("bat", 1, "yz")  = "bat" StringUtils.leftPad("bat", -1, "yz") = "bat" StringUtils.leftPad("bat", 5, null)  = "  bat" StringUtils.leftPad("bat", 5, "")    = "  bat" </pre>
 * @param str  the String to pad out, may be null
 * @param size  the size to pad to
 * @param padStr  the String to pad with, null or empty treated as single space
 * @return left padded String or original String if no padding is necessary,{@code null} if null String input
 */
//
/** 
 * Gets a CharSequence length or  {@code 0} if the CharSequence is{@code null}.
 * @param cs a CharSequence or  {@code null}
 * @return CharSequence length or {@code 0} if the CharSequence is{@code null}.
 * @since 2.4
 * @since 3.0 Changed signature from length(String) to length(CharSequence)
 */
//
//
/** 
 * <p>Centers a String in a larger String of size  {@code size}using the space character (' ').<p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <p>Equivalent to  {@code center(str, size, " ")}.</p> <pre> StringUtils.center(null, *)   = null StringUtils.center("", 4)     = "    " StringUtils.center("ab", -1)  = "ab" StringUtils.center("ab", 4)   = " ab " StringUtils.center("abcd", 2) = "abcd" StringUtils.center("a", 4)    = " a  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @return centered String, {@code null} if null String input
 */
/** 
 * <p>Centers a String in a larger String of size  {@code size}. Uses a supplied character as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, ' ')     = "    " StringUtils.center("ab", -1, ' ')  = "ab" StringUtils.center("ab", 4, ' ')   = " ab " StringUtils.center("abcd", 2, ' ') = "abcd" StringUtils.center("a", 4, ' ')    = " a  " StringUtils.center("a", 4, 'y')    = "yayy" </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padChar  the character to pad the new String with
 * @return centered String, {@code null} if null String input
 * @since 2.0
 */
/** 
 * <p>Centers a String in a larger String of size  {@code size}. Uses a supplied String as the value to pad the String with.</p> <p>If the size is less than the String length, the String is returned. A  {@code null} String returns {@code null}. A negative size is treated as zero.</p> <pre> StringUtils.center(null, *, *)     = null StringUtils.center("", 4, " ")     = "    " StringUtils.center("ab", -1, " ")  = "ab" StringUtils.center("ab", 4, " ")   = " ab " StringUtils.center("abcd", 2, " ") = "abcd" StringUtils.center("a", 4, " ")    = " a  " StringUtils.center("a", 4, "yz")   = "yayz" StringUtils.center("abc", 7, null) = "  abc  " StringUtils.center("abc", 7, "")   = "  abc  " </pre>
 * @param str  the String to center, may be null
 * @param size  the int size of new String, negative treated as zero
 * @param padStr  the String to pad the new String with, must not be null or empty
 * @return centered String, {@code null} if null String input
 * @throws IllegalArgumentException if padStr is {@code null} or empty
 */
//
//
/** 
 * <p>Converts a String to upper case as per  {@link String#toUpperCase()}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.upperCase(null)  = null StringUtils.upperCase("")    = "" StringUtils.upperCase("aBc") = "ABC" </pre> <p><strong>Note:</strong> As described in the documentation for  {@link String#toUpperCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).</p>
 * @param str  the String to upper case, may be null
 * @return the upper cased String, {@code null} if null String input
 */
/** 
 * <p>Converts a String to upper case as per  {@link String#toUpperCase(Locale)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.upperCase(null, Locale.ENGLISH)  = null StringUtils.upperCase("", Locale.ENGLISH)    = "" StringUtils.upperCase("aBc", Locale.ENGLISH) = "ABC" </pre>
 * @param str  the String to upper case, may be null
 * @param locale  the locale that defines the case transformation rules, must not be null
 * @return the upper cased String, {@code null} if null String input
 * @since 2.5
 */
/** 
 * <p>Converts a String to lower case as per  {@link String#toLowerCase()}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.lowerCase(null)  = null StringUtils.lowerCase("")    = "" StringUtils.lowerCase("aBc") = "abc" </pre> <p><strong>Note:</strong> As described in the documentation for  {@link String#toLowerCase()}, the result of this method is affected by the current locale. For platform-independent case transformations, the method  {@link #lowerCase(String,Locale)}should be used with a specific locale (e.g.  {@link Locale#ENGLISH}).</p>
 * @param str  the String to lower case, may be null
 * @return the lower cased String, {@code null} if null String input
 */
/** 
 * <p>Converts a String to lower case as per  {@link String#toLowerCase(Locale)}.</p> <p>A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.lowerCase(null, Locale.ENGLISH)  = null StringUtils.lowerCase("", Locale.ENGLISH)    = "" StringUtils.lowerCase("aBc", Locale.ENGLISH) = "abc" </pre>
 * @param str  the String to lower case, may be null
 * @param locale  the locale that defines the case transformation rules, must not be null
 * @return the lower cased String, {@code null} if null String input
 * @since 2.5
 */
/** 
 * <p>Capitalizes a String changing the first letter to title case as per  {@link Character#toTitleCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.capitalize(null)  = null StringUtils.capitalize("")    = "" StringUtils.capitalize("cat") = "Cat" StringUtils.capitalize("cAt") = "CAt" </pre>
 * @param str the String to capitalize, may be null
 * @return the capitalized String, {@code null} if null String input
 * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)
 * @see #uncapitalize(String)
 * @since 2.0
 */
//
/** 
 * <p>Uncapitalizes a String changing the first letter to title case as per  {@link Character#toLowerCase(char)}. No other letters are changed.</p> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.uncapitalize(null)  = null StringUtils.uncapitalize("")    = "" StringUtils.uncapitalize("Cat") = "cat" StringUtils.uncapitalize("CAT") = "cAT" </pre>
 * @param str the String to uncapitalize, may be null
 * @return the uncapitalized String, {@code null} if null String input
 * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)
 * @see #capitalize(String)
 * @since 2.0
 */
//
/** 
 * <p>Swaps the case of a String changing upper and title case to lower case, and lower case to upper case.</p> <ul> <li>Upper case character converts to Lower case</li> <li>Title case character converts to Lower case</li> <li>Lower case character converts to Upper case</li> </ul> <p>For a word based algorithm, see  {@link org.apache.commons.lang3.text.WordUtils#swapCase(String)}. A  {@code null} input String returns {@code null}.</p> <pre> StringUtils.swapCase(null)                 = null StringUtils.swapCase("")                   = "" StringUtils.swapCase("The dog has a BONE") = "tHE DOG HAS A bone" </pre> <p>NOTE: This method changed in Lang version 2.0. It no longer performs a word based algorithm. If you only use ASCII, you will notice no change. That functionality is available in org.apache.commons.lang3.text.WordUtils.</p>
 * @param str  the String to swap case, may be null
 * @return the changed String, {@code null} if null String input
 */
//
//
/** 
 * <p>Counts how many times the substring appears in the larger string.</p> <p>A  {@code null} or empty ("") String input returns {@code 0}.</p> <pre> StringUtils.countMatches(null, *)       = 0 StringUtils.countMatches("", *)         = 0 StringUtils.countMatches("abba", null)  = 0 StringUtils.countMatches("abba", "")    = 0 StringUtils.countMatches("abba", "a")   = 2 StringUtils.countMatches("abba", "ab")  = 1 StringUtils.countMatches("abba", "xxx") = 0 </pre>
 * @param str  the CharSequence to check, may be null
 * @param sub  the substring to count, may be null
 * @return the number of occurrences, 0 if either CharSequence is {@code null}
 * @since 3.0 Changed signature from countMatches(String, String) to countMatches(CharSequence, CharSequence)
 */
//
//
/** 
 * <p>Checks if the CharSequence contains only Unicode letters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAlpha(null)   = false StringUtils.isAlpha("")     = false StringUtils.isAlpha("  ")   = false StringUtils.isAlpha("abc")  = true StringUtils.isAlpha("ab2c") = false StringUtils.isAlpha("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters, and is non-null
 * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters and space (' ').</p> <p> {@code null} will return {@code false}An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAlphaSpace(null)   = false StringUtils.isAlphaSpace("")     = true StringUtils.isAlphaSpace("  ")   = true StringUtils.isAlphaSpace("abc")  = true StringUtils.isAlphaSpace("ab c") = true StringUtils.isAlphaSpace("ab2c") = false StringUtils.isAlphaSpace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters and space,and is non-null
 * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters or digits.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAlphanumeric(null)   = false StringUtils.isAlphanumeric("")     = false StringUtils.isAlphanumeric("  ")   = false StringUtils.isAlphanumeric("abc")  = true StringUtils.isAlphanumeric("ab c") = false StringUtils.isAlphanumeric("ab2c") = true StringUtils.isAlphanumeric("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters or digits,and is non-null
 * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode letters, digits or space ( {@code ' '}).</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAlphanumericSpace(null)   = false StringUtils.isAlphanumericSpace("")     = true StringUtils.isAlphanumericSpace("  ")   = true StringUtils.isAlphanumericSpace("abc")  = true StringUtils.isAlphanumericSpace("ab c") = true StringUtils.isAlphanumericSpace("ab2c") = true StringUtils.isAlphanumericSpace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains letters, digits or space,and is non-null
 * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only ASCII printable characters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isAsciiPrintable(null)     = false StringUtils.isAsciiPrintable("")       = true StringUtils.isAsciiPrintable(" ")      = true StringUtils.isAsciiPrintable("Ceki")   = true StringUtils.isAsciiPrintable("ab2c")   = true StringUtils.isAsciiPrintable("!ab-c~") = true StringUtils.isAsciiPrintable("\u0020") = true StringUtils.isAsciiPrintable("\u0021") = true StringUtils.isAsciiPrintable("\u007e") = true StringUtils.isAsciiPrintable("\u007f") = false StringUtils.isAsciiPrintable("Ceki G\u00fclc\u00fc") = false </pre>
 * @param cs the CharSequence to check, may be null
 * @return {@code true} if every character is in the range32 thru 126
 * @since 2.1
 * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode digits. A decimal point is not a Unicode digit and returns false.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <p>Note that the method does not allow for a leading sign, either positive or negative. Also, if a String passes the numeric test, it may still generate a NumberFormatException when parsed by Integer.parseInt or Long.parseLong, e.g. if the value is outside the range for int or long respectively.</p> <pre> StringUtils.isNumeric(null)   = false StringUtils.isNumeric("")     = false StringUtils.isNumeric("  ")   = false StringUtils.isNumeric("123")  = true StringUtils.isNumeric("12 3") = false StringUtils.isNumeric("ab2c") = false StringUtils.isNumeric("12-3") = false StringUtils.isNumeric("12.3") = false StringUtils.isNumeric("-123") = false StringUtils.isNumeric("+123") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains digits, and is non-null
 * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)
 * @since 3.0 Changed "" to return false and not true
 */
/** 
 * <p>Checks if the CharSequence contains only Unicode digits or space ( {@code ' '}). A decimal point is not a Unicode digit and returns false.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isNumericSpace(null)   = false StringUtils.isNumericSpace("")     = true StringUtils.isNumericSpace("  ")   = true StringUtils.isNumericSpace("123")  = true StringUtils.isNumericSpace("12 3") = true StringUtils.isNumericSpace("ab2c") = false StringUtils.isNumericSpace("12-3") = false StringUtils.isNumericSpace("12.3") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains digits or space,and is non-null
 * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only whitespace.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code true}.</p> <pre> StringUtils.isWhitespace(null)   = false StringUtils.isWhitespace("")     = true StringUtils.isWhitespace("  ")   = true StringUtils.isWhitespace("abc")  = false StringUtils.isWhitespace("ab2c") = false StringUtils.isWhitespace("ab-c") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains whitespace, and is non-null
 * @since 2.0
 * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only lowercase characters.</p> <p> {@code null} will return {@code false}. An empty CharSequence (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAllLowerCase(null)   = false StringUtils.isAllLowerCase("")     = false StringUtils.isAllLowerCase("  ")   = false StringUtils.isAllLowerCase("abc")  = true StringUtils.isAllLowerCase("abC") = false </pre>
 * @param cs  the CharSequence to check, may be null
 * @return {@code true} if only contains lowercase characters, and is non-null
 * @since 2.5
 * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)
 */
/** 
 * <p>Checks if the CharSequence contains only uppercase characters.</p> <p> {@code null} will return {@code false}. An empty String (length()=0) will return  {@code false}.</p> <pre> StringUtils.isAllUpperCase(null)   = false StringUtils.isAllUpperCase("")     = false StringUtils.isAllUpperCase("  ")   = false StringUtils.isAllUpperCase("ABC")  = true StringUtils.isAllUpperCase("aBC") = false </pre>
 * @param cs the CharSequence to check, may be null
 * @return {@code true} if only contains uppercase characters, and is non-null
 * @since 2.5
 * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)
 */
//
//
/** 
 * <p>Returns either the passed in String, or if the String is  {@code null}, an empty String ("").</p> <pre> StringUtils.defaultString(null)  = "" StringUtils.defaultString("")    = "" StringUtils.defaultString("bat") = "bat" </pre>
 * @see ObjectUtils#toString(Object)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @return the passed in String, or the empty String if itwas  {@code null}
 */
/** 
 * <p>Returns either the passed in String, or if the String is {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultString(null, "NULL")  = "NULL" StringUtils.defaultString("", "NULL")    = "" StringUtils.defaultString("bat", "NULL") = "bat" </pre>
 * @see ObjectUtils#toString(Object,String)
 * @see String#valueOf(Object)
 * @param str  the String to check, may be null
 * @param defaultStr  the default String to returnif the input is  {@code null}, may be null
 * @return the passed in String, or the default if it was {@code null}
 */
/** 
 * <p>Returns either the passed in CharSequence, or if the CharSequence is whitespace, empty ("") or  {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultIfBlank(null, "NULL")  = "NULL" StringUtils.defaultIfBlank("", "NULL")    = "NULL" StringUtils.defaultIfBlank(" ", "NULL")   = "NULL" StringUtils.defaultIfBlank("bat", "NULL") = "bat" StringUtils.defaultIfBlank("", null)      = null </pre>
 * @param < T > the specific kind of CharSequence
 * @param str the CharSequence to check, may be null
 * @param defaultStr  the default CharSequence to returnif the input is whitespace, empty ("") or  {@code null}, may be null
 * @return the passed in CharSequence, or the default
 * @see StringUtils#defaultString(String,String)
 */
/** 
 * <p>Returns either the passed in CharSequence, or if the CharSequence is empty or  {@code null}, the value of  {@code defaultStr}.</p> <pre> StringUtils.defaultIfEmpty(null, "NULL")  = "NULL" StringUtils.defaultIfEmpty("", "NULL")    = "NULL" StringUtils.defaultIfEmpty(" ", "NULL")   = " " StringUtils.defaultIfEmpty("bat", "NULL") = "bat" StringUtils.defaultIfEmpty("", null)      = null </pre>
 * @param < T > the specific kind of CharSequence
 * @param str  the CharSequence to check, may be null
 * @param defaultStr  the default CharSequence to returnif the input is empty ("") or  {@code null}, may be null
 * @return the passed in CharSequence, or the default
 * @see StringUtils#defaultString(String,String)
 */
//
//
/** 
 * <p>Reverses a String as per  {@link StringBuilder#reverse()}.</p> <p>A  {@code null} String returns {@code null}.</p> <pre> StringUtils.reverse(null)  = null StringUtils.reverse("")    = "" StringUtils.reverse("bat") = "tab" </pre>
 * @param str  the String to reverse, may be null
 * @return the reversed String, {@code null} if null String input
 */
/** 
 * <p>Reverses a String that is delimited by a specific character.</p> <p>The Strings between the delimiters are not reversed. Thus java.lang.String becomes String.lang.java (if the delimiter is  {@code '.'}).</p> <pre> StringUtils.reverseDelimited(null, *)      = null StringUtils.reverseDelimited("", *)        = "" StringUtils.reverseDelimited("a.b.c", 'x') = "a.b.c" StringUtils.reverseDelimited("a.b.c", ".") = "c.b.a" </pre>
 * @param str  the String to reverse, may be null
 * @param separatorChar  the separator character to use
 * @return the reversed String, {@code null} if null String input
 * @since 2.0
 */
//
//
//
//
/** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "Now is the time for..."</p> <p>Specifically: <ul> <li>If  {@code str} is less than {@code maxWidth} characterslong, return it.</li> <li>Else abbreviate it to  {@code (substring(str, 0, max-3) + "...")}.</li> <li>If  {@code maxWidth} is less than {@code 4}, throw an {@code IllegalArgumentException}.</li> <li>In no case will it return a String of length greater than {@code maxWidth}.</li> </ul> </p> <pre> StringUtils.abbreviate(null, *)      = null StringUtils.abbreviate("", 4)        = "" StringUtils.abbreviate("abcdefg", 6) = "abc..." StringUtils.abbreviate("abcdefg", 7) = "abcdefg" StringUtils.abbreviate("abcdefg", 8) = "abcdefg" StringUtils.abbreviate("abcdefg", 4) = "a..." StringUtils.abbreviate("abcdefg", 3) = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, {@code null} if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */
/** 
 * <p>Abbreviates a String using ellipses. This will turn "Now is the time for all good men" into "...is the time for..."</p> <p>Works like  {@code abbreviate(String, int)}, but allows you to specify a "left edge" offset.  Note that this left edge is not necessarily going to be the leftmost character in the result, or the first character following the ellipses, but it will appear somewhere in the result. <p>In no case will it return a String of length greater than {@code maxWidth}.</p> <pre> StringUtils.abbreviate(null, *, *)                = null StringUtils.abbreviate("", 0, 4)                  = "" StringUtils.abbreviate("abcdefghijklmno", -1, 10) = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 0, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 1, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 4, 10)  = "abcdefg..." StringUtils.abbreviate("abcdefghijklmno", 5, 10)  = "...fghi..." StringUtils.abbreviate("abcdefghijklmno", 6, 10)  = "...ghij..." StringUtils.abbreviate("abcdefghijklmno", 8, 10)  = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 10, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghijklmno", 12, 10) = "...ijklmno" StringUtils.abbreviate("abcdefghij", 0, 3)        = IllegalArgumentException StringUtils.abbreviate("abcdefghij", 5, 6)        = IllegalArgumentException </pre>
 * @param str  the String to check, may be null
 * @param offset  left edge of source String
 * @param maxWidth  maximum length of result String, must be at least 4
 * @return abbreviated String, {@code null} if null String input
 * @throws IllegalArgumentException if the width is too small
 * @since 2.0
 */
/** 
 * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied replacement String.</p> <p>This abbreviation only occurs if the following criteria is met: <ul> <li>Neither the String for abbreviation nor the replacement String are null or empty </li> <li>The length to truncate to is less than the length of the supplied String</li> <li>The length to truncate to is greater than 0</li> <li>The abbreviated String will have enough room for the length supplied replacement String and the first and last characters of the supplied String for abbreviation</li> </ul> Otherwise, the returned String will be the same as the supplied String for abbreviation. </p> <pre> StringUtils.abbreviateMiddle(null, null, 0)      = null StringUtils.abbreviateMiddle("abc", null, 0)      = "abc" StringUtils.abbreviateMiddle("abc", ".", 0)      = "abc" StringUtils.abbreviateMiddle("abc", ".", 3)      = "abc" StringUtils.abbreviateMiddle("abcdef", ".", 4)     = "ab.f" </pre>
 * @param str  the String to abbreviate, may be null
 * @param middle the String to replace the middle characters with, may be null
 * @param length the length to abbreviate {@code str} to.
 * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.
 * @since 2.5
 */
//
//
/** 
 * <p>Compares two Strings, and returns the portion where they differ. More precisely, return the remainder of the second String, starting from where it's different from the first. This means that  the difference between "abc" and "ab" is the empty String and not "c". </p> <p>For example, {@code difference("i am a machine", "i am a robot") -> "robot"}.</p> <pre> StringUtils.difference(null, null) = null StringUtils.difference("", "") = "" StringUtils.difference("", "abc") = "abc" StringUtils.difference("abc", "") = "" StringUtils.difference("abc", "abc") = "" StringUtils.difference("abc", "ab") = "" StringUtils.difference("ab", "abxyz") = "xyz" StringUtils.difference("abcde", "abxyz") = "xyz" StringUtils.difference("abcde", "xyz") = "xyz" </pre>
 * @param str1  the first String, may be null
 * @param str2  the second String, may be null
 * @return the portion of str2 where it differs from str1; returns theempty String if they are equal
 * @see #indexOfDifference(CharSequence,CharSequence)
 * @since 2.0
 */
/** 
 * <p>Compares two CharSequences, and returns the index at which the CharSequences begin to differ.</p> <p>For example, {@code indexOfDifference("i am a machine", "i am a robot") -> 7}</p> <pre> StringUtils.indexOfDifference(null, null) = -1 StringUtils.indexOfDifference("", "") = -1 StringUtils.indexOfDifference("", "abc") = 0 StringUtils.indexOfDifference("abc", "") = 0 StringUtils.indexOfDifference("abc", "abc") = -1 StringUtils.indexOfDifference("ab", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "abxyz") = 2 StringUtils.indexOfDifference("abcde", "xyz") = 0 </pre>
 * @param cs1  the first CharSequence, may be null
 * @param cs2  the second CharSequence, may be null
 * @return the index where cs1 and cs2 begin to differ; -1 if they are equal
 * @since 2.0
 * @since 3.0 Changed signature from indexOfDifference(String, String) toindexOfDifference(CharSequence, CharSequence)
 */
/** 
 * <p>Compares all CharSequences in an array and returns the index at which the CharSequences begin to differ.</p> <p>For example, <code>indexOfDifference(new String[] {"i am a machine", "i am a robot"}) -> 7</code></p> <pre> StringUtils.indexOfDifference(null) = -1 StringUtils.indexOfDifference(new String[] {}) = -1 StringUtils.indexOfDifference(new String[] {"abc"}) = -1 StringUtils.indexOfDifference(new String[] {null, null}) = -1 StringUtils.indexOfDifference(new String[] {"", ""}) = -1 StringUtils.indexOfDifference(new String[] {"", null}) = 0 StringUtils.indexOfDifference(new String[] {"abc", null, null}) = 0 StringUtils.indexOfDifference(new String[] {null, null, "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"", "abc"}) = 0 StringUtils.indexOfDifference(new String[] {"abc", ""}) = 0 StringUtils.indexOfDifference(new String[] {"abc", "abc"}) = -1 StringUtils.indexOfDifference(new String[] {"abc", "a"}) = 1 StringUtils.indexOfDifference(new String[] {"ab", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "abxyz"}) = 2 StringUtils.indexOfDifference(new String[] {"abcde", "xyz"}) = 0 StringUtils.indexOfDifference(new String[] {"xyz", "abcde"}) = 0 StringUtils.indexOfDifference(new String[] {"i am a machine", "i am a robot"}) = 7 </pre>
 * @param css  array of CharSequences, entries may be null
 * @return the index where the strings begin to differ; -1 if they are all equal
 * @since 2.4
 * @since 3.0 Changed signature from indexOfDifference(String...) to indexOfDifference(CharSequence...)
 */
//
//
//
//
//
//
//
//
//
/** 
 * <p>Compares all Strings in an array and returns the initial sequence of characters that is common to all of them.</p> <p>For example, <code>getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) -> "i am a "</code></p> <pre> StringUtils.getCommonPrefix(null) = "" StringUtils.getCommonPrefix(new String[] {}) = "" StringUtils.getCommonPrefix(new String[] {"abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {null, null}) = "" StringUtils.getCommonPrefix(new String[] {"", ""}) = "" StringUtils.getCommonPrefix(new String[] {"", null}) = "" StringUtils.getCommonPrefix(new String[] {"abc", null, null}) = "" StringUtils.getCommonPrefix(new String[] {null, null, "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"", "abc"}) = "" StringUtils.getCommonPrefix(new String[] {"abc", ""}) = "" StringUtils.getCommonPrefix(new String[] {"abc", "abc"}) = "abc" StringUtils.getCommonPrefix(new String[] {"abc", "a"}) = "a" StringUtils.getCommonPrefix(new String[] {"ab", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "abxyz"}) = "ab" StringUtils.getCommonPrefix(new String[] {"abcde", "xyz"}) = "" StringUtils.getCommonPrefix(new String[] {"xyz", "abcde"}) = "" StringUtils.getCommonPrefix(new String[] {"i am a machine", "i am a robot"}) = "i am a " </pre>
 * @param strs  array of String objects, entries may be null
 * @return the initial sequence of characters that are common to all Stringsin the array; empty String if the array is null, the elements are all null or if there is no common prefix.
 * @since 2.4
 */
//
//
//
//
//
/** 
 * <p>Find the Levenshtein distance between two Strings.</p> <p>This is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).</p> <p>The previous implementation of the Levenshtein distance algorithm was from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p> <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError which can occur when my Java implementation is used with very large strings.<br> This implementation of the Levenshtein distance algorithm is from <a href="http://www.merriampark.com/ldjava.htm">http://www.merriampark.com/ldjava.htm</a></p> <pre> StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException StringUtils.getLevenshteinDistance("","")               = 0 StringUtils.getLevenshteinDistance("","a")              = 1 StringUtils.getLevenshteinDistance("aaapppp", "")       = 7 StringUtils.getLevenshteinDistance("frog", "fog")       = 1 StringUtils.getLevenshteinDistance("fly", "ant")        = 3 StringUtils.getLevenshteinDistance("elephant", "hippo") = 7 StringUtils.getLevenshteinDistance("hippo", "elephant") = 7 StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") = 8 StringUtils.getLevenshteinDistance("hello", "hallo")    = 1 </pre>
 * @param s  the first String, must not be null
 * @param t  the second String, must not be null
 * @return result distance
 * @throws IllegalArgumentException if either String input {@code null}
 * @since 3.0 Changed signature from getLevenshteinDistance(String, String) togetLevenshteinDistance(CharSequence, CharSequence)
 */
/* *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Find the Levenshtein distance between two Strings if it's less than or equal to a given  threshold.</p> <p>This is the number of changes needed to change one String into another, where each change is a single character modification (deletion, insertion or substitution).</p> <p>This implementation follows from Algorithms on Strings, Trees and Sequences by Dan Gusfield and Chas Emerick's implementation of the Levenshtein distance algorithm from <a href="http://www.merriampark.com/ld.htm">http://www.merriampark.com/ld.htm</a></p> <pre> StringUtils.getLevenshteinDistance(null, *, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, null, *)             = IllegalArgumentException StringUtils.getLevenshteinDistance(*, *, -1)               = IllegalArgumentException StringUtils.getLevenshteinDistance("","", 0)               = 0 StringUtils.getLevenshteinDistance("aaapppp", "", 8)       = 7 StringUtils.getLevenshteinDistance("aaapppp", "", 7)       = 7 StringUtils.getLevenshteinDistance("aaapppp", "", 6))      = -1 StringUtils.getLevenshteinDistance("elephant", "hippo", 7) = 7 StringUtils.getLevenshteinDistance("elephant", "hippo", 6) = -1 StringUtils.getLevenshteinDistance("hippo", "elephant", 7) = 7 StringUtils.getLevenshteinDistance("hippo", "elephant", 6) = -1 </pre>
 * @param s  the first String, must not be null
 * @param t  the second String, must not be null
 * @param threshold the target threshold, must not be negative
 * @return result distance, or {@code -1} if the distance would be greater than the threshold
 * @throws IllegalArgumentException if either String input {@code null} or negative threshold
 */
/* *///
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
/** 
 * <p>Check if a CharSequence starts with a specified prefix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.startsWith(null, null)      = true StringUtils.startsWith(null, "abc")     = false StringUtils.startsWith("abcdef", null)  = false StringUtils.startsWith("abcdef", "abc") = true StringUtils.startsWith("ABCDEF", "abc") = false </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @return {@code true} if the CharSequence starts with the prefix, case sensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from startsWith(String, String) to startsWith(CharSequence, CharSequence)
 */
/** 
 * <p>Case insensitive check if a CharSequence starts with a specified prefix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.startsWithIgnoreCase(null, null)      = true StringUtils.startsWithIgnoreCase(null, "abc")     = false StringUtils.startsWithIgnoreCase("abcdef", null)  = false StringUtils.startsWithIgnoreCase("abcdef", "abc") = true StringUtils.startsWithIgnoreCase("ABCDEF", "abc") = true </pre>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @return {@code true} if the CharSequence starts with the prefix, case insensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from startsWithIgnoreCase(String, String) to startsWithIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Check if a CharSequence starts with a specified prefix (optionally case insensitive).</p>
 * @see java.lang.String#startsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param prefix the prefix to find, may be null
 * @param ignoreCase indicates whether the compare should ignore case(case insensitive) or not.
 * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}
 */
/** 
 * <p>Check if a CharSequence starts with any of an array of specified strings.</p> <pre> StringUtils.startsWithAny(null, null)      = false StringUtils.startsWithAny(null, new String[] {"abc"})  = false StringUtils.startsWithAny("abcxyz", null)     = false StringUtils.startsWithAny("abcxyz", new String[] {""}) = false StringUtils.startsWithAny("abcxyz", new String[] {"abc"}) = true StringUtils.startsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true </pre>
 * @param string  the CharSequence to check, may be null
 * @param searchStrings the CharSequences to find, may be null or empty
 * @return {@code true} if the CharSequence starts with any of the the prefixes, case insensitive, orboth  {@code null}
 * @since 2.5
 * @since 3.0 Changed signature from startsWithAny(String, String[]) to startsWithAny(CharSequence, CharSequence...)
 */
//
//
/** 
 * <p>Check if a CharSequence ends with a specified suffix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case sensitive.</p> <pre> StringUtils.endsWith(null, null)      = true StringUtils.endsWith(null, "def")     = false StringUtils.endsWith("abcdef", null)  = false StringUtils.endsWith("abcdef", "def") = true StringUtils.endsWith("ABCDEF", "def") = false StringUtils.endsWith("ABCDEF", "cde") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @return {@code true} if the CharSequence ends with the suffix, case sensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from endsWith(String, String) to endsWith(CharSequence, CharSequence)
 */
/** 
 * <p>Case insensitive check if a CharSequence ends with a specified suffix.</p> <p> {@code null}s are handled without exceptions. Two  {@code null}references are considered to be equal. The comparison is case insensitive.</p> <pre> StringUtils.endsWithIgnoreCase(null, null)      = true StringUtils.endsWithIgnoreCase(null, "def")     = false StringUtils.endsWithIgnoreCase("abcdef", null)  = false StringUtils.endsWithIgnoreCase("abcdef", "def") = true StringUtils.endsWithIgnoreCase("ABCDEF", "def") = true StringUtils.endsWithIgnoreCase("ABCDEF", "cde") = false </pre>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @return {@code true} if the CharSequence ends with the suffix, case insensitive, orboth  {@code null}
 * @since 2.4
 * @since 3.0 Changed signature from endsWithIgnoreCase(String, String) to endsWithIgnoreCase(CharSequence, CharSequence)
 */
/** 
 * <p>Check if a CharSequence ends with a specified suffix (optionally case insensitive).</p>
 * @see java.lang.String#endsWith(String)
 * @param str  the CharSequence to check, may be null
 * @param suffix the suffix to find, may be null
 * @param ignoreCase indicates whether the compare should ignore case(case insensitive) or not.
 * @return {@code true} if the CharSequence starts with the prefix orboth  {@code null}
 */
/** 
 * <p> Similar to <a href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize -space</a> </p> <p> The function returns the argument string with whitespace normalized by using <code> {@link #trim(String)}</code> to remove leading and trailing whitespace and then replacing sequences of whitespace characters by a single space. </p> In XML Whitespace characters are the same as those allowed by the <a href="http://www.w3.org/TR/REC-xml/#NT-S">S</a> production, which is S ::= (#x20 | #x9 | #xD | #xA)+ <p> Java's regexp pattern \s defines whitespace as [ \t\n\x0B\f\r] <p> For reference: <ul> <li>\x0B = vertical tab</li> <li>\f = #xC = form feed</li> <li>#x20 = space</li> <li>#x9 = \t</li> <li>#xA = \n</li> <li>#xD = \r</li> </ul> </p> <p> The difference is that Java's whitespace includes vertical tab and form feed, which this functional will also normalize. Additionally <code> {@link #trim(String)}</code> removes control characters (char &lt;= 32) from both ends of this String. </p>
 * @see Pattern
 * @see #trim(String)
 * @see <a
     *      href="http://www.w3.org/TR/xpath/#function-normalize-space">http://www.w3.org/TR/xpath/#function-normalize-space</a>
 * @param str the source String to normalize whitespaces from, may be null
 * @return the modified string with whitespace normalized, {@code null} if null String input
 * @since 3.0
 */
/** 
 * <p>Check if a CharSequence ends with any of an array of specified strings.</p> <pre> StringUtils.endsWithAny(null, null)      = false StringUtils.endsWithAny(null, new String[] {"abc"})  = false StringUtils.endsWithAny("abcxyz", null)     = false StringUtils.endsWithAny("abcxyz", new String[] {""}) = true StringUtils.endsWithAny("abcxyz", new String[] {"xyz"}) = true StringUtils.endsWithAny("abcxyz", new String[] {null, "xyz", "abc"}) = true </pre>
 * @param string  the CharSequence to check, may be null
 * @param searchStrings the CharSequences to find, may be null or empty
 * @return {@code true} if the CharSequence ends with any of the the prefixes, case insensitive, orboth  {@code null}
 * @since 3.0
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end in the suffix.
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param ignoreCase Indicates whether the compare should ignore case.
 * @param suffixes Additional suffixes that are valid terminators (optional).
 * @return A new String if suffix was appened, the same string otherwise.
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end with any the suffixes. <pre> StringUtils.appendIfMissing(null, null) = null StringUtils.appendIfMissing("abc", null) = "abc" StringUtils.appendIfMissing("", "xyz") = "xyz" StringUtils.appendIfMissing("abc", "xyz") = "abcxyz" StringUtils.appendIfMissing("abcxyz", "xyz") = "abcxyz" StringUtils.appendIfMissing("abcXYZ", "xyz") = "abcXYZxyz" </pre> <p>With additional suffixes,</p> <pre> StringUtils.appendIfMissing(null, null, null) = null StringUtils.appendIfMissing("abc", null, null) = "abc" StringUtils.appendIfMissing("", "xyz", null) = "xyz" StringUtils.appendIfMissing("abc", "xyz", new CharSequence[]{null}) = "abcxyz" StringUtils.appendIfMissing("abc", "xyz", "") = "abc" StringUtils.appendIfMissing("abc", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissing("abcxyz", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissing("abcmno", "xyz", "mno") = "abcmno" StringUtils.appendIfMissing("abcXYZ", "xyz", "mno") = "abcXYZxyz" StringUtils.appendIfMissing("abcMNO", "xyz", "mno") = "abcMNOxyz" </pre>
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param suffixes Additional suffixes that are valid terminators.
 * @return A new String if suffix was appened, the same string otherwise.
 * @since 3.2
 */
/** 
 * Appends the suffix to the end of the string if the string does not already end, case insensitive, with any of the suffixes. <pre> StringUtils.appendIfMissingIgnoreCase(null, null) = null StringUtils.appendIfMissingIgnoreCase("abc", null) = "abc" StringUtils.appendIfMissingIgnoreCase("", "xyz") = "xyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz") = "abcXYZ" </pre> <p>With additional suffixes,</p> <pre> StringUtils.appendIfMissingIgnoreCase(null, null, null) = null StringUtils.appendIfMissingIgnoreCase("abc", null, null) = "abc" StringUtils.appendIfMissingIgnoreCase("", "xyz", null) = "xyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", new CharSequence[]{null}) = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "") = "abc" StringUtils.appendIfMissingIgnoreCase("abc", "xyz", "mno") = "axyz" StringUtils.appendIfMissingIgnoreCase("abcxyz", "xyz", "mno") = "abcxyz" StringUtils.appendIfMissingIgnoreCase("abcmno", "xyz", "mno") = "abcmno" StringUtils.appendIfMissingIgnoreCase("abcXYZ", "xyz", "mno") = "abcXYZ" StringUtils.appendIfMissingIgnoreCase("abcMNO", "xyz", "mno") = "abcMNO" </pre>
 * @param str The string.
 * @param suffix The suffix to append to the end of the string.
 * @param suffixes Additional suffixes that are valid terminators.
 * @return A new String if suffix was appened, the same string otherwise.
 * @since 3.2
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes.
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param ignoreCase Indicates whether the compare should ignore case.
 * @param prefixes Additional prefixes that are valid (optional).
 * @return A new String if prefix was prepended, the same string otherwise.
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start with any of the prefixes. <pre> StringUtils.prependIfMissing(null, null) = null StringUtils.prependIfMissing("abc", null) = "abc" StringUtils.prependIfMissing("", "xyz") = "xyz" StringUtils.prependIfMissing("abc", "xyz") = "xyzabc" StringUtils.prependIfMissing("xyzabc", "xyz") = "xyzabc" StringUtils.prependIfMissing("XYZabc", "xyz") = "xyzXYZabc" </pre> <p>With additional prefixes,</p> <pre> StringUtils.prependIfMissing(null, null, null) = null StringUtils.prependIfMissing("abc", null, null) = "abc" StringUtils.prependIfMissing("", "xyz", null) = "xyz" StringUtils.prependIfMissing("abc", "xyz", new CharSequence[]{null}) = "xyzabc" StringUtils.prependIfMissing("abc", "xyz", "") = "abc" StringUtils.prependIfMissing("abc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissing("xyzabc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissing("mnoabc", "xyz", "mno") = "mnoabc" StringUtils.prependIfMissing("XYZabc", "xyz", "mno") = "xyzXYZabc" StringUtils.prependIfMissing("MNOabc", "xyz", "mno") = "xyzMNOabc" </pre>
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param prefixes Additional prefixes that are valid.
 * @return A new String if prefix was prepended, the same string otherwise.
 * @since 3.2
 */
/** 
 * Prepends the prefix to the start of the string if the string does not already start, case insensitive, with any of the prefixes. <pre> StringUtils.prependIfMissingIgnoreCase(null, null) = null StringUtils.prependIfMissingIgnoreCase("abc", null) = "abc" StringUtils.prependIfMissingIgnoreCase("", "xyz") = "xyz" StringUtils.prependIfMissingIgnoreCase("abc", "xyz") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz") = "XYZabc" </pre> <p>With additional prefixes,</p> <pre> StringUtils.prependIfMissingIgnoreCase(null, null, null) = null StringUtils.prependIfMissingIgnoreCase("abc", null, null) = "abc" StringUtils.prependIfMissingIgnoreCase("", "xyz", null) = "xyz" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[]{null}) = "xyzabc" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "") = "abc" StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno") = "xyzabc" StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno") = "mnoabc" StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno") = "XYZabc" StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno") = "MNOabc" </pre>
 * @param str The string.
 * @param prefix The prefix to prepend to the start of the string.
 * @param prefixes Additional prefixes that are valid (optional).
 * @return A new String if prefix was prepended, the same string otherwise.
 * @since 3.2
 */
/** 
 * Converts a <code>byte[]</code> to a String using the specified character encoding.
 * @param bytes the byte array to read from
 * @param charsetName the encoding to use, if null then use the platform default
 * @return a new String
 * @throws UnsupportedEncodingException If the named charset is not supported
 * @throws NullPointerException if the input is null
 * @since 3.1
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@75b5d09
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@1a99d328

#TRAVERSE
LEFTCHILD: CLASS: StringUtils
RIGHTCHILD: CLASS: StringUtils
##SNODE L: CLASS: StringUtils
##SNODE L: CLASS: StringUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@578cd644
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@31af3f22

##TRAVERSE
LEFTCHILD: METHOD: join(short[],char,int,int)
RIGHTCHILD: METHOD: join(short[],char,int,int)
###SNODE L: METHOD: join(short[],char,int,int)
###SNODE L: METHOD: join(short[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: center(String,int)
RIGHTCHILD: METHOD: center(String,int)
###SNODE L: METHOD: center(String,int)
###SNODE L: METHOD: center(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: leftPad(String,int,char)
RIGHTCHILD: METHOD: leftPad(String,int,char)
###SNODE L: METHOD: leftPad(String,int,char)
###SNODE L: METHOD: leftPad(String,int,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringBefore(String,String)
RIGHTCHILD: METHOD: substringBefore(String,String)
###SNODE L: METHOD: substringBefore(String,String)
###SNODE L: METHOD: substringBefore(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defaultString(String)
RIGHTCHILD: METHOD: defaultString(String)
###SNODE L: METHOD: defaultString(String)
###SNODE L: METHOD: defaultString(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsWhitespace(CharSequence)
RIGHTCHILD: METHOD: containsWhitespace(CharSequence)
###SNODE L: METHOD: containsWhitespace(CharSequence)
###SNODE L: METHOD: containsWhitespace(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAsciiPrintable(CharSequence)
RIGHTCHILD: METHOD: isAsciiPrintable(CharSequence)
###SNODE L: METHOD: isAsciiPrintable(CharSequence)
###SNODE L: METHOD: isAsciiPrintable(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: mid(String,int,int)
RIGHTCHILD: METHOD: mid(String,int,int)
###SNODE L: METHOD: mid(String,int,int)
###SNODE L: METHOD: mid(String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: strip(String)
RIGHTCHILD: METHOD: strip(String)
###SNODE L: METHOD: strip(String)
###SNODE L: METHOD: strip(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNumericSpace(CharSequence)
RIGHTCHILD: METHOD: isNumericSpace(CharSequence)
###SNODE L: METHOD: isNumericSpace(CharSequence)
###SNODE L: METHOD: isNumericSpace(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfIgnoreCase(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: indexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByCharacterType(String,boolean)
RIGHTCHILD: METHOD: splitByCharacterType(String,boolean)
###SNODE L: METHOD: splitByCharacterType(String,boolean)
###SNODE L: METHOD: splitByCharacterType(String,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: endsWith(CharSequence,CharSequence,boolean)
RIGHTCHILD: METHOD: endsWith(CharSequence,CharSequence,boolean)
###SNODE L: METHOD: endsWith(CharSequence,CharSequence,boolean)
###SNODE L: METHOD: endsWith(CharSequence,CharSequence,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOfAny(CharSequence,CharSequence)
RIGHTCHILD: METHOD: lastIndexOfAny(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOfAny(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOfAny(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(char[],char,int,int)
RIGHTCHILD: METHOD: join(char[],char,int,int)
###SNODE L: METHOD: join(char[],char,int,int)
###SNODE L: METHOD: join(char[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(String,String)
RIGHTCHILD: METHOD: remove(String,String)
###SNODE L: METHOD: remove(String,String)
###SNODE L: METHOD: remove(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: endsWithAny(CharSequence,CharSequence)
RIGHTCHILD: METHOD: endsWithAny(CharSequence,CharSequence)
###SNODE L: METHOD: endsWithAny(CharSequence,CharSequence)
###SNODE L: METHOD: endsWithAny(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: LF : String
RIGHTCHILD: FIELD: LF : String
###SNODE L: FIELD: LF : String
###SNODE L: FIELD: LF : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: split(String,String)
RIGHTCHILD: METHOD: split(String,String)
###SNODE L: METHOD: split(String,String)
###SNODE L: METHOD: split(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceEachRepeatedly(String,String[],String[])
RIGHTCHILD: METHOD: replaceEachRepeatedly(String,String[],String[])
###SNODE L: METHOD: replaceEachRepeatedly(String,String[],String[])
###SNODE L: METHOD: replaceEachRepeatedly(String,String[],String[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: prependIfMissing(String,CharSequence,boolean,CharSequence)
RIGHTCHILD: METHOD: prependIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE L: METHOD: prependIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE L: METHOD: prependIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: trimToEmpty(String)
RIGHTCHILD: METHOD: trimToEmpty(String)
###SNODE L: METHOD: trimToEmpty(String)
###SNODE L: METHOD: trimToEmpty(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Object[],char)
RIGHTCHILD: METHOD: join(Object[],char)
###SNODE L: METHOD: join(Object[],char)
###SNODE L: METHOD: join(Object[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equalsIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: equalsIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: equalsIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: equalsIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfAnyBut(CharSequence,char)
RIGHTCHILD: METHOD: indexOfAnyBut(CharSequence,char)
###SNODE L: METHOD: indexOfAnyBut(CharSequence,char)
###SNODE L: METHOD: indexOfAnyBut(CharSequence,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfAnyBut(CharSequence,CharSequence)
RIGHTCHILD: METHOD: indexOfAnyBut(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfAnyBut(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfAnyBut(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceEach(String,String[],String[])
RIGHTCHILD: METHOD: replaceEach(String,String[],String[])
###SNODE L: METHOD: replaceEach(String,String[],String[])
###SNODE L: METHOD: replaceEach(String,String[],String[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Iterable<?>,char)
RIGHTCHILD: METHOD: join(Iterable<?>,char)
###SNODE L: METHOD: join(Iterable<?>,char)
###SNODE L: METHOD: join(Iterable<?>,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: leftPad(String,int)
RIGHTCHILD: METHOD: leftPad(String,int)
###SNODE L: METHOD: leftPad(String,int)
###SNODE L: METHOD: leftPad(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(double[],char,int,int)
RIGHTCHILD: METHOD: join(double[],char,int,int)
###SNODE L: METHOD: join(double[],char,int,int)
###SNODE L: METHOD: join(double[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsOnly(CharSequence,char)
RIGHTCHILD: METHOD: containsOnly(CharSequence,char)
###SNODE L: METHOD: containsOnly(CharSequence,char)
###SNODE L: METHOD: containsOnly(CharSequence,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripAccents(String)
RIGHTCHILD: METHOD: stripAccents(String)
###SNODE L: METHOD: stripAccents(String)
###SNODE L: METHOD: stripAccents(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceChars(String,char,char)
RIGHTCHILD: METHOD: replaceChars(String,char,char)
###SNODE L: METHOD: replaceChars(String,char,char)
###SNODE L: METHOD: replaceChars(String,char,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(T)
RIGHTCHILD: METHOD: join(T)
###SNODE L: METHOD: join(T)
###SNODE L: METHOD: join(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: containsIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: containsIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: containsIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(long[],char)
RIGHTCHILD: METHOD: join(long[],char)
###SNODE L: METHOD: join(long[],char)
###SNODE L: METHOD: join(long[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: EMPTY : String
RIGHTCHILD: FIELD: EMPTY : String
###SNODE L: FIELD: EMPTY : String
###SNODE L: FIELD: EMPTY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: endsWithIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: endsWithIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: endsWithIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: endsWithIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(CharSequence,int)
RIGHTCHILD: METHOD: contains(CharSequence,int)
###SNODE L: METHOD: contains(CharSequence,int)
###SNODE L: METHOD: contains(CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: leftPad(String,int,String)
RIGHTCHILD: METHOD: leftPad(String,int,String)
###SNODE L: METHOD: leftPad(String,int,String)
###SNODE L: METHOD: leftPad(String,int,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeEnd(String,String)
RIGHTCHILD: METHOD: removeEnd(String,String)
###SNODE L: METHOD: removeEnd(String,String)
###SNODE L: METHOD: removeEnd(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: ordinalIndexOf(CharSequence,CharSequence,int,boolean)
RIGHTCHILD: METHOD: ordinalIndexOf(CharSequence,CharSequence,int,boolean)
###SNODE L: METHOD: ordinalIndexOf(CharSequence,CharSequence,int,boolean)
###SNODE L: METHOD: ordinalIndexOf(CharSequence,CharSequence,int,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: deleteWhitespace(String)
RIGHTCHILD: METHOD: deleteWhitespace(String)
###SNODE L: METHOD: deleteWhitespace(String)
###SNODE L: METHOD: deleteWhitespace(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverse(String)
RIGHTCHILD: METHOD: reverse(String)
###SNODE L: METHOD: reverse(String)
###SNODE L: METHOD: reverse(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isEmpty(CharSequence)
RIGHTCHILD: METHOD: isEmpty(CharSequence)
###SNODE L: METHOD: isEmpty(CharSequence)
###SNODE L: METHOD: isEmpty(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotBlank(CharSequence)
RIGHTCHILD: METHOD: isNotBlank(CharSequence)
###SNODE L: METHOD: isNotBlank(CharSequence)
###SNODE L: METHOD: isNotBlank(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isWhitespace(CharSequence)
RIGHTCHILD: METHOD: isWhitespace(CharSequence)
###SNODE L: METHOD: isWhitespace(CharSequence)
###SNODE L: METHOD: isWhitespace(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringAfter(String,String)
RIGHTCHILD: METHOD: substringAfter(String,String)
###SNODE L: METHOD: substringAfter(String,String)
###SNODE L: METHOD: substringAfter(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: swapCase(String)
RIGHTCHILD: METHOD: swapCase(String)
###SNODE L: METHOD: swapCase(String)
###SNODE L: METHOD: swapCase(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isBlank(CharSequence)
RIGHTCHILD: METHOD: isBlank(CharSequence)
###SNODE L: METHOD: isBlank(CharSequence)
###SNODE L: METHOD: isBlank(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: INDEX_NOT_FOUND : int
RIGHTCHILD: FIELD: INDEX_NOT_FOUND : int
###SNODE L: FIELD: INDEX_NOT_FOUND : int
###SNODE L: FIELD: INDEX_NOT_FOUND : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: rightPad(String,int,String)
RIGHTCHILD: METHOD: rightPad(String,int,String)
###SNODE L: METHOD: rightPad(String,int,String)
###SNODE L: METHOD: rightPad(String,int,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsAny(CharSequence,CharSequence)
RIGHTCHILD: METHOD: containsAny(CharSequence,CharSequence)
###SNODE L: METHOD: containsAny(CharSequence,CharSequence)
###SNODE L: METHOD: containsAny(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceChars(String,String,String)
RIGHTCHILD: METHOD: replaceChars(String,String,String)
###SNODE L: METHOD: replaceChars(String,String,String)
###SNODE L: METHOD: replaceChars(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: upperCase(String)
RIGHTCHILD: METHOD: upperCase(String)
###SNODE L: METHOD: upperCase(String)
###SNODE L: METHOD: upperCase(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: appendIfMissing(String,CharSequence,CharSequence)
RIGHTCHILD: METHOD: appendIfMissing(String,CharSequence,CharSequence)
###SNODE L: METHOD: appendIfMissing(String,CharSequence,CharSequence)
###SNODE L: METHOD: appendIfMissing(String,CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replace(String,String,String)
RIGHTCHILD: METHOD: replace(String,String,String)
###SNODE L: METHOD: replace(String,String,String)
###SNODE L: METHOD: replace(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: normalizeSpace(String)
RIGHTCHILD: METHOD: normalizeSpace(String)
###SNODE L: METHOD: normalizeSpace(String)
###SNODE L: METHOD: normalizeSpace(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: contains(CharSequence,CharSequence)
RIGHTCHILD: METHOD: contains(CharSequence,CharSequence)
###SNODE L: METHOD: contains(CharSequence,CharSequence)
###SNODE L: METHOD: contains(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(int[],char,int,int)
RIGHTCHILD: METHOD: join(int[],char,int,int)
###SNODE L: METHOD: join(int[],char,int,int)
###SNODE L: METHOD: join(int[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfAny(CharSequence,String)
RIGHTCHILD: METHOD: indexOfAny(CharSequence,String)
###SNODE L: METHOD: indexOfAny(CharSequence,String)
###SNODE L: METHOD: indexOfAny(CharSequence,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripToEmpty(String)
RIGHTCHILD: METHOD: stripToEmpty(String)
###SNODE L: METHOD: stripToEmpty(String)
###SNODE L: METHOD: stripToEmpty(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: PAD_LIMIT : int
RIGHTCHILD: FIELD: PAD_LIMIT : int
###SNODE L: FIELD: PAD_LIMIT : int
###SNODE L: FIELD: PAD_LIMIT : int
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removePattern(String,String)
RIGHTCHILD: METHOD: removePattern(String,String)
###SNODE L: METHOD: removePattern(String,String)
###SNODE L: METHOD: removePattern(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: equals(CharSequence,CharSequence)
RIGHTCHILD: METHOD: equals(CharSequence,CharSequence)
###SNODE L: METHOD: equals(CharSequence,CharSequence)
###SNODE L: METHOD: equals(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: center(String,int,char)
RIGHTCHILD: METHOD: center(String,int,char)
###SNODE L: METHOD: center(String,int,char)
###SNODE L: METHOD: center(String,int,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripAll(String[],String)
RIGHTCHILD: METHOD: stripAll(String[],String)
###SNODE L: METHOD: stripAll(String[],String)
###SNODE L: METHOD: stripAll(String[],String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitWorker(String,String,int,boolean)
RIGHTCHILD: METHOD: splitWorker(String,String,int,boolean)
###SNODE L: METHOD: splitWorker(String,String,int,boolean)
###SNODE L: METHOD: splitWorker(String,String,int,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeStartIgnoreCase(String,String)
RIGHTCHILD: METHOD: removeStartIgnoreCase(String,String)
###SNODE L: METHOD: removeStartIgnoreCase(String,String)
###SNODE L: METHOD: removeStartIgnoreCase(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeEndIgnoreCase(String,String)
RIGHTCHILD: METHOD: removeEndIgnoreCase(String,String)
###SNODE L: METHOD: removeEndIgnoreCase(String,String)
###SNODE L: METHOD: removeEndIgnoreCase(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripStart(String,String)
RIGHTCHILD: METHOD: stripStart(String,String)
###SNODE L: METHOD: stripStart(String,String)
###SNODE L: METHOD: stripStart(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: chomp(String,String)
RIGHTCHILD: METHOD: chomp(String,String)
###SNODE L: METHOD: chomp(String,String)
###SNODE L: METHOD: chomp(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAllUpperCase(CharSequence)
RIGHTCHILD: METHOD: isAllUpperCase(CharSequence)
###SNODE L: METHOD: isAllUpperCase(CharSequence)
###SNODE L: METHOD: isAllUpperCase(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: strip(String,String)
RIGHTCHILD: METHOD: strip(String,String)
###SNODE L: METHOD: strip(String,String)
###SNODE L: METHOD: strip(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: SPACE : String
RIGHTCHILD: FIELD: SPACE : String
###SNODE L: FIELD: SPACE : String
###SNODE L: FIELD: SPACE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByCharacterType(String)
RIGHTCHILD: METHOD: splitByCharacterType(String)
###SNODE L: METHOD: splitByCharacterType(String)
###SNODE L: METHOD: splitByCharacterType(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: startsWithAny(CharSequence,CharSequence)
RIGHTCHILD: METHOD: startsWithAny(CharSequence,CharSequence)
###SNODE L: METHOD: startsWithAny(CharSequence,CharSequence)
###SNODE L: METHOD: startsWithAny(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripAll(String)
RIGHTCHILD: METHOD: stripAll(String)
###SNODE L: METHOD: stripAll(String)
###SNODE L: METHOD: stripAll(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceOnce(String,String,String)
RIGHTCHILD: METHOD: replaceOnce(String,String,String)
###SNODE L: METHOD: replaceOnce(String,String,String)
###SNODE L: METHOD: replaceOnce(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replace(String,String,String,int)
RIGHTCHILD: METHOD: replace(String,String,String,int)
###SNODE L: METHOD: replace(String,String,String,int)
###SNODE L: METHOD: replace(String,String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Iterable<?>,String)
RIGHTCHILD: METHOD: join(Iterable<?>,String)
###SNODE L: METHOD: join(Iterable<?>,String)
###SNODE L: METHOD: join(Iterable<?>,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,int)
RIGHTCHILD: METHOD: indexOf(CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,int)
###SNODE L: METHOD: indexOf(CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: left(String,int)
RIGHTCHILD: METHOD: left(String,int)
###SNODE L: METHOD: left(String,int)
###SNODE L: METHOD: left(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defaultIfBlank(T,T)
RIGHTCHILD: METHOD: defaultIfBlank(T,T)
###SNODE L: METHOD: defaultIfBlank(T,T)
###SNODE L: METHOD: defaultIfBlank(T,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringBetween(String,String)
RIGHTCHILD: METHOD: substringBetween(String,String)
###SNODE L: METHOD: substringBetween(String,String)
###SNODE L: METHOD: substringBetween(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAllLowerCase(CharSequence)
RIGHTCHILD: METHOD: isAllLowerCase(CharSequence)
###SNODE L: METHOD: isAllLowerCase(CharSequence)
###SNODE L: METHOD: isAllLowerCase(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,CharSequence)
RIGHTCHILD: METHOD: indexOf(CharSequence,CharSequence)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence)
###SNODE L: METHOD: indexOf(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defaultIfEmpty(T,T)
RIGHTCHILD: METHOD: defaultIfEmpty(T,T)
###SNODE L: METHOD: defaultIfEmpty(T,T)
###SNODE L: METHOD: defaultIfEmpty(T,T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsAny(CharSequence,char)
RIGHTCHILD: METHOD: containsAny(CharSequence,char)
###SNODE L: METHOD: containsAny(CharSequence,char)
###SNODE L: METHOD: containsAny(CharSequence,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripToNull(String)
RIGHTCHILD: METHOD: stripToNull(String)
###SNODE L: METHOD: stripToNull(String)
###SNODE L: METHOD: stripToNull(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: chomp(String)
RIGHTCHILD: METHOD: chomp(String)
###SNODE L: METHOD: chomp(String)
###SNODE L: METHOD: chomp(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: length(CharSequence)
RIGHTCHILD: METHOD: length(CharSequence)
###SNODE L: METHOD: length(CharSequence)
###SNODE L: METHOD: length(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Iterator<?>,char)
RIGHTCHILD: METHOD: join(Iterator<?>,char)
###SNODE L: METHOD: join(Iterator<?>,char)
###SNODE L: METHOD: join(Iterator<?>,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: StringUtils()
RIGHTCHILD: CONSTRUCTOR: StringUtils()
###SNODE L: CONSTRUCTOR: StringUtils()
###SNODE L: CONSTRUCTOR: StringUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: appendIfMissingIgnoreCase(String,CharSequence,CharSequence)
RIGHTCHILD: METHOD: appendIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE L: METHOD: appendIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE L: METHOD: appendIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(byte[],char)
RIGHTCHILD: METHOD: join(byte[],char)
###SNODE L: METHOD: join(byte[],char)
###SNODE L: METHOD: join(byte[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringBetween(String,String,String)
RIGHTCHILD: METHOD: substringBetween(String,String,String)
###SNODE L: METHOD: substringBetween(String,String,String)
###SNODE L: METHOD: substringBetween(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: defaultString(String,String)
RIGHTCHILD: METHOD: defaultString(String,String)
###SNODE L: METHOD: defaultString(String,String)
###SNODE L: METHOD: defaultString(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfDifference(CharSequence)
RIGHTCHILD: METHOD: indexOfDifference(CharSequence)
###SNODE L: METHOD: indexOfDifference(CharSequence)
###SNODE L: METHOD: indexOfDifference(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: repeat(String,String,int)
RIGHTCHILD: METHOD: repeat(String,String,int)
###SNODE L: METHOD: repeat(String,String,int)
###SNODE L: METHOD: repeat(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getCommonPrefix(String)
RIGHTCHILD: METHOD: getCommonPrefix(String)
###SNODE L: METHOD: getCommonPrefix(String)
###SNODE L: METHOD: getCommonPrefix(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(byte[],char,int,int)
RIGHTCHILD: METHOD: join(byte[],char,int,int)
###SNODE L: METHOD: join(byte[],char,int,int)
###SNODE L: METHOD: join(byte[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: uncapitalize(String)
RIGHTCHILD: METHOD: uncapitalize(String)
###SNODE L: METHOD: uncapitalize(String)
###SNODE L: METHOD: uncapitalize(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Iterator<?>,String)
RIGHTCHILD: METHOD: join(Iterator<?>,String)
###SNODE L: METHOD: join(Iterator<?>,String)
###SNODE L: METHOD: join(Iterator<?>,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: chop(String)
RIGHTCHILD: METHOD: chop(String)
###SNODE L: METHOD: chop(String)
###SNODE L: METHOD: chop(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substring(String,int)
RIGHTCHILD: METHOD: substring(String,int)
###SNODE L: METHOD: substring(String,int)
###SNODE L: METHOD: substring(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitPreserveAllTokens(String,String,int)
RIGHTCHILD: METHOD: splitPreserveAllTokens(String,String,int)
###SNODE L: METHOD: splitPreserveAllTokens(String,String,int)
###SNODE L: METHOD: splitPreserveAllTokens(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: indexOfIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastOrdinalIndexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: lastOrdinalIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastOrdinalIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastOrdinalIndexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitPreserveAllTokens(String)
RIGHTCHILD: METHOD: splitPreserveAllTokens(String)
###SNODE L: METHOD: splitPreserveAllTokens(String)
###SNODE L: METHOD: splitPreserveAllTokens(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(int[],char)
RIGHTCHILD: METHOD: join(int[],char)
###SNODE L: METHOD: join(int[],char)
###SNODE L: METHOD: join(int[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: abbreviate(String,int)
RIGHTCHILD: METHOD: abbreviate(String,int)
###SNODE L: METHOD: abbreviate(String,int)
###SNODE L: METHOD: abbreviate(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: overlay(String,String,int,int)
RIGHTCHILD: METHOD: overlay(String,String,int,int)
###SNODE L: METHOD: overlay(String,String,int,int)
###SNODE L: METHOD: overlay(String,String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(short[],char)
RIGHTCHILD: METHOD: join(short[],char)
###SNODE L: METHOD: join(short[],char)
###SNODE L: METHOD: join(short[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getLevenshteinDistance(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: getLevenshteinDistance(CharSequence,CharSequence,int)
###SNODE L: METHOD: getLevenshteinDistance(CharSequence,CharSequence,int)
###SNODE L: METHOD: getLevenshteinDistance(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: repeat(char,int)
RIGHTCHILD: METHOD: repeat(char,int)
###SNODE L: METHOD: repeat(char,int)
###SNODE L: METHOD: repeat(char,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: appendIfMissing(String,CharSequence,boolean,CharSequence)
RIGHTCHILD: METHOD: appendIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE L: METHOD: appendIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE L: METHOD: appendIfMissing(String,CharSequence,boolean,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: startsWithIgnoreCase(CharSequence,CharSequence)
RIGHTCHILD: METHOD: startsWithIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: startsWithIgnoreCase(CharSequence,CharSequence)
###SNODE L: METHOD: startsWithIgnoreCase(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfAny(CharSequence,CharSequence)
RIGHTCHILD: METHOD: indexOfAny(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfAny(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfAny(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: endsWith(CharSequence,CharSequence)
RIGHTCHILD: METHOD: endsWith(CharSequence,CharSequence)
###SNODE L: METHOD: endsWith(CharSequence,CharSequence)
###SNODE L: METHOD: endsWith(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lowerCase(String)
RIGHTCHILD: METHOD: lowerCase(String)
###SNODE L: METHOD: lowerCase(String)
###SNODE L: METHOD: lowerCase(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: rightPad(String,int,char)
RIGHTCHILD: METHOD: rightPad(String,int,char)
###SNODE L: METHOD: rightPad(String,int,char)
###SNODE L: METHOD: rightPad(String,int,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAlphaSpace(CharSequence)
RIGHTCHILD: METHOD: isAlphaSpace(CharSequence)
###SNODE L: METHOD: isAlphaSpace(CharSequence)
###SNODE L: METHOD: isAlphaSpace(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: abbreviate(String,int,int)
RIGHTCHILD: METHOD: abbreviate(String,int,int)
###SNODE L: METHOD: abbreviate(String,int,int)
###SNODE L: METHOD: abbreviate(String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String,int)
RIGHTCHILD: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String,int)
###SNODE L: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String,int)
###SNODE L: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByWholeSeparator(String,String)
RIGHTCHILD: METHOD: splitByWholeSeparator(String,String)
###SNODE L: METHOD: splitByWholeSeparator(String,String)
###SNODE L: METHOD: splitByWholeSeparator(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringsBetween(String,String,String)
RIGHTCHILD: METHOD: substringsBetween(String,String,String)
###SNODE L: METHOD: substringsBetween(String,String,String)
###SNODE L: METHOD: substringsBetween(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: split(String)
RIGHTCHILD: METHOD: split(String)
###SNODE L: METHOD: split(String)
###SNODE L: METHOD: split(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getLevenshteinDistance(CharSequence,CharSequence)
RIGHTCHILD: METHOD: getLevenshteinDistance(CharSequence,CharSequence)
###SNODE L: METHOD: getLevenshteinDistance(CharSequence,CharSequence)
###SNODE L: METHOD: getLevenshteinDistance(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNumeric(CharSequence)
RIGHTCHILD: METHOD: isNumeric(CharSequence)
###SNODE L: METHOD: isNumeric(CharSequence)
###SNODE L: METHOD: isNumeric(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfDifference(CharSequence,CharSequence)
RIGHTCHILD: METHOD: indexOfDifference(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfDifference(CharSequence,CharSequence)
###SNODE L: METHOD: indexOfDifference(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringAfterLast(String,String)
RIGHTCHILD: METHOD: substringAfterLast(String,String)
###SNODE L: METHOD: substringAfterLast(String,String)
###SNODE L: METHOD: substringAfterLast(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replaceEach(String,String[],String[],boolean,int)
RIGHTCHILD: METHOD: replaceEach(String,String[],String[],boolean,int)
###SNODE L: METHOD: replaceEach(String,String[],String[],boolean,int)
###SNODE L: METHOD: replaceEach(String,String[],String[],boolean,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substring(String,int,int)
RIGHTCHILD: METHOD: substring(String,int,int)
###SNODE L: METHOD: substring(String,int,int)
###SNODE L: METHOD: substring(String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: replacePattern(String,String,String)
RIGHTCHILD: METHOD: replacePattern(String,String,String)
###SNODE L: METHOD: replacePattern(String,String,String)
###SNODE L: METHOD: replacePattern(String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: countMatches(CharSequence,CharSequence)
RIGHTCHILD: METHOD: countMatches(CharSequence,CharSequence)
###SNODE L: METHOD: countMatches(CharSequence,CharSequence)
###SNODE L: METHOD: countMatches(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: prependIfMissingIgnoreCase(String,CharSequence,CharSequence)
RIGHTCHILD: METHOD: prependIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE L: METHOD: prependIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE L: METHOD: prependIfMissingIgnoreCase(String,CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: trimToNull(String)
RIGHTCHILD: METHOD: trimToNull(String)
###SNODE L: METHOD: trimToNull(String)
###SNODE L: METHOD: trimToNull(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOfAny(CharSequence,char)
RIGHTCHILD: METHOD: indexOfAny(CharSequence,char)
###SNODE L: METHOD: indexOfAny(CharSequence,char)
###SNODE L: METHOD: indexOfAny(CharSequence,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: startsWith(CharSequence,CharSequence,boolean)
RIGHTCHILD: METHOD: startsWith(CharSequence,CharSequence,boolean)
###SNODE L: METHOD: startsWith(CharSequence,CharSequence,boolean)
###SNODE L: METHOD: startsWith(CharSequence,CharSequence,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitPreserveAllTokens(String,char)
RIGHTCHILD: METHOD: splitPreserveAllTokens(String,char)
###SNODE L: METHOD: splitPreserveAllTokens(String,char)
###SNODE L: METHOD: splitPreserveAllTokens(String,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: indexOf(CharSequence,int,int)
RIGHTCHILD: METHOD: indexOf(CharSequence,int,int)
###SNODE L: METHOD: indexOf(CharSequence,int,int)
###SNODE L: METHOD: indexOf(CharSequence,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: upperCase(String,Locale)
RIGHTCHILD: METHOD: upperCase(String,Locale)
###SNODE L: METHOD: upperCase(String,Locale)
###SNODE L: METHOD: upperCase(String,Locale)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: trim(String)
RIGHTCHILD: METHOD: trim(String)
###SNODE L: METHOD: trim(String)
###SNODE L: METHOD: trim(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: CR : String
RIGHTCHILD: FIELD: CR : String
###SNODE L: FIELD: CR : String
###SNODE L: FIELD: CR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isNotEmpty(CharSequence)
RIGHTCHILD: METHOD: isNotEmpty(CharSequence)
###SNODE L: METHOD: isNotEmpty(CharSequence)
###SNODE L: METHOD: isNotEmpty(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: repeat(String,int)
RIGHTCHILD: METHOD: repeat(String,int)
###SNODE L: METHOD: repeat(String,int)
###SNODE L: METHOD: repeat(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: abbreviateMiddle(String,String,int)
RIGHTCHILD: METHOD: abbreviateMiddle(String,String,int)
###SNODE L: METHOD: abbreviateMiddle(String,String,int)
###SNODE L: METHOD: abbreviateMiddle(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: substringBeforeLast(String,String)
RIGHTCHILD: METHOD: substringBeforeLast(String,String)
###SNODE L: METHOD: substringBeforeLast(String,String)
###SNODE L: METHOD: substringBeforeLast(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAlphanumeric(CharSequence)
RIGHTCHILD: METHOD: isAlphanumeric(CharSequence)
###SNODE L: METHOD: isAlphanumeric(CharSequence)
###SNODE L: METHOD: isAlphanumeric(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByWholeSeparatorWorker(String,String,int,boolean)
RIGHTCHILD: METHOD: splitByWholeSeparatorWorker(String,String,int,boolean)
###SNODE L: METHOD: splitByWholeSeparatorWorker(String,String,int,boolean)
###SNODE L: METHOD: splitByWholeSeparatorWorker(String,String,int,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: remove(String,char)
RIGHTCHILD: METHOD: remove(String,char)
###SNODE L: METHOD: remove(String,char)
###SNODE L: METHOD: remove(String,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: prependIfMissing(String,CharSequence,CharSequence)
RIGHTCHILD: METHOD: prependIfMissing(String,CharSequence,CharSequence)
###SNODE L: METHOD: prependIfMissing(String,CharSequence,CharSequence)
###SNODE L: METHOD: prependIfMissing(String,CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,int,int)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitPreserveAllTokens(String,String)
RIGHTCHILD: METHOD: splitPreserveAllTokens(String,String)
###SNODE L: METHOD: splitPreserveAllTokens(String,String)
###SNODE L: METHOD: splitPreserveAllTokens(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: center(String,int,String)
RIGHTCHILD: METHOD: center(String,int,String)
###SNODE L: METHOD: center(String,int,String)
###SNODE L: METHOD: center(String,int,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: split(String,char)
RIGHTCHILD: METHOD: split(String,char)
###SNODE L: METHOD: split(String,char)
###SNODE L: METHOD: split(String,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Object[],char,int,int)
RIGHTCHILD: METHOD: join(Object[],char,int,int)
###SNODE L: METHOD: join(Object[],char,int,int)
###SNODE L: METHOD: join(Object[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: capitalize(String)
RIGHTCHILD: METHOD: capitalize(String)
###SNODE L: METHOD: capitalize(String)
###SNODE L: METHOD: capitalize(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByWholeSeparator(String,String,int)
RIGHTCHILD: METHOD: splitByWholeSeparator(String,String,int)
###SNODE L: METHOD: splitByWholeSeparator(String,String,int)
###SNODE L: METHOD: splitByWholeSeparator(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitWorker(String,char,boolean)
RIGHTCHILD: METHOD: splitWorker(String,char,boolean)
###SNODE L: METHOD: splitWorker(String,char,boolean)
###SNODE L: METHOD: splitWorker(String,char,boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAlphanumericSpace(CharSequence)
RIGHTCHILD: METHOD: isAlphanumericSpace(CharSequence)
###SNODE L: METHOD: isAlphanumericSpace(CharSequence)
###SNODE L: METHOD: isAlphanumericSpace(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: rightPad(String,int)
RIGHTCHILD: METHOD: rightPad(String,int)
###SNODE L: METHOD: rightPad(String,int)
###SNODE L: METHOD: rightPad(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,int)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int)
###SNODE L: METHOD: lastIndexOf(CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lowerCase(String,Locale)
RIGHTCHILD: METHOD: lowerCase(String,Locale)
###SNODE L: METHOD: lowerCase(String,Locale)
###SNODE L: METHOD: lowerCase(String,Locale)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: right(String,int)
RIGHTCHILD: METHOD: right(String,int)
###SNODE L: METHOD: right(String,int)
###SNODE L: METHOD: right(String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAlpha(CharSequence)
RIGHTCHILD: METHOD: isAlpha(CharSequence)
###SNODE L: METHOD: isAlpha(CharSequence)
###SNODE L: METHOD: isAlpha(CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: reverseDelimited(String,char)
RIGHTCHILD: METHOD: reverseDelimited(String,char)
###SNODE L: METHOD: reverseDelimited(String,char)
###SNODE L: METHOD: reverseDelimited(String,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: toString(byte[],String)
RIGHTCHILD: METHOD: toString(byte[],String)
###SNODE L: METHOD: toString(byte[],String)
###SNODE L: METHOD: toString(byte[],String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence)
RIGHTCHILD: METHOD: lastIndexOf(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence)
###SNODE L: METHOD: lastIndexOf(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByCharacterTypeCamelCase(String)
RIGHTCHILD: METHOD: splitByCharacterTypeCamelCase(String)
###SNODE L: METHOD: splitByCharacterTypeCamelCase(String)
###SNODE L: METHOD: splitByCharacterTypeCamelCase(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsOnly(CharSequence,String)
RIGHTCHILD: METHOD: containsOnly(CharSequence,String)
###SNODE L: METHOD: containsOnly(CharSequence,String)
###SNODE L: METHOD: containsOnly(CharSequence,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: WHITESPACE_PATTERN : Pattern
RIGHTCHILD: FIELD: WHITESPACE_PATTERN : Pattern
###SNODE L: FIELD: WHITESPACE_PATTERN : Pattern
###SNODE L: FIELD: WHITESPACE_PATTERN : Pattern
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(float[],char)
RIGHTCHILD: METHOD: join(float[],char)
###SNODE L: METHOD: join(float[],char)
###SNODE L: METHOD: join(float[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE L: METHOD: lastIndexOfIgnoreCase(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: split(String,String,int)
RIGHTCHILD: METHOD: split(String,String,int)
###SNODE L: METHOD: split(String,String,int)
###SNODE L: METHOD: split(String,String,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(double[],char)
RIGHTCHILD: METHOD: join(double[],char)
###SNODE L: METHOD: join(double[],char)
###SNODE L: METHOD: join(double[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsNone(CharSequence,char)
RIGHTCHILD: METHOD: containsNone(CharSequence,char)
###SNODE L: METHOD: containsNone(CharSequence,char)
###SNODE L: METHOD: containsNone(CharSequence,char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(long[],char,int,int)
RIGHTCHILD: METHOD: join(long[],char,int,int)
###SNODE L: METHOD: join(long[],char,int,int)
###SNODE L: METHOD: join(long[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: removeStart(String,String)
RIGHTCHILD: METHOD: removeStart(String,String)
###SNODE L: METHOD: removeStart(String,String)
###SNODE L: METHOD: removeStart(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Object[],String)
RIGHTCHILD: METHOD: join(Object[],String)
###SNODE L: METHOD: join(Object[],String)
###SNODE L: METHOD: join(Object[],String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String)
RIGHTCHILD: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String)
###SNODE L: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String)
###SNODE L: METHOD: splitByWholeSeparatorPreserveAllTokens(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: startsWith(CharSequence,CharSequence)
RIGHTCHILD: METHOD: startsWith(CharSequence,CharSequence)
###SNODE L: METHOD: startsWith(CharSequence,CharSequence)
###SNODE L: METHOD: startsWith(CharSequence,CharSequence)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: containsNone(CharSequence,String)
RIGHTCHILD: METHOD: containsNone(CharSequence,String)
###SNODE L: METHOD: containsNone(CharSequence,String)
###SNODE L: METHOD: containsNone(CharSequence,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: ordinalIndexOf(CharSequence,CharSequence,int)
RIGHTCHILD: METHOD: ordinalIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: ordinalIndexOf(CharSequence,CharSequence,int)
###SNODE L: METHOD: ordinalIndexOf(CharSequence,CharSequence,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: stripEnd(String,String)
RIGHTCHILD: METHOD: stripEnd(String,String)
###SNODE L: METHOD: stripEnd(String,String)
###SNODE L: METHOD: stripEnd(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(Object[],String,int,int)
RIGHTCHILD: METHOD: join(Object[],String,int,int)
###SNODE L: METHOD: join(Object[],String,int,int)
###SNODE L: METHOD: join(Object[],String,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(char[],char)
RIGHTCHILD: METHOD: join(char[],char)
###SNODE L: METHOD: join(char[],char)
###SNODE L: METHOD: join(char[],char)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: join(float[],char,int,int)
RIGHTCHILD: METHOD: join(float[],char,int,int)
###SNODE L: METHOD: join(float[],char,int,int)
###SNODE L: METHOD: join(float[],char,int,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: difference(String,String)
RIGHTCHILD: METHOD: difference(String,String)
###SNODE L: METHOD: difference(String,String)
###SNODE L: METHOD: difference(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1226
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)1002
-(0)-(0)-(1)1227
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)619
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)15
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)479
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)621
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)958
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)14
-(0)-(0)-(0)-(1)1228
-(0)-(0)-(1)1229
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)563
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1230
-(2)-(8)-(3)-(2)726
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)539
-(2)-(8)-(3)-(2)81
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)580
-(2)-(8)-(3)-(2)1231
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)582
-(2)-(8)-(3)-(2)1232
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)216
-(2)-(8)-(3)-(2)218
-(2)-(8)-(3)-(2)-(0)217
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)129
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1233
-(2)-(8)-(3)-(2)1234
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)1229
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1235
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)1229
-(2)-(8)-(3)-(2)-(2)1236
-(2)-(8)-(3)-(2)-(3)1237
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)563
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)299
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1238
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1239
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1240
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1241
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1238
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1242
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)-(2)1242
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1243
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1244
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1242
-(2)-(8)-(12)-(0)-(2)-(2)-(3)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1244
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)1244
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1245
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)-(2)1242
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1246
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1246
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1247
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1246
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(2)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1248
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)1246
-(2)-(8)-(12)-(0)-(0)-(2)-(3)403
-(2)-(8)-(12)-(0)-(0)-(2)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1246
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1249
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1250
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1249
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1251
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1249
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1250
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1249
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)1239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)1240
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(2)-(0)-(2)281
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)270
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(1)1239
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(1)216
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1251
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1249
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)1240
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(2)-(0)-(2)281
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)270
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)120
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(0)1249
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(3)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(3)-(0)342
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(0)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)-(1)216
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)342
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1253
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1252
-(2)-(8)-(12)-(0)-(0)-(3)1253
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1252
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1253
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1249
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1254
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)1254
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)1253
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1253
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1255
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1254
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1254
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1255
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)1246
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)1253
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)1249
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1255
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1256
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1193
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)1229
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1257
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1229
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1236
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1258
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1259
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1227
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1260
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1193
-(2)-(8)-(12)-(0)-(2)-(2)-(3)2
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)2
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(0)1227
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)1261
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)1262
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1257
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1263
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1259
-(2)-(8)-(12)-(0)-(0)-(2)1264
-(2)-(8)-(12)-(0)-(0)-(3)81
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)103
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1265
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1266
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(1)1266
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)98
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(0)-(1)98
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)103
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1266
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(0)-(3)1265
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)1266
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)792
-(2)-(8)-(12)-(0)-(0)-(3)-(2)283
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)116
-(2)-(8)-(12)-(0)-(0)-(3)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(0)1266
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1267
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1268
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1269
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1268
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1269
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1268
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1269
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1268
-(2)-(8)-(12)-(0)-(2)-(0)-(1)1269
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)177
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)1268
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)1269
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(2)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)1268
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)1269
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(0)1268
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(3)1271
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1272
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)1272
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)271
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1272
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1272
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)1272
-(2)-(8)-(12)-(0)-(0)-(3)1271
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1273
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)912
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1273
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(3)912
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1273
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)912
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1275
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)912
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1275
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)73
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(2)-(2)83
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1275
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(2)216
-(2)-(8)-(12)-(0)1276
-(2)-(8)-(12)-(0)-(0)50
-(2)-(8)-(12)-(0)-(0)-(0)77
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1275
-(2)-(8)-(12)-(0)-(0)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(0)516
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(2)275
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(3)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(2)50
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(0)516
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(3)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)77
-(2)-(8)-(12)-(0)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(1)50
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)34
-(2)-(8)-(12)-(0)-(0)-(0)-(0)181
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)73
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)73
-(2)-(8)-(12)-(0)-(1)-(1)912
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1277
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1277
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1277
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1278
-(2)-(8)-(12)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(0)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(0)-(1)1278
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1271
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)1271
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1278
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)1274
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(3)1271
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1272
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)1272
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1279
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)912
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1273
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(3)912
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)275
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1272
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1272
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)275
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(3)1272
-(2)-(8)-(12)-(0)-(0)-(3)1271
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1280
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1280
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1280
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1271
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1271
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1271
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)1271
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)1274
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)520
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)278
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1272
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1272
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1272
-(2)-(8)-(12)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1281
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1274
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1274
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1274
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)555
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)283
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)1274
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)555
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1282
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1270
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1239
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)1240
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)1270
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1283
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1286
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1284
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1288
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1285
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)-(1)1286
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(1)1288
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(2)1289
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1283
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1283
-(2)-(8)-(12)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1284
-(2)-(8)-(12)-(0)-(0)-(3)-(2)522
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)569
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1290
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1291
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1284
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1286
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1290
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1288
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1291
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1290
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1291
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(2)1289
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1288
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)1286
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)569
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)569
-(2)-(8)-(12)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)516
-(2)-(8)-(12)-(0)-(0)-(3)-(2)522
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1284
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1292
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1286
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1284
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1288
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)1294
-(2)-(8)-(12)-(0)-(0)1293
-(2)-(8)-(12)-(0)-(1)183
-(2)-(8)-(12)-(0)-(1)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(1)180
-(2)-(8)-(12)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)-(1)1285
-(2)-(8)-(12)-(0)-(1)-(2)181
-(2)-(8)-(12)-(0)-(1)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)64
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(1)-(3)-(0)183
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(1)-(1)1287
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)-(1)1286
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(1)1288
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(2)1289
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)519
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)1293
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)142
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)-(0)1293
-(2)-(8)-(12)-(0)-(1)-(3)-(0)89
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1292
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1270
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1270
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1270
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1239
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1270
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)102
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1295
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)277
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(2)271
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(3)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)1239
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)1289
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(0)420
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)1270
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1295
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)-(2)271
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)-(3)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)-(3)420
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)112
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)1295
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1296
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1297
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1297
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1297
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1292
-(2)-(8)-(12)-(0)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1297
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1296
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1298
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1298
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1296
-(2)-(8)-(12)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1298
-(2)-(8)-(12)-(0)-(0)-(3)-(2)522
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1195
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1284
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1286
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1285
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1284
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1288
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1287
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1285
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1287
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(2)1289
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1288
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(1)1286
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(2)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1195
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1299
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1299
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1195
-(2)-(8)-(12)-(0)-(0)-(3)519
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1299
-(2)-(8)-(12)-(0)-(0)-(3)-(2)522
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1283
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1300
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1300
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1300
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1301
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)168
-(2)-(8)-(12)-(0)-(2)-(2)-(1)276
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1300
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)86
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1301
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1301
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1301
-(2)-(8)-(12)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)276
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(0)-(2)1301
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1303
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1300
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1300
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1300
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1301
-(2)-(8)-(12)-(0)-(2)-(2)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1300
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)516
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)275
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)1302
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)268
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1301
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1301
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1301
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)526
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)484
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)526
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)342
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)342
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)484
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(3)342
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1304
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)555
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)555
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1305
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)555
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(3)-(1)555
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1306
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)556
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)555
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(0)-(1)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)556
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)556
-(2)-(8)-(12)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(0)-(3)-(0)556
-(2)-(8)-(12)-(0)-(0)-(3)-(1)555
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1307
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)556
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1309
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(0)-(3)-(0)556
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1310
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1308
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)275
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)556
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1311
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)275
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1308
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(0)-(3)-(0)556
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1312
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1313
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1312
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1313
-(2)-(8)-(12)-(0)-(0)-(3)1313
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1312
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1134
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)1314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1134
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1314
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)1134
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)-(0)1314
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)-(0)1314
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)342
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1315
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1134
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(3)1314
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1134
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)199
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1316
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1134
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1317
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1314
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1316
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)1314
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)556
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1317
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)1134
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)342
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)556
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)1316
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)975
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1318
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1318
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1318
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1319
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1319
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1318
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1321
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1321
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1318
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1321
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1321
-(2)-(8)-(12)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1323
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1322
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1323
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1323
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1324
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1323
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1323
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)199
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)539
-(2)-(8)-(12)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1308
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1325
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1326
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1308
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)619
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1327
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1328
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1329
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)1308
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)1329
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)141
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1328
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1328
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(3)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(3)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)1326
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)1325
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1328
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1328
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)-(0)-(3)539
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(1)1326
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)-(3)1329
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1327
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)1327
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1330
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1330
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1319
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1319
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1320
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1319
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)199
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1319
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1325
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)864
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(0)-(1)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1325
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1332
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)975
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1330
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1321
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1321
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1330
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1321
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1320
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1321
-(2)-(8)-(12)-(0)-(0)-(3)283
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1320
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1321
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1325
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)199
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1333
-(2)-(8)-(12)-(0)-(2)-(2)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1321
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)270
-(2)-(8)-(12)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)1240
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1325
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)1333
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)864
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)1321
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(0)-(1)217
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)64
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(0)1334
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(0)1321
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)270
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)1334
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1325
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)1333
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)864
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)270
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)277
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(0)1321
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1325
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)-(0)1333
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)864
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)1332
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)1331
-(2)-(8)-(12)-(0)-(0)-(1)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1325
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1332
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)975
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1335
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1335
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1336
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1335
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1335
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1337
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)199
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)570
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)59
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)621
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)975
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)59
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)-(1)619
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)-(1)55
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1338
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1339
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)169
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1340
-(2)-(8)-(12)-(0)-(2)-(2)-(3)182
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)570
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)1338
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(0)1338
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)556
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)570
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)107
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)1340
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(0)570
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)556
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1339
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1337
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)107
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(1)-(1)1341
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)1339
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)-(1)1342
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(0)1343
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)556
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1343
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)-(1)55
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)570
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)256
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(0)1343
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(4)-(1)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(1)1343
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(3)-(1)55
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(4)570
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(4)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(4)256
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(4)-(0)556
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)-(4)-(1)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)1338
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)556
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1339
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)107
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)307
-(2)-(8)-(12)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(4)570
-(2)-(8)-(12)-(0)-(0)-(3)-(4)1338
-(2)-(8)-(12)-(0)-(0)-(3)-(4)256
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)2
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)-(0)570
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)-(4)-(1)1338
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)975
-(2)-(8)-(12)-(0)-(0)-(2)247
-(2)-(8)-(12)-(0)-(0)-(3)197
-(2)-(8)-(12)-(0)-(0)-(3)-(0)162
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)24
-(2)-(8)-(12)-(0)-(0)-(3)-(0)-(0)-(1)55
-(2)-(8)-(12)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(0)975
-(2)-(8)-(12)-(0)-(0)-(3)-(1)-(2)559
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1345
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)1345
-(2)-(8)-(12)-(0)-(0)-(3)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)26
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)129
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)167
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)170
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)175
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)173
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)96
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)273
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1346
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1346
-(2)-(8)-(12)-(0)-(2)-(2)-(1)273
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1347
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)153
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)1347
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)744
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)273
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1346
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)273
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)479
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)507
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1348
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)507
-(2)-(8)-(12)-(0)-(2)-(2)-(2)513
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1004
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1348
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1349
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)1348
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1348
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)507
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)513
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)479
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)507
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1348
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)507
-(2)-(8)-(12)-(0)-(2)-(2)-(2)513
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1004
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1348
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1349
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)1348
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1348
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)507
-(2)-(8)-(12)-(0)-(0)-(2)510
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1308
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)1308
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)96
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)507
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)513
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)177
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)1350
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1350
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1350
-(2)-(8)-(12)-(0)-(0)-(3)-(2)507
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1344
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)482
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)1350
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1350
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1350
-(2)-(8)-(12)-(0)-(0)-(3)-(2)507
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)727
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1351
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)521
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)112
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1240
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)1351
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)181
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(0)330
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(3)178
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(0)-(1)521
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)1351
-(2)-(8)-(12)-(0)-(0)-(4)86
-(2)-(8)-(12)-(0)-(0)-(4)330
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1352
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)322
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1353
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1354
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)322
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1355
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(0)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(0)322
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1356
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1357
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(0)322
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)322
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)664
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)322
-(2)-(8)-(12)-(0)-(0)-(3)539
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)322
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)322
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)271
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)322
-(2)-(8)-(12)-(0)-(0)-(1)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)565
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)556
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)565
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)322
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)181
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(0)556
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)565
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)565
-(2)-(8)-(12)-(0)-(0)-(4)86
-(2)-(8)-(12)-(0)-(0)-(4)556
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1358
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1359
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)664
-(2)-(8)-(12)-(0)-(0)-(3)1002
-(2)-(8)-(12)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(0)-(3)1360
-(2)-(8)-(12)-(0)-(0)-(3)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1361
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1362
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1228
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1229
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1236
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)1228
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)1229
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(1)1363
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1263
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1362
-(2)-(8)-(12)-(0)-(0)-(2)1264
-(2)-(8)-(12)-(0)-(0)-(3)1360
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1364
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1362
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1228
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1361
-(2)-(8)-(12)-(0)-(0)-(3)1362
-(2)-(8)-(12)-(0)-(0)-(3)1228
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)563
-(2)-(8)-(12)-(0)-(0)-(3)-(1)539
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)664
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1359
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1360
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)664
-(2)-(8)-(12)-(0)-(0)-(3)1002
-(2)-(8)-(12)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(0)-(3)1360
-(2)-(8)-(12)-(0)-(0)-(3)218
-(2)-(8)-(12)-(0)-(0)-(3)-(0)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)664
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1359
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1360
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)283
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)1002
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(3)1359
-(2)-(8)-(12)-(0)-(0)-(0)-(2)80
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(0)1360
-(2)-(8)-(12)-(0)-(0)-(0)-(2)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)283
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1002
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)342
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1002
-(2)-(8)-(12)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1359
-(2)-(8)-(12)-(0)-(2)-(2)-(3)484
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1002
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1365
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1359
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1366
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1360
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1365
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)1366
-(2)-(8)-(12)-(0)-(0)-(1)83
-(2)-(8)-(12)-(0)-(0)-(1)-(0)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1366
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1366
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)1367
-(2)-(8)-(12)-(0)-(0)-(0)1366
-(2)-(8)-(12)-(0)-(0)-(1)83
-(2)-(8)-(12)-(0)-(0)-(1)-(0)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)283
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)744
-(2)-(8)-(12)-(0)-(0)-(1)-(2)83
-(2)-(8)-(12)-(0)-(0)-(1)-(2)-(0)141
-(2)-(8)-(12)-(0)-(0)-(1)-(2)-(0)-(0)283
-(2)-(8)-(12)-(0)-(0)-(1)-(2)-(0)-(1)804
-(2)-(8)-(12)-(0)-(0)-(1)-(2)-(1)804
-(2)-(8)-(12)-(0)-(0)-(1)-(2)-(2)283
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)243
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)-(0)1002
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)1366
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(0)1002
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(3)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1360
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)1365
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)341
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)283
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1002
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)1359
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)484
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1002
-(2)-(8)-(12)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1368
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1369
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1370
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1368
-(2)-(8)-(12)-(0)-(0)-(3)1002
-(2)-(8)-(12)-(0)-(0)-(3)1369
-(2)-(8)-(12)-(0)-(0)-(3)1370
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1371
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1369
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1370
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1372
-(2)-(8)-(12)-(0)-(2)-(2)83
-(2)-(8)-(12)-(0)-(2)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)63
-(2)-(8)-(12)-(0)-(2)-(2)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(0)1369
-(2)-(8)-(12)-(0)-(2)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1368
-(2)-(8)-(12)-(0)-(0)-(3)1002
-(2)-(8)-(12)-(0)-(0)-(3)1369
-(2)-(8)-(12)-(0)-(0)-(3)1370
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)1372
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1368
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1002
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1369
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)55
-(2)-(8)-(7)-(3)1370
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1373
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1372
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(0)1002
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)-(0)1002
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(0)1369
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)1370
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1370
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1002
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1372
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)1374
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)1375
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1291
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1369
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1376
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1370
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)1291
-(2)-(8)-(12)-(0)-(0)-(1)1376
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)1377
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(1)1291
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)1378
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)1376
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1379
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)102
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1291
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1380
-(2)-(8)-(12)-(0)-(2)-(2)218
-(2)-(8)-(12)-(0)-(2)-(2)-(0)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1381
-(2)-(8)-(12)-(0)-(2)-(2)218
-(2)-(8)-(12)-(0)-(2)-(2)-(0)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1382
-(2)-(8)-(12)-(0)-(2)-(2)218
-(2)-(8)-(12)-(0)-(2)-(2)-(0)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1291
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)106
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)-(0)1379
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)1370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1382
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)1002
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)1369
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1382
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)1379
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)106
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(0)1382
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)1380
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(1)1382
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1381
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1002
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)484
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1366
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)1369
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)106
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)1370
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1383
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(0)1370
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1383
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1366
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)153
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)419
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)1383
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)1366
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)792
-(2)-(8)-(12)-(0)-(0)-(1)-(2)282
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1366
-(2)-(8)-(12)-(0)-(0)-(1)-(3)919
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(0)1002
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)431
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)243
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)-(0)1002
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(4)-(1)1366
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(0)1002
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1370
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)1381
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)1381
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1381
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1382
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)183
-(2)-(8)-(12)-(0)-(1)-(0)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)1291
-(2)-(8)-(12)-(0)-(1)-(0)-(2)181
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(0)-(0)1379
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(0)1369
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(0)1370
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)142
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1382
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)1002
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(3)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(3)-(0)1369
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(3)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(0)1382
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)1379
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(0)1382
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1380
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(1)1382
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(0)1381
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)-(2)-(0)-(1)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1384
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1002
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1384
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(0)1002
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)-(2)88
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)112
-(2)-(8)-(12)-(0)-(0)-(0)1373
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)132
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1368
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(0)-(3)1369
-(2)-(8)-(12)-(0)-(0)-(3)1370
-(2)-(8)-(12)-(0)-(0)-(3)1373
-(2)-(8)-(12)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1372
-(2)-(8)-(12)-(0)-(0)-(3)-(1)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1385
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)520
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1386
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)664
-(2)-(8)-(12)-(0)-(0)-(3)520
-(2)-(8)-(12)-(0)-(0)-(3)1386
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1385
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1284
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1385
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1284
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1385
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1385
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1387
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1388
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1385
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1389
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)1389
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1389
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)314
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1284
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)271
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)277
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1387
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)1388
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(0)1385
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(0)-(3)-(3)314
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)1387
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1390
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1390
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)342
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1390
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1390
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)555
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)555
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)488
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)484
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)342
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)488
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(3)-(1)79
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(0)-(0)-(0)555
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(0)-(0)-(1)484
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(0)-(1)342
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(1)-(0)1390
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(0)-(4)-(1)217
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(3)484
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)1390
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)342
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1391
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)170
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)106
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(0)577
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)-(1)582
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)491
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)577
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(1)580
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1392
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1393
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1392
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1393
-(2)-(8)-(12)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)577
-(2)-(8)-(12)-(0)-(0)-(1)-(1)580
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(0)1392
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)577
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)582
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)269
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)-(0)1392
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)177
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1393
-(2)-(8)-(12)-(0)-(2)-(0)-(1)2
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)577
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)582
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)1392
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)1392
-(2)-(8)90
-(2)-(8)-(1)53
-(2)-(8)-(1)-(0)584
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1391
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1355
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1394
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1392
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1301
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)526
-(2)-(8)-(12)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1392
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1393
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1392
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1393
-(2)-(8)-(12)-(0)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)577
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(1)580
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1301
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(0)1392
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)577
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)582
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1301
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1392
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1301
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1373
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1373
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1373
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1395
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1373
-(2)-(8)-(12)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1395
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1395
-(2)-(8)-(12)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1373
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1233
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1373
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1373
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1396
-(2)-(8)-(12)-(0)-(2)-(2)153
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1395
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1373
-(2)-(8)-(12)-(0)437
-(2)-(8)-(12)-(0)-(0)1395
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)1373
-(2)-(8)-(12)-(0)-(1)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(3)1373
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)-(0)238
-(2)-(8)-(12)-(0)-(1)64
-(2)-(8)-(12)-(0)-(1)-(0)23
-(2)-(8)-(12)-(0)-(1)-(1)170
-(2)-(8)-(12)-(0)-(1)-(2)29
-(2)-(8)-(12)-(0)-(1)-(2)-(0)406
-(2)-(8)-(12)-(0)-(1)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)-(1)64
-(2)-(8)-(12)-(0)-(1)-(0)23
-(2)-(8)-(12)-(0)-(1)-(1)170
-(2)-(8)-(12)-(0)-(1)-(2)29
-(2)-(8)-(12)-(0)-(1)-(2)-(0)416
-(2)-(8)-(12)-(0)-(1)-(2)-(2)33
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(1)64
-(2)-(8)-(12)-(0)-(1)-(0)23
-(2)-(8)-(12)-(0)-(1)-(1)162
-(2)-(8)-(12)-(0)-(1)-(1)-(0)170
-(2)-(8)-(12)-(0)-(1)-(2)29
-(2)-(8)-(12)-(0)-(1)-(2)-(0)1397
-(2)-(8)-(12)-(0)-(1)-(2)-(2)197
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(1)1396
-(2)-(8)-(12)-(0)-(1)183
-(2)-(8)-(12)-(0)-(1)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)153
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(0)1373
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(0)-(1)238
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)-(1)238
-(2)-(8)-(12)-(0)-(1)-(1)277
-(2)-(8)-(12)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)-(2)269
-(2)-(8)-(12)-(0)-(1)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(2)269
-(2)-(8)-(12)-(0)-(1)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(0)1397
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(1)406
-(2)-(8)-(12)-(0)-(1)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(0)1397
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(1)416
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(1)-(0)-(4)1397
-(2)-(8)-(12)-(0)-(1)405
-(2)-(8)-(12)-(0)-(1)64
-(2)-(8)-(12)-(0)-(1)-(0)23
-(2)-(8)-(12)-(0)-(1)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)-(1)79
-(2)-(8)-(12)-(0)-(1)-(2)29
-(2)-(8)-(12)-(0)-(1)-(2)-(0)504
-(2)-(8)-(12)-(0)-(1)-(2)-(2)84
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(1)-(2)-(2)-(4)1396
-(2)-(8)-(12)-(0)-(1)183
-(2)-(8)-(12)-(0)-(1)-(0)179
-(2)-(8)-(12)-(0)-(1)-(0)-(1)129
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)-(1)180
-(2)-(8)-(12)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)-(1)1373
-(2)-(8)-(12)-(0)-(1)-(2)181
-(2)-(8)-(12)-(0)-(1)-(2)-(0)178
-(2)-(8)-(12)-(0)-(1)-(3)50
-(2)-(8)-(12)-(0)-(1)-(3)-(0)34
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(1)-(3)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)89
-(2)-(8)-(12)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)504
-(2)-(8)-(12)-(0)-(1)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1373
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1308
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1373
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1308
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1373
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1373
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)132
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1373
-(2)-(8)-(12)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)1308
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1373
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1355
-(2)-(8)-(12)-(0)-(0)-(3)132
-(2)-(8)-(12)-(0)-(0)-(3)1308
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1373
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)491
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1373
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)504
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1373
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(0)1373
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)-(1)277
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(2)269
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)504
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)491
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)504
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1398
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1398
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(0)-(3)568
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1398
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1399
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)1233
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1398
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)1399
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(2)1373
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1399
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1400
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1398
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1402
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1402
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1230
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1403
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1233
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1398
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)1403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1402
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(0)-(1)1403
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(3)1400
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)1404
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(1)1400
-(2)-(8)-(12)-(0)-(2)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)1405
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)-(2)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(1)1400
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)-(0)1404
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(0)1405
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)920
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)-(1)1403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)84
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(3)-(1)55
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)-(4)1404
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1406
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1406
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(0)-(3)568
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1406
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1399
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)1233
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)1399
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1373
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1399
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1400
-(2)-(8)-(12)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1406
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1402
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1402
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1230
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1403
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1233
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1406
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)1403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)180
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(0)-(1)1403
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(3)1400
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)1404
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(1)1400
-(2)-(8)-(12)-(0)-(2)-(2)-(0)64
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)1405
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(0)1402
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)-(2)-(2)-(0)183
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)179
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)180
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)-(1)1400
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)-(0)1404
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(0)1405
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)920
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)-(0)-(0)-(1)-(1)-(1)1403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(4)1404
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)1401
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)116
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(0)519
-(2)-(8)-(12)-(0)-(0)-(2)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1407
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1407
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)559
-(2)-(8)-(12)-(0)-(0)-(3)568
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1407
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1399
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)559
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1406
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)919
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1399
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1398
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)559
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1399
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1407
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)559
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1402
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)559
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)1402
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1402
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1230
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1400
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)559
-(2)-(8)-(12)-(0)-(2)-(2)-(1)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1406
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)919
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(0)1400
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(1)238
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1402
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)1398
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)559
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1402
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1408
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)532
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1408
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)973
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)532
-(2)-(8)-(12)-(0)-(0)-(3)973
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1409
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)533
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1409
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)958
-(2)-(8)-(7)-(3)973
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(2)533
-(2)-(8)-(12)-(0)-(0)-(3)973
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1410
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1411
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(2)1412
-(2)-(8)-(12)-(0)-(0)-(3)1411
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(1)79
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(4)1239
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)1413
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)1411
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1414
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1239
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)231
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(0)1239
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1411
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(2)-(2)-(3)86
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(0)-(2)970
-(2)-(8)-(12)-(0)-(0)-(3)1411
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(3)-(1)79
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)-(4)1239
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(0)169
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(2)533
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(3)1411
-(2)-(8)-(12)-(0)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)217
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1415
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)94
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(2)522
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)94
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)969
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(2)533
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(2)1412
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(1)-(2)533
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)77
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(2)970
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(3)491
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(0)94
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(2)532
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(1)-(0)-(0)-(1)-(3)491
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(4)94
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1416
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1417
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1417
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)330
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1418
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)270
-(2)-(8)-(12)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)231
-(2)-(8)-(12)-(0)-(0)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1418
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(0)516
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(2)271
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(3)1417
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)-(3)1418
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)181
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)330
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)138
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1418
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1417
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)330
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1419
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1069
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1420
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(2)1069
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)568
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1421
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1422
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1423
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(2)1422
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)568
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)607
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)577
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)607
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1424
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1070
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1425
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)120
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(2)1070
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(1)568
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1240
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)1240
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1426
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)519
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)970
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1427
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)519
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)519
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)519
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)521
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)519
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)521
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)169
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)969
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)519
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)32
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1428
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)539
-(2)-(8)-(12)-(0)-(0)-(2)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1428
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1429
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)1429
-(2)-(8)-(12)-(0)-(0)-(2)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1430
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1429
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1238
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)1429
-(2)-(8)-(12)-(0)-(0)-(2)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1431
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1429
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)1429
-(2)-(8)-(12)-(0)-(0)-(2)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)266
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)-(1)79
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(4)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)266
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1432
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)170
-(2)-(8)-(7)-(3)1319
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)162
-(2)-(8)-(12)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1253
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1318
-(2)-(8)-(12)-(0)-(2)-(2)-(3)403
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1319
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)195
-(2)-(8)-(12)-(0)-(0)-(2)266
-(2)-(8)-(12)-(0)-(0)-(3)1253
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1344
-(2)-(8)-(12)-(0)-(0)-(3)1253
-(2)-(8)-(12)-(0)-(0)-(3)1319
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1433
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1434
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1433
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)1434
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1433
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1435
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1434
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1434
-(2)-(8)-(12)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1436
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)1434
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1435
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1435
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)1435
-(2)-(8)-(12)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1434
-(2)-(8)-(12)-(0)-(0)-(1)-(1)419
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1435
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)231
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(0)1434
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)-(0)-(1)419
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)55
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1437
-(2)-(8)-(12)-(0)-(2)-(2)1438
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)1435
-(2)-(8)-(12)-(0)-(0)-(1)425
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(0)1434
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(3)-(1)419
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1437
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1434
-(2)-(8)-(12)-(0)-(0)-(1)503
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1439
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)256
-(2)-(8)-(12)-(0)-(0)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)1435
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)1434
-(2)-(8)-(12)-(0)-(0)-(0)-(1)419
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)243
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1437
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)1433
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(2)526
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(3)1435
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)1434
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)419
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)1437
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)526
-(2)-(8)-(12)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)231
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(0)256
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(0)-(0)1434
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)-(0)-(1)419
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1440
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1441
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)116
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1441
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)277
-(2)-(8)-(12)-(0)-(0)-(0)-(0)116
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)243
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)-(0)1441
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)238
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1442
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1441
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1443
-(2)-(8)-(12)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(0)919
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)1442
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(1)238
-(2)-(8)-(12)-(0)-(2)-(2)-(1)920
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1442
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)238
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1444
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)919
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1442
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)238
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(1)79
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)16
-(2)-(8)-(12)-(0)-(2)-(2)84
-(2)-(8)-(12)-(0)-(2)-(2)-(3)24
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)79
-(2)-(8)-(12)-(0)-(2)-(2)-(4)116
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1443
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)1441
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)143
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)403
-(2)-(8)-(12)-(0)-(0)-(3)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)-(3)1444
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)16
-(2)-(8)-(12)-(0)-(0)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1445
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1268
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1269
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1268
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1269
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1269
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1268
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1446
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1447
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1268
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1269
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1446
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1269
-(2)-(8)-(12)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(0)-(3)1446
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1447
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1265
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1266
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(1)1266
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)120
-(2)-(8)-(12)-(0)-(1)-(0)180
-(2)-(8)-(12)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)-(1)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)1265
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)-(1)180
-(2)-(8)-(12)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)-(1)33
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(1)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(2)864
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1265
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)1266
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)180
-(2)-(8)-(12)-(0)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)1265
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)178
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)216
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1447
-(2)-(8)-(4)129
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1448
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)257
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1449
-(2)-(8)-(12)-(0)-(2)-(2)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)102
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1450
-(2)-(8)-(12)-(0)-(2)-(2)32
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1451
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1448
-(2)-(8)-(12)-(0)-(2)-(2)-(1)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1452
-(2)-(8)-(12)-(0)-(2)-(2)2
-(2)-(8)-(12)-(0)-(2)-(2)-(0)168
-(2)-(8)-(12)-(0)-(2)-(2)-(1)276
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1453
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1451
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1449
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)32
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1452
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)1450
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)1452
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)1452
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(0)1453
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(2)283
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)-(2)116
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(3)1453
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)1450
-(2)-(8)-(12)-(0)-(0)-(1)120
-(2)-(8)-(12)-(0)-(0)-(1)-(0)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1453
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)-(1)112
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)1449
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)216
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1452
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)86
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1454
-(2)-(8)-(12)-(0)-(2)-(2)218
-(2)-(8)-(12)-(0)-(2)-(2)-(0)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)1455
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)1455
-(2)-(8)-(12)-(0)-(1)-(1)1452
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)1455
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1456
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)1455
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(0)1457
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(2)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)180
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)1457
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1451
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1457
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)-(0)1448
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)-(1)1457
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(3)1455
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)1456
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)1454
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)1455
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)177
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1454
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)76
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1454
-(2)-(8)-(12)-(0)-(0)-(0)-(1)218
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(0)-(1)177
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1452
-(2)-(8)-(12)-(0)-(0)-(1)-(1)1453
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)1452
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1454
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1458
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1253
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1459
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(2)1447
-(2)-(8)-(12)-(0)-(2)-(2)-(3)1253
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1459
-(2)-(8)-(12)-(0)-(0)-(1)216
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)1459
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)539
-(2)-(8)-(12)-(0)-(2)-(2)50
-(2)-(8)-(12)-(0)-(2)-(2)-(0)89
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(0)1253
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(2)526
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)-(3)1459
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1460
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)576
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1034
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1461
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)576
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)113
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1034
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)113
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)1462
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(0)-(1)113
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)576
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1034
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)113
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1463
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1465
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1466
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)170
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1467
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1468
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1462
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)75
-(2)-(8)-(12)-(0)-(0)-(0)267
-(2)-(8)-(12)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(1)-(1)113
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1467
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(0)1034
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)256
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)257
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)1462
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)1468
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)83
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)-(1)1467
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(2)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)-(3)-(1)1468
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1466
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1463
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1465
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1466
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(0)-(1)1462
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1460
-(2)-(8)-(4)129
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)576
-(2)-(8)-(7)61
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1034
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)1469
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1034
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1461
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)1469
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1470
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)576
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)113
-(2)-(8)-(12)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)1034
-(2)-(8)-(12)-(0)-(2)-(2)-(2)116
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)257
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)1469
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)113
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)218
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)-(0)217
-(2)-(8)-(12)-(0)-(2)77
-(2)-(8)-(12)-(0)-(2)-(0)80
-(2)-(8)-(12)-(0)-(2)-(0)-(0)113
-(2)-(8)-(12)-(0)-(2)-(0)-(1)86
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)83
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)257
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(1)1469
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(1)1462
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)218
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)-(0)217
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(0)-(1)113
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)268
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(2)576
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1034
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)268
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1462
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)113
-(2)-(8)-(12)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)113
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1034
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1463
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1465
-(2)-(8)-(12)-(0)-(2)-(2)197
-(2)-(8)-(12)-(0)-(2)-(2)-(0)162
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)129
-(2)-(8)-(12)-(0)-(2)-(2)-(1)243
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1462
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(1)217
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)1464
-(2)-(8)-(12)-(0)-(2)-(0)1466
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1471
-(2)-(8)-(12)-(0)-(2)-(2)243
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)792
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)282
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)1462
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(3)1469
-(2)-(8)-(12)-(0)-(2)-(2)-(1)217
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)1471
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(0)-(2)1472
-(2)-(8)-(12)-(0)-(0)-(3)1463
-(2)-(8)-(12)-(0)-(0)-(3)1471
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1463
-(2)-(8)-(12)-(0)-(0)-(3)-(1)116
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)15
-(2)-(8)-(12)-(0)-(0)-(2)1472
-(2)-(8)-(12)-(0)-(0)-(3)1465
-(2)-(8)-(12)-(0)-(0)-(3)2
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(1)276
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(0)-(2)-(2)217
-(2)-(8)-(12)-(0)-(1)257
-(2)-(8)-(12)-(0)-(1)-(0)267
-(2)-(8)-(12)-(0)-(1)-(1)113
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)267
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)170
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)1467
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)1034
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)256
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)267
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)282
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)283
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)217
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)256
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1469
-(2)-(8)-(12)-(0)-(3)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)283
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)1462
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)243
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(0)267
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(2)-(3)-(1)1469
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)282
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)283
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)218
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)217
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)141
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)282
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(0)282
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)2
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)168
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)276
-(2)-(8)-(12)-(0)-(3)-(0)183
-(2)-(8)-(12)-(0)-(3)-(0)-(0)179
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(2)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(1)257
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(1)283
-(2)-(8)-(12)-(0)-(3)-(0)-(2)181
-(2)-(8)-(12)-(0)-(3)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(0)576
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(2)407
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(3)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(3)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(0)-(3)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(0)-(1)1467
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(1)-(0)-(0)-(1)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)50
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)243
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(0)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(0)792
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(2)282
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(3)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)182
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(1)256
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(1)-(0)178
-(2)-(8)-(12)-(0)-(3)-(0)-(3)-(0)-(2)-(0)-(0)-(1)-(1)-(3)-(1)-(1)217
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1466
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1463
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1465
-(2)-(8)-(12)-(0)-(3)-(0)34
-(2)-(8)-(12)-(0)-(3)-(0)-(0)75
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)1465
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)1466
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(0)-(0)-(1)1462
-(2)-(8)-(12)-(0)-(0)-(1)1469
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)182
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)1463
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)1462
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)218
-(2)-(8)-(12)-(0)-(0)-(0)217
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)656
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1354
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)656
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)524
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1473
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1473
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1473
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)524
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1473
-(2)-(8)-(12)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1474
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1475
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1476
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1475
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1476
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(1)1476
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1475
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)729
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1357
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)729
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)524
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1477
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)120
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(0)1477
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)141
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1477
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)1478
-(2)-(8)-(12)-(0)-(2)-(2)256
-(2)-(8)-(12)-(0)-(2)-(2)-(0)33
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)403
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)116
-(2)-(8)-(12)-(0)-(2)-(2)-(1)33
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(0)1477
-(2)-(8)-(12)-(0)-(2)-(2)-(1)-(2)116
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)516
-(2)-(8)-(12)-(0)-(0)-(2)523
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)524
-(2)-(8)-(12)-(0)-(0)-(3)1478
-(2)-(8)-(12)-(0)-(0)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(3)86
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)1477
-(2)-(8)-(12)-(0)-(0)-(3)-(2)116
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1479
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)63
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1235
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1263
-(2)-(8)-(12)-(0)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(2)1242
-(2)-(8)-(12)-(0)-(0)-(0)-(3)-(3)403
-(2)-(8)-(12)-(0)-(0)-(2)1264
-(2)-(8)-(12)-(0)-(0)-(3)1230
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1480
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1475
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1476
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1475
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)195
-(2)-(8)-(12)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1476
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)78
-(2)-(8)-(12)-(0)-(0)61
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(1)1476
-(2)-(8)-(12)-(0)-(2)50
-(2)-(8)-(12)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1475
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(3)1359
-(2)-(8)-(12)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)32
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)39
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1481
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)524
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1482
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)729
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(1)-(3)524
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1482
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1482
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)576
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1482
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(2)729
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)576
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)524
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1477
-(2)-(8)-(12)-(0)-(0)-(1)-(2)88
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1481
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1482
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1481
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)1482
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1483
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1477
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1482
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1481
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1477
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)1482
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1484
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)524
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1485
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)403
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(2)281
-(2)-(8)-(12)-(0)-(0)-(0)-(1)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(2)656
-(2)-(8)-(12)-(0)-(0)-(1)-(3)403
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(1)-(3)524
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1485
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)1485
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)78
-(2)-(8)-(12)-(0)-(1)-(0)-(0)61
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)-(1)517
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1463
-(2)-(8)-(12)-(0)-(1)-(0)-(1)1485
-(2)-(8)-(12)-(0)-(1)-(0)-(2)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)77
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)1463
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(3)524
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)403
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)243
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1473
-(2)-(8)-(12)-(0)-(0)-(0)-(2)88
-(2)-(8)-(12)-(0)-(0)-(1)403
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1484
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1485
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1484
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(3)39
-(2)-(8)-(12)-(0)-(0)-(3)1485
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1486
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)403
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1473
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1485
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1484
-(2)-(8)-(12)-(0)-(0)-(3)403
-(2)-(8)-(12)-(0)-(0)-(3)1473
-(2)-(8)-(12)-(0)-(0)-(3)32
-(2)-(8)-(12)-(0)-(0)-(3)1485
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)88
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)165
-(2)-(8)-(7)-(3)1487
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1488
-(2)-(8)-(10)1226
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1488
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)84
-(2)-(8)-(12)-(0)-(0)-(1)-(3)24
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(1)-(4)1487
-(2)-(8)-(12)-(0)-(0)-(2)84
-(2)-(8)-(12)-(0)-(0)-(2)-(3)24
-(2)-(8)-(12)-(0)-(0)-(2)-(3)-(1)55
-(2)-(8)-(12)-(0)-(0)-(2)-(4)1487
-(2)-(8)-(12)-(0)-(0)-(2)-(4)1488

LEFT COMMENTS
/* *//** 
 * <p> Helpers for  {@code java.lang.System}. </p> <p> If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to  {@code null} and a message will be written to {@code System.err}. </p> <p> #ThreadSafe# </p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * The prefix String for all Windows OS.
 */
//
//
//
/** 
 * The System property key for the user home directory.
 */
/** 
 * The System property key for the user directory.
 */
/** 
 * The System property key for the Java IO temporary directory.
 */
/** 
 * The System property key for the Java home directory.
 */
/** 
 * <p> The  {@code awt.toolkit} System Property.</p> <p> Holds a class name, on Windows XP this is  {@code sun.awt.windows.WToolkit}. </p> <p> <b>On platforms without a GUI, this value is  {@code null}.</b> </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code file.encoding} System Property.</p> <p> File encoding, such as  {@code Cp1252}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code file.separator} System Property. The file separator is: <ul> <li> {@code "/"}</code> on UNIX</li> <li> {@code "\"}</code> on Windows.</li> </ul> </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.awt.fonts} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.awt.graphicsenv} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.awt.headless} System Property. The value of this property is the String {@code "true"} or{@code "false"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @see #isJavaAwtHeadless()
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.awt.printerjob} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.class.path} System Property. Java class path.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.class.version} System Property. Java class format version number.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.compiler} System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in SunJDKs after 1.2. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2. Not used in Sun versions after 1.2.
 */
/** 
 * <p> The  {@code java.endorsed.dirs} System Property. Path of endorsed directory or directories.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.ext.dirs} System Property. Path of extension directory or directories.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.home} System Property. Java installation directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.io.tmpdir} System Property. Default temp file path.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.library.path} System Property. List of paths to search when loading libraries.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.runtime.name} System Property. Java Runtime Environment name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.runtime.version} System Property. Java Runtime Environment version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.specification.name} System Property. Java Runtime Environment specification name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.specification.vendor} System Property. Java Runtime Environment specification vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.specification.version} System Property. Java Runtime Environment specification version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.util.prefs.PreferencesFactory} System Property. A class name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.vendor} System Property. Java vendor-specific string.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.vendor.url} System Property. Java vendor URL.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.version} System Property. Java version number.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.vm.info} System Property. Java Virtual Machine implementation info.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.name} System Property. Java Virtual Machine implementation name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.name} System Property. Java Virtual Machine specification name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.vendor} System Property. Java Virtual Machine specification vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.version} System Property. Java Virtual Machine specification version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.vendor} System Property. Java Virtual Machine implementation vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.version} System Property. Java Virtual Machine implementation version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code line.separator} System Property. Line separator (<code>&quot;\n&quot;</code> on UNIX).</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.arch} System Property. Operating system architecture.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.name} System Property. Operating system name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.version} System Property. Operating system version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code path.separator} System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.country} or {@code user.region} System Property. User's country code, such as {@code GB}. First in Java version 1.2 as  {@code user.region}. Renamed to  {@code user.country} in 1.4</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code user.dir} System Property. User's current working directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.home} System Property. User's home directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.language} System Property. User's language code, such as {@code "en"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code user.name} System Property. User's account name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.timezone} System Property. For example: {@code "America/Los_Angeles"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
//
//
//
//
/** 
 * <p> Is  {@code true} if this is Java version 1.1 (also 1.1.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.2 (also 1.2.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.3 (also 1.3.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.4 (also 1.4.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.5 (also 1.5.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.6 (also 1.6.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.7 (also 1.7.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 * @since 3.0
 */
//
//
//
//
//
//
//
/** 
 * <p> Is  {@code true} if this is AIX.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is HP-UX.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Irix.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Linux.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Mac.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Mac.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is FreeBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is OpenBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is NetBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is OS/2.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Solaris.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is SunOS.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is a UNIX like system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.1
 */
/** 
 * <p> Is  {@code true} if this is Windows.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 2000.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 2003.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is Windows 2008.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is Windows 95.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows 98.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows ME.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows NT.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows XP.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows Vista.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.4
 */
/** 
 * <p> Is  {@code true} if this is Windows 7.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 8.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.2
 */
/** 
 * <p> Gets the Java home directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Gets the Java IO temporary directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Decides if the Java version matches. </p>
 * @param versionPrefix the prefix for the java version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @param osVersionPrefix the prefix for the version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @return true if matches, or false if not or can't determine
 */
//
/** 
 * <p> Gets a System property, defaulting to  {@code null} if the property cannot be read.</p> <p> If a  {@code SecurityException} is caught, the return value is {@code null} and a message is written to{@code System.err}. </p>
 * @param property the system property name
 * @return the system property value or {@code null} if a security problem occurs
 */
//
/** 
 * <p> Gets the user directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Gets the user home directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * Returns whether the  {@link #JAVA_AWT_HEADLESS} value is {@code true}.
 * @return {@code true} if {@code JAVA_AWT_HEADLESS} is {@code "true"},  {@code false} otherwise.
 * @see #JAVA_AWT_HEADLESS
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> Is the Java version at least the requested version. </p> <p> Example input: </p> <ul> <li> {@code 1.2f} to test for Java 1.2</li><li> {@code 1.31f} to test for Java 1.3.1</li></ul>
 * @param requiredVersion the required version, for example 1.31f
 * @return {@code true} if the actual version is equal or greater than the required version
 */
/** 
 * <p> Decides if the Java version matches. </p> <p> This method is package private instead of private to support unit test invocation. </p>
 * @param version the actual Java version
 * @param versionPrefix the prefix for the expected Java version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>
 * @param osName the actual OS name
 * @param osVersion the actual OS version
 * @param osNamePrefix the prefix for the expected OS name
 * @param osVersionPrefix the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>
 * @param osName the actual OS name
 * @param osNamePrefix the prefix for the expected OS name
 * @return true if matches, or false if not or can't determine
 */
//
/** 
 * <p> SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code SystemUtils.FILE_SEPARATOR}. </p> <p> This constructor is public to permit tools that require a JavaBean instance to operate. </p>
 */
RIGHT COMMENTS
/* *//** 
 * <p> Helpers for  {@code java.lang.System}. </p> <p> If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to  {@code null} and a message will be written to {@code System.err}. </p> <p> #ThreadSafe# </p>
 * @since 1.0
 * @version $Id$
 */
/** 
 * The prefix String for all Windows OS.
 */
//
//
//
/** 
 * The System property key for the user home directory.
 */
/** 
 * The System property key for the user directory.
 */
/** 
 * The System property key for the Java IO temporary directory.
 */
/** 
 * The System property key for the Java home directory.
 */
/** 
 * <p> The  {@code awt.toolkit} System Property.</p> <p> Holds a class name, on Windows XP this is  {@code sun.awt.windows.WToolkit}. </p> <p> <b>On platforms without a GUI, this value is  {@code null}.</b> </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code file.encoding} System Property.</p> <p> File encoding, such as  {@code Cp1252}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code file.separator} System Property. The file separator is: <ul> <li> {@code "/"}</code> on UNIX</li> <li> {@code "\"}</code> on Windows.</li> </ul> </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.awt.fonts} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.awt.graphicsenv} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.awt.headless} System Property. The value of this property is the String {@code "true"} or{@code "false"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @see #isJavaAwtHeadless()
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.awt.printerjob} System Property.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
/** 
 * <p> The  {@code java.class.path} System Property. Java class path.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.class.version} System Property. Java class format version number.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.compiler} System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in SunJDKs after 1.2. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2. Not used in Sun versions after 1.2.
 */
/** 
 * <p> The  {@code java.endorsed.dirs} System Property. Path of endorsed directory or directories.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.ext.dirs} System Property. Path of extension directory or directories.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.home} System Property. Java installation directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.io.tmpdir} System Property. Default temp file path.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.library.path} System Property. List of paths to search when loading libraries.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.runtime.name} System Property. Java Runtime Environment name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.runtime.version} System Property. Java Runtime Environment version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.specification.name} System Property. Java Runtime Environment specification name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.specification.vendor} System Property. Java Runtime Environment specification vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.specification.version} System Property. Java Runtime Environment specification version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.3
 */
/** 
 * <p> The  {@code java.util.prefs.PreferencesFactory} System Property. A class name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> The  {@code java.vendor} System Property. Java vendor-specific string.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.vendor.url} System Property. Java vendor URL.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.version} System Property. Java version number.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code java.vm.info} System Property. Java Virtual Machine implementation info.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.name} System Property. Java Virtual Machine implementation name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.name} System Property. Java Virtual Machine specification name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.vendor} System Property. Java Virtual Machine specification vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.specification.version} System Property. Java Virtual Machine specification version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.vendor} System Property. Java Virtual Machine implementation vendor.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code java.vm.version} System Property. Java Virtual Machine implementation version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.2
 */
/** 
 * <p> The  {@code line.separator} System Property. Line separator (<code>&quot;\n&quot;</code> on UNIX).</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.arch} System Property. Operating system architecture.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.name} System Property. Operating system name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code os.version} System Property. Operating system version.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code path.separator} System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.country} or {@code user.region} System Property. User's country code, such as {@code GB}. First in Java version 1.2 as  {@code user.region}. Renamed to  {@code user.country} in 1.4</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code user.dir} System Property. User's current working directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.home} System Property. User's home directory.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.language} System Property. User's language code, such as {@code "en"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.0
 * @since Java 1.2
 */
/** 
 * <p> The  {@code user.name} System Property. User's account name.</p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since Java 1.1
 */
/** 
 * <p> The  {@code user.timezone} System Property. For example: {@code "America/Los_Angeles"}. </p> <p> Defaults to  {@code null} if the runtime does not have security access to read this property or the property doesnot exist. </p> <p> This value is initialized when the class is loaded. If  {@link System#setProperty(String,String)} or{@link System#setProperties(java.util.Properties)} is called after this class is loaded, the value will be out ofsync with that System property. </p>
 * @since 2.1
 */
//
//
//
//
/** 
 * <p> Is  {@code true} if this is Java version 1.1 (also 1.1.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.2 (also 1.2.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.3 (also 1.3.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.4 (also 1.4.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.5 (also 1.5.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.6 (also 1.6.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 */
/** 
 * <p> Is  {@code true} if this is Java version 1.7 (also 1.7.x versions).</p> <p> The field will return  {@code false} if {@link #JAVA_VERSION} is {@code null}. </p>
 * @since 3.0
 */
//
//
//
//
//
//
//
/** 
 * <p> Is  {@code true} if this is AIX.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is HP-UX.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Irix.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Linux.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Mac.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Mac.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is FreeBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is OpenBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is NetBSD.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is OS/2.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Solaris.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is SunOS.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is a UNIX like system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.1
 */
/** 
 * <p> Is  {@code true} if this is Windows.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 2000.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 2003.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is Windows 2008.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.1
 */
/** 
 * <p> Is  {@code true} if this is Windows 95.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows 98.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows ME.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows NT.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows XP.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.0
 */
//
/** 
 * <p> Is  {@code true} if this is Windows Vista.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 2.4
 */
/** 
 * <p> Is  {@code true} if this is Windows 7.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.0
 */
/** 
 * <p> Is  {@code true} if this is Windows 8.</p> <p> The field will return  {@code false} if {@code OS_NAME} is {@code null}. </p>
 * @since 3.2
 */
/** 
 * <p> Gets the Java home directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Gets the Java IO temporary directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Decides if the Java version matches. </p>
 * @param versionPrefix the prefix for the java version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @param osVersionPrefix the prefix for the version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches.
 * @param osNamePrefix the prefix for the os name
 * @return true if matches, or false if not or can't determine
 */
//
/** 
 * <p> Gets a System property, defaulting to  {@code null} if the property cannot be read.</p> <p> If a  {@code SecurityException} is caught, the return value is {@code null} and a message is written to{@code System.err}. </p>
 * @param property the system property name
 * @return the system property value or {@code null} if a security problem occurs
 */
//
/** 
 * <p> Gets the user directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * <p> Gets the user home directory as a  {@code File}. </p>
 * @return a directory
 * @throws SecurityException if a security manager exists and its {@code checkPropertyAccess} method doesn't allowaccess to the specified system property.
 * @see System#getProperty(String)
 * @since 2.1
 */
/** 
 * Returns whether the  {@link #JAVA_AWT_HEADLESS} value is {@code true}.
 * @return {@code true} if {@code JAVA_AWT_HEADLESS} is {@code "true"},  {@code false} otherwise.
 * @see #JAVA_AWT_HEADLESS
 * @since 2.1
 * @since Java 1.4
 */
/** 
 * <p> Is the Java version at least the requested version. </p> <p> Example input: </p> <ul> <li> {@code 1.2f} to test for Java 1.2</li><li> {@code 1.31f} to test for Java 1.3.1</li></ul>
 * @param requiredVersion the required version, for example 1.31f
 * @return {@code true} if the actual version is equal or greater than the required version
 */
/** 
 * <p> Decides if the Java version matches. </p> <p> This method is package private instead of private to support unit test invocation. </p>
 * @param version the actual Java version
 * @param versionPrefix the prefix for the expected Java version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>
 * @param osName the actual OS name
 * @param osVersion the actual OS version
 * @param osNamePrefix the prefix for the expected OS name
 * @param osVersionPrefix the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */
/** 
 * Decides if the operating system matches. <p> This method is package private instead of private to support unit test invocation. </p>
 * @param osName the actual OS name
 * @param osNamePrefix the prefix for the expected OS name
 * @return true if matches, or false if not or can't determine
 */
//
/** 
 * <p> SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as {@code SystemUtils.FILE_SEPARATOR}. </p> <p> This constructor is public to permit tools that require a JavaBean instance to operate. </p>
 */
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@113d9226
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@63cde372

#TRAVERSE
LEFTCHILD: CLASS: SystemUtils
RIGHTCHILD: CLASS: SystemUtils
##SNODE L: CLASS: SystemUtils
##SNODE L: CLASS: SystemUtils
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@6aff891f
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@3f58e7d5

##TRAVERSE
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/text (Is a directory)
LEFTCHILD: FIELD: JAVA_SPECIFICATION_VENDOR : String
RIGHTCHILD: FIELD: JAVA_SPECIFICATION_VENDOR : String
###SNODE L: FIELD: JAVA_SPECIFICATION_VENDOR : String
###SNODE L: FIELD: JAVA_SPECIFICATION_VENDOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getJavaIoTmpDir()
RIGHTCHILD: METHOD: getJavaIoTmpDir()
###SNODE L: METHOD: getJavaIoTmpDir()
###SNODE L: METHOD: getJavaIoTmpDir()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_NET_BSD : boolean
RIGHTCHILD: FIELD: IS_OS_NET_BSD : boolean
###SNODE L: FIELD: IS_OS_NET_BSD : boolean
###SNODE L: FIELD: IS_OS_NET_BSD : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getJavaHome()
RIGHTCHILD: METHOD: getJavaHome()
###SNODE L: METHOD: getJavaHome()
###SNODE L: METHOD: getJavaHome()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_HOME_KEY : String
RIGHTCHILD: FIELD: USER_HOME_KEY : String
###SNODE L: FIELD: USER_HOME_KEY : String
###SNODE L: FIELD: USER_HOME_KEY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getOSMatches(String,String)
RIGHTCHILD: METHOD: getOSMatches(String,String)
###SNODE L: METHOD: getOSMatches(String,String)
###SNODE L: METHOD: getOSMatches(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getUserDir()
RIGHTCHILD: METHOD: getUserDir()
###SNODE L: METHOD: getUserDir()
###SNODE L: METHOD: getUserDir()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_HOME : String
RIGHTCHILD: FIELD: USER_HOME : String
###SNODE L: FIELD: USER_HOME : String
###SNODE L: FIELD: USER_HOME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS : boolean
###SNODE L: FIELD: IS_OS_WINDOWS : boolean
###SNODE L: FIELD: IS_OS_WINDOWS : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_VERSION : String
RIGHTCHILD: FIELD: JAVA_VM_VERSION : String
###SNODE L: FIELD: JAVA_VM_VERSION : String
###SNODE L: FIELD: JAVA_VM_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_ENDORSED_DIRS : String
RIGHTCHILD: FIELD: JAVA_ENDORSED_DIRS : String
###SNODE L: FIELD: JAVA_ENDORSED_DIRS : String
###SNODE L: FIELD: JAVA_ENDORSED_DIRS : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_NT : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_NT : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_NT : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_NT : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_AWT_HEADLESS : String
RIGHTCHILD: FIELD: JAVA_AWT_HEADLESS : String
###SNODE L: FIELD: JAVA_AWT_HEADLESS : String
###SNODE L: FIELD: JAVA_AWT_HEADLESS : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_CLASS_PATH : String
RIGHTCHILD: FIELD: JAVA_CLASS_PATH : String
###SNODE L: FIELD: JAVA_CLASS_PATH : String
###SNODE L: FIELD: JAVA_CLASS_PATH : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: SystemUtils()
RIGHTCHILD: CONSTRUCTOR: SystemUtils()
###SNODE L: CONSTRUCTOR: SystemUtils()
###SNODE L: CONSTRUCTOR: SystemUtils()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_2 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_2 : boolean
###SNODE L: FIELD: IS_JAVA_1_2 : boolean
###SNODE L: FIELD: IS_JAVA_1_2 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: OS_NAME : String
RIGHTCHILD: FIELD: OS_NAME : String
###SNODE L: FIELD: OS_NAME : String
###SNODE L: FIELD: OS_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_RUNTIME_NAME : String
RIGHTCHILD: FIELD: JAVA_RUNTIME_NAME : String
###SNODE L: FIELD: JAVA_RUNTIME_NAME : String
###SNODE L: FIELD: JAVA_RUNTIME_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_SPECIFICATION_NAME : String
RIGHTCHILD: FIELD: JAVA_VM_SPECIFICATION_NAME : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_NAME : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getUserHome()
RIGHTCHILD: METHOD: getUserHome()
###SNODE L: METHOD: getUserHome()
###SNODE L: METHOD: getUserHome()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_AWT_PRINTERJOB : String
RIGHTCHILD: FIELD: JAVA_AWT_PRINTERJOB : String
###SNODE L: FIELD: JAVA_AWT_PRINTERJOB : String
###SNODE L: FIELD: JAVA_AWT_PRINTERJOB : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_SOLARIS : boolean
RIGHTCHILD: FIELD: IS_OS_SOLARIS : boolean
###SNODE L: FIELD: IS_OS_SOLARIS : boolean
###SNODE L: FIELD: IS_OS_SOLARIS : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_OPEN_BSD : boolean
RIGHTCHILD: FIELD: IS_OS_OPEN_BSD : boolean
###SNODE L: FIELD: IS_OS_OPEN_BSD : boolean
###SNODE L: FIELD: IS_OS_OPEN_BSD : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_VENDOR : String
RIGHTCHILD: FIELD: JAVA_VM_VENDOR : String
###SNODE L: FIELD: JAVA_VM_VENDOR : String
###SNODE L: FIELD: JAVA_VM_VENDOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getOSMatchesName(String)
RIGHTCHILD: METHOD: getOSMatchesName(String)
###SNODE L: METHOD: getOSMatchesName(String)
###SNODE L: METHOD: getOSMatchesName(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_AWT_FONTS : String
RIGHTCHILD: FIELD: JAVA_AWT_FONTS : String
###SNODE L: FIELD: JAVA_AWT_FONTS : String
###SNODE L: FIELD: JAVA_AWT_FONTS : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_UTIL_PREFS_PREFERENCES_FACTORY : String
RIGHTCHILD: FIELD: JAVA_UTIL_PREFS_PREFERENCES_FACTORY : String
###SNODE L: FIELD: JAVA_UTIL_PREFS_PREFERENCES_FACTORY : String
###SNODE L: FIELD: JAVA_UTIL_PREFS_PREFERENCES_FACTORY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_SPECIFICATION_VENDOR : String
RIGHTCHILD: FIELD: JAVA_VM_SPECIFICATION_VENDOR : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_VENDOR : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_VENDOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: FILE_SEPARATOR : String
RIGHTCHILD: FIELD: FILE_SEPARATOR : String
###SNODE L: FIELD: FILE_SEPARATOR : String
###SNODE L: FIELD: FILE_SEPARATOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_IRIX : boolean
RIGHTCHILD: FIELD: IS_OS_IRIX : boolean
###SNODE L: FIELD: IS_OS_IRIX : boolean
###SNODE L: FIELD: IS_OS_IRIX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: FILE_ENCODING : String
RIGHTCHILD: FIELD: FILE_ENCODING : String
###SNODE L: FIELD: FILE_ENCODING : String
###SNODE L: FIELD: FILE_ENCODING : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: AWT_TOOLKIT : String
RIGHTCHILD: FIELD: AWT_TOOLKIT : String
###SNODE L: FIELD: AWT_TOOLKIT : String
###SNODE L: FIELD: AWT_TOOLKIT : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_COUNTRY : String
RIGHTCHILD: FIELD: USER_COUNTRY : String
###SNODE L: FIELD: USER_COUNTRY : String
###SNODE L: FIELD: USER_COUNTRY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_3 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_3 : boolean
###SNODE L: FIELD: IS_JAVA_1_3 : boolean
###SNODE L: FIELD: IS_JAVA_1_3 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VENDOR_URL : String
RIGHTCHILD: FIELD: JAVA_VENDOR_URL : String
###SNODE L: FIELD: JAVA_VENDOR_URL : String
###SNODE L: FIELD: JAVA_VENDOR_URL : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_NAME : String
RIGHTCHILD: FIELD: USER_NAME : String
###SNODE L: FIELD: USER_NAME : String
###SNODE L: FIELD: USER_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_2008 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_2008 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2008 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2008 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_HP_UX : boolean
RIGHTCHILD: FIELD: IS_OS_HP_UX : boolean
###SNODE L: FIELD: IS_OS_HP_UX : boolean
###SNODE L: FIELD: IS_OS_HP_UX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getJavaVersionMatches(String)
RIGHTCHILD: METHOD: getJavaVersionMatches(String)
###SNODE L: METHOD: getJavaVersionMatches(String)
###SNODE L: METHOD: getJavaVersionMatches(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_LIBRARY_PATH : String
RIGHTCHILD: FIELD: JAVA_LIBRARY_PATH : String
###SNODE L: FIELD: JAVA_LIBRARY_PATH : String
###SNODE L: FIELD: JAVA_LIBRARY_PATH : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: getSystemProperty(String)
RIGHTCHILD: METHOD: getSystemProperty(String)
###SNODE L: METHOD: getSystemProperty(String)
###SNODE L: METHOD: getSystemProperty(String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: OS_VERSION : String
RIGHTCHILD: FIELD: OS_VERSION : String
###SNODE L: FIELD: OS_VERSION : String
###SNODE L: FIELD: OS_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_TIMEZONE : String
RIGHTCHILD: FIELD: USER_TIMEZONE : String
###SNODE L: FIELD: USER_TIMEZONE : String
###SNODE L: FIELD: USER_TIMEZONE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_RUNTIME_VERSION : String
RIGHTCHILD: FIELD: JAVA_RUNTIME_VERSION : String
###SNODE L: FIELD: JAVA_RUNTIME_VERSION : String
###SNODE L: FIELD: JAVA_RUNTIME_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VERSION : String
RIGHTCHILD: FIELD: JAVA_VERSION : String
###SNODE L: FIELD: JAVA_VERSION : String
###SNODE L: FIELD: JAVA_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_6 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_6 : boolean
###SNODE L: FIELD: IS_JAVA_1_6 : boolean
###SNODE L: FIELD: IS_JAVA_1_6 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_INFO : String
RIGHTCHILD: FIELD: JAVA_VM_INFO : String
###SNODE L: FIELD: JAVA_VM_INFO : String
###SNODE L: FIELD: JAVA_VM_INFO : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_MAC : boolean
RIGHTCHILD: FIELD: IS_OS_MAC : boolean
###SNODE L: FIELD: IS_OS_MAC : boolean
###SNODE L: FIELD: IS_OS_MAC : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_2003 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_2003 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2003 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2003 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: LINE_SEPARATOR : String
RIGHTCHILD: FIELD: LINE_SEPARATOR : String
###SNODE L: FIELD: LINE_SEPARATOR : String
###SNODE L: FIELD: LINE_SEPARATOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_DIR : String
RIGHTCHILD: FIELD: USER_DIR : String
###SNODE L: FIELD: USER_DIR : String
###SNODE L: FIELD: USER_DIR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_OS2 : boolean
RIGHTCHILD: FIELD: IS_OS_OS2 : boolean
###SNODE L: FIELD: IS_OS_OS2 : boolean
###SNODE L: FIELD: IS_OS_OS2 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_XP : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_XP : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_XP : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_XP : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: OS_NAME_WINDOWS_PREFIX : String
RIGHTCHILD: FIELD: OS_NAME_WINDOWS_PREFIX : String
###SNODE L: FIELD: OS_NAME_WINDOWS_PREFIX : String
###SNODE L: FIELD: OS_NAME_WINDOWS_PREFIX : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_COMPILER : String
RIGHTCHILD: FIELD: JAVA_COMPILER : String
###SNODE L: FIELD: JAVA_COMPILER : String
###SNODE L: FIELD: JAVA_COMPILER : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_2000 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_2000 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2000 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_2000 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isJavaVersionMatch(String,String)
RIGHTCHILD: METHOD: isJavaVersionMatch(String,String)
###SNODE L: METHOD: isJavaVersionMatch(String,String)
###SNODE L: METHOD: isJavaVersionMatch(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_AWT_GRAPHICSENV : String
RIGHTCHILD: FIELD: JAVA_AWT_GRAPHICSENV : String
###SNODE L: FIELD: JAVA_AWT_GRAPHICSENV : String
###SNODE L: FIELD: JAVA_AWT_GRAPHICSENV : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_IO_TMPDIR_KEY : String
RIGHTCHILD: FIELD: JAVA_IO_TMPDIR_KEY : String
###SNODE L: FIELD: JAVA_IO_TMPDIR_KEY : String
###SNODE L: FIELD: JAVA_IO_TMPDIR_KEY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_IO_TMPDIR : String
RIGHTCHILD: FIELD: JAVA_IO_TMPDIR : String
###SNODE L: FIELD: JAVA_IO_TMPDIR : String
###SNODE L: FIELD: JAVA_IO_TMPDIR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_DIR_KEY : String
RIGHTCHILD: FIELD: USER_DIR_KEY : String
###SNODE L: FIELD: USER_DIR_KEY : String
###SNODE L: FIELD: USER_DIR_KEY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_5 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_5 : boolean
###SNODE L: FIELD: IS_JAVA_1_5 : boolean
###SNODE L: FIELD: IS_JAVA_1_5 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VENDOR : String
RIGHTCHILD: FIELD: JAVA_VENDOR : String
###SNODE L: FIELD: JAVA_VENDOR : String
###SNODE L: FIELD: JAVA_VENDOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_7 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_7 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_7 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_7 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_EXT_DIRS : String
RIGHTCHILD: FIELD: JAVA_EXT_DIRS : String
###SNODE L: FIELD: JAVA_EXT_DIRS : String
###SNODE L: FIELD: JAVA_EXT_DIRS : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_ME : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_ME : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_ME : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_ME : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_7 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_7 : boolean
###SNODE L: FIELD: IS_JAVA_1_7 : boolean
###SNODE L: FIELD: IS_JAVA_1_7 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isOSMatch(String,String,String,String)
RIGHTCHILD: METHOD: isOSMatch(String,String,String,String)
###SNODE L: METHOD: isOSMatch(String,String,String,String)
###SNODE L: METHOD: isOSMatch(String,String,String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_98 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_98 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_98 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_98 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: PATH_SEPARATOR : String
RIGHTCHILD: FIELD: PATH_SEPARATOR : String
###SNODE L: FIELD: PATH_SEPARATOR : String
###SNODE L: FIELD: PATH_SEPARATOR : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_SPECIFICATION_NAME : String
RIGHTCHILD: FIELD: JAVA_SPECIFICATION_NAME : String
###SNODE L: FIELD: JAVA_SPECIFICATION_NAME : String
###SNODE L: FIELD: JAVA_SPECIFICATION_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isOSNameMatch(String,String)
RIGHTCHILD: METHOD: isOSNameMatch(String,String)
###SNODE L: METHOD: isOSNameMatch(String,String)
###SNODE L: METHOD: isOSNameMatch(String,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_HOME_KEY : String
RIGHTCHILD: FIELD: JAVA_HOME_KEY : String
###SNODE L: FIELD: JAVA_HOME_KEY : String
###SNODE L: FIELD: JAVA_HOME_KEY : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_MAC_OSX : boolean
RIGHTCHILD: FIELD: IS_OS_MAC_OSX : boolean
###SNODE L: FIELD: IS_OS_MAC_OSX : boolean
###SNODE L: FIELD: IS_OS_MAC_OSX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_8 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_8 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_8 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_8 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_NAME : String
RIGHTCHILD: FIELD: JAVA_VM_NAME : String
###SNODE L: FIELD: JAVA_VM_NAME : String
###SNODE L: FIELD: JAVA_VM_NAME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_HOME : String
RIGHTCHILD: FIELD: JAVA_HOME : String
###SNODE L: FIELD: JAVA_HOME : String
###SNODE L: FIELD: JAVA_HOME : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_SPECIFICATION_VERSION : String
RIGHTCHILD: FIELD: JAVA_SPECIFICATION_VERSION : String
###SNODE L: FIELD: JAVA_SPECIFICATION_VERSION : String
###SNODE L: FIELD: JAVA_SPECIFICATION_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: USER_LANGUAGE : String
RIGHTCHILD: FIELD: USER_LANGUAGE : String
###SNODE L: FIELD: USER_LANGUAGE : String
###SNODE L: FIELD: USER_LANGUAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isJavaVersionAtLeast(JavaVersion)
RIGHTCHILD: METHOD: isJavaVersionAtLeast(JavaVersion)
###SNODE L: METHOD: isJavaVersionAtLeast(JavaVersion)
###SNODE L: METHOD: isJavaVersionAtLeast(JavaVersion)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_95 : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_95 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_95 : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_95 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_4 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_4 : boolean
###SNODE L: FIELD: IS_JAVA_1_4 : boolean
###SNODE L: FIELD: IS_JAVA_1_4 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_UNIX : boolean
RIGHTCHILD: FIELD: IS_OS_UNIX : boolean
###SNODE L: FIELD: IS_OS_UNIX : boolean
###SNODE L: FIELD: IS_OS_UNIX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_AIX : boolean
RIGHTCHILD: FIELD: IS_OS_AIX : boolean
###SNODE L: FIELD: IS_OS_AIX : boolean
###SNODE L: FIELD: IS_OS_AIX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_CLASS_VERSION : String
RIGHTCHILD: FIELD: JAVA_CLASS_VERSION : String
###SNODE L: FIELD: JAVA_CLASS_VERSION : String
###SNODE L: FIELD: JAVA_CLASS_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_SUN_OS : boolean
RIGHTCHILD: FIELD: IS_OS_SUN_OS : boolean
###SNODE L: FIELD: IS_OS_SUN_OS : boolean
###SNODE L: FIELD: IS_OS_SUN_OS : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_WINDOWS_VISTA : boolean
RIGHTCHILD: FIELD: IS_OS_WINDOWS_VISTA : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_VISTA : boolean
###SNODE L: FIELD: IS_OS_WINDOWS_VISTA : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_JAVA_1_1 : boolean
RIGHTCHILD: FIELD: IS_JAVA_1_1 : boolean
###SNODE L: FIELD: IS_JAVA_1_1 : boolean
###SNODE L: FIELD: IS_JAVA_1_1 : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_VM_SPECIFICATION_VERSION : String
RIGHTCHILD: FIELD: JAVA_VM_SPECIFICATION_VERSION : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_VERSION : String
###SNODE L: FIELD: JAVA_VM_SPECIFICATION_VERSION : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isJavaAwtHeadless()
RIGHTCHILD: METHOD: isJavaAwtHeadless()
###SNODE L: METHOD: isJavaAwtHeadless()
###SNODE L: METHOD: isJavaAwtHeadless()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_FREE_BSD : boolean
RIGHTCHILD: FIELD: IS_OS_FREE_BSD : boolean
###SNODE L: FIELD: IS_OS_FREE_BSD : boolean
###SNODE L: FIELD: IS_OS_FREE_BSD : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: JAVA_SPECIFICATION_VERSION_AS_ENUM : JavaVersion
RIGHTCHILD: FIELD: JAVA_SPECIFICATION_VERSION_AS_ENUM : JavaVersion
###SNODE L: FIELD: JAVA_SPECIFICATION_VERSION_AS_ENUM : JavaVersion
###SNODE L: FIELD: JAVA_SPECIFICATION_VERSION_AS_ENUM : JavaVersion
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: OS_ARCH : String
RIGHTCHILD: FIELD: OS_ARCH : String
###SNODE L: FIELD: OS_ARCH : String
###SNODE L: FIELD: OS_ARCH : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: IS_OS_LINUX : boolean
RIGHTCHILD: FIELD: IS_OS_LINUX : boolean
###SNODE L: FIELD: IS_OS_LINUX : boolean
###SNODE L: FIELD: IS_OS_LINUX : boolean
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)477
-(0)-(0)-(1)1489
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)681
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1490
-(2)-(8)-(3)-(2)1491
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1492
-(2)-(8)-(3)-(2)1493
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1494
-(2)-(8)-(3)-(2)1495
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1496
-(2)-(8)-(3)-(2)1497
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1498
-(2)-(8)-(3)-(2)1499
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1500
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1502
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1503
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1504
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1505
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1506
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1507
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1508
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1509
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1510
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1511
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1512
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1513
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1514
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1515
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1516
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1517
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1518
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1519
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1520
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1521
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1522
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1523
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1524
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1525
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1498
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1526
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1496
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1527
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1528
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1529
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1530
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1531
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1532
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1533
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1534
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1535
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1536
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1537
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1538
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)683
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1539
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(0)683
-(2)-(8)-(3)-(2)-(2)331
-(2)-(8)-(3)-(2)-(3)1537
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1540
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1541
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1542
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1543
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1544
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1545
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1546
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1547
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1548
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1549
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1550
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1551
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1552
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1553
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1554
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1555
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1556
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1557
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1558
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1559
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1560
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1561
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1562
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1563
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1564
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1565
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1566
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1567
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1568
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1569
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1570
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1571
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1572
-(2)-(8)-(3)-(2)83
-(2)-(8)-(3)-(2)-(0)80
-(2)-(8)-(3)-(2)-(0)-(0)33
-(2)-(8)-(3)-(2)-(0)-(0)-(2)1501
-(2)-(8)-(3)-(2)-(0)-(0)-(3)1573
-(2)-(8)-(3)-(2)-(0)-(1)63
-(2)-(8)-(3)-(2)-(1)33
-(2)-(8)-(3)-(2)-(1)-(2)1501
-(2)-(8)-(3)-(2)-(1)-(3)1574
-(2)-(8)-(3)-(2)-(2)33
-(2)-(8)-(3)-(2)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(2)-(3)1573
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1575
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1494
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1576
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1492
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1577
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1578
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1579
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1580
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1581
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1501
-(2)-(8)-(3)-(2)-(3)1582
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1583
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)933
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1585
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)936
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1586
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)939
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1587
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)942
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1588
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)943
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1589
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)946
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1590
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1584
-(2)-(8)-(3)-(2)-(3)949
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1591
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1593
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1594
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1595
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1596
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1597
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1598
-(2)-(8)-(3)-(2)106
-(2)-(8)-(3)-(2)-(0)33
-(2)-(8)-(3)-(2)-(0)-(2)1592
-(2)-(8)-(3)-(2)-(0)-(3)1599
-(2)-(8)-(3)-(2)-(1)33
-(2)-(8)-(3)-(2)-(1)-(2)1592
-(2)-(8)-(3)-(2)-(1)-(3)1600
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1601
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1602
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1603
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1604
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1605
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1606
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1607
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1608
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1609
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1610
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1611
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1612
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1613
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1614
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1615
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1616
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1617
-(2)-(8)-(3)-(2)106
-(2)-(8)-(3)-(2)-(0)1591
-(2)-(8)-(3)-(2)-(1)1594
-(2)-(8)-(3)-(2)-(2)1596
-(2)-(8)-(3)-(2)-(2)1598
-(2)-(8)-(3)-(2)-(2)1603
-(2)-(8)-(3)-(2)-(2)1613
-(2)-(8)-(3)-(2)-(2)1615
-(2)-(8)-(3)-(2)-(2)1605
-(2)-(8)-(3)-(2)-(2)1607
-(2)-(8)-(3)-(2)-(2)1609
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1618
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1619
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1621
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1622
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1623
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1624
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)243
-(2)-(8)-(3)-(2)-(3)-(0)1490
-(2)-(8)-(3)-(2)-(3)-(1)1625
-(2)-(8)-(3)-(2)-(3)1626
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1627
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)243
-(2)-(8)-(3)-(2)-(3)-(0)1490
-(2)-(8)-(3)-(2)-(3)-(1)1628
-(2)-(8)-(3)-(2)-(3)1629
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1630
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)243
-(2)-(8)-(3)-(2)-(3)-(0)1490
-(2)-(8)-(3)-(2)-(3)-(1)1628
-(2)-(8)-(3)-(2)-(3)1631
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1632
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1633
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1634
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1592
-(2)-(8)-(3)-(2)-(3)243
-(2)-(8)-(3)-(2)-(3)-(0)1490
-(2)-(8)-(3)-(2)-(3)-(1)1635
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1636
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1637
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1638
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1639
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1640
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1626
-(2)-(8)30
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)102
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1641
-(2)-(8)-(3)-(2)33
-(2)-(8)-(3)-(2)-(2)1620
-(2)-(8)-(3)-(2)-(3)1490
-(2)-(8)-(3)-(2)-(3)1642
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1643
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1489
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1489
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)260
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1644
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1498
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1645
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1489
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1489
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)260
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1644
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1496
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1584
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1646
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1647
-(2)-(8)-(12)-(0)-(0)-(3)1537
-(2)-(8)-(12)-(0)-(0)-(3)1646
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1620
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1648
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1649
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1650
-(2)-(8)-(12)-(0)-(0)-(3)1566
-(2)-(8)-(12)-(0)-(0)-(3)1568
-(2)-(8)-(12)-(0)-(0)-(3)1648
-(2)-(8)-(12)-(0)-(0)-(3)1649
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1592
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1648
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1651
-(2)-(8)-(12)-(0)-(0)-(3)1566
-(2)-(8)-(12)-(0)-(0)-(3)1648
-(2)-(8)90
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(2)1501
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)55
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1652
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)128
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)1644
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)1652
-(2)-(8)-(12)-(0)-(2)127
-(2)-(8)-(12)-(0)-(2)-(0)61
-(2)-(8)-(12)-(0)-(2)-(0)-(0)23
-(2)-(8)-(12)-(0)-(2)-(0)-(1)24
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)715
-(2)-(8)-(12)-(0)-(2)-(0)-(3)126
-(2)-(8)-(12)-(0)-(2)-(1)50
-(2)-(8)-(12)-(0)-(2)-(1)-(0)34
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)33
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(0)260
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(0)-(1)1653
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(2)1654
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)243
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(0)1655
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(1)1652
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)-(3)-(2)1656
-(2)-(8)-(12)-(0)-(2)-(1)-(0)89
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)63
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1657
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1489
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1489
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)260
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1644
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1494
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1658
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)1489
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)84
-(2)-(8)-(12)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(0)-(3)-(1)1489
-(2)-(8)-(12)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(0)-(4)-(0)260
-(2)-(8)-(12)-(0)-(0)-(4)-(2)1644
-(2)-(8)-(12)-(0)-(0)-(4)-(3)1492
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1659
-(2)-(8)-(4)102
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)83
-(2)-(8)-(12)-(0)-(0)-(0)177
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1511
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1511
-(2)-(8)-(12)-(0)-(0)-(1)-(2)103
-(2)-(8)-(12)-(0)-(0)-(1)-(3)33
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)2
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(0)176
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(0)-(1)297
-(2)-(8)-(12)-(0)-(0)-(1)-(3)-(2)88
-(2)-(8)-(12)-(0)-(0)-(2)39
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)682
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)683
-(2)-(8)-(7)-(3)954
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1539
-(2)-(8)-(12)-(0)-(0)-(2)953
-(2)-(8)-(12)-(0)-(0)-(3)954
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)1647
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1660
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1646
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1660
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1660
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)1646
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)1650
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1661
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1662
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1648
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1649
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1661
-(2)-(8)-(12)-(0)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(0)-(1)80
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1662
-(2)-(8)-(12)-(0)-(0)-(1)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)120
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1661
-(2)-(8)-(12)-(0)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1648
-(2)-(8)-(12)-(0)-(0)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)1662
-(2)-(8)-(12)-(0)-(0)-(1)-(2)656
-(2)-(8)-(12)-(0)-(0)-(1)-(3)1649
-(2)-(8)90
-(2)-(8)-(1)22
-(2)-(8)-(2)1651
-(2)-(8)-(4)102
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1661
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1648
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1661
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)89
-(2)-(8)-(12)-(0)-(1)-(0)-(0)39
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1661
-(2)-(8)-(12)-(0)-(0)-(2)656
-(2)-(8)-(12)-(0)-(0)-(3)1648
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)681
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219

LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
RIGHT COMMENTS
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: null
#SNODE[] R: null

#EXTRACT
TREE 186

LEFT COMMENTS
/* *//** 
 * <p>This class assists in validating arguments. The validation methods are based along the following principles: <ul> <li>An invalid  {@code null} argument causes a {@link NullPointerException}.</li> <li>A non- {@code null} argument causes an {@link IllegalArgumentException}.</li> <li>An invalid index into an array/collection/map/string causes an  {@link IndexOutOfBoundsException}.</li> </ul> <p>All exceptions messages are <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax">format strings</a> as defined by the Java platform. For example:</p> <pre> Validate.isTrue(i > 0, "The value must be greater than zero: %d", i); Validate.notNull(surname, "The surname must not be %s", null); </pre> <p>#ThreadSafe#</p>
 * @version $Id$
 * @see java.lang.String#format(String,Object)
 * @since 2.0
 */
/** 
 * Constructor. This class should not normally be instantiated.
 */
//
//
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.isTrue(i > 0.0, "The value must be greater than zero: %d", i);</pre> <p>For performance reasons, the long value is passed as a separate parameter and appended to the exception message only in the case of an error.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param value  the value to append to the message when invalid
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,double)
 * @see #isTrue(boolean,String,Object)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.isTrue(d > 0.0, "The value must be greater than zero: %s", d);</pre> <p>For performance reasons, the double value is passed as a separate parameter and appended to the exception message only in the case of an error.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param value  the value to append to the message when invalid
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,Object)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.isTrue(i >= min && i <= max, "The value must be between %d and %d", min, max); Validate.isTrue(myObject.isOk(), "The object is not okay");</pre>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,double)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.isTrue(i > 0); Validate.isTrue(myObject.isOk());</pre> <p>The message of the exception is &quot;The validated expression is false&quot;.</p>
 * @param expression  the boolean expression to check
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,double)
 * @see #isTrue(boolean,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument is not  {@code null}; otherwise throwing an exception. <pre>Validate.notNull(myObject, "The object must not be null");</pre> <p>The message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the object type
 * @param object  the object to check
 * @return the validated object (never {@code null} for method chaining)
 * @throws NullPointerException if the object is {@code null}
 * @see #notNull(Object,String,Object)
 */
/** 
 * <p>Validate that the specified argument is not  {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.notNull(myObject, "The object must not be null");</pre>
 * @param < T > the object type
 * @param object  the object to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message
 * @return the validated object (never {@code null} for method chaining)
 * @throws NullPointerException if the object is {@code null}
 * @see #notNull(Object)
 */
//
//
/** 
 * <p>Validate that the specified argument array is neither  {@code null}nor a length of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myArray, "The array must not be empty");</pre>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if the array is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument array is neither  {@code null}nor a length of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myArray);</pre> <p>The message in the exception is &quot;The validated array is empty&quot;.
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if the array is empty
 * @see #notEmpty(Object[],String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument collection is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myCollection, "The collection must not be empty");</pre>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated collection (never {@code null} method for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IllegalArgumentException if the collection is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument collection is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myCollection);</pre> <p>The message in the exception is &quot;The validated collection is empty&quot;.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @return the validated collection (never {@code null} method for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IllegalArgumentException if the collection is empty
 * @see #notEmpty(Collection,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument map is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myMap, "The map must not be empty");</pre>
 * @param < T > the map type
 * @param map  the map to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated map (never {@code null} method for chaining)
 * @throws NullPointerException if the map is {@code null}
 * @throws IllegalArgumentException if the map is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument map is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myMap);</pre> <p>The message in the exception is &quot;The validated map is empty&quot;.</p>
 * @param < T > the map type
 * @param map  the map to check, validated not null by this method
 * @return the validated map (never {@code null} method for chaining)
 * @throws NullPointerException if the map is {@code null}
 * @throws IllegalArgumentException if the map is empty
 * @see #notEmpty(Map,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null} nor a length of zero (no characters);otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myString, "The string must not be empty");</pre>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is empty
 * @see #notEmpty(CharSequence)
 */
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null} nor a length of zero (no characters);otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myString);</pre> <p>The message in the exception is &quot;The validated character sequence is empty&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is empty
 * @see #notEmpty(CharSequence,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null}, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception with the specified message. <pre>Validate.notBlank(myString, "The string must not be blank");</pre>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is blank
 * @see #notBlank(CharSequence)
 * @since 3.0
 */
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null}, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception. <pre>Validate.notBlank(myString);</pre> <p>The message in the exception is &quot;The validated character sequence is blank&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is blank
 * @see #notBlank(CharSequence,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the specified argument array is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.noNullElements(myArray, "The array contain null at position %d");</pre> <p>If the array is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the iterationindex of the invalid element is appended to the  {@code values}argument.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Object[])
 */
/** 
 * <p>Validate that the specified argument array is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception. <pre>Validate.noNullElements(myArray);</pre> <p>If the array is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the message in theexception is &quot;The validated array contains null element at index: &quot followed by the index.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Object[],String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument iterable is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.noNullElements(myCollection, "The collection contains null at position %d");</pre> <p>If the iterable is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the iterable has a  {@code null} element, then the iterationindex of the invalid element is appended to the  {@code values}argument.</p>
 * @param < T > the iterable type
 * @param iterable  the iterable to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated iterable (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Iterable)
 */
/** 
 * <p>Validate that the specified argument iterable is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception. <pre>Validate.noNullElements(myCollection);</pre> <p>If the iterable is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the message in theexception is &quot;The validated iterable contains null element at index: &quot followed by the index.</p>
 * @param < T > the iterable type
 * @param iterable  the iterable to check, validated not null by this method
 * @return the validated iterable (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Iterable,String,Object)
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument array; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myArray, 2, "The array index is invalid: ");</pre> <p>If the array is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} for method chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Object[],int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument array; otherwise throwing an exception.</p> <pre>Validate.validIndex(myArray, 2);</pre> <p>If the array is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p> <p>If the index is invalid, then the message of the exception is &quot;The validated array index is invalid: &quot; followed by the index.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param index  the index to check
 * @return the validated array (never {@code null} for method chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Object[],int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument collection; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myCollection, 2, "The collection index is invalid: ");</pre> <p>If the collection is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated collection (never {@code null} for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Collection,int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument collection; otherwise throwing an exception.</p> <pre>Validate.validIndex(myCollection, 2);</pre> <p>If the index is invalid, then the message of the exception is &quot;The validated collection index is invalid: &quot; followed by the index.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param index  the index to check
 * @return the validated collection (never {@code null} for method chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Collection,int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myStr, 2, "The string index is invalid: ");</pre> <p>If the character sequence is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} for method chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(CharSequence,int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception.</p> <pre>Validate.validIndex(myStr, 2);</pre> <p>If the character sequence is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p> <p>If the index is invalid, then the message of the exception is &quot;The validated character sequence index is invalid: &quot; followed by the index.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param index  the index to check
 * @return the validated character sequence (never {@code null} for method chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(CharSequence,int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the stateful condition is  {@code true}; otherwise throwing an exception. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.validState(field > 0); Validate.validState(this.isOk());</pre> <p>The message of the exception is &quot;The validated state is false&quot;.</p>
 * @param expression  the boolean expression to check
 * @throws IllegalStateException if expression is {@code false}
 * @see #validState(boolean,String,Object)
 * @since 3.0
 */
/** 
 * <p>Validate that the stateful condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.validState(this.isOk(), "The state is not OK: %s", myObject);</pre>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalStateException if expression is {@code false}
 * @see #validState(boolean)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence matches the specified regular expression pattern; otherwise throwing an exception.</p> <pre>Validate.matchesPattern("hi", "[a-z]*");</pre> <p>The syntax of the pattern is the one used in the  {@link Pattern} class.</p>
 * @param input  the character sequence to validate, not null
 * @param pattern  the regular expression pattern, not null
 * @throws IllegalArgumentException if the character sequence does not match the pattern
 * @see #matchesPattern(CharSequence,String,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument character sequence matches the specified regular expression pattern; otherwise throwing an exception with the specified message.</p> <pre>Validate.matchesPattern("hi", "[a-z]*", "%s does not match %s", "hi" "[a-z]*");</pre> <p>The syntax of the pattern is the one used in the  {@link Pattern} class.</p>
 * @param input  the character sequence to validate, not null
 * @param pattern  the regular expression pattern, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the character sequence does not match the pattern
 * @see #matchesPattern(CharSequence,String)
 * @since 3.0
 */
//
//
//
/** 
 * <p>Validate that the specified argument object fall between the two inclusive values specified; otherwise, throws an exception.</p> <pre>Validate.inclusiveBetween(0, 2, 1);</pre>
 * @param < T > the type of the argument object
 * @param start  the inclusive start value, not null
 * @param end  the inclusive end value, not null
 * @param value  the object to validate, not null
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #inclusiveBetween(Object,Object,Comparable,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument object fall between the two inclusive values specified; otherwise, throws an exception with the specified message.</p> <pre>Validate.inclusiveBetween(0, 2, 1, "Not in boundaries");</pre>
 * @param < T > the type of the argument object
 * @param start  the inclusive start value, not null
 * @param end  the inclusive end value, not null
 * @param value  the object to validate, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #inclusiveBetween(Object,Object,Comparable)
 * @since 3.0
 */
//
//
//
/** 
 * <p>Validate that the specified argument object fall between the two exclusive values specified; otherwise, throws an exception.</p> <pre>Validate.exclusiveBetween(0, 2, 1);</pre>
 * @param < T > the type of the argument object
 * @param start  the exclusive start value, not null
 * @param end  the exclusive end value, not null
 * @param value  the object to validate, not null
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #exclusiveBetween(Object,Object,Comparable,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument object fall between the two exclusive values specified; otherwise, throws an exception with the specified message.</p> <pre>Validate.exclusiveBetween(0, 2, 1, "Not in boundaries");</pre>
 * @param < T > the type of the argument object
 * @param start  the exclusive start value, not null
 * @param end  the exclusive end value, not null
 * @param value  the object to validate, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #exclusiveBetween(Object,Object,Comparable)
 * @since 3.0
 */
//
//
//
/** 
 * Validates that the argument is an instance of the specified class, if not throws an exception. <p>This method is useful when validating according to an arbitrary class</p> <pre>Validate.isInstanceOf(OkClass.class, object);</pre> <p>The message of the exception is &quot;Expected type: {type}, actual: {obj_type}&quot;</p>
 * @param type  the class the object must be validated against, not null
 * @param obj  the object to check, null throws an exception
 * @throws IllegalArgumentException if argument is not of specified class
 * @see #isInstanceOf(Class,Object,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the argument is an instance of the specified class; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary class</p> <pre>Validate.isInstanceOf(OkClass.classs, object, "Wrong class, object is of class %s", object.getClass().getName());</pre>
 * @param type  the class the object must be validated against, not null
 * @param obj  the object to check, null throws an exception
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if argument is not of specified class
 * @see #isInstanceOf(Class,Object)
 * @since 3.0
 */
//
//
//
/** 
 * Validates that the argument can be converted to the specified class, if not, throws an exception. <p>This method is useful when validating that there will be no casting errors.</p> <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre> <p>The message format of the exception is &quot;Cannot assign {type} to {superType}&quot;</p>
 * @param superType  the class the class must be validated against, not null
 * @param type  the class to check, not null
 * @throws IllegalArgumentException if type argument is not assignable to the specified superType
 * @see #isAssignableFrom(Class,Class,String,Object)
 * @since 3.0
 */
//
/** 
 * Validates that the argument can be converted to the specified class, if not throws an exception. <p>This method is useful when validating if there will be no casting errors.</p> <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre> <p>The message of the exception is &quot;The validated object can not be converted to the&quot; followed by the name of the class and &quot;class&quot;</p>
 * @param superType  the class the class must be validated against, not null
 * @param type  the class to check, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if argument can not be converted to the specified class
 * @see #isAssignableFrom(Class,Class)
 */
//
RIGHT COMMENTS
/* *//** 
 * <p>This class assists in validating arguments. The validation methods are based along the following principles: <ul> <li>An invalid  {@code null} argument causes a {@link NullPointerException}.</li> <li>A non- {@code null} argument causes an {@link IllegalArgumentException}.</li> <li>An invalid index into an array/collection/map/string causes an  {@link IndexOutOfBoundsException}.</li> </ul> <p>All exceptions messages are <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax">format strings</a> as defined by the Java platform. For example:</p> <pre> Validate.isTrue(i > 0, "The value must be greater than zero: %d", i); Validate.notNull(surname, "The surname must not be %s", null); </pre> <p>#ThreadSafe#</p>
 * @version $Id$
 * @see java.lang.String#format(String,Object)
 * @since 2.0
 */
/** 
 * Constructor. This class should not normally be instantiated.
 */
//
//
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.isTrue(i > 0.0, "The value must be greater than zero: %d", i);</pre> <p>For performance reasons, the long value is passed as a separate parameter and appended to the exception message only in the case of an error.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param value  the value to append to the message when invalid
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,double)
 * @see #isTrue(boolean,String,Object)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.isTrue(d > 0.0, "The value must be greater than zero: %s", d);</pre> <p>For performance reasons, the double value is passed as a separate parameter and appended to the exception message only in the case of an error.</p>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param value  the value to append to the message when invalid
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,Object)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.isTrue(i >= min && i <= max, "The value must be between %d and %d", min, max); Validate.isTrue(myObject.isOk(), "The object is not okay");</pre>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean)
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,double)
 */
/** 
 * <p>Validate that the argument condition is  {@code true}; otherwise throwing an exception. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.isTrue(i > 0); Validate.isTrue(myObject.isOk());</pre> <p>The message of the exception is &quot;The validated expression is false&quot;.</p>
 * @param expression  the boolean expression to check
 * @throws IllegalArgumentException if expression is {@code false}
 * @see #isTrue(boolean,String,long)
 * @see #isTrue(boolean,String,double)
 * @see #isTrue(boolean,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument is not  {@code null}; otherwise throwing an exception. <pre>Validate.notNull(myObject, "The object must not be null");</pre> <p>The message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the object type
 * @param object  the object to check
 * @return the validated object (never {@code null} for method chaining)
 * @throws NullPointerException if the object is {@code null}
 * @see #notNull(Object,String,Object)
 */
/** 
 * <p>Validate that the specified argument is not  {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.notNull(myObject, "The object must not be null");</pre>
 * @param < T > the object type
 * @param object  the object to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message
 * @return the validated object (never {@code null} for method chaining)
 * @throws NullPointerException if the object is {@code null}
 * @see #notNull(Object)
 */
//
//
/** 
 * <p>Validate that the specified argument array is neither  {@code null}nor a length of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myArray, "The array must not be empty");</pre>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if the array is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument array is neither  {@code null}nor a length of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myArray);</pre> <p>The message in the exception is &quot;The validated array is empty&quot;.
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if the array is empty
 * @see #notEmpty(Object[],String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument collection is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myCollection, "The collection must not be empty");</pre>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated collection (never {@code null} method for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IllegalArgumentException if the collection is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument collection is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myCollection);</pre> <p>The message in the exception is &quot;The validated collection is empty&quot;.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @return the validated collection (never {@code null} method for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IllegalArgumentException if the collection is empty
 * @see #notEmpty(Collection,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument map is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myMap, "The map must not be empty");</pre>
 * @param < T > the map type
 * @param map  the map to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated map (never {@code null} method for chaining)
 * @throws NullPointerException if the map is {@code null}
 * @throws IllegalArgumentException if the map is empty
 * @see #notEmpty(Object[])
 */
/** 
 * <p>Validate that the specified argument map is neither  {@code null}nor a size of zero (no elements); otherwise throwing an exception. <pre>Validate.notEmpty(myMap);</pre> <p>The message in the exception is &quot;The validated map is empty&quot;.</p>
 * @param < T > the map type
 * @param map  the map to check, validated not null by this method
 * @return the validated map (never {@code null} method for chaining)
 * @throws NullPointerException if the map is {@code null}
 * @throws IllegalArgumentException if the map is empty
 * @see #notEmpty(Map,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null} nor a length of zero (no characters);otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myString, "The string must not be empty");</pre>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is empty
 * @see #notEmpty(CharSequence)
 */
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null} nor a length of zero (no characters);otherwise throwing an exception with the specified message. <pre>Validate.notEmpty(myString);</pre> <p>The message in the exception is &quot;The validated character sequence is empty&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is empty
 * @see #notEmpty(CharSequence,String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null}, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception with the specified message. <pre>Validate.notBlank(myString, "The string must not be blank");</pre>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is blank
 * @see #notBlank(CharSequence)
 * @since 3.0
 */
/** 
 * <p>Validate that the specified argument character sequence is neither  {@code null}, a length of zero (no characters), empty nor whitespace; otherwise throwing an exception. <pre>Validate.notBlank(myString);</pre> <p>The message in the exception is &quot;The validated character sequence is blank&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @return the validated character sequence (never {@code null} method for chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IllegalArgumentException if the character sequence is blank
 * @see #notBlank(CharSequence,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the specified argument array is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.noNullElements(myArray, "The array contain null at position %d");</pre> <p>If the array is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the iterationindex of the invalid element is appended to the  {@code values}argument.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Object[])
 */
/** 
 * <p>Validate that the specified argument array is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception. <pre>Validate.noNullElements(myArray);</pre> <p>If the array is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the message in theexception is &quot;The validated array contains null element at index: &quot followed by the index.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @return the validated array (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Object[],String,Object)
 */
//
//
/** 
 * <p>Validate that the specified argument iterable is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception with the specified message. <pre>Validate.noNullElements(myCollection, "The collection contains null at position %d");</pre> <p>If the iterable is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the iterable has a  {@code null} element, then the iterationindex of the invalid element is appended to the  {@code values}argument.</p>
 * @param < T > the iterable type
 * @param iterable  the iterable to check, validated not null by this method
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated iterable (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Iterable)
 */
/** 
 * <p>Validate that the specified argument iterable is neither {@code null} nor contains any elements that are {@code null}; otherwise throwing an exception. <pre>Validate.noNullElements(myCollection);</pre> <p>If the iterable is  {@code null}, then the message in the exception is &quot;The validated object is null&quot;.</p> <p>If the array has a  {@code null} element, then the message in theexception is &quot;The validated iterable contains null element at index: &quot followed by the index.</p>
 * @param < T > the iterable type
 * @param iterable  the iterable to check, validated not null by this method
 * @return the validated iterable (never {@code null} method for chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IllegalArgumentException if an element is {@code null}
 * @see #noNullElements(Iterable,String,Object)
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument array; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myArray, 2, "The array index is invalid: ");</pre> <p>If the array is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated array (never {@code null} for method chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Object[],int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument array; otherwise throwing an exception.</p> <pre>Validate.validIndex(myArray, 2);</pre> <p>If the array is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p> <p>If the index is invalid, then the message of the exception is &quot;The validated array index is invalid: &quot; followed by the index.</p>
 * @param < T > the array type
 * @param array  the array to check, validated not null by this method
 * @param index  the index to check
 * @return the validated array (never {@code null} for method chaining)
 * @throws NullPointerException if the array is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Object[],int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument collection; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myCollection, 2, "The collection index is invalid: ");</pre> <p>If the collection is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated collection (never {@code null} for chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Collection,int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument collection; otherwise throwing an exception.</p> <pre>Validate.validIndex(myCollection, 2);</pre> <p>If the index is invalid, then the message of the exception is &quot;The validated collection index is invalid: &quot; followed by the index.</p>
 * @param < T > the collection type
 * @param collection  the collection to check, validated not null by this method
 * @param index  the index to check
 * @return the validated collection (never {@code null} for method chaining)
 * @throws NullPointerException if the collection is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(Collection,int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception with the specified message.</p> <pre>Validate.validIndex(myStr, 2, "The string index is invalid: ");</pre> <p>If the character sequence is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param index  the index to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @return the validated character sequence (never {@code null} for method chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(CharSequence,int)
 * @since 3.0
 */
/** 
 * <p>Validates that the index is within the bounds of the argument character sequence; otherwise throwing an exception.</p> <pre>Validate.validIndex(myStr, 2);</pre> <p>If the character sequence is  {@code null}, then the message of the exception is &quot;The validated object is null&quot;.</p> <p>If the index is invalid, then the message of the exception is &quot;The validated character sequence index is invalid: &quot; followed by the index.</p>
 * @param < T > the character sequence type
 * @param chars  the character sequence to check, validated not null by this method
 * @param index  the index to check
 * @return the validated character sequence (never {@code null} for method chaining)
 * @throws NullPointerException if the character sequence is {@code null}
 * @throws IndexOutOfBoundsException if the index is invalid
 * @see #validIndex(CharSequence,int,String,Object)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the stateful condition is  {@code true}; otherwise throwing an exception. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre> Validate.validState(field > 0); Validate.validState(this.isOk());</pre> <p>The message of the exception is &quot;The validated state is false&quot;.</p>
 * @param expression  the boolean expression to check
 * @throws IllegalStateException if expression is {@code false}
 * @see #validState(boolean,String,Object)
 * @since 3.0
 */
/** 
 * <p>Validate that the stateful condition is  {@code true}; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary boolean expression, such as validating a primitive number or using your own custom validation expression.</p> <pre>Validate.validState(this.isOk(), "The state is not OK: %s", myObject);</pre>
 * @param expression  the boolean expression to check
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalStateException if expression is {@code false}
 * @see #validState(boolean)
 * @since 3.0
 */
//
//
/** 
 * <p>Validate that the specified argument character sequence matches the specified regular expression pattern; otherwise throwing an exception.</p> <pre>Validate.matchesPattern("hi", "[a-z]*");</pre> <p>The syntax of the pattern is the one used in the  {@link Pattern} class.</p>
 * @param input  the character sequence to validate, not null
 * @param pattern  the regular expression pattern, not null
 * @throws IllegalArgumentException if the character sequence does not match the pattern
 * @see #matchesPattern(CharSequence,String,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument character sequence matches the specified regular expression pattern; otherwise throwing an exception with the specified message.</p> <pre>Validate.matchesPattern("hi", "[a-z]*", "%s does not match %s", "hi" "[a-z]*");</pre> <p>The syntax of the pattern is the one used in the  {@link Pattern} class.</p>
 * @param input  the character sequence to validate, not null
 * @param pattern  the regular expression pattern, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the character sequence does not match the pattern
 * @see #matchesPattern(CharSequence,String)
 * @since 3.0
 */
//
//
//
/** 
 * <p>Validate that the specified argument object fall between the two inclusive values specified; otherwise, throws an exception.</p> <pre>Validate.inclusiveBetween(0, 2, 1);</pre>
 * @param < T > the type of the argument object
 * @param start  the inclusive start value, not null
 * @param end  the inclusive end value, not null
 * @param value  the object to validate, not null
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #inclusiveBetween(Object,Object,Comparable,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument object fall between the two inclusive values specified; otherwise, throws an exception with the specified message.</p> <pre>Validate.inclusiveBetween(0, 2, 1, "Not in boundaries");</pre>
 * @param < T > the type of the argument object
 * @param start  the inclusive start value, not null
 * @param end  the inclusive end value, not null
 * @param value  the object to validate, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #inclusiveBetween(Object,Object,Comparable)
 * @since 3.0
 */
//
//
//
/** 
 * <p>Validate that the specified argument object fall between the two exclusive values specified; otherwise, throws an exception.</p> <pre>Validate.exclusiveBetween(0, 2, 1);</pre>
 * @param < T > the type of the argument object
 * @param start  the exclusive start value, not null
 * @param end  the exclusive end value, not null
 * @param value  the object to validate, not null
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #exclusiveBetween(Object,Object,Comparable,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the specified argument object fall between the two exclusive values specified; otherwise, throws an exception with the specified message.</p> <pre>Validate.exclusiveBetween(0, 2, 1, "Not in boundaries");</pre>
 * @param < T > the type of the argument object
 * @param start  the exclusive start value, not null
 * @param end  the exclusive end value, not null
 * @param value  the object to validate, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if the value falls outside the boundaries
 * @see #exclusiveBetween(Object,Object,Comparable)
 * @since 3.0
 */
//
//
//
/** 
 * Validates that the argument is an instance of the specified class, if not throws an exception. <p>This method is useful when validating according to an arbitrary class</p> <pre>Validate.isInstanceOf(OkClass.class, object);</pre> <p>The message of the exception is &quot;Expected type: {type}, actual: {obj_type}&quot;</p>
 * @param type  the class the object must be validated against, not null
 * @param obj  the object to check, null throws an exception
 * @throws IllegalArgumentException if argument is not of specified class
 * @see #isInstanceOf(Class,Object,String,Object)
 * @since 3.0
 */
//
/** 
 * <p>Validate that the argument is an instance of the specified class; otherwise throwing an exception with the specified message. This method is useful when validating according to an arbitrary class</p> <pre>Validate.isInstanceOf(OkClass.classs, object, "Wrong class, object is of class %s", object.getClass().getName());</pre>
 * @param type  the class the object must be validated against, not null
 * @param obj  the object to check, null throws an exception
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if argument is not of specified class
 * @see #isInstanceOf(Class,Object)
 * @since 3.0
 */
//
//
//
/** 
 * Validates that the argument can be converted to the specified class, if not, throws an exception. <p>This method is useful when validating that there will be no casting errors.</p> <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre> <p>The message format of the exception is &quot;Cannot assign {type} to {superType}&quot;</p>
 * @param superType  the class the class must be validated against, not null
 * @param type  the class to check, not null
 * @throws IllegalArgumentException if type argument is not assignable to the specified superType
 * @see #isAssignableFrom(Class,Class,String,Object)
 * @since 3.0
 */
//
/** 
 * Validates that the argument can be converted to the specified class, if not throws an exception. <p>This method is useful when validating if there will be no casting errors.</p> <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre> <p>The message of the exception is &quot;The validated object can not be converted to the&quot; followed by the name of the class and &quot;class&quot;</p>
 * @param superType  the class the class must be validated against, not null
 * @param type  the class to check, not null
 * @param message  the {@link String#format(String,Object)} exception message if invalid, not null
 * @param values  the optional values for the formatted exception message, null array not recommended
 * @throws IllegalArgumentException if argument can not be converted to the specified class
 * @see #isAssignableFrom(Class,Class)
 */
//
#SNODE L: CU: null
#SNODE L: CU: null
#SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@5be0cb4
#SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@393db9fa

#TRAVERSE
LEFTCHILD: CLASS: Validate
RIGHTCHILD: CLASS: Validate
##SNODE L: CLASS: Validate
##SNODE L: CLASS: Validate
##SNODE[] L: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@347d6885
##SNODE[] R: [Lch.uzh.ifi.seal.changedistiller.structuredifferencing.StructureNode;@12af47f4

##TRAVERSE
LEFTCHILD: FIELD: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: validIndex(T,int)
RIGHTCHILD: METHOD: validIndex(T,int)
###SNODE L: METHOD: validIndex(T,int)
###SNODE L: METHOD: validIndex(T,int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: matchesPattern(CharSequence,String,String,Object)
RIGHTCHILD: METHOD: matchesPattern(CharSequence,String,String,Object)
###SNODE L: METHOD: matchesPattern(CharSequence,String,String,Object)
###SNODE L: METHOD: matchesPattern(CharSequence,String,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/text (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/time (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/time (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/tuple (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.LEFTCHILD: METHOD: validIndex(T[],int,String,Object)
RIGHTCHILD: METHOD: validIndex(T[],int,String,Object)
###SNODE L: METHOD: validIndex(T[],int,String,Object)
###SNODE L: METHOD: validIndex(T[],int,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:103)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
java.io.FileNotFoundException: /Users/ashleychen/Desktop/testing/1b/src/main/java/org/apache/commons/lang3/tuple (Is a directory)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileReader.<init>(FileReader.java:72)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.getContentOfFile(JavaCompilationUtils.java:76)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaCompilationUtils.compile(JavaCompilationUtils.java:99)
	at ch.uzh.ifi.seal.changedistiller.ast.java.JavaASTHelper.<init>(JavaASTHelper.java:73)
	at sun.reflect.GeneratedConstructorAccessor7.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at com.google.inject.internal.DefaultConstructionProxyFactory$2.newInstance(DefaultConstructionProxyFactory.java:85)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.assistedinject.FactoryProvider2.invoke(FactoryProvider2.java:632)
	at com.sun.proxy.$Proxy8.create(Unknown Source)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:104)
	at ch.uzh.ifi.seal.changedistiller.distilling.FileDistiller.extractClassifiedSourceCodeChanges(FileDistiller.java:84)
	at TestTreeLM.analyzeDistiller(TestTreeLM.java:175)
	at TestTreeLM.main(TestTreeLM.java:93)
	at Test.main(Test.java:40)
LEFTCHILD: METHOD: matchesPattern(CharSequence,String)
RIGHTCHILD: METHOD: matchesPattern(CharSequence,String)
###SNODE L: METHOD: matchesPattern(CharSequence,String)
###SNODE L: METHOD: matchesPattern(CharSequence,String)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: validIndex(T[],int)
RIGHTCHILD: METHOD: validIndex(T[],int)
###SNODE L: METHOD: validIndex(T[],int)
###SNODE L: METHOD: validIndex(T[],int)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_MATCHES_PATTERN_EX : String
RIGHTCHILD: FIELD: DEFAULT_MATCHES_PATTERN_EX : String
###SNODE L: FIELD: DEFAULT_MATCHES_PATTERN_EX : String
###SNODE L: FIELD: DEFAULT_MATCHES_PATTERN_EX : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: exclusiveBetween(T,T,Comparable<T>,String,Object)
RIGHTCHILD: METHOD: exclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE L: METHOD: exclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE L: METHOD: exclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: noNullElements(T,String,Object)
RIGHTCHILD: METHOD: noNullElements(T,String,Object)
###SNODE L: METHOD: noNullElements(T,String,Object)
###SNODE L: METHOD: noNullElements(T,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: noNullElements(T)
RIGHTCHILD: METHOD: noNullElements(T)
###SNODE L: METHOD: noNullElements(T)
###SNODE L: METHOD: noNullElements(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isTrue(boolean)
RIGHTCHILD: METHOD: isTrue(boolean)
###SNODE L: METHOD: isTrue(boolean)
###SNODE L: METHOD: isTrue(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notBlank(T)
RIGHTCHILD: METHOD: notBlank(T)
###SNODE L: METHOD: notBlank(T)
###SNODE L: METHOD: notBlank(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isInstanceOf(Class<?>,Object,String,Object)
RIGHTCHILD: METHOD: isInstanceOf(Class<?>,Object,String,Object)
###SNODE L: METHOD: isInstanceOf(Class<?>,Object,String,Object)
###SNODE L: METHOD: isInstanceOf(Class<?>,Object,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isInstanceOf(Class<?>,Object)
RIGHTCHILD: METHOD: isInstanceOf(Class<?>,Object)
###SNODE L: METHOD: isInstanceOf(Class<?>,Object)
###SNODE L: METHOD: isInstanceOf(Class<?>,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignableFrom(Class<?>,Class<?>)
RIGHTCHILD: METHOD: isAssignableFrom(Class<?>,Class<?>)
###SNODE L: METHOD: isAssignableFrom(Class<?>,Class<?>)
###SNODE L: METHOD: isAssignableFrom(Class<?>,Class<?>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: validIndex(T,int,String,Object)
RIGHTCHILD: METHOD: validIndex(T,int,String,Object)
###SNODE L: METHOD: validIndex(T,int,String,Object)
###SNODE L: METHOD: validIndex(T,int,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: noNullElements(T[],String,Object)
RIGHTCHILD: METHOD: noNullElements(T[],String,Object)
###SNODE L: METHOD: noNullElements(T[],String,Object)
###SNODE L: METHOD: noNullElements(T[],String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notEmpty(T)
RIGHTCHILD: METHOD: notEmpty(T)
###SNODE L: METHOD: notEmpty(T)
###SNODE L: METHOD: notEmpty(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notEmpty(T,String,Object)
RIGHTCHILD: METHOD: notEmpty(T,String,Object)
###SNODE L: METHOD: notEmpty(T,String,Object)
###SNODE L: METHOD: notEmpty(T,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isTrue(boolean,String,long)
RIGHTCHILD: METHOD: isTrue(boolean,String,long)
###SNODE L: METHOD: isTrue(boolean,String,long)
###SNODE L: METHOD: isTrue(boolean,String,long)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: CONSTRUCTOR: Validate()
RIGHTCHILD: CONSTRUCTOR: Validate()
###SNODE L: CONSTRUCTOR: Validate()
###SNODE L: CONSTRUCTOR: Validate()
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isAssignableFrom(Class<?>,Class<?>,String,Object)
RIGHTCHILD: METHOD: isAssignableFrom(Class<?>,Class<?>,String,Object)
###SNODE L: METHOD: isAssignableFrom(Class<?>,Class<?>,String,Object)
###SNODE L: METHOD: isAssignableFrom(Class<?>,Class<?>,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: validState(boolean)
RIGHTCHILD: METHOD: validState(boolean)
###SNODE L: METHOD: validState(boolean)
###SNODE L: METHOD: validState(boolean)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notEmpty(T[])
RIGHTCHILD: METHOD: notEmpty(T[])
###SNODE L: METHOD: notEmpty(T[])
###SNODE L: METHOD: notEmpty(T[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: exclusiveBetween(T,T,Comparable<T>)
RIGHTCHILD: METHOD: exclusiveBetween(T,T,Comparable<T>)
###SNODE L: METHOD: exclusiveBetween(T,T,Comparable<T>)
###SNODE L: METHOD: exclusiveBetween(T,T,Comparable<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notNull(T)
RIGHTCHILD: METHOD: notNull(T)
###SNODE L: METHOD: notNull(T)
###SNODE L: METHOD: notNull(T)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_IS_NULL_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_IS_NULL_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_NULL_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_NULL_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: inclusiveBetween(T,T,Comparable<T>,String,Object)
RIGHTCHILD: METHOD: inclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE L: METHOD: inclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE L: METHOD: inclusiveBetween(T,T,Comparable<T>,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notEmpty(T[],String,Object)
RIGHTCHILD: METHOD: notEmpty(T[],String,Object)
###SNODE L: METHOD: notEmpty(T[],String,Object)
###SNODE L: METHOD: notEmpty(T[],String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_VALID_STATE_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_VALID_STATE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_STATE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_STATE_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NOT_BLANK_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NOT_BLANK_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_BLANK_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NOT_BLANK_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notNull(T,String,Object)
RIGHTCHILD: METHOD: notNull(T,String,Object)
###SNODE L: METHOD: notNull(T,String,Object)
###SNODE L: METHOD: notNull(T,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_IS_TRUE_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_IS_TRUE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_TRUE_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_IS_TRUE_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isTrue(boolean,String,Object)
RIGHTCHILD: METHOD: isTrue(boolean,String,Object)
###SNODE L: METHOD: isTrue(boolean,String,Object)
###SNODE L: METHOD: isTrue(boolean,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: isTrue(boolean,String,double)
RIGHTCHILD: METHOD: isTrue(boolean,String,double)
###SNODE L: METHOD: isTrue(boolean,String,double)
###SNODE L: METHOD: isTrue(boolean,String,double)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: validState(boolean,String,Object)
RIGHTCHILD: METHOD: validState(boolean,String,Object)
###SNODE L: METHOD: validState(boolean,String,Object)
###SNODE L: METHOD: validState(boolean,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: inclusiveBetween(T,T,Comparable<T>)
RIGHTCHILD: METHOD: inclusiveBetween(T,T,Comparable<T>)
###SNODE L: METHOD: inclusiveBetween(T,T,Comparable<T>)
###SNODE L: METHOD: inclusiveBetween(T,T,Comparable<T>)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: notBlank(T,String,Object)
RIGHTCHILD: METHOD: notBlank(T,String,Object)
###SNODE L: METHOD: notBlank(T,String,Object)
###SNODE L: METHOD: notBlank(T,String,Object)
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: FIELD: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE : String
RIGHTCHILD: FIELD: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE : String
###SNODE L: FIELD: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE : String
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
LEFTCHILD: METHOD: noNullElements(T[])
RIGHTCHILD: METHOD: noNullElements(T[])
###SNODE L: METHOD: noNullElements(T[])
###SNODE L: METHOD: noNullElements(T[])
###SNODE[] L: null
###SNODE[] R: null

###EXTRACT
TREE 186
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)1663
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)479
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(1)14
-(0)-(0)-(1)190
-(0)10
-(0)-(0)2
-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)2
-(0)-(0)-(0)-(0)-(0)6
-(0)-(0)-(0)-(0)-(1)14
-(0)-(0)-(0)-(1)1228
-(0)-(0)-(1)1229
-(1)5
-(1)-(2)2
-(1)-(2)-(0)2
-(1)-(2)-(0)-(0)2
-(1)-(2)-(0)-(0)-(0)0
-(1)-(2)-(0)-(0)-(1)1
-(1)-(2)-(0)-(1)3
-(1)-(2)-(1)4
-(2)185
-(2)-(1)19
-(2)-(2)109
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1664
-(2)-(8)-(3)-(2)1665
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1666
-(2)-(8)-(3)-(2)1667
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1668
-(2)-(8)-(3)-(2)1669
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1670
-(2)-(8)-(3)-(2)1671
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1672
-(2)-(8)-(3)-(2)1673
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1674
-(2)-(8)-(3)-(2)1675
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1676
-(2)-(8)-(3)-(2)1677
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1678
-(2)-(8)-(3)-(2)1679
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1680
-(2)-(8)-(3)-(2)1681
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1682
-(2)-(8)-(3)-(2)1683
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1684
-(2)-(8)-(3)-(2)1685
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1686
-(2)-(8)-(3)-(2)1687
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1688
-(2)-(8)-(3)-(2)1689
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1690
-(2)-(8)-(3)-(2)1691
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1692
-(2)-(8)-(3)-(2)1693
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1694
-(2)-(8)-(3)-(2)1695
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1696
-(2)-(8)-(3)-(2)1697
-(2)-(8)30
-(2)-(8)-(1)21
-(2)-(8)-(1)22
-(2)-(8)-(1)23
-(2)-(8)-(2)24
-(2)-(8)-(2)-(1)55
-(2)-(8)-(3)29
-(2)-(8)-(3)-(0)1698
-(2)-(8)-(3)-(2)1699
-(2)-(8)101
-(2)-(8)-(1)19
-(2)-(8)-(2)109
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)219
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)386
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)26
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)171
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(3)97
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)386
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)175
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)174
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)289
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(3)97
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)386
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)386
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1672
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)110
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)232
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)232
-(2)-(8)-(12)-(0)-(0)-(3)1670
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)110
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)232
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)232
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)232
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)2
-(2)-(8)-(12)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(0)-(0)-(1)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1680
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1663
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1702
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1702
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)1702
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1702
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1663
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1702
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)1702
-(2)-(8)-(12)-(0)-(0)-(3)1684
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)190
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)229
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)229
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)229
-(2)-(8)-(12)-(0)-(0)-(2)281
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)229
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)190
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)229
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)229
-(2)-(8)-(12)-(0)-(0)-(3)1686
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(0)-(2)116
-(2)-(8)-(12)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)565
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1029
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1029
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(0)-(3)1682
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1703
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)454
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)563
-(2)-(8)-(12)-(0)-(0)-(2)1238
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)565
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1703
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1703
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(0)-(3)1678
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)921
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(1)129
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)-(1)180
-(2)-(8)-(12)-(0)-(1)-(0)178
-(2)-(8)-(12)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)182
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)220
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(1)178
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(0)1704
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(2)307
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)327
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(0)168
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(3)1704
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)921
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)1674
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)921
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)482
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1350
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)1350
-(2)-(8)-(12)-(0)64
-(2)-(8)-(12)-(0)-(1)129
-(2)-(8)-(12)-(0)-(2)29
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(2)-(2)86
-(2)-(8)-(12)-(0)183
-(2)-(8)-(12)-(0)-(0)179
-(2)-(8)-(12)-(0)-(0)-(0)23
-(2)-(8)-(12)-(0)-(0)-(1)59
-(2)-(8)-(12)-(0)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)479
-(2)-(8)-(12)-(0)-(0)-(1)-(1)58
-(2)-(8)-(12)-(0)-(0)-(2)29
-(2)-(8)-(12)-(0)-(0)-(2)-(0)1705
-(2)-(8)-(12)-(0)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(0)1350
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(2)507
-(2)-(8)-(12)-(0)-(1)33
-(2)-(8)-(12)-(0)-(1)-(0)1705
-(2)-(8)-(12)-(0)-(1)-(2)510
-(2)-(8)-(12)-(0)-(2)181
-(2)-(8)-(12)-(0)-(2)-(0)178
-(2)-(8)-(12)-(0)-(3)50
-(2)-(8)-(12)-(0)-(3)-(0)77
-(2)-(8)-(12)-(0)-(3)-(0)-(0)80
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)1705
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)513
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)63
-(2)-(8)-(12)-(0)-(3)-(0)-(1)50
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)64
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)23
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)162
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(1)-(0)-(1)96
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)29
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(0)1704
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(0)195
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(2)300
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)327
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(0)168
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(2)289
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(2)-(2)-(3)-(3)178
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)-(4)-(3)1704
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1350
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)921
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)482
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1350
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)921
-(2)-(8)-(12)-(0)-(0)-(3)1350
-(2)-(8)-(12)-(0)-(0)-(3)1676
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)-(1)2
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)220
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(1)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)220
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)162
-(2)-(8)-(4)-(0)24
-(2)-(8)-(4)-(0)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)162
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)245
-(2)-(8)-(7)-(3)220
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1706
-(2)-(8)-(12)-(0)-(0)-(3)220
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(0)-(3)1688
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(3)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1663
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1702
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)1702
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)1702
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)559
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)1702
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)59
-(2)-(8)-(6)-(2)-(0)24
-(2)-(8)-(6)-(2)-(0)-(1)1663
-(2)-(8)-(6)-(2)-(1)58
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)1702
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1706
-(2)-(8)-(12)-(0)-(0)-(3)1702
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(0)-(3)1692
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(3)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)34
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)109
-(2)-(8)-(12)-(0)-(0)-(2)110
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)314
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)314
-(2)-(8)-(12)-(0)-(0)-(1)-(1)33
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)565
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)116
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)317
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)565
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1706
-(2)-(8)-(4)24
-(2)-(8)-(4)-(1)245
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(6)-(2)24
-(2)-(8)-(6)-(2)-(1)517
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)565
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)129
-(2)-(8)-(7)-(3)314
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)89
-(2)-(8)-(12)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(2)1706
-(2)-(8)-(12)-(0)-(0)-(3)565
-(2)-(8)-(12)-(0)-(0)-(3)314
-(2)-(8)-(12)-(0)-(0)-(3)1690
-(2)-(8)-(12)-(0)-(0)-(3)33
-(2)-(8)-(12)-(0)-(0)-(3)-(0)168
-(2)-(8)-(12)-(0)-(0)-(3)-(2)289
-(2)-(8)-(12)-(0)-(0)-(3)-(3)314
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1707
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)1694
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1707
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)102
-(2)-(8)-(7)-(3)1700
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)1700
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)133
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1708
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1257
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1229
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1709
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1257
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1193
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1668
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1193
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1257
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1708
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)517
-(2)-(8)-(7)-(3)1193
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1257
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1229
-(2)-(8)-(12)-(0)-(0)-(0)-(2)1709
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1257
-(2)-(8)-(12)-(0)-(0)-(0)-(3)1193
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)13May 05, 2017 3:32:28 PM TestTreeLM main
INFO: Loaded 36 files containing 48684 nodes
6
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1710
-(2)-(8)-(4)91
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1023
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1666
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)342
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1710
-(2)-(8)-(4)91
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1023
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)180
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)141
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1711
-(2)-(8)-(4)91
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1023
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)97
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1664
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)97
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)484
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)342
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1711
-(2)-(8)-(4)91
-(2)-(8)-(6)246
-(2)-(8)-(6)-(1)245
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)484
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)245
-(2)-(8)-(7)-(3)342
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)1023
-(2)-(8)-(7)-(1)-(1)24
-(2)-(8)-(7)-(1)-(1)-(1)245
-(2)-(8)-(7)-(3)97
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)106
-(2)-(8)-(12)-(0)-(0)-(0)257
-(2)-(8)-(12)-(0)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(0)-(0)-(3)484
-(2)-(8)-(12)-(0)-(0)-(0)-(1)86
-(2)-(8)-(12)-(0)-(0)-(1)277
-(2)-(8)-(12)-(0)-(0)-(1)-(0)33
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(0)97
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(2)1027
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(3)342
-(2)-(8)-(12)-(0)-(0)-(1)-(1)86
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1712
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(0)-(2)274
-(2)-(8)-(12)-(0)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1698
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)82
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(1)1713
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(0)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(0)-(0)500
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(0)-(2)154
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)1712
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)500
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)107
-(2)-(8)-(12)-(0)-(0)-(0)-(2)274
-(2)-(8)-(12)-(0)-(0)-(0)-(3)500
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)69
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)1714
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1714
-(2)-(8)-(12)-(0)-(0)-(0)-(2)69
-(2)-(8)-(12)-(0)-(0)-(0)-(3)107
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1696
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)83
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)80
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)-(1)63
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(1)1713
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(0)107
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)-(2)82
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)1714
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)82
-(2)-(8)90
-(2)-(8)-(1)19
-(2)-(8)-(1)22
-(2)-(8)-(2)69
-(2)-(8)-(4)91
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)1714
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)59
-(2)-(8)-(7)-(1)-(0)24
-(2)-(8)-(7)-(1)-(0)-(1)57
-(2)-(8)-(7)-(1)-(1)58
-(2)-(8)-(7)-(3)107
-(2)-(8)-(7)61
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)55
-(2)-(8)-(7)-(3)1701
-(2)-(8)-(7)249
-(2)-(8)-(7)-(0)23
-(2)-(8)-(7)-(1)24
-(2)-(8)-(7)-(1)-(1)96
-(2)-(8)-(7)-(3)327
-(2)-(8)-(12)50
-(2)-(8)-(12)-(0)77
-(2)-(8)-(12)-(0)-(0)80
-(2)-(8)-(12)-(0)-(0)-(0)33
-(2)-(8)-(12)-(0)-(0)-(0)-(0)1714
-(2)-(8)-(12)-(0)-(0)-(0)-(2)69
-(2)-(8)-(12)-(0)-(0)-(0)-(3)107
-(2)-(8)-(12)-(0)-(0)-(1)39
-(2)-(8)-(12)-(0)-(1)50
-(2)-(8)-(12)-(0)-(1)-(0)136
-(2)-(8)-(12)-(0)-(1)-(0)-(0)84
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)24
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)239
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)33
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)55
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)134
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)1701
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)327

=======Iteration 0==============
Log-Prob: -2855.15 (3041 nodes with avg log-prob -0.939)
Size Stats: 1-5:761 6-15:75 16-30:2 >30:2
Avg Tree Size: 4.62
=======Iteration 1==============
Log-Prob: -2369.07 (3041 nodes with avg log-prob -0.779)
Size Stats: 1-5:637 6-15:71 16-30:1 >30:3
Avg Tree Size: 5.27
=======Iteration 2==============
Log-Prob: -2225.74 (3041 nodes with avg log-prob -0.732)
Size Stats: 1-5:607 6-15:63 16-30:1 >30:4
Avg Tree Size: 5.50
=======Iteration 3==============
Log-Prob: -2033.98 (3041 nodes with avg log-prob -0.669)
Size Stats: 1-5:564 6-15:62 16-30:0 >30:2
Avg Tree Size: 5.84
=======Iteration 4==============
Log-Prob: -1896.02 (3041 nodes with avg log-prob -0.623)
Size Stats: 1-5:531 6-15:61 16-30:3 >30:2
Avg Tree Size: 6.09
=======Iteration 5==============
Log-Prob: -1845.08 (3041 nodes with avg log-prob -0.607)
Size Stats: 1-5:519 6-15:60 16-30:2 >30:3
Avg Tree Size: 6.20
=======Iteration 6==============
Log-Prob: -1753.45 (3041 nodes with avg log-prob -0.577)
Size Stats: 1-5:516 6-15:56 16-30:3 >30:2
Avg Tree Size: 6.27
=======Iteration 7==============
Log-Prob: -1647.09 (3041 nodes with avg log-prob -0.542)
Size Stats: 1-5:491 6-15:63 16-30:3 >30:3
Avg Tree Size: 6.43
=======Iteration 8==============
Log-Prob: -1619.17 (3041 nodes with avg log-prob -0.532)
Size Stats: 1-5:482 6-15:60 16-30:1 >30:2
Avg Tree Size: 6.58
=======Iteration 9==============
Log-Prob: -1560.97 (3041 nodes with avg log-prob -0.513)
Size Stats: 1-5:477 6-15:56 16-30:2 >30:2
Avg Tree Size: 6.66
May 05, 2017 3:32:31 PM TestTreeLM main
INFO: Sampling complete. Outputing burnin grammar...
May 05, 2017 3:32:31 PM codemining.util.serialization.KryoSerialization serialize
INFO: Serializing object of type codemining.lm.tsg.FormattedTSGrammar to tsg.ser
May 05, 2017 3:32:31 PM TestTreeLM main
INFO: Serialize grammar complete
May 05, 2017 3:32:31 PM codemining.util.serialization.KryoSerialization serialize
INFO: Serializing object of type codemining.lm.tsg.samplers.CollapsedGibbsSampler to tsgSamplerCheckpoint.ser
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: expression
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: matches
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: reflect
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Method
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 2: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 2: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalArgumentException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: lang
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: org
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: apache
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: commons
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: lang3
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Boolean
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Short
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Byte
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Float
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Double
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Character
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Long
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: reflect
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Method
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: regex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: compareTo
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: compareTo
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: start
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Integer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: invoke
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getComponentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAnnotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Integer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TYPE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isInstance
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: start
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "null"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getClass
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 7: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 5: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 3: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 1: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: start
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "null"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Double
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getClass
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "null"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ArrayUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: addAll
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Integer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: part1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: name
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 127
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 11: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ArrayUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: add
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Integer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 11: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ArrayUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: add
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Integer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: found
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array contains null element at index: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Expected type: %s, actual: %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: invoke
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_BLANK_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence is blank"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: reflect
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: InvocationTargetException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PackageDeclaration,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TO_STRING_STYLE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: serialVersionUID
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 1L
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setDefaultFullDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayContentDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseShortClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseIdentityHashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setContentStart
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "("
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setContentEnd
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ")"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setFieldSeparator
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ", "
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayStart
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "["
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayEnd
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "]"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Override
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MarkerAnnotation,typeName]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getShortClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: cls
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ClassUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getAllInterfaces
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: cls
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: SuppressWarnings
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "unchecked"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleMemberAnnotation,typeName]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleMemberAnnotation,value]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: found
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: found
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ""
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: insert
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.CharacterLiteral,escapedValue]
spValue: '@'
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Override
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MarkerAnnotation,typeName]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: appendDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringBuffer
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: buffer
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: fieldName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,rightOperand]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: appendDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: buffer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: fieldName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,anonymousClassDeclaration]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation %s with null annotationType()"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation %s with null annotationType()"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isValidAnnotationMemberType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getReturnType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: invoke
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: memberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getReturnType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalAccessException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: InvocationTargetException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation method %s returned null"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashMember
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TO_STRING_STYLE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: append
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: build
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isValidAnnotationMemberType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isPrimitive
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEnum
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashMember
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: part1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: name
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 127
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,rightOperand]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: memberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAnnotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationArrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 97: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 95: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 94: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 93: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 92: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 91: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 78: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 77: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationArrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberHash
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeDeclaration,name]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 1: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CompilationUnit,package]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PackageDeclaration,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The value %s is not in the specified exclusive range of %s to %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The value %s is not in the specified inclusive range of %s to %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_MATCHES_PATTERN_EX
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The string %s does not match the pattern %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_NULL_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated object is null"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_TRUE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated expression is false"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection contains null element at index: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated map is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_STATE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated state is false"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Cannot assign a %s to a %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_INSTANCE_OF_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Expected type: %s, actual: %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Long
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_NULL_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 516: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 492: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 487: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 482: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 480: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 473: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_BLANK_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 395: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 371: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 366: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 353: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hasNext
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: next
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 272: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 256: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validState
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validState
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: matchesPattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_MATCHES_PATTERN_EX
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: matchesPattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: inclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Comparable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: inclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: exclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: exclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isInstanceOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isInstanceOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeDeclaration,name]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 1: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CompilationUnit,package]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: regex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PackageDeclaration,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The value %s is not in the specified exclusive range of %s to %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The value %s is not in the specified inclusive range of %s to %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_MATCHES_PATTERN_EX
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The string %s does not match the pattern %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_NULL_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated object is null"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_TRUE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated expression is false"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array contains null element at index: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection contains null element at index: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_BLANK_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence is blank"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated map is empty"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated array index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated character sequence index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated collection index is invalid: %d"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_STATE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "The validated state is false"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_ASSIGNABLE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Cannot assign a %s to a %s"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Long
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isTrue
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_NULL_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 548: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfMay 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 524: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 515: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 513: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 506: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 395: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 368: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 362: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 349: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 262: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 260: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at TesStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
t.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 250: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 245: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 236: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notBlank
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_BLANK_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterator
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hasNext
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: it
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: next
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: noNullElements
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validState
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validState
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: matchesPattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_MATCHES_PATTERN_EX
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: matchesPattern
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: input
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: pattern
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: inclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: inclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: exclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: exclusiveBetween
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isInstanceOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isInstanceOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: obj
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: superType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeDeclaration,name]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 1: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CompilationUnit,package]
May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: reflect
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: InvocationTargetException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: java
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: util
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: lang3
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ImportDeclaration,name]
SPID: onDemand
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,onDemand]
spValue: false
GOOD
SPID: static
sp: SimpleProperty[org.eclipse.jdt.core.dom.ImportDeclaration,static]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PackageDeclaration,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TO_STRING_STYLE
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringStyle
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: serialVersionUID
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 1L
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setDefaultFullDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayContentDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseShortClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setUseIdentityHashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setContentStart
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "("
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setContentEnd
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ")"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setFieldSeparator
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ", "
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayStart
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "["
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: setArrayEnd
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "]"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Initializer,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Override
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MarkerAnnotation,typeName]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getShortClassName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: cls
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ClassUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getAllInterfaces
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: cls
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAssignableFrom
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: iface
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: SuppressWarnings
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "unchecked"
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleMemberAnnotation,typeName]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleMemberAnnotation,value]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: found
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: ""
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,thenExpression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ConditionalExpression,elseExpression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: insert
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.CharacterLiteral,escapedValue]
spValue: '@'
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Override
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MarkerAnnotation,typeName]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: appendDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: StringBuffer
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: buffer
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: fieldName
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,rightOperand]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: appendDetail
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: buffer
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: fieldName
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SuperMethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,anonymousClassDeclaration]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: AnnotationUtils
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation %s with null annotationType()"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Validate
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notNull
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation %s with null annotationType()"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isValidAnnotationMemberType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getReturnType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: invoke
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: invoke
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: memberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getReturnType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: v2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalAccessException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: InvocationTargetException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: escapedValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.StringLiteral,escapedValue]
spValue: "Annotation method %s returned null"
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashMember
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: result
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: toString
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ToStringBuilder
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: TO_STRING_STYLE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationStatement,type]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getDeclaredMethods
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: append
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TryStatement,body]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,parameter]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.EnhancedForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: builder
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: build
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isValidAnnotationMemberType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isPrimitive
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEnum
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeLiteral,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashMember
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: name
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getClass
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InstanceofExpression,rightOperand]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: memberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isArray
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keywordMay 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 73: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)


ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isAnnotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationArrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: annotationArrayMemberEquals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationFragment,initializer]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.VariableDeclarationExpression,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PostfixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]
DESCRIPTOR GET(i): ChildProperty[org.eMay 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 71: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 68: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 66: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:553)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 28: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 1: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree null java.lang.NullPointerException
	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:561)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtrclipse.jdt.core.dom.ArrayAccess,index]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.PrefixExpression,operand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ForStatement,body]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberHash
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: o
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CompilationUnit,package]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Arrays
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: booleanValue
sp: SimpleProperty[org.eclipse.jdt.core.dom.BooleanLiteral,booleanValue]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: a2
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,array]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayAccess,index]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREEactor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

May 05, 2017 3:32:32 PM codemining.ast.java.JavaAstTreeExtractor getASTFromTree
WARNING: 0: Failed to get ASTNode for subtree Operation only supported in JLS2, JLS3 and JLS4 ASTs java.lang.UnsupportedOperationException: Operation only supported in JLS2, JLS3 and JLS4 ASTs
	at org.eclipse.jdt.core.dom.ASTNode.supportedOnlyIn2_3_4(ASTNode.java:2002)
	at org.eclipse.jdt.core.dom.ArrayType.setComponentType(ArrayType.java:310)
	at org.eclipse.jdt.core.dom.ArrayType.internalGetSetChildProperty(ArrayType.java:200)
	at org.eclipse.jdt.core.dom.ASTNode.setStructuralProperty(ASTNode.java:1736)
	at codemining.ast.java.JavaAstTreeExtractor.getASTNodeForTreeNode(JavaAstTreeExtractor.java:552)
	at codemining.ast.java.JavaAstTreeExtractor.getASTFromTree(JavaAstTreeExtractor.java:510)
	at codemining.ast.java.AbstractJavaTreeExtractor.getCodeFromTree(AbstractJavaTreeExtractor.java:64)
	at codemining.lm.tsg.FormattedTSGrammar.toString(FormattedTSGrammar.java:112)
	at TestTreeLM.main(TestTreeLM.java:163)
	at Test.main(Test.java:40)

NODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: size
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: i
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: array
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,qualifier]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.QualifiedName,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ThrowStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: componentType
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: equals
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ArrayType,componentType]
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,leftHandSide]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.Assignment,rightHandSide]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ExpressionStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: token
sp: SimpleProperty[org.eclipse.jdt.core.dom.NumberLiteral,token]
spValue: 0
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,exception]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CatchClause,body]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: expression
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: primitiveTypeCode
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: index
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: type
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: start
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Method
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: end
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: map
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: name
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: part1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.CastExpression,expression]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: part1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: arrayMemberHash
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getClass
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getComponentType
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: part1
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: hashCode
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Comparable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.WildcardType,bound]
SPID: upperBound
sp: SimpleProperty[org.eclipse.jdt.core.dom.WildcardType,upperBound]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ParameterizedType,type]
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: validIndex
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: chars
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: notEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.TypeParameter,name]
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,leftOperand]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.InfixExpression,rightOperand]
SPID: operator
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: isEmpty
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.IfStatement,thenStatement]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: collection
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ReturnStatement,expression]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,name]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,returnType2]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodDeclaration,body]
SPID: constructor
sp: SimpleProperty[org.eclipse.jdt.core.dom.MethodDeclaration,constructor]
spValue: false
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: keyword
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,type]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,name]
SPID: varargs
sp: SimpleProperty[org.eclipse.jdt.core.dom.SingleVariableDeclaration,varargs]
spValue: true
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: T
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Annotation
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalArgumentException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Object
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: NullPointerException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Class
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: RuntimeException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: CharSequence
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IndexOutOfBoundsException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalStateException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Exception
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Iterable
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: m
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: getParameterTypes
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: length
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.FieldAccess,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: values
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalArgumentException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: ex
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_VALID_STATE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: DEFAULT_IS_TRUE_EX_MESSAGE
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: IllegalArgumentException
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.SimpleType,name]
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: String
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: format
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: message
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: Double
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: valueOf
GOOD
ASTNODE FOR TREENODE SUCCESS
SPID: identifier
sp: SimpleProperty[org.eclipse.jdt.core.dom.SimpleName,identifier]
spValue: value
GOOD
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,expression]
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.MethodInvocation,name]
ASTNODE FOR TREENODE SUCCESS
DESCRIPTOR GET(i): ChildProperty[org.eclipse.jdt.core.dom.ClassInstanceCreation,type]
ASTNODE FOR TREENODE SUCCESS
Working: ********
Type : 27 Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:expression, ]
-(1)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
_________________________________
expression == false
>Prob 0.42857142857142855 (12)
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
_________________________________
MISSING() == false
>Prob 0.2857142857142857 (8)
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:Pattern, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:matches, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(1)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
_________________________________
Pattern.matches(pattern,input) == false
>Prob 0.14285714285714285 (4)
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : ArrayAccess Child Props: [array, index, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:i, ]
-(1)Type : NullLiteral
_________________________________
array[i] == null
>Prob 0.07142857142857142 (2)
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(1)Type : NullLiteral
_________________________________
type == null
>Prob 0.03571428571428571 (1)
----------------------------------------
Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(1)Type : NullLiteral
_________________________________
chars == null
>Prob 0.03571428571428571 (1)
********
Type : 26 Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]:
----------------------------------------
Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:reflect, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:Method, ]
_________________________________
import DUMMY_QNAME.DUMMY.reflect.Method;

>Prob 0.5 (1)
----------------------------------------
Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
_________________________________
import DUMMY_QNAME.DUMMY;

>Prob 0.5 (1)
********
Type : 11 Child Props: [type, expression, ]:
----------------------------------------
Type : CastExpression Child Props: [type, expression, ]
-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(1)Type : SimpleName Simple Props: [identifier:o1, ]
_________________________________
(DUMMYTYPE[])o1
>Prob 0.3333333333333333 (17)
----------------------------------------
Type : CastExpression Child Props: [type, expression, ]
-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(1)Type : SimpleName Simple Props: [identifier:o, ]
_________________________________
(DUMMYTYPE[])o
>Prob 0.3333333333333333 (17)
----------------------------------------
Type : CastExpression Child Props: [type, expression, ]
-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(1)Type : SimpleName Simple Props: [identifier:o2, ]
_________________________________
(DUMMYTYPE[])o2
>Prob 0.29411764705882354 (15)
----------------------------------------
Type : CastExpression Child Props: [type, expression, ]
-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(1)Type : SimpleName Simple Props: [identifier:o, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.0196078431372549 (1)
----------------------------------------
Type : CastExpression Child Props: [type, expression, ]
-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:double, ] Child Props: [annotations, ]
-(1)Type : SimpleName Simple Props: [identifier:o2, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.0196078431372549 (1)
********
Type : 53 Child Props: [expression, ]:
----------------------------------------
Type : ThrowStatement Child Props: [expression, ]
-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:IllegalArgumentException, ]
-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
throw new IllegalArgumentException(MISSING());

>Prob 1.0 (4)
********
Type : 40 Child Props: [qualifier, name, ]:
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(1)Type : SimpleName Simple Props: [identifier:lang, ]
_________________________________
java.lang
>Prob 0.13559322033898305 (8)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:org, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:apache, ]
-(1)Type : SimpleName Simple Props: [identifier:commons, ]
_________________________________
org.apache.commons
>Prob 0.13559322033898305 (8)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)Type : SimpleName Simple Props: [identifier:lang3, ]
_________________________________
DUMMY_QNAME.DUMMY.lang3
>Prob 0.11864406779661017 (7)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Boolean, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Boolean.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(1)Type : SimpleName Simple Props: [identifier:length, ]
_________________________________
a1.length
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Short, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Short.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Byte, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Byte.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Float, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Float.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Double, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Double.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Character, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Character.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : SimpleName Simple Props: [identifier:Long, ]
-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
Long.TYPE
>Prob 0.06779661016949153 (4)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)Type : SimpleName Simple Props: [identifier:builder, ]
_________________________________
DUMMY_QNAME.DUMMY.builder
>Prob 0.03389830508474576 (2)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:reflect, ]
-(1)Type : SimpleName Simple Props: [identifier:Method, ]
_________________________________
DUMMY_QNAME.DUMMY.reflect.Method
>Prob 0.01694915254237288 (1)
----------------------------------------
Type : QualifiedName Child Props: [qualifier, name, ]
-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:regex, ]
-(1)Type : SimpleName Simple Props: [identifier:Pattern, ]
_________________________________
java.util.regex.Pattern
>Prob 0.01694915254237288 (1)
********
Type : 32 Child Props: [expression, typeArguments, name, arguments, ]:
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(3)Type : CastExpression Child Props: [type, expression, ]
-(3)Type : CastExpression Child Props: [type, expression, ]
_________________________________
Arrays.equals((int)MISSING,(int)MISSING)
>Prob 0.14953271028037382 (16)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)Type : SimpleName Simple Props: [identifier:compareTo, ]
-(3)Type : SimpleName Simple Props: [identifier:end, ]
_________________________________
value.compareTo(end)
>Prob 0.07476635514018691 (8)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)Type : SimpleName Simple Props: [identifier:compareTo, ]
-(3)Type : SimpleName Simple Props: [identifier:start, ]
_________________________________
value.compareTo(start)
>Prob 0.07476635514018691 (8)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:Integer, ]
-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(3)Type : SimpleName Simple Props: [identifier:index, ]
_________________________________
Integer.valueOf(index)
>Prob 0.056074766355140186 (6)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(3)Type : SimpleName Simple Props: [identifier:values, ]
_________________________________
String.format(message,values)
>Prob 0.056074766355140186 (6)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:superType, ]
-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(3)Type : SimpleName Simple Props: [identifier:type, ]
_________________________________
superType.isAssignableFrom(type)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)Type : SimpleName Simple Props: [identifier:invoke, ]
-(3)Type : SimpleName Simple Props: [identifier:a, ]
_________________________________
m.invoke(a)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)Type : SimpleName Simple Props: [identifier:getComponentType, ]
_________________________________
type.getComponentType()
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(3)Type : CastExpression Child Props: [type, expression, ]
_________________________________
Arrays.hashCode((int)MISSING)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)Type : SimpleName Simple Props: [identifier:isAnnotation, ]
_________________________________
type.isAnnotation()
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:a, ]
-(2)Type : SimpleName Simple Props: [identifier:annotationType, ]
_________________________________
a.annotationType()
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(3)Type : SimpleName Simple Props: [identifier:array, ]
_________________________________
Validate.notNull(array)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(3)Type : QualifiedName Child Props: [qualifier, name, ]
-(3)-(0)Type : SimpleName Simple Props: [identifier:Integer, ]
-(3)-(1)Type : SimpleName Simple Props: [identifier:TYPE, ]
_________________________________
componentType.equals(Integer.TYPE)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(3)Type : SimpleName Simple Props: [identifier:values2, ]
_________________________________
String.format(message,values2)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)Type : SimpleName Simple Props: [identifier:isInstance, ]
-(3)Type : SimpleName Simple Props: [identifier:obj, ]
_________________________________
type.isInstance(obj)
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)Type : SimpleName Simple Props: [identifier:getName, ]
_________________________________
m.getName()
>Prob 0.037383177570093455 (4)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(3)Type : SimpleName Simple Props: [identifier:index, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
validIndex(collection,index,DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE,MISSING())
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(3)Type : SimpleName Simple Props: [identifier:start, ]
-(3)Type : SimpleName Simple Props: [identifier:end, ]
_________________________________
String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE,value,start,end)
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(3)Type : SimpleName Simple Props: [identifier:index, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
validIndex(chars,index,DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE,MISSING())
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(3)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
-(3)Type : ConditionalExpression Child Props: [expression, thenExpression, elseExpression, ]
-(3)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(3)-(0)-(0)Type : SimpleName Simple Props: [identifier:obj, ]
-(3)-(0)-(1)Type : NullLiteral
-(3)-(1)Type : StringLiteral Simple Props: [escapedValue:"null", ]
-(3)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(2)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(2)-(0)-(0)Type : SimpleName Simple Props: [identifier:obj, ]
-(3)-(2)-(0)-(2)Type : SimpleName Simple Props: [identifier:getClass, ]
-(3)-(2)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
_________________________________
String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE,type.getName(),obj == null ? "null" : obj.getClass().getName())
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(3)Type : CastExpression Child Props: [type, expression, ]
-(3)-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(3)-(0)-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(3)-(1)Type : SimpleName Simple Props: [identifier:o1, ]
-(3)Type : CastExpression Child Props: [type, expression, ]
-(3)-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(3)-(0)-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(3)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(3)Type : SimpleName Simple Props: [identifier:start, ]
-(3)Type : SimpleName Simple Props: [identifier:end, ]
_________________________________
String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE,value,start,end)
>Prob 0.018691588785046728 (2)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(3)Type : SimpleName Simple Props: [identifier:index, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
validIndex(array,index,DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE,MISSING())
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE, ]
_________________________________
notEmpty(chars,DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE)
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, ]
-(3)Type : ConditionalExpression Child Props: [expression, thenExpression, elseExpression, ]
-(3)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(3)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(3)-(0)-(1)Type : NullLiteral
-(3)-(1)Type : StringLiteral Simple Props: [escapedValue:"null", ]
-(3)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(3)-(2)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(0)Type : SimpleName Simple Props: [identifier:superType, ]
-(3)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
_________________________________
String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE,type == null ? "null" : type.getName(),superType.getName())
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(0)Type : SimpleName Simple Props: [identifier:Double, ]
-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(3)-(3)Type : SimpleName Simple Props: [identifier:value, ]
_________________________________
String.format(message,Double.valueOf(value))
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE, ]
_________________________________
notEmpty(collection,DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE)
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:getClass, ]
-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
_________________________________
value.getClass().isArray()
>Prob 0.009345794392523364 (1)
----------------------------------------
Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, ]
-(3)Type : ConditionalExpression Child Props: [expression, thenExpression, elseExpression, ]
-(3)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(3)-(1)Type : StringLiteral Simple Props: [escapedValue:"null", ]
-(3)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(3)-(2)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(3)-(0)Type : SimpleName Simple Props: [identifier:superType, ]
-(3)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
_________________________________
String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE,MISSING == MISSING ? "null" : type.getName(),superType.getName())
>Prob 0.009345794392523364 (1)
********
Type : 60 Child Props: [modifiers, type, fragments, ]:
----------------------------------------
Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(0)Type : SimpleName Simple Props: [identifier:values2, ]
-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:ArrayUtils, ]
-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:addAll, ]
-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:values, ]
-(2)-(2)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(3)-(0)Type : SimpleName Simple Props: [identifier:Integer, ]
-(2)-(2)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(2)-(2)-(3)-(3)Type : SimpleName Simple Props: [identifier:i, ]
_________________________________
final DUMMYTYPE[] values2=ArrayUtils.addAll(values,Integer.valueOf(i));

>Prob 0.4 (2)
----------------------------------------
Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(0)Type : SimpleName Simple Props: [identifier:part1, ]
-(2)-(2)Type : InfixExpression Simple Props: [operator:*, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(2)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(0)-(0)Type : SimpleName Simple Props: [identifier:name, ]
-(2)-(2)-(0)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(2)-(2)-(1)Type : NumberLiteral Simple Props: [token:127, ]
_________________________________
final int part1=name.hashCode() * 127;

>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(0)Type : SimpleName Simple Props: [identifier:values2, ]
-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:ArrayUtils, ]
-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:add, ]
-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:values, ]
-(2)-(2)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(3)-(0)Type : SimpleName Simple Props: [identifier:Integer, ]
-(2)-(2)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(2)-(2)-(3)-(3)Type : SimpleName Simple Props: [identifier:i, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(0)Type : SimpleName Simple Props: [identifier:values2, ]
-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:ArrayUtils, ]
-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:add, ]
-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:values, ]
-(2)-(2)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(2)-(3)-(0)Type : SimpleName Simple Props: [identifier:Integer, ]
-(2)-(2)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(2)-(2)-(3)-(3)Type : SimpleName Simple Props: [identifier:i, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.2 (1)
********
Type : 59 Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]:
----------------------------------------
Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(0)Type : SimpleName Simple Props: [identifier:found, ]
-(2)Type : CastExpression Child Props: [type, expression, ]
-(2)-(0)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(1)Type : SimpleName Simple Props: [identifier:iface, ]
_________________________________
found=(DUMMY<>)iface
>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE, ]
-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array contains null element at index: %d", ]
_________________________________
DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE="The validated array contains null element at index: %d"
>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, ]
-(2)Type : StringLiteral Simple Props: [escapedValue:"Expected type: %s, actual: %s", ]
_________________________________
DEFAULT_IS_INSTANCE_OF_EX_MESSAGE="Expected type: %s, actual: %s"
>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(0)Type : SimpleName Simple Props: [identifier:v2, ]
-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(2)Type : SimpleName Simple Props: [identifier:invoke, ]
-(2)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
_________________________________
v2=m.invoke(a2)
>Prob 0.2 (1)
----------------------------------------
Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_BLANK_EX_MESSAGE, ]
-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence is blank", ]
_________________________________
DEFAULT_NOT_BLANK_EX_MESSAGE="The validated character sequence is blank"
>Prob 0.2 (1)
********
Type : 15 Child Props: [imports, package, types, ]:
----------------------------------------
Type : CompilationUnit Child Props: [imports, package, types, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:annotation, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:reflect, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:InvocationTargetException, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(1)Type : PackageDeclaration Child Props: [javadoc, annotations, name, ]
-(1)-(2)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)Type : TypeDeclaration Simple Props: [interface:false, ] Child Props: [javadoc, modifiers, name, superclass, superInterfaces, superclassType, superInterfaceTypes, typeParameters, bodyDeclarations, ]
-(2)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(2)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:TO_STRING_STYLE, ]
-(2)-(8)-(3)-(2)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(3)-(2)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(3)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(2)-(8)-(3)-(2)-(5)Type : AnonymousClassDeclaration Child Props: [bodyDeclarations, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:serialVersionUID, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(2)Type : NumberLiteral Simple Props: [token:1L, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : Initializer Child Props: [javadoc, modifiers, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setDefaultFullDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayContentDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseShortClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseIdentityHashCode, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setContentStart, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"(", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setContentEnd, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:")", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setFieldSeparator, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:", ", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayStart, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"[", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayEnd, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"]", ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : MarkerAnnotation Child Props: [typeName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:Override, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:protected, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : SimpleName Simple Props: [identifier:getShortClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:cls, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(2)Type : NullLiteral
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iface, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:ClassUtils, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getAllInterfaces, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(3)Type : SimpleName Simple Props: [identifier:cls, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iface, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : SingleMemberAnnotation Child Props: [typeName, value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:SuppressWarnings, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : StringLiteral Simple Props: [escapedValue:"unchecked", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:found, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(1)Type : SimpleName Simple Props: [identifier:iface, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:found, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : BreakStatement Child Props: [label, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:StringBuilder, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)Type : ConditionalExpression Child Props: [expression, thenExpression, elseExpression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(1)Type : NullLiteral
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(1)Type : StringLiteral Simple Props: [escapedValue:"", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:insert, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)Type : CharacterLiteral Simple Props: [escapedValue:'@', ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : MarkerAnnotation Child Props: [typeName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:Override, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:protected, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : SimpleName Simple Props: [identifier:appendDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:StringBuffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:buffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:fieldName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : InstanceofExpression Child Props: [leftOperand, rightOperand, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : SuperMethodInvocation Child Props: [qualifier, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:appendDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:buffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:fieldName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:true, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(1)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(1)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation %s with null annotationType()", ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation %s with null annotationType()", ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)Type : InfixExpression Simple Props: [operator:&&, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)Type : FieldAccess Child Props: [expression, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:isValidAnnotationMemberType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(2)Type : SimpleName Simple Props: [identifier:getReturnType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:v1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:invoke, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:memberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(2)Type : SimpleName Simple Props: [identifier:getReturnType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:v1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:v2, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:IllegalAccessException, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:InvocationTargetException, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation method %s returned null", ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:+=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:hashMember, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(4)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(4)Type : SimpleName Simple Props: [identifier:TO_STRING_STYLE, ]
-(2)-(8)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : InfixExpression Simple Props: [operator:>, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)Type : FieldAccess Child Props: [expression, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ContinueStatement Child Props: [label, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:append, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:build, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isValidAnnotationMemberType, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isPrimitive, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:isEnum, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:hashMember, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:part1, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : InfixExpression Simple Props: [operator:*, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(0)Type : SimpleName Simple Props: [identifier:name, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(1)Type : NumberLiteral Simple Props: [token:127, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InstanceofExpression Child Props: [leftOperand, rightOperand, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : InfixExpression Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:memberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isAnnotation, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:annotationArrayMemberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:annotationArrayMemberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:!=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)Type : ArrayAccess Child Props: [array, index, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)Type : ArrayAccess Child Props: [array, index, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberHash, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.25 (1)
----------------------------------------
Type : CompilationUnit Child Props: [imports, package, types, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Collection, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Iterator, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Map, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)Type : PackageDeclaration Child Props: [javadoc, annotations, name, ]
-(1)-(2)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)Type : TypeDeclaration Simple Props: [interface:false, ] Child Props: [javadoc, modifiers, name, superclass, superInterfaces, superclassType, superInterfaceTypes, typeParameters, bodyDeclarations, ]
-(2)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(2)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The value %s is not in the specified exclusive range of %s to %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The value %s is not in the specified inclusive range of %s to %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_MATCHES_PATTERN_EX, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The string %s does not match the pattern %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_NULL_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated object is null", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_TRUE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated expression is false", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection contains null element at index: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated map is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_STATE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated state is false", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"Cannot assign a %s to a %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"Expected type: %s, actual: %s", ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:true, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : SuperConstructorInvocation Child Props: [expression, typeArguments, arguments, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)Type : SimpleName Simple Props: [identifier:Long, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:double, ] Child Props: [annotations, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_NULL_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:StringUtils, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isBlank, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_BLANK_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(0)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(6)-(2)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Iterator, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:iterator, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:hasNext, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:next, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(3)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(6)-(2)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:index, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:index, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:index, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validState, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validState, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:matchesPattern, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_MATCHES_PATTERN_EX, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:matchesPattern, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:inclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Comparable, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:inclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:exclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:end, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:exclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isInstanceOf, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:obj, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isInstanceOf, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:obj, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:superType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:superType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.25 (1)
----------------------------------------
Type : CompilationUnit Child Props: [imports, package, types, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Collection, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Iterator, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Map, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:regex, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Pattern, ]
-(1)Type : PackageDeclaration Child Props: [javadoc, annotations, name, ]
-(1)-(2)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)Type : TypeDeclaration Simple Props: [interface:false, ] Child Props: [javadoc, modifiers, name, superclass, superInterfaces, superclassType, superInterfaceTypes, typeParameters, bodyDeclarations, ]
-(2)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(2)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The value %s is not in the specified exclusive range of %s to %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The value %s is not in the specified inclusive range of %s to %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_MATCHES_PATTERN_EX, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The string %s does not match the pattern %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_NULL_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated object is null", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_TRUE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated expression is false", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array contains null element at index: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection contains null element at index: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_BLANK_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence is blank", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated map is empty", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated array index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated character sequence index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated collection index is invalid: %d", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_STATE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"The validated state is false", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, ]
-(2)-(8)-(3)-(2)Type : StringLiteral Simple Props: [escapedValue:"Cannot assign a %s to a %s", ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:true, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : SuperConstructorInvocation Child Props: [expression, typeArguments, arguments, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(0)Type : SimpleName Simple Props: [identifier:Long, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:double, ] Child Props: [annotations, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isTrue, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_NULL_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:object, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isEmpty, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:StringUtils, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isBlank, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notBlank, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_BLANK_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(1)-(1)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(1)-(1)-(1)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(0)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(6)-(2)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(0)-(1)Type : SimpleName Simple Props: [identifier:Iterable, ]
-(2)-(8)-(6)-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Iterator, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:iterator, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:hasNext, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:it, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:next, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(3)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(6)-(2)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:noNullElements, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iterable, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(4)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:array, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(6)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:index, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(0)Type : SimpleName Simple Props: [identifier:chars, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)-(2)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validState, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:validState, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:matchesPattern, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_MATCHES_PATTERN_EX, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:matchesPattern, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:input, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:pattern, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:inclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:inclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:exclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:end, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:exclusiveBetween, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(2)-(8)-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isInstanceOf, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:obj, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isInstanceOf, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:obj, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:superType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:superType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.25 (1)
----------------------------------------
Type : CompilationUnit Child Props: [imports, package, types, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:annotation, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:reflect, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:InvocationTargetException, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:java, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:util, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:lang3, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:builder, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(0)Type : ImportDeclaration Simple Props: [onDemand:false, static:false, ] Child Props: [name, ]
-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(0)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:builder, ]
-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(1)Type : PackageDeclaration Child Props: [javadoc, annotations, name, ]
-(1)-(2)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)Type : TypeDeclaration Simple Props: [interface:false, ] Child Props: [javadoc, modifiers, name, superclass, superInterfaces, superclassType, superInterfaceTypes, typeParameters, bodyDeclarations, ]
-(2)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(2)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(2)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(2)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(2)-(8)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(0)Type : SimpleName Simple Props: [identifier:TO_STRING_STYLE, ]
-(2)-(8)-(3)-(2)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(3)-(2)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(3)-(1)Type : SimpleName Simple Props: [identifier:ToStringStyle, ]
-(2)-(8)-(3)-(2)-(5)Type : AnonymousClassDeclaration Child Props: [bodyDeclarations, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : FieldDeclaration Child Props: [javadoc, modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:serialVersionUID, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(3)-(2)Type : NumberLiteral Simple Props: [token:1L, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : Initializer Child Props: [javadoc, modifiers, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setDefaultFullDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayContentDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseShortClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setUseIdentityHashCode, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setContentStart, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"(", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setContentEnd, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:")", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setFieldSeparator, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:", ", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayStart, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"[", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:setArrayEnd, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"]", ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : MarkerAnnotation Child Props: [typeName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:Override, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:protected, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : SimpleName Simple Props: [identifier:getShortClassName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:cls, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(2)Type : NullLiteral
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iface, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:ClassUtils, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getAllInterfaces, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(3)Type : SimpleName Simple Props: [identifier:cls, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isAssignableFrom, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:iface, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : SingleMemberAnnotation Child Props: [typeName, value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:SuppressWarnings, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : StringLiteral Simple Props: [escapedValue:"unchecked", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:found, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(2)-(0)-(1)-(0)Type : BreakStatement Child Props: [label, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:StringBuilder, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)Type : ConditionalExpression Child Props: [expression, thenExpression, elseExpression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(0)-(1)Type : NullLiteral
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(1)Type : StringLiteral Simple Props: [escapedValue:"", ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(0)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(0)-(4)-(2)-(2)Type : SimpleName Simple Props: [identifier:getName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:insert, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)-(3)Type : CharacterLiteral Simple Props: [escapedValue:'@', ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(3)-(2)-(5)-(0)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : MarkerAnnotation Child Props: [typeName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:Override, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(1)Type : Modifier Simple Props: [keyword:protected, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(2)Type : SimpleName Simple Props: [identifier:appendDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:void, ] Child Props: [annotations, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:StringBuffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:buffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:fieldName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : InstanceofExpression Child Props: [leftOperand, rightOperand, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(1)-(0)-(0)-(1)-(3)-(1)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)Type : SuperMethodInvocation Child Props: [qualifier, typeArguments, name, arguments, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:appendDetail, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:buffer, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:fieldName, ]
-(2)-(8)-(3)-(2)-(5)-(0)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:true, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:AnnotationUtils, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(8)-(12)-(0)-(1)-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:annotationType, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation %s with null annotationType()", ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:Validate, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notNull, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation %s with null annotationType()", ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:type2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)Type : InfixExpression Simple Props: [operator:&&, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(0)Type : FieldAccess Child Props: [expression, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:isValidAnnotationMemberType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(0)-(1)-(3)-(2)Type : SimpleName Simple Props: [identifier:getReturnType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:v1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:invoke, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:v2, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(2)Type : SimpleName Simple Props: [identifier:invoke, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(2)-(2)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:memberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)-(2)Type : SimpleName Simple Props: [identifier:getReturnType, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:v1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:v2, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:IllegalAccessException, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:InvocationTargetException, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(3)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(2)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)Type : StringLiteral Simple Props: [escapedValue:"Annotation method %s returned null", ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(1)-(0)-(0)-(4)-(3)Type : SimpleName Simple Props: [identifier:m, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : Assignment Simple Props: [operator:+=, ] Child Props: [leftHandSide, rightHandSide, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:hashMember, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(1)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:result, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:toString, ]
-(2)-(8)-(4)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(4)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(12)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(2)-(8)-(12)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(2)-(2)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(3)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(3)-(1)Type : SimpleName Simple Props: [identifier:ToStringBuilder, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(4)Type : SimpleName Simple Props: [identifier:a, ]
-(2)-(8)-(12)-(0)-(2)-(2)-(4)Type : SimpleName Simple Props: [identifier:TO_STRING_STYLE, ]
-(2)-(8)-(12)-(0)Type : EnhancedForStatement Child Props: [parameter, expression, body, ]
-(2)-(8)-(12)-(0)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:getDeclaredMethods, ]
-(2)-(8)-(12)-(0)-(2)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)Type : InfixExpression Simple Props: [operator:>, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(0)Type : FieldAccess Child Props: [expression, name, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(0)-(1)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ContinueStatement Child Props: [label, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : TryStatement Child Props: [resources, body, catchClauses, finally, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:append, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)-(0)-(0)Type : SimpleName Simple Props: [identifier:ex, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)Type : CatchClause Child Props: [exception, body, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(2)-(0)-(2)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:builder, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:build, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:public, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:isValidAnnotationMemberType, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ExpressionStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isPrimitive, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(2)Type : SimpleName Simple Props: [identifier:isEnum, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : TypeLiteral Child Props: [type, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(3)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:hashMember, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:name, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:getClass, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InstanceofExpression Child Props: [leftOperand, rightOperand, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:memberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(0)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(0)-(1)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : NullLiteral
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isArray, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isAnnotation, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:annotationArrayMemberEquals, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(0)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:o2, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:annotationArrayMemberEquals, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(2)-(8)-(7)-(1)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:!=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(0)-(0)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(0)-(1)-(1)Type : SimpleName Simple Props: [identifier:length, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : ForStatement Child Props: [initializers, expression, updaters, body, ]
-(2)-(8)-(12)-(0)-(0)Type : VariableDeclarationExpression Child Props: [modifiers, type, fragments, ]
-(2)-(8)-(12)-(0)-(0)-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(12)-(0)-(0)-(2)Type : VariableDeclarationFragment Simple Props: [extraDimensions:0, ] Child Props: [name, extraDimensions2, initializer, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(0)-(2)-(2)Type : NumberLiteral Simple Props: [token:0, ]
-(2)-(8)-(12)-(0)-(1)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(1)-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(2)-(8)-(12)-(0)-(2)Type : PostfixExpression Simple Props: [operator:++, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(2)-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)Type : PrefixExpression Simple Props: [operator:!, ] Child Props: [operand, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)Type : ArrayAccess Child Props: [array, index, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:a1, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)Type : ArrayAccess Child Props: [array, index, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(0)-(0)-(3)-(1)Type : SimpleName Simple Props: [identifier:i, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(3)-(0)-(1)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)-(0)Type : BooleanLiteral Simple Props: [booleanValue:true, ]
-(2)-(8)Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:private, ]
-(2)-(8)-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)-(8)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberHash, ]
-(2)-(8)-(4)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:componentType, ]
-(2)-(8)-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(2)-(8)-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(2)-(8)-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(8)-(7)-(3)Type : SimpleName Simple Props: [identifier:o, ]
-(2)-(8)-(12)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(2)-(8)-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(2)-(8)-(12)-(0)-(1)-(0)Type : ReturnStatement Child Props: [expression, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(2)-(8)-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.25 (1)
********
Type : 76 Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]:
----------------------------------------
Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
_________________________________
? extends DUMMY_NAME
>Prob 1.0 (1)
********
Type : 41 Child Props: [expression, ]:
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:Arrays, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(0)-(3)Type : CastExpression Child Props: [type, expression, ]
_________________________________
return Arrays.hashCode((int)MISSING);

>Prob 0.358974358974359 (14)
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : BooleanLiteral Simple Props: [booleanValue:false, ]
_________________________________
return false;

>Prob 0.28205128205128205 (11)
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : SimpleName Simple Props: [identifier:chars, ]
_________________________________
return chars;

>Prob 0.15384615384615385 (6)
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : InfixExpression Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
_________________________________
return MISSING ^ MISSING;

>Prob 0.1282051282051282 (5)
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:map, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE, ]
_________________________________
return notEmpty(map,DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE);

>Prob 0.05128205128205128 (2)
----------------------------------------
Type : ReturnStatement Child Props: [expression, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE, ]
_________________________________
return notEmpty(collection,DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE);

>Prob 0.02564102564102564 (1)
********
Type : 2 Child Props: [array, index, ]:
----------------------------------------
Type : ArrayAccess Child Props: [array, index, ]
-(0)Type : SimpleName Simple Props: [identifier:a2, ]
-(1)Type : SimpleName Simple Props: [identifier:i, ]
_________________________________
a2[i]
>Prob 1.0 (1)
********
Type : 73 Child Props: [modifiers, name, typeBounds, ]:
----------------------------------------
Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
_________________________________
T extends DUMMY<>
>Prob 0.3333333333333333 (5)
----------------------------------------
Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)Type : SimpleType Child Props: [annotations, name, ]
_________________________________
T extends DUMMY_NAME
>Prob 0.26666666666666666 (4)
----------------------------------------
Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(2)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(2)-(0)-(1)Type : SimpleName Simple Props: [identifier:Map, ]
-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(2)-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
_________________________________
T extends Map<?,?>
>Prob 0.26666666666666666 (4)
----------------------------------------
Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(1)Type : SimpleName Simple Props: [identifier:T, ]
_________________________________
T
>Prob 0.13333333333333333 (2)
********
Type : 27 Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)Type : NumberLiteral Simple Props: [token:0, ]
_________________________________
MISSING() >= 0
>Prob 0.5 (4)
----------------------------------------
Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:index, ]
-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:length, ]
_________________________________
index >= array.length
>Prob 0.25 (2)
----------------------------------------
Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:index, ]
-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(1)-(2)Type : SimpleName Simple Props: [identifier:size, ]
_________________________________
index >= collection.size()
>Prob 0.25 (2)
********
Type : 27 Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:index, ]
-(1)Type : NumberLiteral Simple Props: [token:0, ]
_________________________________
index < 0
>Prob 0.5454545454545454 (6)
----------------------------------------
Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)Type : NumberLiteral Simple Props: [token:0, ]
_________________________________
MISSING() < 0
>Prob 0.36363636363636365 (4)
----------------------------------------
Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:i, ]
-(1)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)-(0)Type : SimpleName Simple Props: [identifier:array, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:length, ]
_________________________________
i < array.length
>Prob 0.09090909090909091 (1)
********
Type : 8 Child Props: [statements, ]:
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : ThrowStatement Child Props: [expression, ]
-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
_________________________________
{
  throw new MISSING();
}

>Prob 0.4307692307692308 (56)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : ReturnStatement Child Props: [expression, ]
-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
{
  return MISSING();
}

>Prob 0.2076923076923077 (27)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : ReturnStatement Child Props: [expression, ]
_________________________________
{
  return;
}

>Prob 0.13076923076923078 (17)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(1)Type : Block Child Props: [statements, ]
_________________________________
{
  if (MISSING == MISSING) {
  }
}

>Prob 0.12307692307692308 (16)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(1)Type : Block Child Props: [statements, ]
_________________________________
{
  if (MISSING || MISSING) {
  }
}

>Prob 0.06153846153846154 (8)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : VariableDeclarationStatement Child Props: [modifiers, type, fragments, ]
-(0)Type : ThrowStatement Child Props: [expression, ]
_________________________________
{
  int MISSING;
  throw MISSING;
}

>Prob 0.03076923076923077 (4)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(0)-(0)-(1)Type : NullLiteral
-(0)-(1)Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isEmpty, ]
-(0)-(1)Type : Block Child Props: [statements, ]
-(0)-(1)-(0)Type : ThrowStatement Child Props: [expression, ]
-(0)-(1)-(0)-(0)Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(0)Type : ReturnStatement Child Props: [expression, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
_________________________________
{
  if (collection == null) {
  }
  if (collection.isEmpty()) {
    throw new MISSING();
  }
  return collection;
}

>Prob 0.007692307692307693 (1)
----------------------------------------
Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
-(0)-(0)-(1)Type : NullLiteral
-(0)-(1)Type : Block Child Props: [statements, ]
-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isEmpty, ]
-(0)-(1)Type : Block Child Props: [statements, ]
-(0)Type : ReturnStatement Child Props: [expression, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:map, ]
_________________________________
{
  if (map == null) {
  }
  if (map.isEmpty()) {
  }
  return map;
}

>Prob 0.007692307692307693 (1)
********
Type : 27 Simple Props: [operator:>, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:>, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)Type : NumberLiteral Simple Props: [token:0, ]
_________________________________
MISSING() > 0
>Prob 1.0 (4)
********
Type : 25 Child Props: [expression, thenStatement, elseStatement, ]:
----------------------------------------
Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:componentType, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:equals, ]
-(0)-(3)Type : QualifiedName Child Props: [qualifier, name, ]
-(1)Type : Block Child Props: [statements, ]
_________________________________
if (componentType.equals(DUMMY_QNAME.DUMMY)) {
}

>Prob 0.8484848484848485 (28)
----------------------------------------
Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(0)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(1)Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(1)Type : Block Child Props: [statements, ]
_________________________________
if (MISSING < MISSING || MISSING >= MISSING) {
}

>Prob 0.12121212121212122 (4)
----------------------------------------
Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(0)-(1)Type : NullLiteral
-(1)Type : Block Child Props: [statements, ]
_________________________________
if (type == null) {
}

>Prob 0.030303030303030304 (1)
********
Type : 27 Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : InfixExpression Simple Props: [operator:<, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(1)Type : InfixExpression Simple Props: [operator:>, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
_________________________________
MISSING < MISSING || MISSING > MISSING
>Prob 0.5 (4)
----------------------------------------
Type : InfixExpression Simple Props: [operator:||, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : InfixExpression Simple Props: [operator:<=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(1)Type : InfixExpression Simple Props: [operator:>=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
_________________________________
MISSING <= MISSING || MISSING >= MISSING
>Prob 0.5 (4)
********
Type : 5 Child Props: [componentType, elementType, dimensions, ]:
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : SimpleType Child Props: [annotations, name, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.373134328358209 (25)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:char, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:float, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:short, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:byte, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.08955223880597014 (6)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:double, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.07462686567164178 (5)
----------------------------------------
Type : ArrayType Child Props: [componentType, elementType, dimensions, ]
-(0)Type : PrimitiveType Simple Props: [primitiveTypeCode:long, ] Child Props: [annotations, ]
_________________________________
Cannot get AST representation of rule
>Prob 0.014925373134328358 (1)
********
Type : 21 Child Props: [expression, ]:
----------------------------------------
Type : ExpressionStatement Child Props: [expression, ]
-(0)Type : Assignment Simple Props: [operator:=, ] Child Props: [leftHandSide, rightHandSide, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:type, ]
-(0)-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
type=MISSING();

>Prob 1.0 (1)
********
Type : 27 Simple Props: [operator:<=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:<=, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)Type : NumberLiteral Simple Props: [token:0, ]
_________________________________
MISSING() <= 0
>Prob 1.0 (4)
********
Type : 12 Child Props: [exception, body, ]:
----------------------------------------
Type : CatchClause Child Props: [exception, body, ]
-(0)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(1)Type : Block Child Props: [statements, ]
_________________________________
catch (int MISSING) {
}

>Prob 1.0 (1)
********
Type : 44 Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]:
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(3)Type : SimpleName Simple Props: [identifier:message, ]
_________________________________
final String message
>Prob 0.32786885245901637 (40)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:boolean, ] Child Props: [annotations, ]
-(3)Type : SimpleName Simple Props: [identifier:expression, ]
_________________________________
final boolean expression
>Prob 0.09836065573770492 (12)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(3)Type : SimpleName Simple Props: [identifier:chars, ]
_________________________________
final DUMMY_NAME chars
>Prob 0.09016393442622951 (11)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : PrimitiveType Simple Props: [primitiveTypeCode:int, ] Child Props: [annotations, ]
-(3)Type : SimpleName Simple Props: [identifier:index, ]
_________________________________
final int index
>Prob 0.09016393442622951 (11)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(3)Type : SimpleName Simple Props: [identifier:type, ]
_________________________________
final DUMMY<> type
>Prob 0.08196721311475409 (10)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(3)Type : SimpleName Simple Props: [identifier:start, ]
_________________________________
final DUMMY_NAME start
>Prob 0.06557377049180328 (8)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(3)Type : SimpleName Simple Props: [identifier:ex, ]
_________________________________
final DUMMY_NAME ex
>Prob 0.04918032786885246 (6)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:Method, ]
-(3)Type : SimpleName Simple Props: [identifier:m, ]
_________________________________
final Method m
>Prob 0.04918032786885246 (6)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(3)Type : SimpleName Simple Props: [identifier:end, ]
_________________________________
final T end
>Prob 0.04918032786885246 (6)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(3)Type : SimpleName Simple Props: [identifier:collection, ]
_________________________________
final DUMMY_NAME collection
>Prob 0.04918032786885246 (6)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(3)Type : SimpleName Simple Props: [identifier:map, ]
_________________________________
final T map
>Prob 0.03278688524590164 (4)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:String, ]
-(3)Type : SimpleName Simple Props: [identifier:name, ]
_________________________________
final String name
>Prob 0.00819672131147541 (1)
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(3)Type : SimpleName Simple Props: [identifier:value, ]
_________________________________
final DUMMY<> value
>Prob 0.00819672131147541 (1)
********
Type : 27 Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]:
----------------------------------------
Type : InfixExpression Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:part1, ]
-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
-(1)-(3)Type : CastExpression Child Props: [type, expression, ]
-(1)-(3)-(0)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(3)-(1)Type : SimpleName Simple Props: [identifier:value, ]
_________________________________
part1 ^ hashCode((DUMMY_NAME)value)
>Prob 0.3333333333333333 (2)
----------------------------------------
Type : InfixExpression Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:part1, ]
-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(2)Type : SimpleName Simple Props: [identifier:arrayMemberHash, ]
-(1)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(3)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(3)-(0)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(1)-(3)-(0)-(2)Type : SimpleName Simple Props: [identifier:getClass, ]
-(1)-(3)-(2)Type : SimpleName Simple Props: [identifier:getComponentType, ]
-(1)-(3)Type : SimpleName Simple Props: [identifier:value, ]
_________________________________
part1 ^ arrayMemberHash(value.getClass().getComponentType(),value)
>Prob 0.3333333333333333 (2)
----------------------------------------
Type : InfixExpression Simple Props: [operator:^, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(0)Type : SimpleName Simple Props: [identifier:part1, ]
-(1)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(1)-(0)Type : SimpleName Simple Props: [identifier:value, ]
-(1)-(2)Type : SimpleName Simple Props: [identifier:hashCode, ]
_________________________________
part1 ^ value.hashCode()
>Prob 0.3333333333333333 (2)
********
Type : 74 Child Props: [type, typeArguments, ]:
----------------------------------------
Type : ParameterizedType Child Props: [type, typeArguments, ]
-(0)Type : SimpleType Child Props: [annotations, name, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:Class, ]
-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
_________________________________
Class<?>
>Prob 0.5116279069767442 (22)
----------------------------------------
Type : ParameterizedType Child Props: [type, typeArguments, ]
-(0)Type : SimpleType Child Props: [annotations, name, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:Collection, ]
-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
_________________________________
Collection<?>
>Prob 0.18604651162790697 (8)
----------------------------------------
Type : ParameterizedType Child Props: [type, typeArguments, ]
-(0)Type : SimpleType Child Props: [annotations, name, ]
-(0)-(1)Type : SimpleName Simple Props: [identifier:Comparable, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:T, ]
_________________________________
Comparable<T>
>Prob 0.16279069767441862 (7)
----------------------------------------
Type : ParameterizedType Child Props: [type, typeArguments, ]
-(0)Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : WildcardType Simple Props: [upperBound:true, ] Child Props: [annotations, bound, ]
-(1)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
_________________________________
DUMMY_NAME<? extends Annotation>
>Prob 0.13953488372093023 (6)
********
Type : 31 Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]:
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:validIndex, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(12)Type : Block Child Props: [statements, ]
_________________________________
public static <MISSING>DUMMY_NAME validIndex(int MISSING,int MISSING){
}

>Prob 0.3333333333333333 (4)
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(12)Type : Block Child Props: [statements, ]
_________________________________
public static <MISSING>DUMMY_NAME notEmpty(int MISSING){
}

>Prob 0.25 (3)
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(12)Type : Block Child Props: [statements, ]
_________________________________
public static <MISSING>DUMMY_NAME notEmpty(int MISSING,int MISSING,int... MISSING){
}

>Prob 0.16666666666666666 (2)
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(12)Type : Block Child Props: [statements, ]
-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:chars, ]
-(12)-(0)-(0)-(3)Type : SimpleName Simple Props: [identifier:DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE, ]
_________________________________
public static <MISSING>DUMMY_NAME notEmpty(int MISSING){
  return notEmpty(chars,DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);
}

>Prob 0.08333333333333333 (1)
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)-(0)Type : Modifier Simple Props: [keyword:final, ]
-(7)-(1)Type : SimpleType Child Props: [annotations, name, ]
-(7)-(3)Type : SimpleName Simple Props: [identifier:collection, ]
-(12)Type : Block Child Props: [statements, ]
_________________________________
public static <MISSING>DUMMY_NAME notEmpty(final DUMMY_NAME collection){
}

>Prob 0.08333333333333333 (1)
----------------------------------------
Type : MethodDeclaration Simple Props: [constructor:false, extraDimensions:0, ] Child Props: [javadoc, modifiers, name, returnType, returnType2, extraDimensions2, typeParameters, parameters, receiverType, receiverQualifier, thrownExceptions, thrownExceptionTypes, body, ]
-(1)Type : Modifier Simple Props: [keyword:public, ]
-(1)Type : Modifier Simple Props: [keyword:static, ]
-(2)Type : SimpleName Simple Props: [identifier:notEmpty, ]
-(4)Type : SimpleType Child Props: [annotations, name, ]
-(6)Type : TypeParameter Child Props: [modifiers, name, typeBounds, ]
-(6)-(1)Type : SimpleName Simple Props: [identifier:T, ]
-(6)-(2)Type : ParameterizedType Child Props: [type, typeArguments, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:false, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(7)Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(12)Type : Block Child Props: [statements, ]
-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(12)-(0)-(0)Type : InfixExpression Simple Props: [operator:==, ] Child Props: [leftOperand, rightOperand, extendedOperands, ]
-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(12)-(0)-(0)-(1)Type : NullLiteral
-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(12)-(0)Type : IfStatement Child Props: [expression, thenStatement, elseStatement, ]
-(12)-(0)-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(12)-(0)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
-(12)-(0)-(0)-(2)Type : SimpleName Simple Props: [identifier:isEmpty, ]
-(12)-(0)-(1)Type : Block Child Props: [statements, ]
-(12)-(0)Type : ReturnStatement Child Props: [expression, ]
-(12)-(0)-(0)Type : SimpleName Simple Props: [identifier:collection, ]
_________________________________
public static <T extends DUMMY<>>DUMMY_NAME notEmpty(int MISSING,int MISSING,int... MISSING){
  if (collection == null) {
  }
  if (collection.isEmpty()) {
  }
  return collection;
}

>Prob 0.08333333333333333 (1)
********
Type : 44 Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]:
----------------------------------------
Type : SingleVariableDeclaration Simple Props: [extraDimensions:0, varargs:true, ] Child Props: [modifiers, type, varargsAnnotations, name, extraDimensions2, initializer, ]
-(0)Type : Modifier Simple Props: [keyword:final, ]
-(1)Type : SimpleType Child Props: [annotations, name, ]
-(1)-(1)Type : SimpleName Simple Props: [identifier:Object, ]
-(3)Type : SimpleName Simple Props: [identifier:values, ]
_________________________________
final Object... values
>Prob 1.0 (36)
********
Type : 43 Child Props: [annotations, name, ]:
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:T, ]
_________________________________
T
>Prob 0.38388625592417064 (81)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:Annotation, ]
_________________________________
Annotation
>Prob 0.15639810426540285 (33)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:IllegalArgumentException, ]
_________________________________
IllegalArgumentException
>Prob 0.10426540284360189 (22)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:Object, ]
_________________________________
Object
>Prob 0.0947867298578199 (20)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:NullPointerException, ]
_________________________________
NullPointerException
>Prob 0.05687203791469194 (12)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:Class, ]
_________________________________
Class
>Prob 0.037914691943127965 (8)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:RuntimeException, ]
_________________________________
RuntimeException
>Prob 0.037914691943127965 (8)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:CharSequence, ]
_________________________________
CharSequence
>Prob 0.037914691943127965 (8)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:IndexOutOfBoundsException, ]
_________________________________
IndexOutOfBoundsException
>Prob 0.02843601895734597 (6)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:IllegalStateException, ]
_________________________________
IllegalStateException
>Prob 0.02843601895734597 (6)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:Exception, ]
_________________________________
Exception
>Prob 0.018957345971563982 (4)
----------------------------------------
Type : SimpleType Child Props: [annotations, name, ]
-(1)Type : SimpleName Simple Props: [identifier:Iterable, ]
_________________________________
Iterable
>Prob 0.014218009478672985 (3)
********
Type : 22 Child Props: [expression, name, ]:
----------------------------------------
Type : FieldAccess Child Props: [expression, name, ]
-(0)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(0)-(0)Type : SimpleName Simple Props: [identifier:m, ]
-(0)-(2)Type : SimpleName Simple Props: [identifier:getParameterTypes, ]
-(1)Type : SimpleName Simple Props: [identifier:length, ]
_________________________________
m.getParameterTypes().length
>Prob 1.0 (4)
********
Type : 14 Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]:
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(4)-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(4)-(3)Type : SimpleName Simple Props: [identifier:values, ]
_________________________________
new DUMMY_NAME(String.format(message,values))
>Prob 0.6 (36)
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(3)-(1)Type : SimpleName Simple Props: [identifier:IllegalArgumentException, ]
-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
_________________________________
new IllegalArgumentException(MISSING())
>Prob 0.25 (15)
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(4)Type : SimpleName Simple Props: [identifier:ex, ]
_________________________________
new DUMMY_NAME(ex)
>Prob 0.06666666666666667 (4)
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(4)Type : SimpleName Simple Props: [identifier:DEFAULT_VALID_STATE_EX_MESSAGE, ]
_________________________________
new DUMMY_NAME(DEFAULT_VALID_STATE_EX_MESSAGE)
>Prob 0.03333333333333333 (2)
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(4)Type : SimpleName Simple Props: [identifier:DEFAULT_IS_TRUE_EX_MESSAGE, ]
_________________________________
new DUMMY_NAME(DEFAULT_IS_TRUE_EX_MESSAGE)
>Prob 0.03333333333333333 (2)
----------------------------------------
Type : ClassInstanceCreation Child Props: [typeArguments, expression, name, type, arguments, anonymousClassDeclaration, ]
-(3)Type : SimpleType Child Props: [annotations, name, ]
-(3)-(1)Type : SimpleName Simple Props: [identifier:IllegalArgumentException, ]
-(4)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(4)-(0)Type : SimpleName Simple Props: [identifier:String, ]
-(4)-(2)Type : SimpleName Simple Props: [identifier:format, ]
-(4)-(3)Type : SimpleName Simple Props: [identifier:message, ]
-(4)-(3)Type : MethodInvocation Child Props: [expression, typeArguments, name, arguments, ]
-(4)-(3)-(0)Type : SimpleName Simple Props: [identifier:Double, ]
-(4)-(3)-(2)Type : SimpleName Simple Props: [identifier:valueOf, ]
-(4)-(3)-(3)Type : SimpleName Simple Props: [identifier:value, ]
_________________________________
new IllegalArgumentException(String.format(message,Double.valueOf(value)))
>Prob 0.016666666666666666 (1)

