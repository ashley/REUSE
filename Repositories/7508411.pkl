(dp0
I4096
(iPull
Pull
p1
(dp2
S'body'
p3
S"First part of converting the OnSubscribe operators of `Observable` into direct implementors of `Observable` - saves allocation.\r\n\r\nDon't worry about the unnecessary parenthesis, will be removed in a future PR."
p4
sS'title'
p5
S'2.x: convert observable onsubscribe to direct implementation'
p6
sS'labels'
p7
(lp8
S'Enhancement'
p9
asS'number'
p10
I4096
sS'comments'
p11
(lp12
S':+1:'
p13
asS'headLabel'
p14
S'akarnokd:NbpObservableDirectPart1'
p15
sbsI4097
(iPull
Pull
p16
(dp17
g3
S'This change reduces the indirection and allocation count when using `map` or `filter`.'
p18
sg5
S'1.x: update map() and filter() to implement onsubscribe directly'
p19
sg7
(lp20
S'Enhancement'
p21
asg10
I4097
sg11
(lp22
S'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4097][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4097   diff @@\n==========================================\n  Files           259        260     +1   \n  Lines         16821      16852    +31   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2555     +1   \n==========================================\n+ Hits          13500      13530    +30   \n+ Misses         2408       2405     -3   \n- Partials        913        917     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...abbd11d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...abbd11d45259a3f0447c73075403db3c36ea114d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4097?src=pr'
p23
aS'\xf0\x9f\x91\x8d '
p24
aS'Thanks @stevegury ! Could you give your opinion about #4098 as well?'
p25
aS'\xf0\x9f\x91\x8d \r\n\r\n// great that we have enough tests and coverage reports to perform such rewrites!'
p26
asg14
S'akarnokd:MapFilterDirect'
p27
sbsI4099
(iPull
Pull
p28
(dp29
g3
S"Continuing from #3164 .\r\n\r\nParsing the generated Findbugs output file it not as trivial as with PMD since it does contain some meta information. \r\n\r\nLet me know whether this is wanted or not and if so how it can be pursued. \r\n\r\nBy default all rules from Findbugs are enabled and one can opt out using `excludeFilter = file('findbugs-filter.xml)` inside the `findbugs` block, which will then contain something alone the lines of [this](http://findbugs.sourceforge.net/manual/filter.html)."
p30
sg5
S'1.x: add findbugs'
p31
sg7
(lp32
S'Build'
p33
asg10
I4099
sg11
(lp34
S"Thanks! I'd like to merge #4091 and #4092 first as rebasing this PR is much easier."
p35
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4099][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4099   diff @@\n==========================================\n  Files           258        258          \n  Lines         16834      16834          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n- Hits          13529      13515    -14   \n- Misses         2400       2408     +8   \n- Partials        905        911     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d855a29...4af7438][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d855a292d6afcb754d664bff475fd40c30776171...4af743828866620c061e50f28f790134647438a6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4099?src=pr'
p36
aS"Running FindBugs locally shows me 31 problems. Half of them look valid, the other half can be ignored (although I don't see any obvious way of suppressing a warning at a specific source line)."
p37
aS"Suppressing them is kind of weird AFAIK you can't use `@SuppressWarnings`, however there's a package, `com.google.code.findbugs:annotations:3.0.1` which gives you [`@SuppressFBWarnings`](http://findbugs.sourceforge.net/api/edu/umd/cs/findbugs/annotations/SuppressFBWarnings.html)."
p38
aS"Is there an option to suppress them by XML file? (Yeah it's annoying, but\nshould help).\n\nOn Fri, 24 Jun 2016, 01:05 Niklas Baudy, <notifications@github.com> wrote:\n\n> Suppressing them is kind of weird AFAIK you can't use @SuppressWarnings,\n> however there's a package, com.google.code.findbugs:annotations:3.0.1\n> which gives you @SuppressFBWarnings\n> <http://findbugs.sourceforge.net/api/edu/umd/cs/findbugs/annotations/SuppressFBWarnings.html>\n> .\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4099#issuecomment-228199417>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3HRx3eid7aXe2iqRvGH99cZzuKP3ks5qOwM2gaJpZM4I9Rdz>\n> .\n>\n"
p39
aS'AFAIK you can just use the `excludeFilter` and then inside ignore certain things (the same way we did it in QualityMatters with Butterknife).'
p40
aS'Could you rebase this?'
p41
aS'Done.'
p42
aS':+1:'
p43
asg14
S'vanniktech:1.x_findbugs'
p44
sbsI4100
(iPull
Pull
p45
(dp46
g3
S'Basically taken from the 1.x branch'
p47
sg5
S'2.x: add pmd'
p48
sg7
(lp49
S'Build'
p50
asg10
I4100
sg11
(lp51
S':+1:'
p52
aS'\xf0\x9f\x91\x8d '
p53
asg14
S'vanniktech:2.x_pmd'
p54
sbsI4101
(iPull
Pull
p55
(dp56
g3
S''
p57
sg5
S'2.x: switch a serialresource use to serialdisposable.'
p58
sg7
(lp59
S'Cleanup'
p60
asg10
I4101
sg11
(lp61
S'## [Current coverage][cc-pull] is **70.05%**\n> Merging [#4101][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4101   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      26985          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4331          \n==========================================\n- Hits          18908      18903     -5   \n- Misses         6169       6171     +2   \n- Partials       1908       1911     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1dd141d...b41ce53][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1dd141dfb2d86871a049dc80fd8ee30bffec5210...b41ce532f77ae1cbf48c9f39668daf077453d949\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4101?src=pr'
p62
aS':+1:'
p63
asg14
S'JakeWharton:jw/low-hanging-fruit'
p64
sbsI4102
(iPull
Pull
p65
(dp66
g3
S'This is a fairly "dumb" addition. There\'s lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state management.\r\n\r\nCloses #4075.'
p67
sg5
S'2.x: expose isdisposed method on disposable.'
p68
sg7
(lp69
S'Enhancement'
p70
asg10
I4102
sg11
(lp71
S'There are a bunch of compilation errors: https://travis-ci.org/ReactiveX/RxJava/builds/139948754#L315'
p72
aS"Probably missing imports. I have to edit those by hand in each file so the\ndiffs don't go wild.\n\nOn Fri, Jun 24, 2016 at 2:59 AM David Karnok <notifications@github.com>\nwrote:\n\n> There are a bunch of compilation errors:\n> https://travis-ci.org/ReactiveX/RxJava/builds/139948754#L315\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4102#issuecomment-228272271>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AAEEEUlxqkqJhxuRrFW6aO9w2KLvOGbDks5qO4BdgaJpZM4I9eR1>\n> .\n>\n"
p73
aS'## [Current coverage][cc-pull] is **69.85%**\n> Merging [#4102][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.28%**\n\n```diff\n@@                2.x      #4102   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      27087   +102   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4356    +25   \n==========================================\n- Hits          18928      18921     -7   \n- Misses         6144       6252   +108   \n- Partials       1913       1914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [7ffed1b...9abd7a6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7ffed1b36a184242830f58d66e683bc4664eb75e...9abd7a6ac2f4b6105414696fdd86a5a6d8de72e5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4102?src=pr'
p74
aS':+1: Thanks. '
p75
asg14
S'JakeWharton:jw/is-disposed'
p76
sbsI4103
(iPull
Pull
p77
(dp78
g3
S'This PR adds 3 operator-fusion related interfaces: \r\n\r\n  - `QueueSubscription` will support fusion for `Flowable` - avoid creating queues, avoid cost of multiple enqueue-dequeue, reduce `request()` overhead\r\n  - `QueueDisposable` will support fusion for `Observable` - avoid creating queues, avoid cost of multiple enqueue-dequeue\r\n  - `ScalarCallable` - indicate a scalar constant source\r\n\r\nIn addition `ConditionalSubscriber` is marked and will be moved to the new package and its method renamed to `tryOnNext`.\r\n\r\nUnlike Reactor-Core (and Rsc), there is no `Fuseable` marker interface. The ability of fusing is indicated by calling `onSubscribe` with the above `QueueX` enabled instances and then called back via `requestFusion`. This allows having less duplicated code compared to Reactor/Rsc - at the cost of usually one extra field to store the `QueueX` value that may be null.'
p79
sg5
S'2.x: prepare the operator-fusion enhancement'
p80
sg7
(lp81
S'Enhancement'
p82
asg10
I4103
sg11
(lp83
S'## [Current coverage][cc-pull] is **70.09%**\n> Merging [#4103][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4103   diff @@\n==========================================\n  Files           380        380          \n  Lines         26985      26985          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4331       4331          \n==========================================\n- Hits          18919      18916     -3   \n- Misses         6155       6159     +4   \n+ Partials       1911       1910     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e9fad24...97801d4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e9fad2483026ece4853078e47b5fb93bc8cbf0fb...97801d404ac89fc84ebd730d7e35b746de9bcb2a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4103?src=pr'
p84
aS'Nice :+1:'
p85
asg14
S'akarnokd:Fuseable'
p86
sbsI4105
(iPull
Pull
p87
(dp88
g3
g57
sg5
S'2.x: remove some superfluous reads before writes.'
p89
sg7
(lp90
S'Cleanup'
p91
asg10
I4105
sg11
(lp92
S'## [Current coverage][cc-pull] is **69.88%**\n> Merging [#4105][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                2.x      #4105   diff @@\n==========================================\n  Files           380        380          \n  Lines         27087      27076    -11   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4356       4345    -11   \n==========================================\n+ Hits          18909      18923    +14   \n+ Misses         6266       6241    -25   \n  Partials       1912       1912          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b40b124...89cb999][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b40b124c135bed4eea4dd0374d0fb62a79361cfa...89cb999f35f527a7635e1af741a396f60e7c63ef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4105?src=pr'
p93
aS':+1:'
p94
asg14
S'JakeWharton:jw/superfluous-reads'
p95
sbsI4106
(iPull
Pull
p96
(dp97
g3
S"I suspect there's quite a few of these all over. These are just the ones I noted while doing other changes."
p98
sg5
S'2.x: remove explicit cancel flags where it can be inferred.'
p99
sg7
(lp100
S'Enhancement'
p101
asg10
I4106
sg11
(lp102
S'## [Current coverage][cc-pull] is **69.84%**\n> Merging [#4106][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4106   diff @@\n==========================================\n  Files           380        380          \n  Lines         27076      27053    -23   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4343     -2   \n==========================================\n- Hits          18910      18895    -15   \n+ Misses         6264       6241    -23   \n- Partials       1902       1917    +15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c9bb518...cb9d60a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c9bb518df5991a65c2f97b8ed7ba5458233963ea...cb9d60a6a01e6e589bd4459da76642212188b7a8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4106?src=pr'
p103
aS':+1:'
p104
asg14
S'JakeWharton:jw/start-deleting-code'
p105
sbsI4107
(iPull
Pull
p106
(dp107
g3
S"The original behavior was somewhat inconsistent: if the target was null before the cancel/dispose, the method didn't return true indicating a successful swap for the current thread. Now that many `cancelled` flag has been removed, it has to consistently trigger the remaining cleanup actions."
p108
sg5
S'2.x: make sure the helper returns true if the pre-swap value was null'
p109
sg7
(lp110
S'Bug'
p111
asg10
I4107
sg11
(lp112
S':+1:'
p113
asg14
S'akarnokd:HelperReportTrueOnNull'
p114
sbsI4108
(iPull
Pull
p115
(dp116
g3
g57
sg5
S'2.x: invert subscription validation return type for better semantics.'
p117
sg7
(lp118
S'Cleanup'
p119
asg10
I4108
sg11
(lp120
S'Similar to #4095.'
p121
aS'## [Current coverage][cc-pull] is **70.02%**\n> Merging [#4108][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.09%**\n\n```diff\n@@                2.x      #4108   diff @@\n==========================================\n  Files           380        380          \n  Lines         27053      27003    -50   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4343       4343          \n==========================================\n- Hits          18919      18910     -9   \n+ Misses         6238       6181    -57   \n- Partials       1896       1912    +16   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [34d5c96...0ce2d65][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/34d5c96bfc7e89fdb840ee6c568cd4d2421f7be6...0ce2d65daf024197fd8db397584054c4d2c894d5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4108?src=pr'
p122
aS':+1:'
p123
asg14
S'JakeWharton:jw/invert-validate'
p124
sbsI4110
(iPull
Pull
p125
(dp126
g3
g57
sg5
S'2.x: remove explicit cancel flags where it can be inferred.'
p127
sg7
(lp128
S'Cleanup'
p129
asg10
I4110
sg11
(lp130
S'Code looks ok, but is the CI failure related to your changes?'
p131
aS'I see it locally so it must be. Will look later tonight and try to figure out which is the cause.'
p132
aS'## [Current coverage][cc-pull] is **69.96%**\n> Merging [#4110][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4110   diff @@\n==========================================\n  Files           382        382          \n  Lines         26972      26960    -12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4338       4339     +1   \n==========================================\n- Hits          18879      18862    -17   \n- Misses         6196       6198     +2   \n- Partials       1897       1900     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ecdd8bb...506a75d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ecdd8bb39bb35d07590a5579794bc302a5e00389...506a75df8a9decb89f2240d68283e5a448d86c8d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4110?src=pr'
p133
asg14
S'JakeWharton:jw/cancel-cancelled'
p134
sbsI4111
(iPull
Pull
p135
(dp136
g3
g57
sg5
S'2.x: simplify boolean disposables which run code on dispose.'
p137
sg7
(lp138
S'Enhancement'
p139
asg10
I4111
sg11
(lp140
S"There's some classes in `internal` which could probably also extend from this type, so we might want to move it to `internal.disposables` and make it public for their use in the future."
p141
aS'Another option to make this more widely applicable would be to have a single class and accept a `Consumer<T> disposer`. That might open it up for use in more places internally.'
p142
aS'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4111][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4111   diff @@\n==========================================\n  Files           380        383     +3   \n  Lines         27005      26987    -18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4340     -5   \n==========================================\n- Hits          18894      18893     -1   \n+ Misses         6203       6192    -11   \n+ Partials       1908       1902     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...e8963e2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...e8963e2099d5e20272435e6ea657405d07d54499\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4111?src=pr'
p143
aS'You can experiment with that if you wish.\r\n:+1:'
p144
asg14
S'JakeWharton:jw/disposables-simplification'
p145
sbsI4112
(iPull
Pull
p146
(dp147
g3
g57
sg5
S'2.x: switch the last serialresource to manual resource management.'
p148
sg7
(lp149
S'Enhancement'
p150
asg10
I4112
sg11
(lp151
S'Test failure is flake #4054.'
p152
aS"New one? Doesn't fail locally.\r\n```\r\nio.reactivex.internal.operators.flowable.FlowableReplayTest > testAsyncComeAndGo FAILED\r\n    java.lang.AssertionError: Error(s) present: [io.reactivex.exceptions.MissingBackpressureException: Can't deliver value 184 due to lack of requests]\r\n        at io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:355)\r\n        at io.reactivex.subscribers.TestSubscriber.assertNoErrors(TestSubscriber.java:418)\r\n        at io.reactivex.internal.operators.flowable.FlowableReplayTest.testAsyncComeAndGo(FlowableReplayTest.java:1022)\r\n        Caused by:\r\n        io.reactivex.exceptions.CompositeException\r\n            at io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:356)\r\n            ... 2 more\r\n            Caused by:\r\n            io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain: Chain of Causes for CompositeException In Order Received =>\r\n                Caused by:\r\n                io.reactivex.exceptions.MissingBackpressureException: Can't deliver value 184 due to lack of requests\r\n```"
p153
aS'## [Current coverage][cc-pull] is **70.04%**\n> Merging [#4112][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4112   diff @@\n==========================================\n  Files           380        379     -1   \n  Lines         27005      26990    -15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4343     -2   \n==========================================\n+ Hits          18894      18904    +10   \n+ Misses         6203       6192    -11   \n+ Partials       1908       1894    -14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...5faf608][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...5faf6089050fe86b21440298fbc4275314b3a75b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4112?src=pr'
p154
aS"Third time's the charm!\n\nOn Fri, Jun 24, 2016 at 11:37 PM Codecov <notifications@github.com> wrote:\n\n> Current coverage <https://codecov.io/gh/ReactiveX/RxJava/pull/4112?src=pr>\n> is *70.04%*\n>\n> Merging #4112 <https://codecov.io/gh/ReactiveX/RxJava/pull/4112?src=pr>\n> into 2.x <https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr> will\n> increase coverage by *0.07%*\n>\n> @@                2.x      #4112   diff @@\n> ==========================================\n>   Files           380        379     -1\n>   Lines         27005      26990    -15\n>   Methods           0          0\n>   Messages          0          0\n>   Branches       4345       4343     -2\n> ==========================================+ Hits          18894      18904    +10   + Misses         6203       6192    -11   + Partials       1908       1894    -14\n>\n> Powered by Codecov <https://codecov.io?src=pr>. Last updated by\n> e5b0b06...5faf608\n> <https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...5faf6089050fe86b21440298fbc4275314b3a75b>\n>\n> \xe2\x80\x94\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4112#issuecomment-228507381>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AAEEEVw86KVUqhMbFXEWeOn9ZrEj6e1Fks5qPKKHgaJpZM4I-NQ0>\n> .\n>\n"
p155
asg14
S'JakeWharton:jw/last-serial-resource'
p156
sbsI4113
(iPull
Pull
p157
(dp158
g3
S'This gives me a 57% reduction in execution time.'
p159
sg5
S'2.x: parallelize unit test execution for speed!'
p160
sg7
(lp161
S'Build'
p162
aS'Test'
p163
asg10
I4113
sg11
(lp164
S"Looks like Travis can't handle it. I can disable it for CI builds where build speed isn't really important."
p165
aS'## [Current coverage][cc-pull] is **69.93%**\n> Merging [#4113][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4113   diff @@\n==========================================\n  Files           380        380          \n  Lines         27005      27005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4345          \n==========================================\n- Hits          18894      18887     -7   \n- Misses         6203       6206     +3   \n- Partials       1908       1912     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...c1b607c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...c1b607c4eb3ae6c547351a46d2b9a2b2f1aee54a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4113?src=pr'
p166
aS'This increases the likelihood of timeouts during heavy times. Maybe later.'
p167
aS"In addition, some tests may conflict because they may change the global hooks. I'm guessing there isn't a JUnit annotation that allows some tests to run in parallel with others while forbidding for others?"
p168
aS"They run in forked JVMs so any static state won't clash.\n\nOn Sat, Jun 25, 2016, 6:23 AM David Karnok <notifications@github.com> wrote:\n\n> In addition, some tests may conflict because they may change the global\n> hooks. I'm guessing there isn't a JUnit annotation that allows some tests\n> to run in parallel with others while forbidding for others?\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4113#issuecomment-228529762>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AAEEEXipt9AbKh48TvcYX66NfjDdqomDks5qPQGlgaJpZM4I-NeJ>\n> .\n>\n"
p169
aS"Okay, let's try it."
p170
asg14
S'JakeWharton:jw/must-go-faster'
p171
sbsI4114
(iPull
Pull
p172
(dp173
g3
S'This is already being done in the library, and is fairly [standard practice][1].\r\n\r\n [1]: https://google.github.io/styleguide/javaguide.html#s5.3-camel-case'
p174
sg5
S'2.x: case io acronym like a word.'
p175
sg7
(lp176
S'Cleanup'
p177
asg10
I4114
sg11
(lp178
S'## [Current coverage][cc-pull] is **69.97%**\n> Merging [#4114][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4114   diff @@\n==========================================\n  Files           380        380          \n  Lines         27005      27005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4345       4345          \n==========================================\n+ Hits          18894      18896     +2   \n+ Misses         6203       6199     -4   \n- Partials       1908       1910     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e5b0b06...bb7448f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e5b0b06646e32cd57994130ab1587ee5f0844f72...bb7448f6fe19051dc0891677a75dbc16048b6532\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4114?src=pr'
p179
asg14
S'JakeWharton:jw/casing'
p180
sbsI4116
(iPull
Pull
p181
(dp182
g3
S'Taken from the 1.x branch'
p183
sg5
S'2.x: add findbugs'
p184
sg7
(lp185
S'Build'
p186
asg10
I4116
sg11
(lp187
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4116][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4116   diff @@\n==========================================\n  Files           382        382          \n  Lines         26960      26960          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4339          \n==========================================\n- Hits          18886      18861    -25   \n- Misses         6172       6198    +26   \n+ Partials       1902       1901     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ecdd563...6c743c8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ecdd5639bba63af8ab21f11d66de65317883f9a6...6c743c8669129213611ba88668bc2e9b243bc003\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4116?src=pr'
p188
asg14
S'vanniktech:2.x_add_findbugs'
p189
sbsI4117
(iPull
Pull
p190
(dp191
g3
S'Increase coverage of `XProudcer`s.'
p192
sg5
S'1.x: increase coverage of producers'
p193
sg7
(lp194
S'Test'
p195
asg10
I4117
sg11
(lp196
S'## [Current coverage][cc-pull] is **80.67%**\n> Merging [#4117][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.39%**\n\n```diff\n@@                1.x      #4117   diff @@\n==========================================\n  Files           258        258          \n  Lines         16834      16835     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n+ Hits          13515      13582    +67   \n+ Misses         2408       2341    -67   \n- Partials        911        912     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a6d6ba9...bd7c676][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a6d6ba98c84dc70fe3c117f69ad554e11ad3c2d4...bd7c676ef00a36163da34e69f80c418651e8cb11\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4117?src=pr'
p197
asg14
S'akarnokd:ProducersCoveragePlusPlus'
p198
sbsI4118
(iPull
Pull
p199
(dp200
g3
S"During code reading I've found some tests that are ignored but don't have a record why they are being ignored. Some of them have meaningful explanations present as line comments, so I decided to make them the parameters of `@Ignore` annotation, so it will be correct."
p201
sg5
S'1.x: provide an explanation why certain tests are ignored'
p202
sg7
(lp203
S'Test'
p204
asg10
I4118
sg11
(lp205
S'## [Current coverage][cc-pull] is **80.64%**\n> Merging [#4118][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4118   diff @@\n==========================================\n  Files           258        258          \n  Lines         16835      16835          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2549          \n==========================================\n- Hits          13588      13576    -12   \n- Misses         2336       2350    +14   \n+ Partials        911        909     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4210577...beae70b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4210577aed9d7b2efb9c51305f02d2c846b558c3...beae70b291a4666a711d4df30d85af633e632e5b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4118?src=pr'
p206
asg14
S'DmitriyZaitsev:dz/1.x/explain_ignored_tests'
p207
sbsI4119
(iPull
Pull
p208
(dp209
g3
S'Increase coverage of internal utils, remove unused and unnecessary items.'
p210
sg5
S'1.x: increase coverage of internal utils, remove unused/unnecessary items'
p211
sg7
(lp212
S'Cleanup'
p213
asg10
I4119
sg11
(lp214
S'## [Current coverage][cc-pull] is **81.17%**\n> Merging [#4119][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.57%**\n\n```diff\n@@                1.x      #4119   diff @@\n==========================================\n  Files           258        257     -1   \n  Lines         16835      16811    -24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2549       2547     -2   \n==========================================\n+ Hits          13569      13647    +78   \n+ Misses         2350       2266    -84   \n+ Partials        916        898    -18   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1d75f4a...2bc0d21][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1d75f4ae08ac8cf468ae86adcf02a566a727f59d...2bc0d218c1b29986a4bae34019a938f70fbacbb1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4119?src=pr'
p215
asg14
S'akarnokd:UtilCoveragePlusPlus'
p216
sbsI4120
(iPull
Pull
p217
(dp218
g3
S'The same as #4118, but for 2.x'
p219
sg5
S'2.x: provide an explanation why certain tests are ignored'
p220
sg7
(lp221
S'Cleanup'
p222
aS'Test'
p223
asg10
I4120
sg11
(lp224
S'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4120][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4120   diff @@\n==========================================\n  Files           382        382          \n  Lines         26960      26960          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4339          \n==========================================\n+ Hits          18862      18872    +10   \n+ Misses         6198       6191     -7   \n+ Partials       1900       1897     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5350508...b5eb1f0][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5350508ba82fc11fd12068eedd33b5febefeebe0...b5eb1f03d5450fbeabb7db2c326df46083813b41\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4120?src=pr'
p225
asg14
S'DmitriyZaitsev:dz/2.x/explain_ignored_tests'
p226
sbsI4122
(iPull
Pull
p227
(dp228
g3
S'This PR refactors `ConditionalSubscriber` and renames its method to `tryOnNext`. In addition, two new abstract subscriber types were added: `BasicFuseableSubscriber` and `BasicFuseableConditionalSubscriber` to help writing operators that support fusion (queue and/or conditional).'
p229
sg5
S'refactor conditionalsubscriber, add base fuseable subscribers'
p230
sg7
(lp231
S'Enhancement'
p232
asg10
I4122
sg11
(lp233
S'## [Current coverage][cc-pull] is **69.67%**\n> Merging [#4122][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.38%**\n\n```diff\n@@                2.x      #4122   diff @@\n==========================================\n  Files           382        384     +2   \n  Lines         26960      27089   +129   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4339       4360    +21   \n==========================================\n- Hits          18888      18875    -13   \n- Misses         6183       6321   +138   \n- Partials       1889       1893     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [0287d55...ad3c466][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/0287d550e38613acac41efdfb51daa69d6f1872d...ad3c466fc4347145a535488084bc5998b0185805\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4122?src=pr'
p234
asg14
S'akarnokd:FuseableHelpers'
p235
sbsI4124
(iPull
Pull
p236
(dp237
g3
S'  - Switch a few `Observable` operators to direct implementations (reduces allocation)\r\n  - Update `map` to support operator fusion; there are no sources or consumer yet though.\r\n  - Adjust `BasicFuseableX` to have different default conveniences\r\n  - Modify `CompositeResource` to indicate success of the mutator methods\r\n  - increase timeout of `FlowableOnBackpressureDropTest.testFixBackpressureWithBuffer`'
p238
sg5
S'switch some observable ops to direct, map fuseable'
p239
sg7
(lp240
S'Cleanup'
p241
aS'Enhancement'
p242
asg10
I4124
sg11
(lp243
S'## [Current coverage][cc-pull] is **69.68%**\n> Merging [#4124][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4124   diff @@\n==========================================\n  Files           384        384          \n  Lines         27089      27125    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4360       4364     +4   \n==========================================\n+ Hits          18880      18903    +23   \n- Misses         6317       6325     +8   \n- Partials       1892       1897     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [109c8c2...b22c53b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/109c8c2cd5c3cb2db61286cb3eb59150a9d5f746...b22c53b8791c7736c08ec1053ca1f474641ba9fc\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4124?src=pr'
p244
asg14
S'akarnokd:ObservableDirect625_1'
p245
sbsI4125
(iPull
Pull
p246
(dp247
g3
g57
sg5
S'1.x: test all private constructors'
p248
sg7
(lp249
S'Test'
p250
asg10
I4125
sg11
(lp251
S'## [Current coverage][cc-pull] is **81.33%**\n> Merging [#4125][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.28%**\n\n```diff\n@@                1.x      #4125   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13626      13674    +48   \n+ Misses         2277       2239    -38   \n+ Partials        908        898    -10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ed92ba8...ae01993][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ed92ba833f05b7eb04ff7d592040656f9bcbcf32...ae019935d8bfe6adf7be389a4839cb0a8061a008\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4125?src=pr'
p252
aS':+1: Great!\r\n\r\n/cc @artem-zinnatullin '
p253
aS"\xf0\x9f\x91\x8d \r\n\r\nNow I'm not that fanatic regarding testing private constructors, but since test coverage causes addiction and constant desire to increase it \xe2\x80\x94 let's merge it!"
p254
aS'Can I suggest in the spirit of DRY that you make a static method available somewhere (a new class `TestingUtil`, say) like this:\r\n\r\n```java\r\npublic static void checkConstructorPrivate(Class<?> cls)  {\r\n    PrivateConstructorChecker\r\n         .forClass(cls)\r\n        .expectedTypeOfException(IllegalStateException.class)\r\n        .expectedExceptionMessage("No instances!").check();\r\n}\r\n```\r\nand call that instead?'
p255
aS"Thanks!\r\n\r\n@davidmoten I'll refactor those checks into a simple call as you and [I](https://github.com/ReactiveX/RxJava/pull/4125#discussion_r68494047) suggested."
p256
asg14
S'vanniktech:1.x_test_private_constructors'
p257
sbsI4126
(iPull
Pull
p258
(dp259
g3
S'This PR removes the `XResource` types and replaces them with `XDisposable` or `XSubscription` where necessary.'
p260
sg5
S'remove xresource classes'
p261
sg7
(lp262
S'Cleanup'
p263
asg10
I4126
sg11
(lp264
S'## [Current coverage][cc-pull] is **69.56%**\n> Merging [#4126][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4126   diff @@\n==========================================\n  Files           384        383     -1   \n  Lines         27125      27074    -51   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4364       4355     -9   \n==========================================\n- Hits          18896      18834    -62   \n- Misses         6327       6349    +22   \n+ Partials       1902       1891    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [05e160c...28b7449][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/05e160c7cfd2212a0b9a985c5294c7de5c844d90...28b744970481774c56ff49bd3e135059a5257aef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4126?src=pr'
p265
asg14
S'akarnokd:XResourceRemove'
p266
sbsI4127
(iPull
Pull
p267
(dp268
g3
g57
sg5
S'2.x: correct method name for flowable-->observable.'
p269
sg7
(lp270
S'Cleanup'
p271
asg10
I4127
sg11
(lp272
S'## [Current coverage][cc-pull] is **69.63%**\n> Merging [#4127][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                2.x      #4127   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4355          \n==========================================\n+ Hits          18830      18852    +22   \n+ Misses         6352       6329    -23   \n- Partials       1892       1893     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [68a9a66...858e3d8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/68a9a66d27386e0fce7196f2797446676f1206a6...858e3d8e5740316fb25a8084d724f05ac573bde0\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4127?src=pr'
p273
asg14
S'JakeWharton:jw/naming'
p274
sbsI4128
(iPull
Pull
p275
(dp276
g3
g57
sg5
S'2.x: reduce the visibility of internal methods.'
p277
sg7
(lp278
S'Cleanup'
p279
asg10
I4128
sg11
(lp280
S'## [Current coverage][cc-pull] is **69.50%**\n> Merging [#4128][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4128   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4355          \n==========================================\n- Hits          18830      18819    -11   \n- Misses         6352       6359     +7   \n- Partials       1892       1896     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [68a9a66...9524f46][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/68a9a66d27386e0fce7196f2797446676f1206a6...9524f46ec7614131a0c4cda32f75fc999646fb55\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4128?src=pr'
p281
asg14
S'JakeWharton:jw/visibility-reduction'
p282
sbsI4129
(iPull
Pull
p283
(dp284
g3
S'This PR adjusts the PMD rules and fixes about 300 suggestions.'
p285
sg5
S'2.x: cleanup of pmd suggestions'
p286
sg7
(lp287
S'Cleanup'
p288
asg10
I4129
sg11
(lp289
S'## [Current coverage][cc-pull] is **69.60%**\n> Merging [#4129][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4129   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27037    -37   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4340    -15   \n==========================================\n- Hits          18862      18820    -42   \n- Misses         6320       6329     +9   \n+ Partials       1892       1888     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c9c772f...1c797b3][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c9c772fbefecafc5fcb600fab7e16c7657a798b3...1c797b3a0a5ed30e5d28c15787acb5fae6e0c8ef\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4129?src=pr'
p290
asg14
S'akarnokd:PMDFixes626'
p291
sbsI4130
(iPull
Pull
p292
(dp293
g3
S"Don't run findbugs for the perf and test packages."
p294
sg5
S'2.x: run findbugs on main only'
p295
sg7
(lp296
S'Build'
p297
asg10
I4130
sg11
(lp298
S'This should also be adjusted in 1.x right?'
p299
aS'Yes, running on test sometimes takes so long travis kills the build.'
p300
asg14
S'akarnokd:FindBugsMain'
p301
sbsI4131
(iPull
Pull
p302
(dp303
g3
g57
sg5
S'1.x: run findbugs on main only'
p304
sg7
(lp305
S'Build'
p306
asg10
I4131
sg11
(lp307
S'## [Current coverage][cc-pull] is **81.08%**\n> Merging [#4131][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4131   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13626      13631     +5   \n+ Misses         2277       2276     -1   \n+ Partials        908        904     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ed92ba8...bb38578][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ed92ba833f05b7eb04ff7d592040656f9bcbcf32...bb3857818607eb0109b725be809118d3503e938b\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4131?src=pr'
p308
asg14
S'vanniktech:1.x_findbugs_main_only'
p309
sbsI4133
(iPull
Pull
p310
(dp311
g3
S'Move into `TestUtil.checkUtilityClass()`.'
p312
sg5
S'refactor private constructor checker into a utility class'
p313
sg7
(lp314
S'Cleanup'
p315
aS'Test'
p316
asg10
I4133
sg11
(lp317
S'## [Current coverage][cc-pull] is **81.25%**\n> Merging [#4133][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4133   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n- Hits          13666      13659     -7   \n- Misses         2243       2245     +2   \n- Partials        902        907     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5c74757...c568e9d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5c747577e910b5eda657bc9f825914965fb2f1c4...c568e9db169ee22992af8421dcebeda21b634202\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4133?src=pr'
p318
aS'\xf0\x9f\x91\x8d '
p319
aS'/cc @davidmoten '
p320
aS':+1: '
p321
asg14
S'akarnokd:PrivateCheckerUtil'
p322
sbsI4134
(iPull
Pull
p323
(dp324
g3
S'This PR adds the missing `@Override` annotations and renames the `Observable` unit tests to conform a single name pattern.'
p325
sg5
S'2.x: cleanup and test renames'
p326
sg7
(lp327
S'Cleanup'
p328
asg10
I4134
sg11
(lp329
S'## [Current coverage][cc-pull] is **69.59%**\n> Merging [#4134][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4134   diff @@\n==========================================\n  Files           383        383          \n  Lines         27037      27037          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4340          \n==========================================\n+ Hits          18804      18816    +12   \n+ Misses         6349       6331    -18   \n- Partials       1884       1890     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [9228137...5eaddd9][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/92281376dbf8b75bc9b310ab10a4a9be30cde54f...5eaddd9609d6cde62e7945c379cc135f976d32ce\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4134?src=pr'
p330
asg14
S'akarnokd:CleanupAndRenames'
p331
sbsI4135
(iPull
Pull
p332
(dp333
g3
S'Target 2.x and (C) 2016.'
p334
sg5
S'2.x update branch and year in contributing and readme md'
p335
sg7
(lp336
S'Documentation'
p337
asg10
I4135
sg11
(lp338
S'## [Current coverage][cc-pull] is **69.55%**\n> Merging [#4135][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4135   diff @@\n==========================================\n  Files           383        383          \n  Lines         27037      27037          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4340          \n==========================================\n+ Hits          18797      18805     +8   \n+ Misses         6354       6348     -6   \n+ Partials       1886       1884     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d572419...36af68d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d5724198e2be3d1101a26cff40654f6eb30fee72...36af68dcc018a43a7221e39655eca9479731ae00\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4135?src=pr'
p339
aS'\xf0\x9f\x91\x8d '
p340
asg14
S'akarnokd:ContributingUpdate'
p341
sbsI4136
(iPull
Pull
p342
(dp343
g3
S'  - adds an operator `hide` to allow hiding and breaking optimizations\r\n  - update `filter` to support fusions: queue and conditional\r\n  - `range` now supports fusion: sync-queue and conditional\r\n  - `fromArray` now supports fusion: sync-queue and conditional\r\n  - `fromIterable` now supports fusion: sync-queue and conditional\r\n  - enhanced `TestSubscriber` methods to return this - allows chaining the assertions\r\n  - extended `TestSubscriber` to act as a consumer for queue-fusion\r\n  - introduced `FlowableSource` as an intermediate type for operators: allows discovering the upstream in a standard way, allows the IDE to generate a constructor with a source value.\r\n  - added `BasicQueueSubscription` that locks down unused `Queue` methods plus is a container for an atomic long value useful for request/wip tracking.'
p344
sg5
S'2.x: enable fuseable sources, adjust operators'
p345
sg7
(lp346
S'Enhancement'
p347
asg10
I4136
sg11
(lp348
S'## [Current coverage][cc-pull] is **69.22%**\n> Merging [#4136][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.30%**\n\n```diff\n@@                2.x      #4136   diff @@\n==========================================\n  Files           383        386     +3   \n  Lines         27037      27277   +240   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4340       4410    +70   \n==========================================\n+ Hits          18797      18882    +85   \n- Misses         6354       6506   +152   \n- Partials       1886       1889     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d572419...cbe8432][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d5724198e2be3d1101a26cff40654f6eb30fee72...cbe84323ea79a2b0a60aca1985d514c60e2318a0\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4136?src=pr'
p349
asg14
S'akarnokd:RangeArrayIterableFuseable'
p350
sbsI4139
(iPull
Pull
p351
(dp352
g3
S'This PR should fix some test timing out otherwise sensitive to thread hiccups.\r\n\r\n#4138\r\n#4109\r\n#4054'
p353
sg5
S'2.x: fix flaky tests'
p354
sg7
(lp355
S'Test-Failures'
p356
asg10
I4139
sg11
(lp357
S':+1:'
p358
aS'## [Current coverage][cc-pull] is **69.20%**\n> Merging [#4139][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4139   diff @@\n==========================================\n  Files           386        386          \n  Lines         27277      27277          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n- Hits          18879      18876     -3   \n  Misses         6508       6508          \n- Partials       1890       1893     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [13df09b...eb8242a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/13df09b14d97820d5becb6d9ceacfeff5091a8e3...eb8242a44298bfafb62118b075f91f390431f6f9\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4139?src=pr'
p359
asg14
S'akarnokd:FixFlakyTests'
p360
sbsI4140
(iPull
Pull
p361
(dp362
g3
S'Closes #3851, closes #4137.'
p363
sg5
S'1.x: change completable.subscribe(onerror, oncomplete) to (oncomplete, onerror)'
p364
sg7
(lp365
S'Enhancement'
p366
asg10
I4140
sg11
(lp367
S'Actually, I can deprecate old one and add new one as overload, it will have less impact on user code because only calls like `subscribe(Actions.empty(), Actions.empty())` will be ambiguous to the compiler.\r\n\r\nThoughts?'
p368
aS'## [Current coverage][cc-pull] is **81.33%**\n> Merging [#4140][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4140   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16811          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2547          \n==========================================\n+ Hits          13666      13673     +7   \n+ Misses         2243       2238     -5   \n+ Partials        902        900     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5c74757...55723da][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5c747577e910b5eda657bc9f825914965fb2f1c4...55723da4b83365611d103a5e0971a198fcafbea1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4140?src=pr'
p369
aS':+1:'
p370
aS"Dynamic languages have trouble with the two methods, let's only have 1 method."
p371
aS'\xf0\x9f\x91\x8d '
p372
asg14
S'artem-zinnatullin:1x/az/completable-subscribe'
p373
sbsI4141
(iPull
Pull
p374
(dp375
g3
S'Upgrade to 2.14.'
p376
sg5
S'2.x: upgrade to gradle 2.14'
p377
sg7
(lp378
S'Build'
p379
asg10
I4141
sg11
(lp380
S'Wait!'
p381
aS'## [Current coverage][cc-pull] is **69.20%**\n> Merging [#4141][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4141   diff @@\n==========================================\n  Files           386        386          \n  Lines         27277      27277          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n- Hits          18882      18878     -4   \n- Misses         6507       6508     +1   \n- Partials       1888       1891     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [64cda78...305ef3e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/64cda78bc6a49b767adb20deb25eefa459a3d7ae...305ef3eb5b6e9efcfda83a91e9c81bf5a2d1f33c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4141?src=pr'
p382
aS"You just updated link to gradle wrapper, but you haven't run any gradle task and it didn't download new `gradlew` shell flies and new `gradle-wrapper.jar`\r\n\r\nJust run gradle, ie: `./gradlew --version`, it should update wrapper files and then you need to add them to PR."
p383
aS'https://travis-ci.org/ReactiveX/RxJava/builds/140744064#L274'
p384
aS'```\r\nC:\\Users\\akarnokd\\git\\RxJava>gradlew --version\r\n\r\n------------------------------------------------------------\r\nGradle 2.14\r\n------------------------------------------------------------\r\n\r\nBuild time:   2016-06-14 07:16:37 UTC\r\nRevision:     cba5fea19f1e0c6a00cc904828a6ec4e11739abc\r\n\r\nGroovy:       2.4.4\r\nAnt:          Apache Ant(TM) version 1.9.6 compiled on June 29 2015\r\nJVM:          1.8.0_92 (Oracle Corporation 25.92-b14)\r\nOS:           Windows 7 6.1 amd64\r\n\r\nC:\\Users\\akarnokd\\git\\RxJava>\r\n```'
p385
aS'Right, but for next PR gradle wrapper files will be marked as changed and will have to be commited.\r\n\r\nCan you check what `git status` shows for you now? `gradle/wrapper/gradle-wrapper.jar` should be marked as changed, `./gradlew` and `./gradlew.bat` can be changed too.'
p386
aS'You have to run `./gradlew wrapper` to update the wrapper files.'
p387
aS'Okay.'
p388
aS"That's better, \xf0\x9f\x91\x8d "
p389
asg14
S'akarnokd:Gradle214'
p390
sbsI4142
(iPull
Pull
p391
(dp392
g3
S"This PR adds unit tests for the new `RxJavaHooks` facility and fixes\r\n\r\n  - Small mistakes in calling the right hook.\r\n  - Dealing with constant `Completable` sources such as `complete()` and `never()`: they executed the hook on class initialization so they couldn't be properly overridden later via an `onCreate` hook. (This could affect the other constants and will be addressed separately.)"
p393
sg5
S'1.x: add rxjavahooks tests, fix small bugs'
p394
sg7
(lp395
S'Bug'
p396
aS'Test'
p397
asg10
I4142
sg11
(lp398
S'## [Current coverage][cc-pull] is **81.47%**\n> Merging [#4142][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.23%**\n\n```diff\n@@                1.x      #4142   diff @@\n==========================================\n  Files           257        257          \n  Lines         16811      16823    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2547       2550     +3   \n==========================================\n+ Hits          13658      13707    +49   \n+ Misses         2247       2218    -29   \n+ Partials        906        898     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d66d931...6d5473a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d66d9313d8580b56a53b28dba32fb1ccacd606b6...6d5473aaad6f06c3707acbd6ae8f776731503012\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4142?src=pr'
p399
aS'Updated.'
p400
asg14
S'akarnokd:HooksTests'
p401
sbsI4143
(iPull
Pull
p402
(dp403
g3
S'This is a semantics-preserving refactoring.\r\n\r\n- We are evaluating a research prototype automated refactoring Eclipse plug-in called [Migrate Skeletal Implementation to Interface](https://github.com/khatchad/Migrate-Skeletal-Implementation-to-Interface-Refactoring). We have applied the tool to your project in the hopes of receiving feedback.\r\n- The approach is very conservative and you should not observe many source code changes.\r\n- The source code should be semantically equivalent to the original.\r\n- We have run tests prior to applying to the tool and following the application. All tests pass.\r\n\r\nThank you for your help in this evaluation!'
p404
sg5
S'applied skeletal implementation to interface migration refactoring'
p405
sg7
(lp406
S'Question'
p407
asg10
I4143
sg11
(lp408
S"I'm sorry, these are unacceptable changes. RxJava is a library, targeting Java 6, so even beyond the `default` changes, we want those methods to be implemented."
p409
aS'@akarnokd Thank you for the feedback!'
p410
asg14
S'khatchadourian-lab:1.x'
p411
sbsI4145
(iPull
Pull
p412
(dp413
g3
S'This concludes the architecture switch for 2.x.'
p414
sg5
S'observable direct rest'
p415
sg7
(lp416
S'Enhancement'
p417
asg10
I4145
sg11
(lp418
S'## [Current coverage][cc-pull] is **69.27%**\n> Merging [#4145][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4145   diff @@\n==========================================\n  Files           386        387     +1   \n  Lines         27277      27333    +56   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4410          \n==========================================\n+ Hits          18888      18935    +47   \n+ Misses         6502       6501     -1   \n- Partials       1887       1897    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a09f5a4...2ddb055][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a09f5a48da7b1f9874fff0382d5da92d116bde39...2ddb055f9608802f206828ade4ee78412b9d3717\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4145?src=pr'
p419
aS'@JakeWharton do you want to review this?'
p420
aS'lgtm :+1:'
p421
aS'Thanks @JakeWharton !'
p422
asg14
S'akarnokd:ObservableDirectRest'
p423
sbsI4146
(iPull
Pull
p424
(dp425
g3
S'I forgot to invert the noHook -> useHook change.'
p426
sg5
S'fix the initialization of completable.complete()'
p427
sg7
(lp428
S'Test'
p429
asg10
I4146
sg11
(lp430
S'The related tests failed for me due to test ordering; if they were the very first encounters of `Completable`.'
p431
aS'## [Current coverage][cc-pull] is **81.43%**\n> Merging [#4146][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4146   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n+ Hits          13684      13699    +15   \n+ Misses         2236       2226    -10   \n+ Partials        903        898     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [ee63aff...c636f6a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/ee63affc1c237ecabccbdc2a7d9398e3d5c39372...c636f6a07a7929d2681db57a876d62a8b8f52b8c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4146?src=pr'
p432
asg14
S'akarnokd:CompletableHookFlagFix'
p433
sbsI4151
(iPull
Pull
p434
(dp435
g3
S'This PR enables operator fusion for scalar and knowingly single-element sources.\r\n\r\nThere are no fusion-consumers yet.'
p436
sg5
S'2.x: enable scalar and async fuseable sources and intermediates'
p437
sg7
(lp438
S'Enhancement'
p439
asg10
I4151
sg11
(lp440
S'## [Current coverage][cc-pull] is **69.16%**\n> Merging [#4151][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.18%**\n\n```diff\n@@                2.x      #4151   diff @@\n==========================================\n  Files           387        388     +1   \n  Lines         27333      27387    +54   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4410       4393    -17   \n==========================================\n- Hits          18955      18942    -13   \n- Misses         6488       6564    +76   \n+ Partials       1890       1881     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d4f041b...4f2eece][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d4f041bd1d7944ee467f3cbe04d6f1371e8f312b...4f2eecee404238b49c4ac0f2f074ed6d63938231\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4151?src=pr'
p441
aS'@JakeWharton, @artem-zinnatullin want to take a look?'
p442
aS"Yes, in 24 hours if you don't mind"
p443
aS'lgtm :+1:'
p444
aS'\xf0\x9f\x91\x8d '
p445
aS'\xf0\x9f\x91\x8d '
p446
aS'Thanks to everyone for the review.'
p447
asg14
S'akarnokd:OpFusion630_1'
p448
sbsI4154
(iPull
Pull
p449
(dp450
g3
S"based on #4115\r\n\r\nAllows the use of operators for controlling the timing around when actions scheduled on workers are actually done. This makes it possible to layer additional behavior on an existing `Scheduler`. The main parameter is a function that flattens an `Observable<Completable>` into just one `Completable`. There must be a chain of operators connecting the returned value to the source Observable otherwise any work scheduled on the Scheduler will not be executed.\r\n\r\nWhen `scheduler.createWorker()` is invoked a `Completable` is onNext'd to the combinator to be flattened. If the `Completable` is not immediately subscribed to an calls to `worker.schedule(...)` are buffered. Once the `Completable` is subscribed to actions are then scheduled on the actual Scheduler. When the `Worker` is unsubscribed the `Completable` emits an onComplete and triggers any behavior in the flattening operator. The `Observable<Completable>` and all `Completable`s give to the flattening function never onError.\r\n\r\nSlowing down the rate to no more than than 1 a second.\r\n\r\n```java\r\n Scheduler slowSched = new ScheduleWhen(workers -> {\r\n \t// use concatenate to make each worker happen one at a time.\r\n \treturn Completable.concat(workers.map(worker -> {\r\n \t\t// delay the starting of the next worker by 1 second.\r\n \t\treturn worker.delay(1, TimeUnit.SECONDS);\r\n \t}));\r\n }, Schedulers.computation());\r\n```\r\nLimit the amount concurrency two at a time without creating a new fix size thread pool:\r\n\r\n```java\r\n Scheduler limitSched = new ScheduleWhen(workers -> {\r\n \t// use merge max concurrent to two at a time\r\n \treturn Completable.merge(workers, 2);\r\n }, Schedulers.computation());\r\n ```"
p451
sg5
S'ability to create custom schedulers with behavior based on composing operators.'
p452
sg7
(lp453
S'Feature-Request'
p454
asg10
I4154
sg11
(lp455
S'This test changes its timing pattern when run on one of the merging-customization of this scheduler:\r\n\r\n```java\r\n@Test\r\npublic void fastTasks() {\r\n    final Scheduler sched = new ScheduleWhen(new Func1<Observable<Completable>, Completable>() {\r\n        @Override\r\n        public Completable call(Observable<Completable> workers) {\r\n            return Completable.merge(workers, 2);\r\n        }\r\n    }, Schedulers.computation());\r\n    \r\n    \r\n    Observable.range(1, 4).flatMap(new Func1<Integer, Observable<String>>() {\r\n        @Override\r\n        public Observable<String> call(final Integer v) {\r\n            return Observable.interval(500, TimeUnit.MILLISECONDS, sched)\r\n            .take(10).map(new Func1<Long, String>() {\r\n                @Override\r\n                public String call(Long u) {\r\n                    return v + " refresh " + u;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    )\r\n    .timeInterval()\r\n    .toBlocking()\r\n    .subscribe(new Action1<TimeInterval<String>>() {\r\n        @Override\r\n        public void call(TimeInterval<String> v) {\r\n            System.out.println(v);\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nWhat I get is that for the first 5 seconds, I get `1 refresh x` and `2 refresh x` in 500 ms intervals, but after thet, all the `3 refresh x` and `4 refresh x` gets printed instantly.\r\n\r\n```\r\nTimeInterval [intervalInMilliseconds=515, value=2 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 0]\r\nTimeInterval [intervalInMilliseconds=500, value=1 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 1]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 2]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 3]\r\nTimeInterval [intervalInMilliseconds=485, value=2 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 4]\r\nTimeInterval [intervalInMilliseconds=516, value=2 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 5]\r\nTimeInterval [intervalInMilliseconds=486, value=1 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 6]\r\nTimeInterval [intervalInMilliseconds=500, value=1 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=2 refresh 7]\r\nTimeInterval [intervalInMilliseconds=499, value=2 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 8]\r\nTimeInterval [intervalInMilliseconds=500, value=2 refresh 9]\r\nTimeInterval [intervalInMilliseconds=0, value=1 refresh 9]\r\nTimeInterval [intervalInMilliseconds=516, value=3 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 0]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 1]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 2]\r\nTimeInterval [intervalInMilliseconds=0, value=4 refresh 9]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 3]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 4]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 5]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 6]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 7]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 8]\r\nTimeInterval [intervalInMilliseconds=0, value=3 refresh 9]\r\n```\r\n\r\nIf I understand the purpose of this scheduler, especially with the `merge(workers, 2)` case, you want to limit the number of concurrently running tasks. However, the implementation blocks out further workers from executing anything until a previous worker is released. \r\n\r\nFor example, given a service that accepts 2 connections per client, if I have to periodically execute 3 or more tasks against this service (via the `interval()` above), only the first two would execute periodically. In addition, the other 2 would slowly pile up tasks in the internal queue and if the associated sequence uses timeout, this will make it timeout.\r\n\r\nI think the solution is to use a fixed thread pool instead: it limits the number of concurrent tasks while allowing all workers to make progress.\r\n\r\nMy second reservation is that since the `ScheduleWhen` is a self-contained class (unlike operators that need a method in `Observable`) this can live in any external library (just like `AndroidSchedulers`).'
p456
aS"This isn't intended for long running Observables. Your example is a pathological case. Rather than scheduling on the outer timer if flatMap and schedule on the inner Observables it would not block and all three would be able to run.\r\n\r\nThere are many was to misuse this but if used in a controlled setting of a service library it can be use to protect service from bursts of traffic. \r\n\r\nThe main point is to be able to reuse an existing scheduler with some additional behavior rather than having to create new thread pools to enforce rate limits."
p457
aS"To address your concern I've changed the API from `Ob<Comp> -> Comp` to `Ob<Ob<Comp>> -> Comp`. This is a more direct mapping of Scheduler of Workers of Actions that give the user complete control how and when the actions are done. In the example above the actions from all workers can be merged into one stream of actions and then the merge max (N) concurrent could be applied to the actions to better simulate running on a N threads.\r\n"
p458
aS'## [Current coverage][cc-pull] is **83.12%**\n> Merging [#4154][cc-pull] into [1.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4154   diff @@\n==========================================\n  Files           261        262     +1   \n  Lines         16918      16986    +68   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2562     +7   \n==========================================\n+ Hits          14062      14119    +57   \n- Misses         1982       1988     +6   \n- Partials        874        879     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [97c4e53...f3777df][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/97c4e537867efd4c9411c14bda0a40de76e83218...f3777dfd04ba1817a2923648346caa1f09aa3f28?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4154?src=pr'
p459
aS"@akarnokd I think I've addressed all the concerns regrading this PR. What can I do help get this experiment merged?"
p460
aS"Oh, sorry; was busy with something else.\r\n\r\nOkay, let's continue with the experiment. :+1:\r\n\r\n/cc @zsxwing @artem-zinnatullin "
p461
aS'Does \xf0\x9f\x91\x8d  mean the PR is merged now? Should we wait for a review from @zsxwing and/or @artem-zinnatullin?'
p462
aS"Let's wait for at least one of them."
p463
aS'\xf0\x9f\x91\x8d  for this experiment api. Just one comment about `synchronized (actionQueue)`.'
p464
aS"Very interesting API, @abersnaze! Few comments and I'm \xf0\x9f\x91\x8d with it."
p465
aS"I don't know how I would draw the marble diagram for this one."
p466
aS'@abersnaze If all feedback is resolved, feel free to merge this PR and if you want, post any short description of this addition beyond the ref to this PR.'
p467
aS'Thanks for the feed back'
p468
aS"As far as I'm concerned the feedback cycle hadn't really finished on this. I'm hoping that api changes etc are not out of scope if I raise an issue."
p469
aS'My comment about the use of `subscribe()` in the constructor was not addressed. Should be `unsafeSubscribe()` I think.'
p470
aS"@davidmoten If you have further concerns, don't hesitate to open an issue or post a PR. The file needs some javadoc tidying up anyway..."
p471
asg14
S'abersnaze:sched'
p472
sbsI4157
(iPull
Pull
p473
(dp474
g3
S'This PR enables fusion-consumers such as `observeOn`, `flatMap`, `zip`, `concatMap`; makes `UnicastProcessor` async-fuseable (used by `window`); fixes a few hidden issues with operators and has convenience renames of `SubscriptionHelper.validateX`. In addition, it features the new `FlowableFlattenIterable` used by `flatMapIterable` and `concatMapIterable`.'
p475
sg5
S'2.x: enable fusion-consumers'
p476
sg7
(lp477
S'Enhancement'
p478
asg10
I4157
sg11
(lp479
S'## [Current coverage][cc-pull] is **68.29%**\n> Merging [#4157][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.84%**\n\n```diff\n@@                2.x      #4157   diff @@\n==========================================\n  Files           388        390     +2   \n  Lines         27387      28242   +855   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4393       4569   +176   \n==========================================\n+ Hits          18934      19287   +353   \n- Misses         6571       7016   +445   \n- Partials       1882       1939    +57   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4dbd735...474a010][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4dbd7351c9b514e2661930c2a9dea222cd91748e...474a01063f235ed00c5b73b4b0aa0f8fe2e24611\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4157?src=pr'
p480
aS"Wow this was dense! I tried my best to parse a lot of the queue/drain changes, but I definitely didn't get a full mental model going of each one since there were so many. I started pattern matching and just checking for more simple issues. I have confidence in the present and future tests for these as well, which helps.\r\n\r\n:+1:"
p481
aS'Thanks @JakeWharton. \r\n\r\nIt is really simple concept: instead of creating a queue, operators reuse the queue-view of their upstream, which could be queue views themselves. The drain algorithms hardly change except when `request()` has to be suppressed. The difficulty is the need to know **all** operator internals over the entire library.'
p482
aS"> The difficulty is the need to know all operator internals over the entire library.\r\n\r\nI haven't had a chance to go through your changes in any detail. Just have a question. What will this mean for `lift`, `extend`, and general extensibility use cases?"
p483
aS'@stealthcode `lift`, `to` and `compose` are still usable. There is no `extend` in 2.x because the 1.x is just simply too restrictive on its function-input; `to(Function<Flowable, X>)` gives access to all operators and you can have your favorite leave-transform function with it:\r\n\r\n```java\r\nFunction<Flowable<Integer>, Integer> conv = f -> f.map(a -> a + 1).toBlocking().last();\r\n\r\nSystem.out.println(source.to(conv))\r\n```\r\n\r\nImplementing operators is now generally harder because the lifecycle of Reactive-Streams is different. Operator-fusion adds an extra requirement that you should not forward an upstream `Subscription`:\r\n\r\n```java\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n         child.onSubscribe(s); // <- not allowed, may break the operator or fusion around it\r\n    }\r\n```'
p484
aS"It looks like `to` offers at least all of the functionality of `extend`. Clearly as there is no `OnSubscribe` the same API isn't possible. \r\n\r\n> you should not forward an upstream `Subscription`\r\n\r\nIn 2.x the disposable model forced changes in this area but not such that subscriptions couldn't be forwarded down the chain. AFAIK this was a common optimization pattern in 1.x for some operators. @abersnaze and I talked and I think my understanding is that a fuseable operator will pass along a subscription but a non-fusable operator will create it's own, is that correct?"
p485
aS"> In 2.x the disposable model forced changes in this area but not such that subscriptions couldn't be forwarded down the chain. \r\n\r\nThat was true before operator-fusion came into picture.\r\n\r\n> AFAIK this was a common optimization pattern in 1.x for some operators.\r\n\r\nThe architecture change induced by Reactive-Streams and operator-fusion added a lot of optimizations, surpassing those in 1.x.\r\n\r\n> @abersnaze and I talked and I think my understanding is that a fuseable operator will pass along a subscription but a non-fusable operator will create it's own, is that correct?\r\n\r\nNo, every intermediate `Subscriber` implements `Subscription` should pass itself along, at least. If the operator doesn't want to support fusion, that's the minimum.\r\n\r\n```java\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n         if (SubscriptionHelper.validate(this.s, s)) {\r\n             this.s = s;\r\n             child.onSubscribe(this);\r\n         }\r\n    }\r\n\r\n    @Override\r\n    public void request(long n) {\r\n         s.request(n);\r\n    }\r\n\r\n    @Override\r\n    public void cancel() {\r\n         s.cancel();\r\n    }\r\n```\r\n\r\nOtherwise, if an operator would pass the `Subscription` along, it could cut itself out from the dataflow as the `QueueSubscription.poll` skips over it."
p486
aS'@artem-zinnatullin I guess you want to review this as well?'
p487
aS'@akarnokd yup, looking'
p488
aS"ok, \xf0\x9f\x91\x8d, in general, pattern looks understandable but amount of code and states in it make it hard to understand\xe2\x80\xa6\r\n\r\n// Don't want to complain, but will be easier to review smaller PRs :) (I know that at least I create backpressure for your PRs so I understand why you're doing such huge amounts of work in one PR, sorry for that)"
p489
aS'Thanks @artem-zinnatullin . \r\n\r\nMost of the time, I start small but then a change activates cascading effects: fixing a base structure exposes a bug in another operator that has to be updated.'
p490
asg14
S'akarnokd:OpFusion701_1'
p491
sbsI4160
(iPull
Pull
p492
(dp493
g3
S'This short PR enables operator fusion on `groupBy` and on the `doOnNext`, `doOnError`, `doOnComplete` and `doOnEach` operators.\r\n\r\nIn addition, it fixes small mistakes in `map` and `filter` and adds a method to `TestSubscriber` to print better fusion-assertion failure message.'
p494
sg5
S'2.x: enable op-fusion on groupby, doonx, fix mistakes in map and filter'
p495
sg7
(lp496
S'Enhancement'
p497
asg10
I4160
sg11
(lp498
S'## [Current coverage][cc-pull] is **68.20%**\n> Merging [#4160][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4160   diff @@\n==========================================\n  Files           390        390          \n  Lines         28242      28410   +168   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4569       4607    +38   \n==========================================\n+ Hits          19257      19377   +120   \n- Misses         7043       7074    +31   \n- Partials       1942       1959    +17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [af3107c...b399afc][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/af3107cd4c0c848d6956a1a1082cd0b3180ac5d4...b399afcfb8b21e9f06744cf743654079decd0c91\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4160?src=pr'
p499
aS'\xf0\x9f\x91\x8d '
p500
aS'Thanks @artem-zinnatullin! @JakeWharton or anybody else wants to review this?'
p501
aS':+1:'
p502
asg14
S'akarnokd:GroupByFusion'
p503
sbsI4165
(iPull
Pull
p504
(dp505
g3
S'This was due to bad rewrite of field updater to atomic reference.'
p506
sg5
S'2.x: fix wrong reference check in flatteniterable'
p507
sg7
(lp508
S'Bug'
p509
asg10
I4165
sg11
(lp510
sg14
S'akarnokd:FlattenIterableFix'
p511
sbsI4166
(iPull
Pull
p512
(dp513
g3
S'This updates the perf classes a bit and adds a blocking benchmark.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16580974/5ff08e54-42a7-11e6-889e-cfbb5c0bdecb.png)\r\n'
p514
sg5
S'2.x: measure overhead of toblocking() first and last'
p515
sg7
(lp516
S'Performance'
p517
asg10
I4166
sg11
(lp518
S'## [Current coverage][cc-pull] is **68.45%**\n> Merging [#4166][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4166   diff @@\n==========================================\n  Files           390        390          \n  Lines         28411      28411          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4607       4607          \n==========================================\n+ Hits          19441      19449     +8   \n+ Misses         6988       6983     -5   \n+ Partials       1982       1979     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4c7e62c...1736e5d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4c7e62cfe92990ba5fd8d954cbd4364f291b986e...1736e5d1f24e2bd12c54e5998bdd10cab7fafad4\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4166?src=pr'
p519
asg14
S'akarnokd:BlockingFirstLastPerf'
p520
sbsI4167
(iPull
Pull
p521
(dp522
g3
S'Optimize the reception, less allocation, less overhead in general.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16583761/065268fc-42b8-11e6-86a1-4ac91da80c97.png)\r\n'
p523
sg5
S'2.x: reduce overhead of blocking first/last/single'
p524
sg7
(lp525
S'Performance'
p526
asg10
I4167
sg11
(lp527
S'## [Current coverage][cc-pull] is **68.40%**\n> Merging [#4167][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4167   diff @@\n==========================================\n  Files           390        396     +6   \n  Lines         28411      28395    -16   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4607       4612     +5   \n==========================================\n- Hits          19457      19425    -32   \n- Misses         6962       6987    +25   \n+ Partials       1992       1983     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [868dc0f...fff5ad0][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/868dc0fedb7564601227c96e1954a053ae8345ba...fff5ad02414570103b1bc56f2c2801caca8fcd04\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4167?src=pr'
p528
aS'lgtm :+1:'
p529
asg14
S'akarnokd:BlockingFirstLastImprovement'
p530
sbsI4169
(iPull
Pull
p531
(dp532
g3
S"We've recently faced `MissingBackpressureException` which actually was not related to backpressure. \r\n\r\nAfter investigation it appeared that we were writing to `PublishSubject` from multiple threads which broke queue in `observeOn`: `queue.offer()` returned false not because it reached capacity limit but because another thread already written to exact same index.\r\n\r\nThis PR throws `IllegalStateException` instead of `MissingBackpressureException` in case if it has detected concurrent data emission + suggests user to serialize data emission to avoid this problem."
p533
sg5
S'1.x: detect concurrent emission in observeon and throw ise instead of mbe'
p534
sg7
(lp535
sg10
I4169
sg11
(lp536
S"No. :-1:. Don't change `observeOn`. Your detection is fragile anyway."
p537
aS"I agree, but MBE is totally misleading in such case. What about adding a\nmessage to MBE that it may be caused by multithreading emission?\n\nOn Wed, 6 Jul 2016, 18:34 David Karnok, <notifications@github.com> wrote:\n\n> No. \xf0\x9f\x91\x8e. Don't change observeOn. Your detection is fragile anyway.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4169#issuecomment-230809745>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3BuhnYa0vN6S6IO0QhJnR95HaY48ks5qS8r3gaJpZM4JGLsY>\n> .\n>\n"
p538
aS'That sounds reasonable, but would require all places that use Spsc queues to be updated; plus it could be still totally misleading.'
p539
aS"Yeah, I'm open to any suggestions (I'll be out for some time and can\nrespond with delays).\n\nOn Wed, 6 Jul 2016, 18:43 David Karnok, <notifications@github.com> wrote:\n\n> That sounds reasonable, but would require all places that use Spsc queues\n> to be updated; plus it could be still totally misleading.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4169#issuecomment-230812585>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3GzbL3MjRJVZUlydI9FfSZrxB_TUks5qS80QgaJpZM4JGLsY>\n> .\n>\n"
p540
aS"Just found another case where we were writing to `PublishSubject` concurrently **and** consumer had `onBackpressureBuffer().observeOn()`.\r\n\r\nIn that case `observeOn()` throws MBE because of concurrent write and `onBackpressureBuffer()` handles it as  MBE while it's actually illegal state\xe2\x80\xa6"
p541
aS'This is an issue with the use of the library. There is the `Subject.toSerialized()` that allows concurrent calls to its front.'
p542
aS'Sure, I\'ve fixed it with serializing the subject. Reason why I posted it is to show that `MBE` hides the actual error and in our case we didn\'t even crash the app (I\'d prefer that) and "handled" it as backpressure.\r\n\r\nI can add another way to detect concurrent emission to `observeOn`, but it\'ll add a little bit overhead and I guess @akarnokd won\'t be happy about that so I\'m closing this for now.'
p543
aS"I think the problem is that queuing operator (like observeOn) doesn't know if the chain supplying data supports back pressure or not. If is does then it is a concurrency issue if not then it's a back pressure issue.\r\n\r\nIn 1.x how about adding a 'boolean supportsBackpressure' to Observable and an overload to create() to allow setting it to true otherwise it's false?"
p544
aS"Even if chain supports backpressure, source may emit data concurrently\n(which is violation of Observable contract, but easily possible in real\nlife code) and corrupt internal queue of the observeOn.\n\nOn Fri, 8 Jul 2016, 16:29 George Campbell, <notifications@github.com> wrote:\n\n> I think the problem is that queuing operator (like observeOn) doesn't know\n> if the chain supplying data supports back pressure or not. If is does then\n> it is a concurrency issue if not then it's a back pressure issue.\n>\n> In 1.x how about adding a 'boolean supportsBackpressure' to Observable and\n> an overload to create() to allow setting it to true otherwise it's false?\n>\n> \xe2\x80\x94\n> You are receiving this because you modified the open/close state.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4169#issuecomment-231359450>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3Fh7leSW3t29b2QYLRxamGz20Zevks5qTlDCgaJpZM4JGLsY>\n> .\n>\n"
p545
aS"I don't think adding those to `Observable` is a good idea; people will happily lie about their `OnSubscribe`'s backpressure support.\r\n\r\nInstead, maybe it's time `PublishSubject`, `BehaviorSubject`, `timer()` and `interval()` (anybody else?) to start request tracking and signal `MissingBackpressureException` themselves and not rely on some queueing operator to fail later on.\r\n\r\nIn addition, depending on how severe the misuse of `PublishSubject` is, I'm willing to force serialization on its input side. Basically, I'd copy `PublishSubject` to `DirectSubject` or something for those who want to keep the overhead low and then retrofit `PublishSubject` to serialize its inputs."
p546
aS"Yes, I definitely love your idea about making publish subject serialized\nand adding something like SingleThreadPublishSubject\n\nOn Fri, 8 Jul 2016, 18:41 David Karnok, <notifications@github.com> wrote:\n\n> I don't think adding those to Observable is a good idea; people will\n> happily lie about their OnSubscribe's backpressure support.\n>\n> Instead, maybe it's time PublishSubject, BehaviorSubject, timer() and\n> interval() (anybody else?) to start request tracking and signal\n> MissingBackpressureException themselves and not rely on some queueing\n> operator to fail later on.\n>\n> In addition, depending on how severe the misuse of PublishSubject is, I'm\n> willing to force serialization on its input side. Basically, I'd copy\n> PublishSubject to DirectSubject or something for those who want to keep\n> the overhead low and then retrofit PublishSubject to serialize its inputs.\n>\n> \xe2\x80\x94\n> You are receiving this because you modified the open/close state.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4169#issuecomment-231394121>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3N5cFlJB74XFn-ZQe0tuKlrw2lkwks5qTm-tgaJpZM4JGLsY>\n> .\n>\n"
p547
asg14
S'artem-zinnatullin:az/1.x/concurrent-observeOn'
p548
sbsI4172
(iPull
Pull
p549
(dp550
g3
S'This PR adds or updates places where the `Backpressure:` description was missing or outdated.\r\n\r\nUnfortunately, GitHub has a hard limit on diff size per file so reviewers have to use their own local diff.'
p551
sg5
S'1.x: add missing backpressure descriptions and update old ones'
p552
sg7
(lp553
S'Documentation'
p554
asg10
I4172
sg11
(lp555
S'"...it &lt;t&gt;may&lt;/i&gt; lead to IllegalStateException being throw..."\r\n=> "...it **&lt;em&gt;**may**&lt;/em&gt;** lead to IllegalStateException being **thrown**..."\r\n\r\n...but better yet would be to avoid the passive voice and indicate what entity throws the exception, e.g. "If any of the source Observables violate this, XXX may throw an IllegalStateException when the source Observable completes."'
p556
aS'"...no backpressue applied to them..." => "...no **backpressure** applied to them..."'
p557
aS'"The other Observables supplied by the function is consumed..." => "The other Observables supplied by the function **are** consumed..."'
p558
aS"I notice that some of the `<dd>`s aren't being closed with `</dd>` also."
p559
aS'typo: "...apply any of the `onBackpressureXXX` opertors &lt;b&gt;before&lt;/b&gt; applying `observeOn` itself..." => "...apply any of the `onBackpressureXXX` **operators** **&lt;strong&gt;**before**&lt;/strong&gt;** applying `observeOn` itself..."'
p560
aS'For operators that both accept and return an Observable (most of them), I find the phrase "this Observable" in the documentation to be ambiguous: does it mean the Observable about to be operated on, or the Observable that results from the operation?  I\'d recommend replacing it with "the source Observable" or "the resulting Observable" or something like that, depending on which one you\'re talking about.'
p561
aS'typo: "...the output\'s backpressure behavior is derermined by..." => "...the output\'s backpressure behavior is **determined** by..."'
p562
aS'```\r\n+     *  <dt><b>Backpressure:</b></dt>\r\n+     *  <dd>The operator honors backpressure from downstream and consumes this {@code Observable} in an\r\n+     *  unbounded manner (i.e., no backpressure is applied to it).</dd>\r\n+     *  behavior.</dd>\r\n```\r\nThat last line seems to be extraneous.'
p563
aS"Some of those typos appear in multiple places in the file.\r\n\r\nIt's great to see these sections getting filled out and made more precise!"
p564
aS"Thanks for the review. I've updated the text."
p565
aS'## [Current coverage][cc-pull] is **81.46%**\n> Merging [#4172][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4172   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n+ Hits          13697      13705     +8   \n+ Misses         2226       2225     -1   \n+ Partials        900        893     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cec8915...4428b29][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cec891510bb4cdb379d11691eaf004289a50d044...4428b29ab4d49f7a1805a184f6b36b23f42104a5?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4172?src=pr'
p566
aS"I'm merging this so work touching `Observable.java` can commence. Anybody let me know if you find something else (or better yet, post a PR)."
p567
aS'Thank you for this @akarnokd!'
p568
aS'Beaut!'
p569
asg14
S'akarnokd:ObservableJavadoc707'
p570
sbsI4173
(iPull
Pull
p571
(dp572
g3
S"This PR adds a customization point to  `RxJavaHooks` that let's one create different `ScheduledExecutorService` instances for the `GenericScheduledExecutorService` utility.\r\n\r\nTo apply the hook (or remove it), one has to restart the `Schedulers` via `shutdown()` and then `start()`. Note that the latter had to be made public as well.\r\n\r\nRelated #4171."
p573
sg5
S'1.x: allow customizing genericscheduledexecutorservice via rxjavahooks'
p574
sg7
(lp575
S'Enhancement'
p576
asg10
I4173
sg11
(lp577
S'## [Current coverage][cc-pull] is **84.08%**\n> Merging [#4173][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.51%**\n\n```diff\n@@                1.x      #4173   diff @@\n==========================================\n  Files           262        263     +1   \n  Lines         17048      17057     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2574       2574          \n==========================================\n+ Hits          14247      14342    +95   \n+ Misses         1938       1872    -66   \n+ Partials        863        843    -20   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cf154b1...4064799][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cf154b1a07dce719cf36d2977e81c06b5cd3cd8c...4064799704efe05bdca3c42585414c0197aadaf3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4173?src=pr'
p578
aS'/cc @JakeWharton @artem-zinnatullin @zsxwing @stevegury '
p579
aS'\xf0\x9f\x91\x8d '
p580
aS"I'll have to redo this once #4182 is merged so please don't merge yet."
p581
aS'Rebased.'
p582
asg14
S'akarnokd:RxJavaHookGenericSvc'
p583
sbsI4174
(iPull
Pull
p584
(dp585
g3
S'Adds benchmarks to measure the overhead of `reduce()`, `takeLast(1)` and `collect()`.\r\n\r\nResults (i7 4770K, Windows 7 x64, Java 8u92) ops/s, larger is better.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16664818/2f0235f4-4482-11e6-8844-8e294bbcabd9.png)\r\n'
p586
sg5
S'1.x: benchmark reduce and takelast(1)'
p587
sg7
(lp588
S'Performance'
p589
asg10
I4174
sg11
(lp590
S'## [Current coverage][cc-pull] is **81.41%**\n> Merging [#4174][cc-pull] into [1.x][cc-base-branch] will not change coverage\n\n```diff\n@@                1.x      #4174   diff @@\n==========================================\n  Files           257        257          \n  Lines         16823      16823          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2550          \n==========================================\n  Hits          13697      13697          \n+ Misses         2226       2225     -1   \n- Partials        900        901     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [cec8915...449f365][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/cec891510bb4cdb379d11691eaf004289a50d044...449f365f1e4fa219006db506894ae791e79305ba?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4174?src=pr'
p591
asg14
S'akarnokd:DeferredScalarOpsPerf'
p592
sbsI4176
(iPull
Pull
p593
(dp594
g3
S'This PR reduces the overhead with `collect`, `reduce` and `takeLast` and introduces the `DeferredScalarSubscriber` to support similar unbounded-in single-out scenarios.\r\n\r\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16669829/ba5541cc-4497-11e6-9827-097ac686bcf2.png)\r\n\r\nRelative to each other: (each practically returning the very last value)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16669793/a35183fa-4497-11e6-9a93-36f7effe7e3b.png)\r\n'
p595
sg5
S'1.x: optimize collect, reduce and takelast(1)'
p596
sg7
(lp597
S'Performance'
p598
asg10
I4176
sg11
(lp599
S'Updated header year, @JakeWharton .'
p600
aS'lgtm :+1:'
p601
aS'## [Current coverage][cc-pull] is **81.42%**\n> Merging [#4176][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4176   diff @@\n==========================================\n  Files           257        261     +4   \n  Lines         16823      16921    +98   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2550       2554     +4   \n==========================================\n+ Hits          13701      13778    +77   \n- Misses         2224       2247    +23   \n+ Partials        898        896     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [20ef857...3da558a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/20ef8579a0d7c9bafb7bc4dcd127ddb0476df883...3da558a147d4a8cb60628731e218036fce4bead0?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4176?src=pr'
p602
aS'/cc @artem-zinnatullin was it you that wanted more [unit test coverage](https://codecov.io/gh/ReactiveX/RxJava/src/eb9d9b3aab160e56086b2465109f664d07dc4624/src/main/java/rx/internal/operators/DeferredScalarSubscriber.java) for the deferred-scalar algorithm?'
p603
asg14
S'akarnokd:DeferredScalarOpt'
p604
sbsI4178
(iPull
Pull
p605
(dp606
g3
S"This PR improves the coverage of `rx.Observable` methods plus \r\n\r\n  - fixes a javadoc issue \r\n  - fixes an enum-coverage anomaly in Notification (now it is simply biased towards onNext signals)\r\n  - removes `equals()` from `TestException` as it caused anomalies with deduplication inside `CompositeException`\r\n  - fixes 3 PMD rule violations (2 suppressed, 1 corrected)\r\n  - `timestamp` and `timeInterval` now use the `Schedulers.computation()` as the source for the current time instead of `Schedulers.immediate()` which can't be properly hooked. By default, they both return `System.currentTimeMillis()`."
p607
sg5
S'1.x: improve coverage of rx.observable methods'
p608
sg7
(lp609
S'Coverage'
p610
aS'Test'
p611
asg10
I4178
sg11
(lp612
S'## [Current coverage][cc-pull] is **83.04%**\n> Merging [#4178][cc-pull] into [1.x][cc-base-branch] will increase coverage by **1.64%**\n\n```diff\n@@                1.x      #4178   diff @@\n==========================================\n  Files           261        261          \n  Lines         16921      16918     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2555     +1   \n==========================================\n+ Hits          13773      14049   +276   \n+ Misses         2251       1993   -258   \n+ Partials        897        876    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [978825e...e594d06][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/978825eafa7e99c4817640c47161dd83d1162d91...e594d068b78e080392b24c2ddd9640a8fafb8793?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4178?src=pr'
p613
aS'lgtm :+1:'
p614
aS'Updated.'
p615
aS"Thanks for the review. I'm merging this as it may contain the cure for the memory-kill on Travis. Let me know if there are tests that need more tidying up."
p616
asg14
S'akarnokd:Coverage708'
p617
sbsI4179
(iPull
Pull
p618
(dp619
g3
S"This PR adds a new source operator: `fromAsync()` that let's bridge the callback-style world with the reactive world by providing a push surface and offers options to handle backpressure."
p620
sg5
S'1.x: new fromasync to bridge the callback world with the reactive'
p621
sg7
(lp622
S'Enhancement'
p623
asg10
I4179
sg11
(lp624
S'These errors, i.e., Travis running out of memory and killing tests, gets annoying...'
p625
aS'Updated.'
p626
aS"LGTM :+1: !\r\n\r\nI'm surprised you couldn't reuse more of the existing infrastructure for the various backpressure modes here and instead need to have a full implementation of the whole queue/drain stuff."
p627
aS'The codebase spans over several years now and there is no current "best toolset" for building operators. Besides, this inline saves allocation and overhead from applying other operators.'
p628
aS'/cc @stevegury @zsxwing as this is a new operator proposed to the public API'
p629
aS"@JakeWharton how eager are you about this. I'd really love to merge all remaining PRs so 1.1.7 is as complete API-vise as possible. Otherwise, we may have to wait till 1.1.8 and 1.2 is also delayed."
p630
aS"I would, of course, prefer that it made it. Releases are few and far between here so missing the boat might mean 3 months before it sees the light of day.\r\n\r\nThat said, if no one from Netflix is available to review the API and it's the only thing blocking 1.1.7 then I'm fine with it missing the boat."
p631
aS'I see low risk as this is a completely new operator.'
p632
aS'Thanks!\n\nOn Sun, Jul 10, 2016, 2:36 AM David Karnok <notifications@github.com> wrote:\n\n> Merged #4179 <https://github.com/ReactiveX/RxJava/pull/4179>.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4179#event-717947000>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe/AAEEETB8Xs_T7eEi0pq4xF0STz3VozPxks5qUJLcgaJpZM4JIVRj>\n> .\n>\n'
p633
aS'I wonder should this method be used instead of `create` in cases like RxBinding present?'
p634
aS'\xf0\x9f\x91\x8d \r\nSorry for the late response (I was on vacation)'
p635
asg14
S'akarnokd:FromAsync'
p636
sbsI4180
(iPull
Pull
p637
(dp638
g3
S"It appears that since we added jacoco to the build, it fails sometimes with error 137 which is the code for the system killing the JVM for running out of memory. It is likely the coverage data plus some test's excessive memory use (I don't know which ones) try to go above the current 2GB limit.\r\n\r\nThis is an experiment."
p639
sg5
S'1.x: change test heap size to avoid 137'
p640
sg7
(lp641
S'Test-Failures'
p642
asg10
I4180
sg11
(lp643
S'## [Current coverage][cc-pull] is **83.17%**\n> Merging [#4180][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                1.x      #4180   diff @@\n==========================================\n  Files           261        261          \n  Lines         16918      16918          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2555          \n==========================================\n+ Hits          14062      14071     +9   \n+ Misses         1982       1969    -13   \n- Partials        874        878     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [97c4e53...9129b99][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/97c4e537867efd4c9411c14bda0a40de76e83218...9129b99d381b9c3e86bf2bf37ffe16f263ba4aca?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4180?src=pr'
p644
aS'I will rerun this in 8 hours to see how it behaves then (different travis load).'
p645
asg14
S'akarnokd:Test3GiB'
p646
sbsI4181
(iPull
Pull
p647
(dp648
g3
S'The problem with deprecated API is that it pulls down the coverage percentage.'
p649
sg5
S'1.x: increase coverage of some classes'
p650
sg7
(lp651
S'Coverage'
p652
aS'Test'
p653
asg10
I4181
sg11
(lp654
S'## [Current coverage][cc-pull] is **83.59%**\n> Merging [#4181][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.53%**\n\n```diff\n@@                1.x      #4181   diff @@\n==========================================\n  Files           261        261          \n  Lines         16918      16913     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2555       2553     -2   \n==========================================\n+ Hits          14053      14139    +86   \n+ Misses         1985       1924    -61   \n+ Partials        880        850    -30   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [1354c34...b415345][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/1354c3483a56c8a58f29956a13b3821111bf1bf8...b415345664080f43e0e0d41ae8c80d63daa16080?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4181?src=pr'
p655
asg14
S'akarnokd:Coverage709'
p656
sbsI4182
(iPull
Pull
p657
(dp658
g3
S"These PR adds the remaining hooks which weren't even tested with the original RxJavaPlugins plus a full coverage of the RxJavaHooks itself.\r\n\r\nThis is a mandatory addition and 1.1.7 can't be released without it (i.e., with an incomplete RxJavaHooks that is)."
p659
sg5
S'1.x: add missing rxjavahooks options, fix bugs'
p660
sg7
(lp661
S'Enhancement'
p662
asg10
I4182
sg11
(lp663
S'Lgtm :+1:'
p664
aS"Thanks @JakeWharton . Travis CI doesn't execute the build for like 30 minutes now..."
p665
asg14
S'akarnokd:RxJavaHooksAddMissing'
p666
sbsI4183
(iPull
Pull
p667
(dp668
g3
S"By default, Travis runs `gradle assemble` and if it fails, there seems to be no way to specify `--stacktrace` for it other than disabling it entirely. The `buildViaTravis.sh` does a full build anyway.\r\n\r\nI'm posting this as Nebula fails in the assembly phase for some reason but by default, nothing else is printed."
p669
sg5
S'1.x: no need to run gradle assembe by travis'
p670
sg7
(lp671
S'Build'
p672
asg10
I4183
sg11
(lp673
S"lgtm :+1:\r\n\r\nTheir idea is to do full compilation of all modules before running tests, but in a single-module repo it doesn't make much sense anyway."
p674
aS"```\r\norg.eclipse.jgit.errors.MissingObjectException: Missing commit 4e5f6aae88a0993d528077dce3df19c630d825d0\r\n```\r\n\r\n[This](https://netbeans.org/bugzilla/show_bug.cgi?id=257422) says the stash is corrupt; I'm assuming the cache we use for building could be corrupt after today's massive outage."
p675
aS'Hmm, looks like [limiting the clone](https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth) depth went past that odd commit number (which is available here on GitHub).'
p676
aS'Now we are killed with out of memory - probably due to the container-backlog.'
p677
asg14
S'akarnokd:NoDefaultTravisAssemble'
p678
sbsI4184
(iPull
Pull
p679
(dp680
g3
S'Applying #4149 to CHANGES.md'
p681
sg5
S'release 1.1.7 changes.md update'
p682
sg7
(lp683
S'Information'
p684
asg10
I4184
sg11
(lp685
S'## [Current coverage][cc-pull] is **84.17%**\n> Merging [#4184][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.12%**\n\n```diff\n@@                1.x      #4184   diff @@\n==========================================\n  Files           262        265     +3   \n  Lines         17043      17281   +238   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2572       2617    +45   \n==========================================\n+ Hits          14325      14546   +221   \n- Misses         1876       1886    +10   \n- Partials        842        849     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b9af588...da19c27][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b9af588a2cf75d57e85c4f8677943eedbb03f03c...da19c277df0b85f1a873c601aa290e245b4fadde?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4184?src=pr'
p686
asg14
S'akarnokd:Release117changes'
p687
sbsI4187
(iPull
Pull
p688
(dp689
g3
S"Plus, this should also fix the snapshot versions which were broken (they are with 0.0.1-SNAPSHOT on bintray) because of yesterday's Nebula plugin problems."
p690
sg5
S'move status icons to top, add maven version badge.'
p691
sg7
(lp692
S'Documentation'
p693
asg10
I4187
sg11
(lp694
S'Looks like the versioning works again: https://travis-ci.org/ReactiveX/RxJava/builds/143695889#L157'
p695
asg14
S'ReactiveX:akarnokd-patch-1'
p696
sbsI4188
(iPull
Pull
p697
(dp698
g3
S'I still forget about these sometimes.'
p699
sg5
S'1.x: add missing headers, add suppresswarnings'
p700
sg7
(lp701
S'Cleanup'
p702
asg10
I4188
sg11
(lp703
S'## [Current coverage][cc-pull] is **84.20%**\n> Merging [#4188][cc-pull] into [1.x][cc-base-branch] will not change coverage\n\n```diff\n@@                1.x      #4188   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17281          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n  Hits          14552      14552          \n+ Misses         1883       1882     -1   \n- Partials        846        847     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [76182a7...896a735][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/76182a7e4d939b7d83b02e93abe36ec7d2c16788...896a735e4ccb4799f6edb9f38deef743d53c858a?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4188?src=pr'
p704
asg14
S'akarnokd:HeadersAndDocFix'
p705
sbsI4189
(iPull
Pull
p706
(dp707
g3
S"I've extracted the javadoc.jar from the release into a subdir 1.1.7 and replaced the root files as well.\r\n\r\n/cc @DavidMGross "
p708
sg5
S'update 1.1.7 javadoc files'
p709
sg7
(lp710
S'Documentation'
p711
asg10
I4189
sg11
(lp712
S'\xf0\x9f\x91\x8d '
p713
asg14
S'ReactiveX:Javadoc1.1.7'
p714
sbsI4190
(iPull
Pull
p715
(dp716
g3
S'Started a syncing process between 1.x and 2.x operators (based on [this diff](https://gist.github.com/akarnokd/4a391527e099412cad87d3dffbfef762)). The first set is the addition of the eager version of `concat` and `concatMap`. In addition, all of them get a `XDelayError` overloads as well.'
p717
sg5
S'2.x: implement concat(map)eager(delayerror) and expose concat(map)delayerror overload'
p718
sg7
(lp719
S'Enhancement'
p720
asg10
I4190
sg11
(lp721
S'## [Current coverage][cc-pull] is **68.21%**\n> Merging [#4190][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.16%**\n\n```diff\n@@                2.x      #4190   diff @@\n==========================================\n  Files           396        402     +6   \n  Lines         28395      28898   +503   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4612       4687    +75   \n==========================================\n+ Hits          19419      19714   +295   \n- Misses         6981       7183   +202   \n- Partials       1995       2001     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [7a5320f...2bf22b2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7a5320f85c7000469e3b997f5810573a3967f0f9...2bf22b287c78c49709db098aea2dcd4ca858a5a1?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4190?src=pr'
p722
aS'Also I\'ve expanded Flowable with a `test()` method. Should give a nice answer to the question "How do you test a Flowable?".'
p723
aS'Updated the `if`s'
p724
aS"I'm thinking if there is a way to test such [`if (!cancelled)`](https://github.com/ReactiveX/RxJava/pull/4190/commits/2bf22b287c78c49709db098aea2dcd4ca858a5a1) errors, java debuggers allows suspending a Thread on a particular breakpoint and allow other threads to run at the same time, maybe such mechanism will allow us to simulate and test concurrent access in particular parts of code (drain loops and so on). \r\n\r\nSomething like:\r\n\r\n```java\r\n@Test\r\npublic void concurrentCancel() {\r\n  TestThread thread1 = testThread({\r\n     disposable = Flowable.just(1).concatMap(v -> Flowable.just(2)).subscribe();\r\n  });\r\n\r\n  TestThread thread2 = testThread({\r\n    disposable.dispose();\r\n  });\r\n\r\n  TestThreads.builder()\r\n    .start(thread1) // One or multiple.\r\n    .thenSuspend(thread1, FlowableConcatMapEager.class, 128) // Thread; Source class; Line.\r\n    .thenStart(thread2)\r\n    .thenResume(thread1)\r\n    .run(); // Run and wait all test threads to complete.\r\n\r\n  // Assert behavior.\r\n}\r\n```\r\n\r\nJust thoughts"
p725
aS':+1: for PR'
p726
aS'Thanks @artem-zinnatullin !'
p727
asg14
S'akarnokd:ConcatEagerAndDelayError'
p728
sbsI4191
(iPull
Pull
p729
(dp730
g3
g57
sg5
S'fix grammar error in rxjavahooks javadocs'
p731
sg7
(lp732
S'Documentation'
p733
asg10
I4191
sg11
(lp734
S'## [Current coverage][cc-pull] is **84.23%**\n> Merging [#4191][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4191   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17281          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n+ Hits          14552      14557     +5   \n+ Misses         1884       1878     -6   \n- Partials        845        846     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [6b72d8a...b8cc33e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/6b72d8ac246e2c071e6f7c45c946f6886c3a5c6b...b8cc33e6163daf6f8726fa9f60ad3e92b5274fc1?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4191?src=pr'
p735
aS'Thanks!'
p736
asg14
S'bryant1410:patch-3'
p737
sbsI4192
(iPull
Pull
p738
(dp739
g3
S'This PR adds a few operators and overloads from 1.x\r\n\r\n  - `fromAsync`\r\n  - `just` - 10 arguments\r\n  - `distinctUntilChanged(BiPredicate<? super T, ? super T> comparer)`\r\n  - `skip` timed - default scheduler\r\n  - `take` timed - default scheduler\r\n  - `toCompletable`\r\n\r\nIn addition, this PR fixes the API of TestSubscriber by making the initial value primitive `long` and having 0 as no initial request instead of the trickery with `null`.'
p740
sg5
S'2.x: +fromasync, distinctuc, skip, take overloads, fix testsubscriber api'
p741
sg7
(lp742
S'Cleanup'
p743
aS'Enhancement'
p744
asg10
I4192
sg11
(lp745
S'## [Current coverage][cc-pull] is **68.36%**\n> Merging [#4192][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.12%**\n\n```diff\n@@                2.x      #4192   diff @@\n==========================================\n  Files           402        405     +3   \n  Lines         28898      29230   +332   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4687       4749    +62   \n==========================================\n+ Hits          19720      19984   +264   \n- Misses         7180       7209    +29   \n- Partials       1998       2037    +39   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [fca5a8e...a751617][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/fca5a8e1517e007cc41fe022f9572973e8470e21...a75161745b979fbf8725d9bc616d8de3d93ebb84?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4192?src=pr'
p746
aS'/cc @artem-zinnatullin @JakeWharton \r\n\r\nIf this could me merged soon, I could start on syncing the unit tests in which there are [roughly 1500](https://gist.github.com/akarnokd/693866d6b4453ca8c66b866584163e5e) methods to check - some of them are simple relocations. Once done, I have to sync the flowable-observable tests (which have a more symmetric layout luckily).'
p747
aS'Will look in several hours.\n\nOn Tue, 12 Jul 2016, 15:22 David Karnok, <notifications@github.com> wrote:\n\n> /cc @artem-zinnatullin <https://github.com/artem-zinnatullin> @JakeWharton\n> <https://github.com/JakeWharton>\n>\n> If this could me merged soon, I could start on syncing the unit tests in\n> which there are roughly 1500\n> <https://gist.github.com/akarnokd/693866d6b4453ca8c66b866584163e5e>\n> methods to check - some of them are simple relocations. Once done, I have\n> to sync the flowable-observable tests (which have a more symmetric layout\n> luckily).\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4192#issuecomment-232031091>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3AkRvmCU-OHSEwX7US9lGJdE6F81ks5qU4bzgaJpZM4JKKBF>\n> .\n>\n'
p748
aS'@artem-zinnatullin fixing what you discovered so far. Notify me when you are done.\r\n\r\n`BiPredicate` conforms with (and thus conflicts with) Java 8 functional interface naming conventions. Calling it `Pred2` is possible but then `Func1...FuncN` would conflict with RxJava 1 if in the same project.'
p749
aS"Done, \xf0\x9f\x91\x8d but comments.\r\n\r\n>BiPredicate conforms with (and thus conflicts with) Java 8 functional interface naming conventions. Calling it Pred2 is possible but then Func1...FuncN would conflict with RxJava 1 if in the same project\r\n\r\nThey won't conflict because package names are different, though you'll have to use fqn if you'll need both in same source file."
p750
aS"> They won't conflict because package names are different,\r\n\r\nSure, but when you type in `Function` then CTRL+SPACE in IDE, you get the Java version and RxJava 2 version. Sometimes you copy-paste a `Function f = ...` and get a squiggly line saying `Function` is not compatible with `Function`."
p751
aS'Thanks @artem-zinnatullin !'
p752
asg14
S'akarnokd:MissingOps712'
p753
sbsI4195
(iPull
Pull
p754
(dp755
g3
S"Don't worry about not all things tested in this PR, anything extra relative to 1.x will be covered after the sync."
p756
sg5
S'2.x: sync unit tests of completable, add missing features'
p757
sg7
(lp758
S'Enhancement'
p759
aS'Test'
p760
asg10
I4195
sg11
(lp761
S'## [Current coverage][cc-pull] is **68.22%**\n> Merging [#4195][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.14%**\n\n```diff\n@@                2.x      #4195   diff @@\n==========================================\n  Files           405        409     +4   \n  Lines         29230      29450   +220   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4749       4763    +14   \n==========================================\n+ Hits          19984      20093   +109   \n- Misses         7220       7330   +110   \n- Partials       2026       2027     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [458933f...d89813d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/458933f4796c35d74b436c0c133bf79b4d8d411d...d89813d89f937ab73f5727e6dbc765780f699433?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4195?src=pr'
p762
asg14
S'akarnokd:TestSync713_1'
p763
sbsI4204
(iPull
Pull
p764
(dp765
g3
S"  - More unit tests ported;\r\n  - `TestObserver` cleanup and sync with `TestSubscriber`;\r\n  - fix travis to run with Java 7 instead of 8;\r\n  - added AnimalSniffer;\r\n  - cleaned up `combineLatest`, introduced `combineLatestDelayError`;\r\n  - test names are as in 1.x, please don't complain about the `test` prefix in the method names!"
p766
sg5
S'2.x: test sync + cleanup'
p767
sg7
(lp768
S'Enhancement'
p769
aS'Test'
p770
asg10
I4204
sg11
(lp771
S'## [Current coverage][cc-pull] is **68.54%**\n> Merging [#4204][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.32%**\n\n```diff\n@@                2.x      #4204   diff @@\n==========================================\n  Files           409        411     +2   \n  Lines         29450      29486    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4763       4777    +14   \n==========================================\n+ Hits          20092      20211   +119   \n+ Misses         7331       7262    -69   \n+ Partials       2027       2013    -14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [0705001...0be4534][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/0705001df0b52334829b2e4963469533618f14cb...0be45349c1b5c02b14c34c9f36711e37439c232c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4204?src=pr'
p772
aS'Anybody wants to review this?'
p773
aS'Yes, will do in couple days (busy, sorry)\n\nOn Mon, 18 Jul 2016, 01:22 David Karnok, <notifications@github.com> wrote:\n\n> Anybody wants to review this?\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4204#issuecomment-233207684>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AA7B3AUegl86uvFWdaJQYs7m9Jo1hayRks5qWqsrgaJpZM4JMU7W>\n> .\n>\n'
p774
aS"I'm merging this so we can progress with other tasks that would affect the same files. I'll address the review feedback in a separate PR if necessary."
p775
asg14
S'akarnokd:TestSync714_1'
p776
sbsI4209
(iPull
Pull
p777
(dp778
g3
S'This PR changes flatmap to make sure there is no element reordering happening on the fast-paths.\r\n\r\nRelated: #4206.'
p779
sg5
S'1.x: merge/flatmap to keep scalar/inner element relative order'
p780
sg7
(lp781
S'Bug'
p782
aS'Enhancement'
p783
asg10
I4209
sg11
(lp784
S'## [Current coverage][cc-pull] is **84.31%**\n> Merging [#4209][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4209   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17291    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2619     +2   \n==========================================\n+ Hits          14558      14579    +21   \n+ Misses         1881       1869    -12   \n- Partials        842        843     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...95daa74][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...95daa741dd56ec24ce6a4ee4ada08b5b0d2133c3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4209?src=pr'
p785
aS"Thanks @akarnokd for quick fix. I haven't reviewed yet but I'm keen to see the issue resolved in a release soon (I also was suprised `flatMap` didn't honour individual observable order). "
p786
aS'reviewed :+1: '
p787
aS'Updated, thanks @davidmoten !'
p788
aS'\xf0\x9f\x91\x8d '
p789
aS'\xf0\x9f\x91\x8d '
p790
asg14
S'akarnokd:FlatMapStrictInnerOrder'
p791
sbsI4211
(iPull
Pull
p792
(dp793
g3
S'As discussed in https://github.com/ReactiveX/RxJava/issues/1277#issuecomment-233357354\r\n\r\nThis PR gives a stricter type signature for `combineLatest`, `zip`, `zipArray` and `zipIterable`. It replaces occurrences of `Object` with its generic type `T`. In practice users will not need to type-cast arrays in the combine function anymore.'
p794
sg5
S'2.x: use generic type instead of object in combinelatest and zip'
p795
sg7
(lp796
S'Enhancement'
p797
asg10
I4211
sg11
(lp798
S'## [Current coverage][cc-pull] is **68.56%**\n> Merging [#4211][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4211   diff @@\n==========================================\n  Files           411        411          \n  Lines         29486      29486          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4777          \n==========================================\n+ Hits          20208      20216     +8   \n+ Misses         7256       7250     -6   \n+ Partials       2022       2020     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [487a0ba...17a249f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/487a0ba52137e13d996ad12fc73bfeabb03c4fb7...17a249f175a4ef27d38769b3d3a30f6b5a23a03c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4211?src=pr'
p799
aS':+1:'
p800
aS':+1: '
p801
aS'\xf0\x9f\x91\x8d '
p802
aS'Thanks for the contribution.'
p803
asg14
S'bobvanderlinden:pr-generictype'
p804
sbsI4213
(iPull
Pull
p805
(dp806
g3
S'Part of #4212.'
p807
sg5
S'1.x: do not hide original exception with rxjavahooks.enableassemblytracking()'
p808
sg7
(lp809
sg10
I4213
sg11
(lp810
S'## [Current coverage][cc-pull] is **84.26%**\n> Merging [#4213][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4213   diff @@\n==========================================\n  Files           265        264     -1   \n  Lines         17281      17279     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2617          \n==========================================\n+ Hits          14558      14560     +2   \n+ Misses         1881       1876     -5   \n- Partials        842        843     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...09fdee3][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...09fdee3291c073ba16446beeecc77e28db687655?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4213?src=pr'
p811
aS'See #4215 for a less invasive change.'
p812
aS'Closing in favor of #4215.'
p813
asg14
S'artem-zinnatullin:az/1.x/fix-enableAssemblyTracking'
p814
sbsI4215
(iPull
Pull
p815
(dp816
g3
S'Modify the assembly tracking logic to not replace the exception flowing through but to attach the tracking exception to the end of the causal chain (if possible).\r\n\r\nFixes #4212'
p817
sg5
S'1.x: fix assembly tracking replacing original exception'
p818
sg7
(lp819
S'Bug'
p820
asg10
I4215
sg11
(lp821
S'## [Current coverage][cc-pull] is **84.27%**\n> Merging [#4215][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4215   diff @@\n==========================================\n  Files           265        265          \n  Lines         17281      17305    +24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2617       2624     +7   \n==========================================\n+ Hits          14558      14583    +25   \n+ Misses         1881       1873     -8   \n- Partials        842        849     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [65c7070...4853282][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/65c7070c2dae6b27cafb2c37f50b884478ba3949...485328223e8de398edda21317ba20c0b1fd2c31c?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4215?src=pr'
p822
aS'\xf0\x9f\x91\x8d '
p823
aS'\xf0\x9f\x91\x8d '
p824
asg14
S'akarnokd:AssemblyTrackingDontHideException'
p825
sbsI4217
(iPull
Pull
p826
(dp827
g3
S'  - add `groupJoin`, `join`, `onTerminateDetach`\r\n  - fix missing cancellation in `FlowableFlattenIterable`\r\n  - fix `fromIterable` error handling\r\n  - added several unit test methods and classes from 1.x'
p828
sg5
S'2.x: test sync, +groupjoin, +join, +onterminatedetach'
p829
sg7
(lp830
S'Enhancement'
p831
asg10
I4217
sg11
(lp832
S'## [Current coverage][cc-pull] is **69.29%**\n> Merging [#4217][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.75%**\n\n```diff\n@@                2.x      #4217   diff @@\n==========================================\n  Files           411        417     +6   \n  Lines         29486      30388   +902   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4883   +106   \n==========================================\n+ Hits          20208      21057   +849   \n- Misses         7256       7285    +29   \n- Partials       2022       2046    +24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [487a0ba...bff5614][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/487a0ba52137e13d996ad12fc73bfeabb03c4fb7...bff561492ac7588d92fc6385625a04c1f445e209?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4217?src=pr'
p833
aS'\xf0\x9f\x91\x8d '
p834
aS'Thanks @stevegury and @artem-zinnatullin .'
p835
asg14
S'akarnokd:TestSync719_1'
p836
sbsI4220
(iPull
Pull
p837
(dp838
g3
g57
sg5
S'1.x: optimize hot path in onsubscribeonassembly'
p839
sg7
(lp840
sg10
I4220
sg11
(lp841
S"Sorry @akarnokd, I'm not against keeping `String`, but capturing stacktrace is already heavy operation. \r\n\r\nI've removed allocations for `StringBuilder` and searching through each stack line from hot path.\r\n\r\n`RxJavaHooks.enableAssemblyTracking()` is a flag that will be used in production because there is nothing worse than a crash that doesn't point to your own code, performance impact should be as low as possible."
p842
aS"I still don't approve changing the string to stacktrace array. The large cost is getting the stacktrace, its string representation is low cost then on - probably takes up less memory even."
p843
aS"Having the string field helps in debugging as it gives immediate info about the trimmed assembly location. Debug watches with expressions don't work sometimes and looking at the unfiltered array of stacktrace elements are even more of an inconvenience."
p844
aS"Goal here is to minimize allocations and CPU time in hot path.\r\n\r\nWith enabled `RxJavaHooks.enableAssemblyTracking()` each creation of `Observable/Single/Completable` will go through this path.\r\n\r\nImagine you're creating 1000s of observables per second and none of them fail, why spend time on allocations, GC and filtering strings? I don't understand."
p845
aS'## [Current coverage][cc-pull] is **84.18%**\n> Merging [#4220][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4220   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17304     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2624          \n==========================================\n- Hits          14580      14567    -13   \n- Misses         1879       1887     +8   \n- Partials        846        850     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [a45de22...f083b54][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a45de22ca3a847584c1a7640c138a89ac52d6f58...f083b54fb45bd222692e2e302067391a7981d4ea?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4220?src=pr'
p846
aS'>Having the string field helps in debugging as it gives immediate info about the trimmed assembly location. Debug watches with expressions don\'t work sometimes and looking at the unfiltered array of stacktrace elements are even more of an inconvenience.\r\n\r\nI belive most of users of this API just want better crash reports. Modern IDEs should work fine with "debug watches". I could be wrong of course, but that\'s my point of view.'
p847
aS"You enable tracking to hunt down bugs at which point app perf is secondary. You don't run with it enabled by default. Plus you are worrying on a ~1kB allocation while getting a current thread stacktrace is like 3000 cycles or so and would take up more RAM if left as array.\r\n\r\nThis API is there to help figure out which of the similar sequences crashen and link it to your code, not just to Rx operators.\r\n\r\nThe API was born out of an annoying RxNetty bug hunting session where I had trouble finding which of the dozen concatMap using sequence am I stepping through."
p848
aS">You enable tracking to hunt down bugs at which point app perf is secondary. You don't run with it enabled by default.\r\n\r\nI would and will enable it for production to get more meaningful stacktraces for crashes. That's why I'm talking about hot path.\r\n\r\n>Plus you are worrying on a ~1kB allocation while getting a current thread stacktrace is like 3000 cycles or so and would take up more RAM if left as array.\r\n\r\nIt's a tradeoff, of course, but you need to get this array no matter if you convert it to strings or not, so I don't see big problem in holding reference to it.\r\n\r\nThis PR may eat more memory for long running observables but it keeps code as fast as possible."
p849
aS"You don't have to use the standard tracking but roll your own hook classes and apply those in `RxJavaHooks`."
p850
aS"Closing this since we didn't come to agreement :)"
p851
asg14
S'artem-zinnatullin:az/1.x/optimize-onsubsribe-assembly'
p852
sbsI4222
(iPull
Pull
p853
(dp854
g3
S'This PR fixes the `subscribeOn` operator to allow cancellation before the actual subscription to the source takes place - just like how 1.x works.'
p855
sg5
S'2.x: subscribeon allow cancelling before the actual subscription happens (just like 1.x)'
p856
sg7
(lp857
S'Bug'
p858
asg10
I4222
sg11
(lp859
S'## [Current coverage][cc-pull] is **68.55%**\n> Merging [#4222][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4222   diff @@\n==========================================\n  Files           411        411          \n  Lines         29486      29490     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4777       4779     +2   \n==========================================\n+ Hits          20212      20216     +4   \n+ Misses         7252       7251     -1   \n- Partials       2022       2023     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4577f1a...d896729][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4577f1abc585611f83be86efd279c4d135acd0ab...d896729ed17055bf43f0940bf29dca4c000b28e3?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4222?src=pr'
p860
aS'\xf0\x9f\x91\x8d '
p861
asg14
S'akarnokd:SubscribeOnClassic'
p862
sbsI4224
(iPull
Pull
p863
(dp864
g3
S'This PR benchmarks the overhead in `PublishSubject` to give a baseline for upcoming behavior correction (backpressure fail-fast, more eager child isUnsubscribed() checking).\r\n\r\nBenchmark (i7 4790, Windows 7 x64, Java 8u102, ops/s - bigger is better):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17049741/617b9386-4fef-11e6-9d08-27352d676221.png)\r\n'
p865
sg5
S'1.x: publishsubject perf'
p866
sg7
(lp867
S'Performance'
p868
asg10
I4224
sg11
(lp869
S'## [Current coverage][cc-pull] is 84.24% (diff: 100%)\n> Merging [#4224][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4224   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17305          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2624          \n==========================================\n- Hits          14580      14578     -2   \n- Misses         1879       1880     +1   \n- Partials        846        847     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a45de22...13962f6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/a45de22ca3a847584c1a7640c138a89ac52d6f58...13962f6cb7a475faa9e2bc2e63275387508223cb?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4224?src=pr'
p870
asg14
S'akarnokd:PublishSubjectPerf'
p871
sbsI4225
(iPull
Pull
p872
(dp873
g3
S"This PR modifies the `PublishSubject` to fail fast if the child Subscriber can't keep up. Therefore, instead of some other operator failing somewhere downstream, the `MissingBackpressureException` now points to the `PublishSubject` instead. \r\n\r\nIn addition, there were complaints in #3850 that cross-unsubscription doesn't stop another Subscriber from receiving events if it comes after the unsubscribe() call in the dispatch loop. Since `PublishSubject` now tracks request - which is the main extra overhead - it is trivial to add the necessary eager check for the unsubscribed state.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17052414/a30acf84-4ffd-11e6-88ae-1fc5d28a6d12.png)\r\n\r\nAs expected, this adds some overhead although most noticeably for the mid-range only. Short-lived publishing is now slightly faster even.\r\n\r\nInterestingly, many benchmarks behave oddly in these 1000s range - we could be hitting some JIT threshold. While in other benchmarks, the warmup iteration numbers keep increasing as JIT does its work but here, it starts out quite nicely then drops 25% and stays that way. I'm on windows so JMH -perfasm doesn't work.\r\n\r\nIf this direction is accepted, I'll update `BehaviorSubject`, `timer()` and `interval()` do do the same tracking."
p874
sg5
S'1.x: publishsubject fail-fast when backpressured'
p875
sg7
(lp876
S'Enhancement'
p877
asg10
I4225
sg11
(lp878
S'## [Current coverage][cc-pull] is 84.12% (diff: 100%)\n> Merging [#4225][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4225   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17377    +72   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2643    +19   \n==========================================\n+ Hits          14559      14619    +60   \n+ Misses         1893       1891     -2   \n- Partials        853        867    +14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...b094b0b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...b094b0b3cf9e933b37d26fe37fd85e298b82ae02?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4225?src=pr'
p879
aS"\xf0\x9f\x91\x8d \r\n\r\n// I'm afraid that this will break some amount of user code, but this has to be done\xe2\x80\xa6"
p880
aS"> // I'm afraid that this will break some amount of user code, but this has to be done\xe2\x80\xa6\r\n\r\nTo paraphrase Godzilla (2014): *Let them fail (early)!* :)"
p881
aS'\xf0\x9f\x91\x8d '
p882
aS'The recent changes to `ReplaySubject`after v1.1.5 broke my unit tests. \r\nNot sure if caused by this PR (#4225), #4023 or #3918. Probably #3918 since it started after I upgraded to 1.1.6.\r\nIn my specific case, I was reusing the same `TestSubscriber` after unsubscribing and then subscribing again. In this case, I\'m no longer getting events on the `TestSubscriber` after resubscribing it. This is roughly what I\'m doing:\r\n\r\n```java\r\nReplaySubject<String> subject = ReplaySubject.create();\r\nTestSubscriber subscriber = new TestSubscriber();\r\nSubscription subscription = subject.subscribe(subscriber);\r\nsubscription.unsubscribe();\r\nsubject.onNext("foo");\r\nsubject.onCompleted();\r\nsubject.subscribe(subscriber);\r\n// Assertions below pass with v1.1.5 but fail with 1.1.6 and above\r\nsubscriber.assertCompleted();\r\nsubscriber.assertValue("foo");\r\n```\r\n\r\nQuestions: \r\n1. Is this the expected behavior or a bug?\r\n2. If expected, is there any way I can reuse the same subscriber again after it has been unsubscribed?\r\n\r\nThanks!'
p883
aS"Alright apparently using `TestObserver` instead of `TestSubscriber` fixes the problem, although that one is deprecated. Looks like you're not supposed to reuse a `TestSubscriber`?\r\nI ended up rolling my own `TestObserver` that has the same convenience methods as `TestSubscriber`, like `assertNoErrors()`, `assertCompleted()`, etc.\r\nIt seems to me that `TestObserver` should not be deprecated because it seems useful in such cases. What do you think?"
p884
aS'You are not supposed to reuse `Subscriber` ever. Subscribe with a new `TestSubscriber` and assert on that.'
p885
asg14
S'akarnokd:PublishSubjectBackpressureFailFast'
p886
sbsI4226
(iPull
Pull
p887
(dp888
g3
S'Addresses #4216 \r\n\r\nHappy to receive feedback on the implementation. Also should I take the documentation from `flatMapObservable` and adjust it?'
p889
sg5
S'1.x: single.flatmapcompletable'
p890
sg7
(lp891
S'Enhancement'
p892
asg10
I4226
sg11
(lp893
S'## [Current coverage][cc-pull] is 84.19% (diff: 100%)\n> Merging [#4226][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #4226   diff @@\n==========================================\n  Files           265        266     +1   \n  Lines         17305      17335    +30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2625     +1   \n==========================================\n+ Hits          14559      14596    +37   \n+ Misses         1893       1887     -6   \n+ Partials        853        852     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...3aad33f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...3aad33fffbee0e50f22d898a6b57dc4b6395b558?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4226?src=pr'
p894
aS'The unsubscription is not properly linked, the possible exception thrown by the mapper is not handled.\r\n\r\nSee [this](https://gist.github.com/akarnokd/260ea8b121ec4071401808c1594f2230).\r\n\r\n> Also should I take the documentation from flatMapObservable and adjust it?\r\n\r\nYes.'
p895
aS"Updated the documentation. I hope the wording is okay now. Also I'm pointing to https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapCompletable.png which does not exist yet but  @DavidMGross already tracked it at https://github.com/ReactiveX/reactivex.github.io/issues/289, I hope that's okay.\r\n\r\nthanks for the `CompletableFlatMapSingleToCompletable` I knew something was missing. I also created two more tests that cover some of the previously missing behaviour."
p896
aS':+1:'
p897
aS'Would it be possible to get this one into 1.1.8?'
p898
aS'If @zsxwing or anyone from Netflix approves it in time.'
p899
aS'\xf0\x9f\x91\x8d '
p900
asg14
S'vanniktech:1.x_Single_flatMapCompletable'
p901
sbsI4229
(iPull
Pull
p902
(dp903
g3
S'In #3470, a flat cache of Subscribers has been introduced that is versioned and gets only updated if there are new Subscribers coming, old Subscribers leaving *and* a value comes through - improving performance if lots of Subscribers come and go between main onNext signals. This cache is not cleared but rebuilt therefore child Subscribers unsubscribing were still referenced through it and everything beyond - leading to memory leak on sensitive systems.\r\n\r\nThe fix is to cut the link to the child Subscriber in `InnerProducer` on unsubscription. A secondary action also empties the cache if all Subscribers are gone.\r\n\r\nReported in #4228 .'
p904
sg5
S'1.x: fix replay() retaining reference to the child subscriber'
p905
sg7
(lp906
S'Bug'
p907
asg10
I4229
sg11
(lp908
S'## [Current coverage][cc-pull] is 84.20% (diff: 61.53%)\n> Merging [#4229][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4229   diff @@\n==========================================\n  Files           265        265          \n  Lines         17305      17314     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2624       2627     +3   \n==========================================\n+ Hits          14559      14579    +20   \n+ Misses         1893       1884     -9   \n+ Partials        853        851     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [479df31...0101c36][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/479df3195f208888fe8cfc91c9ce8367c5b4cc07...0101c36a13ff32711115d11abd1796206e07ae49?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4229?src=pr'
p909
aS"This is a medium impact bug so it would be great if it made into tomorrow's release. /cc @artem-zinnatullin @zsxwing "
p910
aS'\xf0\x9f\x91\x8d '
p911
asg14
S'akarnokd:ReplaySubscriberCacheFix'
p912
sbsI4231
(iPull
Pull
p913
(dp914
g3
S'\xe2\x80\xa6completes before releasing a worker to the pool. Fixes #4230.'
p915
sg5
S'cachedthreadscheduler should wait until the previous action (if any) \xe2\x80\xa6'
p916
sg7
(lp917
S'Bug'
p918
asg10
I4231
sg11
(lp919
S'## [Current coverage][cc-pull] is 84.14% (diff: 100%)\n> Merging [#4231][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.14%**\n\n```diff\n@@                1.x      #4231   diff @@\n==========================================\n  Files           265        265          \n  Lines         17314      17316     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14595      14571    -24   \n- Misses         1875       1890    +15   \n- Partials        844        855    +11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2284d4f...6afe4e7][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/2284d4ffad2c063e9478b7b685b350fc2c0d49a3...6afe4e7fb002b4f47f1c58137487cb3b718bda43?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4231?src=pr'
p920
aS':+1: \r\n\r\nGiven a misbehaving task, this at least prevents other work to be scheduled on the same pool.'
p921
asg14
S'csabakos:1.x'
p922
sbsI4232
(iPull
Pull
p923
(dp924
g3
S'`Selection` class can extend `AtomicReference` to save an allocation'
p925
sg5
S'save allocation in onsubscribeamb'
p926
sg7
(lp927
S'Enhancement'
p928
aS'Performance'
p929
asg10
I4232
sg11
(lp930
S'## [Current coverage][cc-pull] is 84.23% (diff: 25.00%)\n> Merging [#4232][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4232   diff @@\n==========================================\n  Files           265        265          \n  Lines         17314      17312     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14595      14582    -13   \n- Misses         1875       1883     +8   \n- Partials        844        847     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2284d4f...753df21][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/2284d4ffad2c063e9478b7b685b350fc2c0d49a3...753df21541e6f7f33e69dfb7ea2ef5814d554d67?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4232?src=pr'
p931
aS':+1:'
p932
asg14
S'davidmoten:amb-reduce-alloc'
p933
sbsI4233
(iPull
Pull
p934
(dp935
g3
S'Another one. I\'ll keep rolling through the operators to pick up more. \r\n\r\n@akarnokd Are you ok with `@SuppressWarnings("serial")` instead of ```private static final long serialVersionUID = ...```? '
p936
sg5
S'save allocation in onsubscribeautoconnect'
p937
sg7
(lp938
S'Performance: allocation'
p939
asg10
I4233
sg11
(lp940
S"I prefer `serialVersionUID` but I'm not nitpicky like some..."
p941
aS':+1:'
p942
asg14
S'davidmoten:autoconnect-reduce-alloc'
p943
sbsI4234
(iPull
Pull
p944
(dp945
g3
g57
sg5
S'1.x: fix some typos'
p946
sg7
(lp947
S'Cleanup'
p948
aS'Documentation'
p949
asg10
I4234
sg11
(lp950
S'## [Current coverage][cc-pull] is 84.28% (diff: 100%)\n> Merging [#4234][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                1.x      #4234   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14583      14593    +10   \n+ Misses         1880       1873     -7   \n+ Partials        850        847     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [791379d...045f658][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/791379d855ae0b9c9b2067ce5167f900d126bc32...045f658a901e10fe8cc1555c645a99deda3b0cd9?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4234?src=pr'
p951
aS':+1:'
p952
asg14
S'vanniktech:1.x_typos'
p953
sbsI4236
(iPull
Pull
p954
(dp955
g3
S'as per title.\r\n\r\nWould have been nicer to extend `CompositeSubscription` but is final.\r\n'
p956
sg5
S'save allocations in onsubscribejoin'
p957
sg7
(lp958
S'Performance: allocation'
p959
asg10
I4236
sg11
(lp960
S'## [Current coverage][cc-pull] is 84.16% (diff: 78.57%)\n> Merging [#4236][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4236   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14572     -6   \n- Misses         1886       1887     +1   \n- Partials        849        854     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7d42628...dbf6b04][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7d42628e3be0dd9b885f13fdfbc61627945b86b1...dbf6b04b251bf319fe897c2e1c714677d69441bf?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4236?src=pr'
p961
aS':+1:'
p962
asg14
S'davidmoten:join-reduce-alloc'
p963
sbsI4237
(iPull
Pull
p964
(dp965
g3
S'as per title'
p966
sg5
S'reduce allocations in onsubscribegroupjoin'
p967
sg7
(lp968
S'Performance: allocation'
p969
asg10
I4237
sg11
(lp970
S'## [Current coverage][cc-pull] is 84.17% (diff: 77.27%)\n> Merging [#4237][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4237   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14574     -4   \n  Misses         1886       1886          \n- Partials        849        853     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7d42628...84e301f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/7d42628e3be0dd9b885f13fdfbc61627945b86b1...84e301f72d03b81c908daac755968cadd635beb2?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4237?src=pr'
p971
aS'.+1:'
p972
asg14
S'davidmoten:group-join-reduce-alloc'
p973
sbsI4238
(iPull
Pull
p974
(dp975
g3
S'Found another one'
p976
sg5
S'1.x: fix typo eigth to eighth'
p977
sg7
(lp978
S'Cleanup'
p979
asg10
I4238
sg11
(lp980
S'## [Current coverage][cc-pull] is 84.24% (diff: 100%)\n> Merging [#4238][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4238   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14580      14585     +5   \n+ Misses         1882       1881     -1   \n+ Partials        851        847     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c3a3d1a...ff425d8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c3a3d1ad38311226382411c6f470984dffb63947...ff425d8b812c80a24e3027b2149269984558478e?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4238?src=pr'
p981
aS':+1:'
p982
asg14
S'vanniktech:1.x_eighth_typo'
p983
sbsI4239
(iPull
Pull
p984
(dp985
g3
S'as per title, combined `AtomicBoolean` with an `Action`.'
p986
sg5
S'save allocation in operatorskiptimed'
p987
sg7
(lp988
S'Performance: allocation'
p989
asg10
I4239
sg11
(lp990
S'## [Current coverage][cc-pull] is 84.06% (diff: 100%)\n> Merging [#4239][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.13%**\n\n```diff\n@@                1.x      #4239   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17319     +6   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n- Hits          14578      14560    -18   \n- Misses         1885       1901    +16   \n- Partials        850        858     +8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...8d4eff8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...8d4eff87c18cdba06f0f602b1c6aac6f593453d4?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4239?src=pr'
p991
aS"Good point, thanks @JakeWharton, I'll do that."
p992
aS'Ah, the trouble with that idea @JakeWharton is that I need to create a non-anonymous class to subclass `Subscriber` and implement `Action0` and that class needs to hold a reference to the `child` subscriber. Thus I end up with the same number of allocations.'
p993
aS"happy to switch to `onSubscribe` while I'm here. I'll do that."
p994
aS'Got rid of `AtomicBoolean`, subscriber implements `Action0`, converted to `OnSubscribe`'
p995
aS"@JakeWharton  upon reflection I realize there's no cost moving from anonymous to non-anonymous class because the anonymous class would have included at least one implicit external reference to access the `child` object. So thanks for the suggestion."
p996
aS':+1:'
p997
asg14
S'davidmoten:skip-timed-reduce-alloc'
p998
sbsI4241
(iPull
Pull
p999
(dp1000
g3
S"When the function's returned Observable signals the resubscription in the operator `redo` (which is the base for `repeatWhen` and `retryWhen`). It is possible an asyncronous source triggers the function (and thus the same `Observable`) from another thread while the first is still coming back from the resubscription itself.\r\n\r\nThis PR serializes the dispatching `BehaviorSubject` to prevent such concurrent execution of the when chain.\r\n\r\nThis may or may not be the source of the failure of #4175 but I can't reproduce the failure with the 1.x branch. /cc @davidmoten.\r\n\r\n"
p1001
sg5
S'fix retrywhen/repeatwhen potential concurrent reentry when resubscribing'
p1002
sg7
(lp1003
S'Bug'
p1004
asg10
I4241
sg11
(lp1005
S'## [Current coverage][cc-pull] is 84.23% (diff: 100%)\n> Merging [#4241][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4241   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14578      14583     +5   \n+ Misses         1885       1880     -5   \n  Partials        850        850          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...05ca826][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...05ca82638eec15d3cda7dbf62be5eb6d8863bb20?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4241?src=pr'
p1006
aS'\xf0\x9f\x91\x8d'
p1007
aS'Worth a shot, gnarly bug :+1: '
p1008
asg14
S'akarnokd:RedoConcurrentSignalFix'
p1009
sbsI4243
(iPull
Pull
p1010
(dp1011
g3
S'a bit of cleanup'
p1012
sg5
S'rename map and filter test classes now that have moved to onsubscribe'
p1013
sg7
(lp1014
S'Cleanup'
p1015
asg10
I4243
sg11
(lp1016
S'## [Current coverage][cc-pull] is 84.28% (diff: 100%)\n> Merging [#4243][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4243   diff @@\n==========================================\n  Files           265        265          \n  Lines         17313      17313          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2627          \n==========================================\n+ Hits          14578      14592    +14   \n+ Misses         1885       1873    -12   \n+ Partials        850        848     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [45f6072...e29443c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/45f607279bdd5cd67d6e342156c8408e1ef63b7f...e29443caf7d2d6b7a75e1c801a541e64f91ce12a?src=pr\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4243?src=pr'
p1017
asg14
S'davidmoten:rename-test-classes'
p1018
sbsI4244
(iPull
Pull
p1019
(dp1020
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.'
p1021
sg5
S'operatorall - prevent multiple terminal events'
p1022
sg7
(lp1023
S'Bug'
p1024
aS'Cleanup'
p1025
asg10
I4244
sg11
(lp1026
S'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added unit tests for `(onNext, onNext)` and `(onNext, onError)` cases'
p1027
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4244?src=pr) is 84.17% (diff: 100%)\n> Merging [#4244](https://codecov.io/gh/ReactiveX/RxJava/pull/4244?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4244   diff @@\n==========================================\n  Files           265        265          \n  Lines         17319      17324     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2627       2629     +2   \n==========================================\n+ Hits          14572      14583    +11   \n+ Misses         1893       1889     -4   \n+ Partials        854        852     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1e147fb...473eced](https://codecov.io/gh/ReactiveX/RxJava/compare/1e147fb629c76b39f795ce79791725a52187899f...473ecedd51d016e182c4e48610cd4e0596efe3a3?src=pr)'
p1028
aS':+1:'
p1029
asg14
S'davidmoten:operator-all-prevent-multiple-terminal-events'
p1030
sbsI4245
(iPull
Pull
p1031
(dp1032
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.'
p1033
sg5
S'operatorany - prevent multiple terminal events'
p1034
sg7
(lp1035
S'Bug'
p1036
aS'Cleanup'
p1037
asg10
I4245
sg11
(lp1038
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4245?src=pr) is 84.21% (diff: 100%)\n> Merging [#4245](https://codecov.io/gh/ReactiveX/RxJava/pull/4245?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4245   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17431     +5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2651     +2   \n==========================================\n+ Hits          14676      14679     +3   \n+ Misses         1893       1890     -3   \n- Partials        857        862     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...ed8caed](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...ed8caed2c07f4b586c189d44626a55d602d3683c?src=pr)'
p1039
aS'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added two unit tests for `(onNext, onNext)` and one for `(onNext, onError)` cases'
p1040
asg14
S'davidmoten:operator-any-prevent-multiple-terminal-events'
p1041
sbsI4246
(iPull
Pull
p1042
(dp1043
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes a unit test that failed on the original code.\r\n\r\nAlso renamed test class to match tested class.'
p1044
sg5
S'operatorreduce - prevent multiple terminal events'
p1045
sg7
(lp1046
S'Bug'
p1047
aS'Cleanup'
p1048
asg10
I4246
sg11
(lp1049
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4246?src=pr) is 84.30% (diff: 100%)\n> Merging [#4246](https://codecov.io/gh/ReactiveX/RxJava/pull/4246?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.08%**\n\n```diff\n@@                1.x      #4246   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17434     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2652     +3   \n==========================================\n+ Hits          14676      14697    +21   \n+ Misses         1893       1873    -20   \n- Partials        857        864     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...586d9f7](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...586d9f7b4e65afe2534e57b172158e55b077504a?src=pr)'
p1050
aS'* Updated with `RxJavaHooks.onError` \r\n* checked `done` at start of `onNext` \r\n* added unit tests including coverage of calling `.reduce` on an empty stream'
p1051
asg14
S'davidmoten:operator-reduce-prevent-multiple-terminal-events'
p1052
sbsI4248
(iPull
Pull
p1053
(dp1054
g3
g57
sg5
S'1.x: synconsubscribe fix typo and java doc'
p1055
sg7
(lp1056
S'Cleanup'
p1057
aS'Documentation'
p1058
asg10
I4248
sg11
(lp1059
S':+1:'
p1060
asg14
S'vanniktech:1.x_synconsubscribe_typo_javadoc'
p1061
sbsI4249
(iPull
Pull
p1062
(dp1063
g3
S'Hi,\r\nthere is a simple implementation for an observable value, in the mutable or immutable form.\r\nThis helps me to share some state (like configuration) when in some case is important to catch every change (using normal subscription) and in other case is useful get only the current value.\r\n\r\nI hope this helps,\r\nthanks for software,\r\nFrancesco'
p1064
sg5
S'value, variable and immutable first implementation'
p1065
sg7
(lp1066
sg10
I4249
sg11
(lp1067
S"Hi and thanks for the contribution but I'm not convinced that these additions belong to RxJava itself. Since the PR doesn't need operators on `Observable` or `Flowable`, they can live in any other library external to RxJava."
p1068
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4249?src=pr) is 69.26% (diff: 0.00%)\n> Merging [#4249](https://codecov.io/gh/ReactiveX/RxJava/pull/4249?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4249   diff @@\n==========================================\n  Files           417        419     +2   \n  Lines         30392      30425    +33   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4885       4887     +2   \n==========================================\n- Hits          21087      21074    -13   \n- Misses         7247       7296    +49   \n+ Partials       2058       2055     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [708310a...1812064](https://codecov.io/gh/ReactiveX/RxJava/compare/708310aca4d1168a7121edbd1690753396acc391...18120641400263b6b91153e12dabd6622ce46d10?src=pr)'
p1069
aS"Thank you for your response,\r\nI'm not interested to do that.\r\n\r\nI will continue to use my Kotlin personal implementation."
p1070
asg14
S'fvasco:2.x'
p1071
sbsI4250
(iPull
Pull
p1072
(dp1073
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes three unit tests that failed on the original code and another that gives coverage of the onBackpressureDrop action being called.'
p1074
sg5
S'onbackpressuredrop - prevent multiple terminal events'
p1075
sg7
(lp1076
S'Bug'
p1077
aS'Cleanup'
p1078
asg10
I4250
sg11
(lp1079
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4250?src=pr) is 84.24% (diff: 100%)\n> Merging [#4250](https://codecov.io/gh/ReactiveX/RxJava/pull/4250?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4250   diff @@\n==========================================\n  Files           266        266          \n  Lines         17426      17433     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2649       2652     +3   \n==========================================\n+ Hits          14676      14686    +10   \n+ Misses         1893       1883    -10   \n- Partials        857        864     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b72beff...de52c6b](https://codecov.io/gh/ReactiveX/RxJava/compare/b72befff08b935ed4652582e17ce658246c12b2c...de52c6b60da220bcd7237658fd0f2d01e90982e5?src=pr)'
p1080
asg14
S'davidmoten:onbackp-drop-prevent-multiple-terminal-events'
p1081
sbsI4251
(iPull
Pull
p1082
(dp1083
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\r\n\r\nIncludes three unit tests that failed on the original code. The fix also has the side effect of enabling gc of `map` when the factory fails (`onError` was called on the child, not `this` so `map` was not set to null).'
p1084
sg5
S'tomap - prevent multiple terminal events, support backpressure'
p1085
sg7
(lp1086
S'Bug'
p1087
aS'Cleanup'
p1088
asg10
I4251
sg11
(lp1089
S'I thought it supported backpressure. Could you rewrite it by using `DeferredScalarSubscription`?'
p1090
aS'unrelated test failure:\r\n\r\n```\r\nrx.schedulers.ComputationSchedulerTests > testHandledErrorIsNotDeliveredToThreadHandler FAILED\r\n    java.lang.AssertionError: Handler should not have received anything expected:<0> but was:<1>\r\n        at org.junit.Assert.fail(Assert.java:88)\r\n        at org.junit.Assert.failNotEquals(Assert.java:834)\r\n        at org.junit.Assert.assertEquals(Assert.java:645)\r\n        at rx.schedulers.SchedulerTests.testHandledErrorIsNotDeliveredToThreadHandler(SchedulerTests.java:102)\r\n        at rx.schedulers.ComputationSchedulerTests.testHandledErrorIsNotDeliveredToThreadHandler(ComputationSchedulerTests.java:153)\r\n```'
p1091
aS'>I thought it supported backpressure. Could you rewrite it by using DeferredScalarSubscription?\r\n\r\nSure.'
p1092
aS"What I might do is fix multiple terminal emissions in  `OnSubscribeCollect` first and make necessary `done` changes to `DeferredScalarSubscriber` in that PR. I'll follow that with the backpressure fix for `OperatorToMap`."
p1093
aS"@akarnokd \r\n\r\nIn terms of releasing a value so can be gc'd I thought to modify `DeferredScalarSubscriber` in this method so that the field `this.value` is set to null just before the call to `a.onNext()`:\r\n```java\r\nprotected final void complete(R value) {\r\n        Subscriber<? super R> a = actual;\r\n        for (;;) {\r\n            int s = state.get();\r\n            \r\n            if (s == NO_REQUEST_HAS_VALUE || s == HAS_REQUEST_HAS_VALUE || a.isUnsubscribed()) {\r\n                return;\r\n            }\r\n            if (s == HAS_REQUEST_NO_VALUE) {\r\n                R v = value; // <--------------------------------\r\n                value = null; // <--------------------------------\r\n                a.onNext(v);\r\n                if (!a.isUnsubscribed()) {\r\n                    a.onCompleted();\r\n                }\r\n                state.lazySet(HAS_REQUEST_HAS_VALUE);\r\n                return;\r\n            }\r\n            this.value = value;\r\n            if (state.compareAndSet(NO_REQUEST_NO_VALUE, NO_REQUEST_HAS_VALUE)) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nIs that ok?"
p1094
aS"don't review latest change, just committed so could work on it from another location"
p1095
aS"I'm not sure if it's worth it. Many operators don't really do that because it is also likely the whole chain gets forgotten and GC claims all of them on its own. If you want to make sure there is no leak, use `onTerminateDetach`."
p1096
aS'Could you rebase the whole thing? Somehow, you picked up changes to master and they show up in the diff.'
p1097
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4251?src=pr) is 84.39% (diff: 100%)\n> Merging [#4251](https://codecov.io/gh/ReactiveX/RxJava/pull/4251?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4251   diff @@\n==========================================\n  Files           267        267          \n  Lines         17460      17460          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2660       2662     +2   \n==========================================\n+ Hits          14732      14735     +3   \n- Misses         1865       1869     +4   \n+ Partials        863        856     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0577b4c...37da430](https://codecov.io/gh/ReactiveX/RxJava/compare/0577b4c49f744ae6a49505ffeb8937e6a0730f3b...37da4301560988479160d2a40d3fbd46138d10f5?src=pr)'
p1098
aS'* Rebased\r\n* Rewrote to use `DeferredScalarSubscriberSafe`\r\n* use singleton of `DefaultMapFactory`\r\n* moved to `OnSubscribe` to save allocations\r\n* added backpressure test '
p1099
aS':+1:'
p1100
aS"Good idea, I've updated the PR."
p1101
aS':+1:'
p1102
asg14
S'davidmoten:to-map-prevent-multiple-terminal-events'
p1103
sbsI4252
(iPull
Pull
p1104
(dp1105
g3
S'As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about another event being sent from upstream even if upstream has been unsubscribed.\r\n\r\n* `DeferredScalarSubscriber` has been updated with a `done` flag\r\n* moved tests from `ObservableTests` to new class `OnSubscribeCollectTest`\r\n* added three tests of post error emissions\r\n* added factory failure test  \r\n'
p1106
sg5
S'collect, deferredscalarsubscriber - prevent multiple terminal emissions'
p1107
sg7
(lp1108
S'Bug'
p1109
aS'Cleanup'
p1110
asg10
I4252
sg11
(lp1111
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4252?src=pr) is 84.36% (diff: 100%)\n> Merging [#4252](https://codecov.io/gh/ReactiveX/RxJava/pull/4252?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4252   diff @@\n==========================================\n  Files           266        267     +1   \n  Lines         17446      17460    +14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2660     +3   \n==========================================\n+ Hits          14713      14731    +18   \n+ Misses         1873       1867     -6   \n- Partials        860        862     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [888560e...204f26f](https://codecov.io/gh/ReactiveX/RxJava/compare/888560edb055d297822c8e1021fe9ef224e31352...204f26f2d63585bf2bcd21ceea11d9a73b0997dc?src=pr)'
p1112
aS"* Created a new class `DeferredScalarSubscriberSafe` that extends `DeferredScalarSubscriber` and offers the `done` checks. `done` is available as a protected field and `OnSubscribeCollect` uses it in its `onNext` method.\r\n* Replaced the calls in tests to `RxJavaHooks.setOnError(null)` with calls to `RxJavaHooks.reset()` in this PR and in recent similar PRs for operators `any`, `all` and `reduce`.\r\n* I'll submit another PR to fix the javadoc of `RxJavaHooks.setOnError` \r\n"
p1113
aS':+1:'
p1114
asg14
S'davidmoten:collect-prevent-multiple-terminal-events'
p1115
sbsI4253
(iPull
Pull
p1116
(dp1117
g3
S"Finally we have `Observable.fromAsync()` and it's time to prevent users from using `Observable.create()`."
p1118
sg5
S'1.x: deprecate observable.create()'
p1119
sg7
(lp1120
sg10
I4253
sg11
(lp1121
S"Don't. Makes all legitimate uses now show up as warnings, including all RxJava!"
p1122
aS"But we have to. It's too dangerous and people keep using it in tutorials for **beginners**! \r\n@JakeWharton is trying to teach them all not to do so (:+1:) but `@Deprecate` is a much more efficient and better way to do it.\r\n\r\n>Makes all legitimate uses now show up as warnings\r\n\r\nPretty sure most of them don't support backpressure -> `legitimate == false`!"
p1123
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4253?src=pr) is 84.24% (diff: 100%)\n> Merging [#4253](https://codecov.io/gh/ReactiveX/RxJava/pull/4253?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                1.x      #4253   diff @@\n==========================================\n  Files           266        266          \n  Lines         17446      17446          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2657          \n==========================================\n- Hits          14715      14698    -17   \n- Misses         1870       1883    +13   \n- Partials        861        865     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [41959f7...ea7300d](https://codecov.io/gh/ReactiveX/RxJava/compare/41959f71b33e71b41c0d6130216e5e6a0f98bfb6...ea7300d06f7bc1e44f0e6b67af65e3bb05448a7f?src=pr)'
p1124
aS'If so should not SyncOnSubscribe & AsyncOnSubscribe be mentioned too?'
p1125
aS"This I why I use Eclipse: it's immediately obvious what the cascading effects of changes are:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/17214880/33901546-54db-11e6-8c05-2c37fc4cad16.png)\r\n\r\nThe javadoc contains the warning about using the method:\r\n\r\n> This method requires advanced knowledge about building operators and data sources; please consider other standard methods first; \r\n"
p1126
aS'We can suppress them in RxJava! \r\n\r\nSometimes to save someone you love you need to sacrifice something \xf0\x9f\x9a\xa2'
p1127
aS'You may not care about the impact but I have to. This change is too radical; a small deprecation now amplified to 400+ warnings and would need to suppress several hundred places - all legitimate (operators) or acceptable uses (unit tests for corner cases).\r\n\r\n:-1:'
p1128
aS'I better suppress 400+ warnings than let one user to misuse `Observable.create()` and get `MissingBackpressureException` or allow emission without `subscriber.isUnsubscribed()` check.\r\n\r\nI understand that you care about library \xf0\x9f\x91\x8d, but I care about users in this PR!\r\n\r\nOnly in open source projects with shitty GitHub search I found [about 6k+ usages](https://github.com/search?l=java&q=%22Observable.create%22&ref=searchresults&type=Code&utf8=\xe2\x9c\x93) of `Observable.create()`, are you sure they all correctly handle backpressure, errors and unsubscription?\r\n\r\nRecently we had to handle backpressure with `Observable.create()` in our library StorIO, same was done in SQLBrite and Retrofit. And this is because maintainers of those libraries were aware of MBE and how to handle it, others may not have required level of understanding to correctly use `Observable.create()`. (I try to avoid it as much as possible). '
p1129
aS"Still you don't just deprecate something and leave the fallout to other maintainer(s).\r\n\r\nInstead of just deprecating `create` this is what I'd do:\r\n\r\n  - refactor-rename `create` to `build` in the entire project -> keeps all our use places intact, no suppressing needed\r\n  - copy the `build` method back to `create`\r\n  - mark `create` as deprecated, add pointers to the alternative methods in the Javadoc"
p1130
aS'That sounds better to me, I was thinking about package private method inside `Observable`, like `createInternal()` + `rx.Internal.createObservable()`, if it would be required, to completely hide it from users (and deprecate `Observable.create()`).\r\n\r\nDoes it sound good to you @akarnokd?\r\n\r\n>If so should not SyncOnSubscribe & AsyncOnSubscribe be mentioned too?\r\n\r\nUp to @akarnokd.'
p1131
aS"Just making it package-private does not work. We have accesses from other packages that require the create feature. It means we'd have to dump them into the main `rx`, all their tests. With `Internal`, now you have a publicly accessible class and just switched `Observable.create` with `Internal.createObservable`. Java 6's visibility rules are simply not powerful enough to hide `create`.\r\n"
p1132
aS"So, after discussing that in Twitter looks like our steps could be:\r\n\r\n1. Teach users to use `fromAsync()` in their apps but not in libraries yet because it's `@Experimental`.\r\n2. Collect feedback.\r\n3. Stabilise `fromAsync()` and promote it to `@Beta` or stable.\r\n4. Deprecate `create()`.\r\n\r\nRegarding hiding it, I think `internalCreate()` or `unsafeCreate()` will do the work.\r\n\r\nIf that sounds good to you, I'll close this pr and start working on things from list."
p1133
aS'That sounds good.'
p1134
aS">Regarding hiding it, I think internalCreate() or unsafeCreate() will do the work.\r\n\r\nDeprecating `create` seems like  a good idea to get users to consider what they're doing but the `create` functionality still needs to be part of the public API. `unsafeCreate` may be a useful name to make people think twice about it.\r\n\r\nRe `fromAsync` teaching, one outstanding issue with it was request batching. @akarnokd submitted an operator that we can use for that (`rebatchRequests`)  and I suspect it should be covered as part of the  documentation of `fromAsync` usage. "
p1135
asg14
S'artem-zinnatullin:az/1.x/deprecate-observable.create'
p1136
sbsI4254
(iPull
Pull
p1137
(dp1138
g3
S'This fixes the generics warnings in the new `Single.flatMapCompletable` unit tests.'
p1139
sg5
S'1.x: fix singletest generics warnings'
p1140
sg7
(lp1141
S'Cleanup'
p1142
aS'Test'
p1143
asg10
I4254
sg11
(lp1144
S"\xf0\x9f\x91\x8d didn't see those since I have Java 8 as default in my IDE"
p1145
aS"I'm using Eclipse which turned out to be an excellent tool to warn about these things. Are you using IntelliJ? I've noticed that people using IntelliJ end up with such hidden problems (while IntelliJ for me complained about almost everything else when I loaded RxJava into it once)."
p1146
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4254?src=pr) is 84.30% (diff: 100%)\n> Merging [#4254](https://codecov.io/gh/ReactiveX/RxJava/pull/4254?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4254   diff @@\n==========================================\n  Files           266        266          \n  Lines         17446      17446          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2657       2657          \n==========================================\n- Hits          14715      14707     -8   \n- Misses         1870       1879     +9   \n+ Partials        861        860     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [41959f7...acfdde2](https://codecov.io/gh/ReactiveX/RxJava/compare/41959f71b33e71b41c0d6130216e5e6a0f98bfb6...acfdde2bee03dc7e0322ab3df889de7a5618631e?src=pr)'
p1147
aS"Yes I'm using Android Studio which is based on IntelliJ. That's weird I had no problems loading the project into AS."
p1148
asg14
S'akarnokd:TestCleanup728'
p1149
sbsI4257
(iPull
Pull
p1150
(dp1151
g3
S'as per title'
p1152
sg5
S'fix javadoc on rxjavahooks.setonerror'
p1153
sg7
(lp1154
S'Documentation'
p1155
asg10
I4257
sg11
(lp1156
S"Don't know what happened but I suppose it's unrelated:\r\n\r\n```\r\nCaused by: org.eclipse.jgit.errors.MissingObjectException: Missing commit 75ffcbb01cae042f5b715060622154794f39a690\r\n```"
p1157
aS":+1:\r\n\r\nBy default, Travis checks out the last N commits. If that last N doesn't contain a version tag, the Nebula plugins' version inference freaks out. I have to keep increasing that value if there are too many commits between releases."
p1158
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4257?src=pr) is 84.28% (diff: 100%)\n\n\n> No coverage report found for **1.x** at 2a50c2f.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2a50c2f...59218d9](https://codecov.io/gh/ReactiveX/RxJava/compare/2a50c2fe34d06fad199d097b9ee3352f3a5ce2f8...59218d90921cc3313392b8e29462ac0f1ec76264?src=pr)'
p1159
asg14
S'davidmoten:rxjavahooks-setonerror-javadoc-fix'
p1160
sbsI4261
(iPull
Pull
p1161
(dp1162
g3
S'This PR adds multiple arguments to concatDelayError operator\r\n\r\nRelated to: #4152 '
p1163
sg5
S'1.x: concatdelayerror multiple arguments'
p1164
sg7
(lp1165
S'Enhancement'
p1166
asg10
I4261
sg11
(lp1167
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4261?src=pr) is 84.37% (diff: 100%)\n> Merging [#4261](https://codecov.io/gh/ReactiveX/RxJava/pull/4261?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4261   diff @@\n==========================================\n  Files           267        267          \n  Lines         17460      17468     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14735      14738     +3   \n- Misses         1866       1875     +9   \n+ Partials        859        855     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [969d94c...0d0cd28](https://codecov.io/gh/ReactiveX/RxJava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae...0d0cd281747fdb1851d97c6b9c7cff8fbcb5a28f?src=pr)'
p1168
aS':+1:'
p1169
aS'/cc @artem-zinnatullin @stevegury @zsxwing '
p1170
asg14
S'SherifMakhlouf:multiple-args-concatDelayError'
p1171
sbsI4262
(iPull
Pull
p1172
(dp1173
g3
S'as discussed in #4260 \r\n* call `RxJavaHooks.onError` for secondary errors\r\n* reduced allocations (`ActionSubscriber` -> `ActionObserver`, `Operator` -> `OnSubscribe`)\r\n* added 5 unit tests\r\n'
p1174
sg5
S'dooneach - reduce allocations, report to rxjavahooks'
p1175
sg7
(lp1176
S'Cleanup'
p1177
asg10
I4262
sg11
(lp1178
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4262?src=pr) is 84.41% (diff: 100%)\n> Merging [#4262](https://codecov.io/gh/ReactiveX/RxJava/pull/4262?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4262   diff @@\n==========================================\n  Files           267        268     +1   \n  Lines         17460      17477    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14735      14753    +18   \n  Misses         1866       1866          \n+ Partials        859        858     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [969d94c...771d859](https://codecov.io/gh/ReactiveX/RxJava/compare/969d94cdd382e6c08f6025413716fc89cc5632ae...771d859c701608a655c2b32e7fc4a0dc840a20e9?src=pr)'
p1179
aS'fixed ActionSubscriber usage and removed empty test, ta'
p1180
aS':+1:'
p1181
asg14
S'davidmoten:doOnEach-optimize-and-fix'
p1182
sbsI4264
(iPull
Pull
p1183
(dp1184
g3
S'This PR Observable.sorted Method, I hope it addresses this #4263 correctly. '
p1185
sg5
S'adds observable.sorted method'
p1186
sg7
(lp1187
S'Enhancement'
p1188
aS'Feature-Request'
p1189
asg10
I4264
sg11
(lp1190
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4264?src=pr) is 84.48% (diff: 100%)\n> Merging [#4264](https://codecov.io/gh/ReactiveX/RxJava/pull/4264?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4264   diff @@\n==========================================\n  Files           268        268          \n  Lines         17477      17477          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n+ Hits          14761      14765     +4   \n+ Misses         1861       1856     -5   \n- Partials        855        856     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3639e73...26ebeeb](https://codecov.io/gh/ReactiveX/RxJava/compare/3639e731b0b749ba864674d6971a00ee4a812496...26ebeebd5e5ac653830a3d0cabf6950eacecd795?src=pr)'
p1191
aS"I'd have implemented a single operator for it but this will also do."
p1192
aS"Looks generally okay but I can't tell how often this shortcut is needed. I hope for some community feedback on this."
p1193
aS':+1:'
p1194
aS':+1: '
p1195
asg14
S'SherifMakhlouf:observable_sorted'
p1196
sbsI4265
(iPull
Pull
p1197
(dp1198
g3
S'This PR is a performance improvement in `sequenceEquals` where I removed a call to `map` that appears unnecessary.\r\n'
p1199
sg5
S'remove unnecessary map call in sequenceequals operator'
p1200
sg7
(lp1201
S'Cleanup'
p1202
asg10
I4265
sg11
(lp1203
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4265?src=pr) is 84.41% (diff: 100%)\n> Merging [#4265](https://codecov.io/gh/ReactiveX/RxJava/pull/4265?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                1.x      #4265   diff @@\n==========================================\n  Files           268        268          \n  Lines         17477      17475     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2662          \n==========================================\n- Hits          14761      14751    -10   \n- Misses         1861       1864     +3   \n- Partials        855        860     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3639e73...a259866](https://codecov.io/gh/ReactiveX/RxJava/compare/3639e731b0b749ba864674d6971a00ee4a812496...a259866bccce4817f5049aa94cacf10a809f10c8?src=pr)'
p1204
aS':+1:'
p1205
asg14
S'davidmoten:sequenceEquals-remove-unnecessary-map'
p1206
sbsI4266
(iPull
Pull
p1207
(dp1208
g3
S"This PR adds a dedicated `concat` implementation that works with the source array. The main benefit is that there is no need to serialize emissions because the source array can't throw (unlike `concatMap` where there could be an onError from the main source while an inner source is running). Plus, there is a new `concatArrayDelayError` version."
p1209
sg5
S'2.x: add dedicated concat for array of publishers'
p1210
sg7
(lp1211
S'Enhancement'
p1212
asg10
I4266
sg11
(lp1213
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4266?src=pr) is 69.29% (diff: 84.50%)\n> Merging [#4266](https://codecov.io/gh/ReactiveX/RxJava/pull/4266?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4266   diff @@\n==========================================\n  Files           417        418     +1   \n  Lines         30392      30460    +68   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4885       4898    +13   \n==========================================\n+ Hits          21087      21107    +20   \n- Misses         7247       7294    +47   \n- Partials       2058       2059     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [708310a...4c891ef](https://codecov.io/gh/ReactiveX/RxJava/compare/708310aca4d1168a7121edbd1690753396acc391...4c891efabf3c78269e4b38324ad45d03893d098c?src=pr)'
p1214
aS'lgtm :+1:'
p1215
asg14
S'akarnokd:ConcatArrayDedicated'
p1216
sbsI4268
(iPull
Pull
p1217
(dp1218
g3
S'  - rename `finallyDo` (deprecated in 1.x) to `doAfterTerminate`\r\n  - upgrade sized `buffer()`, fix backpressure bug\r\n  - add post-complete helper methods\r\n  - fix `toSingle` not complaining about an empty/longer source\r\n  - `RxJavaPlugins` to reset the base-type lifecycle callbacks as well'
p1219
sg5
S'2.x: test sync and operator fixes'
p1220
sg7
(lp1221
S'Bug'
p1222
aS'Test'
p1223
asg10
I4268
sg11
(lp1224
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4268?src=pr) is 69.64% (diff: 63.35%)\n> Merging [#4268](https://codecov.io/gh/ReactiveX/RxJava/pull/4268?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.22%**\n\n```diff\n@@                2.x      #4268   diff @@\n==========================================\n  Files           418        418          \n  Lines         30460      30608   +148   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4898       4933    +35   \n==========================================\n+ Hits          21144      21317   +173   \n+ Misses         7258       7217    -41   \n- Partials       2058       2074    +16   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3f324c6...d6f49b3](https://codecov.io/gh/ReactiveX/RxJava/compare/3f324c6889b5369b79bdd3dfb8b4854b650a90be...d6f49b3808243a4e9e639745478f0a6125eb47b8?src=pr)'
p1225
aS'lgtm :+1:'
p1226
aS'Thanks @JakeWharton !'
p1227
asg14
S'akarnokd:TestSync801'
p1228
sbsI4269
(iPull
Pull
p1229
(dp1230
g3
g57
sg5
S'remove needless static field for initialization.'
p1231
sg7
(lp1232
S'Cleanup'
p1233
asg10
I4269
sg11
(lp1234
S':+1:'
p1235
aS':+1:'
p1236
asg14
S'JakeWharton:jw/cleanup'
p1237
sbsI4270
(iPull
Pull
p1238
(dp1239
g3
S'* switched to `OnSubscribe`\r\n* switched to use `DeferredScalarSubscriberSafe`\r\n* previous source failed to handle post terminal emissions \r\n* added 4 unit tests'
p1240
sg5
S'tomultimap - prevent post terminal emissions, reduce allocations'
p1241
sg7
(lp1242
S'Bug'
p1243
aS'Cleanup'
p1244
asg10
I4270
sg11
(lp1245
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4270?src=pr) is 84.43% (diff: 100%)\n> Merging [#4270](https://codecov.io/gh/ReactiveX/RxJava/pull/4270?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4270   diff @@\n==========================================\n  Files           268        268          \n  Lines         17475      17474     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2662       2664     +2   \n==========================================\n+ Hits          14750      14755     +5   \n+ Misses         1867       1860     -7   \n- Partials        858        859     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c95c650...3b74be6](https://codecov.io/gh/ReactiveX/RxJava/compare/c95c6507e542a3082868c44c0c9ccc5f287183d6...3b74be66a31b388eb4f014fcb906039b8f0e6d2d?src=pr)'
p1246
aS':+1:'
p1247
asg14
S'davidmoten:toMultimap-prevent-post-terminal-emissions'
p1248
sbsI4273
(iPull
Pull
p1249
(dp1250
g3
S"  - Add `rebatchRequests` which delegates to `observeOn` with the help of an internal `ImmediateThinScheduler` that only executes tasks immediately. Still not planning to expose an immediate scheduler.\r\n  - Fix `FlowableMapNotification`'s type signature, no need to restrict it to return `Publisher<R>` but can go with `R` itself.\r\n  - Make sure `flatMap` doesn't reorder scalars and elements of the same inner source.\r\n  - Change parameter ordering on `mergeDelayError(Iterator)` overloads."
p1251
sg5
S'2.x: test sync and missing operators (8/02)'
p1252
sg7
(lp1253
S'Bug'
p1254
aS'Enhancement'
p1255
aS'Test'
p1256
asg10
I4273
sg11
(lp1257
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4273?src=pr) is 69.68% (diff: 78.78%)\n> Merging [#4273](https://codecov.io/gh/ReactiveX/RxJava/pull/4273?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4273   diff @@\n==========================================\n  Files           418        419     +1   \n  Lines         30608      30632    +24   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4933       4935     +2   \n==========================================\n+ Hits          21283      21345    +62   \n+ Misses         7235       7201    -34   \n+ Partials       2090       2086     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9099f90...eae1d8e](https://codecov.io/gh/ReactiveX/RxJava/compare/9099f90e2281e388385663c37eeaf4b5917987ae...eae1d8ec28f0dbc66099ce2ff57924e2c5a703ec?src=pr)'
p1258
asg14
S'akarnokd:TestSync802_2'
p1259
sbsI4276
(iPull
Pull
p1260
(dp1261
g3
S'#### \xf0\x9f\x93\x98 PR summary\r\n\r\nFix behavior change of `distinctUntilChanged`  introduced in the version `1.1.7` of RxJava\r\n\r\nRelated to: #4034'
p1262
sg5
S'1.x: distinctuntilchanged change erroneous behavior'
p1263
sg7
(lp1264
sg10
I4276
sg11
(lp1265
S"Omg, I'm from phone at the moment, but it looks very critical, right? \r\n\r\nAs far as I see it won't compare old value with new if old is `null`"
p1266
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4276?src=pr) is 84.43% (diff: 100%)\n> Merging [#4276](https://codecov.io/gh/ReactiveX/RxJava/pull/4276?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4276   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14768      14756    -12   \n- Misses         1854       1861     +7   \n- Partials        854        859     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...87b3255](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...87b3255439b9f867888fa4990183185ded771643?src=pr)'
p1267
aS"ok, I'm with computer now and I don't see what's the problem with previous code. Can you please explain?"
p1268
aS'@artem-zinnatullin My guess is that he has a bug in his `equals` implementation and wants to change the library for a workaround.'
p1269
aS"@akarnokd Yes it's the case, it permitted me to pinpoint a bug on my side and I fixed it. But I though that if we could avoid people this behavior change it would be great"
p1270
aS'After this change, all you need to do is reverse `t1` and `t2` to get the same failure again.'
p1271
asg14
S'heetch:fix/distinctUntilChanged'
p1272
sbsI4278
(iPull
Pull
p1273
(dp1274
g3
S'It had a bit of a cascading effect.'
p1275
sg5
S'2.x: functional interfaces now throw'
p1276
sg7
(lp1277
S'Enhancement'
p1278
asg10
I4278
sg11
(lp1279
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4278?src=pr) is 69.46% (diff: 55.45%)\n> Merging [#4278](https://codecov.io/gh/ReactiveX/RxJava/pull/4278?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.17%**\n\n```diff\n@@                2.x      #4278   diff @@\n==========================================\n  Files           419        418     -1   \n  Lines         30632      30752   +120   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21331      21361    +30   \n- Misses         7219       7307    +88   \n- Partials       2082       2084     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...e60ecd4](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...e60ecd425933e53579c1d233e4f418bae5e9e28e?src=pr)'
p1280
aS"@akarnokd jfyi I'm reviewing this, but it takes a lot of time, will try to finish today"
p1281
aS'Holy long PR batman! :+1:'
p1282
aS"Yeah, I've finished like 60%, looks good yet\n\nOn Sat, 6 Aug 2016, 02:23 Jake Wharton, <notifications@github.com> wrote:\n\n> Holy long PR batman! \xf0\x9f\x91\x8d\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4278#issuecomment-237988080>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AA7B3EpPKUb78Dpt2NQs9bosSEYhYEwiks5qc8XcgaJpZM4JbtCA>\n> .\n>\n"
p1283
aS'Merged it so Jake & I can progress on other things; just shout out if you found something wrong.'
p1284
asg14
S'akarnokd:FunctionalThrows'
p1285
sbsI4279
(iPull
Pull
p1286
(dp1287
g3
S'Was released a while ago and since it\'s an "important update to v2.14", here it is.\r\n\r\nRelease notes: https://docs.gradle.org/2.14.1/release-notes'
p1288
sg5
S'1.x: update gradle to v2.14.1'
p1289
sg7
(lp1290
S'Build'
p1291
asg10
I4279
sg11
(lp1292
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4279?src=pr) is 84.50% (diff: 100%)\n> Merging [#4279](https://codecov.io/gh/ReactiveX/RxJava/pull/4279?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will not change coverage\n\n```diff\n@@                1.x      #4279   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n  Hits          14768      14768          \n+ Misses         1854       1847     -7   \n- Partials        854        861     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...2c17068](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...2c170685202486e1cca9deeaf778ef33cd9e91d7?src=pr)'
p1293
aS'We had no build issues as far as I know but the known issues on that link worries me.'
p1294
aS'Well, we can try to upgrade, but for example for our Android app written in Kotlin neither 2.14 nor 2.14.1 build correctly in non-clean mode.'
p1295
aS'If you feel like 2.14 is okay for now since no issues happened feel free to close this one. \r\nI just saw that an "old" Gradle version was used in the build, but we can surely wait for one of the next Gradle releases.'
p1296
aS"Thanks for the contribution but we'll wait out this one."
p1297
asg14
S'Mauin:gradle_2.14.1'
p1298
sbsI4281
(iPull
Pull
p1299
(dp1300
g3
S'Equivalent of #4269 '
p1301
sg5
S'1.x: remove needless static field for initialization in indexedringbuffer.'
p1302
sg7
(lp1303
S'Cleanup'
p1304
asg10
I4281
sg11
(lp1305
S'\xf0\x9f\x91\x8d '
p1306
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4281?src=pr) is 84.48% (diff: 100%)\n> Merging [#4281](https://codecov.io/gh/ReactiveX/RxJava/pull/4281?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4281   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14768      14764     -4   \n- Misses         1854       1855     +1   \n- Partials        854        857     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0f23a15...56c165b](https://codecov.io/gh/ReactiveX/RxJava/compare/0f23a15c2b4cab8db74cce33118a5047b8c18a08...56c165be6c3177fc6e9aa3e3e4de766c487e0f01?src=pr)'
p1307
aS':+1:'
p1308
asg14
S'vanniktech:1.x_cleanup'
p1309
sbsI4282
(iPull
Pull
p1310
(dp1311
g3
g57
sg5
S'1.x: make observable takeuntil documentation more explicit'
p1312
sg7
(lp1313
S'Documentation'
p1314
asg10
I4282
sg11
(lp1315
S':+1:'
p1316
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4282?src=pr) is 84.45% (diff: 100%)\n> Merging [#4282](https://codecov.io/gh/ReactiveX/RxJava/pull/4282?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                1.x      #4282   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17476          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n+ Hits          14741      14760    +19   \n+ Misses         1874       1853    -21   \n- Partials        861        863     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3690bd7...69cfb2d](https://codecov.io/gh/ReactiveX/RxJava/compare/3690bd77157f31ec15c7cc02f8eb5ac28765e197...69cfb2d6ed9a6df68325ce1e6840ec5a6105e0b6?src=pr)'
p1317
asg14
S'vanniktech:1.x_takeUntil_docs'
p1318
sbsI4285
(iPull
Pull
p1319
(dp1320
g3
g57
sg5
S"2.x: remove defunct 'nbp' prefix from observable interfaces."
p1321
sg7
(lp1322
S'Cleanup'
p1323
asg10
I4285
sg11
(lp1324
S"All other 'Nbp' references are in tests which I'll clean up next."
p1325
aS"Also worth noting that these names are the same now as those in `Flowable`, but you're not only unlikely to use both in the same file, the disambiguation of the two is trivial with an `Observable.` or `Flowable.` qualifier."
p1326
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4285?src=pr) is 69.67% (diff: 100%)\n> Merging [#4285](https://codecov.io/gh/ReactiveX/RxJava/pull/4285?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4285   diff @@\n==========================================\n  Files           419        419          \n  Lines         30632      30632          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21331      21342    +11   \n+ Misses         7219       7203    -16   \n- Partials       2082       2087     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...09b4344](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...09b434434352fef5c8ae533c2546ca9e2e20fc9e?src=pr)'
p1327
aS':+1:'
p1328
aS'What about `NbpFullArbiter` & `NbpQueueDrain`? They are not in the test scope.'
p1329
aS'Yeah I saw those after commenting.\n\nOn Sun, Aug 7, 2016 at 5:29 PM Niklas Baudy <notifications@github.com>\nwrote:\n\n> What about NbpFullArbiter & NbpQueueDrain? They are not in the test scope.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4285#issuecomment-238109706>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEESxQ2w9PQNPhSR5PWGLLOOXj8w-bks5qdk4igaJpZM4JeMAx>\n> .\n>\n'
p1330
asg14
S'JakeWharton:jw/nbp-no-more'
p1331
sbsI4287
(iPull
Pull
p1332
(dp1333
g3
g57
sg5
S'2.x: elide observablewrapper for empty and never.'
p1334
sg7
(lp1335
S'Cleanup'
p1336
asg10
I4287
sg11
(lp1337
S"Not sure whether the use of `create` is intentional or not internally. As of right now it's just a trampoline/indirection to `subscribeActual` so if extending `Observable` is fine, I can go through and eliminate all of these."
p1338
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4287?src=pr) is 69.61% (diff: 100%)\n> Merging [#4287](https://codecov.io/gh/ReactiveX/RxJava/pull/4287?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4287   diff @@\n==========================================\n  Files           419        419          \n  Lines         30632      30632          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21331      21325     -6   \n- Misses         7219       7227     +8   \n+ Partials       2082       2080     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a4fb7da...66abf1d](https://codecov.io/gh/ReactiveX/RxJava/compare/a4fb7dabc7e7859939facb90445e78ad267442e9...66abf1df801c04bc92d1611dddb37614e979b4a1?src=pr)'
p1339
aS':+1:'
p1340
asg14
S'JakeWharton:jw/elide-wrapper'
p1341
sbsI4288
(iPull
Pull
p1342
(dp1343
g3
S'Related: #4280.\r\n\r\nThe `Exceptions.propagate` and `Exceptions.throwIfFatal` are too useful to be hidden in an internal package so this PR moves them into the public `io.reactivex.exceptions` package. The terminal atomics related to Throwable containers lives in the `ExceptionHelper` enum.'
p1344
sg5
S'2.x: move exceptions to public area, + exceptionhelper'
p1345
sg7
(lp1346
S'Cleanup'
p1347
asg10
I4288
sg11
(lp1348
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4288?src=pr) is 69.44% (diff: 42.66%)\n> Merging [#4288](https://codecov.io/gh/ReactiveX/RxJava/pull/4288?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4288   diff @@\n==========================================\n  Files           418        419     +1   \n  Lines         30752      30754     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21348      21358    +10   \n+ Misses         7317       7311     -6   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2d36c7b...b8f3884](https://codecov.io/gh/ReactiveX/RxJava/compare/2d36c7b32d90b0d8e04a7e1b1a56ed09883df73a...b8f38842a0351b49b15c7c009b47e62568c2faa4?src=pr)'
p1349
aS'lgtm :+1:'
p1350
asg14
S'akarnokd:ExceptionsSplit'
p1351
sbsI4289
(iPull
Pull
p1352
(dp1353
g3
g57
sg5
S'2.x: elide more create/callback wrappers in favor of direct observables.'
p1354
sg7
(lp1355
S'Cleanup'
p1356
asg10
I4289
sg11
(lp1357
S':+1:'
p1358
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4289?src=pr) is 69.51% (diff: 76.92%)\n> Merging [#4289](https://codecov.io/gh/ReactiveX/RxJava/pull/4289?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4289   diff @@\n==========================================\n  Files           419        419          \n  Lines         30754      30755     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21354      21378    +24   \n+ Misses         7311       7292    -19   \n+ Partials       2089       2085     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d4e8f29...fd2d0e9](https://codecov.io/gh/ReactiveX/RxJava/compare/d4e8f29730350efc763521f94f7ea23cf417b0e4...fd2d0e90c8a53680f3395ccc8f115a81e1cf4946?src=pr)'
p1359
aS':+1:'
p1360
asg14
S'JakeWharton:jw/elide-more-create'
p1361
sbsI4290
(iPull
Pull
p1362
(dp1363
g3
g57
sg5
S'2.x: eliminate an extra allocation and indirection in periodic scheduling.'
p1364
sg7
(lp1365
sg10
I4290
sg11
(lp1366
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4290?src=pr) is 69.46% (diff: 100%)\n> Merging [#4290](https://codecov.io/gh/ReactiveX/RxJava/pull/4290?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4290   diff @@\n==========================================\n  Files           419        419          \n  Lines         30754      30753     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21354      21363     +9   \n+ Misses         7311       7309     -2   \n+ Partials       2089       2081     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d4e8f29...9c4682b](https://codecov.io/gh/ReactiveX/RxJava/compare/d4e8f29730350efc763521f94f7ea23cf417b0e4...9c4682ba91f7fc56681676abc14dc17fbdb40534?src=pr)'
p1367
asg14
S'JakeWharton:jw/eliminate-allocation'
p1368
sbsI4291
(iPull
Pull
p1369
(dp1370
g3
g57
sg5
S'2.x: promote anonymous observables to top-level types.'
p1371
sg7
(lp1372
S'Cleanup'
p1373
asg10
I4291
sg11
(lp1374
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4291?src=pr) is 69.40% (diff: 52.94%)\n> Merging [#4291](https://codecov.io/gh/ReactiveX/RxJava/pull/4291?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4291   diff @@\n==========================================\n  Files           420        424     +4   \n  Lines         30761      30778    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4938     +1   \n==========================================\n- Hits          21378      21362    -16   \n- Misses         7296       7331    +35   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...2453679](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...24536793fb4a950e04d0f1056ecf7f5a5011b658?src=pr)'
p1375
aS'I think this is ready. I have another one following it to normalize the implementations of never+empty for all types (they vary slightly currently).'
p1376
aS'This needs rebasing.'
p1377
aS':+1:'
p1378
asg14
S'JakeWharton:jw/top-level-types'
p1379
sbsI4292
(iPull
Pull
p1380
(dp1381
g3
S'Correct annotatoin declaration as well.'
p1382
sg5
S'2.x: actually apply custom scheduler when applying future.'
p1383
sg7
(lp1384
S'Bug'
p1385
asg10
I4292
sg11
(lp1386
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr) is 69.53% (diff: 100%)\n> Merging [#4292](https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4292   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30755          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21372      21387    +15   \n+ Misses         7296       7282    -14   \n+ Partials       2087       2086     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...28402ef](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...28402eff1b92078605e7169cf5950148cd9812e3?src=pr)'
p1387
aS'Actually I should write a test for this.\n\nOn Sat, Aug 6, 2016, 9:01 PM Codecov <notifications@github.com> wrote:\n\n> Current coverage <https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr>\n> is 69.42% (diff: 50.00%)\n>\n> Merging #4292 <https://codecov.io/gh/ReactiveX/RxJava/pull/4292?src=pr>\n> into 2.x <https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr> will\n> decrease coverage by *0.06%*\n>\n> @@                2.x      #4292   diff @@\n> ==========================================\n>   Files           419        419\n>   Lines         30755      30755\n>   Methods           0          0\n>   Messages          0          0\n>   Branches       4935       4935\n> ==========================================- Hits          21372      21351    -21   - Misses         7296       7318    +22   + Partials       2087       2086     -1\n>\n> Powered by Codecov <https://codecov.io?src=pr>. Last update\n> 6b0f1b0...55c0611\n> <https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...55c0611a679d6c978c142a8b2e5dc6a3be73f2ff?src=pr>\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4292#issuecomment-238056980>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEaFXsndyezWh_5TFp7g_SkLUQRndks5qdS5ggaJpZM4JeZc->\n> .\n>\n'
p1388
asg14
S'JakeWharton:jw/single-scheduler'
p1389
sbsI4293
(iPull
Pull
p1390
(dp1391
g3
g57
sg5
S'2.x: correct default subscriber name.'
p1392
sg7
(lp1393
S'Cleanup'
p1394
asg10
I4293
sg11
(lp1395
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4293?src=pr) is 69.45% (diff: 25.00%)\n> Merging [#4293](https://codecov.io/gh/ReactiveX/RxJava/pull/4293?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4293   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30755          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21372      21360    -12   \n- Misses         7296       7312    +16   \n+ Partials       2087       2083     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...cb5c64f](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...cb5c64f5602fe54fc6e9f683060f36d70ffde8c7?src=pr)'
p1396
asg14
S'JakeWharton:jw/rename'
p1397
sbsI4294
(iPull
Pull
p1398
(dp1399
g3
g57
sg5
S'2.x: inline generic-free runnable and long consumer method.'
p1400
sg7
(lp1401
S'Cleanup'
p1402
asg10
I4294
sg11
(lp1403
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4294?src=pr) is 69.42% (diff: 59.25%)\n> Merging [#4294](https://codecov.io/gh/ReactiveX/RxJava/pull/4294?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4294   diff @@\n==========================================\n  Files           419        419          \n  Lines         30755      30753     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n- Hits          21372      21351    -21   \n- Misses         7296       7314    +18   \n- Partials       2087       2088     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...05c5e0f](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...05c5e0f8cfd5e3f5d2adb5b571ee7d6889cfae93?src=pr)'
p1404
asg14
S'JakeWharton:jw/inline'
p1405
sbsI4295
(iPull
Pull
p1406
(dp1407
g3
S"There's already one for observer, subscriber, and completable subscriber."
p1408
sg5
S'2.x: add serialized single subscriber wrapper.'
p1409
sg7
(lp1410
S'Enhancement'
p1411
asg10
I4295
sg11
(lp1412
S"This is copy/paste from the completable one which is untested at this point. Tests for both can be added later, I just didn't want to forget about it."
p1413
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4295?src=pr) is 69.41% (diff: 0.00%)\n> Merging [#4295](https://codecov.io/gh/ReactiveX/RxJava/pull/4295?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4295   diff @@\n==========================================\n  Files           419        420     +1   \n  Lines         30755      30767    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4937     +2   \n==========================================\n- Hits          21372      21357    -15   \n- Misses         7296       7326    +30   \n+ Partials       2087       2084     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6b0f1b0...143b4b9](https://codecov.io/gh/ReactiveX/RxJava/compare/6b0f1b05353cf0c3ef63a1b9923b77721f35227f...143b4b9b06ee051f0d3c4cac55dc7515a9a966a5?src=pr)'
p1414
aS"Single and Completable are so simple to serialize that operators do it themselves. For the sake of symmetry, let's have it."
p1415
asg14
S'JakeWharton:jw/serialized-single'
p1416
sbsI4296
(iPull
Pull
p1417
(dp1418
g3
g57
sg5
S'2.x: observable.range fix exception message'
p1419
sg7
(lp1420
S'Cleanup'
p1421
asg10
I4296
sg11
(lp1422
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4296?src=pr) is 69.47% (diff: 0.00%)\n> Merging [#4296](https://codecov.io/gh/ReactiveX/RxJava/pull/4296?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4296   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30765          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21379      21373     -6   \n- Misses         7309       7311     +2   \n- Partials       2077       2081     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7beda2a...26c9d4a](https://codecov.io/gh/ReactiveX/RxJava/compare/7beda2a8fac656e468add42f7524a65dbed3c4db...26c9d4ab5a3e01a4b8dec46d4681006def307a54?src=pr)'
p1423
asg14
S'vanniktech:2.x_exception_message_Fix'
p1424
sbsI4297
(iPull
Pull
p1425
(dp1426
g3
S'Addresses #4044'
p1427
sg5
S'2.x: rename single base interface types for consistency'
p1428
sg7
(lp1429
S'Cleanup'
p1430
asg10
I4297
sg11
(lp1431
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4297?src=pr) is 69.41% (diff: 46.59%)\n> Merging [#4297](https://codecov.io/gh/ReactiveX/RxJava/pull/4297?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4297   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30764     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21379      21354    -25   \n- Misses         7309       7319    +10   \n- Partials       2077       2091    +14   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7beda2a...fa2eef3](https://codecov.io/gh/ReactiveX/RxJava/compare/7beda2a8fac656e468add42f7524a65dbed3c4db...fa2eef39749abd2f718184868ce7082ecfcc9282?src=pr)'
p1432
aS'lgtm :+1:'
p1433
aS':+1:'
p1434
aS"@JakeWharton if you want me to and you haven't started yet I'd continue on that list and rename the other classes / interfaces as well"
p1435
aS"Sure. Go for it!\n\nOn Sun, Aug 7, 2016 at 1:55 PM Niklas Baudy <notifications@github.com>\nwrote:\n\n> @JakeWharton <https://github.com/JakeWharton> if you want me too and you\n> haven't started yet I'd continue on that list and rename the other classes\n> / interfaces as well\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4297#issuecomment-238097409>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEdDWaTZ2v56RVC8GOYXdWIbfTi0cks5qdhwlgaJpZM4JeeQO>\n> .\n>\n"
p1436
asg14
S'vanniktech:2.x_single_base_interface_type'
p1437
sbsI4298
(iPull
Pull
p1438
(dp1439
g3
S'Noticed in RxAndroid https://github.com/ReactiveX/RxAndroid/pull/316#discussion_r73783555'
p1440
sg5
S'2.x: clarify behavior of rxjavaplugins.reset() in javadoc'
p1441
sg7
(lp1442
S'Documentation'
p1443
asg10
I4298
sg11
(lp1444
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4298?src=pr) is 69.35% (diff: 100%)\n> Merging [#4298](https://codecov.io/gh/ReactiveX/RxJava/pull/4298?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.13%**\n\n```diff\n@@                2.x      #4298   diff @@\n==========================================\n  Files           420        420          \n  Lines         30765      30765          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21380      21337    -43   \n- Misses         7295       7334    +39   \n- Partials       2090       2094     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4aa80cd...879374d](https://codecov.io/gh/ReactiveX/RxJava/compare/4aa80cd444caaa05e91a12db3f1beda2fe158e12...879374dd3dd46429cc3541b5506c0098bc95e66e?src=pr)'
p1445
asg14
S'artem-zinnatullin:patch-1'
p1446
sbsI4299
(iPull
Pull
p1447
(dp1448
g3
S'Addresses #4044'
p1449
sg5
S'2.x: rename flowable base interface types for consistency'
p1450
sg7
(lp1451
S'Cleanup'
p1452
asg10
I4299
sg11
(lp1453
S'lgtm :+1:'
p1454
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4299?src=pr) is 69.44% (diff: 100%)\n> Merging [#4299](https://codecov.io/gh/ReactiveX/RxJava/pull/4299?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4299   diff @@\n==========================================\n  Files           420        420          \n  Lines         30764      30763     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21375      21363    -12   \n- Misses         7303       7318    +15   \n+ Partials       2086       2082     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ed9a2c4...d5941bb](https://codecov.io/gh/ReactiveX/RxJava/compare/ed9a2c4b9de311929f2d8d5e37c3e078cb85db07...d5941bb6aa887727f4974e0b4fc5254ef3b9d984?src=pr)'
p1455
aS':+1:'
p1456
asg14
S'vanniktech:2.x_flowable_base_interface_type'
p1457
sbsI4300
(iPull
Pull
p1458
(dp1459
g3
S'Addresses #4044.'
p1460
sg5
S'2.x: rename observable base interface types for consistency'
p1461
sg7
(lp1462
S'Cleanup'
p1463
asg10
I4300
sg11
(lp1464
S'There are a large amount of compilation errors.'
p1465
aS'Rebased against 2.x and re-did the last changes.'
p1466
aS'looks good this time :+1:'
p1467
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4300?src=pr) is 69.42% (diff: 98.00%)\n> Merging [#4300](https://codecov.io/gh/ReactiveX/RxJava/pull/4300?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4300   diff @@\n==========================================\n  Files           420        420          \n  Lines         30762      30761     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21358      21357     -1   \n- Misses         7319       7322     +3   \n+ Partials       2085       2082     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e81d399...59f3a25](https://codecov.io/gh/ReactiveX/RxJava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f...59f3a259b1d7340db085c1fd11ad6a7a39285f2c?src=pr)'
p1468
aS':+1:'
p1469
asg14
S'vanniktech:2.x_observable_base_interface_type'
p1470
sbsI4301
(iPull
Pull
p1471
(dp1472
g3
S'To unblock #4300 '
p1473
sg5
S'2.x: rename observablesource to observablewithupstream'
p1474
sg7
(lp1475
S'Cleanup'
p1476
asg10
I4301
sg11
(lp1477
S'lgtm :+1:'
p1478
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4301?src=pr) is 69.40% (diff: 100%)\n> Merging [#4301](https://codecov.io/gh/ReactiveX/RxJava/pull/4301?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4301   diff @@\n==========================================\n  Files           420        420          \n  Lines         30763      30763          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21349      21350     +1   \n- Misses         7326       7327     +1   \n+ Partials       2088       2086     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2037399...ce8d871](https://codecov.io/gh/ReactiveX/RxJava/compare/20373999c6ef718878e40769b27bb787f70c5938...ce8d871d1b2728e6864d3289f9588c16bdfbe498?src=pr)'
p1479
asg14
S'vanniktech:2.x_rename_ObservableSource'
p1480
sbsI4302
(iPull
Pull
p1481
(dp1482
g3
S'Addresses #4044 '
p1483
sg5
S'2.x: rename completable base interface types for consistency'
p1484
sg7
(lp1485
S'Cleanup'
p1486
asg10
I4302
sg11
(lp1487
S':+1:'
p1488
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4302?src=pr) is 69.37% (diff: 93.75%)\n> Merging [#4302](https://codecov.io/gh/ReactiveX/RxJava/pull/4302?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4302   diff @@\n==========================================\n  Files           420        420          \n  Lines         30763      30762     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21349      21341     -8   \n- Misses         7326       7330     +4   \n- Partials       2088       2091     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2037399...5521f99](https://codecov.io/gh/ReactiveX/RxJava/compare/20373999c6ef718878e40769b27bb787f70c5938...5521f996085a6c73b7aa6d5d5e48e73624ed253c?src=pr)'
p1489
aS':+1:'
p1490
asg14
S'vanniktech:2.x_completable_base_interface_type'
p1491
sbsI4303
(iPull
Pull
p1492
(dp1493
g3
g57
sg5
S'2.x: move single and completable observers to correct package.'
p1494
sg7
(lp1495
S'Cleanup'
p1496
asg10
I4303
sg11
(lp1497
S'\xf0\x9f\x91\x8d '
p1498
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4303?src=pr) is 69.44% (diff: 100%)\n> Merging [#4303](https://codecov.io/gh/ReactiveX/RxJava/pull/4303?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4303   diff @@\n==========================================\n  Files           420        420          \n  Lines         30762      30762          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21358      21362     +4   \n- Misses         7319       7322     +3   \n+ Partials       2085       2078     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e81d399...93b4a6b](https://codecov.io/gh/ReactiveX/RxJava/compare/e81d399fe3cebd47cc4c4f8e8a3fa671eeac454f...93b4a6bf4ff03cee944fa93c451031496bea7305?src=pr)'
p1499
asg14
S'JakeWharton:jw/correct-package'
p1500
sbsI4304
(iPull
Pull
p1501
(dp1502
g3
S'Now every file has a license header.'
p1503
sg5
S'2.x: add missing license headers'
p1504
sg7
(lp1505
S'Cleanup'
p1506
asg10
I4304
sg11
(lp1507
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4304?src=pr) is 69.36% (diff: 100%)\n> Merging [#4304](https://codecov.io/gh/ReactiveX/RxJava/pull/4304?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4304   diff @@\n==========================================\n  Files           420        420          \n  Lines         30761      30761          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21372      21338    -34   \n- Misses         7299       7329    +30   \n- Partials       2090       2094     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b575565...d54aa56](https://codecov.io/gh/ReactiveX/RxJava/compare/b575565fdebd48c28ef13e9aad03bf01b4ccd96e...d54aa56c8ccebdf3bee56c9b6bea20c5dd1e7d93?src=pr)'
p1508
aS'\xf0\x9f\x91\x8d '
p1509
asg14
S'vanniktech:2.x_missing_licenses'
p1510
sbsI4305
(iPull
Pull
p1511
(dp1512
g3
g57
sg5
S"2.x: rename source/publisher wrapper class to more semantic 'from' name."
p1513
sg7
(lp1514
S'Cleanup'
p1515
asg10
I4305
sg11
(lp1516
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4305?src=pr) is 69.41% (diff: 79.16%)\n> Merging [#4305](https://codecov.io/gh/ReactiveX/RxJava/pull/4305?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4305   diff @@\n==========================================\n  Files           420        420          \n  Lines         30761      30761          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21372      21353    -19   \n- Misses         7299       7319    +20   \n+ Partials       2090       2089     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b575565...9e42e92](https://codecov.io/gh/ReactiveX/RxJava/compare/b575565fdebd48c28ef13e9aad03bf01b4ccd96e...9e42e92596fb19865a8e3b47084622a67e34a8e4?src=pr)'
p1517
aS':+1:'
p1518
asg14
S'JakeWharton:jw/from-source'
p1519
sbsI4307
(iPull
Pull
p1520
(dp1521
g3
g57
sg5
S'2.x: promote lift implementations to top-level types.'
p1522
sg7
(lp1523
S'Cleanup'
p1524
asg10
I4307
sg11
(lp1525
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4307?src=pr) is 69.53% (diff: 100%)\n> Merging [#4307](https://codecov.io/gh/ReactiveX/RxJava/pull/4307?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4307   diff @@\n==========================================\n  Files           420        424     +4   \n  Lines         30761      30778    +17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n+ Hits          21378      21403    +25   \n+ Misses         7296       7289     -7   \n+ Partials       2087       2086     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...226e178](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...226e178e5a9249bd04b01cf4decdcf4438286c35?src=pr)'
p1526
asg14
S'JakeWharton:jw/lift-to-top-level'
p1527
sbsI4308
(iPull
Pull
p1528
(dp1529
g3
g57
sg5
S'2.x: promote observable to single/flowable adapters to top-level types.'
p1530
sg7
(lp1531
S'Cleanup'
p1532
asg10
I4308
sg11
(lp1533
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4308?src=pr) is 69.40% (diff: 0.00%)\n> Merging [#4308](https://codecov.io/gh/ReactiveX/RxJava/pull/4308?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4308   diff @@\n==========================================\n  Files           420        422     +2   \n  Lines         30761      30771    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4937          \n==========================================\n- Hits          21378      21358    -20   \n- Misses         7296       7328    +32   \n+ Partials       2087       2085     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9315ec4...565099c](https://codecov.io/gh/ReactiveX/RxJava/compare/9315ec4176017d6ee44f38ec9947c337eff4f4bf...565099c20ee0471bd8b25057d975cbc935bc6463?src=pr)'
p1534
asg14
S'JakeWharton:jw/more-top-level-types'
p1535
sbsI4309
(iPull
Pull
p1536
(dp1537
g3
S'As wanted in #4306 '
p1538
sg5
S'2.x: remove unused exceptions in public api'
p1539
sg7
(lp1540
S'Cleanup'
p1541
asg10
I4309
sg11
(lp1542
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4309?src=pr) is 69.45% (diff: 0.00%)\n> Merging [#4309](https://codecov.io/gh/ReactiveX/RxJava/pull/4309?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                2.x      #4309   diff @@\n==========================================\n  Files           426        422     -4   \n  Lines         30788      30768    -20   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4927    -10   \n==========================================\n+ Hits          21365      21371     +6   \n+ Misses         7335       7324    -11   \n+ Partials       2088       2073    -15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fe2445d...71f28a0](https://codecov.io/gh/ReactiveX/RxJava/compare/fe2445d0009f000cb9173cd97a74c0455fed1fc1...71f28a0cec1ddf7e32b8493d6801c759c51d4208?src=pr)'
p1543
aS'/cc @JakeWharton '
p1544
aS':+1: if the test changes are acceptable for your setup'
p1545
aS':+1:'
p1546
asg14
S'vanniktech:2.x_cleanup_exceptions'
p1547
sbsI4310
(iPull
Pull
p1548
(dp1549
g3
S'This PR fixes the case when a call to request() prevented cancellation of the arbiter if the call never returned, thus locking out the drain loop from the cancellation call.\r\n\r\nThe PR makes sure `request()` is only called outside the guarded region.\r\n\r\n1.x is not affected because unsubscription and requesting go on separate "channels".\r\n\r\nThe PR also fixes `FlowableRedo` by serializing the repeat signal `Processor`.'
p1550
sg5
S'2.x: fix subscriptionarbiter reentrancy/cancel bug'
p1551
sg7
(lp1552
S'Bug'
p1553
asg10
I4310
sg11
(lp1554
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4310?src=pr) is 69.38% (diff: 94.73%)\n> Merging [#4310](https://codecov.io/gh/ReactiveX/RxJava/pull/4310?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4310   diff @@\n==========================================\n  Files           426        426          \n  Lines         30788      30792     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4937       4938     +1   \n==========================================\n+ Hits          21365      21366     +1   \n- Misses         7335       7338     +3   \n  Partials       2088       2088          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fe2445d...6422b01](https://codecov.io/gh/ReactiveX/RxJava/compare/fe2445d0009f000cb9173cd97a74c0455fed1fc1...6422b01c6f2b75893301a10691c879e596934361?src=pr)'
p1555
aS':+1:'
p1556
asg14
S'akarnokd:SubscriptionArbiterFix'
p1557
sbsI4311
(iPull
Pull
p1558
(dp1559
g3
S'The `ExecutorScheduler` wrapper did not call the `RxJavaHooks.onScheduledAction()` to decorate actions sent to a custom scheduler.'
p1560
sg5
S'1.x: schedulers.from() to call rxjavahooks.onscheduleaction'
p1561
sg7
(lp1562
S'Bug'
p1563
asg10
I4311
sg11
(lp1564
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4311?src=pr) is 84.43% (diff: 100%)\n> Merging [#4311](https://codecov.io/gh/ReactiveX/RxJava/pull/4311?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                1.x      #4311   diff @@\n==========================================\n  Files           268        268          \n  Lines         17476      17478     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n- Hits          14766      14757     -9   \n- Misses         1851       1863    +12   \n+ Partials        859        858     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [27c782d...970a609](https://codecov.io/gh/ReactiveX/RxJava/compare/27c782dc4536ca318ffe0b698df6e5479e8ae4e9...970a6092c39010fab65c09004c379ec8db0df10a?src=pr)'
p1565
aS':+1:'
p1566
asg14
S'akarnokd:CustomSchedulerHookFix'
p1567
sbsI4313
(iPull
Pull
p1568
(dp1569
g3
g57
sg5
S'2.x: update observable wrapper to correct name to fix compilation.'
p1570
sg7
(lp1571
sg10
I4313
sg11
(lp1572
S'Thanks, already hotfixed in https://github.com/ReactiveX/RxJava/commit/bf1cfcb5fee96c0c2c342a298a540ee59eb1233f'
p1573
aS'Perfect. Thanks!'
p1574
asg14
S'JakeWharton:jw/fix-build'
p1575
sbsI4314
(iPull
Pull
p1576
(dp1577
g3
g57
sg5
S'2.x: rename flowablesource to flowablewithupstream to match observablewithupstream.'
p1578
sg7
(lp1579
S'Cleanup'
p1580
asg10
I4314
sg11
(lp1581
S'\xf0\x9f\x91\x8d '
p1582
aS':+1:'
p1583
asg14
S'JakeWharton:jw/with-upstream'
p1584
sbsI4315
(iPull
Pull
p1585
(dp1586
g3
g57
sg5
S'2.x: use arraylistsupplier in more places, add hashmapsupplier.'
p1587
sg7
(lp1588
S'Enhancement'
p1589
asg10
I4315
sg11
(lp1590
sg14
S'JakeWharton:jw/collection-suppliers'
p1591
sbsI4316
(iPull
Pull
p1592
(dp1593
g3
g57
sg5
S'2.x: normalize empty and never sources.'
p1594
sg7
(lp1595
S'Cleanup'
p1596
asg10
I4316
sg11
(lp1597
S'\xf0\x9f\x91\x8d '
p1598
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4316?src=pr) is 69.37% (diff: 75.00%)\n> Merging [#4316](https://codecov.io/gh/ReactiveX/RxJava/pull/4316?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4316   diff @@\n==========================================\n  Files           427        428     +1   \n  Lines         30777      30784     +7   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21364      21357     -7   \n- Misses         7334       7348    +14   \n  Partials       2079       2079          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0e0edb5...ab99ab1](https://codecov.io/gh/ReactiveX/RxJava/compare/0e0edb57287fbe7adeb1617fd1f713fed5dbeb53...ab99ab1a1153a7113a969499c7203abf0413cac0?src=pr)'
p1599
asg14
S'JakeWharton:jw/normalize-empty-and-never'
p1600
sbsI4317
(iPull
Pull
p1601
(dp1602
g3
S'This is a proposal to solve #4255 but for 2.x and closes #4286 built around one goal: make the `create` methods actually usable by developers!\r\n\r\nCurrently the advice given to most developers using 1.x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation, and even then avoid it if possible. This method is a trap that most new developers fall into. _The method is named "create", after all, so it must be how I create these things!_ I want to make that statement not only correct, but advisable (at least when the still-convenient "from" methods are not suitable, such as when wrapping callback-based APIs).\r\n\r\nBecause `Observable`, `Single`, and `Completable` are backpressure-free, this amounts to just suppressing downstream notifications when disposed. This doesn\'t seem too controversial.\r\n\r\nThe most controversial part is that I have renamed `Flowable.fromAsync` to `Flowable.create` thus making it the canonical way for users to create `Flowable`s directly. I\'m much less opinionated on this change, but it felt wrong to have an `Flowable.unsafeCreate` with no associated `create` and `fromAsync` is the "safest" version we have.'
p1603
sg5
S'2.x: rename create to unsafecreate, add "safe" create methods.'
p1604
sg7
(lp1605
S'Cleanup'
p1606
aS'Enhancement'
p1607
asg10
I4317
sg11
(lp1608
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4317?src=pr) is 69.31% (diff: 32.38%)\n> Merging [#4317](https://codecov.io/gh/ReactiveX/RxJava/pull/4317?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.18%**\n\n```diff\n@@                2.x      #4317   diff @@\n==========================================\n  Files           428        431     +3   \n  Lines         30784      30866    +82   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4940    +11   \n==========================================\n  Hits          21395      21395          \n- Misses         7315       7394    +79   \n- Partials       2074       2077     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...1c051b8](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...1c051b8c330e8368a6240ff3985237cc1960ad37?src=pr)'
p1609
aS'I think it\'s also important to point out I replaced `Consumer<AsynEmitter<T>>` with `FlowableSource<T>` for parity with other "safe" `create` method parameter types. The unsafe variant still takes a raw `Publisher<T>`, however.'
p1610
aS':heart::heart::heart:'
p1611
aS':+1:'
p1612
asg14
S'JakeWharton:jw/safe-create-methods'
p1613
sbsI4318
(iPull
Pull
p1614
(dp1615
g3
g57
sg5
S'2.x: switch (almost) all chain operators to flowablewithupstream.'
p1616
sg7
(lp1617
S'Cleanup'
p1618
asg10
I4318
sg11
(lp1619
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4318?src=pr) is 69.42% (diff: 100%)\n> Merging [#4318](https://codecov.io/gh/ReactiveX/RxJava/pull/4318?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4318   diff @@\n==========================================\n  Files           428        428          \n  Lines         30784      30718    -66   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21395      21325    -70   \n- Misses         7315       7326    +11   \n+ Partials       2074       2067     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...fa51182](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...fa51182b3a3e73d2ed2a78309822e2490adfb0c6?src=pr)'
p1620
asg14
S'JakeWharton:jw/flowable-with-upstream'
p1621
sbsI4319
(iPull
Pull
p1622
(dp1623
g3
g57
sg5
S'2.x: switch (almost) all remaining chain operators to observablewithupstream.'
p1624
sg7
(lp1625
S'Cleanup'
p1626
asg10
I4319
sg11
(lp1627
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4319?src=pr) is 69.48% (diff: 90.47%)\n> Merging [#4319](https://codecov.io/gh/ReactiveX/RxJava/pull/4319?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4319   diff @@\n==========================================\n  Files           428        428          \n  Lines         30784      30769    -15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4929       4929          \n==========================================\n- Hits          21395      21379    -16   \n- Misses         7315       7327    +12   \n+ Partials       2074       2063    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f869436...8f11890](https://codecov.io/gh/ReactiveX/RxJava/compare/f8694361a7bbd9f40194024ee8d611d598c913b1...8f1189056f8d568202e76ca9f484968c271c04ff?src=pr)'
p1628
asg14
S'JakeWharton:jw/observable-with-upstream'
p1629
sbsI4322
(iPull
Pull
p1630
(dp1631
g3
S'This PR adds an ~~`assertAndConsume`~~ `assertValuesAndClear` method to `TestSubscriber` to assert on value content and then clear the internal value list. This helps asserting on received values without the need to list all previously seen values in `assertValues`. \r\n\r\nOn a sidenote, `getOnNextEvents()` returns the internal list and one can call `clear()` on it.'
p1632
sg5
S'1.x: add testsubscriber.assertvaluesandclear'
p1633
sg7
(lp1634
S'Enhancement'
p1635
aS'Test'
p1636
asg10
I4322
sg11
(lp1637
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4322?src=pr) is 84.31% (diff: 80.00%)\n> Merging [#4322](https://codecov.io/gh/ReactiveX/RxJava/pull/4322?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.15%**\n\n```diff\n@@                1.x      #4322   diff @@\n==========================================\n  Files           268        270     +2   \n  Lines         17478      17517    +39   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2678    +14   \n==========================================\n+ Hits          14764      14770     +6   \n- Misses         1853       1892    +39   \n+ Partials        861        855     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...7fc11a3](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...7fc11a392949a8c0d7a61860e762e987c19e8462?src=pr)'
p1638
aS"\xf0\x9f\x91\x8d but method name, I just can't treat it as good for this API"
p1639
aS':+1:'
p1640
aS'@JakeWharton / @zsxwing / @vanniktech can you PTAL? Would be great if we could include it in 1.1.9.'
p1641
aS'Old method name was better'
p1642
asg14
S'akarnokd:TestAssertConsume'
p1643
sbsI4323
(iPull
Pull
p1644
(dp1645
g3
g57
sg5
S'2.x: no scheduler change happens for timeinterval() and timestamp().'
p1646
sg7
(lp1647
S'Cleanup'
p1648
asg10
I4323
sg11
(lp1649
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4323?src=pr) is 69% (diff: 100%)\n> Merging [#4323](https://codecov.io/gh/ReactiveX/RxJava/pull/4323?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<1%**\n\n```diff\n@@                2.x      #4323   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n+ Hits          21295      21300     +5   \n- Misses         7410       7411     +1   \n+ Partials       2080       2074     -6   \n```\n\n\n![Sunburst](https://codecov.io/gh/ReactiveX/RxJava/pull/4323/graphs/sunburst.svg?size=150&src=pr)\n\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3a3d4df...c3d1c23](https://codecov.io/gh/ReactiveX/RxJava/compare/3a3d4df907f8e54d628b827a65f4869df3329e98...c3d1c23ab3317f23fc7ed7a209d71ee2d40c441b?src=pr)'
p1650
asg14
S'JakeWharton:jw/scheduler-none'
p1651
sbsI4324
(iPull
Pull
p1652
(dp1653
g3
S'Also rename Publisher->Completable factory method and operator implementation to match other stream types.'
p1654
sg5
S'2.x: skip static factories when converting between stream types.'
p1655
sg7
(lp1656
S'Cleanup'
p1657
asg10
I4324
sg11
(lp1658
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4324?src=pr) is 69.17% (diff: 87.50%)\n> Merging [#4324](https://codecov.io/gh/ReactiveX/RxJava/pull/4324?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4324   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21305      21294    -11   \n- Misses         7400       7419    +19   \n+ Partials       2080       2072     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7518541...d0759f7](https://codecov.io/gh/ReactiveX/RxJava/compare/7518541a3dc68347a9bff146fefeab951c6669ae...d0759f7c2772db55a0dd581549936ae19b69922a?src=pr)'
p1659
asg14
S'JakeWharton:jw/skip-static-factories'
p1660
sbsI4325
(iPull
Pull
p1661
(dp1662
g3
g57
sg5
S'2.x: switch the connected stream types to track their upstream.'
p1663
sg7
(lp1664
S'Cleanup'
p1665
asg10
I4325
sg11
(lp1666
S'Also there is a compilation error with this.'
p1667
aS"Oops yeah I forgot to push the latest. But I'll fix the hierarchy in a bit.\n\nOn Tue, Aug 9, 2016 at 11:43 AM David Karnok <notifications@github.com>\nwrote:\n\n> Also there is a compilation error with this.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4325#issuecomment-238595139>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEXWgmEv5aCqkMvCaTo89KnngUYUlks5qeKAcgaJpZM4JgI9R>\n> .\n>\n"
p1668
asg14
S'JakeWharton:jw/connectable-with-upstream'
p1669
sbsI4326
(iPull
Pull
p1670
(dp1671
g3
S'This allows use with types that do not extend directly from their base stream types.'
p1672
sg5
S"2.x: extract 'withupstream' interfaces."
p1673
sg7
(lp1674
S'Cleanup'
p1675
asg10
I4326
sg11
(lp1676
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4326?src=pr) is 69.12% (diff: 75.00%)\n> Merging [#4326](https://codecov.io/gh/ReactiveX/RxJava/pull/4326?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4326   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30785          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21283      21281     -2   \n+ Misses         7425       7424     -1   \n- Partials       2077       2080     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [344453f...7945189](https://codecov.io/gh/ReactiveX/RxJava/compare/344453fe06842ff1c91b0a981c50056ce5531d18...7945189c94cfda13bbae733299424d4d5c46aa3f?src=pr)'
p1677
asg14
S'JakeWharton:jw/extract-with-upstream-interfaces'
p1678
sbsI4328
(iPull
Pull
p1679
(dp1680
g3
S"This PR reduces the allocation in `MultipleAssignmentSubscription` and `SerialSubscription` by introducing a shared, compact underlying container `SequentialSubscription`.\r\n\r\nI've updated `Worker.schedulePeriodically` to use it directly.\r\n\r\nIn addition, there is a behavior change with `MultipleAssignmentSubscription`: it no longer retains the last `Subscription` as it was likely to cause retention problems (and otherwise didn't make sense to me).\r\n\r\nThe `SequentialSubscription` feature weak versions of the mutation methods that don't retry if there was a concurrent mutation: for some operations, not winning such races is fine.\r\n\r\n/cc @JakeWharton @davidmoten @artem-zinnatullin "
p1681
sg5
S'1.x: compact multipleassignment- and serial-subscriptions'
p1682
sg7
(lp1683
S'Performance: allocation'
p1684
asg10
I4328
sg11
(lp1685
S':+1:'
p1686
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4328?src=pr) is 84.38% (diff: 56.57%)\n> Merging [#4328](https://codecov.io/gh/ReactiveX/RxJava/pull/4328?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4328   diff @@\n==========================================\n  Files           268        270     +2   \n  Lines         17478      17500    +22   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2677    +13   \n==========================================\n+ Hits          14764      14768     +4   \n- Misses         1853       1876    +23   \n+ Partials        861        856     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...cccf0ad](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...cccf0ad1d3b0cbe672afaf8715c8b4c1e40c38ae?src=pr)'
p1687
aS'\xf0\x9f\x91\x8d '
p1688
asg14
S'akarnokd:SubscriptionLowAlloc'
p1689
sbsI4330
(iPull
Pull
p1690
(dp1691
g3
S'See #4329 \r\n\r\nI also adjusted the test as it was testing the wrong thing before.'
p1692
sg5
S'added observable.concat(iterable)'
p1693
sg7
(lp1694
S'Enhancement'
p1695
asg10
I4330
sg11
(lp1696
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4330?src=pr) is 84.51% (diff: 100%)\n> Merging [#4330](https://codecov.io/gh/ReactiveX/RxJava/pull/4330?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                1.x      #4330   diff @@\n==========================================\n  Files           268        268          \n  Lines         17478      17479     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2664       2664          \n==========================================\n+ Hits          14764      14773     +9   \n+ Misses         1853       1847     -6   \n+ Partials        861        859     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b3a0446...404f4fd](https://codecov.io/gh/ReactiveX/RxJava/compare/b3a044675c4d63278287a83576a6b6a0eb8be1ee...404f4fd1dde17186d8c65b36ef9ec0c411fef56d?src=pr)'
p1697
aS':+1:'
p1698
aS'\xf0\x9f\x91\x8d '
p1699
aS'Thanks!'
p1700
asg14
S'PaulWoitaschek:1.x'
p1701
sbsI4333
(iPull
Pull
p1702
(dp1703
g3
g57
sg5
S"2.x: add 'withupstream' interfaces to connectable implementations."
p1704
sg7
(lp1705
S'Enhancement'
p1706
asg10
I4333
sg11
(lp1707
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4333?src=pr) is 69.15% (diff: 0.00%)\n> Merging [#4333](https://codecov.io/gh/ReactiveX/RxJava/pull/4333?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4333   diff @@\n==========================================\n  Files           431        431          \n  Lines         30785      30789     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n- Hits          21309      21291    -18   \n- Misses         7397       7428    +31   \n+ Partials       2079       2070     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d37f29e...890c9f6](https://codecov.io/gh/ReactiveX/RxJava/compare/d37f29e420003c8e040669e76f99e1f9c2de4876...890c9f69269a2c65058a06bbc74ac95b1fd2110a?src=pr)'
p1708
asg14
S'JakeWharton:jw/connectable-with-upstream'
p1709
sbsI4337
(iPull
Pull
p1710
(dp1711
g3
S'Move `DisposableObserver` to `io.reactivex.observers` + some documentation.\r\n\r\nRelated: #4082.'
p1712
sg5
S'2.x: move disposableobserver to public area, add some javadocs'
p1713
sg7
(lp1714
S'Cleanup'
p1715
asg10
I4337
sg11
(lp1716
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4337?src=pr) is 69.16% (diff: 100%)\n> Merging [#4337](https://codecov.io/gh/ReactiveX/RxJava/pull/4337?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4337   diff @@\n==========================================\n  Files           431        431          \n  Lines         30789      30789          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4940          \n==========================================\n+ Hits          21283      21295    +12   \n+ Misses         7428       7409    -19   \n- Partials       2078       2085     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [125cf73...30b1b4a](https://codecov.io/gh/ReactiveX/RxJava/compare/125cf735be19e6410f95474ec18886d78385e3a5...30b1b4ae08e1949cc2e9a761e51f7145b4fbbe29?src=pr)'
p1717
aS":+1:\r\n\r\nHaving these in the public API make it seem like `AsyncObserver` becomes obsolete in the case where it's not managing any additional resources. Should we rename it to `ResourceObserver` (or something) and have it always manage resources?"
p1718
aS'Sure, will you do it?'
p1719
aS'Yep!'
p1720
asg14
S'akarnokd:DisposableObserverMove'
p1721
sbsI4338
(iPull
Pull
p1722
(dp1723
g3
S"Rename them to have a 'Resource' prefix."
p1724
sg5
S'2.x: remove conditional resource management from async listeners.'
p1725
sg7
(lp1726
S'Cleanup'
p1727
asg10
I4338
sg11
(lp1728
S"The value of and distinction between the 'Resource' listeners, 'Default' listeners, and 'Disposable' listeners seems very low. Do we need all these individual types?"
p1729
aS"I believe the minimum we require is the ability to dispose a `Subscriber` because that's expected the most. I don't think associating resources with or allowing async requesting is that common."
p1730
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4338?src=pr) is 69.17% (diff: 30.00%)\n> Merging [#4338](https://codecov.io/gh/ReactiveX/RxJava/pull/4338?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4338   diff @@\n==========================================\n  Files           431        431          \n  Lines         30789      30775    -14   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4940       4934     -6   \n==========================================\n- Hits          21291      21290     -1   \n+ Misses         7422       7403    -19   \n- Partials       2076       2082     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2c3ec38...054d24a](https://codecov.io/gh/ReactiveX/RxJava/compare/2c3ec3802ef27e1cb2b66c87f51a1aab427b2bba...054d24a34bcf2e444a91d71eaf9765a56487b236?src=pr)'
p1731
aS'I leave it to you to remove the unnecessary; we can add them back later or better yet, they can live in a separate library.'
p1732
aS"Yeah. I need to write something non-trivial with 2.x first. Maybe I'll try\nthis weekend. I definitely think we should be aggressive in minimizing API\nsurface since it's easy to add but impossible to take away after release.\n\nOn Wed, Aug 10, 2016 at 4:23 PM David Karnok <notifications@github.com>\nwrote:\n\n> I leave it to you to remove the unnecessary; we can add them back later or\n> better yet, they can live in a separate library.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4338#issuecomment-238992141>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEUpTPp3Yj1XaXOI3TaKsUnuIFNUZks5qejNJgaJpZM4Jhhe4>\n> .\n>\n"
p1733
aS'I have a 2.x "dumping ground" for leftovers: https://github.com/akarnokd/RxJava2Extensions so we don\'t lose things.'
p1734
asg14
S'JakeWharton:jw/async-to-resource'
p1735
sbsI4342
(iPull
Pull
p1736
(dp1737
g3
S"This PR adds the Javadoc to the `Flowable` plus removes some deprecated or unnecessary operator overloads.\r\n\r\nBy the sheer amount of documentation, `Flowable` can't be reviewed on GitHub. Once the CI passes, I'll merge it and people who wish to review it can immediately start a PR to fix any documentation mistakes."
p1738
sg5
S'2.x: sync javadoc of flowable'
p1739
sg7
(lp1740
S'Cleanup'
p1741
aS'Documentation'
p1742
asg10
I4342
sg11
(lp1743
sg14
S'akarnokd:JavadocSync'
p1744
sbsI4343
(iPull
Pull
p1745
(dp1746
g3
S'- Remove tabs indent and redundant space.\r\n  - Currently tabs and spaces are mixed up in the code so just unify them.'
p1747
sg5
S'remove tabs indent and redundant space.'
p1748
sg7
(lp1749
S'Cleanup'
p1750
asg10
I4343
sg11
(lp1751
S'Thanks!'
p1752
asg14
S'hotchemi:tweak_indent'
p1753
sbsI4344
(iPull
Pull
p1754
(dp1755
g3
g57
sg5
S'2.x: fix some typos in flowable + observer documentation'
p1756
sg7
(lp1757
S'Cleanup'
p1758
asg10
I4344
sg11
(lp1759
sg14
S'vanniktech:2.x_typos'
p1760
sbsI4345
(iPull
Pull
p1761
(dp1762
g3
S'Update CHANGES.md with the release log.'
p1763
sg5
S'release 1.1.9 update changes.md'
p1764
sg7
(lp1765
S'Information'
p1766
asg10
I4345
sg11
(lp1767
S'\xf0\x9f\x91\x8d '
p1768
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4345?src=pr) is 84.36% (diff: 100%)\n> Merging [#4345](https://codecov.io/gh/ReactiveX/RxJava/pull/4345?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4345   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17517          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2678          \n==========================================\n- Hits          14786      14779     -7   \n- Misses         1876       1884     +8   \n+ Partials        855        854     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3c7f41c...64d94f5](https://codecov.io/gh/ReactiveX/RxJava/compare/3c7f41cd20d36b2e2e32141eaddbc1628d4667db...64d94f54458b3575dc366d0797ba1485af37c1b4?src=pr)'
p1769
asg14
S'akarnokd:Release119Changes'
p1770
sbsI4346
(iPull
Pull
p1771
(dp1772
g3
S"This PR adds Javadoc to `Observable` by mainly copying and adjusting `Flowable`'s documentation.\r\n\r\nIn addition, the method set was synced as well and placeholders added for unported 1.x operators.\r\n\r\nThe drill is the same as before: after CI, I merge this and reviewers can post PRs with necessary fixes."
p1773
sg5
S"2.x: sync javadoc of observable (copy&adjust flowable's)"
p1774
sg7
(lp1775
S'Cleanup'
p1776
aS'Documentation'
p1777
asg10
I4346
sg11
(lp1778
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4346?src=pr) is 68.97% (diff: 100%)\n> Merging [#4346](https://codecov.io/gh/ReactiveX/RxJava/pull/4346?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4346   diff @@\n==========================================\n  Files           432        432          \n  Lines         30780      30809    +29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4934       4935     +1   \n==========================================\n- Hits          21254      21251     -3   \n- Misses         7445       7489    +44   \n+ Partials       2081       2069    -12   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [44720f9...ded9cfd](https://codecov.io/gh/ReactiveX/RxJava/compare/44720f92278e1bab75cbebe1b5c191f9255c7a91...ded9cfd429707bcbe18878bf9f0d82d8969bf7e3?src=pr)'
p1779
asg14
S'akarnokd:JavadocSyncObservable'
p1780
sbsI4349
(iPull
Pull
p1781
(dp1782
g3
g57
sg5
S'2.x: observable + flowable fix some typos'
p1783
sg7
(lp1784
S'Cleanup'
p1785
asg10
I4349
sg11
(lp1786
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4349?src=pr) is 68.93% (diff: 100%)\n> Merging [#4349](https://codecov.io/gh/ReactiveX/RxJava/pull/4349?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4349   diff @@\n==========================================\n  Files           432        432          \n  Lines         30809      30809          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4935          \n==========================================\n+ Hits          21232      21237     +5   \n  Misses         7508       7508          \n+ Partials       2069       2064     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [991ae34...abc9dd4](https://codecov.io/gh/ReactiveX/RxJava/compare/991ae3486ba9509f114a7645429126ef1322634a...abc9dd4b87d6f8daa5e7f1ac8a5ec951b49e6420?src=pr)'
p1787
asg14
S'vanniktech:2.x_typos'
p1788
sbsI4351
(iPull
Pull
p1789
(dp1790
g3
S'When do JUnit testing with RxRingBuffer, we may have Android platform\r\nclasses defined, but contains no Android environment.\r\n\r\nSo when we call PlatformDependent.resolveAndroidApiVersion in JUnit\r\ntesting, an UnsatisfiedLinkError will throw when calling\r\nSystemProperties.native_get(String, String).\r\n\r\nThe UnsatisfiedLinkError is not an Exception, so the test failed because\r\nof an uncatched exception.\r\n\r\nFix this by catch the Throwable instead of Exception to catch Error.'
p1791
sg5
S'use throwable to catch error when get android version'
p1792
sg7
(lp1793
S'Android'
p1794
asg10
I4351
sg11
(lp1795
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4351?src=pr) is 84.40% (diff: 100%)\n> Merging [#4351](https://codecov.io/gh/ReactiveX/RxJava/pull/4351?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                1.x      #4351   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17517          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2678          \n==========================================\n+ Hits          14767      14786    +19   \n+ Misses         1895       1876    -19   \n  Partials        855        855          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [72c0519...cd8b26b](https://codecov.io/gh/ReactiveX/RxJava/compare/72c051974e68dd08cb93019feacc777ebd98373c...cd8b26b6132cb7b53fdd07407b855138d5cfe3ba?src=pr)'
p1796
aS"Hm, that's strange. What is your testing configuration? I haven't seen such problem with and without Robolectric."
p1797
aS"Finally I found out the root cause of my issue.\r\nI'm using RxJava on our System App, which have using some hidden API in framework. So we 'provided' a dependency for the framework jar file to let build pass.\r\n\r\nBut this breaks the mock of Android Studio when doing JUnit test. Android Studio no longer mock the Build.VERSION.SDK_INT, and calling the real method which will drive to a native method. So the UnsatisfiedLinkError has been throw.\r\n\r\nSorry for the mistake. :)"
p1798
asg14
S'tankery:catch-throwable-get-android-version'
p1799
sbsI4352
(iPull
Pull
p1800
(dp1801
g3
S'This PR adds javadoc to the `Single` methods, fixes a few API differences.'
p1802
sg5
S'2.x: sync single javadoc with 1.x'
p1803
sg7
(lp1804
S'Cleanup'
p1805
aS'Documentation'
p1806
asg10
I4352
sg11
(lp1807
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4352?src=pr) is 68.94% (diff: 100%)\n> Merging [#4352](https://codecov.io/gh/ReactiveX/RxJava/pull/4352?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4352   diff @@\n==========================================\n  Files           432        432          \n  Lines         30809      30819    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4935       4936     +1   \n==========================================\n+ Hits          21210      21249    +39   \n+ Misses         7522       7495    -27   \n+ Partials       2077       2075     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [18cef96...ebcd84f](https://codecov.io/gh/ReactiveX/RxJava/compare/18cef96091b60942e2a9dc85aef3eb97bf70f309...ebcd84fae97c9b1ad927d803f20673232c9f898f?src=pr)'
p1808
asg14
S'akarnokd:SingleJavadocSync'
p1809
sbsI4353
(iPull
Pull
p1810
(dp1811
g3
g57
sg5
S'2.x: accept subclasses of throwable for asserting failure.'
p1812
sg7
(lp1813
S'Cleanup'
p1814
asg10
I4353
sg11
(lp1815
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4353?src=pr) is 68.99% (diff: 100%)\n> Merging [#4353](https://codecov.io/gh/ReactiveX/RxJava/pull/4353?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4353   diff @@\n==========================================\n  Files           432        432          \n  Lines         30819      30819          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4936          \n==========================================\n+ Hits          21249      21265    +16   \n+ Misses         7498       7486    -12   \n+ Partials       2072       2068     -4   \n```\n\n\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [040345f...5211590](https://codecov.io/gh/ReactiveX/RxJava/compare/040345f604b67d85b76e9540aa601648d048d2d4...5211590f2df09959a68596ae362c3ef9855d70d5?src=pr)'
p1816
asg14
S'JakeWharton:jw/extends'
p1817
sbsI4354
(iPull
Pull
p1818
(dp1819
g3
g57
sg5
S'2.x: expose values and errors as unmodifiable snapshots not shared mutable lists.'
p1820
sg7
(lp1821
sg10
I4354
sg11
(lp1822
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4354?src=pr) is 68.94% (diff: 100%)\n> Merging [#4354](https://codecov.io/gh/ReactiveX/RxJava/pull/4354?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4354   diff @@\n==========================================\n  Files           432        432          \n  Lines         30819      30819          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4936          \n==========================================\n- Hits          21249      21247     -2   \n- Misses         7498       7502     +4   \n+ Partials       2072       2070     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [040345f...5695b6b](https://codecov.io/gh/ReactiveX/RxJava/compare/040345f604b67d85b76e9540aa601648d048d2d4...5695b6beb5672651bf7e41df9f44c618f138d74e?src=pr)'
p1823
aS'Why?'
p1824
aS"Expose a list which is not only mutable but whose contents may change while you're iterating and/or asserting its contents seems like a recipe for flaky tests."
p1825
aS'If you assert without first making sure the source terminated is also likely to cause test failures. There is the `getValueCount` in 1.x which gives a volatile view of the available number of onNext values that can be safely read from `values()`.'
p1826
aS"I don't see any reason that one has to wait until a terminal event. A lot\nof my tests do not, especially in libraries where behavior around requests\nis important.\n\nExposing a shared, mutable list is rarely a good idea. Since we expect no\none to be mutating these lists and we expect the values to not be changing\nunderneath them, this change has no functional impact. It merely enforces\nthat these invariants are always held true.\n\nOn Tue, Aug 16, 2016 at 8:24 AM David Karnok <notifications@github.com>\nwrote:\n\n> If you assert without first making sure the source terminated is also\n> likely to cause test failures. There is the getValueCount in 1.x which\n> gives a volatile view of the available number of onNext values that can be\n> safely read from values().\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240086175>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEZm6P4bhXg_BU6ahFiYPpZ0PUGf4ks5qgavigaJpZM4JlBa7>\n> .\n>\n"
p1827
aS'I see that you do a snapshot but then why prevent any change to it? Besides, I have tests that have thousands elements which are then [checked for a particular pattern](https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java#L473) by iterating over the shared list (or just sloppily do a [size() on it](https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java#L946)).'
p1828
aS"I had accidentally mutated this shared list in one of my tests because of\nsimilar variable names which is what led me to expose it as unmodifiable. I\nwas surprised that it wasn't already an unmodifiable snapshot, but the\nactual live mutable list. Even with the snapshot, modifying the list of\nvalues seems like an indicator that you are testing poorly (or flat out\nincorrectly).\n\nOn Tue, Aug 16, 2016 at 8:56 AM David Karnok <notifications@github.com>\nwrote:\n\n> I see that you do a snapshot but then why prevent any change to it?\n> Besides, I have tests that have thousands elements which are then checked\n> for a particular pattern\n> <https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableFlatMapTest.java#L473>\n> by iterating over the shared list (or just sloppily do a size() on it\n> <https://github.com/ReactiveX/RxJava/blob/2.x/src/test/java/io/reactivex/internal/operators/flowable/FlowableMergeTest.java#L946>\n> ).\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240092965>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEdau4k7F1NflbnYWv_WJ0hMU7JbOks5qgbNigaJpZM4JlBa7>\n> .\n>\n"
p1829
aS"I'm willing to accept such change if you introduce it as a separate method (or rename-refactor the current `values()` to something else, like `liveValues()` or whatever)."
p1830
aS"What's the use case for exposing the mutable live list? Both of your\npreviously linked examples work fine with the snapshot model.\n\nOn Tue, Aug 16, 2016 at 9:25 AM David Karnok <notifications@github.com>\nwrote:\n\n> I'm willing to accept such change if you introduce it as a separate method\n> (or rename-refactor the current values() to something else, like\n> liveValues() or whatever).\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240100320>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEERq3_MnSqNwr75lzK0ls0vsVzHeNks5qgbpKgaJpZM4JlBa7>\n> .\n>\n"
p1831
aS'Copying may be expensive -> more GC during tests -> more likely CI will be shot down.'
p1832
aS"I'd rather leave it as a mutable landmine than burden callers with two\nmethods.\n\nOn Tue, Aug 16, 2016 at 1:33 PM David Karnok <notifications@github.com>\nwrote:\n\n> Copying may be expensive -> more GC during tests -> more likely CI will be\n> shot down.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240177098>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEb4_g8oTRXfrv854BzZG0j3_JKQmks5qgfRsgaJpZM4JlBa7>\n> .\n>\n"
p1833
aS"\xf0\x9f\x91\x8d to not expose a mutable list in a public API. Accidentally mutating this shared list will cause some weird behavior and it's pretty hard to figure out.\r\n\r\n@JakeWharton why do you need to copy the internal list? Shouldn't `unmodifiableList` is enough? "
p1834
aS"For clarification, I'm not saying that changing them for 1.x. It may break the user's existing tests. But I'm totally \xf0\x9f\x91\x8d for 2.x."
p1835
aS"Unmodifiable prevents you from modifying it, but the list might still\nchange as the result of the observable emitting additional values. The copy\nand wrap ensures the values reflect those at the time of the method call\nand also prevent any future changes.\n\nOn Tue, Aug 16, 2016, 8:03 PM Shixiong Zhu <notifications@github.com> wrote:\n\n> For clarification, I'm not saying that changing them for 1.x. It may break\n> the user's existing tests. But I'm totally \xf0\x9f\x91\x8d for 2.x.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240276463>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEETjQ4u7JEbwBCOJQEkS47wuRdXRiks5qgk_RgaJpZM4JlBa7>\n> .\n>\n"
p1836
aS"@JakeWharton I see. In most case, I think the user just checks the list at once. So I think changing it to an immutable list should cover most of cases and it's still a good idea."
p1837
aS'You can extend `TestSubscriber` locally or have an utility method that does what you need:\r\n\r\n```java\r\npublic static <T> List<T> valuesOf(TestSubscriber<T> ts) {\r\n    return Collections.unmodifiableList(new ArrayList<>(ts.values()));\r\n}\r\n```\r\n\r\nI guess IntelliJ will gladly do a static import of the method above.'
p1838
aS"The point is to have the sane behavior as the default so that everyone\nbenefits. I'm not convinced the GC pressure is a real problem.\n\nOn Wed, Aug 17, 2016, 3:22 AM David Karnok <notifications@github.com> wrote:\n\n> You can extend TestSubscriber locally or have an utility method that does\n> what you need:\n>\n> public static <T> List<T> valuesOf(TestSubscriber<T> ts) {\n>     return Collections.unmodifiableList(new ArrayList<>(ts.values()));\n> }\n>\n> I guess IntelliJ will gladly do a static import of the method above.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4354#issuecomment-240333627>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEWK_lZqXEE6I7_ABRjI6prxBB6dvks5qgraugaJpZM4JlBa7>\n> .\n>\n"
p1839
aS'Aaaaand we just hit it.\r\n\r\nProblem:\r\n\r\n```java\r\nts.assertValues("a", "b")\r\n```\r\n\r\nMultithreaded test without proper `await` may result in such message:\r\n\r\n```\r\nNumber of items does not match. Provided: 2 Actual: 2  (!!!!)\r\nProvided values: a, b\r\nActual values: a, b (!!!!!)\r\n```\r\n\r\nSince we operate over mutable list instead of immutable snapshots we have this very interesting exception message that totally confuses user.\r\n\r\nSo I\'m joining Jake\'s side here and vote for immutable snapshots.'
p1840
asg14
S'JakeWharton:jw/unmodifiable'
p1841
sbsI4355
(iPull
Pull
p1842
(dp1843
g3
S'This PR mainly adds `Scheduler:` descriptions to `Completable`, removes deprecated operators or unnecessary aliases. In addition, blocking methods now are named `blockingAwait` and `blockingGet`.'
p1844
sg5
S'2.x: sync completable javadoc and related changes'
p1845
sg7
(lp1846
S'Cleanup'
p1847
asg10
I4355
sg11
(lp1848
sg14
S'akarnokd:CompletableJavadocSync'
p1849
sbsI4357
(iPull
Pull
p1850
(dp1851
g3
S"Notable changes:\r\n\r\n  - Replace the use of `Runnable` in the base reactive types to `Action` whose `run` method can throw a checked exception.\r\n  - Fix javadoc referencing 1.x types no longer available.\r\n  - The `switchMap` operator has been enhanced to support delaying errors.\r\n  - Update `concat(Iterable)` to use `concatMapDelayError` because Iterable can't throw just anytime but on the boundary, reducing the per-element overhead.\r\n  - `FlowableEmitter` has been enhanced with a `serialize()` method that serializes calls to `onXXX` methods.\r\n  - Factored out `FlowableEmitter.Cancellable` into `io.reactivex.functions` as it will be used by the other base reactive types with their `XEmitter` implementations.\r\n  - Added `AtomicThrowable` with convenience methods that use `ExceptionHelper`'s terminal atomics with `Throwable`s."
p1852
sg5
S'2.x: switch to throwing action, switchmapdelayerror, other cleanup'
p1853
sg7
(lp1854
S'Cleanup'
p1855
aS'Enhancement'
p1856
asg10
I4357
sg11
(lp1857
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4357?src=pr) is 68.65% (diff: 44.48%)\n> Merging [#4357](https://codecov.io/gh/ReactiveX/RxJava/pull/4357?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.21%**\n\n```diff\n@@                2.x      #4357   diff @@\n==========================================\n  Files           432        434     +2   \n  Lines         30815      30952   +137   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4936       4968    +32   \n==========================================\n+ Hits          21224      21251    +27   \n- Misses         7524       7615    +91   \n- Partials       2067       2086    +19   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [059c7e6...c361712](https://codecov.io/gh/ReactiveX/RxJava/compare/059c7e6264de04e2251ea77e39e3fa9d7ac47625...c361712514c11c55f63f983c780567fc0bac429e?src=pr)'
p1858
aS':+1:'
p1859
asg14
S'akarnokd:MissingOps816'
p1860
sbsI4358
(iPull
Pull
p1861
(dp1862
g3
S"This annotation has been accidentally omitted when resolving a conflict during the merging of:\r\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\r\ninto:\r\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\r\n\r\nWe made PRs for both versions 1.x and 2.x.\r\n\r\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html"
p1863
sg5
S'add missing @test annotation'
p1864
sg7
(lp1865
S'Test'
p1866
asg10
I4358
sg11
(lp1867
S'Looks like a double post with #4359.'
p1868
aS'The two PRs are for two different versions: 1.x and 2.x. Is one PR really enough?'
p1869
aS'Sorry, overlooked the version tag.'
p1870
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4358?src=pr) is 68.65% (diff: 100%)\n> Merging [#4358](https://codecov.io/gh/ReactiveX/RxJava/pull/4358?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4358   diff @@\n==========================================\n  Files           434        434          \n  Lines         30952      30952          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4968       4968          \n==========================================\n- Hits          21251      21250     -1   \n+ Misses         7628       7626     -2   \n- Partials       2073       2076     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5688cc8...cff0e20](https://codecov.io/gh/ReactiveX/RxJava/compare/5688cc8ad6fb20dde449ba71138de278baba86ea...cff0e20d023c72bedeeeb4e146bb45058e0252fd?src=pr)'
p1871
asg14
S'dimitar-asenov:2.x'
p1872
sbsI4359
(iPull
Pull
p1873
(dp1874
g3
S"This annotation has been accidentally omitted when resolving a conflict during the merging of:\r\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\r\ninto:\r\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\r\n\r\nWe made PRs for both versions 1.x and 2.x.\r\n\r\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html"
p1875
sg5
S'add missing @test annotation'
p1876
sg7
(lp1877
S'Test'
p1878
asg10
I4359
sg11
(lp1879
sg14
S'dimitar-asenov:1.x'
p1880
sbsI4360
(iPull
Pull
p1881
(dp1882
g3
S'This PR factors out the anonymous inner classes from the base reactive types and introduces the appropriate classes and methods in `*Helper` enums.'
p1883
sg5
S'2.x: factor out inner classes from the base reactive types'
p1884
sg7
(lp1885
S'Cleanup'
p1886
asg10
I4360
sg11
(lp1887
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4360?src=pr) is 68.65% (diff: 71.45%)\n> Merging [#4360](https://codecov.io/gh/ReactiveX/RxJava/pull/4360?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4360   diff @@\n==========================================\n  Files           434        439     +5   \n  Lines         30952      31116   +164   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4968       4971     +3   \n==========================================\n+ Hits          21252      21363   +111   \n- Misses         7626       7669    +43   \n- Partials       2074       2084    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [176346a...3e474d0](https://codecov.io/gh/ReactiveX/RxJava/compare/176346a8adce3ce1a2eccfd7eb5f6e4305e51587...3e474d06a589ca0cbcb116893241c53ee365e227?src=pr)'
p1888
aS':+1:'
p1889
asg14
S'akarnokd:NoInnerClassesInMain'
p1890
sbsI4361
(iPull
Pull
p1891
(dp1892
g3
S'Notable changes:\r\n\r\n  - Implement the `onBackpressureBuffer` with overflow strategy; change the strategy to plain enum.\r\n  - Additional unit tests from 1.x\r\n  - Implement `publish(Function)` properly to support latecommers.\r\n  - Split `FlowableRedo` into `FlowableRetryWhen` and `FlowableRepeatWhen`.\r\n  - Make sure `take(0)` still triggers upstream subscription that is immediately cancelled.\r\n'
p1893
sg5
S'2.x: test sync, fix retrywhen/redowhen/publish(function)'
p1894
sg7
(lp1895
S'Cleanup'
p1896
aS'Enhancement'
p1897
aS'Test'
p1898
asg10
I4361
sg11
(lp1899
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4361?src=pr) is 68.59% (diff: 59.65%)\n> Merging [#4361](https://codecov.io/gh/ReactiveX/RxJava/pull/4361?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4361   diff @@\n==========================================\n  Files           439        442     +3   \n  Lines         31116      31488   +372   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4971       5042    +71   \n==========================================\n+ Hits          21368      21599   +231   \n- Misses         7678       7797   +119   \n- Partials       2070       2092    +22   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6291f59...febf3e4](https://codecov.io/gh/ReactiveX/RxJava/compare/6291f5908f57e271caba226f0c3dbeaecb602794...febf3e4bac19b00b7d29b671b0b3affd166d5a11?src=pr)'
p1900
asg14
S'akarnokd:MissingOps817'
p1901
sbsI4364
(iPull
Pull
p1902
(dp1903
g3
S'Just looking at moving some recent 1.x bug fixes and tests over to 2.x.\r\n\r\nThis is my first PR in 2.x so before I proceed adding more tests from 1.x (to this PR) I want to get some feedback on my approach. In particular in the test `testCollectorFailureDoesNotResultInTwoErrorEmissions` is the `Flowable` creation method ok?'
p1904
sg5
S'2.x collect - handle post terminal events'
p1905
sg7
(lp1906
S'Bug'
p1907
asg10
I4364
sg11
(lp1908
S"If you'd make it more concise, that would be great. Also note that most Flowable operators have an Observable counterpart so it would be nice if such changes would contain the fix & tests for both."
p1909
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4364?src=pr) is 69.33% (diff: 100%)\n> Merging [#4364](https://codecov.io/gh/ReactiveX/RxJava/pull/4364?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4364   diff @@\n==========================================\n  Files           454        454          \n  Lines         32483      32492     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5204       5207     +3   \n==========================================\n+ Hits          22504      22529    +25   \n+ Misses         7776       7764    -12   \n+ Partials       2203       2199     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7a1a4af...2931f24](https://codecov.io/gh/ReactiveX/RxJava/compare/7a1a4afad2984fb95265ec0af061fd1e87f0b75b...2931f242aa3d305ce5642be7320620d24b3638df?src=pr)'
p1910
aS">If you'd make it more concise, that would be great. Also note that most Flowable operators have an Observable counterpart so it would be nice if such changes would contain the fix & tests for both.\r\n\r\nCan do."
p1911
aS'I was trying to avoid this class till now. Will you be able to finish what you wanted till Thursday or may I do it?'
p1912
aS"@akarnokd I rebased but io.reactivex.Optional disappeared and I was using it in tests. I'll add it back in internal test package."
p1913
aS'@akarnokd the work is done for `Flowable` and I have done the work for `Observable` as well but is on my laptop at home so will finish PR tonight (in about 11 hours time).'
p1914
aS"@akarnokd I'm noticing that RxJava 2.x is really slow to compile (2 minutes) in Eclipse 4.5.1 and 4.6 (say after switching branches). Have you noticed that? Got any tips?"
p1915
aS"Please try without `Optional`. Yes Eclipse is slow if you change `Observable` and `Flowable`, it doesn't like the cycle between the base classes and their implementations. Not sure why, maybe collecting metadata makes is much slower."
p1916
aS"I've removed `Optional`. Would you like to assess this PR as it stands without the Observable fix that I can do in another PR? You guys are moving fast (as usual) and keeping PRs open a while is a bit of an obstacle."
p1917
aS':+1:'
p1918
asg14
S'davidmoten:2.x-collect-handle-post-terminal-events'
p1919
sbsI4368
(iPull
Pull
p1920
(dp1921
g3
S'Notable changes:\r\n\r\n  - implemented `withLatestFrom` with multiple other sources (both `Flowable` and `Observable`)\r\n  - added missing `Exceptions.throwIfFatal()` after catching throwables\r\n  - added `SequentialDisposable` and replaced internal use of `SerialDisposable` with it\r\n  - added `package-info.java` to public packages\r\n  - added javadoc to some interfaces and methods\r\n  - removed `@Experimental` tags and set those methods to `@since 2.0`\r\n  - added `HalfSerializer` to deal with single onNext and multiple onError/onComplete callers'
p1922
sg5
S'2.x: add withlatestfrom many, cleanups and other enhancements'
p1923
sg7
(lp1924
S'Cleanup'
p1925
aS'Documentation'
p1926
aS'Enhancement'
p1927
asg10
I4368
sg11
(lp1928
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4368?src=pr) is 68.45% (diff: 62.87%)\n> Merging [#4368](https://codecov.io/gh/ReactiveX/RxJava/pull/4368?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.12%**\n\n```diff\n@@                2.x      #4368   diff @@\n==========================================\n  Files           442        446     +4   \n  Lines         31488      32154   +666   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5042       5092    +50   \n==========================================\n+ Hits          21595      22012   +417   \n- Misses         7797       8033   +236   \n- Partials       2096       2109    +13   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4aab4eb...c2df8ed](https://codecov.io/gh/ReactiveX/RxJava/compare/4aab4ebe3bfca585d370d78b1a6493844854181b...c2df8edb8bde789b4bb207ac52420a1a55b39b22?src=pr)'
p1929
aS':+1:'
p1930
aS'Thanks @JakeWharton !'
p1931
asg14
S'akarnokd:MissingOpsNCleanup818'
p1932
sbsI4370
(iPull
Pull
p1933
(dp1934
g3
S'This PR removes the `Try` and `Optional` classes and (re)introduces `Notification<T>`.\r\n\r\nThere are several ways to implement it. This PR uses the abstract class + private subclasses approach that saves on instance size.\r\n\r\nRelated discussion: #4365.'
p1935
sg5
S'2.x: remove try+optional, introduce notification'
p1936
sg7
(lp1937
S'Enhancement'
p1938
asg10
I4370
sg11
(lp1939
S'> This PR uses the abstract class + private subclasses approach that saves on instance size.\r\n\r\nThis seems like it would prevent a lot of inlining of the simple "is"ers and "get"ers because the callsites become polymorphic instead of monomorphic.\r\n\r\nWhen I check the object layout having two fields in a root object doesn\'t increase the size because of object padding.\r\n\r\n```\r\n$ cat Notification.java\r\nfinal class Notification<T> {\r\n  private static final Object COMPLETED = new Object();\r\n\r\n  private final T value;\r\n  private final Throwable error;\r\n\r\n  Notification(T value, Throwable error) {\r\n    this.value = value;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n$ javac Notification.java\r\n\r\n$ java -cp .:/Users/jw/Downloads/jol-cli-0.5-full.jar org.openjdk.jol.Main internals Notification\r\nobjc[95020]: Class JavaLaunchHelper is implemented in both /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/bin/java and /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre/lib/libinstrument.dylib. One of the two will be used. Which one is undefined.\r\n# WARNING: Unable to attach Serviceability Agent. You can try again with escalated privileges. Two options: a) use -Djol.tryWithSudo=true to try with sudo; b) echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\r\n# Running 64-bit HotSpot VM.\r\n# Using compressed oop with 3-bit shift.\r\n# Using compressed klass with 3-bit shift.\r\n# WARNING | Compressed references base/shifts are guessed by the experiment!\r\n# WARNING | Therefore, computed addresses are just guesses, and ARE NOT RELIABLE.\r\n# WARNING | Make sure to attach Serviceability Agent to get the reliable addresses.\r\n# Objects are 8 bytes aligned.\r\n# Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n# Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n\r\nVM fails to invoke the default constructor, falling back to class-only introspection.\r\n\r\nNotification object internals:\r\n OFFSET  SIZE      TYPE DESCRIPTION                    VALUE\r\n      0    12           (object header)                N/A\r\n     12     4    Object Notification.value             N/A\r\n     16     4 Throwable Notification.error             N/A\r\n     20     4           (loss due to the next object alignment)\r\nInstance size: 24 bytes\r\nSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total\r\n```'
p1940
aS"Oops I wrote my comparison wrong (and left it out of the comment).\r\n\r\nYou're right, the individual classes are only 16 bytes (12 header + 4 field). That said, 24 vs 16 isn't that big of a deal to gain guaranteed monomorphism."
p1941
aS'There are other ways of doing it, i.e., single object field + private wrapper for Throwables: 16 bytes per onNext and 32 bytes per onError'
p1942
aS"True. I'll leave it up to you though.\r\n\r\n:+1:"
p1943
aS'Or getting at least bimorphic by having value == null represent onComplete.'
p1944
aS'Updated. Now we have the smaller size but an instanceof check for every isOnNext() and getValue calls.'
p1945
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4370?src=pr) is 68.60% (diff: 77.44%)\n> Merging [#4370](https://codecov.io/gh/ReactiveX/RxJava/pull/4370?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4370   diff @@\n==========================================\n  Files           446        443     -3   \n  Lines         32154      32081    -73   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5092       5073    -19   \n==========================================\n- Hits          22026      22010    -16   \n+ Misses         8011       7975    -36   \n+ Partials       2117       2096    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ec4eb4f...cc0a786](https://codecov.io/gh/ReactiveX/RxJava/compare/ec4eb4f3bcd0a0c2d4e17571c8f4320ee864fd5c...cc0a78632b8e5e1b0141441e75e12d7b906a93b5?src=pr)'
p1946
aS'Looks good!'
p1947
asg14
S'akarnokd:Notification2x'
p1948
sbsI4371
(iPull
Pull
p1949
(dp1950
g3
S'This PR removes the `BlockingFlowable` and `BlockingObservable` classes and moves the blocking operators into the respective reactive classes and names prefixed with `blocking`.\r\n\r\nIn addition, many of the mentions of `Flowable` has been replaced with `Observable` in `Observable`.\r\n\r\nRelated: #4366.'
p1951
sg5
S'2.x: move blocking operators into the base classes'
p1952
sg7
(lp1953
S'Cleanup'
p1954
aS'Enhancement'
p1955
asg10
I4371
sg11
(lp1956
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4371?src=pr) is 68.58% (diff: 49.66%)\n> Merging [#4371](https://codecov.io/gh/ReactiveX/RxJava/pull/4371?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4371   diff @@\n==========================================\n  Files           443        449     +6   \n  Lines         32081      32123    +42   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5073       5080     +7   \n==========================================\n+ Hits          22015      22031    +16   \n- Misses         7971       7996    +25   \n- Partials       2095       2096     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a6bbf46...58874f6](https://codecov.io/gh/ReactiveX/RxJava/compare/a6bbf4630e9f3678ac56e96f9aa156f3d03ffc56...58874f6d4cf044b1bfea05fea559df4a7efc4db8?src=pr)'
p1957
aS'LGTM \xf0\x9f\x91\x8d '
p1958
asg14
S'akarnokd:InlinedBlockingOps'
p1959
sbsI4372
(iPull
Pull
p1960
(dp1961
g3
g57
sg5
S'2.x: implement observablehide for also masking the disposable.'
p1962
sg7
(lp1963
S'Enhancement'
p1964
asg10
I4372
sg11
(lp1965
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4372?src=pr) is 68.60% (diff: 80.95%)\n> Merging [#4372](https://codecov.io/gh/ReactiveX/RxJava/pull/4372?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4372   diff @@\n==========================================\n  Files           449        450     +1   \n  Lines         32123      32143    +20   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5080       5081     +1   \n==========================================\n+ Hits          22030      22052    +22   \n+ Misses         7986       7985     -1   \n+ Partials       2107       2106     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [23461ee...64cce97](https://codecov.io/gh/ReactiveX/RxJava/compare/23461ee40ec28b206c435530d53ffc59563087f9...64cce97a97f092c5feb641a2ee626f8d4863ac5f?src=pr)'
p1966
asg14
S'JakeWharton:jw/observable-hide'
p1967
sbsI4375
(iPull
Pull
p1968
(dp1969
g3
S'Notable changes:\r\n\r\n  - renamed and added safe `create` support to `Observable`, `Single` and `Completable`\r\n  - added some javadoc\r\n  - added `test()` method to `Single` and `Completable`\r\n  - factored out `ErrorMode` into `internal.util` (used by various `concat` operators)'
p1970
sg5
S'2.x: added missing ops, cleanup 8/19-1'
p1971
sg7
(lp1972
S'Cleanup'
p1973
aS'Documentation'
p1974
aS'Enhancement'
p1975
asg10
I4375
sg11
(lp1976
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4375?src=pr) is 68.64% (diff: 62.27%)\n> Merging [#4375](https://codecov.io/gh/ReactiveX/RxJava/pull/4375?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4375   diff @@\n==========================================\n  Files           450        452     +2   \n  Lines         32143      32405   +262   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5081       5129    +48   \n==========================================\n+ Hits          22051      22245   +194   \n- Misses         7988       8020    +32   \n- Partials       2104       2140    +36   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f0d1d34...d49d30b](https://codecov.io/gh/ReactiveX/RxJava/compare/f0d1d34874980ea508328aba5665a8ba1212e1f8...d49d30b3f83f554f2ed93567b3434b944371cf7c?src=pr)'
p1977
aS':+1:'
p1978
asg14
S'akarnokd:MissingOps819'
p1979
sbsI4378
(iPull
Pull
p1980
(dp1981
g3
S'Notable changes:\r\n\r\n  - use JMH 1.13\r\n  - fix javadoc generator exclude pattern\r\n  - add javadoc to many components\r\n  - remove `Observers` and `Subscribers` - all their function is available via subscribe() and/or by implementing the abstract `XObserver`/`XSubscriber` provided\r\n  - remove `Schedulers.immediate()`\r\n  - remove `Single.subscribe(Subscriber)`, `Single.subscribe(Observer)`, `Completable.subscribe(Subscriber)` and `Completable.subscribe(Observer)`\r\n  - remove `CompletableSerializedObserver` and `SingleSerializedObserver` and their parent package\r\n  - implement `Single.takeUntil`, `Single.flatMapCompletable`\r\n  - update the time-shift handling in the default `Scheduler.schedulePeriodically()` to match 1.x\r\n  - fix `Single.subscribeOn` disposable management\r\n  - renamed `Subject.hasSubscribers` to `Subject.hasObservers`'
p1982
sg5
S'2.x: implement ops, add javadoc, remove unused components 8/19-2'
p1983
sg7
(lp1984
S'Cleanup'
p1985
aS'Documentation'
p1986
aS'Enhancement'
p1987
asg10
I4378
sg11
(lp1988
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4378?src=pr) is 69.61% (diff: 76.77%)\n> Merging [#4378](https://codecov.io/gh/ReactiveX/RxJava/pull/4378?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.96%**\n\n```diff\n@@                2.x      #4378   diff @@\n==========================================\n  Files           452        450     -2   \n  Lines         32405      32007   -398   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5129       5108    -21   \n==========================================\n+ Hits          22244      22281    +37   \n+ Misses         8014       7577   -437   \n- Partials       2147       2149     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [60bf4fc...dcdf77a](https://codecov.io/gh/ReactiveX/RxJava/compare/60bf4fc559bac80ae5d53793ec008cfee067f29f...dcdf77a7e2fd6bc836ba63e443424b405321ebcc?src=pr)'
p1989
aS':+1: to code changes. Skimmed the Javadoc for formatting only, not content.'
p1990
aS"I'm not worried about javadoc; the community is great at finding errors in there that can be trivially fixed."
p1991
asg14
S'akarnokd:MissingStuff819_2'
p1992
sbsI4379
(iPull
Pull
p1993
(dp1994
g3
g57
sg5
S'2.x: move single-use top-level type to nested class of its only use.'
p1995
sg7
(lp1996
S'Cleanup'
p1997
asg10
I4379
sg11
(lp1998
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4379?src=pr) is 69.67% (diff: 100%)\n> Merging [#4379](https://codecov.io/gh/ReactiveX/RxJava/pull/4379?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4379   diff @@\n==========================================\n  Files           450        449     -1   \n  Lines         32007      32006     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22311      22299    -12   \n- Misses         7562       7567     +5   \n- Partials       2134       2140     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...2e1f2c7](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...2e1f2c705d4318296c73e017b86c0941df9da4ca?src=pr)'
p1999
asg14
S'JakeWharton:jw/remove'
p2000
sbsI4380
(iPull
Pull
p2001
(dp2002
g3
S"This method is misleading in that it's a factory next to a bunch of accessor methods to shared resources. The TestScheduler constructor is public and can be used directly."
p2003
sg5
S'2.x: remove test scheduler factory.'
p2004
sg7
(lp2005
S'Cleanup'
p2006
asg10
I4380
sg11
(lp2007
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4380?src=pr) is 69.63% (diff: 100%)\n> Merging [#4380](https://codecov.io/gh/ReactiveX/RxJava/pull/4380?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4380   diff @@\n==========================================\n  Files           450        450          \n  Lines         32007      32006     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22311      22286    -25   \n- Misses         7562       7577    +15   \n- Partials       2134       2143     +9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...64dc7fa](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...64dc7fad490da928591e2e2d0feded62f0c2471d?src=pr)'
p2008
asg14
S'JakeWharton:jw/drop-test-factory'
p2009
sbsI4381
(iPull
Pull
p2010
(dp2011
g3
g57
sg5
S'2.x: correct factory method name for converting an rs publisher.'
p2012
sg7
(lp2013
S'Cleanup'
p2014
asg10
I4381
sg11
(lp2015
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4381?src=pr) is 69.75% (diff: 100%)\n> Merging [#4381](https://codecov.io/gh/ReactiveX/RxJava/pull/4381?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4381   diff @@\n==========================================\n  Files           450        450          \n  Lines         32007      32007          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22311      22326    +15   \n+ Misses         7562       7545    -17   \n- Partials       2134       2136     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [fba05ea...497a394](https://codecov.io/gh/ReactiveX/RxJava/compare/fba05ea81197929e8a66a1db8bdd4a590d5dc7e3...497a3940192db1777c7bb1e90c25a1adef9189cf?src=pr)'
p2016
asg14
S'JakeWharton:jw/factory-name'
p2017
sbsI4382
(iPull
Pull
p2018
(dp2019
g3
g57
sg5
S'2.x: correctly dereference subscription before comparing against null.'
p2020
sg7
(lp2021
S'Bug'
p2022
asg10
I4382
sg11
(lp2023
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4382?src=pr) is 69.72% (diff: 0.00%)\n> Merging [#4382](https://codecov.io/gh/ReactiveX/RxJava/pull/4382?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4382   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22300      22315    +15   \n+ Misses         7566       7557     -9   \n+ Partials       2139       2133     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...76bd1d9](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...76bd1d967dfdff341b4a5027f1edd20b913a191b?src=pr)'
p2024
asg14
S'JakeWharton:jw/dereference-subscription'
p2025
sbsI4383
(iPull
Pull
p2026
(dp2027
g3
S'Also optimize name creation to avoid `StringBuilder` having to expand its underlying `char[]`.'
p2028
sg5
S'2.x: remove double dash on rxthreadfactory thread names.'
p2029
sg7
(lp2030
S'Cleanup'
p2031
asg10
I4383
sg11
(lp2032
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4383?src=pr) is 69.64% (diff: 100%)\n> Merging [#4383](https://codecov.io/gh/ReactiveX/RxJava/pull/4383?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4383   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32004     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22300      22290    -10   \n- Misses         7566       7575     +9   \n  Partials       2139       2139          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...4e3194b](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...4e3194beaf708e993046f1e4c233862744df45b0?src=pr)'
p2033
asg14
S'JakeWharton:jw/redundant-dash'
p2034
sbsI4384
(iPull
Pull
p2035
(dp2036
g3
g57
sg5
S'2.x: do not promise a new instance where we return a singleton.'
p2037
sg7
(lp2038
S'Cleanup'
p2039
asg10
I4384
sg11
(lp2040
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4384?src=pr) is 69.63% (diff: 100%)\n> Merging [#4384](https://codecov.io/gh/ReactiveX/RxJava/pull/4384?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4384   diff @@\n==========================================\n  Files           449        449          \n  Lines         32005      32005          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22300      22287    -13   \n  Misses         7566       7566          \n- Partials       2139       2152    +13   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f738a85...6475742](https://codecov.io/gh/ReactiveX/RxJava/compare/f738a85c37e8ffd067dc6b6108823d84a837e773...6475742db1a55298c9f0aa94f9758a9fb13b4cb7?src=pr)'
p2041
asg14
S'JakeWharton:jw/not-new'
p2042
sbsI4385
(iPull
Pull
p2043
(dp2044
g3
g57
sg5
S'2.x: free upstream resources when default observer/subscriber is canceled.'
p2045
sg7
(lp2046
S'Cleanup'
p2047
asg10
I4385
sg11
(lp2048
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4385?src=pr) is 69.62% (diff: 80.00%)\n> Merging [#4385](https://codecov.io/gh/ReactiveX/RxJava/pull/4385?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4385   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32008     +4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5109     +1   \n==========================================\n+ Hits          22283      22287     +4   \n- Misses         7578       7579     +1   \n+ Partials       2143       2142     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...76d1bd8](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...76d1bd8cb478489b3a4d1686213d5b7dd351d9a2?src=pr)'
p2049
asg14
S'JakeWharton:jw/free-upstream'
p2050
sbsI4386
(iPull
Pull
p2051
(dp2052
g3
g57
sg5
S'2.x: move error consumer helper to internal api.'
p2053
sg7
(lp2054
S'Cleanup'
p2055
asg10
I4386
sg11
(lp2056
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4386?src=pr) is 69.64% (diff: 69.23%)\n> Merging [#4386](https://codecov.io/gh/ReactiveX/RxJava/pull/4386?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4386   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32003     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n+ Hits          22283      22290     +7   \n+ Misses         7578       7573     -5   \n+ Partials       2143       2140     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...6947b0f](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...6947b0f74031e388f031756937c4647ed02728e4?src=pr)'
p2057
asg14
S'JakeWharton:jw/error-consumer-private'
p2058
sbsI4387
(iPull
Pull
p2059
(dp2060
g3
g57
sg5
S'2.x: remove unused test methods from safe observer/subscriber.'
p2061
sg7
(lp2062
S'Cleanup'
p2063
asg10
I4387
sg11
(lp2064
S'I\'m not a huge fan of the word "safe" here. What about calling these `ContractObserver` and `ContractSubscriber` to more accurately describe what they do?'
p2065
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4387?src=pr) is 69.62% (diff: 100%)\n> Merging [#4387](https://codecov.io/gh/ReactiveX/RxJava/pull/4387?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4387   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32002     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5108          \n==========================================\n- Hits          22283      22282     -1   \n+ Misses         7578       7575     -3   \n- Partials       2143       2145     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3262f16...294b059](https://codecov.io/gh/ReactiveX/RxJava/compare/3262f16b2b5d00882389d5f2737ae205ca911a14...294b059467b1d5a086cf36c4280d1ef5b51453b8?src=pr)'
p2066
asg14
S'JakeWharton:jw/unused-methods'
p2067
sbsI4388
(iPull
Pull
p2068
(dp2069
g3
S'This is a very specific use case to provide as a first-party type which can always be added back later should there be sufficient demand.'
p2070
sg5
S'2.x: remove reference counted disposable public type.'
p2071
sg7
(lp2072
S'Cleanup'
p2073
asg10
I4388
sg11
(lp2074
S"Happy to hear arguments for keeping it, but I couldn't come up with any that were convincing enough."
p2075
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4388?src=pr) is 69.61% (diff: 100%)\n> Merging [#4388](https://codecov.io/gh/ReactiveX/RxJava/pull/4388?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                2.x      #4388   diff @@\n==========================================\n  Files           449        448     -1   \n  Lines         32004      31983    -21   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5105     -3   \n==========================================\n- Hits          22306      22266    -40   \n- Misses         7557       7575    +18   \n- Partials       2141       2142     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e8ff934...a54ad0f](https://codecov.io/gh/ReactiveX/RxJava/compare/e8ff93464ecb83d33596dae1ddd6143b3e590914...a54ad0f07aa62ca8548b9ba615c97cc84c0f97bd?src=pr)'
p2076
aS'I never saw an use of it; it is a remnant from Rx.NET where it is part of the inner `Observable` management in the `groupBy` and `window` operator. We have inlined custom `Observable`/`Flowable` there.'
p2077
asg14
S'JakeWharton:jw/nuke-ref-count-disposable'
p2078
sbsI4390
(iPull
Pull
p2079
(dp2080
g3
S'Looks like [the linked comment][1] was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.\r\n\r\n [1]: https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495'
p2081
sg5
S'1.x: remove explicit stackoverflow check as its a virtualmachineerror.'
p2082
sg7
(lp2083
S'Cleanup'
p2084
asg10
I4390
sg11
(lp2085
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4390?src=pr) is 84.27% (diff: 100%)\n> Merging [#4390](https://codecov.io/gh/ReactiveX/RxJava/pull/4390?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.07%**\n\n```diff\n@@                1.x      #4390   diff @@\n==========================================\n  Files           270        270          \n  Lines         17517      17515     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2678       2677     -1   \n==========================================\n- Hits          14775      14760    -15   \n- Misses         1884       1894    +10   \n- Partials        858        861     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a57741b...496ceba](https://codecov.io/gh/ReactiveX/RxJava/compare/a57741b5895d775e51753ebc5a67d26f400f49e3...496ceba783df06d1af0307d38b3cd71d4356e43c?src=pr)'
p2086
asg14
S'JakeWharton:jw/stack-overflow-v1'
p2087
sbsI4391
(iPull
Pull
p2088
(dp2089
g3
S'Looks like [the linked comment][1] was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.\r\n\r\n [1]: https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495'
p2090
sg5
S'2.x: remove explicit stackoverflow check as its a virtualmachineerror.'
p2091
sg7
(lp2092
S'Cleanup'
p2093
asg10
I4391
sg11
(lp2094
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4391?src=pr) is 69.71% (diff: 0.00%)\n> Merging [#4391](https://codecov.io/gh/ReactiveX/RxJava/pull/4391?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4391   diff @@\n==========================================\n  Files           449        449          \n  Lines         32004      32002     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5107     -1   \n==========================================\n+ Hits          22306      22311     +5   \n+ Misses         7557       7550     -7   \n  Partials       2141       2141          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e8ff934...b91d9dc](https://codecov.io/gh/ReactiveX/RxJava/compare/e8ff93464ecb83d33596dae1ddd6143b3e590914...b91d9dc546bb01679deec686f21a5192de6429bf?src=pr)'
p2095
asg14
S'JakeWharton:jw/stack-overflow'
p2096
sbsI4393
(iPull
Pull
p2097
(dp2098
g3
S'Also should not `cancelled` be renamed to `shouldDispose`? Also the java doc might need a repolish then.'
p2099
sg5
S'2.x: completable.test cancel testsubscriber when wanted'
p2100
sg7
(lp2101
sg10
I4393
sg11
(lp2102
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4393?src=pr) is 69.62% (diff: 0.00%)\n> Merging [#4393](https://codecov.io/gh/ReactiveX/RxJava/pull/4393?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4393   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22267    -14   \n- Misses         7561       7572    +11   \n- Partials       2140       2144     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...4e3cf88](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...4e3cf8844e30ae14a8faeda4668c02afc300033e?src=pr)'
p2103
asg14
S'vanniktech:2.x_completable_test'
p2104
sbsI4394
(iPull
Pull
p2105
(dp2106
g3
g57
sg5
S'2.x: single.test cancel testsubscriber when wanted'
p2107
sg7
(lp2108
S'Cleanup'
p2109
asg10
I4394
sg11
(lp2110
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4394?src=pr) is 69.65% (diff: 0.00%)\n> Merging [#4394](https://codecov.io/gh/ReactiveX/RxJava/pull/4394?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4394   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22277     -4   \n- Misses         7561       7567     +6   \n+ Partials       2140       2139     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...32ed1b8](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...32ed1b82e653088a52be83f80ef93fe45e509701?src=pr)'
p2111
asg14
S'vanniktech:2.x_single_test'
p2112
sbsI4395
(iPull
Pull
p2113
(dp2114
g3
g57
sg5
S'2.x: completable.test cancel testsubscriber when wanted'
p2115
sg7
(lp2116
S'Cleanup'
p2117
asg10
I4395
sg11
(lp2118
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4395?src=pr) is 69.57% (diff: 0.00%)\n> Merging [#4395](https://codecov.io/gh/ReactiveX/RxJava/pull/4395?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4395   diff @@\n==========================================\n  Files           448        448          \n  Lines         31982      31983     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5105       5106     +1   \n==========================================\n- Hits          22281      22253    -28   \n- Misses         7561       7586    +25   \n- Partials       2140       2144     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6a6a302...6485480](https://codecov.io/gh/ReactiveX/RxJava/compare/6a6a3022bc3af7c29e9f84ed1fc11c6c8d2c2de9...64854802b1ecda983ae954e9a2ab9e36004cf566?src=pr)'
p2119
asg14
S'vanniktech:2.xcompletable_test'
p2120
sbsI4396
(iPull
Pull
p2121
(dp2122
g3
g57
sg5
S'2.x: observable test change dispose to cancel'
p2123
sg7
(lp2124
S'Cleanup'
p2125
asg10
I4396
sg11
(lp2126
S'Oh right cancel does not exist on `TestObserver` yet it should though, right?'
p2127
aS"Yes, it should be conditionally disposed. Didn't your IDE warn about the missing method?"
p2128
aS"It did but I somehow managed to ignore it and didn't run the tests locally. Should I create the cancel method on `TestObserver` or just leave it as is and close this PR?"
p2129
aS'Just use `dispose`.'
p2130
aS'Alright then this can be closed.'
p2131
asg14
S'vanniktech:2.x_observable_dispose_cancel_swap'
p2132
sbsI4397
(iPull
Pull
p2133
(dp2134
g3
S"When throttleFirst was operating on a TestScheduler, it delivered all items passed to it untill TestScheduler's time would change to a non-zero value."
p2135
sg5
S'1.x: fix multiple values produced by throttlefirst with testscheduler'
p2136
sg7
(lp2137
S'Bug'
p2138
asg10
I4397
sg11
(lp2139
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4397?src=pr) is 84.29% (diff: 100%)\n> Merging [#4397](https://codecov.io/gh/ReactiveX/RxJava/pull/4397?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4397   diff @@\n==========================================\n  Files           270        270          \n  Lines         17515      17516     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14770      14765     -5   \n- Misses         1885       1897    +12   \n+ Partials        860        854     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1a7de42...d6014ec](https://codecov.io/gh/ReactiveX/RxJava/compare/1a7de42630959085d9bd89d039dce51c02a4214a...d6014ec7ba5b4132b3ce8be91ed47f379d843453?src=pr)'
p2140
aS':+1:  and thanks for the fix.'
p2141
asg14
S'AntonRutkevich:fix-throttle-first-test-scheduler'
p2142
sbsI4398
(iPull
Pull
p2143
(dp2144
g3
S't2 was only initialized if canceling threw an exception. In the happy path it would have never been initialized so when onError threw the call to suppress() would NPE.'
p2145
sg5
S'2.x: avoid potential npe when onerror throws.'
p2146
sg7
(lp2147
S'Bug'
p2148
asg10
I4398
sg11
(lp2149
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4398?src=pr) is 69.63% (diff: 0.00%)\n> Merging [#4398](https://codecov.io/gh/ReactiveX/RxJava/pull/4398?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4398   diff @@\n==========================================\n  Files           448        448          \n  Lines         31984      31986     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5107       5108     +1   \n==========================================\n+ Hits          22267      22273     +6   \n+ Misses         7577       7574     -3   \n+ Partials       2140       2139     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e1cec33...eb2d3bd](https://codecov.io/gh/ReactiveX/RxJava/compare/e1cec337e0778adbc75efe6c226242cb7df62d61...eb2d3bda8e2a37ea966458e0f5b5e8fc2391ba71?src=pr)'
p2150
asg14
S'JakeWharton:jw/npe'
p2151
sbsI4403
(iPull
Pull
p2152
(dp2153
g3
S"Notable changes:\r\n\r\n  - Implement `concatEager` and its variants\r\n  - Implement `onTerminateDetach`\r\n  - Implement `distinctUntilChanged(BiPredicate)`\r\n  - Replace `EmptyDisposable.INSTANCE` with `Disposables.empty()` due to clash with fusion (sending an INSTANCE tells a fusion-enabled source to not expect onNext values yet the test still send those - this was a problem with EmptySubscription.INSTANCE a while back too). Also added javadoc warning about its use\r\n  - add `ObservableScalarXMap` optimization to `Observable.xMap(Function)` and their operator's `subscribeActual`\r\n  - Make `ObservableJust` `ScalarCallable` and sync-fuseable with `ScalarDisposable` (similar to `Flowable.just()`)\r\n  - Make `Observable.bufferSize()` public for convenience.\r\n  - Fix `flatMap` fused `Callable` handling\r\n  - Renamed `Objects` to `ObjectHelper` to avoid accidental bad imports of `java.util.Objects` of Java 8."
p2154
sg5
S'2.x: add missing ops, cleanup, fusion fixes'
p2155
sg7
(lp2156
S'Bug'
p2157
aS'Cleanup'
p2158
aS'Enhancement'
p2159
asg10
I4403
sg11
(lp2160
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4403?src=pr) is 69.30% (diff: 65.89%)\n> Merging [#4403](https://codecov.io/gh/ReactiveX/RxJava/pull/4403?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.32%**\n\n```diff\n@@                2.x      #4403   diff @@\n==========================================\n  Files           448        454     +6   \n  Lines         31986      32483   +497   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5108       5204    +96   \n==========================================\n+ Hits          22274      22513   +239   \n- Misses         7568       7775   +207   \n- Partials       2144       2195    +51   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5b8845d...7cdb19e](https://codecov.io/gh/ReactiveX/RxJava/compare/5b8845d4cfdbc2d563b90ce27db978b7e383d9e0...7cdb19eedab11edfb2af7afcbf3139939493d01a?src=pr)'
p2161
asg14
S'akarnokd:MissingOps822_1'
p2162
sbsI4410
(iPull
Pull
p2163
(dp2164
g3
S'Notable changes:\r\n\r\n  - Introduce `Emitter<T>` as a base interface for `FlowableEmitter` and `ObservableEmitter`, use it for the `generate()` operators to be the push surface.\r\n  - Hide fusion-related methods in `TestSubscriber` and `TestObserver`, remove `test()` method overload from the base reactive classes, introduce `SubscriberFusion` and `ObserverFusion` helper in the test source set\r\n  - Enable fusion on `Observable.range()`.\r\n  - Move `Observer`-related tests into the `observers` test package.'
p2165
sg5
S'2.x: cleanup, enhancements 8/23-1'
p2166
sg7
(lp2167
S'Cleanup'
p2168
aS'Enhancement'
p2169
asg10
I4410
sg11
(lp2170
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4410?src=pr) is 69.42% (diff: 76.00%)\n> Merging [#4410](https://codecov.io/gh/ReactiveX/RxJava/pull/4410?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4410   diff @@\n==========================================\n  Files           454        454          \n  Lines         32483      32509    +26   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5204       5206     +2   \n==========================================\n+ Hits          22504      22569    +65   \n+ Misses         7776       7740    -36   \n+ Partials       2203       2200     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7a1a4af...2dbc4fd](https://codecov.io/gh/ReactiveX/RxJava/compare/7a1a4afad2984fb95265ec0af061fd1e87f0b75b...2dbc4fdd3e836118af339a9e00f2deb322369317?src=pr)'
p2171
aS':+1:'
p2172
asg14
S'akarnokd:Cleanup823'
p2173
sbsI4413
(iPull
Pull
p2174
(dp2175
g3
S'Notable changes:\r\n\r\n  - delete `concat` 5-9 arguments, use `concat(just(...))` or `concatArray(...)` instead\r\n  - delete `withLatestFrom` 5-8 arguments\r\n  - rename `merge(Publisher...)` into `mergeArray(Publisher...)` to disambiguate\r\n  - rename `merge(int, int, Publisher...)` into `mergeArray(int, int, Publisher...)` to disambiguate\r\n  - delete `merge(int, Publisher...)` overload\r\n  - rename `mergeDelayError(Publisher...)` into `mergeArrayDelayError(Publisher...)` to disambiguate\r\n  - rename `mergeDelayError(int, int, Publisher...)` into `mergeArrayDelayError(int, int, Publisher...)` to disambiguate\r\n  - delete `mergeDelayError(int, Publisher...)` overload\r\n  - delete `takeLatestBuffer` overloads\r\n  '
p2176
sg5
S'2.x: api removals and renames'
p2177
sg7
(lp2178
S'Cleanup'
p2179
asg10
I4413
sg11
(lp2180
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4413?src=pr) is 69.44% (diff: 100%)\n> Merging [#4413](https://codecov.io/gh/ReactiveX/RxJava/pull/4413?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                2.x      #4413   diff @@\n==========================================\n  Files           454        454          \n  Lines         32518      32359   -159   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5209          \n==========================================\n- Hits          22619      22471   -148   \n+ Misses         7706       7688    -18   \n- Partials       2193       2200     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7db9f95...3e9ae2c](https://codecov.io/gh/ReactiveX/RxJava/compare/7db9f958bcc4d6a5d4e062d823bbbdd1ecbf9aed...3e9ae2c32ad2b30d5f7a0d9ebe26d5ce4382f4af?src=pr)'
p2181
aS'\xf0\x9f\x91\x8d '
p2182
aS'/cc @zsxwing '
p2183
aS'\xf0\x9f\x91\x8d  \xf0\x9f\x8e\x89 '
p2184
asg14
S'akarnokd:APICut823'
p2185
sbsI4417
(iPull
Pull
p2186
(dp2187
g3
S"Notable changes:\r\n\r\n  - renamed `amb(sources...)` to `ambArray(sources...)` to be consistent with the naming of other operators with varargs input\r\n  - Renamed some other varargs operators ot `xArray` to be consistent\r\n  - Added `RxJavaPlugins.onAssembly()` to operators, note that no other infrastructure (such as `enableAssemblyTracking` was added; companion libraries may later utilize these hooks to inject the necessary wrapper classes.\r\n  - Extended `RxJavaPlugins.onAssembly()` to support `ConnectableX` operators\r\n  - Renamed `FlowProcessor` into `FlowableProcessor` to avoid future confusion with JDK 9's `Flow.Processor`\r\n  - Removed common value extraction methods from `Subject` and `FlowableProcessor` and left them in the implementations\r\n  - Made common terminal state checking methods of `Subject` and `FlowableProcessor` as abstract since all subtypes can implement them reasonably\r\n  - fixed copy-paste errors in javadocs, such as wrong class named, referencing non-existent backpressure"
p2188
sg5
S'2.x: add assembly tracking, minor fixes and cleanup'
p2189
sg7
(lp2190
S'Cleanup'
p2191
aS'Enhancement'
p2192
asg10
I4417
sg11
(lp2193
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4417?src=pr) is 69.44% (diff: 85.17%)\n> Merging [#4417](https://codecov.io/gh/ReactiveX/RxJava/pull/4417?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **<.01%**\n\n```diff\n@@                2.x      #4417   diff @@\n==========================================\n  Files           454        454          \n  Lines         32359      32372    +13   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5214     +5   \n==========================================\n+ Hits          22472      22480     +8   \n- Misses         7691       7694     +3   \n- Partials       2196       2198     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9fb4040...074d187](https://codecov.io/gh/ReactiveX/RxJava/compare/9fb40403385d520b80bf9e1cf491b1f1a197ea56...074d187e44bebaa97cc75413e4b8c0d2ac0d1513?src=pr)'
p2194
aS'Merged so some fine cleanup can be done before release.'
p2195
aS':+1:'
p2196
aS'and i did _just_ get through it'
p2197
aS"Great concurrency in practice! I'm preparing a cleanup PR with, among other things, that private member checks of IntelliJ."
p2198
asg14
S'akarnokd:AssemblyTracking'
p2199
sbsI4418
(iPull
Pull
p2200
(dp2201
g3
S'The other `doOnEach` function has the right java doc. Terminal events such as `onCompleted` / `onError` are also included in `doOnEach`.'
p2202
sg5
S'1.x: sync dooneach java doc'
p2203
sg7
(lp2204
S'Documentation'
p2205
asg10
I4418
sg11
(lp2206
S':+1:'
p2207
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4418?src=pr) is 84.30% (diff: 100%)\n> Merging [#4418](https://codecov.io/gh/ReactiveX/RxJava/pull/4418?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #4418   diff @@\n==========================================\n  Files           270        270          \n  Lines         17516      17516          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n+ Hits          14756      14767    +11   \n+ Misses         1896       1886    -10   \n+ Partials        864        863     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [3aaed26...2e90948](https://codecov.io/gh/ReactiveX/RxJava/compare/3aaed2673d3732f8c6c015c04576cbb9491cb72b...2e90948f2d90b73e74b611cefa7982ef1a975826?src=pr)'
p2208
asg14
S'vanniktech:1.x_dooneach_sync'
p2209
sbsI4419
(iPull
Pull
p2210
(dp2211
g3
S'Matches `Observable.extend()`. These are all `@Experimental` (including `Observable`). Perhaps we want to rename them all `to()` to match 2.x?'
p2212
sg5
S'1.x: add extend() for single and completable.'
p2213
sg7
(lp2214
sg10
I4419
sg11
(lp2215
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4419?src=pr) is 84.29% (diff: 100%)\n> Merging [#4419](https://codecov.io/gh/ReactiveX/RxJava/pull/4419?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.15%**\n\n```diff\n@@                1.x      #4419   diff @@\n==========================================\n  Files           270        272     +2   \n  Lines         17516      17528    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14792      14775    -17   \n- Misses         1869       1898    +29   \n  Partials        855        855          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a5c9453...ac3c291](https://codecov.io/gh/ReactiveX/RxJava/compare/a5c945399ff7325d91d109b607fe6406a27ca838...ac3c2912a365ac4d76b196588e20daafefb263de?src=pr)'
p2216
asg14
S'JakeWharton:jw/single-completable-extend'
p2217
sbsI4421
(iPull
Pull
p2218
(dp2219
g3
S"Changes:\r\n\r\n  - fix spelling mistakes\r\n  - more consistent parameter naming scheme based on #1353 (but incomplete, RC2)\r\n  - fix bugs due to wrong variable naming\r\n  - compact logic expressions\r\n  - fix `Completable.doAfterTerminate` not called the right time\r\n  - `onErrorReturnValue` renamed to `onErrorReturnItem`\r\n\r\n@DavidMGross once this PR has been merged, it would be great you submitted one that has `//TODO` markers on those lines that need attention. The naming scheme you suggested doesn't come intuitively to me so I may skip many of them without the markers."
p2220
sg5
S'2.x: fixes, cleanups, renames'
p2221
sg7
(lp2222
S'Bug'
p2223
aS'Cleanup'
p2224
aS'Documentation'
p2225
asg10
I4421
sg11
(lp2226
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4421?src=pr) is 69.48% (diff: 73.27%)\n> Merging [#4421](https://codecov.io/gh/ReactiveX/RxJava/pull/4421?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4421   diff @@\n==========================================\n  Files           454        454          \n  Lines         32372      32323    -49   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5214          \n==========================================\n- Hits          22482      22459    -23   \n+ Misses         7692       7662    -30   \n- Partials       2198       2202     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [35c8da6...b05aa63](https://codecov.io/gh/ReactiveX/RxJava/compare/35c8da6ca2f0c446d9e50d1c5507cc80e5ccb996...b05aa630a9a8eda6007863512395b642cca98a62?src=pr)'
p2227
aS':+1:'
p2228
asg14
S'akarnokd:CleanupIntelliJ'
p2229
sbsI4422
(iPull
Pull
p2230
(dp2231
g3
S'This PR adds the `subscribeWith` methods to the base reactive types to mainly help with the 1.x to 2.x changeover as 2.x `subscribe(Subscriber)` return void instead of the resource/cancellation/unsubscription type `Disposable`. See the javadocs and the unit test for example use.\r\n\r\nRelated: #4400'
p2232
sg5
S'2.x: add subscribewith to get back the subscriber/observer fluently'
p2233
sg7
(lp2234
S'Enhancement'
p2235
asg10
I4422
sg11
(lp2236
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4422?src=pr) is 69.56% (diff: 100%)\n> Merging [#4422](https://codecov.io/gh/ReactiveX/RxJava/pull/4422?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4422   diff @@\n==========================================\n  Files           454        454          \n  Lines         32323      32331     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5214          \n==========================================\n+ Hits          22470      22491    +21   \n+ Misses         7651       7640    -11   \n+ Partials       2202       2200     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7aa0b34...2f68644](https://codecov.io/gh/ReactiveX/RxJava/compare/7aa0b347cea8aa0e395a7f9ec488d7006647a329...2f686449a6173a80713fe418e95819237fd5b90b?src=pr)'
p2237
aS':+1:'
p2238
asg14
S'akarnokd:SubscribeWith'
p2239
sbsI4423
(iPull
Pull
p2240
(dp2241
g3
S'This deprecates extend() on Observable, which is a less powerful version of these functions.'
p2242
sg5
S'1.x: add to() conversion function to all stream types.'
p2243
sg7
(lp2244
S'Enhancement'
p2245
asg10
I4423
sg11
(lp2246
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4423?src=pr) is 84.33% (diff: 100%)\n> Merging [#4423](https://codecov.io/gh/ReactiveX/RxJava/pull/4423?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.11%**\n\n```diff\n@@                1.x      #4423   diff @@\n==========================================\n  Files           270        270          \n  Lines         17516      17518     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14792      14773    -19   \n- Misses         1869       1892    +23   \n+ Partials        855        853     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a5c9453...68ff636](https://codecov.io/gh/ReactiveX/RxJava/compare/a5c945399ff7325d91d109b607fe6406a27ca838...68ff636a5ba3a13c67549e2c70ed3a6e913a44e7?src=pr)'
p2247
aS':+1:'
p2248
asg14
S'JakeWharton:jw/too'
p2249
sbsI4424
(iPull
Pull
p2250
(dp2251
g3
S"  - Moved old javadocs under `/1.x/javadoc/version_number`\r\n  - Added `/2.x/javadoc/`\r\n  - Updated `/javadoc` to have the 1.1.9 documentation\r\n\r\nThere was a small hiccup with the 2.x release as the javadoc didn't properly generate (bad link and missing css). I've included the locally generated javadoc here which is titled 2.0.0-DP0-SNAPSHOT at the moment."
p2252
sg5
S'update javadoc 1.1.9, add dirs and 2.0.0-rc1 doc'
p2253
sg7
(lp2254
S'Documentation'
p2255
asg10
I4424
sg11
(lp2256
sg14
S'akarnokd:Javadoc119and200RC1'
p2257
sbsI4425
(iPull
Pull
p2258
(dp2259
g3
S'This is only the `Completable` part of #4420. It does not make `CompletableSubscriber` an abstract class nor create `Single.Operator`.'
p2260
sg5
S"1.x: remove 'completable' prefix from nested interfaces, move its subscription to top-level."
p2261
sg7
(lp2262
S'Enhancement'
p2263
asg10
I4425
sg11
(lp2264
S'[Compiler error](https://travis-ci.org/ReactiveX/RxJava/builds/155096130#L200).'
p2265
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4425?src=pr) is 84.23% (diff: 68.04%)\n> Merging [#4425](https://codecov.io/gh/ReactiveX/RxJava/pull/4425?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.16%**\n\n```diff\n@@                1.x      #4425   diff @@\n==========================================\n  Files           270        270          \n  Lines         17518      17548    +30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2677          \n==========================================\n- Hits          14785      14781     -4   \n- Misses         1877       1909    +32   \n- Partials        856        858     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [743f164...55bf5e7](https://codecov.io/gh/ReactiveX/RxJava/compare/743f164b1b2f20ed34ae97a48872a0c548375911...55bf5e7a678b67d4d98880529055a78143e502b7?src=pr)'
p2266
aS'Looks okay. What about the `@Deprecated` markers?'
p2267
aS"Oh, sure. I'll add them in real quick. I wasn't sure on your stance on them, but I think it'll make migration easier."
p2268
aS"Yes, having deprecated markers is more forgiveable than lacking the entire type. I don't know how extensively `Completable` is in use by other libraries right now (beyond RxJavaReactiveStreams, Reactor's converter, Retrofit`)."
p2269
aS'Updated!'
p2270
aS'https://travis-ci.org/ReactiveX/RxJava/builds/155134046#L200'
p2271
aS'Compilation issue resolved.'
p2272
aS'I know,  still waiting for a second approval.'
p2273
aS"Okay, let's have this. One can complain anytime later."
p2274
asg14
S'JakeWharton:jw/start-normalization'
p2275
sbsI4427
(iPull
Pull
p2276
(dp2277
g3
S'`fromAsync` did not handle post-terminal events properly when overflow occurs.\r\n\r\nAdded three unit tests that failed on original logic.\r\n'
p2278
sg5
S'1.x: fromasync - handle post-terminal events'
p2279
sg7
(lp2280
S'Bug'
p2281
asg10
I4427
sg11
(lp2282
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4427?src=pr) is 84.26% (diff: 73.33%)\n> Merging [#4427](https://codecov.io/gh/ReactiveX/RxJava/pull/4427?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.12%**\n\n```diff\n@@                1.x      #4427   diff @@\n==========================================\n  Files           270        270          \n  Lines         17518      17533    +15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2677       2680     +3   \n==========================================\n- Hits          14785      14775    -10   \n- Misses         1877       1897    +20   \n- Partials        856        861     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [743f164...ed0dae4](https://codecov.io/gh/ReactiveX/RxJava/compare/743f164b1b2f20ed34ae97a48872a0c548375911...ed0dae4a862d32000c37be648fc06ca71adc4848?src=pr)'
p2283
asg14
S'davidmoten:fromAsync-handle-post-terminal-events'
p2284
sbsI4428
(iPull
Pull
p2285
(dp2286
g3
S'Post-terminal event handling for `Observable.collect`.\r\n\r\nAdded three unit tests that failed on original logic.'
p2287
sg5
S'2.x: collect - handle post terminal events  - observable'
p2288
sg7
(lp2289
S'Bug'
p2290
aS'Cleanup'
p2291
asg10
I4428
sg11
(lp2292
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4428?src=pr) is 69.51% (diff: 100%)\n> Merging [#4428](https://codecov.io/gh/ReactiveX/RxJava/pull/4428?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4428   diff @@\n==========================================\n  Files           454        454          \n  Lines         32331      32340     +9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5214       5217     +3   \n==========================================\n+ Hits          22468      22482    +14   \n+ Misses         7664       7653    -11   \n- Partials       2199       2205     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d37bb20...3b7bea3](https://codecov.io/gh/ReactiveX/RxJava/compare/d37bb20a44fae19b572775deb3abf8fac18efffb...3b7bea3d25c0df72f0b3499bc84e9c3b4203b118?src=pr)'
p2293
asg14
S'davidmoten:2.x-collect-handle-post-terminal-events-observable'
p2294
sbsI4430
(iPull
Pull
p2295
(dp2296
g3
S'The new tests revealed some bugs (nothing major).'
p2297
sg5
S'2.x improve coverage, fix bugs'
p2298
sg7
(lp2299
S'Bug'
p2300
aS'Test'
p2301
asg10
I4430
sg11
(lp2302
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4430?src=pr) is 70.49% (diff: 60.29%)\n> Merging [#4430](https://codecov.io/gh/ReactiveX/RxJava/pull/4430?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.98%**\n\n```diff\n@@                2.x      #4430   diff @@\n==========================================\n  Files           454        454          \n  Lines         32340      32371    +31   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5217       5223     +6   \n==========================================\n+ Hits          22481      22820   +339   \n+ Misses         7663       7422   -241   \n+ Partials       2196       2129    -67   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6dbeff4...57eda49](https://codecov.io/gh/ReactiveX/RxJava/compare/6dbeff4b58a7fcfdc088751210aa2b84f0831634...57eda4942c9cd020b4e689d884949d4585666a6d?src=pr)'
p2303
aS':+1:'
p2304
aS'Updated those in the first commit in this PR and all other places that used `Exceptions.propagate`.'
p2305
aS'Looks good'
p2306
asg14
S'akarnokd:Coverage826'
p2307
sbsI4431
(iPull
Pull
p2308
(dp2309
g3
S'  - updated `Single.cache()` to be lock-free, to allocate less and work properly\r\n  - added test coverage to some classes\r\n  - remove unused internal `EmptyObserver`\r\n  - update `PublishSubject` to support cross-cancellation\r\n  - update `TestHelper.race` to use the current thread for one of the tasks'
p2310
sg5
S'2.x: coverage, fixes, cleanup 8/27-1'
p2311
sg7
(lp2312
S'Bug'
p2313
aS'Cleanup'
p2314
asg10
I4431
sg11
(lp2315
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4431?src=pr) is 70.90% (diff: 87.77%)\n> Merging [#4431](https://codecov.io/gh/ReactiveX/RxJava/pull/4431?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.51%**\n\n```diff\n@@                2.x      #4431   diff @@\n==========================================\n  Files           454        453     -1   \n  Lines         32371      32383    +12   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5223       5233    +10   \n==========================================\n+ Hits          22786      22962   +176   \n+ Misses         7447       7303   -144   \n+ Partials       2138       2118    -20   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0094304...4cce05b](https://codecov.io/gh/ReactiveX/RxJava/compare/0094304aecbbf9cd9b9b6cb1b7fe524a4b2ccb75...4cce05b5d3617517ae6558e84c74de066c2234b0?src=pr)'
p2316
aS':+1:'
p2317
asg14
S'akarnokd:Coverage827_1'
p2318
sbsI4432
(iPull
Pull
p2319
(dp2320
g3
g57
sg5
S'fix typo.'
p2321
sg7
(lp2322
sg10
I4432
sg11
(lp2323
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4432?src=pr) is 84.40% (diff: 100%)\n> Merging [#4432](https://codecov.io/gh/ReactiveX/RxJava/pull/4432?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4432   diff @@\n==========================================\n  Files           270        270          \n  Lines         17533      17533          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2680       2680          \n==========================================\n- Hits          14801      14799     -2   \n+ Misses         1878       1877     -1   \n- Partials        854        857     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [5ac4d2a...877ed4a](https://codecov.io/gh/ReactiveX/RxJava/compare/5ac4d2aed5d8ed93c6835e26ddfb0f0b944d5c89...877ed4ad7c6e533b36fce41e8b4a1b5cd4c131a1?src=pr)'
p2324
aS'This one is also present in the 2.x branch'
p2325
aS'Addressed.'
p2326
asg14
S'hotchemi:hotchemi/typo'
p2327
sbsI4433
(iPull
Pull
p2328
(dp2329
g3
g57
sg5
S'fix typo.'
p2330
sg7
(lp2331
sg10
I4433
sg11
(lp2332
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4433?src=pr) is 70.97% (diff: 100%)\n> Merging [#4433](https://codecov.io/gh/ReactiveX/RxJava/pull/4433?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4433   diff @@\n==========================================\n  Files           453        453          \n  Lines         32383      32383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5233       5233          \n==========================================\n+ Hits          22977      22984     +7   \n+ Misses         7288       7285     -3   \n+ Partials       2118       2114     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4c0f93b...c5d9453](https://codecov.io/gh/ReactiveX/RxJava/compare/4c0f93be9e85d77a90ad4dc877e475621fc7ccd3...c5d94538802f35ff0a86a18d76973dbfeda9da8d?src=pr)'
p2333
asg14
S'hotchemi:hotchemi/typo2'
p2334
sbsI4434
(iPull
Pull
p2335
(dp2336
g3
S'  - Remove unused code\r\n  - Improve coverage of `Single`, `Completable` and `Observable`\r\n  - Fix minor bugs in operators'
p2337
sg5
S'2.x: cleanup, bugfixes, coverage 8/27-2'
p2338
sg7
(lp2339
S'Bug'
p2340
aS'Cleanup'
p2341
aS'Coverage'
p2342
asg10
I4434
sg11
(lp2343
S':+1:'
p2344
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4434?src=pr) is 73.67% (diff: 92.59%)\n> Merging [#4434](https://codecov.io/gh/ReactiveX/RxJava/pull/4434?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **2.74%**\n\n```diff\n@@                2.x      #4434   diff @@\n==========================================\n  Files           453        453          \n  Lines         32383      32373    -10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5233       5220    -13   \n==========================================\n+ Hits          22969      23852   +883   \n+ Misses         7300       6437   -863   \n+ Partials       2114       2084    -30   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [70d36fb...ff7d7ff](https://codecov.io/gh/ReactiveX/RxJava/compare/70d36fbdfcb75e607e7512616205ab6fdd557e96...ff7d7ff67123f4d1f0cd80432d8006c1635b90b3?src=pr)'
p2345
asg14
S'akarnokd:Coverage827_2'
p2346
sbsI4435
(iPull
Pull
p2347
(dp2348
g3
S"  - Add tests\r\n  - fix mistakes in `TestObserver`\r\n  - Combine `DisposableHelper` and its inner `Disposed` enum\r\n  - Compact `NotificationLite` and its inner `Complete` enum\r\n  - Fix NPE in `ListCompositeDisposable` constructor\r\n  - Fix `DeferredScalarObserver` fusion and state management\r\n  - Turned a few empty enums into classes with private constructor: coverage can't cover them 100% otherwise. These empty enums have a constructor in their bytecode which never gets called and thus there's always 10 instructions / 2 method calls missing.\r\n  - Removed `TestObserver.awaitDone()`, one should always await with timeout"
p2349
sg5
S'2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1'
p2350
sg7
(lp2351
S'Bug'
p2352
aS'Cleanup'
p2353
aS'Coverage'
p2354
aS'Test'
p2355
asg10
I4435
sg11
(lp2356
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4435?src=pr) is 75.11% (diff: 94.80%)\n> Merging [#4435](https://codecov.io/gh/ReactiveX/RxJava/pull/4435?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **1.43%**\n\n```diff\n@@                2.x      #4435   diff @@\n==========================================\n  Files           453        453          \n  Lines         32373      32399    +26   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5220       5216     -4   \n==========================================\n+ Hits          23852      24337   +485   \n+ Misses         6435       6037   -398   \n+ Partials       2086       2025    -61   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [25e78c5...021a001](https://codecov.io/gh/ReactiveX/RxJava/compare/25e78c553a079bd84a4d8ae827c6dad899de625c...021a00180fa307afa4c3af0648bc32120a72be83?src=pr)'
p2357
aS"> Turned a few empty enums into classes with private constructor\r\n\r\nThis saves methods for Android as well. I wanted to see how many were being added before pressing the issue about this convention, but nice to see there's another motivation for not using enums here."
p2358
aS':+1:'
p2359
asg14
S'akarnokd:Coverage828_1'
p2360
sbsI4436
(iPull
Pull
p2361
(dp2362
g3
S'In #4321 I hit on the problem of needing a lazy object that could either be zero or one value. In that issue the idea of switching the return value of `reduce(R, Func2<R,T,R>)` from `Observable<R>` to `Single<R>` because that operator can only ever produce an Observable that emits exactly one value. The problem was that `reduce(Func2<T,T,T>)` could not be changed to `Single<T>` because the source Observable could be empty and therefore not produce one and only one value.\r\n\r\nTo solve this problem I mentioned we could create a lazy type that represents either 1 or no value could fill the gap between `Completable` and `Single<T>`.\r\n\r\nThis PR is for the introduction of the `Maybe<T>` type.'
p2363
sg5
S'2.x: maybe for lazy optional'
p2364
sg7
(lp2365
S'Feature-Request'
p2366
asg10
I4436
sg11
(lp2367
S'You referenced Java 8 types in your code.'
p2368
aS'My problem with adding another base type is the increased maintenance cost. Currently we have 3 + 4 types in the major versions and it is likely adding a new operator, overload or making a fix has to be done for all of them. I\'m one-man armying RxJava for a considerable time now but I have my limits. Therefore my suggestion is that you have this `Maybe` as a separate library that depends on RxJava 2 but RxJava 2 doesn\'t depend on it. Since RxJava 2 offers fluent conversion method(s), it should be only a small inconvenience to convert to `Maybe`:\r\n\r\n```java\r\nFlowable<Integer> source = Flowable.range(1, 10);\r\n\r\nMaybe<Integer> mb = source.to(Maybe.reduceFlowable((a, b) -> a + b));\r\n\r\nmb.filter(v -> false).subscribe(\r\n    System.out::println, Throwable::printStackTrace, () -> System.out.println("Done"));\r\n\r\nmb.toFlowable().subscribe(\r\n    System.out::println, Throwable::printStackTrace, () -> System.out.println("Done"));\r\n```'
p2369
aS'As I mentioned my plans were to greatly increase the coupling between Observable & Flowable to Single & Maybe by having the various operators that return exactly 1 or sometimes 1 value to these two types.'
p2370
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4436?src=pr) is 71.96% (diff: 0.07%)\n> Merging [#4436](https://codecov.io/gh/ReactiveX/RxJava/pull/4436?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **3.14%**\n\n```diff\n@@                2.x      #4436   diff @@\n==========================================\n  Files           453        499     +46   \n  Lines         32399      33691   +1292   \n  Methods           0          0           \n  Messages          0          0           \n  Branches       5216       5299     +83   \n==========================================\n- Hits          24336      24246     -90   \n- Misses         6034       7431   +1397   \n+ Partials       2029       2014     -15   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f97c50d...118f21a](https://codecov.io/gh/ReactiveX/RxJava/compare/f97c50dadcb40a0f6f41734087a1c52d9df55d08...118f21adcabde87b393bb7155a148308ec20de78?src=pr)'
p2371
aS"I'm willing to accept `Maybe` as the 5th reactive type but the class needs javadoc and unit tests that verify the most basic behavior of each operator in it.\r\n\r\n/cc @artem-zinnatullin @JakeWharton @zsxwing "
p2372
aS"How about you just contribute `Maybe` with operators throwing `UnsupportedOperationException` and I'll add optimized implementations and tests for them as I go?"
p2373
aS'Also Reactor has the [Mono](https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/Mono.java) type exactly for this purpose, I suggest you try that first.'
p2374
aS"I'm not strictly opposed because\r\n\r\n> my plans were to greatly increase the coupling between Observable & Flowable to Single & Maybe by having the various operators that return exactly 1 or sometimes 1 value to these two types.\r\n\r\nappeals to me, but I don't have a really strong feeling without using it more."
p2375
aS"Okay then, let's merge this and see how it works out."
p2376
aS"Please don't post PRs targeting Maybe - I'm working on cleaning it up a bit (plus a few other classes if I find something wrong); the code copied from an older commit of the other types."
p2377
asg14
S'abersnaze:maybe'
p2378
sbsI4437
(iPull
Pull
p2379
(dp2380
g3
S'  - open up `verifyPositive` as protected for validation convenience in subclasses\r\n  - improve size and state handling of `DeferredScalarSubscription`\r\n  - enable async-fusion on `AsyncSubject` and `AsyncProcessor`, compact the classes\r\n  - **behavior change** `AsyncX.hasValue()` returns false until the terminal state has been reached\r\n  - compact the classes `PublishSubject`, `PublishProcessor`, `BehaviorSubject`, `BehaviorProcessor`, `ReplaySubject` and `ReplayProcessor`\r\n  - enable async-fusion on `UnicastSubject`, compact the class\r\n  - rename `BaseXQueueDisposable` to `BasicXQueueDisposable` to match `BasicXQueueSubscription`\r\n  - introduce `DeferredScalarDisposable`, refactor `DeferredScalarObserver`\r\n  - adjust tests that asserted on the former parameter names\r\n  - subjects and processors can now be created with newing up their constructor: `new PublishSubject<>()`; there is no mandatory shared state between the `Observer` part and the `Observable` part because both are now stateless on their own.\r\n  '
p2381
sg5
S'2.x: subject/processor improvements & small cleanup'
p2382
sg7
(lp2383
S'Cleanup'
p2384
aS'Enhancement'
p2385
asg10
I4437
sg11
(lp2386
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4437?src=pr) is 75.02% (diff: 80.16%)\n> Merging [#4437](https://codecov.io/gh/ReactiveX/RxJava/pull/4437?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                2.x      #4437   diff @@\n==========================================\n  Files           453        454     +1   \n  Lines         32399      32271   -128   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5216       5208     -8   \n==========================================\n- Hits          24336      24212   -124   \n- Misses         6034       6039     +5   \n+ Partials       2029       2020     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f97c50d...09a3448](https://codecov.io/gh/ReactiveX/RxJava/compare/f97c50dadcb40a0f6f41734087a1c52d9df55d08...09a344879852dd2604947429a1656f0b91da271a?src=pr)'
p2387
aS'thanks :+1:'
p2388
asg14
S'akarnokd:CleanupAndImprovements829_1'
p2389
sbsI4441
(iPull
Pull
p2390
(dp2391
g3
S'Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy\r\nFix drop strategy logic in FlowableOnBackpressureBufferStrategy\r\nAdd unit test for FlowableOnBackpressureBufferStrategy, copied from FlowableOnBackpressureBufferTest, there is still some work needed to have a better coverage'
p2392
sg5
S'fix flowableonbackpressurebufferstrategy'
p2393
sg7
(lp2394
S'Bug'
p2395
asg10
I4441
sg11
(lp2396
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4441?src=pr) is 75.32% (diff: 66.66%)\n> Merging [#4441](https://codecov.io/gh/ReactiveX/RxJava/pull/4441?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.17%**\n\n```diff\n@@                2.x      #4441   diff @@\n==========================================\n  Files           454        454          \n  Lines         32271      32274     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5208       5209     +1   \n==========================================\n+ Hits          24249      24309    +60   \n+ Misses         6002       5928    -74   \n- Partials       2020       2037    +17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a856572...1617087](https://codecov.io/gh/ReactiveX/RxJava/compare/a856572327528ee05c1d1ab05426343aa0c5224b...16170870a1c3c051cb759b1e82f95c5a78878439?src=pr)'
p2397
aS'Thanks! :+1:'
p2398
asg14
S'matgabriel:2.x'
p2399
sbsI4442
(iPull
Pull
p2400
(dp2401
g3
S'  - Add javadoc to `AsyncEmitter.BackpressureMode` (#4199)\r\n  - Deprecate `Observable.fromAsync`, add `Observable.fromEmitter` instead (#4255)\r\n  - Add `Completable.fromEmitter()` (#4356)\r\n  - Add missing placeholder `@since` tags\r\n  - Fix some generics error `RxJavaHooks`\r\n  - Add race helper to `TestUtil`\r\n  - Fix javadoc warnings'
p2402
sg5
S'1.x: cleanup, javadoc, completable.fromemitter'
p2403
sg7
(lp2404
S'Cleanup'
p2405
aS'Documentation'
p2406
aS'Enhancement'
p2407
asg10
I4442
sg11
(lp2408
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4442?src=pr) is 84.19% (diff: 97.50%)\n> Merging [#4442](https://codecov.io/gh/ReactiveX/RxJava/pull/4442?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.05%**\n\n```diff\n@@                1.x      #4442   diff @@\n==========================================\n  Files           270        271     +1   \n  Lines         17563      17599    +36   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2680       2683     +3   \n==========================================\n+ Hits          14797      14817    +20   \n- Misses         1909       1919    +10   \n- Partials        857        863     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [db3ff46...fdba5ed](https://codecov.io/gh/ReactiveX/RxJava/compare/db3ff46c7ad37cca4224f07d517f108357201220...fdba5ed6e1fd8bcd3912394ae14fb9f6664a4c1c?src=pr)'
p2409
aS':+1:'
p2410
asg14
S'akarnokd:Cleanup1x830_1'
p2411
sbsI4447
(iPull
Pull
p2412
(dp2413
g3
g57
sg5
S"fix withlatestfrom's tparam"
p2414
sg7
(lp2415
S'Bug'
p2416
asg10
I4447
sg11
(lp2417
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4447?src=pr) is 84.23% (diff: 100%)\n> Merging [#4447](https://codecov.io/gh/ReactiveX/RxJava/pull/4447?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                1.x      #4447   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17599          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14818      14825     +7   \n+ Misses         1919       1916     -3   \n+ Partials        862        858     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [0ee2e61...c9086eb](https://codecov.io/gh/ReactiveX/RxJava/compare/0ee2e61aa43545a134d9bf210f92df76d3baa045...c9086ebb863910b4ca3f617f117a11e0f1fc9ac1?src=pr)'
p2418
asg14
S'zsxwing:withLatestFrom-tparam'
p2419
sbsI4450
(iPull
Pull
p2420
(dp2421
g3
S'  - Improve coverage of internal classes\r\n  - Turn more empty enums into classes with private constructors\r\n  - Fix `Single.subscribeOn` and `Completable.subscribeOn` disposable management.\r\n  - Create a compact `FutureSubscriber` and `FutureObserver` classes, drop their former enums\r\n  - Deprecate `Disposables.from` methods, add `Disposables.fromX` methods where X = argument type\r\n  - Fix error management in `Completable.mergeX` operators.\r\n  - Remove unused methods from internal classes'
p2422
sg5
S'2.x: fixes, cleanup, coverage 8/31-1'
p2423
sg7
(lp2424
S'Bug'
p2425
aS'Cleanup'
p2426
aS'Coverage'
p2427
aS'Test'
p2428
asg10
I4450
sg11
(lp2429
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4450?src=pr) is 75.82% (diff: 69.75%)\n> Merging [#4450](https://codecov.io/gh/ReactiveX/RxJava/pull/4450?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.46%**\n\n```diff\n@@                2.x      #4450   diff @@\n==========================================\n  Files           454        454          \n  Lines         32274      32200    -74   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5209       5178    -31   \n==========================================\n+ Hits          24322      24417    +95   \n+ Misses         5914       5769   -145   \n+ Partials       2038       2014    -24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [81badc3...0c30b08](https://codecov.io/gh/ReactiveX/RxJava/compare/81badc3aa4732664614c160941eaabbcb668e060...0c30b087277850f637ae156b582bce8858580b17?src=pr)'
p2430
aS':+1:'
p2431
asg14
S'akarnokd:CleanupFixes831'
p2432
sbsI4452
(iPull
Pull
p2433
(dp2434
g3
S'`Func1<Throwable,...>` parameter should be `Func1<? super Throwable, ...>`'
p2435
sg5
S'enhance generics on onerrorresumenext and onerrorreturn'
p2436
sg7
(lp2437
S'Cleanup'
p2438
asg10
I4452
sg11
(lp2439
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4452?src=pr) is 84.28% (diff: 100%)\n> Merging [#4452](https://codecov.io/gh/ReactiveX/RxJava/pull/4452?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4452   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17599          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14831      14833     +2   \n+ Misses         1916       1910     -6   \n- Partials        852        856     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1be73de...a642def](https://codecov.io/gh/ReactiveX/RxJava/compare/1be73dec2be38ac662b416bccc727b3e49888481...a642def233b6d57e39c6ccd4a7d84d231efa08d0?src=pr)'
p2440
asg14
S'davidmoten:on-error-resume-return-generics-fix'
p2441
sbsI4453
(iPull
Pull
p2442
(dp2443
g3
S'In its current form, `awaitValueCount()` is the only `TestSubscriber#await*`method that throws a checked exception (that is, `InterruptedException`), whereas the others wrap it with a `IllegalStateException`. This spreads a try-catch disease throughout the entire code base where `awaitValueCount()` is used. One can argue that why not just declaring the exception in the caller method footprint: Because you might be implementing an interface (e.g. `Runnable`) which does not allow any exceptions in its footprint. This patch wraps the `InterruptedException` with an unchecked exception in `TestSubscriber#awaitValueCount()`.'
p2444
sg5
S'wrap interruptedexception with an unchecked exception in testsubscriber#awaitvaluecount().'
p2445
sg7
(lp2446
S'Enhancement'
p2447
asg10
I4453
sg11
(lp2448
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4453?src=pr) is 84.25% (diff: 50.00%)\n> Merging [#4453](https://codecov.io/gh/ReactiveX/RxJava/pull/4453?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                1.x      #4453   diff @@\n==========================================\n  Files           271        271          \n  Lines         17599      17602     +3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n+ Hits          14825      14831     +6   \n  Misses         1915       1915          \n+ Partials        859        856     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [70bb06a...d0294c9](https://codecov.io/gh/ReactiveX/RxJava/compare/70bb06af350a7f6f611985f9b61e48ce200d6219...d0294c9970b7657e90f27684ddcdab3b5c92950a?src=pr)'
p2449
aS':+1:'
p2450
asg14
S'vy:1.x'
p2451
sbsI4454
(iPull
Pull
p2452
(dp2453
g3
S"This PR reimplements the `Maybe` with more up-to-date algorithms (the original was a copy-paste of some older Single and Completable code it seems) and adds javadoc and tests along the way. Not all operators have been rewritten yet (and no placeholders). Early adopters should refer to the `toX` methods on the base reactive types. The PR also adds the `RxJavaPlugins` hooks to support `Maybe`.\r\n\r\nIn addition, I've fixed javadoc mistakes in the other base reactive types (referring to the wrong types)."
p2454
sg5
S'2.x: start reimplementing maybe with up-to-date javadoc, tests and algo'
p2455
sg7
(lp2456
S'Cleanup'
p2457
aS'Enhancement'
p2458
asg10
I4454
sg11
(lp2459
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4454?src=pr) is 75.96% (diff: 77.49%)\n> Merging [#4454](https://codecov.io/gh/ReactiveX/RxJava/pull/4454?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **3.26%**\n\n```diff\n@@                2.x      #4454   diff @@\n==========================================\n  Files           499        485     -14   \n  Lines         33620      33041    -579   \n  Methods           0          0           \n  Messages          0          0           \n  Branches       5269       5240     -29   \n==========================================\n+ Hits          24439      25098    +659   \n+ Misses         7181       5907   -1274   \n- Partials       2000       2036     +36   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b8a3320...cebbe6d](https://codecov.io/gh/ReactiveX/RxJava/compare/b8a3320cb594f291191fa4a6bee6ed12eff62ffe...cebbe6dc7d68da9e6cbd5cc3d6e7e0ec1ecce920?src=pr)'
p2460
aS':+1:'
p2461
aS'Thanks @JakeWharton !'
p2462
asg14
S'akarnokd:Cleanup901_1'
p2463
sbsI4458
(iPull
Pull
p2464
(dp2465
g3
S'#4456 \r\n\r\nCompletable already used .doOnDispose() however I renamed the arguments to match Observable and Single'
p2466
sg5
S'2.x: rename observable and single #dooncancel to #doondispose'
p2467
sg7
(lp2468
S'Cleanup'
p2469
asg10
I4458
sg11
(lp2470
S"The diff for observable doesn't show but the offline-comparison only lists 30-40 lines changes. Did you run some whitespace cleanup?"
p2471
aS"@akarnokd Whoops, you're right. Sorry. Auto formatter seems to have changed some whitespaces. I'll revert that."
p2472
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4458?src=pr) is 75.94% (diff: 100%)\n> Merging [#4458](https://codecov.io/gh/ReactiveX/RxJava/pull/4458?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4458   diff @@\n==========================================\n  Files           485        485          \n  Lines         33042      33042          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5240       5240          \n==========================================\n+ Hits          25082      25093    +11   \n+ Misses         5915       5909     -6   \n+ Partials       2045       2040     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [52dc050...04a61cb](https://codecov.io/gh/ReactiveX/RxJava/compare/52dc0500c9e7fea96d614d847f3a04eb1afd91dd...04a61cba0851446919edd312d6c303f7da82f854?src=pr)'
p2473
aS':+1:'
p2474
asg14
S'Mauin:doOnDispose'
p2475
sbsI4460
(iPull
Pull
p2476
(dp2477
g3
S"First part of #4457 \r\n\r\nIs it okay that I reused Notification like that?\r\n\r\nAlso are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6, as my default seems to be Java 8 and I don't get any errors shown in the IDE."
p2478
sg5
S'1.x: completable add dooneach'
p2479
sg7
(lp2480
S'Enhancement'
p2481
asg10
I4460
sg11
(lp2482
S'Okay but you have [generics problem](https://travis-ci.org/ReactiveX/RxJava/builds/156916384#L166).'
p2483
aS"Alright it's fixed now."
p2484
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4460?src=pr) is 84.23% (diff: 100%)\n> Merging [#4460](https://codecov.io/gh/ReactiveX/RxJava/pull/4460?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4460   diff @@\n==========================================\n  Files           271        271          \n  Lines         17602      17610     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2684     +1   \n==========================================\n+ Hits          14826      14833     +7   \n- Misses         1918       1921     +3   \n+ Partials        858        856     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [30da1aa...eacbf59](https://codecov.io/gh/ReactiveX/RxJava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354...eacbf59a11f6758239012c4edd0baa07a502b7fc?src=pr)'
p2485
aS':+1:'
p2486
asg14
S'vanniktech:1.x_completable_do_on_each'
p2487
sbsI4461
(iPull
Pull
p2488
(dp2489
g3
S"Really not that happy with `onNotification.call(Notification.<T>createOnNext(t));` do you guys have any other way of doing this? There's no way of creating a Notification that has the `onCompleted` plus a value. A new one could be introduced there though. Also the `doOnEachSuccess` test feels clunky.\r\n\r\nAlso why does Single when using the `do` methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.\r\n\r\nJavadoc will follow once we sorted out the few nits here.\r\n\r\nFixes #4457 "
p2490
sg5
S'1.x: single add dooneach'
p2491
sg7
(lp2492
S'Enhancement'
p2493
asg10
I4461
sg11
(lp2494
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4461?src=pr) is 84.28% (diff: 100%)\n> Merging [#4461](https://codecov.io/gh/ReactiveX/RxJava/pull/4461?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.09%**\n\n```diff\n@@                1.x      #4461   diff @@\n==========================================\n  Files           271        272     +1   \n  Lines         17607      17647    +40   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2684       2687     +3   \n==========================================\n+ Hits          14824      14874    +50   \n+ Misses         1923       1913    -10   \n  Partials        860        860          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [11343ae...0ea399f](https://codecov.io/gh/ReactiveX/RxJava/compare/11343ae031feb01d3d08ba5cd0e5f275ed798e68...0ea399fc6f8f3cab60a2baa3763882ac67d0fd77?src=pr)'
p2495
aS"I'll continue this on Monday and make all suggested changes"
p2496
aS"[ExceptionsTest#testOnErrorExceptionIsThrownFromSingleDoOnSuccess](https://github.com/ReactiveX/RxJava/blob/11343ae031feb01d3d08ba5cd0e5f275ed798e68/src/test/java/rx/exceptions/ExceptionsTest.java#L288) fails although I'm not quite sure what the purpose of that test is. Also it seems a bit off to me. Can you give some insights there?"
p2497
aS'Looks like removing the toObservable.toSingle no longer wraps the subscriber into a SafeSubscriber and the test just crashes with a different exception.'
p2498
aS'No exception is being thrown at all.'
p2499
aS'Can you single step the test? In the orginal DoOnEach, it has throwifFatal an throwOrReport you missed btw.'
p2500
aS':+1:'
p2501
asg14
S'vanniktech:1.x_single_do_on_each'
p2502
sbsI4463
(iPull
Pull
p2503
(dp2504
g3
g57
sg5
S'1.x: remove some unused fields'
p2505
sg7
(lp2506
S'Cleanup'
p2507
asg10
I4463
sg11
(lp2508
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4463?src=pr) is 84.23% (diff: 100%)\n> Merging [#4463](https://codecov.io/gh/ReactiveX/RxJava/pull/4463?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                1.x      #4463   diff @@\n==========================================\n  Files           271        271          \n  Lines         17602      17599     -3   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n- Hits          14826      14824     -2   \n+ Misses         1918       1917     -1   \n  Partials        858        858          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [30da1aa...8ec7591](https://codecov.io/gh/ReactiveX/RxJava/compare/30da1aa1e38a5ead8965d1784ab8c6df8111d354...8ec7591cb45121c8f09476d68ef02efb39a56960?src=pr)'
p2509
asg14
S'vanniktech:1.x_unused_fields'
p2510
sbsI4466
(iPull
Pull
p2511
(dp2512
g3
S'Fix #4462 \r\n\r\nIt might just as well shine some light into which method should be used and explain why there are 2'
p2513
sg5
S'1.x: deprecate notification.createoncompleted'
p2514
sg7
(lp2515
S'Cleanup'
p2516
asg10
I4466
sg11
(lp2517
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4466?src=pr) is 84.26% (diff: 100%)\n> Merging [#4466](https://codecov.io/gh/ReactiveX/RxJava/pull/4466?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4466   diff @@\n==========================================\n  Files           271        271          \n  Lines         17607      17607          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2684       2684          \n==========================================\n+ Hits          14823      14836    +13   \n+ Misses         1920       1918     -2   \n+ Partials        864        853    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7593247...561b5df](https://codecov.io/gh/ReactiveX/RxJava/compare/75932471eda6c7c972a40b0560a65c75ffd8cbc2...561b5df99d7a88947ecbe12dac0dee1e9f8b1d8b?src=pr)'
p2518
asg14
S'vanniktech:1.x_deprecate'
p2519
sbsI4467
(iPull
Pull
p2520
(dp2521
g3
S'  - Move `verifyPositive` into `ObjectHelper`\r\n  - Fix javadoc of `Flowable.subscribe()` and `Observable.subscribe()` mentioning `Subscription` from 1.x\r\n  - `Maybe`: add `amb`, `concat`, `concatArray`, `merge`, `mergeArray`, `concatMap`, `subscribe`, `subscribeWith`, `doOnEvent`'
p2522
sg5
S'2.x: add more maybe operators, fix a few javadoc mistakes'
p2523
sg7
(lp2524
S'Documentation'
p2525
aS'Enhancement'
p2526
asg10
I4467
sg11
(lp2527
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4467?src=pr) is 76.00% (diff: 83.80%)\n> Merging [#4467](https://codecov.io/gh/ReactiveX/RxJava/pull/4467?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.10%**\n\n```diff\n@@                2.x      #4467   diff @@\n==========================================\n  Files           485        493     +8   \n  Lines         33042      33546   +504   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5240       5310    +70   \n==========================================\n+ Hits          25079      25496   +417   \n- Misses         5920       5983    +63   \n- Partials       2043       2067    +24   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [88fafd8...d5bd37a](https://codecov.io/gh/ReactiveX/RxJava/compare/88fafd82aeec802e0e4b2a3595ffd0ba2f6901b6...d5bd37a46a9ad53d5a3f0cffa611af8da4a7098c?src=pr)'
p2528
aS':+1:'
p2529
asg14
S'akarnokd:MaybeOps902_1'
p2530
sbsI4468
(iPull
Pull
p2531
(dp2532
g3
S'  - Fixed bugs in `Flowable.sequenceEqual`, `Flowable.zip` when errors are delayed, `Flowable.onBackpressureBuffer` when errors are delayed\r\n  - Fixed mentions of `NbpX` in some places\r\n  - Synchronized unit tests between `Observable` and `Flowable`'
p2533
sg5
S'2.x: coverage, bugfixes, 9/03-1'
p2534
sg7
(lp2535
S'Bug'
p2536
aS'Cleanup'
p2537
aS'Coverage'
p2538
asg10
I4468
sg11
(lp2539
S'\xf0\x9f\x91\x8d '
p2540
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4468?src=pr) is 76.91% (diff: 79.07%)\n> Merging [#4468](https://codecov.io/gh/ReactiveX/RxJava/pull/4468?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.89%**\n\n```diff\n@@                2.x      #4468   diff @@\n==========================================\n  Files           493        493          \n  Lines         33546      33684   +138   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5310       5315     +5   \n==========================================\n+ Hits          25502      25907   +405   \n+ Misses         5980       5711   -269   \n- Partials       2064       2066     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [b15df98...4617b1f](https://codecov.io/gh/ReactiveX/RxJava/compare/b15df9899183ecce0f40b132a47be5700a7c7a32...4617b1fcea50b37fee315155c2eebc2bcc168a74?src=pr)'
p2541
asg14
S'akarnokd:Coverage902_2'
p2542
sbsI4469
(iPull
Pull
p2543
(dp2544
g3
S'  - enable fusion with `Observable.map`\r\n  - remove impossible branches in some classes\r\n  - add more tests to cover tool classes\r\n  - fix `Observable.range()` entering regular emission if fusion-drain is interrupted\r\n  - fix `FullArbiter` and `ObservableFullArbiter` not cancelling/disposing the incoming Subscription/Disposable in some cases'
p2545
sg5
S'2.x: coverage and fixes 9/03-2'
p2546
sg7
(lp2547
S'Bug'
p2548
aS'Cleanup'
p2549
aS'Coverage'
p2550
asg10
I4469
sg11
(lp2551
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4469?src=pr) is 78.18% (diff: 94.44%)\n> Merging [#4469](https://codecov.io/gh/ReactiveX/RxJava/pull/4469?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **1.17%**\n\n```diff\n@@                2.x      #4469   diff @@\n==========================================\n  Files           493        493          \n  Lines         33684      33629    -55   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5315       5290    -25   \n==========================================\n+ Hits          25939      26293   +354   \n+ Misses         5690       5370   -320   \n+ Partials       2055       1966    -89   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f59ce00...52dc276](https://codecov.io/gh/ReactiveX/RxJava/compare/f59ce00934a65b880cbe5b7e06436f85e73187d9...52dc27674d2b13f3645b2be92cb8c93a3cb57b13?src=pr)'
p2552
aS'\xf0\x9f\x91\x8d '
p2553
asg14
S'akarnokd:Coverage903_2'
p2554
sbsI4474
(iPull
Pull
p2555
(dp2556
g3
S'Update Javadoc 1.1.10 on gh-pages'
p2557
sg5
S'1.1.10 javadoc'
p2558
sg7
(lp2559
S'Documentation'
p2560
asg10
I4474
sg11
(lp2561
sg14
S'akarnokd:Javadoc-1-1-10'
p2562
sbsI4478
(iPull
Pull
p2563
(dp2564
g3
g57
sg5
S'fix typo javadocs testobserver'
p2565
sg7
(lp2566
S'Documentation'
p2567
asg10
I4478
sg11
(lp2568
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4478?src=pr) is 78.14% (diff: 100%)\n> Merging [#4478](https://codecov.io/gh/ReactiveX/RxJava/pull/4478?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                2.x      #4478   diff @@\n==========================================\n  Files           493        493          \n  Lines         33629      33629          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26312      26280    -32   \n- Misses         5365       5385    +20   \n- Partials       1952       1964    +12   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ebaeee5...ddcddfb](https://codecov.io/gh/ReactiveX/RxJava/compare/ebaeee5e169063462c1bc55c9b18fe9fa942af57...ddcddfbb9b59cabd9fda2f210c7ec520f6e3dd20?src=pr)'
p2569
aS'Thanks!'
p2570
asg14
S'VictorAlbertos:2.x'
p2571
sbsI4479
(iPull
Pull
p2572
(dp2573
g3
g57
sg5
S'2.x: add doonevent to single & completable'
p2574
sg7
(lp2575
S'Enhancement'
p2576
asg10
I4479
sg11
(lp2577
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4479?src=pr) is 78.10% (diff: 78.12%)\n> Merging [#4479](https://codecov.io/gh/ReactiveX/RxJava/pull/4479?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.05%**\n\n```diff\n@@                2.x      #4479   diff @@\n==========================================\n  Files           493        494     +1   \n  Lines         33629      33661    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n+ Hits          26283      26290     +7   \n- Misses         5383       5401    +18   \n- Partials       1963       1970     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [12ca280...dda26ce](https://codecov.io/gh/ReactiveX/RxJava/compare/12ca280008885611dc342b888c29cbbd11708c82...dda26ce572e21eccf72a7d304ac8f8a5b8b0aa2b?src=pr)'
p2578
asg14
S'vanniktech:2.x_do_on_event'
p2579
sbsI4480
(iPull
Pull
p2580
(dp2581
g3
S"I've been working on the this for too long in the background and want to get this out for review even though many of the units tests don't pass yet.\r\n\r\nIts a bit rough at the moment but there was a couple of things that I wanted to talk about.\r\n\r\n1. does it make sense to have `ignoreElements` where there is a `toCompletable`.\r\n2. the same goes for `single` when there is a `toSingle`.\r\n3. moved `toFuture` to Single since it seems to fit better."
p2582
sg5
S'integrate maybe and single into observable. *** do not merge ***'
p2583
sg7
(lp2584
sg10
I4480
sg11
(lp2585
sg14
S'abersnaze:interop_obs'
p2586
sbsI4481
(iPull
Pull
p2587
(dp2588
g3
S"I've been working on the this for too long in the background and want to get this out for review even though many of the units tests don't pass yet. Its a bit rough at the moment but there was a couple of things that I wanted to talk about.\r\n\r\n1. does it make sense to have ignoreElements where there is a toCompletable.\r\n2. the same goes for single when there is a toSingle.\r\n3. moved toFuture to Single since it seems to fit better."
p2589
sg5
S'integrate maybe and single into observable. *** do not merge'
p2590
sg7
(lp2591
S'Enhancement'
p2592
asg10
I4481
sg11
(lp2593
S"Don't delete the old ops because we can macro fuse them back in such cases: \r\n`source.reduce(...).toFlowable()`"
p2594
aS"I'll post a PR that incorporates some helper types and demoes what I mean by macro-fusion for these Flowable->X and Observable->X conversions."
p2595
aS"@abersnaze Your commit somehow has me as it's author."
p2596
aS"@Mauin yeah it's odd\r\n\r\n@abersnaze \r\nSee #4484 about how we could do this while keeping the performance when converting back to the `Flowable`/`Observable`.\r\n\r\nAlso it would be great if you didn't mix plain addition to `Maybe` with the other changes in one PR."
p2597
aS"@mauin something wires must have got crossed my last rebate. I'll. Try and fix it before it's merged.\r\n\r\n@akarnokd would you like the additions as preliminary PR before this one?"
p2598
aS'Yes, that would be great.'
p2599
aS'Let me take out the Maybe additions into a separate PR.'
p2600
aS"> does it make sense to have ignoreElements where there is a toCompletable\r\n> the same goes for single when there is a toSingle.\r\n\r\nReactor's `Flux` does return `Mono<Void>` for `ignoreElements` (last time I checked) and their community liked it. I think `ignoreElements` is more intuitive for naming the function. The question is, how the return type change will disrupt the developer's flow and how many time does he/she apply `.toFlowable()` (which we dutifully try to optimize) to get back to the `Flowable`/`Observable` world:\r\n\r\n```java\r\nFlowable.range(1, 10)\r\n.flatMap(v -> .saveToDb(restCall(v)).ignoreElements().toFlowable())\r\n.blockingLast(0)\r\n```\r\n\r\nTo avoid this burden, we have to provide `flatMapCompletable(T -> Completable)` etc in the `Flowable`/`Observable` as well, or for basically any XMap(Function) operator there is (`concatMap`, `concatMapDelayError`, `flatMap`, `switchMap`)\r\n\r\n"
p2601
aS'Closing as out of date and will be redone in subsequent PRs.'
p2602
asg14
S'abersnaze:interop_obs'
p2603
sbsI4482
(iPull
Pull
p2604
(dp2605
g3
g57
sg5
S'2.x: fix generic issue in single'
p2606
sg7
(lp2607
sg10
I4482
sg11
(lp2608
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4482?src=pr) is 78.12% (diff: 100%)\n> Merging [#4482](https://codecov.io/gh/ReactiveX/RxJava/pull/4482?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4482   diff @@\n==========================================\n  Files           494        494          \n  Lines         33661      33661          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26319      26298    -21   \n- Misses         5381       5395    +14   \n- Partials       1961       1968     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...e53a337](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...e53a33701dc56f98bd81cbaf5f43ab4d1f493173?src=pr)'
p2609
asg14
S'vanniktech:2.x_single_generics_fix'
p2610
sbsI4483
(iPull
Pull
p2611
(dp2612
g3
g57
sg5
S'2.x: reuse singledoonevent'
p2613
sg7
(lp2614
sg10
I4483
sg11
(lp2615
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4483?src=pr) is 78.19% (diff: 100%)\n> Merging [#4483](https://codecov.io/gh/ReactiveX/RxJava/pull/4483?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4483   diff @@\n==========================================\n  Files           494        492     -2   \n  Lines         33661      33632    -29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n- Hits          26319      26298    -21   \n+ Misses         5381       5374     -7   \n+ Partials       1961       1960     -1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...bce1224](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...bce122465f973d9c2087490bcbbc025e44a98bd3?src=pr)'
p2616
asg14
S'vanniktech:2.x_reuse_SingleDoOnEvent'
p2617
sbsI4484
(iPull
Pull
p2618
(dp2619
g3
S'This PR adds the baseline for changing `Flowable` and `Observable` operators to return `Single`, `Completable` or `Maybe` but in case the user wants to go back to the original type via `toFlowable` or `toObservable` we switch to a natively `Flowable`/`Observable` operator (macro-fusion).\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/18269896/98ffbf80-742a-11e6-91b7-23b03bec8b8c.png)\r\n\r\nNo changes were applied to `Observable` yet hence the roughly same result there. `Flowable.reduce()` has been updated plus there is a new `FlowableReduce` instead of `scan().last()`.'
p2620
sg5
S'2.x: flowable.reduce() to return single, macro fusion'
p2621
sg7
(lp2622
S'Enhancement'
p2623
aS'Performance'
p2624
asg10
I4484
sg11
(lp2625
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4484?src=pr) is 78.12% (diff: 68.08%)\n> Merging [#4484](https://codecov.io/gh/ReactiveX/RxJava/pull/4484?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4484   diff @@\n==========================================\n  Files           494        496     +2   \n  Lines         33661      33754    +93   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5303    +13   \n==========================================\n+ Hits          26319      26371    +52   \n- Misses         5381       5415    +34   \n- Partials       1961       1968     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...b997011](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...b99701135c968566115ee471c145e105ebdfb749?src=pr)'
p2626
aS':+1:'
p2627
asg14
S'akarnokd:MacroFuseBack'
p2628
sbsI4486
(iPull
Pull
p2629
(dp2630
g3
g57
sg5
S'2.x: completable enhance doonevent to reduce allocations'
p2631
sg7
(lp2632
S'Enhancement'
p2633
asg10
I4486
sg11
(lp2634
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4486?src=pr) is 78.19% (diff: 70.83%)\n> Merging [#4486](https://codecov.io/gh/ReactiveX/RxJava/pull/4486?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4486   diff @@\n==========================================\n  Files           494        495     +1   \n  Lines         33661      33679    +18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5290       5290          \n==========================================\n+ Hits          26319      26335    +16   \n+ Misses         5381       5377     -4   \n- Partials       1961       1967     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eddc153...b8ec13f](https://codecov.io/gh/ReactiveX/RxJava/compare/eddc153f936069c7ab94a214d04adc88fd76d93a...b8ec13fc1ec7cba37a5908b66ea545d90b0a57ea?src=pr)'
p2635
aS'@akarnokd this is the way it is desired now, correct?'
p2636
aS'Great! :+1:'
p2637
asg14
S'vanniktech:2.x_enhance_completable_do_on'
p2638
sbsI4488
(iPull
Pull
p2639
(dp2640
g3
S'This PR adds just the new methods from #4481 to allow a much cleaner change of return types later on.'
p2641
sg5
S'2.x: add new methods to maybe, observable and single from 4481'
p2642
sg7
(lp2643
S'Enhancement'
p2644
asg10
I4488
sg11
(lp2645
S':+1:'
p2646
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4488?src=pr) is 77.79% (diff: 8.16%)\n> Merging [#4488](https://codecov.io/gh/ReactiveX/RxJava/pull/4488?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.36%**\n\n```diff\n@@                2.x      #4488   diff @@\n==========================================\n  Files           497        500     +3   \n  Lines         33772      33909   +137   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5303       5325    +22   \n==========================================\n- Hits          26396      26378    -18   \n- Misses         5409       5554   +145   \n- Partials       1967       1977    +10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [928e437...344af8d](https://codecov.io/gh/ReactiveX/RxJava/compare/928e4379f6ea2086b4418cc64c3382e204a04ae2...344af8dfcb8498b6a590290199bbaf50476d966e?src=pr)'
p2647
aS'Updated with corrections.'
p2648
asg14
S'akarnokd:MaybeOps906_1'
p2649
sbsI4490
(iPull
Pull
p2650
(dp2651
g3
S'Renames Observable/Single/CompletableEmitter#isCancelled to #isDisposed.\r\n\r\nThis now causes a bit of a weird situation where most (not all) Emitter classes implement `Disposable` as well, so both interfaces expose the same `#isDisposed` method. Before the `#isCancelled` methods were basically just calling `#isDisposed` or had the same implementation. \r\n\r\nSuggestions on how to improve this?'
p2652
sg5
S'2.x: rename emitters #iscancelled to #isdisposed'
p2653
sg7
(lp2654
S'Cleanup'
p2655
asg10
I4490
sg11
(lp2656
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4490?src=pr) is 77.91% (diff: 0.00%)\n> Merging [#4490](https://codecov.io/gh/ReactiveX/RxJava/pull/4490?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4490   diff @@\n==========================================\n  Files           500        500          \n  Lines         33909      33905     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5325       5325          \n==========================================\n+ Hits          26392      26416    +24   \n+ Misses         5547       5517    -30   \n- Partials       1970       1972     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ff3c5d0...80ebe35](https://codecov.io/gh/ReactiveX/RxJava/compare/ff3c5d0aa45494c90f3b83505315ed73835f67a9...80ebe3551a00164b73a3ee0ffffa436aff5de3d4?src=pr)'
p2657
aS"I'm tempted to remove `setDisposable` from the emitter and keep this method named `isCanceled()`. If you want to set a disposable why not use `unsafeCreate` and `ObservableSource` directly?"
p2658
aS'@JakeWharton these are the safe versions that also manages a resource for you without the need to worry about (and lose) backpressure or cancellation in general from `unsafeCreate`.'
p2659
aS'Otherwise :+1:'
p2660
aS"I'm not sure how that is an argument against what I said. Having both `setCancelable` and `setDisposable` in the API is ugly and redundant."
p2661
aS"If you believe users don't really need the Disposable overload then I'm open to remove them. Also consider dropping Disposables.from variants not in use and adding Cancellables.from."
p2662
aS'As for `setCancelable` and `setDisposable` I agree with @JakeWharton. Would probably be best to somehow merge them or get rid of one to clean the API. But that would be a separate issue/PR, I guess?'
p2663
aS"Yes, let's have a separate PR for that."
p2664
asg14
S'Mauin:emitters_isDisposed'
p2665
sbsI4491
(iPull
Pull
p2666
(dp2667
g3
S'This PR compacts the `blockingX` operators by extending `CountDownLatch` and implementing `SingleObserver`, `CompletableObserver` and `MaybeObserver` with the necessary blocking await mechanics.\r\n\r\nBenchmark comparison (i7 4770, Windows 7 x64, Java 8u102):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/18291535/868c4d6a-7488-11e6-99f7-43415f79e5e4.png)\r\n\r\nIn addition, the internal package `subscribers.single` and `subscribers.completable` has been removed and the classes moved into `io.reactivex.internal.observers` package. The old blocking enum helpers were removed as well.\r\n\r\nThe `BlockingSingleSubscriber` and `BlockingSingleObserver` abstract classes have been renamed to `BlockingBaseX` to avoid name confusion (they have nothing to do with the `Single` type).'
p2668
sg5
S'2.x: reduce blockingx overhead, move internal observers to common pkg'
p2669
sg7
(lp2670
S'Cleanup'
p2671
aS'Performance'
p2672
asg10
I4491
sg11
(lp2673
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4491?src=pr) is 77.88% (diff: 58.49%)\n> Merging [#4491](https://codecov.io/gh/ReactiveX/RxJava/pull/4491?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4491   diff @@\n==========================================\n  Files           500        498     -2   \n  Lines         33905      33875    -30   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5325       5326     +1   \n==========================================\n- Hits          26394      26382    -12   \n+ Misses         5541       5519    -22   \n- Partials       1970       1974     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [10f727f...1129263](https://codecov.io/gh/ReactiveX/RxJava/compare/10f727f97efed67e33c4ec5cf6644267a9a9bed6...112926355feb4950ed0ba2850ab6d9db7cab4e9e?src=pr)'
p2674
aS':+1:'
p2675
asg14
S'akarnokd:BlockingXCompact906_1'
p2676
sbsI4493
(iPull
Pull
p2677
(dp2678
g3
S'  - minor Javadoc corrections\r\n  - Note: some Maybe operators shifted within the file\r\n  - add to `Maybe`: `concatArrayDelayError`, `concatArrayEager`, `concatEager`, `concatDelayError`, `mergeArrayDelayError`, `mergeDelayError`, `sequenceEqual`, `timer`, `using`, `zip`, `zipArray`\r\n  - improve coverage of `Observable`, `Single` and `Maybe`.\r\n  - Move tests from `ObservableTests` into `ObservableTest` drop the former.'
p2679
sg5
S'2.x: more maybe operators, minor cleanups 9/07-1'
p2680
sg7
(lp2681
S'Cleanup'
p2682
aS'Coverage'
p2683
aS'Enhancement'
p2684
asg10
I4493
sg11
(lp2685
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4493?src=pr) is 78.02% (diff: 72.61%)\n> Merging [#4493](https://codecov.io/gh/ReactiveX/RxJava/pull/4493?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.16%**\n\n```diff\n@@                2.x      #4493   diff @@\n==========================================\n  Files           498        505     +7   \n  Lines         33875      34357   +482   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5326       5383    +57   \n==========================================\n+ Hits          26373      26806   +433   \n- Misses         5536       5547    +11   \n- Partials       1966       2004    +38   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1f0a116...2bd7c79](https://codecov.io/gh/ReactiveX/RxJava/compare/1f0a116dc176cdce4e76192edba4b92e3e3a8eb4...2bd7c79f30726b930313902ce3d03e42e0f7bdd3?src=pr)'
p2686
aS':+1:'
p2687
asg14
S'akarnokd:MaybeOps907_1'
p2688
sbsI4496
(iPull
Pull
p2689
(dp2690
g3
S'Removed them like this:\r\n\r\n`find . -type f -name "*.java" | xargs sed -i \'\' -e\'s/[ \\t]*$//\' "$1"`\r\n\r\nI think it\'s best to review this locally or by appending `?w=1` to this URL to let GitHub ignore white space changes.'
p2691
sg5
S'2.x: remove trailing whitespace'
p2692
sg7
(lp2693
S'Cleanup'
p2694
asg10
I4496
sg11
(lp2695
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4496?src=pr) is 77.97% (diff: 100%)\n> Merging [#4496](https://codecov.io/gh/ReactiveX/RxJava/pull/4496?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4496   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34357          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n- Hits          26802      26790    -12   \n- Misses         5550       5566    +16   \n+ Partials       2005       2001     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d2d7f69...92e1114](https://codecov.io/gh/ReactiveX/RxJava/compare/d2d7f6920b605d7acf90d440d3744e9e7e1249da...92e1114ae07af69482f805de8c80a576b9d9140e?src=pr)'
p2696
asg14
S'vanniktech:2.x_trailing_space'
p2697
sbsI4497
(iPull
Pull
p2698
(dp2699
g3
S'This will add checkstyle though it should not be executed together with Travis and hence does not fail the PR if there are. Also running `./gradlew checkstyleMain` gives a list of places where trailing whitespace exists.'
p2700
sg5
S'2.x: add checkstyle for trailing whitespace'
p2701
sg7
(lp2702
S'Cleanup'
p2703
asg10
I4497
sg11
(lp2704
S'> it should not be executed together with Travis and hence does not fail the PR\r\n\r\nSeems pointless to add then.'
p2705
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4497?src=pr) is 78.01% (diff: 100%)\n> Merging [#4497](https://codecov.io/gh/ReactiveX/RxJava/pull/4497?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4497   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34357          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n+ Hits          26791      26802    +11   \n- Misses         5551       5561    +10   \n+ Partials       2015       1994    -21   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [35281d5...154fe6b](https://codecov.io/gh/ReactiveX/RxJava/compare/35281d57811dc5fad372b599db57129d40db05f7...154fe6b8cf01da5ff33b9bbb7a068eb66713c3ba?src=pr)'
p2706
aS"Yeah having the same opinion but David doesn't want it to fail the PR. "
p2707
aS"Then why fail local builds?\n\nOn Wed, Sep 7, 2016 at 12:57 PM Niklas Baudy <notifications@github.com>\nwrote:\n\n> Yeah having the same opinion but David doesn't want it to fail the PR.\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4497#issuecomment-245347122>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAEEEfeX4juPXMZcS0vBkp-2p-otHsT0ks5qnuzWgaJpZM4J3Dgb>\n> .\n>\n"
p2708
aS'For now, just run it with `./gradlew checkstyleMain` sometimes.'
p2709
aS'Yet it does fail it https://travis-ci.org/ReactiveX/RxJava/builds/158395672#L205'
p2710
aS'Alright my bad #4505\r\n\r\nI thought the checkstyle tasks would not be executed automatically though `build` executes `check` and `checkstyle` task hooked itself into `check` task.'
p2711
asg14
S'vanniktech:2.x_checkstyle'
p2712
sbsI4499
(iPull
Pull
p2713
(dp2714
g3
S'I just do a test!\r\ni am so sorry..'
p2715
sg5
S'2.x'
p2716
sg7
(lp2717
sg10
I4499
sg11
(lp2718
S'What are you testing and why in this repo?'
p2719
aS'i am learning how to pull request on GitHub.so do that test\r\nmy English is poor so it is very difficult to learn on English web\r\nfinally,  sorry for that and thank you for your generosity.\r\n'
p2720
asg14
S'ReactiveX:2.x'
p2721
sbsI4500
(iPull
Pull
p2722
(dp2723
g3
S'Dunno whether this is wanted or not in 1.x. If not just close this PR. '
p2724
sg5
S'1.x: remove trailing whitespace'
p2725
sg7
(lp2726
S'Cleanup'
p2727
asg10
I4500
sg11
(lp2728
S"I haven't seen IDEs adding them back but only remove them so let's have this to avoid future unneccessary removals from unrelated changes in files."
p2729
aS'Alright sounds good and then #4123 can be closed'
p2730
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4500?src=pr) is 84.34% (diff: 65.38%)\n> Merging [#4500](https://codecov.io/gh/ReactiveX/RxJava/pull/4500?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4500   diff @@\n==========================================\n  Files           272        272          \n  Lines         17647      17647          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2687       2687          \n==========================================\n- Hits          14899      14884    -15   \n- Misses         1899       1908     +9   \n- Partials        849        855     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d86cf19...0cf0c02](https://codecov.io/gh/ReactiveX/RxJava/compare/d86cf19e918152ea71d895aef5f1ee2d05f5a67f...0cf0c02155764a47816fedc96de4365e840762c5?src=pr)'
p2731
asg14
S'vanniktech:1.x_trailing_space'
p2732
sbsI4502
(iPull
Pull
p2733
(dp2734
g3
S'This should be less confusing.'
p2735
sg5
S'2.x: replace `finallydo` references with `doafterterminate`'
p2736
sg7
(lp2737
S'Cleanup'
p2738
aS'Documentation'
p2739
asg10
I4502
sg11
(lp2740
S'Great, thanks! :+1:'
p2741
aS'The test failure looks unrelated.'
p2742
aS"No problem, I've rerun the check."
p2743
asg14
S'ikesyo:remove-finallydo-references'
p2744
sbsI4503
(iPull
Pull
p2745
(dp2746
g3
S"This PR adds the ability to specify the default thread priorities of `computation()`, `io()`, `newThread()` and `single()` schedulers via system properties. I've added the property names to the `Schedulers` javadoc.\r\n\r\nRelated: #4389."
p2747
sg5
S'2.x: add system properties to adjust thread priorities of schedulers'
p2748
sg7
(lp2749
S'Enhancement'
p2750
asg10
I4503
sg11
(lp2751
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4503?src=pr) is 77.97% (diff: 100%)\n> Merging [#4503](https://codecov.io/gh/ReactiveX/RxJava/pull/4503?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4503   diff @@\n==========================================\n  Files           505        505          \n  Lines         34357      34367    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5383       5383          \n==========================================\n- Hits          26800      26797     -3   \n- Misses         5559       5568     +9   \n- Partials       1998       2002     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [935ae3c...c4031f7](https://codecov.io/gh/ReactiveX/RxJava/compare/935ae3cc4caae373c83c6ae89550a55999f1231d...c4031f78c6cfb0e24a05fdc42bdfc40e1a7db8bd?src=pr)'
p2752
aS'Thanks! :+1:'
p2753
asg14
S'akarnokd:ThreadFactoryPriority'
p2754
sbsI4504
(iPull
Pull
p2755
(dp2756
g3
S'Also any reason the Dispoable is called `s`? Is it still from the Subscription time?\r\n\r\nFixes #4501 '
p2757
sg5
S'2.x: add disposable observer for maybe, completable & single'
p2758
sg7
(lp2759
S'Enhancement'
p2760
asg10
I4504
sg11
(lp2761
S'Seems unrelated:\r\n\r\n```\r\nio.reactivex.internal.operators.observable.ObservableRefCountTest > testRepeat FAILED\r\n    java.lang.AssertionError: Error(s) present: [java.lang.IllegalStateException: onSubscribe not called in proper order] (latch = 1, values = 51, errors = 1, completions = 0)\r\n        at io.reactivex.observers.TestObserver.fail(TestObserver.java:363)\r\n        at io.reactivex.observers.TestObserver.assertNoErrors(TestObserver.java:411)\r\n        at io.reactivex.internal.operators.observable.ObservableRefCountTest.testRepeat(ObservableRefCountTest.java:195)\r\n\r\n        Caused by:\r\n        io.reactivex.exceptions.CompositeException\r\n            at io.reactivex.observers.TestObserver.fail(TestObserver.java:364)\r\n            ... 2 more\r\n\r\n            Caused by:\r\n            io.reactivex.exceptions.CompositeException$CompositeExceptionCausalChain: Chain of Causes for CompositeException In Order Received =>\r\n\r\n                Caused by:\r\n                java.lang.IllegalStateException: onSubscribe not called in proper order\r\n```'
p2762
aS"Yep, I'll fix that next - started to become annoying to me too."
p2763
asg14
S'vanniktech:2.x_reactive_disposable_observers'
p2764
sbsI4505
(iPull
Pull
p2765
(dp2766
g3
g57
sg5
S'2.x: ignore checkstyle failures'
p2767
sg7
(lp2768
S'Build'
p2769
asg10
I4505
sg11
(lp2770
sg14
S'vanniktech:2.x_ignore_checkstyle_failures'
p2771
sbsI4506
(iPull
Pull
p2772
(dp2773
g3
S'This PR fixes the operators `refCount` (ensure proper call order to onXXX), disables FindBugs due to out-of-memory kills on Travis and increases the half-time sleep of a flaky unit-test.'
p2774
sg5
S'2.x: fix operator refcount, disable findbugs (due to travis oom)'
p2775
sg7
(lp2776
S'Bug'
p2777
aS'Build'
p2778
asg10
I4506
sg11
(lp2779
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4506?src=pr) is 78.00% (diff: 92.85%)\n\n\n\n\n> No coverage report found for **2.x** at 043f37d.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [043f37d...c1bdbeb](https://codecov.io/gh/ReactiveX/RxJava/compare/043f37ddc057158788da647ee7a8ebbf172ad21c...c1bdbebdce985072d1dcd4fdc92dbaf56c8f8f3f?src=pr)'
p2780
asg14
S'akarnokd:ObservableRefCountFix'
p2781
sbsI4507
(iPull
Pull
p2782
(dp2783
g3
S"This PR sets up the build to run TestNG tests as well and adds the Reactive-Streams TCK to allow validating our operators.\r\n\r\nIncluded tests are: `just`, `fromArray`, `fromIterable`, `concat`, `merge`.\r\n\r\nNote that the TCK tests for invalid `request()` amount which, according to the spec, should be reported to the running `Subscriber` via `onError`. Unfortunately, this is a very expensive requirement (requiring half-serialization all the time) and we are not going to support it in RxJava 2. Negative requests are bugs in operators and should be fixed, we only provide a notification about such situations in the `RxJavaPlugins.onError` for those who want to check for such errors. \r\n\r\nTherefore, the `FlowableTCK` has been added with does the required behavior by the TCK and can be used as `FlowableTCK.wrap(flowable)` when returning from the TCK's `createPublisher(long)`."
p2784
sg5
S'2.x: add reactive-streams tck infrastructure and couple of tests'
p2785
sg7
(lp2786
S'Test'
p2787
asg10
I4507
sg11
(lp2788
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4507?src=pr) is 77.92% (diff: 100%)\n> Merging [#4507](https://codecov.io/gh/ReactiveX/RxJava/pull/4507?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4507   diff @@\n==========================================\n  Files           508        508          \n  Lines         34383      34383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n- Hits          26799      26794     -5   \n- Misses         5587       5596     +9   \n+ Partials       1997       1993     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4ce25cb...3279670](https://codecov.io/gh/ReactiveX/RxJava/compare/4ce25cb968179460f9bc1ef75fd2e071921add01...3279670ff13c81816d788ddea7f8a0390de553ea?src=pr)'
p2789
asg14
S'akarnokd:ReactiveStreamsTCK'
p2790
sbsI4508
(iPull
Pull
p2791
(dp2792
g3
g57
sg5
S'2.x: add exception message in singlefromcallable'
p2793
sg7
(lp2794
S'Cleanup'
p2795
asg10
I4508
sg11
(lp2796
S'@akarnokd what do you think about a custom exception that explains why null is not allowed anymore? And if someone goes and wants to emit null that one will be thrown instead of NullPointerException'
p2797
aS"You mean like\r\n\r\n`The callable returned a null value. Null values are generally not allowed in 2.x operators and sources.`\r\n\r\nIf you manually change all locations then okay, but don't try to factor this out into some parametric method because that extra amount of conditional code might prevent some JIT optimizations due to dept/code size increase."
p2798
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4508?src=pr) is 77.96% (diff: 100%)\n> Merging [#4508](https://codecov.io/gh/ReactiveX/RxJava/pull/4508?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.02%**\n\n```diff\n@@                2.x      #4508   diff @@\n==========================================\n  Files           508        508          \n  Lines         34383      34383          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n+ Hits          26799      26807     +8   \n+ Misses         5587       5579     -8   \n  Partials       1997       1997          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4ce25cb...fa18cff](https://codecov.io/gh/ReactiveX/RxJava/compare/4ce25cb968179460f9bc1ef75fd2e071921add01...fa18cff4e37e9ddd2232f0e2087fc04763c19b5f?src=pr)'
p2799
asg14
S'vanniktech:2.x_better_exception_message_SingleFromCallable'
p2800
sbsI4509
(iPull
Pull
p2801
(dp2802
g3
g57
sg5
S'2.x: adjust some javadoc in emitters'
p2803
sg7
(lp2804
S'Cleanup'
p2805
asg10
I4509
sg11
(lp2806
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4509?src=pr) is 77.99% (diff: 100%)\n\n\n> No coverage report found for **2.x** at eade864.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [eade864...28df01b](https://codecov.io/gh/ReactiveX/RxJava/compare/eade864d3c167adb4a3384576d533c44f68da123...28df01b862bb124ab69de9a3614f6c7c87b63c47?src=pr)'
p2807
aS':+1:'
p2808
asg14
S'vanniktech:2.x_javadoc'
p2809
sbsI4513
(iPull
Pull
p2810
(dp2811
g3
S"Both `switchMap` implementations didn't properly cancel the current inner consumer (but instead cancelled the outer 'connection' only).\r\n\r\nReported in #4512."
p2812
sg5
S'2.x: fix switchmap bad cancellation'
p2813
sg7
(lp2814
S'Bug'
p2815
asg10
I4513
sg11
(lp2816
S':+1:'
p2817
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4513?src=pr) is 77.91% (diff: 100%)\n> Merging [#4513](https://codecov.io/gh/ReactiveX/RxJava/pull/4513?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4513   diff @@\n==========================================\n  Files           508        508          \n  Lines         34393      34395     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5387       5387          \n==========================================\n+ Hits          26796      26800     +4   \n- Misses         5597       5600     +3   \n+ Partials       2000       1995     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [939f172...8b55f5d](https://codecov.io/gh/ReactiveX/RxJava/compare/939f172b5fd39fdc83e353fa0b4626a8a61e3ee4...8b55f5dd1b05ebc7a7ea5a63d8f539978bf8de04?src=pr)'
p2818
asg14
S'akarnokd:SwitchMapCancelFix'
p2819
sbsI4516
(iPull
Pull
p2820
(dp2821
g3
S"I've forgotten to create a branch so the first part of todays coverage work [landed in 2.x direct](https://github.com/ReactiveX/RxJava/commit/1145819b658983807e0cede5ba2c7d5ac1117baa)\r\n\r\n  - removed unused methods from various classes\r\n  - compacted `SpscArrayQueue`\r\n  - added null checks to `SpscLinkedArrayQueue.offer()` and `MpscLinkedQueue.offer()`\r\n  - fixed `ResourceObserver` not calling `onStart`\r\n  - Added direct NotificationLite-emission methods to `AppendOnlyLinkedArrayList`, updated `SerializedObserver` and `SerializedSubscriber` to use it directly instead of the former indirection\r\n  - `TestObserver.isDisposed` now reports true if terminal events were received (#4514)\r\n  - `ResourceSubscriber` to use `SubscriptionHelper`'s deferred Subscription/requesting management\r\n  - added unit tests to cover `DisposableXObserver`s\r\n  - `SerializedObserver` and `SerializedSubscriber` now have proper unit tests each\r\n\r\nThis current PR fixes `Single.using` not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements."
p2822
sg5
S'2.x: fix single.using, add unit tests and coverage'
p2823
sg7
(lp2824
S'Bug'
p2825
aS'Cleanup'
p2826
aS'Coverage'
p2827
asg10
I4516
sg11
(lp2828
S':+1:'
p2829
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4516?src=pr) is 78.64% (diff: 96.92%)\n> Merging [#4516](https://codecov.io/gh/ReactiveX/RxJava/pull/4516?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.36%**\n\n```diff\n@@                2.x      #4516   diff @@\n==========================================\n  Files           507        507          \n  Lines         34371      34386    +15   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5391       5395     +4   \n==========================================\n+ Hits          26904      27042   +138   \n+ Misses         5480       5374   -106   \n+ Partials       1987       1970    -17   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1145819...0ee4580](https://codecov.io/gh/ReactiveX/RxJava/compare/1145819b658983807e0cede5ba2c7d5ac1117baa...0ee4580c6235aadd210693bae3cd024add6295df?src=pr)'
p2830
asg14
S'akarnokd:Coverage908_2'
p2831
sbsI4518
(iPull
Pull
p2832
(dp2833
g3
S'Fixes #4517'
p2834
sg5
S'2.x: add missing resource observer for maybe, completable & single and adjust some javadoc'
p2835
sg7
(lp2836
S'Enhancement'
p2837
asg10
I4518
sg11
(lp2838
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4518?src=pr) is 78.60% (diff: 100%)\n> Merging [#4518](https://codecov.io/gh/ReactiveX/RxJava/pull/4518?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4518   diff @@\n==========================================\n  Files           507        510     +3   \n  Lines         34386      34424    +38   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5395       5401     +6   \n==========================================\n+ Hits          27003      27059    +56   \n+ Misses         5411       5401    -10   \n+ Partials       1972       1964     -8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4f878d5...120d760](https://codecov.io/gh/ReactiveX/RxJava/compare/4f878d56988d572257309dad1a1d0c9fe601f3d8...120d760b71d46181a7ac36db11a934543f75f53e?src=pr)'
p2839
aS"It might be worth considering removing the protected `cancel()` methods as they are duplicates of `dispose`. For `ResourceSubscriber` I don't know because it works with `Subscription.cancel()` but also is a `Disposable` so `dispose()` is there as well."
p2840
aS'So should I remove the `cancel()` method on all `Resource*Observer`?'
p2841
aS'@JakeWharton your opinion on the removal?'
p2842
aS"I'm supportive of removing `cancel()`. I much prefer when there's only one way to do something!"
p2843
aS':+1:'
p2844
asg14
S'vanniktech:reactive_resource_observers'
p2845
sbsI4519
(iPull
Pull
p2846
(dp2847
g3
S'This PR adds some more `Maybe` operators:\r\n\r\n  - `ambWith`\r\n  - `cache`\r\n  - `concatWith`\r\n  - `contains`\r\n  - `count`\r\n  - `defaultIfEmpty`\r\n  - `delay`\r\n  - `switchIfEmpty`\r\n  - `zipWith`\r\n\r\nPlus a small cleanup and additional `TestHelper` test support (check double onSubscribe calls, dispose() state management).'
p2848
sg5
S'2.x: add more maybe operators 9/09-1'
p2849
sg7
(lp2850
S'Enhancement'
p2851
asg10
I4519
sg11
(lp2852
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4519?src=pr) is 78.73% (diff: 98.21%)\n> Merging [#4519](https://codecov.io/gh/ReactiveX/RxJava/pull/4519?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.20%**\n\n```diff\n@@                2.x      #4519   diff @@\n==========================================\n  Files           507        512     +5   \n  Lines         34386      34609   +223   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5395       5425    +30   \n==========================================\n+ Hits          27003      27250   +247   \n+ Misses         5411       5392    -19   \n+ Partials       1972       1967     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4f878d5...8f8fce7](https://codecov.io/gh/ReactiveX/RxJava/compare/4f878d56988d572257309dad1a1d0c9fe601f3d8...8f8fce7de54c6e356b96b040799125e0771a78b3?src=pr)'
p2853
aS':+1:'
p2854
asg14
S'akarnokd:MaybeOps909_1'
p2855
sbsI4522
(iPull
Pull
p2856
(dp2857
g3
S'Fixes #4521 '
p2858
sg5
S'observable/flowable/completable/single.delay should always call onerror on the provided scheduler'
p2859
sg7
(lp2860
S'Enhancement'
p2861
asg10
I4522
sg11
(lp2862
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4522?src=pr) is 78.72% (diff: 100%)\n> Merging [#4522](https://codecov.io/gh/ReactiveX/RxJava/pull/4522?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.06%**\n\n```diff\n@@                2.x      #4522   diff @@\n==========================================\n  Files           515        515          \n  Lines         34647      34643     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5431       5431          \n==========================================\n+ Hits          27255      27273    +18   \n+ Misses         5417       5402    -15   \n+ Partials       1975       1968     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [63c4451...4e874a3](https://codecov.io/gh/ReactiveX/RxJava/compare/63c4451dec13ce83665323694883f9b933f779b1...4e874a3ce6abd265488222dd9d035e25208243d7?src=pr)'
p2863
aS':+1:'
p2864
aS'Great job applying the changes to all of the base types!'
p2865
asg14
S'nsk-mironov:fix-delay'
p2866
sbsI4525
(iPull
Pull
p2867
(dp2868
g3
S'Fixes #4524\r\n\r\nTest for combineLatest fill follow'
p2869
sg5
S'2.x: fix generics t[] in zip & combinelatest'
p2870
sg7
(lp2871
S'Bug'
p2872
asg10
I4525
sg11
(lp2873
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4525?src=pr) is 78.71% (diff: 100%)\n> Merging [#4525](https://codecov.io/gh/ReactiveX/RxJava/pull/4525?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4525   diff @@\n==========================================\n  Files           515        515          \n  Lines         34643      34644     +1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5431       5431          \n==========================================\n+ Hits          27268      27269     +1   \n+ Misses         5409       5408     -1   \n- Partials       1966       1967     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [44c5705...4a972f2](https://codecov.io/gh/ReactiveX/RxJava/compare/44c5705b45af3733d8180cd47cdc16146ad9dda2...4a972f2ad4ec11397d6eee147b44bb3e6ab050bb?src=pr)'
p2874
aS'This should be it now'
p2875
aS'Single has exactly 1 and Maybe at most 1 item, so there is only 1 latest that can happen thus there is no difference between combineLatest and zip for these sources.'
p2876
aS':+1:'
p2877
aS"Yup I immediately noticed it after I wrote my comment :D that's also why I deleted it"
p2878
asg14
S'vanniktech:2.x_generics_object_fix'
p2879
sbsI4526
(iPull
Pull
p2880
(dp2881
g3
g57
sg5
S'2.x: more usage of objecthelper'
p2882
sg7
(lp2883
sg10
I4526
sg11
(lp2884
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4526?src=pr) is 78.76% (diff: 100%)\n> Merging [#4526](https://codecov.io/gh/ReactiveX/RxJava/pull/4526?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4526   diff @@\n==========================================\n  Files           515        515          \n  Lines         34644      34628    -16   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5431       5419    -12   \n==========================================\n+ Hits          27263      27276    +13   \n+ Misses         5413       5391    -22   \n+ Partials       1968       1961     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [9966209...046526a](https://codecov.io/gh/ReactiveX/RxJava/compare/9966209d74fdd33d54f633a444c95c601aa21955...046526ae03c9c1caf118643b2bdca9d1920d0bee?src=pr)'
p2885
aS':+1:'
p2886
asg14
S'vanniktech:2.x_objecthelper'
p2887
sbsI4527
(iPull
Pull
p2888
(dp2889
g3
g57
sg5
S'2.x: remove unused declarations'
p2890
sg7
(lp2891
S'Cleanup'
p2892
asg10
I4527
sg11
(lp2893
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4527?src=pr) is 78.78% (diff: 100%)\n> Merging [#4527](https://codecov.io/gh/ReactiveX/RxJava/pull/4527?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4527   diff @@\n==========================================\n  Files           515        515          \n  Lines         34628      34615    -13   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5419       5418     -1   \n==========================================\n+ Hits          27263      27272     +9   \n+ Misses         5399       5390     -9   \n+ Partials       1966       1953    -13   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ca4bba6...4addc15](https://codecov.io/gh/ReactiveX/RxJava/compare/ca4bba69ac5a21045d5e3166fd25b131deef53a7...4addc150d44521fd327c17243d5e2620c86e8198?src=pr)'
p2894
aS"Thanks! FYI, I'm adding operators to Maybe so please avoid that class and related components until I post the PR."
p2895
aS"Alright didn't plan creating any other PR today. Tomorrow I have a few things planned though."
p2896
asg14
S'vanniktech:2.x_unused'
p2897
sbsI4528
(iPull
Pull
p2898
(dp2899
g3
S"  - add `Maybe` operators: `delay`, `hide`, `isEmpty`, `onErrorComplete`, `onErrorResumeNext`, `onExceptionResumeNext`\r\n  - add more fusion interfaces and mark `Maybe.just` and `Maybe.empty` as `ScalarCallable`.\r\n  - added unit test to verify base reactive classes have proper scheduler and backpressure annotations (wherever appropriate)\r\n  - added unit test to verify the javadoc of the main reactive types have the **Backpressure:** and **Scheduler:** sections in them (via scanning the source files if it can find it possible, works for me)\r\n  - added unit test to verify that when **Scheduler:** section mentions a method name, it actually matches the method the javadoc is there for (lots of copy-paste errors were found this way)\r\n  - fix the annotations and documentation errors detected above\r\n  - the backpressure javadoc section checker for 3 types are currently disabled as I'm out of time for tonight.\r\n\r\n"
p2900
sg5
S'2.x: add maybe operators, add annotation and source code checker tests'
p2901
sg7
(lp2902
S'Cleanup'
p2903
aS'Enhancement'
p2904
asg10
I4528
sg11
(lp2905
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4528?src=pr) is 78.76% (diff: 75.13%)\n> Merging [#4528](https://codecov.io/gh/ReactiveX/RxJava/pull/4528?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.04%**\n\n```diff\n@@                2.x      #4528   diff @@\n==========================================\n  Files           515        524     +9   \n  Lines         34615      34980   +365   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5418       5443    +25   \n==========================================\n+ Hits          27280      27552   +272   \n- Misses         5372       5458    +86   \n- Partials       1963       1970     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [15f8054...1727eb6](https://codecov.io/gh/ReactiveX/RxJava/compare/15f805424661af303bf08da4b3eafa856bdcf82d...1727eb65d67337d08adfbaba3a6dad207e0e61c3?src=pr)'
p2906
asg14
S'akarnokd:MaybeOps911_1'
p2907
sbsI4529
(iPull
Pull
p2908
(dp2909
g3
S"Also one question why does `CompletableTimer` check `if (!sd.isDisposed()) {` before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn't add the check there either.\r\n\r\nHowever I feel like this should be consistent, can you elaborate which one is wanted?"
p2910
sg5
S'2.x: fix maybetimber by using scheduler and unit'
p2911
sg7
(lp2912
S'Enhancement'
p2913
asg10
I4529
sg11
(lp2914
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4529?src=pr) is 79.21% (diff: 86.20%)\n> Merging [#4529](https://codecov.io/gh/ReactiveX/RxJava/pull/4529?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.46%**\n\n```diff\n@@                2.x      #4529   diff @@\n==========================================\n  Files           524        527     +3   \n  Lines         34980      35877   +897   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5443       5482    +39   \n==========================================\n+ Hits          27548      28421   +873   \n- Misses         5460       5487    +27   \n+ Partials       1972       1969     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ebec0b2...3541f13](https://codecov.io/gh/ReactiveX/RxJava/compare/ebec0b29e283130345a96417d19c43c0be6e2c1c...3541f1329ab409dab60f5077e092743f1ae90325?src=pr)'
p2915
asg14
S'vanniktech:2.x_fix_MaybeTimer'
p2916
sbsI4530
(iPull
Pull
p2917
(dp2918
g3
S'  - more `Maybe` operators: `onTerminateDetach`, `repeat`, `retry`\r\n  - fixed missing `Backpressure:` entries of the javadoc where the base type uses Flowable/Publisher\r\n  - new base type source parser and check for javadoc mistakes: wrong type mentions, a/an use\r\n  - fixes of those javadoc mistakes'
p2919
sg5
S'2.x: cleanup 9/12-1, more maybe operators, more source code checking'
p2920
sg7
(lp2921
S'Cleanup'
p2922
aS'Enhancement'
p2923
asg10
I4530
sg11
(lp2924
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4530?src=pr) is 78.73% (diff: 61.36%)\n> Merging [#4530](https://codecov.io/gh/ReactiveX/RxJava/pull/4530?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4530   diff @@\n==========================================\n  Files           524        525     +1   \n  Lines         34980      35024    +44   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5443       5447     +4   \n==========================================\n+ Hits          27535      27576    +41   \n- Misses         5466       5474     +8   \n+ Partials       1979       1974     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a588c66...74fede6](https://codecov.io/gh/ReactiveX/RxJava/compare/a588c66271c88ebdce84d4359142bd2cef9bd374...74fede6e0e98525784440c6e762b07c8f7ab57d0?src=pr)'
p2925
aS'/cc @DavidMGross do you recall any common mistake pattern in the documentation?'
p2926
aS'There could also be a test that checks that every file has a license header.'
p2927
aS'How about adding code that checks the headers and adds them when the unit tests are run locally? I usually just run the JUnit tests from Eclipse.'
p2928
aS"The parser didn't check the instance methods properly so a bunch of mistakes remained. Posting a new PR shortly."
p2929
aS'It\'s been a while since I\'ve worked with the Rx javadocs, but here are some\nthings worth looking out for:\n\n   - parameter names change in the code but the javadocs still refer to the\n   old names\n   - potential exceptions change in the code and the javadocs aren\'t\n   updated to match\n   - missing backpressure / scheduler / since-annotations, and outdated\n   information in each of these\n   - changing things from consonant- to vowel-sound-starting, doing a\n   search-and-replace, and not replacing "a" with "an" or vice-versa to\n   match.  Also, sometimes changing singulars to plurals or vice-versa by\n   search-and-replace, which causes its own set of grammatical headaches.\n   - if you see any documentation that uses the passive voice, you can\n   almost always make it clearer and less prone to misinterpretation by\n   rewriting it in the active voice\n   - URLs for marble diagrams are copy-and-pasted, the name of the operator\n   is changed, but the width/height values in the img tag are not, so that the\n   right image appears but in the wrong dimensions (there were a couple of\n   these in the javadocs last I looked)\n\nI wish I had more time to devote to the Rx docs, but I\'m 99% committed to\nanother project right now.\n\nOn Mon, Sep 12, 2016 at 3:49 AM, David Karnok <notifications@github.com>\nwrote:\n\n> /cc @DavidMGross <https://github.com/DavidMGross> do you recall any\n> common mistake pattern in the documentation?\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4530#issuecomment-246312562>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AESHoInXk6N-vtkdgDLbhJJa4E7mv4W7ks5qpS5LgaJpZM4J6buG>\n> .\n>\n\n\n\n-- \nDavid M. Gross\nPLP Consulting\n'
p2930
asg14
S'akarnokd:ConsistencyFixes912_1'
p2931
sbsI4531
(iPull
Pull
p2932
(dp2933
g3
g57
sg5
S'2.x: publishsubject enhance npe when onnext(null) is called'
p2934
sg7
(lp2935
S'Cleanup'
p2936
asg10
I4531
sg11
(lp2937
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4531?src=pr) is 78.71% (diff: 100%)\n> Merging [#4531](https://codecov.io/gh/ReactiveX/RxJava/pull/4531?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4531   diff @@\n==========================================\n  Files           524        524          \n  Lines         34980      34980          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5443       5443          \n==========================================\n- Hits          27548      27536    -12   \n- Misses         5460       5467     +7   \n- Partials       1972       1977     +5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ebec0b2...d6b8c23](https://codecov.io/gh/ReactiveX/RxJava/compare/ebec0b29e283130345a96417d19c43c0be6e2c1c...d6b8c23551222af7efccc322efc912f91857fa04?src=pr)'
p2938
asg14
S'vanniktech:2.x_null_message'
p2939
sbsI4533
(iPull
Pull
p2940
(dp2941
g3
S"  - Fix missed javadoc mistakes, fix the checker that hid those mistakes in instance methods' javadoc due to a bug\r\n  - add `Maybe.takeUntil`"
p2942
sg5
S'2.x: more cleanup and fixed checker, maybe.takeuntil'
p2943
sg7
(lp2944
S'Cleanup'
p2945
aS'Enhancement'
p2946
asg10
I4533
sg11
(lp2947
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4533?src=pr) is 78.70% (diff: 59.22%)\n> Merging [#4533](https://codecov.io/gh/ReactiveX/RxJava/pull/4533?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4533   diff @@\n==========================================\n  Files           525        527     +2   \n  Lines         35024      35127   +103   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5447       5458    +11   \n==========================================\n+ Hits          27572      27647    +75   \n- Misses         5479       5504    +25   \n- Partials       1973       1976     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [460c79a...8fac37f](https://codecov.io/gh/ReactiveX/RxJava/compare/460c79aaaf7ee0a9bf3ca79e7fd60881777edd1d...8fac37fb3f9226ccd898f7637d1a0e92e7500a34?src=pr)'
p2948
aS':+1:'
p2949
asg14
S'akarnokd:CleanupAndMaybe912_2'
p2950
sbsI4536
(iPull
Pull
p2951
(dp2952
g3
g57
sg5
S'observable.timeout/flowable.timeout should unsubscribe from underlying subscription on dispose'
p2953
sg7
(lp2954
S'Bug'
p2955
asg10
I4536
sg11
(lp2956
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4536?src=pr) is 78.72% (diff: 100%)\n> Merging [#4536](https://codecov.io/gh/ReactiveX/RxJava/pull/4536?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4536   diff @@\n==========================================\n  Files           527        527          \n  Lines         35142      35142          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5457       5457          \n==========================================\n+ Hits          27663      27665     +2   \n  Misses         5509       5509          \n+ Partials       1970       1968     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [56d5586...2dc0132](https://codecov.io/gh/ReactiveX/RxJava/compare/56d5586f5ed8b08576418f6e8c8a2ea9c39ccb46...2dc01325efd52211e52befa59dbaed20f006b741?src=pr)'
p2957
aS'Thanks!'
p2958
asg14
S'nsk-mironov:timeout-fix'
p2959
sbsI4537
(iPull
Pull
p2960
(dp2961
g3
S"This PR adds the last couple of `Maybe` operators `timeout` and `unsubscribeOn`.\r\n\r\n@abersnaze Let me know if I missed an operator or you want some overload.\r\n\r\nIn the subsequent PRs, I'll change the return types of some classical operators to better indicate the cardinality they have (`Single`, `Completable`)."
p2962
sg5
S'2.x: last maybe operators'
p2963
sg7
(lp2964
S'Enhancement'
p2965
asg10
I4537
sg11
(lp2966
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4537?src=pr) is 78.63% (diff: 63.18%)\n> Merging [#4537](https://codecov.io/gh/ReactiveX/RxJava/pull/4537?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.06%**\n\n```diff\n@@                2.x      #4537   diff @@\n==========================================\n  Files           527        530     +3   \n  Lines         35142      35324   +182   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5457       5476    +19   \n==========================================\n+ Hits          27658      27778   +120   \n- Misses         5514       5570    +56   \n- Partials       1970       1976     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1ebd979...97fe58b](https://codecov.io/gh/ReactiveX/RxJava/compare/1ebd97900fe79130a3066a2cab1040dddf7229bd...97fe58bb183857555168dca9f92b0f835e57b909?src=pr)'
p2967
aS':+1:'
p2968
asg14
S'akarnokd:MaybeOps912_3'
p2969
sbsI4538
(iPull
Pull
p2970
(dp2971
g3
S"This PR adds about ~100 Reactive-Streams Test Compatibility Kit (TCK) tests of RxJava's most relevant operators and operation modes.\r\n\r\nThe PR also contains a behavior fix for `unsubscribeOn` that now stops propagating events if the cancelled because it may take arbitrary time for the scheduled cancellation to reach the upstream which generally keeps emitting in the meantime."
p2972
sg5
S"2.x: add most relevant ~100 operators' reactive-streams tck tests"
p2973
sg7
(lp2974
S'Test'
p2975
asg10
I4538
sg11
(lp2976
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4538?src=pr) is 78.66% (diff: 21.42%)\n> Merging [#4538](https://codecov.io/gh/ReactiveX/RxJava/pull/4538?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4538   diff @@\n==========================================\n  Files           530        530          \n  Lines         35324      35334    +10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5476       5482     +6   \n==========================================\n+ Hits          27781      27794    +13   \n- Misses         5558       5571    +13   \n+ Partials       1985       1969    -16   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [988cf23...33024ba](https://codecov.io/gh/ReactiveX/RxJava/compare/988cf2324d87d831a500ea215b36abf730854dcc...33024ba4f633b3f9762be26293c629cf9da7320c?src=pr)'
p2977
asg14
S'akarnokd:Tck912_1'
p2978
sbsI4540
(iPull
Pull
p2979
(dp2980
g3
S'`setCancellable` was not tested before.'
p2981
sg5
S'2.x: add create test with cancelable for all types and add more maybecreatetest cases'
p2982
sg7
(lp2983
S'Test'
p2984
asg10
I4540
sg11
(lp2985
S'> Gradle suite > Gradle test > io.reactivex.tck.ObserveOnTckTest. FAILED\r\n    java.lang.AssertionError: Illegal concurrent access detected (entering critical section)! Thread[RxSingleScheduler-1,5,main] emited onNext(0) signal, before Thread[Test worker,5,main] finished its onSubscribe() signal.'
p2986
aS"TCK doesn't seem to like that onSubscribe may trigger emission before it even returns - which is completely legal btw. I'll add a workaround for that in the TCK shortly."
p2987
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4540?src=pr) is 78.60% (diff: 100%)\n> Merging [#4540](https://codecov.io/gh/ReactiveX/RxJava/pull/4540?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4540   diff @@\n==========================================\n  Files           530        530          \n  Lines         35334      35334          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5482       5482          \n==========================================\n- Hits          27782      27773     -9   \n- Misses         5576       5584     +8   \n- Partials       1976       1977     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c60a21a...61f2347](https://codecov.io/gh/ReactiveX/RxJava/compare/c60a21a05c8031eabe792a5325bbb5893d895480...61f2347f0ec50238342fcc06f1779a845e5f6aba?src=pr)'
p2988
asg14
S'vanniktech:2.x_create_tests'
p2989
sbsI4541
(iPull
Pull
p2990
(dp2991
g3
S'  - Change the `Callable<Publisher<T>>` parameter of `timeout` to plain `Publisher<T>` to simplify the API surface; use `defer(Callable<Publisher<T>>)` as input instead\r\n  - change the parameter order of `timeout` from `(long, TimeUnit, Publisher, Scheduler)` to `(long, Timeunit, Scheduler, Publisher)` to better match the general pattern of time-unit-scheduler.\r\n  - `Observable.timeout` has been updated similarly\r\n  - Add `FlowableAwaitOnSubscribeTck` to workaround the case when calling `onNext` (indirectly) from `onSubscribe` may be unexpected (plus randomly fails the observeOn TCK test).'
p2992
sg5
S'2.x: small cleanup and tck fix'
p2993
sg7
(lp2994
S'Cleanup'
p2995
aS'Test-Failures'
p2996
asg10
I4541
sg11
(lp2997
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4541?src=pr) is 78.67% (diff: 100%)\n\n\n> No coverage report found for **2.x** at c030483.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [c030483...0f25d69](https://codecov.io/gh/ReactiveX/RxJava/compare/c030483442914256b3c318e559cbbc8231050f8f...0f25d6953607de4f030e8790cf96f3e940c97736?src=pr)'
p2998
asg14
S'akarnokd:Cleanup913_1'
p2999
sbsI4542
(iPull
Pull
p3000
(dp3001
g3
S'  - fix some javadoc typos\r\n  - replace javadoc mentioning of "unsubscribe" with either "cancel" or "dispose"\r\n  - some minor algorithm reorganizations based on IntelliJ analysis\r\n  - remove the mention of "Nbp" from the code and documentation (it refers to an earlier naming scheme for Observables and Observers)'
p3002
sg5
S"2.x: cleanup of some javadoc errors and mentions of 'nbp'"
p3003
sg7
(lp3004
S'Cleanup'
p3005
asg10
I4542
sg11
(lp3006
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4542?src=pr) is 78.62% (diff: 80.00%)\n> Merging [#4542](https://codecov.io/gh/ReactiveX/RxJava/pull/4542?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4542   diff @@\n==========================================\n  Files           530        530          \n  Lines         35294      35271    -23   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5478       5476     -2   \n==========================================\n- Hits          27746      27732    -14   \n+ Misses         5561       5556     -5   \n+ Partials       1987       1983     -4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [666b05c...a95cf21](https://codecov.io/gh/ReactiveX/RxJava/compare/666b05cc824d8c3927e071da97455e84505d7ca5...a95cf21cca41ced2201a944a9834da1812c71566?src=pr)'
p3007
asg14
S'akarnokd:Cleanup913_2'
p3008
sbsI4549
(iPull
Pull
p3009
(dp3010
g3
S'This PR contains some cleanup, javadoc fixes as well as the API changes for 1.2:\r\n\r\n### Promote beta to standard\r\n\r\n  - `rx.Observable.create(SyncOnSubscribe<S, T>)`\r\n  - `rx.Observable.doOnRequest(Action1<Long>)`\r\n  - `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends R>>, Func1<? super Throwable, ? extends Observable<? extends R>>, Func0<? extends Observable<? extends R>>, int)`\r\n  - `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends R>>, int)`\r\n  - `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends U>>, Func2<? super T, ? super U, ? extends R>, int)`\r\n  - `rx.Observable.flatMapIterable(Func1<? super T, ? extends Iterable<? extends R>>, int)`\r\n  - `rx.Observable.flatMapIterable(Func1<? super T, ? extends Iterable<? extends U>>, Func2<? super T, ? super U, ? extends R>, int)`\r\n  - `rx.Observable.fromCallable(Callable<? extends T>)`\r\n  - `rx.Observable.toSingle()`\r\n  - _ _\r\n  - `rx.Single.fromCallable(Callable<? extends T>)`\r\n  - _ _\r\n  - `rx.SingleSubscriber<T>`\r\n  - _ _\r\n  - `rx.observables.ConnectableObservable.autoConnect()`\r\n  - `rx.observables.ConnectableObservable.autoConnect(int, Action1<? super Subscription>)`\r\n  - `rx.observables.ConnectableObservable.autoConnect(int)`\r\n  - _ _\r\n  - `rx.observables.SyncOnSubscribe<S, T>`\r\n  - _ _\r\n  - `rx.subjects.AsyncSubject.getThrowable()`\r\n  - `rx.subjects.AsyncSubject.getValue()`\r\n  - `rx.subjects.AsyncSubject.hasCompleted()`\r\n  - `rx.subjects.AsyncSubject.hasThrowable()`\r\n  - `rx.subjects.AsyncSubject.hasValue()`\r\n  - _ _\r\n  - `rx.subjects.BehaviorSubject.getThrowable()`\r\n  - `rx.subjects.BehaviorSubject.getValue()`\r\n  - `rx.subjects.BehaviorSubject.getValues()`\r\n  - `rx.subjects.BehaviorSubject.getValues(T[])`\r\n  - `rx.subjects.BehaviorSubject.hasCompleted()`\r\n  - `rx.subjects.BehaviorSubject.hasThrowable()`\r\n  - `rx.subjects.BehaviorSubject.hasValue()`\r\n  - _ _\r\n  - `rx.subjects.PublishSubject.getThrowable()`\r\n  - `rx.subjects.PublishSubject.hasCompleted()`\r\n  - `rx.subjects.PublishSubject.hasThrowable()`\r\n  - _ _\r\n  - `rx.subjects.ReplaySubject.getThrowable()`\r\n  - `rx.subjects.ReplaySubject.getValue()`\r\n  - `rx.subjects.ReplaySubject.getValues()`\r\n  - `rx.subjects.ReplaySubject.getValues(T[])`\r\n  - `rx.subjects.ReplaySubject.hasAnyValue()`\r\n  - `rx.subjects.ReplaySubject.hasCompleted()`\r\n  - `rx.subjects.ReplaySubject.hasThrowable()`\r\n  - `rx.subjects.ReplaySubject.hasValue()`\r\n  - `rx.subjects.ReplaySubject.size()`\r\n\r\n### Promote experimental to standard\r\n\r\nNone.\r\n\r\n### Promote to beta\r\n\r\n  - `rx.BackpressureOverflow`\r\n  - `rx.Observable.concatDelayError(Iterable<? extends Observable<? extends T>>)`\r\n  - `rx.Observable.concatDelayError(Observable<? extends Observable<? extends T>>)`\r\n  - `rx.Observable.concatEager(Iterable<? extends Observable<? extends T>>, int)`\r\n  - `rx.Observable.concatEager(Iterable<? extends Observable<? extends T>>)`\r\n  - `rx.Observable.concatEager(Observable<? extends Observable<? extends T>>, int)`\r\n  - `rx.Observable.concatEager(Observable<? extends Observable<? extends T>>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>)`\r\n  - `rx.Observable.concatMapDelayError(Func1<? super T, ? extends Observable<? extends R>>)`\r\n  - `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>, int, int)`\r\n  - `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>, int)`\r\n  - `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>)`\r\n  - `rx.Observable.delaySubscription(Observable<U>)`\r\n  - `rx.Observable.distinctUntilChanged(Func2<? super T, ? super T, Boolean>)`\r\n  - `rx.Observable.mergeDelayError(Observable<? extends Observable<? extends T>>, int)`\r\n  - `rx.Observable.onBackpressureBuffer(long, Action0, Strategy)`\r\n  - `rx.Observable.switchMapDelayError(Func1<? super T, ? extends Observable<? extends R>>)`\r\n  - `rx.Observable.switchOnNextDelayError(Observable<? extends Observable<? extends T>>)`\r\n  - `rx.Observable.toCompletable()`\r\n  - `rx.Observable.toSortedList(Func2<? super T, ? super T, Integer>, int)`\r\n  - `rx.Observable.toSortedList(int)`\r\n  - `rx.Observable.using(Func0<Resource>, Func1<? super Resource, ? extends Observable<? extends T>>, Action1<? super Resource>, boolean)`\r\n  - _ _\r\n  - `rx.observables.BlockingObservable.subscribe()`\r\n  - `rx.observables.BlockingObservable.subscribe(Action1<? super T>, Action1<? super Throwable>, Action0)`\r\n  - `rx.observables.BlockingObservable.subscribe(Action1<? super T>, Action1<? super Throwable>)`\r\n  - `rx.observables.BlockingObservable.subscribe(Action1<? super T>)`\r\n  - `rx.observables.BlockingObservable.subscribe(Observer<? super T>)`\r\n  - `rx.observables.BlockingObservable.subscribe(Subscriber<? super T>)`\r\n  - _ _\r\n  - `rx.Completable`\r\n  - _ _\r\n  - `rx.Single.defer(Callable<Single<T>>)`\r\n  - `rx.Single.delay(long, TimeUnit, Scheduler)`\r\n  - `rx.Single.delay(long, TimeUnit)`\r\n  - `rx.Single.delaySubscription(Observable<?>)`\r\n  - `rx.Single.doAfterTerminate(Action0)`\r\n  - `rx.Single.doOnError(Action1<Throwable>)`\r\n  - `rx.Single.doOnSubscribe(Action0)`\r\n  - `rx.Single.doOnSuccess(Action1<? super T>)`\r\n  - `rx.Single.doOnUnsubscribe(Action0)`\r\n  - `rx.Single.lift(Operator<? extends R, ? super T>)`\r\n  - `rx.Single.onErrorResumeNext(Func1<Throwable, ? extends Single<? extends T>>)`\r\n  - `rx.Single.onErrorResumeNext(Single<? extends T>)`\r\n  - `rx.Single.toBlocking()`\r\n  - `rx.Single.toCompletable()`\r\n  - `rx.Single.using(Func0<Resource>, Func1<? super Resource, ? extends Single<? extends T>>, Action1<? super Resource>, boolean)`\r\n  - `rx.Single.using(Func0<Resource>, Func1<? super Resource, ? extends Single<? extends T>>, Action1<? super Resource>)`\r\n  - _ _\r\n  - `rx.exceptions.CompositeException.CompositeException(Throwable...)`\r\n  - _ _\r\n  - `rx.exceptions.Exceptions.throwOrReport(Throwable, Observer<?>, Object)`\r\n  - `rx.exceptions.Exceptions.throwOrReport(Throwable, Observer<?>)`\r\n  - `rx.exceptions.Exceptions.throwOrReport(Throwable, SingleSubscriber<?>)`\r\n  - _ _\r\n  - `rx.singles.BlockingSingle<T>``\r\n\r\n### Removed\r\n\r\n  - `rx.Observable.extend(Func1<OnSubscribe<T>, R>)`\r\n  - `rx.Observable.fromAsync()`\r\n  - _ _\r\n  - `rx.Completable.CompletableSubscriber`\r\n  - `rx.Completable.CompletableOnSubscribe`\r\n  - `rx.Completable.CompletableLift`\r\n  - `rx.Completable.CompletableTransform`\r\n'
p3011
sg5
S'1.2 preparation cleanup and experimental/beta/deprecated adjustments'
p3012
sg7
(lp3013
S'API promotion'
p3014
aS'Cleanup'
p3015
asg10
I4549
sg11
(lp3016
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4549?src=pr) is 84.52% (diff: 90.84%)\n> Merging [#4549](https://codecov.io/gh/ReactiveX/RxJava/pull/4549?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will increase coverage by **0.29%**\n\n```diff\n@@                1.x      #4549   diff @@\n==========================================\n  Files           272        272          \n  Lines         17647      17571    -76   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2687       2683     -4   \n==========================================\n- Hits          14865      14852    -13   \n+ Misses         1920       1866    -54   \n+ Partials        862        853     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [ff16f76...a4e5562](https://codecov.io/gh/ReactiveX/RxJava/compare/ff16f76de6d7a6d47de250ff48f6fb7ab611067f...a4e55624564f5f5911ec4ea2ef0909db98cf4ab7?src=pr)'
p3017
aS':+1:'
p3018
asg14
S'akarnokd:Cleanup914_1'
p3019
sbsI4552
(iPull
Pull
p3020
(dp3021
g3
S"This PR has 781 lines changed across 511 files so GitHub won't display the complete diff. It is advised to check this out and do a diff in your IDE.\r\n\r\nNotable changes:\r\n\r\n  - replace mention of `onCompleted` with `onComplete`\r\n  - remove `public` from constructors of package-private classes (some may think the class was intended to be public but usually isn't)\r\n  - few minor whitespace addition around operators (so the code doesn't look so cluttered to me when I have view/debug older code or unit tests contributed a while ago)\r\n  - add missing `.` from the end of the first sencence in javadocs\r\n  - removed empty `/** */` comments above the `serialVersionUID` fields\r\n  - use checkstyle tool version 6.19 plus a few more checkstyle rules\r\n  - fix ObservableRedo asnyc reentrancy problem by serializing the subject"
p3022
sg5
S'2.x: cleanup of style and other minor things, 9/14-1'
p3023
sg7
(lp3024
S'Cleanup'
p3025
asg10
I4552
sg11
(lp3026
S'LGTM :+1:'
p3027
aS"Looks like the build OOM'd"
p3028
aS"I'll disable the extra checks."
p3029
aS'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4552?src=pr) is 78.59% (diff: 97.40%)\n> Merging [#4552](https://codecov.io/gh/ReactiveX/RxJava/pull/4552?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.10%**\n\n```diff\n@@                2.x      #4552   diff @@\n==========================================\n  Files           530        528     -2   \n  Lines         35271      35270     -1   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5476       5476          \n==========================================\n- Hits          27760      27722    -38   \n- Misses         5542       5570    +28   \n- Partials       1969       1978     +9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [8e9c935...72e3f71](https://codecov.io/gh/ReactiveX/RxJava/compare/8e9c935d5cfea34bee05b762407cc15106493f17...72e3f7162a624f7d525f237885ad98c99081c547?src=pr)'
p3030
asg14
S'akarnokd:OnCompleteNoD'
p3031
sbsI4554
(iPull
Pull
p3032
(dp3033
g3
S'  - Make internal naming of components consistent with the base reactive type\r\n  - move `io.reactivex.internal.subscribers.flowable.*` to `io.reactivex.internal.subscribers`\r\n  - move `io.reactivex.internal.subscribers.observable.*` to `io.reactivex.internal.observers`'
p3034
sg5
S'2.x: make internal naming consistent, refactor some classes 9/14-2'
p3035
sg7
(lp3036
S'Cleanup'
p3037
asg10
I4554
sg11
(lp3038
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4554?src=pr) is 78.62% (diff: 90.10%)\n> Merging [#4554](https://codecov.io/gh/ReactiveX/RxJava/pull/4554?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4554   diff @@\n==========================================\n  Files           528        528          \n  Lines         35270      35266     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5476       5474     -2   \n==========================================\n+ Hits          27728      27729     +1   \n+ Misses         5562       5560     -2   \n+ Partials       1980       1977     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6ff866a...4eb1414](https://codecov.io/gh/ReactiveX/RxJava/compare/6ff866ae1b9ee08194c01a2f3b2d5cf091f7d78b...4eb141431f7c5cb836cea8b7ca66d99922cef692?src=pr)'
p3039
aS'oh god the rebasing.'
p3040
aS"@abersnaze I recommend you post one or two operator changes at a time as it is likely they need some extra changes until they match structure I expect (such as in Maybe.isEmpty()). This way, you don't have large interference from cascading fixes in the 2.x branch."
p3041
aS"Its hard because they are so intertwined.\n\nOn Wed, Sep 14, 2016 at 1:49 PM, David Karnok <notifications@github.com>\nwrote:\n\n> @abersnaze <https://github.com/abersnaze> I recommend you post one or two\n> operator changes at a time as it is likely they need some extra changes\n> until they match structure I expect (such as in Maybe.isEmpty()). This way,\n> you don't have large interference from cascading fixes in the 2.x branch.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4554#issuecomment-247148626>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAYyFjBp0eMUxNra_DLbVbJnwaDL-By6ks5qqF3TgaJpZM4J9KbF>\n> .\n>\n"
p3042
aS"I've run out of ideas about what to clean up so you should have no interference from me in the following days."
p3043
asg14
S'akarnokd:ObservableNoSubscribeMention'
p3044
sbsI4556
(iPull
Pull
p3045
(dp3046
g3
S"This PR adds a safeguard so that when releasing, mis-tagging the 1.x branch won't build and release `io.reactivex:rxjava:2.*` (2.x goes into `io.reactivex.rxjava2:rxjava:2.*`).\r\n\r\nSince I can't try this locally (or can't really try a real tag&release), the PR will get a few commits along the way."
p3047
sg5
S'1.x: safeguard against building with 2.* tags'
p3048
sg7
(lp3049
S'Build'
p3050
asg10
I4556
sg11
(lp3051
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4556?src=pr) is 84.42% (diff: 100%)\n> Merging [#4556](https://codecov.io/gh/ReactiveX/RxJava/pull/4556?src=pr) into [1.x](https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr) will decrease coverage by **0.09%**\n\n```diff\n@@                1.x      #4556   diff @@\n==========================================\n  Files           272        272          \n  Lines         17571      17571          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2683       2683          \n==========================================\n- Hits          14852      14835    -17   \n- Misses         1862       1873    +11   \n- Partials        857        863     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4ae4a40...a8f7b48](https://codecov.io/gh/ReactiveX/RxJava/compare/4ae4a40a2f493978851035e18a6159380f15573f...a8f7b48c0043f2f163d5a1aaa30931d048cbd2d5?src=pr)'
p3052
asg14
S'akarnokd:BuildFailSafe'
p3053
sbsI4560
(iPull
Pull
p3054
(dp3055
g3
g57
sg5
S'2.x: fix typo in single + maybe defer()'
p3056
sg7
(lp3057
S'Cleanup'
p3058
asg10
I4560
sg11
(lp3059
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4560?src=pr) is 78.68% (diff: 100%)\n> Merging [#4560](https://codecov.io/gh/ReactiveX/RxJava/pull/4560?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@                2.x      #4560   diff @@\n==========================================\n  Files           528        528          \n  Lines         35266      35266          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5474       5474          \n==========================================\n- Hits          27756      27749     -7   \n- Misses         5532       5548    +16   \n+ Partials       1978       1969     -9   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [4017e26...aa8c06b](https://codecov.io/gh/ReactiveX/RxJava/compare/4017e26b22b4905c241d1f3b13e9387bab5ccbd8...aa8c06bb0e34560eba02dba975f22b076ef12219?src=pr)'
p3060
asg14
S'vanniktech:2.x_typo'
p3061
sbsI4561
(iPull
Pull
p3062
(dp3063
g3
g57
sg5
S'2.x: enhance npe message in create functions of all base reactive types'
p3064
sg7
(lp3065
S'Cleanup'
p3066
asg10
I4561
sg11
(lp3067
S'## [Current coverage](https://codecov.io/gh/ReactiveX/RxJava/pull/4561?src=pr) is 78.68% (diff: 0.00%)\n> Merging [#4561](https://codecov.io/gh/ReactiveX/RxJava/pull/4561?src=pr) into [2.x](https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4561   diff @@\n==========================================\n  Files           528        528          \n  Lines         35266      35266          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       5474       5474          \n==========================================\n+ Hits          27747      27750     +3   \n- Misses         5540       5547     +7   \n+ Partials       1979       1969    -10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f4daec6...f336624](https://codecov.io/gh/ReactiveX/RxJava/compare/f4daec6334454003ed394db1c1336af4527721f3...f3366249385d2010d42ca46e2017a7803490e6ab?src=pr)'
p3068
asg14
S'vanniktech:2.x_create_exception_message'
p3069
sbsI3231
(iPull
Pull
p3070
(dp3071
g3
S'+ bufferSize +delayError options, as usual by now'
p3072
sg5
S'operator takelast time + size, skiplast time'
p3073
sg7
(lp3074
S'Enhancement'
p3075
asg10
I3231
sg11
(lp3076
sg14
S'akarnokd:OperatorTimedLastSkipTake2x'
p3077
sbsI3232
(iPull
Pull
p3078
(dp3079
g3
S"The multi-offer helps with the timed skipLast. By offering two at once, the drain won't loop until the second value arrives."
p3080
sg5
S'operators first, last, multi-offer for spsclinkedarrayqueue'
p3081
sg7
(lp3082
S'Enhancement'
p3083
asg10
I3232
sg11
(lp3084
sg14
S'akarnokd:OperatorFirstLast2x'
p3085
sbsI3234
(iPull
Pull
p3086
(dp3087
g3
S'overloads, some refactorings'
p3088
sg5
S'operator switchmap, switchonnext, added missing merge and concat'
p3089
sg7
(lp3090
S'Enhancement'
p3091
asg10
I3234
sg11
(lp3092
sg14
S'akarnokd:OperatorSwitchMap2x'
p3093
sbsI3235
(iPull
Pull
p3094
(dp3095
g3
S'Very similar to zip in terms of structure.'
p3096
sg5
S'operator amb, ambwith'
p3097
sg7
(lp3098
S'Enhancement'
p3099
asg10
I3235
sg11
(lp3100
sg14
S'akarnokd:OperatorAmb2x'
p3101
sbsI3237
(iPull
Pull
p3102
(dp3103
g3
S'+ onErrorReturnValue'
p3104
sg5
S'operators onerrorreturn, onerrorresumenext, onexceptionresumenext'
p3105
sg7
(lp3106
S'Enhancement'
p3107
asg10
I3237
sg11
(lp3108
sg14
S'akarnokd:OperatorOnErrorNext'
p3109
sbsI3238
(iPull
Pull
p3110
(dp3111
g3
S'+ a fix to OperatorOnErrorNext'
p3112
sg5
S'operator retrywhen, repeatwhen; notification'
p3113
sg7
(lp3114
S'Enhancement'
p3115
asg10
I3238
sg11
(lp3116
sg14
S'akarnokd:OperatorRedo'
p3117
sbsI3239
(iPull
Pull
p3118
(dp3119
g3
S'+ a small correction to ConditionalSubscriber: the default onNext removed to avoid bad usage (i.e., not requesting if not accepted).'
p3120
sg5
S'operator takewhile'
p3121
sg7
(lp3122
S'Enhancement'
p3123
asg10
I3239
sg11
(lp3124
sg14
S'akarnokd:OperatorTakeWhile2x'
p3125
sbsI3240
(iPull
Pull
p3126
(dp3127
g3
S'Inlined (no zipping and wrapping like in 1.x)'
p3128
sg5
S'operator sequenceequal'
p3129
sg7
(lp3130
S'Enhancement'
p3131
asg10
I3240
sg11
(lp3132
sg14
S'akarnokd:OperatorSequenceEquals2x'
p3133
sbsI3241
(iPull
Pull
p3134
(dp3135
g3
S'+ Some minor internal refactorings in `Observable`.'
p3136
sg5
S'operator combinelatest'
p3137
sg7
(lp3138
S'Enhancement'
p3139
asg10
I3241
sg11
(lp3140
sg14
S'akarnokd:PublisherCombineLatest2x'
p3141
sbsI3242
(iPull
Pull
p3142
(dp3143
g3
S'EmptySubscriber convenience method to reduce boilerplate.'
p3144
sg5
S'operator using, some internal refactorings.'
p3145
sg7
(lp3146
S'Enhancement'
p3147
asg10
I3242
sg11
(lp3148
sg14
S'akarnokd:OperatorUsing2x'
p3149
sbsI3243
(iPull
Pull
p3150
(dp3151
g3
S'`Optional.ofNullable` returns an empty instance, not a null-containing one.'
p3152
sg5
S'operator materialize, dematerialize, minor notification fix.'
p3153
sg7
(lp3154
S'Enhancement'
p3155
asg10
I3243
sg11
(lp3156
sg14
S'akarnokd:OperatorMaterialize2x'
p3157
sbsI3244
(iPull
Pull
p3158
(dp3159
g3
S'The `delaySubscription` is implemented via composition.'
p3160
sg5
S'operators delay, delaysubscription, share.'
p3161
sg7
(lp3162
S'Enhancement'
p3163
asg10
I3244
sg11
(lp3164
sg14
S'akarnokd:OperatorsDerivedPack2x'
p3165
sbsI3245
(iPull
Pull
p3166
(dp3167
g3
S'subscribe, stream, forEach, iterator\r\n\r\nNow it extends both Publisher and Iterable directly.'
p3168
sg5
S'blockingobservable, next, latest, mostrecent, first, last, single,'
p3169
sg7
(lp3170
S'Enhancement'
p3171
asg10
I3245
sg11
(lp3172
sg14
S'akarnokd:BlockingObservablePart2x'
p3173
sbsI3246
(iPull
Pull
p3174
(dp3175
g3
S'Converted nicely.'
p3176
sg5
S'operator refcount'
p3177
sg7
(lp3178
S'Enhancement'
p3179
asg10
I3246
sg11
(lp3180
sg14
S'akarnokd:OperatorRefCount2x'
p3181
sbsI3247
(iPull
Pull
p3182
(dp3183
g3
S'subscriber only.\r\n\r\nShould be the official API replacement of BufferUntilSubscriber.'
p3184
sg5
S'unicastsubject, onbackpressurebuffer-like behavior for a single'
p3185
sg7
(lp3186
S'Enhancement'
p3187
asg10
I3247
sg11
(lp3188
sg14
S'akarnokd:UnicastSubject2x'
p3189
sbsI3248
(iPull
Pull
p3190
(dp3191
g3
S'The boundary version will come next.'
p3192
sg5
S'operators buffer: size, time, size + time'
p3193
sg7
(lp3194
S'Enhancement'
p3195
asg10
I3248
sg11
(lp3196
sg14
S'akarnokd:OperatorBuffer2x'
p3197
sbsI3249
(iPull
Pull
p3198
(dp3199
g3
g57
sg5
S'update observable.java'
p3200
sg7
(lp3201
sg10
I3249
sg11
(lp3202
sg14
S'Vence:1.x'
p3203
sbsI3250
(iPull
Pull
p3204
(dp3205
g3
S'variants. \r\n\r\nAdded `QueueDrain` and `QueueDrainSubscriber` for common queue-drain\r\noperations. Not applied outside the `buffer()`s as of now.'
p3206
sg5
S'operator buffer with boundary and open-close, fixes to the timed'
p3207
sg7
(lp3208
S'Enhancement'
p3209
asg10
I3250
sg11
(lp3210
sg14
S'akarnokd:OperatorBufferWithPublisher2x'
p3211
sbsI3251
(iPull
Pull
p3212
(dp3213
g3
S'Luckily, there is no need to count the emission per subject but just use\r\narithmetic.'
p3214
sg5
S'window with count, count + skip.'
p3215
sg7
(lp3216
S'Enhancement'
p3217
asg10
I3251
sg11
(lp3218
sg14
S'akarnokd:OperatorWindowSized2x'
p3219
sbsI3253
(iPull
Pull
p3220
(dp3221
g3
S"The timed buffer and window operators are quite complicated in terms of\r\nconcurrency. I'm not sure if all corner cases are covered."
p3222
sg5
S'operator window timespan, timespan + count, timespan + timeskip'
p3223
sg7
(lp3224
S'Enhancement'
p3225
asg10
I3253
sg11
(lp3226
sg14
S'akarnokd:OperatorWindowTimed2x'
p3227
sbsI3254
(iPull
Pull
p3228
(dp3229
g3
S'(Taking a break from `window()` operators.)'
p3230
sg5
S'operator debounce (time, selector), throttlewithtimeout (alias)'
p3231
sg7
(lp3232
S'Enhancement'
p3233
asg10
I3254
sg11
(lp3234
sg14
S'akarnokd:OperatorDebounce2x'
p3235
sbsI3255
(iPull
Pull
p3236
(dp3237
g3
S'TestSubscriber now does asynchronous requests and cancellation.'
p3238
sg5
S'operator scan, reduce. fixes to testsubscriber async behavior.'
p3239
sg7
(lp3240
S'Enhancement'
p3241
asg10
I3255
sg11
(lp3242
sg14
S'akarnokd:OperatorScan'
p3243
sbsI3256
(iPull
Pull
p3244
(dp3245
g3
S"I've implemented the wrong debounce logic in #3254 ."
p3246
sg5
S'fixed debounce behavior, added throttlefirst, throttlelast alias'
p3247
sg7
(lp3248
S'Enhancement'
p3249
asg10
I3256
sg11
(lp3250
sg14
S'akarnokd:OperatorDebounceFix2x'
p3251
sbsI3257
(iPull
Pull
p3252
(dp3253
g3
S"types.\r\n\r\n+ FullArbiter and FullArbiterSubscriber to work with total-ordered notifications across sources.\r\n\r\nI've also sorted `Observable` members."
p3254
sg5
S'operator timeout, onbackpressurebuffer(onoverflow), fixes to parameter'
p3255
sg7
(lp3256
S'Enhancement'
p3257
asg10
I3257
sg11
(lp3258
sg14
S'akarnokd:OperatorTimeout2x'
p3259
sbsI3258
(iPull
Pull
p3260
(dp3261
g3
S'Has full backpressure support (replays as many elements as requested).'
p3262
sg5
S'replaysubject'
p3263
sg7
(lp3264
S'Enhancement'
p3265
asg10
I3258
sg11
(lp3266
S"@akarnokd Do you also plan to provide  backpressure support for `ReplaySubject` in 1.x? (I'd like it!)"
p3267
aS"There was an attempt before but didn't get through. The problem with 1.x is that it has an expected optimization to goes on a fast path once the subscriber has caught up and no further replay/buffering happens for that particular subscriber. With backpressure, there would be one CAS at minimum for every value delivered which has 6x the overhead compared to a write-through."
p3268
asg14
S'akarnokd:ReplaySubject2x'
p3269
sbsI3259
(iPull
Pull
p3270
(dp3271
g3
g57
sg5
S'rxjavaplugins extended with handler registration and reset support'
p3272
sg7
(lp3273
S'Enhancement'
p3274
asg10
I3259
sg11
(lp3275
sg14
S'akarnokd:RxJavaPlugins2x'
p3276
sbsI3260
(iPull
Pull
p3277
(dp3278
g3
S"The continuous delivery guarantee and the no-duplication requirement makes it necessary to read/write an index and object values together. I've implemented this with another synchronized block. The alternatives are:\r\n\r\n  - use an object of (index, value) and atomically set the reference (requires allocation on every value delivered.\r\n  - this current nested-synchronized block (no deadlock)\r\n  - use a reader-writer lock which works better when concurrent subscribers want to do their first emission at the same time."
p3279
sg5
S'behaviorsubject'
p3280
sg7
(lp3281
S'Enhancement'
p3282
asg10
I3260
sg11
(lp3283
sg14
S'akarnokd:BehaviorSubject2x'
p3284
sbsI3261
(iPull
Pull
p3285
(dp3286
g3
S'ReplaySubject: time and size bound trimming was incorrectly deleting the terminal notification\r\n\r\nBehaviorSubject: double emission of the same value. The following loop fails (prints `Bad pattern received: [2, 2]`) with 1.x:\r\n\r\n```java\r\nfor (int i = 0; i < 1_000_000; i++) {\r\n    if (i % 1000 == 0) {\r\n        System.out.println("--> " + i);\r\n    }\r\n    BehaviorSubject<Object> bs = BehaviorSubject.create(1);\r\n    \r\n    List<Object> list = new ArrayList<>();\r\n    CyclicBarrier cb = new CyclicBarrier(2);\r\n    CountDownLatch cdl = new CountDownLatch(1);\r\n    \r\n    ForkJoinPool.commonPool().submit(() -> {\r\n        cb.await();\r\n        bs.onNext(2);\r\n        cdl.countDown();\r\n        return null;\r\n    });\r\n    \r\n    cb.await();\r\n    bs.subscribe(v -> list.add(v));\r\n    cdl.await();\r\n\r\n    if (Arrays.asList(2).equals(list)) {\r\n        continue;\r\n    }\r\n    if (Arrays.asList(1, 2).equals(list)) {\r\n        continue;\r\n    }\r\n    System.out.println("Bad pattern received: " + list);\r\n        break;\r\n    }\r\n}\r\n```'
p3287
sg5
S'fixes to replaysubject and behaviorsubject.'
p3288
sg7
(lp3289
S'Enhancement'
p3290
asg10
I3261
sg11
(lp3291
sg14
S'akarnokd:SubjectFixes0901'
p3292
sbsI3262
(iPull
Pull
p3293
(dp3294
g3
S"I'm not 100% certain about the state management: when to let the main\r\nsource keep running and when to stop. I.e., the in the selector version,\r\nif the other completes, it means no new window will be opened but the\r\nactive should keep receiving values until their closer fires. If all\r\nsuch closers have fired, the main can be stopped."
p3295
sg5
S'operator window with boundary (exact, selector, exact + supplier).'
p3296
sg7
(lp3297
S'Enhancement'
p3298
asg10
I3262
sg11
(lp3299
sg14
S'akarnokd:WindowBoundary2x'
p3300
sbsI3263
(iPull
Pull
p3301
(dp3302
g3
S'Subjects are exposed so they may receive nulls that would mess up the internal state.'
p3303
sg5
S'subjects onnext and onerror null safety'
p3304
sg7
(lp3305
S'Enhancement'
p3306
asg10
I3263
sg11
(lp3307
sg14
S'akarnokd:SubjectNullSafe2x'
p3308
sbsI3264
(iPull
Pull
p3309
(dp3310
g3
S"It is meant to be somewhat a replacement for 1.x `rx.Subscriber`, but it\r\ndoesn't support `Subscriber` chaining.\r\n\r\nI call it an `Observer` because one only needs to implement `onNext`, `onError`\r\nand `onComplete` as with `rx.Observer`"
p3311
sg5
S'asyncobserver'
p3312
sg7
(lp3313
S'Enhancement'
p3314
asg10
I3264
sg11
(lp3315
sg14
S'akarnokd:AsyncObserver2x'
p3316
sbsI3265
(iPull
Pull
p3317
(dp3318
g3
S"By using null checks and direct returns we can avoid a dynamic dispatch\r\non a volatile variable which always more expensive.\r\n\r\nI've also added the `lockdown()` method to prevent any further changing\r\nof the plugin handlers. There is a `unlock` package-private method to\r\nallow testing the plugin in the locked state and then return to the\r\nunlocked state as other tests may want to install custom plugins."
p3319
sg5
S'rxjavaplugins performance enabling fix & lockdown.'
p3320
sg7
(lp3321
S'Enhancement'
p3322
asg10
I3265
sg11
(lp3323
sg14
S'akarnokd:RxJavaPluginsPerfFix'
p3324
sbsI3267
(iPull
Pull
p3325
(dp3326
g3
S"a function and handling backpressure/resource cleanup automatically.\r\n\r\nThe logic is based on @stealthcode 's SyncSubscriber proposal from 1.x\r\nbut using only the lambda-form."
p3327
sg5
S'operator generate: create an observable that generates values by calling'
p3328
sg7
(lp3329
S'Enhancement'
p3330
asg10
I3267
sg11
(lp3331
sg14
S'akarnokd:OperatorGenerate2x'
p3332
sbsI3268
(iPull
Pull
p3333
(dp3334
g3
S'+ `Disposables` utility class with wrapper methods named `from`.'
p3335
sg5
S'standard disposables, changes to resource containers to support them.'
p3336
sg7
(lp3337
S'Enhancement'
p3338
asg10
I3268
sg11
(lp3339
sg14
S'akarnokd:Disposables2x'
p3340
sbsI3270
(iPull
Pull
p3341
(dp3342
g3
S'The cancellation notification will come in handy with window (and in\r\ngroupby). It helps with the case when the main source has been cancelled\r\nbut the individual windows/groups are still being consumed. If those get\r\ncancelled by their single Subscribers, this notification will reach the\r\nsource and once all windows/groups get cancelled, the main source can be\r\ncancelled.\r\n\r\nFix to generator production accounting.'
p3343
sg5
S'unicastsubject javadoc, support for oncancelled notification.'
p3344
sg7
(lp3345
S'Enhancement'
p3346
asg10
I3270
sg11
(lp3347
sg14
S'akarnokd:UnicastSubjectExpansion2x'
p3348
sbsI3271
(iPull
Pull
p3349
(dp3350
g3
S'Fixed mistakes in the operators.'
p3351
sg5
S'first unit test and fixes to operators.'
p3352
sg7
(lp3353
S'Bug'
p3354
aS'Enhancement'
p3355
asg10
I3271
sg11
(lp3356
sg14
S'akarnokd:UnitTestsPreparation'
p3357
sbsI3272
(iPull
Pull
p3358
(dp3359
g3
S'Either the test is non-deterministic or I have a bug in the operator(s).'
p3360
sg5
S'firehose test fix attempt2x'
p3361
sg7
(lp3362
S'Test-Failures'
p3363
asg10
I3272
sg11
(lp3364
S'OOps, wrong branch.'
p3365
asg14
S'akarnokd:FirehoseTestFixAttempt2x'
p3366
sbsI3273
(iPull
Pull
p3367
(dp3368
g3
S'Either the test is non-deterministic or I still have a bug.'
p3369
sg5
S'fix attempt to the firehose test.'
p3370
sg7
(lp3371
S'Test-Failures'
p3372
asg10
I3273
sg11
(lp3373
sg14
S'akarnokd:FirehoseTestFixAttempt2x'
p3374
sbsI3274
(iPull
Pull
p3375
(dp3376
g3
g57
sg5
S'combine latest test2x'
p3377
sg7
(lp3378
sg10
I3274
sg11
(lp3379
S'I was trying to set a label and the page just created the pull request...'
p3380
asg14
S'akarnokd:CombineLatestTest2x'
p3381
sbsI3275
(iPull
Pull
p3382
(dp3383
g3
S'Forgot to deliver the value inside the GroupedUnicast drain loop.'
p3384
sg5
S'simplest combinelatest tests and fix to groupby.'
p3385
sg7
(lp3386
S'Bug'
p3387
aS'Test'
p3388
asg10
I3275
sg11
(lp3389
sg14
S'akarnokd:CombineLatestTest2x'
p3390
sbsI3276
(iPull
Pull
p3391
(dp3392
g3
S"I've also added convenience overloads to concat 2-9 sources because `concat(Publisher...)` causes overload resolution conflict with `concat(Publisher<Publisher>)`."
p3393
sg5
S'simplest concat test from 1.x'
p3394
sg7
(lp3395
S'Enhancement'
p3396
aS'Test'
p3397
asg10
I3276
sg11
(lp3398
sg14
S'akarnokd:ConcatTests2x'
p3399
sbsI3277
(iPull
Pull
p3400
(dp3401
g3
S"I've changed them to use `safeSubscribe` because plain RS subscribers\r\nare not expected to throw."
p3402
sg5
S'errorhandlingtests and eventstream'
p3403
sg7
(lp3404
S'Test'
p3405
asg10
I3277
sg11
(lp3406
sg14
S'akarnokd:ErrorHandlingTests2x'
p3407
sbsI3278
(iPull
Pull
p3408
(dp3409
g3
S'We need to talk about `Notification`s.'
p3410
sg5
S'simplest tests of groupby, merge and notification'
p3411
sg7
(lp3412
S'Test'
p3413
asg10
I3278
sg11
(lp3414
sg14
S'akarnokd:GroupByMergeNotificationTest2x'
p3415
sbsI3279
(iPull
Pull
p3416
(dp3417
g3
S'Forgot to call request, refactored some validation code.'
p3418
sg5
S'conversiontest and doontest'
p3419
sg7
(lp3420
S'Bug'
p3421
aS'Test'
p3422
asg10
I3279
sg11
(lp3423
sg14
S'akarnokd:TestsToDoOnObservable2x'
p3424
sbsI3280
(iPull
Pull
p3425
(dp3426
g3
S'Bugfixes in many operators.'
p3427
sg5
S'observabletests and bugfixes.'
p3428
sg7
(lp3429
S'Bug'
p3430
aS'Test'
p3431
asg10
I3280
sg11
(lp3432
sg14
S'akarnokd:ObservableTests2x'
p3433
sbsI3282
(iPull
Pull
p3434
(dp3435
g3
S"I've refectored the mockSubscriber method out into a helper enum since it will be required almost everywhere."
p3436
sg5
S'simpler tests for window reduce, scan, starwith.'
p3437
sg7
(lp3438
S'Test'
p3439
asg10
I3282
sg11
(lp3440
sg14
S'akarnokd:WindowReduceTests2x'
p3441
sbsI3283
(iPull
Pull
p3442
(dp3443
g3
S'They seem to try testing the request mechanism on thin implementations and are somewhat of no use.'
p3444
sg5
S'subscribertests port from 1.x'
p3445
sg7
(lp3446
S'Test'
p3447
asg10
I3283
sg11
(lp3448
sg14
S'akarnokd:SubscriberTest2x'
p3449
sbsI3284
(iPull
Pull
p3450
(dp3451
g3
S"Tests expect certain operator parameter orders so I'd expect a few changes in Observable in this regard.\r\n\r\nFixed timing bug with `throttleWithTimeout` but I'm not 100% certain it works as expected beyond this single test."
p3452
sg5
S'simpler tests of throttlelast, throttlewithtimeout, zip'
p3453
sg7
(lp3454
S'Test'
p3455
asg10
I3284
sg11
(lp3456
sg14
S'akarnokd:ThrottleZipTests2x'
p3457
sbsI3285
(iPull
Pull
p3458
(dp3459
g3
g57
sg5
S'added latch to async synconsubscrbetest'
p3460
sg7
(lp3461
S'Bug'
p3462
aS'Test-Failures'
p3463
asg10
I3285
sg11
(lp3464
S'#3286 has encountered another failure:\r\n\r\n```\r\nrx.observables.SyncOnSubscribeTest > testSubscribeOn FAILED\r\n    java.lang.AssertionError: expected:<4> but was:<3>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:472)\r\n        at org.junit.Assert.assertEquals(Assert.java:456)\r\n        at rx.observables.SyncOnSubscribeTest.testSubscribeOn(SyncOnSubscribeTest.java:734)\r\n```'
p3465
aS'This should also resolve #3287. I have added your example test to the unit tests (3,000 iterations).'
p3466
aS':+1: '
p3467
aS"Okay, let's merge this so other PRs don't run into the test bug with the current main."
p3468
asg14
S'stealthcode:FixSyncOnSubscribeTest'
p3469
sbsI3286
(iPull
Pull
p3470
(dp3471
g3
S"Adds BlockingSingle (issue #3252), the blocking version of rx.Single.\r\n\r\nBlockingSingle has the following methods:\r\n- `from(Single)` -- factory method for creating a `BlockingSingle` from a\r\n`Single`\r\n- `value()` -- returns the value emitted from the Single\r\n- `toFuture()` -- returns a `java.util.concurrent.Future`\r\n\r\nCouldn't actually think of any other useful operations to perform on `BlockingSingle` - in comparison to `BlockingObservable`, there's not much to this class (at the moment)."
p3472
sg5
S'1.x: implements blockingsingle'
p3473
sg7
(lp3474
S'Discussion'
p3475
aS'Enhancement'
p3476
asg10
I3286
sg11
(lp3477
S"~~Hmmm...got a test failure that I can't reproduce locally:~~ (fixed by #3285)\r\n\r\n```\r\nrx.observables.SyncOnSubscribeTest > testSubscribeOn FAILED\r\n    java.lang.AssertionError: expected:<4> but was:<3>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:472)\r\n        at org.junit.Assert.assertEquals(Assert.java:456)\r\n        at rx.observables.SyncOnSubscribeTest.testSubscribeOn(SyncOnSubscribeTest.java:734\r\n```"
p3478
aS'This test failure should be resolved now. '
p3479
aS'@hyleung is this ready to be reviewed/merged?'
p3480
aS"@abersnaze Not quite yet. There are a couple of things from @artem-zinnatullin's PR (#3416) that I want to pull in (splitting out a separate `BlockingUtils` class to hold `awaitComplete`, for example) Also, I'm going to rebase it against head of 1.x since it's been about a month..."
p3481
aS"@abersnaze the PR is ready for review, btw. I'll keep the commits separate as I incorporate the feedback and squash it down at the end."
p3482
aS'Maybe move `BlockingSingle` from `rx.observables` to `rx.singles`?'
p3483
aS"@artem-zinnatullin re. `rx.singles` - that would be a new package then? ~~Don't have a particular option either way, tbh - anybody else?~~ Ah, I see what you're getting at....moved to `rx.singles`. Which other operators are you thinking of adding to `Single`, btw?"
p3484
aS'LGTM, just a few nits left :+1: '
p3485
aS"I'm ready to merge this as long as we can add the necessary `@Experimental` annotations and rebase onto 1.x."
p3486
aS'@stealthcode done! '
p3487
aS':+1:'
p3488
aS':+1:\r\n\r\nThanks for contributing.'
p3489
asg14
S'hyleung:blocking-single'
p3490
sbsI3289
(iPull
Pull
p3491
(dp3492
g3
S'I cleaned up and added more tests to SubscriptionList. \r\n\r\nI also changed the class to implement the List interface instead of hard code LinkedList. \r\n\r\nChanged Data Structure to LinkedList from ArrayList as List is used to iterate over and add exceptions to list. No random access needed and insertions are more efficient in LinkedList.'
p3493
sg5
S'added more tests and cleaned up subscriptionlist to program to list'
p3494
sg7
(lp3495
S'Enhancement'
p3496
asg10
I3289
sg11
(lp3497
S'Looks like test failure not from changed codebase. \r\n\r\nrx.observables.SyncOnSubscribeTest > testUnsubscribeOutsideOfLoop FAILED\r\n    java.lang.AssertionError: Not unsubscribed.\r\n\r\nIs someone looking into this?\r\n\r\n'
p3498
aS'I just had a brief look at this. I do notice that white space is screwed up (no tabs please and inconsistent indents).'
p3499
aS":-1:\r\n\r\n  - The resource container field is deliberately `LinkedList` so it is not turned into an `ArrayList` and thus making it O(n) removal.\r\n  - When the exceptions are aggregated, it doesn't really matter what kind of list is that since the throwing of any exception has several orders of magnitude more overhead than the list-add overhead\r\n  - the method `unsubscribeFromAll` is static so it doesn't try to access the instance state of the class and cause concurrency issues."
p3500
aS"@davidmoten Sorry about that didn't notice it was changed from the initial file. Are we using a style guide that I can use with my IDE?"
p3501
aS"@akarnokd  Thank you for your comments. \r\n\r\n* On your first I have only change to an interface so that If there is a better data structure in the future we only have to change the initialisation. I understand why ``` LinkedList ```  is used over ``` ArrayList ``` . \r\n\r\n* Changing from the ``` ArrayList ```  to ``` LinkedList```  was motivated by the use of O(n) complexity when adding to the ``` ArrayList```  and also creation of a new ``` ArrayList ``` when capacity*load is met. I should of backed this up with a benchmark to show when and if there is a use case that would benefit the use.\r\n\r\n* Could you explain you last point, I can not see any concurrency issues using a non static method. I see there could be a potential fail fast issue with the subscriptions iteration (``` ConcurrentModificationException ``` ), but how the method is currently used in the class it shouldn't be an issue - ``` subscriptions  = null ``` is set in the methods that use ``` unsubscribeFromAll ```"
p3502
aS"> On your first I have only change to an interface so that If there is a better data structure in the future we only have to change the initialisation. I understand why LinkedList is used over ArrayList .\r\n\r\nI doubt that if this class gets further optimized, that's going to use a `List` implementation.\r\n\r\n> Could you explain you last point, I can not see any concurrency issues using a non static method. I see there could be a potential fail fast issue with the subscriptions iteration (ConcurrentModificationException ), but how the method is currently used in the class it shouldn't be an issue - subscriptions = null is set in the methods that use unsubscribeFromAll\r\n\r\nThis is to avoid programmer mistakes."
p3503
aS"@akarnokd \r\n> I doubt that if this class gets further optimized, that's going to use a List implementation.\r\n\r\nIts nice to have the flexibility that coding to interface brings, rather than an implementation. \r\n\r\n> This is to avoid programmer mistakes.\r\n\r\nI believe this would be solved by renaming the input parameter on the method, rather than making it a static method. I can resubmit this pull request to sort the naming issue?"
p3504
aS"First of all, this PR, so far, is cosmetic in nature which we rarely accept. \r\n\r\nSecond, don't change existing unit tests unless you are fixing a bug in them. This goes also for renaming/refactoring existing stuff or content: if you are improving or fixing an existing operator, you can rename things up to an extent if that gives you more oversight over said change."
p3505
aS'Thanks @akarnokd this will focus my contributions in the future. It would be nice to have this type of information in the contributions documentation if not already. '
p3506
aS'Yes, many things are not well documented yet in the project. '
p3507
asg14
S'wrightm:1.x'
p3508
sbsI3292
(iPull
Pull
p3509
(dp3510
g3
g57
sg5
S'unit test for blocking operators.'
p3511
sg7
(lp3512
S'Test'
p3513
asg10
I3292
sg11
(lp3514
sg14
S'akarnokd:OperatorTests2xPart1'
p3515
sbsI3293
(iPull
Pull
p3516
(dp3517
g3
S'+ bugfix to cache, skipUntil and takeUnit'
p3518
sg5
S'test some unicastsubject, cache, notificationlite, amb'
p3519
sg7
(lp3520
S'Test'
p3521
asg10
I3293
sg11
(lp3522
sg14
S'akarnokd:OperatorTests2xPart2'
p3523
sbsI3294
(iPull
Pull
p3524
(dp3525
g3
g57
sg5
S'more tests and bugfixes to operators.'
p3526
sg7
(lp3527
S'Bug'
p3528
aS'Test'
p3529
asg10
I3294
sg11
(lp3530
sg14
S'akarnokd:OperatorTests2xPart3'
p3531
sbsI3297
(iPull
Pull
p3532
(dp3533
g3
g57
sg5
S'2.x: unit tests and fixes for fromiterable and range'
p3534
sg7
(lp3535
S'Bug'
p3536
aS'Test'
p3537
asg10
I3297
sg11
(lp3538
sg14
S'akarnokd:OperatorFromIterableRange2x'
p3539
sbsI3298
(iPull
Pull
p3540
(dp3541
g3
g57
sg5
S'2.x: tests for refcount and timer, fixes to flatmap, publish and range'
p3542
sg7
(lp3543
S'Bug'
p3544
aS'Test'
p3545
asg10
I3298
sg11
(lp3546
sg14
S'akarnokd:OperatorsTestsRefCountTimer2x'
p3547
sbsI3299
(iPull
Pull
p3548
(dp3549
g3
S'expectations\r\n\r\nSome tests are now skipped due to being invalid in RS.'
p3550
sg5
S'2.x: test for tofuture and using, changes according to the test'
p3551
sg7
(lp3552
S'Test'
p3553
asg10
I3299
sg11
(lp3554
sg14
S'akarnokd:OperatorTestsToFutureUsing2x'
p3555
sbsI3300
(iPull
Pull
p3556
(dp3557
g3
S'Bugfix: since they would emit a value on an empty source, they have to hold it until an actual request comes in.'
p3558
sg5
S'2.x: test for operators all, any, asobservable, fixes to all and any'
p3559
sg7
(lp3560
S'Bug'
p3561
aS'Test'
p3562
asg10
I3300
sg11
(lp3563
sg14
S'akarnokd:OperatorTestsAllAnyAsObservable'
p3564
sbsI3301
(iPull
Pull
p3565
(dp3566
g3
g57
sg5
S"2.x: test for buffer, i'm still missing the boundary-supplier version"
p3567
sg7
(lp3568
S'Bug'
p3569
aS'Test'
p3570
asg10
I3301
sg11
(lp3571
sg14
S'akarnokd:OperatorBufferTest2x'
p3572
sbsI3303
(iPull
Pull
p3573
(dp3574
g3
S'+ added AsyncSubscription that allows setting the actual subscription\r\nlater and can hold a resource. It has less overhead than\r\nSubscriptionArbiter due to single use.'
p3575
sg5
S'2.x: added missing buffer overload (with boundary selector)'
p3576
sg7
(lp3577
S'Enhancement'
p3578
aS'Test'
p3579
asg10
I3303
sg11
(lp3580
sg14
S'akarnokd:AsyncSubscription2x'
p3581
sbsI3304
(iPull
Pull
p3582
(dp3583
g3
S'Fluent assertions make the code much more readable.\r\nThis change is backward compatible.\r\n'
p3584
sg5
S'enables assertions chaining'
p3585
sg7
(lp3586
S'Feature-Request'
p3587
asg10
I3304
sg11
(lp3588
S'Changing return types is a binary-incompatible change.'
p3589
aS'Do you care about binary compatibility of a return type in a test util class?'
p3590
aS'Since both `TestObserver` and `TestSubscriber` are part of the public API, they are subject to the binary compatibility requirement regarding existing methods.'
p3591
aS'Do you see a risk here?'
p3592
aS"Yes.\r\n\r\nI'm sorry, but such change can't be accepted for 1.x, however, you are free to propose this against 2.x."
p3593
aS'No problem. \r\nHope that users do not release their binary production code with the usage of `TestObserver` and `TestSubscriber`'
p3594
aS"It's not about releasing it to prod. If we break our public API, we break their code bases. Just because it's their test code does not mean we have a lower commitment to not breaking it. \n\nPlease get involved in the 2.x effort which is just getting underway for API related changes. \n"
p3595
asg14
S'tombujok:1.x'
p3596
sbsI3305
(iPull
Pull
p3597
(dp3598
g3
S"`Single` is a deferred single-value emitting Observable.\r\n\r\n`NbpObservable` is the non-backpressure Observable, named this way until\r\nthe main Observable gets all its tests ported so a refactor can deal\r\nwith all of them.\r\n\r\nI've implemented the most basic construction and operator methods on\r\nthem."
p3599
sg5
S'2.x: classes single and nbpobservable'
p3600
sg7
(lp3601
S'Enhancement'
p3602
asg10
I3305
sg11
(lp3603
S'+1'
p3604
aS"I'm merging this so the independent work on both can be started."
p3605
asg14
S'akarnokd:SingleAndNonBackpressured2x'
p3606
sbsI3306
(iPull
Pull
p3607
(dp3608
g3
S"The concat reuses the same inner subscriber to save on its allocation\r\ncost which works only if the inner source conforms with the spec and\r\ndoesn't emit any event after an onComplete(). There is a test that\r\nexplicitly calls onComplete() twice to test the resilience of concat.\r\nThe current workaround makes this test pass but any async non-conforming\r\nsource may still bug out the operator. \r\n\r\nThis is a tradeoff between safety and performance. If we'd expect such\r\nnon-conforming behavior, the current optimization has to be turned into\r\na regular individually allocated inner subscribers."
p3609
sg5
S'2.x: operators cast and concat tests'
p3610
sg7
(lp3611
S'Bug'
p3612
aS'Test'
p3613
asg10
I3306
sg11
(lp3614
sg14
S'akarnokd:OperatorTestsCastConcat2x'
p3615
sbsI3307
(iPull
Pull
p3616
(dp3617
g3
S'When debounce is completed, the last value encountered is emitted immediately.'
p3618
sg5
S'2.x: operator debounce and defaultifempty, fix to debounce behavior'
p3619
sg7
(lp3620
S'Bug'
p3621
aS'Test'
p3622
asg10
I3307
sg11
(lp3623
sg14
S'akarnokd:OperatorTestDebounceDefaultIfEmpty2x'
p3624
sbsI3308
(iPull
Pull
p3625
(dp3626
g3
g57
sg5
S'2.x: operator test delay, dematerialize'
p3627
sg7
(lp3628
S'Test'
p3629
asg10
I3308
sg11
(lp3630
sg14
S'akarnokd:OperatorTestsDelayDematerialize'
p3631
sbsI3309
(iPull
Pull
p3632
(dp3633
g3
S'Note: several tests have been ignored due to non-conformance with RS\r\n\r\nAdded missing distinct and distinctUntilChanged overloads, fixed doOnEach not cancelling upstream if the callback crashes on the onNext path.'
p3634
sg5
S'2.x: operator test distinct, distinctuntilchanged and dooneach'
p3635
sg7
(lp3636
S'Bug'
p3637
aS'Enhancement'
p3638
aS'Test'
p3639
asg10
I3309
sg11
(lp3640
sg14
S'akarnokd:OperatorTestDistinctEach'
p3641
sbsI3310
(iPull
Pull
p3642
(dp3643
g3
g57
sg5
S'2.x: operator test doon(request|subscribe|unsubscribe).'
p3644
sg7
(lp3645
S'Test'
p3646
asg10
I3310
sg11
(lp3647
sg14
S'akarnokd:OperatorTestDoOn2x'
p3648
sbsI3311
(iPull
Pull
p3649
(dp3650
g3
S'+ fixed exceptions throw by elementAt'
p3651
sg5
S'2.x: operator test elementat, filter, finally, first'
p3652
sg7
(lp3653
S'Test'
p3654
asg10
I3311
sg11
(lp3655
sg14
S'akarnokd:OperatorTestElementAtFilterFinally2x'
p3656
sbsI3312
(iPull
Pull
p3657
(dp3658
g3
S'+ added operator flatMap of notifications, fixed a bug in onBackpressureBuffer\r\n\r\nNote also the few ignored tests because they either want to test against a null value or try to throw from RS methods.'
p3659
sg5
S'2.x: operator test flatmap, merge, mergedelayerror'
p3660
sg7
(lp3661
S'Bug'
p3662
aS'Test'
p3663
asg10
I3312
sg11
(lp3664
sg14
S'akarnokd:OperatorTestFlatMap2x'
p3665
sbsI3313
(iPull
Pull
p3666
(dp3667
g3
S"for GroupedObservable\r\n\r\n+ added BooleanSubscription to detect cancellation without caring about\r\nrequests.\r\n\r\nI'm still not 100% convinced the groupBy request coordination works\r\nproperly (i.e., no stall due lack of requests from one of the groups)."
p3668
sg5
S'2.x: operator test for groupby; fix to groupby and type argument swap'
p3669
sg7
(lp3670
S'Bug'
p3671
aS'Test'
p3672
asg10
I3313
sg11
(lp3673
sg14
S'akarnokd:OperatorTestGroupBy2x'
p3674
sbsI3314
(iPull
Pull
p3675
(dp3676
g3
g57
sg5
S'2.x: operator test ignoreelements, last, mapnotification'
p3677
sg7
(lp3678
S'Test'
p3679
asg10
I3314
sg11
(lp3680
sg14
S'akarnokd:OperatorTestIgnoreLastMapNotif2x'
p3681
sbsI3315
(iPull
Pull
p3682
(dp3683
g3
S'+ fix to observeOn to not request if cancelled in onNext delivery\r\n+ fix combineLatest error emission if the other sources are late or\r\nnever emit\r\n+ fix interval and PublishSubject to send MissingBackpressureException'
p3684
sg5
S'2.x: operator test observeon'
p3685
sg7
(lp3686
S'Bug'
p3687
aS'Test'
p3688
asg10
I3315
sg11
(lp3689
sg14
S'akarnokd:OperatorTestObserveOn2x'
p3690
sbsI3316
(iPull
Pull
p3691
(dp3692
g3
g57
sg5
S'2.x: operator test onbackpressure(buffer|drop|latest) and their bugfix'
p3693
sg7
(lp3694
S'Bug'
p3695
aS'Test'
p3696
asg10
I3316
sg11
(lp3697
sg14
S'akarnokd:OperatorTestOnBackpressure2x'
p3698
sbsI3317
(iPull
Pull
p3699
(dp3700
g3
S'I had to ignore tests that throw exceptions from a Publisher.subscribe or an Operator.apply due to their non-conformant behavior.'
p3701
sg5
S'2.x: operator test onerror and onexception, relevant bugfixes'
p3702
sg7
(lp3703
S'Bug'
p3704
aS'Test'
p3705
asg10
I3317
sg11
(lp3706
sg14
S'akarnokd:OperatorTestOnError2x'
p3707
sbsI3318
(iPull
Pull
p3708
(dp3709
g3
S"+ added toSingle and toNbpObservable to Observable\r\n+ fixed bugs in many operators and in the IO scheduler's release logic"
p3710
sg5
S'2.x: operator tests: publish, reduce, repeat + fixes'
p3711
sg7
(lp3712
S'Bug'
p3713
aS'Test'
p3714
asg10
I3318
sg11
(lp3715
sg14
S'akarnokd:OperatorTestPublishReduceRepeat2x'
p3716
sbsI3319
(iPull
Pull
p3717
(dp3718
g3
S"Note that testIssue_2191_SchedulerUnsubscribe had to change the call\r\ncount to pass. I don't understand this test and the over-mocking (but\r\nrecognize the style)."
p3719
sg5
S'2.x: operator test for replay'
p3720
sg7
(lp3721
S'Bug'
p3722
aS'Test'
p3723
asg10
I3319
sg11
(lp3724
sg14
S'akarnokd:OperatorTestReplay2x'
p3725
sbsI3320
(iPull
Pull
p3726
(dp3727
g3
S"+ retry with bipredicate\r\n+ fixed map not checking the returned value for null\r\n+ since RS doesn't allow throwing other than NPE, temporarily subscribe\r\nand lift will throw NPE with the actual error as cause so we don't miss\r\nan operator bug due to swallowed exceptions."
p3728
sg5
S'2.x: operator test: retry, retrywhen'
p3729
sg7
(lp3730
S'Bug'
p3731
aS'Test'
p3732
asg10
I3320
sg11
(lp3733
sg14
S'akarnokd:OperatorTestRetry2x'
p3734
sbsI3321
(iPull
Pull
p3735
(dp3736
g3
g57
sg5
S'2.x: operator tests: sample, scan and sequenceequal + their bugfixes'
p3737
sg7
(lp3738
S'Bug'
p3739
aS'Test'
p3740
asg10
I3321
sg11
(lp3741
sg14
S'akarnokd:OperatorTestSampleScanEquals'
p3742
sbsI3322
(iPull
Pull
p3743
(dp3744
g3
g57
sg5
S'2.x: operator test: serialize, single + serializedsubscriber fix'
p3745
sg7
(lp3746
S'Bug'
p3747
aS'Test'
p3748
asg10
I3322
sg11
(lp3749
sg14
S'akarnokd:OperatorTestSerializeSingle2x'
p3750
sbsI3323
(iPull
Pull
p3751
(dp3752
g3
S'Note that since we know have time unit in schedulers, one must be\r\ncareful with the time unit of the timed skip operators. The timestamps\r\nwill be calculated via this unit and may not return the expected values. \r\n\r\nFor example, a skipLast of 1 second will not skip the value 0.5 seconds\r\nbefore completion because its timestamp is rounded down to the start of\r\nthe second. But if one uses 1000 milliseconds, the value will be\r\nskipped.'
p3753
sg5
S'2.x: operator test: skip variants and bugfix'
p3754
sg7
(lp3755
S'Bug'
p3756
aS'Test'
p3757
asg10
I3323
sg11
(lp3758
sg14
S'akarnokd:OperatorTestSkip2x'
p3759
sbsI3324
(iPull
Pull
p3760
(dp3761
g3
g57
sg5
S'2.x: operator test: switchifempty, switchmap + bugfixes'
p3762
sg7
(lp3763
S'Bug'
p3764
aS'Test'
p3765
asg10
I3324
sg11
(lp3766
sg14
S'akarnokd:OperatorsTestSubscribeOnSwitch2x'
p3767
sbsI3325
(iPull
Pull
p3768
(dp3769
g3
S'+ fixed a deadlock possibility in one of the merge tests'
p3770
sg5
S'2.x: operator tests: take family + fixes'
p3771
sg7
(lp3772
S'Bug'
p3773
aS'Test'
p3774
asg10
I3325
sg11
(lp3775
sg14
S'akarnokd:OperatorTestsTake2x'
p3776
sbsI3326
(iPull
Pull
p3777
(dp3778
g3
g57
sg5
S'2.x: operator throttlefirst, timeinterval and timeout + bugfixes'
p3779
sg7
(lp3780
S'Bug'
p3781
aS'Test'
p3782
asg10
I3326
sg11
(lp3783
sg14
S'akarnokd:OperatorTestsThrottleFirstTimeIntervalTimeout2x'
p3784
sbsI3327
(iPull
Pull
p3785
(dp3786
g3
S'+ signature fix to toMultimap and removed deprecated markers.'
p3787
sg5
S'2.x: operator tests: timestamp, tomap, tomultimap, tolist, tosortedlist'
p3788
sg7
(lp3789
S'Bug'
p3790
aS'Test'
p3791
asg10
I3327
sg11
(lp3792
sg14
S'akarnokd:OperatorTestsPack2x'
p3793
sbsI3328
(iPull
Pull
p3794
(dp3795
g3
S'+ fixed cancellation behavior of observeOn, subscribeOn and\r\nunsubscribeOn (when and what to call cancel on)\r\n+ fixed infinite loop in ScheduledRunnable\r\n+ fixed zip not quitting eagerly if one of the sources was shorter\r\n+ added specific ZipIterable because zip-iterable tests expect it to be\r\nnot prefetching any of the sources (the plain zip does prefetch)\r\n+ made the fromIterable more resilient to Iterable/Iterator crashes and\r\nadded null-value checks'
p3796
sg5
S'2.x: operator tests unsubscribeon, withlatestfrom, zip (partial)'
p3797
sg7
(lp3798
S'Bug'
p3799
aS'Test'
p3800
asg10
I3328
sg11
(lp3801
sg14
S'akarnokd:OperatorTestsPack2xPart2'
p3802
sbsI3329
(iPull
Pull
p3803
(dp3804
g3
S'I had to adjust some test slightly due to the a new behavior: if one\r\ncancels a source which is windowed, as long as the windows are active,\r\nthe source has to stay active. However, there are more subtle\r\npossibilities that need new tests.'
p3805
sg5
S'2.x: operator test: window variants'
p3806
sg7
(lp3807
S'Bug'
p3808
aS'Test'
p3809
asg10
I3329
sg11
(lp3810
sg14
S'akarnokd:OperatorTestWindow2x'
p3811
sbsI3330
(iPull
Pull
p3812
(dp3813
g3
g57
sg5
S'2.x: operator test zip and safesubscribertest'
p3814
sg7
(lp3815
S'Test'
p3816
asg10
I3330
sg11
(lp3817
sg14
S'akarnokd:OperatorsTestZipFinish2x'
p3818
sbsI3331
(iPull
Pull
p3819
(dp3820
g3
g57
sg5
S'2.x: schedulers test of classic schedulers'
p3821
sg7
(lp3822
S'Bug'
p3823
aS'Test'
p3824
asg10
I3331
sg11
(lp3825
sg14
S'akarnokd:SchedulersTests2x'
p3826
sbsI3332
(iPull
Pull
p3827
(dp3828
g3
S'+ Fixed the `testNestedAsyncConcat` test.\r\n+ Fixed memory leak in `NewThreadWorker`.'
p3829
sg5
S'2.x: subject tests and bugfixes'
p3830
sg7
(lp3831
S'Bug'
p3832
aS'Test'
p3833
asg10
I3332
sg11
(lp3834
sg14
S'akarnokd:SubjectTests'
p3835
sbsI3333
(iPull
Pull
p3836
(dp3837
g3
S'I had to ignore many tests because they either test with null or throw\r\nan exception from a Subscriber method which are not allowed with RS.\r\n\r\n+ added Observers and Subscribers to create Observers/Subscribers with convenience.'
p3838
sg5
S'2.x: subscribers/observers tests'
p3839
sg7
(lp3840
S'Bug'
p3841
aS'Test'
p3842
asg10
I3333
sg11
(lp3843
sg14
S'akarnokd:SubscribersTests2x'
p3844
sbsI3334
(iPull
Pull
p3845
(dp3846
g3
S'+ sorted `Observable` and added `@BackpressureSupport` and\r\n`SchedulerSupport` annotations.\r\n+ created `@Beta` and `@Experimental` annotations, nothing is marked\r\nwith them because I intent everything to be standard at this point.'
p3847
sg5
S'2.x: disposable unit tests + fix to refcountdisposable behavior'
p3848
sg7
(lp3849
S'Bug'
p3850
aS'Enhancement'
p3851
aS'Test'
p3852
asg10
I3334
sg11
(lp3853
sg14
S'akarnokd:DisposableTests2x'
p3854
sbsI3335
(iPull
Pull
p3855
(dp3856
g3
S'+ I wanted to make sure the slow path passes all tests before enabling\r\nthe scalar optimization.\r\n+ Fixed headers for internal classes'
p3857
sg5
S'2.x: scalar flatmap optimization enabled'
p3858
sg7
(lp3859
S'Bug'
p3860
aS'Enhancement'
p3861
asg10
I3335
sg11
(lp3862
sg14
S'akarnokd:ScalarFastPathEnable2x'
p3863
sbsI3339
(iPull
Pull
p3864
(dp3865
g3
S'The subscription was triggered by the supplied publisher and not one of its value or completion.\r\n\r\nBtw, should an `onComplete` from this inner publisher be treated as an indication to not subscribe to the actual source?'
p3866
sg5
S'2.x: fix delaysubscription with supplied publisher: wrong value to trigger subscription'
p3867
sg7
(lp3868
S'Bug'
p3869
asg10
I3339
sg11
(lp3870
S'What is the purpose of this operator? Why is it added?'
p3871
aS'Huh. That exists in 1.x?! Never seen or heard of it.'
p3872
aS'> Btw, should an onComplete from this inner publisher be treated as an indication to not subscribe to the actual source?\r\n\r\nThat\'s a good question ... the 1.x docs say it subscribes if the given Observable emits. `onComplete` is not an "emission" in the normal sense. So probably not.'
p3873
aS"I'll add this fix and unit test to a larger set of unit tests + fixes coming separately."
p3874
asg14
S'akarnokd:DelaySubscriptionFix2x'
p3875
sbsI3340
(iPull
Pull
p3876
(dp3877
g3
S'... and remove the unused Mockito imports'
p3878
sg5
S'test/subjects: use statically imported never() methods'
p3879
sg7
(lp3880
sg10
I3340
sg11
(lp3881
S'See #3291.'
p3882
aS"@akarnokd are you seriously suggesting that cleaning up code to make it more consistent is a bad thing and shouldn't be done?"
p3883
aS"Cosmetic PRs, especially on unit test or on internal classes, don't really contribute anything to the library."
p3884
aS'wow...'
p3885
aS"I'm okay with this type of change. It makes the code more consistent, and is a simple non-intrusive change."
p3886
aS'Thank you @Turbo87 for the contribution!'
p3887
aS'@benjchristensen cool, thanks!'
p3888
aS"@Turbo87 I apologize for my harsh and dry comments. Generally, I'm in favor of cleanups such as yours and would have done it the same way. I was under the false impression that the project doesn't want such cleanups. I'm sorry if I offended you."
p3889
aS'@akarnokd nevermind, seems it all worked out in the end ;)'
p3890
asg14
S'Turbo87:import-cleanup'
p3891
sbsI3342
(iPull
Pull
p3892
(dp3893
g3
S'Addresses #3067 - Removes a redundant `onStart` implementation in `OperatorGroupBy`.'
p3894
sg5
S'remove redundant onstart implementation in operatorgroupby'
p3895
sg7
(lp3896
sg10
I3342
sg11
(lp3897
S':+1:'
p3898
aS':+1: '
p3899
asg14
S'KevinTCoughlin:remove-unnecessary-onstart'
p3900
sbsI3345
(iPull
Pull
p3901
(dp3902
g3
S'Proposed change to register with state before onSubscribe so that "doOnSubscribe" side-effects are safe.\r\n\r\nIf this is approved as a change, we\'d want to do similar for the other Subjects as well I imagine. \r\n\r\nI came across this after debugging race conditions in some code and tracking it down to publishSubject.subscribe not actually subscribing until AFTER onSubscribe is completed. This breaks things if doOnSubscribe side-effects cause data to flow through that subject.\r\n\r\nIs there any reason not to make this change?'
p3903
sg5
S'publishsubject add before onsubscribe'
p3904
sg7
(lp3905
sg10
I3345
sg11
(lp3906
S'Another issue I found while testing this:\r\n\r\n```java\r\n    @Test\r\n    public void testDoOnSubscribe() throws InterruptedException {\r\n    \tPublishSubject<Object> as = PublishSubject.create();\r\n    \tTestSubscriber<Object> ts = new TestSubscriber<>();\r\n    \t\r\n    \tas.doOnSubscribe(s -> {\r\n    \t\t// when subscribed, trigger side-effect that causes data to flow\r\n    \t\tas.onNext(1);\r\n    \t\tas.onComplete();\r\n    \t}).subscribe(ts);\r\n    \t\r\n    \tif(!ts.await(500, TimeUnit.MILLISECONDS)) {\r\n    \t\tfail("Did not receive events");\r\n    \t} \r\n    \t\r\n    \tts.assertValue(1);\r\n    \tts.assertComplete();\r\n    }\r\n```\r\n\r\nIf fails with a `MissingBackpressureException` because when `doOnSubscribe` runs, apparently `request(n)` has not been invoked.\r\n\r\n```\r\njava.lang.AssertionError: Expected: 1 (class: Integer), Actual: []\r\n\tat io.reactivex.subscribers.TestSubscriber.fail(TestSubscriber.java:356)\r\n\tat io.reactivex.subscribers.TestSubscriber.assertValue(TestSubscriber.java:485)\r\n\tat io.reactivex.subjects.PublishSubjectTest.testDoOnSubscribe(PublishSubjectTest.java:493)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:483)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\r\n\tSuppressed: io.reactivex.exceptions.MissingBackpressureException: Could not emit value due to lack of requests\r\n\t\tat io.reactivex.subjects.PublishSubject$PublishSubscriber.onNext(PublishSubject.java:308)\r\n\t\tat io.reactivex.subjects.PublishSubject.onNext(PublishSubject.java:86)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest.lambda$1(PublishSubjectTest.java:485)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest$$Lambda$7/1471868639.accept(Unknown Source)\r\n\t\tat io.reactivex.internal.subscribers.SubscriptionLambdaSubscriber.onSubscribe(SubscriptionLambdaSubscriber.java:45)\r\n\t\tat io.reactivex.subjects.PublishSubject$State.subscribe(PublishSubject.java:205)\r\n\t\tat io.reactivex.internal.operators.PublisherLift.subscribe(PublisherLift.java:75)\r\n\t\tat io.reactivex.Observable.subscribeActual(Observable.java:2522)\r\n\t\tat io.reactivex.Observable.subscribe(Observable.java:2511)\r\n\t\tat io.reactivex.subjects.PublishSubjectTest.testDoOnSubscribe(PublishSubjectTest.java:487)\r\n\t\t... 23 more\r\n```\r\n\r\nIt\'s the same even if changed to `doOnRequest`:\r\n\r\n```java\r\n    \r\n    @Test\r\n    public void testDoOnSubscribe() throws InterruptedException {\r\n    \tPublishSubject<Object> as = PublishSubject.create();\r\n    \tTestSubscriber<Object> ts = new TestSubscriber<>();\r\n    \t\r\n    \tas.doOnRequest(s -> {\r\n    \t\t// when subscribed, trigger side-effect that causes data to flow\r\n    \t\tas.onNext(1);\r\n    \t\tas.onComplete();\r\n    \t}).subscribe(ts);\r\n    \t\r\n    \tif(!ts.await(500, TimeUnit.MILLISECONDS)) {\r\n    \t\tfail("Did not receive events");\r\n    \t} \r\n    \t\r\n    \tts.assertValue(1);\r\n    \tts.assertComplete();\r\n    }\r\n```\r\n\r\nSo, do we need a `doAfterSubscribe` or `doAfterRequest` for this type of use case?\r\n\r\n(And yes ... I know these unit tests represent very odd use cases ... bad, side-effecting, recursive, etc. But ... they happen. This is a very simplified example of issues I\'ve run into while simulating IO with subjects).'
p3907
aS'cc @akarnokd for your review of the PR.'
p3908
aS"So this breaks `BlockingOperatorNext` for some reason that I haven't yet figured out.\r\n\r\nThe root of what I'm trying to solve is how to know when a `Subscriber` is actually subscribed to a `Subject`. Right now I can't find a reliable hook point to know once it is subscribed and will receive data, at which point I can trigger work that will emit data."
p3909
aS'I just force pushed a revision that I think achieves the goal I have, while also working with the `BlockingOperatorNext` use case.\r\n\r\nHere is a summary of what I need:\r\n\r\n```java\r\nsubject.subscribe(new Subscriber<T>() {\r\n\r\n public void onSubscribe(Subscription s) {\r\n    s.request(someN);\r\n    // now that we are subscribed ... trigger work that will cause data to flow to the subject\r\n }\r\n\r\n public void onNext(T t) {\r\n    // expect to get data here after trigger from within \r\n }\r\n});\r\n```\r\n\r\nRight now there is not a deterministic time to start sending data, as `onSubscribe` must be completed, and then there is another method invocation to register the `Subscriber` with the `Subject`, which means there is no mechanism to know when it is done subscribing.\r\n\r\nThus, I suggest this change so that `add` happens BEFORE `onSubscribe` is invoked.\r\n'
p3910
aS"All unit tests are now passing. @akarnokd please let me know if there's a reason to not proceed with this, or if you have a better way of deterministically signaling when a `Subscriber` is done subscribing to a `Subject` and can receive data."
p3911
aS"Your proposed change violates rule \xc2\xa71.3. You make the `Subscriber` visible to the `Publisher` before this subscriber received its `Subscription` thus a concurrent `onNext` will be delivered to it and may cause NPEs downstream.\r\n\r\nI suggest you find another way of doing what you tried, for example, with `takeUntil`, `startWith` or something like it.\r\n\r\n> If fails with a MissingBackpressureException because when `doOnSubscribe` runs, apparently `request(n)` has not been invoked.\r\n\r\nExactly, there is an order to the `onXXX` methods.\r\n\r\n> So, do we need a doAfterSubscribe or doAfterRequest for this type of use case?\r\n\r\nThis will happen after the child has handled the `Subscription` but still before the `Subscriber` becomes visible to the `Subject`.\r\n\r\n> (And yes ... I know these unit tests represent very odd use cases ... bad, side-effecting, recursive, etc. But ... they happen. This is a very simplified example of issues I've run into while simulating IO with subjects).\r\n\r\nI think this example is simply the incorrect usage of the API and a programmer error. 1.x was very forgiving but if we want to be RS compatible and not surprise other RS implementations, such usage patterns need to be reconsidered.\r\n\r\n> Right now I can't find a reliable hook point to know once it is subscribed and will receive data, at which point I can trigger work that will emit data.\r\n\r\nIf you explained the intended use case (not how you implemented it), maybe we can find another dataflow pattern that gets you what you want."
p3912
aS'> Your proposed change violates rule \xc2\xa71.3. You make the Subscriber visible to the Publisher before this subscriber received its Subscription thus a concurrent onNext will be delivered to it and may cause NPEs downstream.\r\n\r\nHere is rule \xc2\xa71.3:\r\n\r\n> onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled sequentially (no concurrent notifications).\r\n\r\nHow would my proposed change make concurrent notifications occur? That was also illegal in RxJava 1.x so I\'m not proposing anything non-contractual.\r\n\r\nIt is still up to the source emitting to the `Subject` to ensure it is sequential. Having a hook to define when the "add" is done does not mean that the source will somehow start emitting to the `Subject` concurrently. Additionally, being registered with the `Subject` does not mean it will receive any emissions since nothing has been requested yet. Once the `request(n)` is triggered from inside the `onSubscribe`, then data can flow. For example, in my use case, I am using a `SerializedSubject`, to represent an IO event-loop that can receive writes from anywhere. \r\n\r\nSo, what is the unit test that shows my changes break the contract?\r\n\r\n>  the intended use case\r\n\r\nTo know when the subscription to the Subject is actually connected. Right now I effectively have to put a non-deterministic sleep as I have no way from the outside of knowing when the subscribe/onSubscribe/add dance is done. \r\n\r\n> 1.x was very forgiving but if we want to be RS compatible and not surprise other RS implementations, such usage patterns need to be reconsidered.\r\n\r\nI question whether `Subject` really suits the Reactive Streams contract at all. A Subject is hot, and doesn\'t compose backpressure through. In this implementation it just means it blows up if a subscriber doesn\'t have a requested count > 0. That means this isn\'t Reactive Streams compliant because it means the source (the Subject) didn\'t respect the `request(n)`. In fact, I have to believe that once we connect to the TCK, these `Subject` implementations can not pass the tests of representing themselves as `Publisher`s. Thus, I don\'t think your statement of it being "programmer error" is valid since a `Subject` is intended to be used for "hot" and "push". '
p3913
aS'> How would my proposed change make concurrent notifications occur? That was also illegal in RxJava 1.x so I\'m not proposing anything non-contractual.\r\n\r\n+ Thread 1: is about to emit an `onNext` through the `PublishSubject`\r\n+ Thread 2: finishes adding the new subscriber, without the `Subscription`, to the array of subscriptions\r\n+ Thread 1: emits the `onNext` to the list of subscriptions which now contains the Subscriber of thread 2 and violates \xc2\xa71.3 because now Thread 1 is in `onSubscribe` and Thread 2 is in `onNext` of the same `Subscriber`.\r\n\r\n> Additionally, being registered with the Subject does not mean it will receive any emissions since nothing has been requested yet.\r\n\r\nSo you say `PublishSubject` should drop values until the child subscriber requests anything? If the request runs out, should `PublishSubject` drop values again? \r\n\r\n> So, what is the unit test that shows my changes break the contract?\r\n\r\n[gist](https://gist.github.com/akarnokd/4ab8d792cb1ed99bae75)\r\n\r\n> To know when the subscription to the Subject is actually connected.\r\n\r\nIt knows when the first `onNext` arrives, otherwise I don\'t think what you want can be achieved through RS. You need some kind of two-phase subscription: one phase to get the request from the child and a second phase to notify the child it is "online". But then this "online" notification may race with a regular `onNext`. You may need something like a `BehaviorSubject` - `PublishSubject` hybrid which emits an initial "online" value and only then allows any regular `onNext` values to happen.\r\n\r\n> That means this isn\'t Reactive Streams compliant because it means the source (the Subject) didn\'t respect the request(n).\r\n\r\nBy extension, this would mean `Observable.error()` doesn\'t respect that either. Sources can call `onError` instead of an `onNext` if they chose to, a `request(n)` doesn\'t mean a source has to produce N values no matter what.\r\n\r\n> In fact, I have to believe that once we connect to the TCK, these `Subject` implementations can not pass the tests of representing themselves as Publishers. \r\n\r\nAs far as I know, not all tests are applicable to all operators, let\'s say, to `empty()`. The current 2.x `Subject` implementations conform the spec as they call `onSubscribe` first and then the rest of the `on` methods, and keep track of the client\'s request amount. In case the client can\'t keep up, they error out said client which should trigger the consideration of using `onBackpressureXXX` methods. So by the book, they don\'t overflow the client and bail out cleanly.\r\n\r\n> Thus, I don\'t think your statement of it being "programmer error" is valid since a Subject is intended to be used for "hot" and "push".\r\n\r\nWhen I ported the tests over to 2.x I\'ve noticed that few of the 1.x tests failed even though the operators they were testing were clearly okay. It turned out the tests had hidden races in them which were exposed by the smaller overhead of the new operators. The RS API has more potential for data-races which is mostly captured by the RS spec itself as must and mustn\'t clauses.'
p3914
aS"I don't have time to continue this discussion right now ... I'll come back to it after creating a custom Subject for my use case that solves my immediate need."
p3915
aS"Instead of continuing this discussion here, I'm closing this and will instead dig into the more important design decisions of v2 that impact `Observable`, `Flowable`, `Subject`, `Publisher`, `Processor`, etc.\r\n\r\nSince the `PublishSubject` of v2 is currently in the state it is, I ended up solving my use case mostly without Rx."
p3916
asg14
S'benjchristensen:PublishSubject-onSubscribe'
p3917
sbsI3348
(iPull
Pull
p3918
(dp3919
g3
S'Proposed separation of `Observable` and `Flowable` along with description of each and their characteristics.'
p3920
sg5
S'2.x design: flowable/observable'
p3921
sg7
(lp3922
S'Discussion'
p3923
asg10
I3348
sg11
(lp3924
S'Related to discussion in https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-135916611\r\n\r\n'
p3925
aS'@ReactiveX/rxjava-committers Is there agreement to support `Observable` and `Flowable` as independent types as described by this PR?\r\n\r\nIf there are questions needing answering before you can respond, please ask the questions now so we can move forward.\r\n\r\nI have posted lengthy explanations of reasoning here:\r\n - https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-135916611\r\n - https://github.com/ReactiveX/RxJava/issues/2787#issuecomment-137838099 \r\n\r\nAnother example supporting the need of the two types is that `Subject` can not implement `Publisher`: https://github.com/ReactiveX/RxJava/pull/3349'
p3926
aS'Here are some ideas on API design and comparisons between the types:\r\n\r\n### Push\r\n\r\n```java\r\nObservable.create(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n})\r\n```\r\n\r\nwould be equivalent to this if we chose to have these APIs:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.BUFFER)\r\n```\r\n\r\n### Pull-Push/Async Pull\r\n\r\nObservable does not support pull.\r\n\r\nWith Flowable there is synchronous variety:\r\n\r\n```java\r\nFlowable.createSync(... SyncOnSubscribe ... )\r\n// or\r\nFlowable.from(Iterable)\r\n// or\r\nFlowable.just(T...)\r\n// or\r\nFlowable.range(0, 10000000)\r\n```\r\n\r\nand an asynchronous variety:\r\n\r\n```java\r\nFlowable.createAsync(... AsyncOnSubscribe ... )\r\n```\r\n\r\n### Conversion\r\n\r\nFrom `Flowable` to `Observable`, it is easy since it asks for no `request(n)` flow control:\r\n\r\n```java\r\nFlowable f = ...\r\nObservable<T> o = f.toObservable(); // this will call request(Long.MAX_VALUE) up when subscribed to\r\n```\r\n\r\nFrom `Observable` to `Flowable`, it must provide a backpressure strategy:\r\n\r\n```java\r\nObservable o = ...\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.*)\r\n// for example\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.BUFFER)\r\n// or \r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.DROP)\r\n// or\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.FAIL)\r\n// or \r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.create(...)) // like lifting an operator into a stream, except for a backpressure strategy\r\n```'
p3927
aS'I think instead of `toFlowable`, we could move the `onBackpressureXXX` method into the Observable and they now allow direct customization instead of an enum/interface-like construct you are proposing.\r\n\r\nI don\'t particulary like the name swap because users now have learned about the Observable being the one where one doesn\'t have to worry about memory overflow so much. The change, I think, will create a lot of confusion. \r\n\r\nI don\'t particularly understand the need for this non-backpressure version again (even though I was skeptical about the addition of backpressure back then). Is it the overhead of the backpressure management? Is it the latency caused by the scattering effect when crossing a thread boundary? Or is it that one wants to manually emit onNext event "mindlessly"?'
p3928
aS'> I think instead of toFlowable, we could move the onBackpressureXXX method into the Observable and they now allow direct customization instead of an enum/interface-like construct you are proposing.\r\n\r\nThis doesn\'t make sense to me, since `Observable` would not have `request(n)` signals for `onBackpressureXXX` to work. \r\n\r\n> I don\'t particulary like the name swap because users now have learned about the Observable being the one where one doesn\'t have to worry about memory overflow so much. The change, I think, will create a lot of confusion.\r\n\r\nThe rest of the ReactiveX community argues the opposite that RxJava has caused confusion by adding backpressure to `Observable`. \r\n\r\nThe argument also is that adding backpressure has made usage of `Observable` more complicated for the push cases. I think this is a fault of our API design in that we just exposed the raw `Observable.create` without better creation APIs. \r\n\r\n> The change, I think, will create a lot of confusion.\r\n\r\nFrom 0.20 to 1.0 it evolved. The community dealt with it. Now I hear that combining the two has confused people. Separating the types is intended to clarify. And to stop confusing when compared against RxJS, Rx.Net, etc.\r\n\r\n> I don\'t particularly understand the need for this non-backpressure version again\r\n\r\nThe issue with `Subject` is representative. A `Subject` can not be a `Publisher`, as a `Subject` is "hot", "push", and can\'t obey `request(n)` backpressure. For use case that are truly push, particularly "hot" sources, the `Observable` type without backpressure is more honest and communicative.  Thus, if we want to have a `Subject`, that is "hot" and controlled by the producer, we actually need the `Observable` type for `Subject` to extend/implement. \r\n\r\nAdditionally, there is overhead as you mention, though honestly, this is rarely applicable to most use cases. \r\n\r\n> Or is it that one wants to manually emit onNext event "mindlessly"?\r\n\r\nThis is the key, but "mindlessly" is dismissive. All "hot", push, use cases are like this. \r\n\r\nI can easily argue that `Flowable` can solve this use case just fine, like this:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.BUFFER)\r\n```\r\n\r\nBut the type itself does nothing to communicate that this is push. `Flowable` really represents an interactive, "async pull" or "pull-push" type. Modeling a push source with it is possible, and I actually prefer doing so, as it makes me consider backpressure, but there are many who like to just have a push case. \r\n\r\nToday, the default v1 `Observable` is equivalent to this:\r\n\r\n```java\r\nFlowable.createPush(s -> {\r\n   s.onNext(t)\r\n   ...\r\n   s.onNext(t)\r\n}, BackpressureStrategy.FAIL)\r\n```\r\n\r\nI think that has confused people. \r\n\r\nMy conclusion of this debate is that it is actually quite subjective, but that alignment with the broader ReactiveX community is worth separating the types so that `Observable` is "push", not a "pull-push"/"async pull"/"push with flow control" type. The mental model is cleaner. Then, because @headinthebox is liberal in Rx not being just one thing, we extend RxJava to have not only `Observable`, but also `Flowable` and `Single`.'
p3929
aS'Fine.'
p3930
aS'To be precise, I\'m not against having Single, Observable and Flowable in the library and if the community can deal with name- and feature-"shuffle" then I accept the decision.\r\n\r\n> This doesn\'t make sense to me, since Observable would not have request(n) signals for onBackpressureXXX to work.\r\n\r\nIn greater detail, I proposed that instead of having `Observable.toFlowable` where `Observable` is the non-backpressure, synchronously cancellable push-stream, I\'d rather have `Observable.onBackpressureXXX` methods since, for example, `onBackpressureDrop` can run on its own or with a callback. Such extra parameter would be difficult to pass in with an enumeration such as the `BackpressureStrategy.DROP`. For example, the following general signature would be necessary:\r\n\r\n`Observable.toFlowable(BackpressureStrategy, Object... strategyParams)`\r\n\r\nThe drawback is the lack of compile-time validation of strategyParams.'
p3931
aS"An `Observable.onBackpressureDrop()` is meaningless, as it would never know when to drop anything.\r\n\r\nSorry for not being clear on `BackpressureStrategy.DROP`. I did not intend it as an enum, but a type with static defaults, and factory methods for custom ones. You'll see that in the example above showing this:\r\n\r\n```java\r\nFlowable<T> f = o.toFlowable(BackpressureStrategy.create(...)) // like lifting an operator into a stream, except for a backpressure strategy\r\n```"
p3932
aS'Despite the debate over API design (which we can continue later), should we merge this PR?'
p3933
aS'The text is okay :+1:'
p3934
aS'Thanks @akarnokd \r\n\r\nAnyone else have opinions on this? Reasons to not proceed?'
p3935
aS"The name shuffle is a thumbs down from me just for the loss of continuity\nwith existing code and documentation. I must say I'm also pretty sick of\ntyping the full Observable name as well and if we could rename Flowable to\nFlow that would be nice for typing and nice for reading. Happy for you to\ndefer discussion of this stuff to another issue if you like.\n\nOn 18 September 2015 at 06:42, Ben Christensen <notifications@github.com>\nwrote:\n\n> Thanks @akarnokd <https://github.com/akarnokd>\n>\n> Anyone else have opinions on this? Reasons to not proceed?\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3348#issuecomment-141222505>.\n>\n"
p3936
aS'I supported the initial change and still support it now. The text is fine by me :+1: '
p3937
aS"> Flow\r\n\r\nFlow is the interface name in Java 9. Hence `Flowable` which implements `Flow`. We can't use `Flow` without colliding with the `j.u.c.Flow` interface name.\r\n\r\n> loss of continuity with existing code and documentation\r\n\r\nThe only thing that would not apply to the new `Observable` is the backpressure portion.\r\n\r\nThe loss of continuity and alignment with the broader ReactiveX community is equally bad, just look at polyglot docs at reactivex.io to see how the RxJava `Observable` stands out as different. "
p3938
aS'Thank you @tilal6991 for your review and weighing in.'
p3939
aS'I would support a type called `rx.Rx` that had static constructors which returned the appropriate type (Obs vs Flw).'
p3940
aS"> I would support a type called rx.Rx that had static constructors which returned the appropriate type (Obs vs Flw).\r\n\r\nI'm okay with us exploring that type of thing. However, let's figure out the design contract of the core types first."
p3941
aS'Anyone else have :+1: or :-1: on this before I proceed to merge it?'
p3942
aS':+1: '
p3943
aS'Merging so we can move forward on Design.md.'
p3944
asg14
S'ReactiveX:v2-design-flowable'
p3945
sbsI3349
(iPull
Pull
p3946
(dp3947
g3
S'Clarification of `Subject` that affects implementation. \r\n\r\nRelated to discussion in https://github.com/ReactiveX/RxJava/pull/3345.'
p3948
sg5
S'2.x design: subject'
p3949
sg7
(lp3950
S'Discussion'
p3951
asg10
I3349
sg11
(lp3952
S'Ping @akarnokd '
p3953
aS'@ReactiveX/rxjava-committers Can this PR be merged?'
p3954
aS'I disagree with the two statements.'
p3955
aS'Please explain why you disagree and your proposed solution.'
p3956
aS"> Relation to Reactive Streams\r\n>\r\n>- It can not implement Reactive Streams `Publisher` unless it is created with a default flow control strategy. \r\n\r\nSubjects can implement `Publisher` if they don't overflow their clients that are of type `org.reactivestreams.Subscriber`. \r\n\r\nIn other words, there could be `AsyncProcessor`, `PublishProcessor`, `ReplayProcessor`, etc. that implement `org.reactivestreams.Processor` but have default backpressure strategy coded in: `PublishProcessor` and `BehaviorProcessor` fail on overflow, the rest buffers/replays. The fail behavior can be avoided via onBackpressure operator that drops/buffers/latests values.\r\n\r\nWhat we call `PublishSubject` now can then be non-backpressured by extending `NbpObservable` and taking `NbpSubscribers`. These are naturally not RS because they have different type and structure.\r\n\r\n>- It can not implement `Processor` since a `Processor` must compose `request(n)` which can not be done with multicasting or pure push. \r\n\r\nAgain, I don't see any mention of composing requests through a processor in the spec, but you could ask them (they're less likely to answer me lately)."
p3957
aS'> Again, I don\'t see any mention of composing requests through a processor in the spec\r\n\r\nThere is a very, very, long discussion about multicasting here: https://github.com/reactive-streams/reactive-streams-jvm/issues/19#issuecomment-40952908\r\n\r\nOther related discussions in https://github.com/reactive-streams/reactive-streams-jvm/issues/22 and https://github.com/reactive-streams/reactive-streams-jvm/pull/37\r\n\r\nIn short, Reactive Streams chose to not say anything about whether a `Publisher` can support multicast, as it is up to the implementation \xe2\x80\x93 but it still requires the `Publisher` to not send more than each `Subscriber` has requested. \r\n\r\nThis means some variants of an Rx `Subject` could be made to work, but generically it can not. A `PublishSubject` can not implement `Publisher`, thus the base type `Subject` can not.\r\n\r\n> Subjects can implement Publisher if they don\'t overflow their clients that are of type org.reactivestreams.Subscriber.\r\n\r\nYup, but since `PublishSubject` can\'t comply with that, the base type `Subject` can\'t implement `Publisher`. \r\n\r\n\'Subjects\' are "hot", and `Publisher` is not suited to "hot" sources. They can only represent a "hot" source if a backpressure strategy is applied, and that\'s not what `Subjects` are.'
p3958
aS'> A `PublishSubject` can not implement `Publisher`\r\n\r\nYet it [does](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/subjects/PublishSubject.java#L300) and works fine. It does not overflow the client and doesn\'t drop values silently either; if the client can\'t keep up, it will receive an error. The developer must think about what should happen in case the client can\'t keep up, perhaps increase the buffer size in `observeOn`, perhaps it is okay to drop values, perhaps there are some transient bursts and `onBackpressureBuffer` is enough.\r\n\r\nI\'ve read through the linked discussion and it feels there is a lot of self-handcuffing going on. Restricting a `Publisher` the work exactly once is what Iterator does: there is no going back or re-iteration and this is also what happens with a `j.u.Stream`. I have the feeling the way Akka was implemented attempted to sneak into the specification via this single-use: actors don\'t know about what we can call "channels" but only messages. The second problem I see with RS is that in some people\'s mind, there is only one stage: a source and a consumer and they can\'t imagine a chain of operators we deal with RxJava all the time where aspects are distributed along distinct operators. This also reminds me of an article which detailed why CORBA failed; one of the reasons being that proposers where not required to reference-implement their proposals which would have brought out the problems early on.\r\n\r\nSo if you think `PublishSubject` violates the RS spec or fails a TCK, then show me a code example of such violation.'
p3959
aS'> 1.1 The total number of onNext signals sent by a Publisher to a Subscriber MUST be less than or equal to the total number of elements requested by that Subscriber\xc2\xb4s Subscription at all times.\r\n\r\nA `PublishSubject` breaks rules 1.1, as it does not obey the `request(n)` from the `Subscriber`s. It is *not* okay to `onError` if the `Publisher` is emitting more than requested. That means the `Publisher` does not comply with rule 1.1.\r\n\r\nHere is the example:\r\n\r\n```java\r\npackage io.reactivesocket;\r\n\r\nimport org.reactivestreams.Subscriber;\r\nimport org.reactivestreams.Subscription;\r\n\r\nimport io.reactivex.subjects.PublishSubject;\r\n\r\npublic class SubjectContract {\r\n\r\n\tpublic static void main(String... args) {\r\n\t\tPublishSubject<String> s = PublishSubject.create();\r\n\t\t\r\n\t\ts.subscribe(new Subscriber<String>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onSubscribe(Subscription s) {\r\n\t\t\t\ts.request(10);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onNext(String t) {\r\n\t\t\t\tSystem.out.println("A Received: " + t);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Throwable t) {\r\n\t\t\t\tt.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onComplete() {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\ts.subscribe(new Subscriber<String>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onSubscribe(Subscription s) {\r\n\t\t\t\ts.request(50);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onNext(String t) {\r\n\t\t\t\tSystem.out.println("B Received: " + t);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Throwable t) {\r\n\t\t\t\tt.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onComplete() {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tfor(int i=0; i < 1000; i++) {\r\n\t\t\ts.onNext(String.valueOf(i));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThis results in an error on both `Subscriber`s, which is the overflow strategy you have chosen to apply. That does not mean it\'s not overflowing, just because it stops emitting to `onNext`.\r\n\r\n```\r\nA Received: 0\r\nB Received: 0\r\nA Received: 1\r\nB Received: 1\r\nA Received: 2\r\nB Received: 2\r\nA Received: 3\r\nB Received: 3\r\nA Received: 4\r\nB Received: 4\r\nA Received: 5\r\nB Received: 5\r\nA Received: 6\r\nB Received: 6\r\nA Received: 7\r\nB Received: 7\r\nA Received: 8\r\nB Received: 8\r\nA Received: 9\r\nB Received: 9\r\nB Received: 10\r\nio.reactivex.exceptions.MissingBackpressureException: Could not emit value due to lack of requestsB Received: 11\r\n\tat io.reactivex.subjects.PublishSubject$PublishSubscriber.onNext(PublishSubject.java:310)\r\n\tat io.reactivex.subjects.PublishSubject.onNext(PublishSubject.java:86)\r\n\tat io.reactivesocket.SubjectContract.main(SubjectContract.java:62)\r\n\r\nB Received: 12\r\nB Received: 13\r\nB Received: 14\r\nB Received: 15\r\nB Received: 16\r\nB Received: 17\r\nB Received: 18\r\nB Received: 19\r\nB Received: 20\r\nB Received: 21\r\nB Received: 22\r\nB Received: 23\r\nB Received: 24\r\nB Received: 25\r\nB Received: 26\r\nB Received: 27\r\nB Received: 28\r\nB Received: 29\r\nB Received: 30\r\nB Received: 31\r\nB Received: 32\r\nB Received: 33\r\nB Received: 34\r\nB Received: 35\r\nB Received: 36\r\nB Received: 37\r\nB Received: 38\r\nB Received: 39\r\nB Received: 40\r\nB Received: 41\r\nB Received: 42\r\nB Received: 43\r\nB Received: 44\r\nB Received: 45\r\nB Received: 46\r\nB Received: 47\r\nB Received: 48\r\nB Received: 49\r\nio.reactivex.exceptions.MissingBackpressureException: Could not emit value due to lack of requests\r\n\tat io.reactivex.subjects.PublishSubject$PublishSubscriber.onNext(PublishSubject.java:310)\r\n\tat io.reactivex.subjects.PublishSubject.onNext(PublishSubject.java:86)\r\n\tat io.reactivesocket.SubjectContract.main(SubjectContract.java:62)\r\n```\r\n\r\n> 1.9 Publisher.subscribe MUST call onSubscribe on the provided Subscriber prior to any other signals to that Subscriber and MUST return normally, except when the provided Subscriber is null in which case it MUST throw a java.lang.NullPointerException to the caller, for all other situations the only legal way to signal failure (or reject the Subscriber) is by calling onError (after calling onSubscribe).\r\n\r\nA `Publisher` can not call `onNext` without first calling `onSubscribe`, and then only emitting based on `request(n)`.\r\n\r\nHowever, the intent and design of a `Subject` is for a producer to emit to it directly without knowledge of consumers.\r\n\r\n```java\r\nPublishSubject<String> s = PublishSubject.create();\r\nfor(int i=0; i < 1000; i++) {\r\n\ts.onNext(String.valueOf(i));\r\n}\r\n```\r\n\r\nSo let\'s see what happens when I do use `onSubscribe` on a `PublishSubject`:\r\n\r\n```java\r\npackage io.reactivesocket;\r\n\r\nimport org.reactivestreams.Subscriber;\r\nimport org.reactivestreams.Subscription;\r\n\r\nimport io.reactivex.subjects.PublishSubject;\r\n\r\npublic class SubjectContract {\r\n\r\n\tpublic static void main(String... args) {\r\n\t\tPublishSubject<String> s = PublishSubject.create();\r\n\t\t\r\n\t\ts.onSubscribe(new Subscription() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void request(long n) {\r\n\t\t\t\tSystem.out.println("Requested: " + n);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void cancel() {\r\n\t\t\t\t// what does it mean to cancel here?\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\ts.subscribe(new Subscriber<String>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onSubscribe(Subscription s) {\r\n\t\t\t\ts.request(10);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onNext(String t) {\r\n\t\t\t\tSystem.out.println("A Received: " + t);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Throwable t) {\r\n\t\t\t\tt.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onComplete() {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\ts.subscribe(new Subscriber<String>() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onSubscribe(Subscription s) {\r\n\t\t\t\ts.request(50);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onNext(String t) {\r\n\t\t\t\tSystem.out.println("B Received: " + t);\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(Throwable t) {\r\n\t\t\t\tt.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onComplete() {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\tfor(int i=0; i < 1000; i++) {\r\n\t\t\ts.onNext(String.valueOf(i));\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nI received `Long.MAX_VALUE`, completely ignoring the downstream requested amounts from then consumers:\r\n\r\n```\r\nRequested: 9223372036854775807\r\n```\r\n\r\nSo, rule 1.9 is broken.\r\n\r\nAnd what does a `cancel` mean on a `Subject`? It can\'t mean anything, because a `Subject` decouples the producer from the consumer.\r\n\r\n> 1.8 If a Subscription is cancelled its Subscriber MUST eventually stop being signaled.\r\n\r\nThus, rule 1.8 is also broken.\r\n\r\nA `Subject` can not implement `Publisher`.\r\n'
p3960
aS'Related to this is how we determined that `Subject` can not even be used in v1 operator chains where `request(n)` is being used:\r\n\r\n- https://github.com/ReactiveX/RxJava/issues/1779\r\n- https://github.com/ReactiveX/RxJava/issues/1732'
p3961
aS"If your interpretation is true, no operator can implement RS at all and no source, hot or cold is allowed.\r\n\r\n- the moment there is an exception, request(n) is violated because there wasn't n onNexts\r\n- the moment an operator such as observeOn doesn't request the same amount as its child, request(n) is violated.\r\n- if there is an infinite source or unbounded subscriber, cancel is never called thus rule 1.8 is violated.\r\n"
p3962
aS'I am convinced that the PublishSubject cannot be a Processor. In order for a thing to offer stream fan-in/fan-out functionality then a new `Subscription` must be produced for every subscriber and back pressure requests must be maintained for each separately. The use case of a subject is different from a processors intended use. '
p3963
aS"> the moment there is an exception, request(n) is violated because there wasn't n onNexts\r\n\r\n`onError` signals are not part of `request(n)`. Rule 1.1 only talks about `onNext`. Rule 1.4 says exceptions are emitted via `onError`.\r\n\r\nAdditionally:\r\n\r\n - 2.9 A Subscriber MUST be prepared to receive an onComplete signal with or without a preceding Subscription.request(long n) call.\r\n - 2.10 A Subscriber MUST be prepared to receive an onError signal with or without a preceding Subscription.request(long n) call.\r\n\r\n> the moment an operator such as observeOn doesn't request the same amount as its child, request(n) is violated.\r\n\r\nNo, because `observeOn` decouples the flow. It can request(128) up as long as it can handle receipt and buffer it, and then respond correctly to its consumer.\r\n\r\nThus, a fully unbounded `ReplaySubject` could satisfy `request(n)` semantics since it could act like an infinite `observeOn`. This does not however apply generically to `Subject` or `PublishSubject`, and not a bounded `ReplaySubject`.\r\n\r\n> if there is an infinite source or unbounded subscriber, cancel is never called thus rule 1.8 is violated.\r\n\r\nHuh? 1.8 does not say `cancel` MUST be invoked. It just says that if it is invoked then the source must stop emitting:\r\n\r\n- 1.8 If a Subscription is cancelled its Subscriber MUST eventually stop being signaled.\r\n\r\n\r\n\r\n\r\n\r\n"
p3964
aS"Let's assume there is a non-backpressure PublishSubject, not Flowable and not implementing RS but it is a NbpObservable. I then take this subject, cast it to NbpObservable, call toFlowable(BackpressureStrategy.FAIL) and I have a Flowable. Is this Flowable conforming with the RS spec? If not, there any legal way of implementing any toFlowable at all?"
p3965
aS'That example is now okay, because when you converted from `Subject` to `Flowable`, you chose to add a `BackpressureStrategy` that defines flow control. That `Flowable` conforms to the spec. \r\n'
p3966
aS'The issue with `Subject implementing Publisher` is that `Publisher` has this method:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s);\r\n```\r\n\r\nIf it was instead:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s, BackpressureStrategy strategy);\r\n```\r\n\r\n... then it would be okay, and that is the same as `toFlowable(BackpressureStrategy s)`.\r\n'
p3967
aS"@benjchristensen Then why is it wrong if PublishSubject does what you just replied: sends an error outside requested amount, decouples the flow and doesn't call cancel to upstream?"
p3968
aS'Because you are calling an error on the `Subscriber`, which is due to overflowing, which is the fault of the `Publisher` for not obeying the `request(n)`. \r\n\r\nIn the `toFlowable()` case, the `Subscriber` does not receive an error.'
p3969
aS'Also, do you recognize that what I described in the NbpObservable->Flowable example is what the current 2.0 PublishSubject does in one step?'
p3970
aS'Yes I do, but you decide a default backpressure strategy of "FAIL", which is not okay to do. It means you are ignoring the `request(n)` of the subscribers that subscribe to this method:\r\n\r\n```java\r\n public void subscribe(Subscriber<? super T> s);\r\n```\r\n\r\nIgnoring the `request(n)` breaks rule 1.1.\r\n\r\nWe can not choose a default flow control strategy that defeats the purpose of `request(n)`. That breaks the RS contract, and the whole point of Reactive Streams.'
p3971
aS"The default can be overruled by any of the onBackpressureXXX operators. \r\n\r\nDo error(), empty(), never() and just() ignore request(n)? If yes, then we can't have them as flowables."
p3972
aS"That's missing the point. The user is opting into those forms of flow control. The user can choose whatever `request(n)` behavior they want. Operators are a mechanism for them to control `request(n)`. \r\n\r\nA `Subject` ignoring the `request(n)` though is not allowed."
p3973
aS'Don\'t ignore the other side of this as well, the purpose of a `Subject` existing is for a producer to do "hot" emission to `onNext`. This means they will not call `onSubscribe`. This breaks 1.9 as I explained above.\r\n\r\n'
p3974
aS'If this is about the lack of call to PublishSubject.onSubscribe then one should call it with something. \r\n\r\nSuch call is practically no-op because PublishSubject is an unbounded Subscriber. Is being an unbounded Subscriber a violation in general or only if said Subscriber is a Subject? \r\n\r\nIf the latter, then all Subjects should be banned and neither groupBy() nor window() should be allowed.'
p3975
aS'> Is being an unbounded Subscriber a violation in general\r\n\r\nBeing an unbounded subscriber is fine. Being an unbounded Publisher is not.\r\n\r\nSubjects are hot, push. They do not participate in backpressure. Stop trying to apply the same rules to all types, that is why we are splitting the types in https://github.com/ReactiveX/RxJava/pull/3348. We will have a `Subject` that implements `Observable`, not `Flowable`.'
p3976
aS"I can't disprove a definition which this thread has become now. In addition, reviewing anything is now quite difficult because I can't predict which rule applies when and when will a rule suddenly mean its opposite."
p3977
aS'I see no logical fault in reasoning :+1:. We can debate exactly what subjects are later but it is clear to me that the assumptions established by the RS Processor do not allow for multicast subjects (as they operate today).'
p3978
aS'Thanks @stealthcode for reviewing and weighing in. As you allude to, this PR is simply attempting to document what a `Subject` is, and align with what is in the Reactive Streams spec.'
p3979
aS"@akarnokd Any further thoughts on the text of this PR? I'd like to move forward to other items of design if we can move past this one."
p3980
aS'I disagree with the text. No further comments on this topic.'
p3981
aS"I think this PR makes the distinction between Subject and reactive streams Publisher more apparent which is good.\r\n\r\nRegarding the argument, I'm convinced that PublishSubject can't be a Processor without implementing a backpressure strategy. \r\n"
p3982
aS"@akarnokd You can't disagree and then abstain from providing alternatives when evidence has been provided supporting this text. Are you removing yourself from the design discussion and letting the rest of us make the decision?"
p3983
aS'@stevegury thank you for your review of the topic and weighing in.'
p3984
aS'> You can\'t disagree and then abstain from providing alternatives when evidence has been provided supporting this text.\r\n\r\nDon\'t put is on me. In my understanding, there is no problem with `PublishSubject` being a `Processor` as it by default doesn\'t overflow its children but sends them an error. I\'ve also mentioned that you can apply `onBackpressureXXX` on a `PublishSubject` and change this behavior to be dropping, buffering or using the latest. This is nothing different than applying `onErrorResumeNext()` on a source which is likely to emit an error. For example:\r\n\r\n```java\r\nsubject.onErrorResumeNext(\r\n    e -> e instanceof MissingBackpressureException \r\n        ? subject.onBackpressureDrop() : Observable.error(e));\r\n```\r\nThis will resubscribe with a drop strategy to the subject to avoid any further errors.\r\n\r\nBut if your problem is that `PublishSubject` defaults to error out, I see the option to add a `BackpressureStrategy` parameter to `PublishSubject.create()` so there is no "surprise" to those who wouldn\'t read the specification anyways regarding default behavior.\r\n\r\nThe final alternative I can offer is something like the `SubmissionPublisher` from Doug Lea which pushes the rejection handling to the caller of `submit` or `offer`.\r\n\r\n> Are you removing yourself from the design discussion and letting the rest of us make the decision?\r\n\r\nI\'m outnumbered anyways. Does this mean whenever I disagree with something in the future, you either keep asking until I change my mind or simply outrule me?\r\n\r\nPerhaps this is a good time to ask for insight from the guys who maintain the RS spec or the persons who are not Neflix or me.'
p3985
aS'> the guys who maintain the RS spec\r\n\r\nI\'m one of them => https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/CONTRIBUTING.md#gatekeepers But if we can get someone else to spend time on this with us, we can get others involved. Perhaps @smaldini could give us some time. \r\n\r\n> as it by default doesn\'t overflow its children but sends them an error\r\n\r\nThis is the key problem so let me summarize this for anyone else catching up on this thread. A `Publisher` in "Reactive Streams" is supposed to *respect* the `request(n)` from a `Subscriber`. To *respect* means that it won\'t emit more than requested. It doesn\'t mean that it sends `onError` to the `Subscriber` if the `Subscriber` can\'t keep up. The whole point of "Reactive Streams" is to slow down the producer to the rate of the consumer. Sending an error to the consumer when it is slow is counter to its entire purpose. In "Reactive Streams", the consumer is in control. An Rx `Subject` on the other hand puts the producer in control. '
p3986
aS"I'm merging this based on feedback from @stevegury and @stealthcode and my understanding of Reactive Streams based on my involvement in defining that contract. The Design.md document still has a long way to go and we'll have many more weeks of discussions on design. This is but one small point."
p3987
asg14
S'ReactiveX:v2-design-subject'
p3988
sbsI3350
(iPull
Pull
p3989
(dp3990
g3
S'How to create and destroy streams.\r\n\r\nThe wording of this can become much better once agreement occurs in https://github.com/ReactiveX/RxJava/pull/3348/files\r\n\r\nThe intent of this is:\r\n\r\n1) Specify how to create streams (Observable/Flowable) of the various flavors, and account for flow control.\r\n2) Evolve towards what the creation/generation APIs are\r\n3) Specify that it is not the responsibility of the final Subscriber to call unsubscribe/cancel upstream'
p3991
sg5
S'2.x design: creation/destruction'
p3992
sg7
(lp3993
S'Discussion'
p3994
asg10
I3350
sg11
(lp3995
S"Just read the Hot and Cold stuff. I threw down some cogitations on Hot and Cold in a gist just in the last couple of days. It's [here](https://gist.github.com/davidmoten/eeb450682db09e03efc0). My thoughts on the matter not really matured yet but the vagueness about Hot and Cold Observables was something I wanted to clarify for myself. One characteristic of Hot observables that doesn't seem to get mentioned is that multiple concurrent subscribers will see the same stream at some point."
p3996
aS'I see a few cases when one wants to "create" an `Observable`:\r\n\r\n  - There is a hot source in some other library (such as mouse events) and one wants to bring it into the `Observable` world. The safest way to do this is to add in a `Subject`.\r\n  - There is a cold source (such as a JDBC query) that would be consumed in a pull-fashion anyway and one wants to bring it into the `Observable` world too. That case could use a generator such as `AbstractOnSubscribe` or `SyncOnSubscribe`.\r\n  - Other cases should be (already) covered by static factory methods such as `just`, `fromCallable`, etc.'
p3997
aS'@davidmoten The definition of hot/cold as I\'ve put in this document comes from @headinthebox. It is about side-effects. \r\n\r\nIt is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time, which is only assured if `ConnectableObservable.connect()` is used.\r\n\r\nHere is Reactive Cocoa 3.0 on hot/cold: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/v3.0.0/CHANGELOG.md#replacements They have separated the types into `Signal` (hot) and `SignalProducer` (cold).\r\n\r\nThe temperature of an `Observable` does not prevent flow control from being applied. Thus this is not true:\r\n\r\n> once subscribed to if no requests are made that eventually available storage (memory/disk) will exceed any given bound (due to events being buffered)\r\n\r\nIf `publish()` is being used, then the flow control prior to `publish()` would be equivalent for all consumers. If each consumer chooses to apply their own flow control, then they are choosing to not see "the same stream" as their siblings as they have created different streams from the same source.\r\n\r\nAnd nothing about being "hot" requires everything to be buffered. That is purely a choice of flow control. Note that an operating system already is doing flow control before it sends mouse events. It is absolutely not sending every event. It is sending sampled events, and that sampling happens at the hardware and software levels before it ever hits us anyways. Flow control is everywhere. '
p3998
aS'> I see a few cases when one wants to "create" an Observable:\r\n\r\nThe approaches you gave all work. A few comments:\r\n\r\n- a `Subject` is not the only way (or safest ... not sure what safety has to do with this) to do this, as `Observable.create` which then listens and stops listening on cancellation is equally effective, and can be better than an always-on `Subject` if the use of the stream is not constant.\r\n- missing is the ability to do async batched fetching, such as `AsyncOnSubscribe`, which is needed for more advanced cold sources over network boundaries (for example, fetching 5000 items 100 at a time)\r\n- the static factory methods today are legit, but I think we should revisit their naming, and anything from a cold pullable source should return a `Flowable`, not an `Observable`, if we agree upon that distinction in https://github.com/ReactiveX/RxJava/pull/3348\r\n'
p3999
aS'Do you all agree that we do not need an `unsubscribe`/`cancel` send from a `SafeSubscriber` wrapper after every `onError`/`onComplete`? I find it wasteful, unnecessary, and affecting performance (in cases such as a stream of 1 where the extra unsubscribe is noticeable when the stream itself only emitted 1 item).'
p4000
aS'I agree, there is no need to force a cancel call on a final Subscriber anymore. Upstream will cancel the subscription for you  (maybe before calling you, maybe after they called you: see observeOn).'
p4001
aS"@benjchristensen re Hot/Cold\r\n\r\n>It is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time, which is only assured if ConnectableObservable.connect() is used.\r\n\r\nThis is how to make this precise and not demand mention of `ConnectableObservable` (not part of the reactive streams spec for instance):\r\n\r\n* once two subscribers are subscribed to source there exists a finite non-negative integer n such that events1.skip(n) is equal to events2 or events1 is equal to events2.skip(n). That is *eventually* the streams have the same elements till termination.\r\n\r\nYour point about sampling doesn't change the fact that an infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growth. It's irrelevant that the OS gives me one mouse event a millisecond or one per year because I'm not talking about a practical measuring test but a theoretical one. It's certainly the case that any consumer could apply flow control measures to such an observable but I'm trying to arrive at at a way of deciding that an observable is Hot or Cold by just observing it (having no knowledge of its internals). I guess once flow control has been applied to a Hot Observable then the resultant Observable is by my definition no longer Hot. This may be a confusing distinction and I might have to come up with a new name for it say Red Hot observable. Just semantics I guess but I think interesting to explore a bit.\r\n\r\n"
p4002
aS'> not part of the reactive streams spec for instance\r\n\r\nThe Reactive Streams spec does not talk about hot, cold, or multicast, nor is RxJava going to be 100% about Reactive Streams. That spec represents a type, but it certainly doesn\'t address everything. One example of that is shown in https://github.com/ReactiveX/RxJava/pull/3349.\r\n\r\nThus, the contract requirements of Reactive Streams are only applicable to types that implement the Reactive Streams interfaces. \r\n\r\n> This is how to make this precise\r\n\r\nI don\'t understand what precision you are aiming for. We can not redefine what "hot" and "cold" mean, since those are beyond RxJava. The definitions (https://github.com/ReactiveX/RxJava/blob/2.x/DESIGN.md#hot) that I have included in the document come from @headinthebox and exist in other ReactiveX implementations and documentation (such as here: http://www.introtorx.com/Content/v1.0.10621.0/14_HotAndColdObservables.html#HotAndCold and here: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/CHANGELOG.md#hot-signals-are-now-signals)\r\n\r\nSo what specifically are you suggesting to make more precise than what is already accepted as the definition of "hot" and "cold"?\r\n\r\n> infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growth\r\n\r\nI don\'t understand this. What does being "hot" have to do with having an unbounded buffer?\r\n\r\n> I\'m trying to arrive at at a way of deciding that an observable is Hot or Cold by just observing it\r\n\r\nSince "hot" and "cold" is about side-effects, and nothing to do with the data flowing through it, then you would need to look at whether there are side-effects when a subscribe happens. \r\n\r\nA type system can attempt to try and communicate when a source represents a hot or cold source, such as Reactive Cocoa does with `Signal` (hot) and `SignalProducer` (cold): https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/CHANGELOG.md#hot-signals-are-now-signals Determining whether we should use types to represent these was the point of the discussion in https://github.com/ReactiveX/RxJava/issues/2785\r\n\r\n> I guess once flow control has been applied to a Hot Observable then the resultant Observable is by my definition no longer Hot. \r\n\r\nI don\'t see how the application of flow control is related to whether a source is "hot" or "cold" since flow control does not impact the side-effects or lack of side-effects of subscription. '
p4003
aS"Is this PR good for merge, or are there things that need to change?\r\n\r\nAny further additions (such as more precision if needed) can come through followup PRs. We don't need to get everything done in this PR, as long as this PR is correct thus far.\r\n\r\nIf this PR is okay, I'd like to merge so we can move forward in defining the design and allow maturation of the picture for v2.\r\n\r\ncc @ReactiveX/rxjava-committers for vote"
p4004
aS'Ping @ReactiveX/rxjava-committers @akarnokd @davidmoten '
p4005
aS':+1: '
p4006
aS"Thanks @akarnokd \r\n\r\n@stealthcode Let me know what you need changed in this before you're okay."
p4007
aS':+1: all good. thanks! '
p4008
aS'Thank you. Merged.'
p4009
asg14
S'ReactiveX:v2-design-lifecycle'
p4010
sbsI3351
(iPull
Pull
p4011
(dp4012
g3
S"The iterator created by `BlockingOperator#getIterator()` doesn't exert backpressure, which causes code like this to never terminate/run out of memory\r\n\r\n```java\r\nObservable.from(new Iterable<Integer>() {\r\n\r\n    @Override\r\n    public Iterator<Integer> iterator() {\r\n        return new Iterator<Integer>() {\r\n\r\n            @Override\r\n            public boolean hasNext() {\r\n                return true;\r\n            }\r\n\r\n            @Override\r\n            public Integer next() {\r\n                return 1;\r\n            }\r\n        };\r\n    }\r\n}).toBlocking().getIterator().next();\r\n```\r\n\r\nThis PR adds the appropriate `request` calls so that this works. I had to combine the implementations of `Subscriber` and `Iterator` into a single class to get access to `request()`."
p4013
sg5
S'make blockingoperatortoiterator exert backpressure.'
p4014
sg7
(lp4015
S'Enhancement'
p4016
asg10
I3351
sg11
(lp4017
S"Ok. I removed the unnecessary variable initialization and added batched requests. The initial batch is `RxRingBuffer.SIZE`, and subsequent ones are `3 * RxRingBuffer.SIZE / 4` each (once we've received that much)."
p4018
aS'Excellent! :+1: '
p4019
aS':+1: '
p4020
asg14
S'vqvu:blocking-iterator-backpressure'
p4021
sbsI3352
(iPull
Pull
p4022
(dp4023
g3
S"Ported the two perf tests to evaluate 2.x throughput.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9907226/67a454c8-5c8e-11e5-8644-c3196b2e58d8.png)\r\n\r\nMy primary suspect for the extra overhead are the atomics of queue-drain. The 1.x uses a synchronized-based emitter-loop which is elided by the JIT compiler but atomics can't be elided. As I mentioned before, synchronized works better for light-to-none asynchronous use whereas atomics work better for asynchronous use.\r\n\r\nAlso quote from #3157\r\n> Exceptions that do not require a :+1: would be:\r\n>\r\n>javadoc changes\r\n>unit test additions or refactoring\r\n>**perf test additions, fixes or refactoring**\r\n>grammatical and presentation fixes to README, CONTRIBUTING, and other such metadata files"
p4024
sg5
S'2.x: perf checks for flatmap and merge'
p4025
sg7
(lp4026
S'Performance'
p4027
asg10
I3352
sg11
(lp4028
sg14
S'akarnokd:MergePerf2x'
p4029
sbsI3353
(iPull
Pull
p4030
(dp4031
g3
S'Benchmarks synchronous, asynchronous (where the emission can hop onto the receiver thread) and strictly-pipelined (the emitter and receiver are on different threads). Results on i7 4790, Windows 7 x64, Java 1.8u60:\r\n\r\n```\r\nBenchmark                (times)   Mode  Cnt         Score        Error  Units\r\nRangePerf.rangeAsync           1  thrpt    5    135410,552 ?  20521,908  ops/s\r\nRangePerf.rangeAsync        1000  thrpt    5     25634,730 ?    284,526  ops/s\r\nRangePerf.rangeAsync     1000000  thrpt    5        59,073 ?      1,154  ops/s\r\nRangePerf.rangePipeline        1  thrpt    5     98895,846 ?  11398,363  ops/s\r\nRangePerf.rangePipeline     1000  thrpt    5     16233,903 ?    741,712  ops/s\r\nRangePerf.rangePipeline  1000000  thrpt    5        10,621 ?      2,606  ops/s\r\nRangePerf.rangeSync            1  thrpt    5  30367277,992 ? 170100,628  ops/s\r\nRangePerf.rangeSync         1000  thrpt    5    212293,380 ?   3605,320  ops/s\r\nRangePerf.rangeSync      1000000  thrpt    5       248,135 ?      1,775  ops/s\r\n```'
p4032
sg5
S'2.x: range perf + added missing header.'
p4033
sg7
(lp4034
S'Performance'
p4035
asg10
I3353
sg11
(lp4036
sg14
S'akarnokd:RangePerf2x'
p4037
sbsI3354
(iPull
Pull
p4038
(dp4039
g3
S"I've noticed that the `times = 1` async range sometimes produces double the throughput without any change to the underlying structure and I've figured out it is because how my operation system wakes up the await in the benchmark. I switched the tests to spin-loop and now I get a consistent and higher value than before:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9958923/0ce916fe-5e0f-11e5-988a-3e8cac1098dc.png)\r\n\r\nThere are a few light-greens and a few light-reds which I attribute to other fluctuating factors on my computer.\r\n\r\nIn addition, I've experimented with two optimizations: one for observing a scalar value on a different thread and one where the `OperatorObserveOn` is turned into a `PublisherObserveOn` to save on the allocation of a `PublisherLift`. The scalar optimization ended up being slower by 15% for some reason I don't understand and the `PublishObserveOn` had no impact on the throughput within the error range."
p4040
sg5
S'2.x: perf change wait to spin-loop for short async benchmarks'
p4041
sg7
(lp4042
S'Performance'
p4043
asg10
I3354
sg11
(lp4044
sg14
S'akarnokd:PerfAwaitFix2x'
p4045
sbsI3355
(iPull
Pull
p4046
(dp4047
g3
S"I've accidentally pushed this into 2.x (no rules violated though) but I'd like to show the run results on my machine (i7 4790, Windows 7 x64, Java 1.8u60)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/9959437/5768157c-5e14-11e5-8d9f-9b3157070633.png)\r\n\r\nThe backpressure-overhead on range is quite apparent. Naturally, scalar can't do range so I only compared it agains the `just` of the others. Single has no equivalent operators for the other cases right now.\r\n\r\nThere is still room for improvement for the range-flatMap-just in NbpObservable and Single.\r\n\r\nAgain, the lower overhead of NbpObservable shows through in RangeMapRange where there is no fast-path at all and everybody has to subscribe to the inner range."
p4048
sg5
S'2.x: perf comparison of observable, nbpobservable and single'
p4049
sg7
(lp4050
S'Performance'
p4051
asg10
I3355
sg11
(lp4052
sg14
S'akarnokd:EachTypeFlatMapPerf2x'
p4053
sbsI3356
(iPull
Pull
p4054
(dp4055
g3
S"There were several problems with the operator:\r\n\r\n  - The first 2 requests were always `Long.MAX_VALUE` no matter what the child requested.\r\n  - There was a race-condition and memory leak when tracking the generated `Observable`s.\r\n  - Both the individual generated `Observable`s and the main concatenation could overflow the internal buffers and had to be defensively-buffered.\r\n  - If a request was responded with a generated `Observable` that delivered less than this requested amount, the child ended up hanging.\r\n  - The concatenation didn't know about the number of values it should deliver in aggregate and might have delivered more or less, causing `MissingBackpressureException` or hangs.\r\n  - Exception thrown from the `generateState` is now delivered to the child immediately.\r\n\r\nAs I see, the usage is as follows. Each individual `request()` from the child is supposed to be fulfilled by individual `Observable`s. For example, `request(1)` and `request(5)` will generate two distinct `Observable`s where the first will have 1 value and the second 5."
p4056
sg5
S'fix to a bunch of bugs and issues with asynconsubscribe'
p4057
sg7
(lp4058
S'Bug'
p4059
asg10
I3356
sg11
(lp4060
S"It seems to me that there are still outstanding questions as to the AsyncOnSubscribe usage. I am going to open a pull request with improved javadocs for the next function. This should help clear up confusion about it's usage. Also there are a couple items here that I'd like to discuss in greater depth. I am not okay with a complete rewrite (as you have provided here) but I would gladly accept contributions. Please read my comments below and reply so that we can move forward. \r\n\r\n> Exception thrown from the generateState is now delivered to the child immediately.\r\n\r\nGreat. Good improvement. I would like to see a pull request for this against the current existing code base. \r\n\r\n> There was a race-condition and memory leak when tracking the generated Observables.\r\n\r\nIs this the `HashSet<Subscription>`? I think that your usage of a `CompositeSubscription` was a good fix and necessary. Again, I think you could have made this fix to the existing code base very simply. \r\n\r\n> The first 2 requests were always Long.MAX_VALUE no matter what the child requested.\r\n\r\nWhen debugging your previous test it was clear to me that the `TestSubscriber` was not correctly using the `initialRequest` value to change the first `requested` amount in the underlying `Subscriber`. I do not think this behavior has anything to do with the AsyncOnSubscribe implementation. I commented to this effect in your issue #3341. \r\n\r\n> Both the individual generated Observables and the main concatenation could overflow the internal buffers and had to be defensively-buffered. \r\n\r\nCan you be more specific? The Buffer until subscriber uses an unbounded queue and I already commented that this was a known issue. I would accept a pull request to address this issue against the existing code base. \r\n\r\n> If a request was responded with a generated Observable that delivered less than this requested amount, the child ended up hanging.\r\n\r\nThe observables emitted to the observer should emit exactly `n`. If they emit less than `n` then the observer must be `onCompleted()` as there is no more data available. Your test does not call a terminal event on the observer so I would expect this to hang. This is the area where the documentation needs to be improved (and I will open a pull request to improve this). It makes perfect sense how you would perceive this as a bug. I am open to ideas. However that will require that you communicate with me over the designs and present alternatives. \r\n\r\n> The concatenation didn't know about the number of values it should deliver in aggregate and might have delivered more or less, causing MissingBackpressureException or hangs.\r\n\r\nI deliberately chose not to validate the quantity of onNexted events. This is like validating at every level when it will invalidate intermittently at runtime and then blow up or if you don't implement validation then a missing back pressure exception is thrown intermittently, and it blows up at runtime. Is there anything better that we can do? I vote to not validate and trust that the user of the AsyncOnSubscribe follows the contract (that we will document in detail). "
p4061
aS">  I am not okay with a complete rewrite (as you have provided here) but I would gladly accept contributions.\r\n\r\nFirst of all, this isn't a complete rewrite as I kept everything else that wasn't contributing to a bug. The API is still the same and the behavior is what looked like you'd like to achieve: client requests of n_i should be responded to with a single Observable that produces n_i values or (less + completes the main sequence).\r\n\r\n>  against the current existing code base.\r\n\r\nThe fixes apply together, not in parts.\r\n\r\n>  it was clear to me that the TestSubscriber was not correctly using the initialRequest value to change the first requested amount in the underlying Subscriber\r\n\r\nWe use this constructor in many other tests that require zero request upfront. It works there. Your code composed the various `Subscriber`s and `Producer`s in a wrong way and the default `Long.MAX_VALUE` was requested way before the end `TestSubscriber` could issue a request.\r\n\r\n> The Buffer until subscriber uses an unbounded queue and I already commented that this was a known issue. I would accept a pull request to address this issue against the existing code base.\r\n\r\n`BufferUntilSubscriber` doesn't support backpressure and thus 3 subsequent requests of any size would generate 3 sources but `concat` accepts 2 at a time. In addition, there is no way to know if the user actually returned a backpressure-supporting Observable or not. In `testSerializesConcurrentObservables` you actually over-deliver and the `concat` would fail with an `IllegalStateException`.\r\n\r\nI have a version of `BufferUntilSubscriber` in #3150 and before that in #3050 waiting for review for months now. And again, that would still leave the `AsyncOnSubscribe` buggy so why do separate PRs that would conflict with each other due to line differences? \r\n\r\n> The observables emitted to the observer should emit exactly n. If they emit less than n then the observer must be onCompleted() as there is no more data available.\r\n\r\n`testUnderdeliveryCorrection` tests for the case where the developer generated the wrong source which doesn't deliver enough values. It wasn't meant to be a finite sequence and not meant to call `onComplete`; what mattered is how it responded to `requestMore` calls.\r\n\r\n> I deliberately chose not to validate the quantity of onNexted events. This is like validating at every level when it will invalidate intermittently at runtime and then blow up or if you don't implement validation then a missing back pressure exception is thrown intermittently, and it blows up at runtime. Is there anything better that we can do? I vote to not validate and trust that the user of the `AsyncOnSubscribe` follows the contract (that we will document in detail).\r\n\r\nYou don't seem to understand how `concat` backpressure works: The client requests `n` and the `concat` operator forwards that amount to its first source. Because individual sources may deliver less than this value, `concat` has to check the number of produced elements so in case a new source is started, concat can request this remaining amount from it. This is what the `ProducerArbiter` manages.\r\n\r\nYour original code forgot to tell `concat` how many elements to expect and always run in unbounded mode regardless of the original child request value."
p4062
aS"@akarnokd I here you. Here is my concern. I have asked you directly for you feedback over the design and I have not received from you what I think is sufficient input to see that we both agree on the design or even the goals. My last impression from you regarding the `AsyncOnSubscribe` was that you simply didn't even agree with its existence and your questions seemed to indicate that you didn't understand why I implemented it. So when you commented on the pull request (after it was merged) with bugs without test code or details of how to reproduce, I was unclear about your interpretation of the design and asked you to file detailed issues with reproducible test code. \r\n\r\nAll of that said, I need confirmation that you and I are trying to achieve the same goals before I consider merging this. "
p4063
aS"1) Design \r\n\r\nIt seems much of the disagreement between you two is that the design and approach was not well discussed, and instead we have jumped to implementations without a common understanding. That discussion is dangling here: https://github.com/ReactiveX/RxJava/issues/3003 @akarnokd You need to involve yourself in that discussion where I and @stealthcode have weighed in, but not received further feedback.\r\n\r\n2) Rewriting Code\r\n\r\nIt is generally not helpful to start from scratch unless there is upfront agreement that the original should not be pursued or iterated upon. Forking in two directions dilutes the discussion, pits egos against each other, and prevents collaboration. \r\n\r\nI view this PR as a rewrite. Looking at the two side-by-side shows hardly any code left behind, and the algorithms are changed, and it's hard to tell what is actually because of issues versus just stylistic differences between them.  This in turn forces everyone to start from scratch in reading the code, understanding the issues and making decisions. If there is something fundamental about the original code that prevents correct behavior, then I suggest that be discussed up front with the original author. \r\n\r\n3) Communication & Collaboration\r\n\r\nThe underlying contention I sense between you two is shown in places such as:\r\n\r\n- https://github.com/ReactiveX/RxJava/pull/3203#issuecomment-135358972\r\n- https://github.com/ReactiveX/RxJava/issues/3341#issue-106142277\r\n\r\nPlease communicate with respect for each other. \r\n\r\nAnother example of statement that is not helpful:\r\n\r\n> You don't seem to understand how concat backpressure works:\r\n\r\n@akarnokd I could say very similar things if I wanted to about bugs you wrote into the last revision of `merge` ([1](https://github.com/ReactiveX/RxJava/pull/2928#discussion_r32747249), [2](https://github.com/ReactiveX/RxJava/issues/3156)), or the recent discussion about `Subject` in https://github.com/ReactiveX/RxJava/pull/3349. Please do not make things personal (such as in https://github.com/ReactiveX/RxJava/pull/3349#issuecomment-142037400). \r\n\r\nI too have submitted PRs with mistakes and bugs. All of us have. We do code reviews and patch releases for a reason, otherwise we should have been done this project a year ago. \r\n\r\nStick to objective statements of functionality, performance, and usage. A bug is a bug. A misunderstanding is just that. Overlooking something is easy, particularly when dealing with asynchrony, concurrency, flow control and the like. This particular `AsyncOnSubscribe` behavior is non-trivial, otherwise it wouldn't be this big of a discussion. Let's not trivialize it or attack people.\r\n\r\n4) Next Steps\r\n\r\nBoth of you (@akarnokd & @stealthcode) are great engineers, but with different strengths and weaknesses. That is a great thing for the project to have those diverse viewpoints and skills. \r\n\r\nPlease focus more on communication and less on the code for a bit. Code is honestly the easiest part of our job. In the long run, healthy collaboration is far more important that sprinting on code.\r\n"
p4064
aS'I did my part in reviewing the code and providing fixes. If you think the original version is what you wanted then its up to you and there is no point in discussing this any further. '
p4065
aS"> You don't seem to understand how concat backpressure works\r\n\r\nI misunderstood your original statement. My mistake. \r\n\r\nI reviewed the code and it looks fine :+1: "
p4066
asg14
S'akarnokd:AsyncOnSubscribeFix'
p4067
sbsI3357
(iPull
Pull
p4068
(dp4069
g3
S'Related discussion in #3017.'
p4070
sg5
S'eager concatmap'
p4071
sg7
(lp4072
S'Enhancement'
p4073
aS'Feature-Request'
p4074
asg10
I3357
sg11
(lp4075
S"Thanks a lot for contributing this one @akarnokd. I've had one look through and no problems jump out at me but I will review further. This will be useful."
p4076
aS"Thanks for the review @davidmoten . Usually I use one letter variables because I find it easier to parse the code and instead of long variable names, I use newlines to separate logical blocks. This way, I don't have to type that many letters and I don't have to wait while Eclipse returns with the content assist (which is blocking by the way and may take hundreds of milliseconds, even on my i7 + SSD).\r\n\r\nI took the time and renamed variables as you asked for and added some more unit tests that check the code paths. That being said, I don't plan to do such renames in my contributions very often in the future and encourage anybody to post their PRs with their proposed cleanups/renames."
p4077
aS"Thanks for the feedback. I've updated the method names to `concatMapEager` and `concatEager`, added the `@Experimental` tags, some javadoc and a missing test for a 2-parameter `concatEager` overload."
p4078
aS'Updated with a capacity fix for the `SpscLinkedArrayQueue`.'
p4079
aS'I reviewed in details in the code and I believe it is correct.\r\n\r\nBut I wonder if subscribing to the sources in a "unbounded mode" is the right thing to do.\r\nAt the expense of complexifying the code, I believe it could be possible to split the `request(n)` between the sources. Maybe requesting `1` to all the `m` sources expect the first one, which we request `n - m + 1` ... and so on.\r\n\r\nThe devil is in the details, and I believe this would significantly complexify the code, but I would like to know what you are thinking about this?'
p4080
aS"@stevegury This operator consumes source observables in order and doesn't make sense to split any request from downstream. If the downstream requests n and the first is requested n / count, that would hang the sequence because only the first is allowed to emit and it won't emit enough to trigger a new request.\r\n\r\nIt is possible to use a bounded buffer per source so while they are not consumed, they don't grow indefinitely. However, it means that each of them can produce only `RxRingBuffer.SIZE` elements before stopping and thus the operator wouldn't be eager anymore."
p4081
aS"@akarnokd sorry I wasn't very clear but what I proposed was roughly what you described (replacing `RxRingBuffer.SIZE` by `1`).\r\n\r\nMy main concern here is the use of unbounded buffer, which, I think, could be avoided."
p4082
aS'@davidmoten What do you think about the bounded buffering and the fact that such sources would act more like a delayed source?'
p4083
aS"I'd be happy to see bounded buffering (`RxRingBuffer.SIZE` sounds a better default size than 1 to me and would be consistent with the request eagerness of other operators like `merge` for instance). Could we add an overload to allow the specification of buffer size as well?\r\n\r\nIf this is significant rework I'm content to see this unbounded version documented with its buffering characteristics merged and we can defer the bounding work to another PR."
p4084
aS'Done.'
p4085
aS'Great, thanks @akarnokd ! Lightning quick as always.'
p4086
aS'LGTM :+1: '
p4087
aS"The three of you seem happy with it so I'm merging it."
p4088
asg14
S'akarnokd:EagerConcatMap'
p4089
sbsI3358
(iPull
Pull
p4090
(dp4091
g3
S"I've added the methods from the 1.x Single plus a couple more based on Observable operators that makes sense to me in respect to Single. No plus unit tests and no javadoc."
p4092
sg5
S'2.x: single class more operators + test from 1.x'
p4093
sg7
(lp4094
S'Enhancement'
p4095
asg10
I3358
sg11
(lp4096
sg14
S'akarnokd:SingleOperators2x'
p4097
sbsI3359
(iPull
Pull
p4098
(dp4099
g3
S'They can be renamed later as necessary. No unit tests but the regular\r\nSubject tests can be ported easily.'
p4100
sg5
S'2.x: non-backpressure subject implementations'
p4101
sg7
(lp4102
S'Enhancement'
p4103
asg10
I3359
sg11
(lp4104
S"I'll repost this with a full PR of other Nbp changes."
p4105
asg14
S'akarnokd:NbpEnhancementP1v2x'
p4106
sbsI3360
(iPull
Pull
p4107
(dp4108
g3
S'These classes enable the porting of backpressure-aware operators for non-backpressure Observable.\r\n\r\nIt would be great if this could be merged sooner.'
p4109
sg5
S'2.x: non-backpressure subscribers'
p4110
sg7
(lp4111
S'Enhancement'
p4112
asg10
I3360
sg11
(lp4113
S"I'll repost this with a full PR of other Nbp changes."
p4114
asg14
S'akarnokd:NbpSubscribers2x'
p4115
sbsI3361
(iPull
Pull
p4116
(dp4117
g3
S"Not very important since `onError` should be called once, but anyway it's `AtomicReference` and we need to store the value returned from `get()` locally.\r\n\r\nP.S. I don't use `Future`s, just found this piece of code."
p4118
sg5
S'safer error handling in blockingoperatortofuture'
p4119
sg7
(lp4120
S'Enhancement'
p4121
asg10
I3361
sg11
(lp4122
S'It is unlikely error changed between the two calls in this operator but regardless, one should read volatile variables once. :+1: '
p4123
aS':+1: '
p4124
asg14
S'artem-zinnatullin:blocking-to-future-better-error-handling'
p4125
sbsI3362
(iPull
Pull
p4126
(dp4127
g3
S'Compiler, VM, JIT and IDE will be happier :)'
p4128
sg5
S'fix synchronization on non-final field in bufferuntilsubscriber'
p4129
sg7
(lp4130
S'Enhancement'
p4131
asg10
I3362
sg11
(lp4132
S':+1:'
p4133
aS':+1: I was thinking to add `final` but forgot it.'
p4134
aS'Great, thanks!'
p4135
asg14
S'artem-zinnatullin:fix-synchronization-on-non-final-field-in-BufferUntilSubscriber'
p4136
sbsI3363
(iPull
Pull
p4137
(dp4138
g3
S'Fewer methods \xe2\x80\x94 happier Android Developers :)'
p4139
sg5
S'remove unused private method from cachedobservable and make "state" final'
p4140
sg7
(lp4141
S'Enhancement'
p4142
asg10
I3363
sg11
(lp4143
S':+1:'
p4144
aS':+1: '
p4145
asg14
S'artem-zinnatullin:little-improvements-for-CachedObservable'
p4146
sbsI3364
(iPull
Pull
p4147
(dp4148
g3
S'Looks like non-volatile `chosen` may cause concurrency problems in this operator, @akarnokd PTAL'
p4149
sg5
S'possible multithreading bug fix in onsubscribeamb'
p4150
sg7
(lp4151
S'Question'
p4152
asg10
I3364
sg11
(lp4153
S"`volatile` keyword not required because of the [Observable contract](http://reactivex.io/documentation/contract.html):\r\n\r\n>Observables must issue notifications to observers serially (not in parallel). They may issue these notifications from different threads, but there must be a formal happens-before relationship between the notifications.\r\n\r\nThe guarantee of a happens-before relationship between emissions means you won't get into synchronization problems with this non-final field.\r\n"
p4154
aS'No need for volatile because `chosen` is sequence-local and is changed to true after reading a volatile in isSelected.\r\n\r\n:-1: '
p4155
aS'ok, agreed, closing :)'
p4156
asg14
S'artem-zinnatullin:possible-multithreading-bug-fix-in-OnSubscribeAmb'
p4157
sbsI3365
(iPull
Pull
p4158
(dp4159
g3
g57
sg5
S'make field final and remove unnecessary unboxing in onsubscriberedo.retrywithpredicate'
p4160
sg7
(lp4161
S'Enhancement'
p4162
asg10
I3365
sg11
(lp4163
S':+1: '
p4164
asg14
S'artem-zinnatullin:code-cleanup-in-OnSubscribeRedo.RetryWithPredicate'
p4165
sbsI3366
(iPull
Pull
p4166
(dp4167
g3
S'Nbp prefixed Observable types added. The core operators throw UnsupportedOperationException for now, overloads delegating to them did not change.'
p4168
sg5
S'2.x: added placeholder operators to nbpobservable + special observables'
p4169
sg7
(lp4170
S'Enhancement'
p4171
asg10
I3366
sg11
(lp4172
S"I'll repost this with a full PR of other Nbp changes."
p4173
asg14
S'akarnokd:NbpObservablePlaceholders2x'
p4174
sbsI3369
(iPull
Pull
p4175
(dp4176
g3
S"Believe I'm removing some unnecessary unboxing calls, but please correct me if I'm wrong."
p4177
sg5
S'lint fixes for unnecessary unboxing'
p4178
sg7
(lp4179
S'Enhancement'
p4180
asg10
I3369
sg11
(lp4181
S'See the comment, otherwise :+1:.'
p4182
aS'+1 for @akarnokd comment, otherwise :+1: '
p4183
aS'@akarnokd @stevegury used ternaries in-place of `Long.compareTo` for Java 6 support. Thanks!'
p4184
aS':+1: '
p4185
aS':+1:'
p4186
asg14
S'KevinTCoughlin:remove-unnecessary-unboxing'
p4187
sbsI3370
(iPull
Pull
p4188
(dp4189
g3
g57
sg5
S'remove unused field updater from subjectsubscriptionmanager'
p4190
sg7
(lp4191
S'Enhancement'
p4192
asg10
I3370
sg11
(lp4193
S':+1:'
p4194
aS':+1: '
p4195
asg14
S'artem-zinnatullin:remove-unused-field-updater-from-SubjectSubscriptionManager'
p4196
sbsI3371
(iPull
Pull
p4197
(dp4198
g3
S'+ non-backpressured subjects.'
p4199
sg5
S'2.x: non-backpressure nbpobservable all relevant operators + tests.'
p4200
sg7
(lp4201
S'Enhancement'
p4202
asg10
I3371
sg11
(lp4203
S'Thanks. Will merge and review as part of the branch over time. '
p4204
aS"I have also code for `Single` in #3358. I've rebased it and fixed up NbpObservable with the proper method name (`onError` instead of `onFailure`)."
p4205
asg14
S'akarnokd:NbpObservableOps2x'
p4206
sbsI3372
(iPull
Pull
p4207
(dp4208
g3
S"`Observable.empty().collect(stateFactory, accumulator)` should return the result of `stateFactory.call()` but throws an exception.\r\n\r\nI've added a unit test for this and removed an irrelevant reference to a discussion on `reduce`."
p4209
sg5
S'observable.empty().collect() should not throw an exception'
p4210
sg7
(lp4211
sg10
I3372
sg11
(lp4212
S'ah woops, did not throw, closing.'
p4213
asg14
S'davidmoten:collect-bug'
p4214
sbsI3374
(iPull
Pull
p4215
(dp4216
g3
S"`Exceptions.throwIfFatal()` used in almost all RxJava operators.\r\n\r\nBasically, in this PR I've just divided `throwable` into 3 groups: `RuntimeException`, `Error` and `Exception` (we don't need to check them).\r\n\r\nWith this PR `Exceptions.throwIfFatal()` becomes ~7% faster than current implementation in case of non-fatal exceptions (because if it's fatal \xe2\x80\x94 app will be crashed :smiley_cat:) on the Oracle JRE 1.8.0_45.\r\n\r\nI guess, on Android it will be even more faster! (I am not sure in quality of our JITs/VMs).\r\n\r\nI've checked the bytecode after compilation in hope that javac will optimize `Exceptions.throwIfFatal()` into same construction, but it does not perform any optimizations over this method at compile time, so the only hope is JIT and even after JIT, optimized version slightly faster (~7%).\r\n\r\nResults of the benchmarks:\r\n\r\n```\r\nOPTIMIZED VERSION:\r\n\r\nBenchmark                                                               Mode   Samples        Score  Score error    Units\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalCheckedException     avgt         5        2.569        0.389    ns/op\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalError                avgt         5        2.332        0.030    ns/op\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalRuntimeException     avgt         5        2.511        0.037    ns/op\r\n\r\nBenchmark                                                               Mode   Samples        Score  Score error    Units\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalCheckedException    thrpt         5 395071210.861  1644491.739    ops/s\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalError               thrpt         5 429656328.864  3230560.292    ops/s\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalRuntimeException    thrpt         5 398472020.961  3961447.943    ops/s\r\n\r\nOLD VERSION:\r\n\r\nBenchmark                                                               Mode   Samples        Score  Score error    Units\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalCheckedException     avgt         5        2.812        0.954    ns/op\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalError                avgt         5        2.338        0.019    ns/op\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalRuntimeException     avgt         5        2.771        0.064    ns/op\r\n\r\nBenchmark                                                               Mode   Samples        Score  Score error    Units\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalCheckedException    thrpt         5 370211340.236  9093081.248    ops/s\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalError               thrpt         5 427943417.424  6168313.153    ops/s\r\nr.e.ExceptionsThrowIfFatalPerf.throwIfFatalNonFatalRuntimeException    thrpt         5 368255154.316  4520997.005    ops/s\r\n```"
p4217
sg5
S'optimize exceptions.throwiffatal()'
p4218
sg7
(lp4219
sg10
I3374
sg11
(lp4220
S"The path for `OnErrorNotImplementedException` or `OnErrorFailedException` will be slower because they are checked for being a `RuntimeException` first. If it's a `RuntimeException` and not one of those then it will be faster because checks against `Error` types will not occur. I think this contribution is probably ok but some estimate of the most commonly used paths through this code should probably be made. In my opinion the path taken by an `Error` will not in general be taken anywhere near as frequently as the path by a `RuntimeException` so the optimization should favour the `RuntimeException` path. The question remains then what `RuntimeException`s are most likely to pass through? I'm assuming `Exception`s won't be travelling by this path very often because I can't think where in our operators we might be throwing checked exceptions (someone can enlighten me of course)."
p4221
aS"Your benchmark results are within the error margin to each other so I'd not consider this as a clear-cut improvement. Throwing exceptions is so expensive that a simple `instanceof` check is overshadowed. And besides, optimizing for the exception path is questionable because you are not delivering the exceptions as part of the main business logic."
p4222
aS'I agree with @akarnokd here, the gain is not clear enough to justify the logic rewrite.'
p4223
aS'Okay, I agree with all points.\r\n\r\nChecked some amount of libraries with RxJava support. Only small amount of them use `Exceptions.throwIfFatal()` in their implementations of `OnSubscribe`, so the case of passing checked `Exception` into the `throwIfFatal()` is pretty rare.\r\n\r\nAlso, as said in comments, exceptions are not / should not frequent cases of the application lifecycle, so the performance of this method does not really matter.\r\n\r\nThanks for the comments!  \r\n'
p4224
asg14
S'artem-zinnatullin:optimize-throw-if-fatal'
p4225
sbsI3376
(iPull
Pull
p4226
(dp4227
g3
S'This benchmark compares the overhead of backpressured range, non-backpressured range, streamed range and parallel-streamed range. Run on i7 4770K, Windows 7 x64, Java 1.8u60.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10107747/75d7c094-63bd-11e5-9e6d-fd3afd50b552.png)\r\n'
p4228
sg5
S'2.x: perf comparing observable, nbpobservable, stream and parallelstream'
p4229
sg7
(lp4230
S'Performance'
p4231
asg10
I3376
sg11
(lp4232
S':+1: '
p4233
asg14
S'akarnokd:RxVsStreamPerf2x'
p4234
sbsI3377
(iPull
Pull
p4235
(dp4236
g3
S"Discovered by @mgp in #3346 and using his supplied fix. I've already\r\napplied it to NbpObservable's take this Monday so all that's left was\r\nthe unit test."
p4237
sg5
S'2.x: fix take() reentrancy problem.'
p4238
sg7
(lp4239
S'Bug'
p4240
asg10
I3377
sg11
(lp4241
S"Oh I see why it's a reentrancy problem, this is tricky indeed.\r\n\r\n:+1: "
p4242
asg14
S'akarnokd:TakeReentrancyFix2x'
p4243
sbsI3380
(iPull
Pull
p4244
(dp4245
g3
S'A terminal condition is now clearing the latest array which should help release its contents earlier in case a reference is kept to the class.'
p4246
sg5
S'2.x: combinelatest removed leftover debug field + better cleanup'
p4247
sg7
(lp4248
S'Bug'
p4249
asg10
I3380
sg11
(lp4250
S'LGTM'
p4251
asg14
S'akarnokd:CombineLatestCleanup2x'
p4252
sbsI3381
(iPull
Pull
p4253
(dp4254
g3
S'Discovered while the test `NbpOperatorConcatTest.testIssue2890NoStackoverflow` hung on Travis.\r\n\r\nWhat happened is that the reference to the child became visible before the call to its `onSubscribe` method so a concurrent source emitting at the exact same time could already see the "unstarted" child. The PR fixes this in both `NbpUnicastSubject` and `UnicastSubject` by changing the order of calls. The rest of the subjects behave correctly (call `onSubscribe` first, make child visible second).\r\n\r\nIn addition, `UnicastSubject` now calls `drain()` because when the `onSubscribe` calls `request` and `drain`, the child is not visible and nothing gets replayed. Once both `onSubscribe` call returns and the child is becomes visible, a call to `drain` again will now correctly replay all available contents that were requested.'
p4255
sg5
S'2.x: unicastsubject fix for the child becoming visible before onsubscribe is called.'
p4256
sg7
(lp4257
S'Bug'
p4258
asg10
I3381
sg11
(lp4259
S'Closing, will be included in the complete backport PR.'
p4260
asg14
S'akarnokd:UnicastSubjectFix2x'
p4261
sbsI3382
(iPull
Pull
p4262
(dp4263
g3
S'Discovered while debugging #3381. Confirmed with JCTools in https://github.com/JCTools/JCTools/pull/80'
p4264
sg5
S'2.x: fix spsclinkedarrayqueue leaves 1 slot null just before growing'
p4265
sg7
(lp4266
S'Bug'
p4267
asg10
I3382
sg11
(lp4268
S':+1: '
p4269
asg14
S'akarnokd:SpscLinkedArrayQueueCapacityUse2x'
p4270
sbsI3383
(iPull
Pull
p4271
(dp4272
g3
S'sigificent -> significant\r\nalreay -> already'
p4273
sg5
S'fix typo in a comment inside observable.subscribe'
p4274
sg7
(lp4275
sg10
I3383
sg11
(lp4276
S':+1:'
p4277
asg14
S'ReactiveX:stevegury/fix-comment-typo'
p4278
sbsI3384
(iPull
Pull
p4279
(dp4280
g3
S"Fixes the bug reported in  #3346. (I've done this for 1.x as well since the original poster disappeared). "
p4281
sg5
S'fix for take() reentrancy bug.'
p4282
sg7
(lp4283
S'Bug'
p4284
asg10
I3384
sg11
(lp4285
S':+1: '
p4286
asg14
S'akarnokd:TakeReentrancyFix1x'
p4287
sbsI3386
(iPull
Pull
p4288
(dp4289
g3
S'This is one of the many 1.1.0 promotion related pull requests. There is a split decision on the operator `Observable.doOnRequest(Action1)`. A majority of core committers have voted to promote this operator from `@Beta` to public. There is currently a minority is support for removing the convenience method on `Observable` or demoting it to `@Experimental`. Instead users would lift the underlying operator `obs.lift(new OperatorDoOnRequest<T>(onRequest))`. In this pull request I have taken the more conservative approach and expect that comments will guide our decisions. \r\n\r\n### Rationale:\r\n\r\n - the `doOnRequest` use case is to debug back-pressure use cases and as such should not pollute the public operator namespace. \r\n - the existence of this operator may mislead and confuse users. it could be misinterpreted and abused to alter or reset over arching state when the back-pressure mechanics should be more or less self contained (with the exception of `AsyncOnSubscribe`).\r\n\r\nIf my understanding is incorrect and there is a valid use case aside from debugging then please comment. '
p4290
sg5
S'1.1.0 - changed javadoc for observable.doonrequest(action1)'
p4291
sg7
(lp4292
S'Discussion'
p4293
asg10
I3386
sg11
(lp4294
S"I'd like to see this method part of the public api not because of a\ndebugging requirement but rather for unit testing. I think that's enough.\n\nOn Wed, 30 Sep 2015 03:37 Aaron Tull <notifications@github.com> wrote:\n\n> This is one of the many 1.1.0 promotion related pull requests. There is a\n> split decision on the operator Observable.doOnRequest(Action1). A\n> majority of core committers have voted to promote this operator from @Beta\n> to public. There is currently a minority is support for removing the\n> convenience method on Observable or demoting it to @Experimental. Instead\n> users would lift the underlying operator obs.lift(new\n> OperatorDoOnRequest<T>(onRequest)). In this pull request I have taken the\n> more conservative approach and expect that comments will guide our\n> decisions.\n> Rationale:\n>\n>    - the doOnRequest use case is to debug back-pressure use cases and as\n>    such should not pollute the public operator namespace.\n>    - the existence of this operator may mislead and confuse users. it\n>    could be misinterpreted and abused to alter or reset over arching state\n>    when the back-pressure mechanics should be more or less self contained\n>    (with the exception of AsyncOnSubscribe).\n>\n> If my understanding is incorrect and there is a valid use case aside from\n> debugging then please comment.\n> ------------------------------\n> You can view, comment on, or merge this pull request online at:\n>\n>   https://github.com/ReactiveX/RxJava/pull/3386\n> Commit Summary\n>\n>    - Changed Observable.doOnRequest(Action1) to @Experimental from @Beta\n>\n> File Changes\n>\n>    - *M* src/main/java/rx/Observable.java\n>    <https://github.com/ReactiveX/RxJava/pull/3386/files#diff-0> (2)\n>\n> Patch Links:\n>\n>    - https://github.com/ReactiveX/RxJava/pull/3386.patch\n>    - https://github.com/ReactiveX/RxJava/pull/3386.diff\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3386>.\n>\n"
p4295
aS'Can we put something like "Operator was created for testing/debugging RxJava itself, using it in the production code is not very great idea" in the javadoc of this operator?'
p4296
aS"@davidmoten could this be solved by lifting in the operator? I don't think that we should polute theObservable instance methods for a convenience operator that's intended to be used by unit tests. "
p4297
aS"This is a useful operator to diagnose operator request behavior and should be part of the public API in my opinion. Similar to how `TestScheduler` and `TestSubscriber` isn't useful in production but very useful when testing code. Pointing the customers to the internal `OperatorDoOnRequest` class for manual lifting isn't a good alternative because of forcing the customers to rely on internal behavior. "
p4298
aS"I'd recommend against having public API exposing an `Operator` but would use a `Transformer` instead. I see moving this out of the `Observable` class as an unnecessary inconvenience. I haven't come across anyone doing weird stuff using `doOnRequest`. Have you @stealthcode? Can we address this with clearer documentation on the operator? "
p4299
aS"> Pointing the customers to the internal OperatorDoOnRequest class for manual lifting isn't a good alternative because of forcing the customers to rely on internal behavior.\r\n\r\nThe point is that `request(n)` should remain an internal only affair and if you need to know about requests that you'll probably also need to know how to lift in operators."
p4300
aS"@davidmoten I don't see how `o.lift(new OperatorDoOnRequest(System.out::println))` is different than `o.compose(new TransformerDoOnRequest(System.out::println))`."
p4301
aS'This operator is a great tool for diagnosing errors in custom operators, which we support through lift and Operator classes.'
p4302
aS"@abersnaze Yeah I should have elaborated. Either could be used.\r\n\r\nIn general I was thinking of utility from #2865 which doesn't exist in RxJava but could.  I can contribute. Until this utility exists I wouldn't suggest anyone outside of RxJava builds a public API exposing custom Operators because they will have trouble migrating safely if they decide to chuck their custom Operator and switch to composing existing Operators (I had this issue with rxjava-jdbc). This advice really doesn't apply for core RxJava because as soon as the need exists someone with the right skills would create it with oversight. So yeah ignore that comment of mine, it's irrelevant to this discussion!"
p4303
aS"@akarnokd We agree that it's useful and we are not proposing to remove the `OperatorDoOnRequest`. But its existence as an instance method on `Observable` is questionable. It is very useful for RxJava developers but confusing for application developers. Do you agree with this?"
p4304
aS"I personally never heard anybody getting confused by `doOnRequest` so I can't agree or disagree with your statement."
p4305
aS'So, what is your objection?'
p4306
aS'My objection is that by demoting this to experimental, we are essentially scheduling it for deletion, despite all of its usefulness.'
p4307
aS"It is not less useful as an operator that can be lifted. It's only use case is for developers who know how to lift operators. "
p4308
aS"I'd like to understand the source of any confusion with this method. Could you invite someone who is/was confused into this discussion?"
p4309
aS">It is not less useful as an operator that can be lifted. It's only use case is for developers who know how to lift operators.\r\n\r\nThat's all very well but we lose discoverability. For anyone discovering the api no matter how advanced their abilities and intent I think it's a bad idea to have this only as an Operator to be lifted that only we know about and some corner bit of documentation describes."
p4310
aS'I prefer keeping it and like using it. I use it for debugging but also triggering side-effects onRequest, rather than onSubscribe. '
p4311
aS"Thanks @benjchristensen that's the first non-test/debug use case mentioned thus far. \r\n\r\nWe currently have 2 for and 2 against (core committer votes). "
p4312
aS"I don't have a strong opinion here; I think both points of view are valid.\r\n`doOnRequest` can be confusing for a new user and it can be interpreted as `doOnNext` by beginners. And in general, the more methods you add to a class, the harder it is to understand it.\r\nOn the other hand, having the possibility to hook easily (by just auto-completing `obs.doOnRequest(...`) a function in the request-n path is pretty handy.\r\n\r\nSo the question here is: Do we want to make the library marginally more grokkable at the expense of the power-users?\r\n\r\nMaybe the right thing to do would be to leave it as `@beta`?"
p4313
aS'What do you think of adding the following to the javadocs of the `Observable.doOnRequest(Action1)` something to the effect of...\r\n\r\n```\r\nThis operator is for tracing the internal operator back-pressure request patterns \r\nand generally intended for debugging. \r\n```\r\n\r\nThis would give users some clarity and scare off all but the intrepid and curious. '
p4314
aS"I'm okay with adding that kind of Javadoc. "
p4315
aS'Javadoc additions sound fine to me too.'
p4316
aS'@stealthcode that would be a good compromise.'
p4317
aS'To be clear, I am proposing that the only change to this operator (in 1.1.0) is only a javadoc change and we keep the annotation as is at `@Beta`. '
p4318
aS'Looks like we have a consensus merging this one and closing #3405'
p4319
asg14
S'stealthcode:demote-do-on-request'
p4320
sbsI3388
(iPull
Pull
p4321
(dp4322
g3
S'Based on votes, this PR removes the common Subject state peeking methods from Subject and removes irrelevant methods from each Subject variant and promotes the rest to `@Beta` state.\r\n\r\nDue to the removals, I had to rearrange tests as well.'
p4323
sg5
S'1.1.0: subject state methods beta/remove'
p4324
sg7
(lp4325
S'Discussion'
p4326
asg10
I3388
sg11
(lp4327
S"For the methods removed can you open a PR that marks them as deprecated? We can merge immediately for 1.0.15. It'll give anyone using them one release to migrate off of them."
p4328
aS'Done: #3407.\r\n\r\nNote, however, that it is very likely this PR will need rebasing when #3407 is merged.'
p4329
aS"I've rebased this onto the master but the versions are so tangled I don't know how to squash this into a single commit."
p4330
aS"If you've merged something into this branch \xe2\x80\x94 easiest way to squash this without dealing with possible conflicts is to do:\r\n\r\n1. `git diff > patch.diff` between this branch and target branch\r\n2. Then drop local branch (don't forget to make a copy via `git checkout -b`) \r\n3. Create branch with same name from current state of target branch\r\n4. Use `git apply patch.diff` and commit \r\n5. Use push -f to rewrite branch on GitHub. \r\n\r\n(though squash may pass normally here, I am on mobile and can not check now). Also there is a way to have local branch with different name than on a remote, but I forgot it, with it you can skip steps 2 and 3."
p4331
aS"I'm using Eclipse which has a few git bugs in it right now. I'd better leave this to @abersnaze as he seems to be proficient in squashing PRs."
p4332
aS"I've rebased this in a branch https://github.com/stealthcode/RxJava/tree/SubjectPeekRemoves\r\n\r\n@abersnaze and I would like to collapse down all of the 1.1.0 pull requests into a single commit and a single pull request. Any objections? I'll start on the rebasing."
p4333
aS'@stealthcode Great. :+1:'
p4334
asg14
S'akarnokd:SubjectPeekRemoves'
p4335
sbsI3389
(iPull
Pull
p4336
(dp4337
g3
S'Based on votes, the `AbstractOnSubscribe` is to be removed.'
p4338
sg5
S'1.1.0: removal of abstractonsubscribe'
p4339
sg7
(lp4340
S'Discussion'
p4341
asg10
I3389
sg11
(lp4342
S"Hi, do you have a link to the vote / discussion about this ? I actually didn't see it was experimental and have some code based on it i'd like to adapt."
p4343
aS"The `SyncOnSubscribe` replaced the `AbstractOnSubscribe`. Regarding it's usage, it is similar to it's predecessor with slight differences. There are overloads for creating a stateless, a mutable state, and an immutable/functional style onSubscribe (depending on your use case). Please let us know if the existing javadocs aren't sufficient or could be improved. "
p4344
asg14
S'akarnokd:AbstractOnSubscribeRemove'
p4345
sbsI3390
(iPull
Pull
p4346
(dp4347
g3
S'It was easy to get `onBackpressureBlock` usage wrong with `subscribeOn`.'
p4348
sg5
S'1.1.0: onbackpressureblock remove'
p4349
sg7
(lp4350
S'Discussion'
p4351
asg10
I3390
sg11
(lp4352
sg14
S'akarnokd:OnBackpressureBlockRemove'
p4353
sbsI3391
(iPull
Pull
p4354
(dp4355
g3
S'Based on votes, `autoConnect` can step up one level.'
p4356
sg5
S'1.1.0: promote connectableobservable.autoconnect to beta'
p4357
sg7
(lp4358
S'Discussion'
p4359
asg10
I3391
sg11
(lp4360
sg14
S'akarnokd:AutoConnectPromote'
p4361
sbsI3392
(iPull
Pull
p4362
(dp4363
g3
S'Based on votes, the predicate version of `takeUntil` should be promoted to be public.'
p4364
sg5
S'1.1.0: takeuntil with predicate promote to public'
p4365
sg7
(lp4366
S'Discussion'
p4367
asg10
I3392
sg11
(lp4368
sg14
S'akarnokd:TakeUntilPredicatePromote'
p4369
sbsI3393
(iPull
Pull
p4370
(dp4371
g3
S"Based on votes, the experimental TestSubscriber methods can now be part\r\nof the public API.\r\n\r\nIn addition, I've added the missing javadocs for the create() factory\r\nmethods and one of the constructors."
p4372
sg5
S'1.1.0: promote testsubscriber methods to public'
p4373
sg7
(lp4374
S'Discussion'
p4375
asg10
I3393
sg11
(lp4376
sg14
S'akarnokd:TestSubscriberPromote'
p4377
sbsI3394
(iPull
Pull
p4378
(dp4379
g3
S'Based on votes, 2 maxConcurrency overload of merge can now be part of\r\nthe public API.'
p4380
sg5
S'1.1.0: promote 2 merge overloads to public'
p4381
sg7
(lp4382
S'Discussion'
p4383
asg10
I3394
sg11
(lp4384
sg14
S'akarnokd:MergeFlatMapPromotion'
p4385
sbsI3395
(iPull
Pull
p4386
(dp4387
g3
S'Based on votes, the onBackpressureBuffer overloads of capacity and\r\ncapacity + overflow action can now be part of the public API.'
p4388
sg5
S'1.1.0: onbackpressurebuffer overloads promotion to public api'
p4389
sg7
(lp4390
S'Discussion'
p4391
asg10
I3395
sg11
(lp4392
sg14
S'akarnokd:OnBackpressureBufferPromote'
p4393
sbsI3396
(iPull
Pull
p4394
(dp4395
g3
S'Based on unanimous votes, the callback version of onBackpressureDrop can\r\nnow be part of the public API.'
p4396
sg5
S'1.1.0: onbackpressuredrop with action promotion to public api'
p4397
sg7
(lp4398
S'Discussion'
p4399
asg10
I3396
sg11
(lp4400
sg14
S'akarnokd:OnBackpressureDropPromote'
p4401
sbsI3397
(iPull
Pull
p4402
(dp4403
g3
S'Based on votes, onBackpressureLatest can become part of the public API.'
p4404
sg5
S'1.1.0: onbackpressurelatest promotion to public api'
p4405
sg7
(lp4406
S'Discussion'
p4407
asg10
I3397
sg11
(lp4408
sg14
S'akarnokd:OnBackpressureLatestPromotion'
p4409
sbsI3398
(iPull
Pull
p4410
(dp4411
g3
S"Based on votes, the BackpressureDrainManager class can drop the\r\nexperimental tag, but since it is an internal class, this change doesn't\r\naffect the public API. Not sure why I marked the class as experimental\r\nback then."
p4412
sg5
S'1.1.0: backpressuredrainmanager promotion to public internal api?!'
p4413
sg7
(lp4414
S'Discussion'
p4415
asg10
I3398
sg11
(lp4416
sg14
S'akarnokd:BackpressureDrainManagerPromote'
p4417
sbsI3399
(iPull
Pull
p4418
(dp4419
g3
S'Based on unanimous votes, the switchIfEmpty overload with Observable can\r\nnow be part of the public API.'
p4420
sg5
S'1.1.0: promote switchifempty with observable to the public api'
p4421
sg7
(lp4422
S'Discussion'
p4423
asg10
I3399
sg11
(lp4424
sg14
S'akarnokd:SwitchIfEmptyPromote'
p4425
sbsI3400
(iPull
Pull
p4426
(dp4427
g3
S'Based on votes, the method Exceptions.throwIfAny can now be part of the\r\npublic API.'
p4428
sg5
S'1.1.0: exceptions.throwifany promotion to public api'
p4429
sg7
(lp4430
S'Discussion'
p4431
asg10
I3400
sg11
(lp4432
sg14
S'akarnokd:ExceptionsThrowIfAnyPromotion'
p4433
sbsI3401
(iPull
Pull
p4434
(dp4435
g3
S'Based on votes, Single, SingleSubscriber and Observable.toSingle can now\r\nbe promoted to Beta state.'
p4436
sg5
S'1.1.0: promote single + singlesubscriber to beta'
p4437
sg7
(lp4438
S'Discussion'
p4439
asg10
I3401
sg11
(lp4440
S"I've been a really big fan of Single in our codebase. It helps document the API, reason about our code base, and helps us eliminate cases where people don't properly plan for multiple items when terminating streams.\r\n\r\nTo date we've not hit any corner cases that I am aware of, but we've not been using it too heavily yet.\r\n\r\n+1"
p4441
aS'I love Single it makes the API very understandable.'
p4442
aS'will be so natural in Retrofit 2.0\r\nbut also starting to use it in our codebase as well'
p4443
aS"I'm using it since the first public `@Experimental` release and it makes Interfaces more understandable. My current `Observable`/`Single` ratio is 30/70\r\n\r\nI hope all operators known from Observable will be promoted to public for Single such as `defer` and `lift`. Doing the following workaround seems unnecessary:\r\n\r\n```java\r\npublic Single doSomething() {\r\n    return Single.just(..)\r\n        .map(..)\r\n        .toObservable() // to Observable because defer is private for Single\r\n        .defer(...)\r\n        .toSingle(); // back to Single because API says so\r\n}\r\n```"
p4444
aS"@passsy I am planning to use `Single` in production for the same reason of clearer contract of the API (though I [see some cons in this too](https://www.reddit.com/r/androiddev/comments/3nws5l/do_you_use_rxsingle/)), so I'll try to bring most useful operators (`defer` in the list) to the `Single` during this week, and I hope Rx team will merge and release them as part of 1.0.15."
p4445
asg14
S'akarnokd:SinglePromote'
p4446
sbsI3402
(iPull
Pull
p4447
(dp4448
g3
S'Based on votes, RxJavaErrorHandler.render and\r\nRxJavaErrorHandler.handleOnNextValueRendering can now be promoted to\r\nBeta state.'
p4449
sg5
S'1.1.0: promote 2 rxjavaerrorhandler methods to beta'
p4450
sg7
(lp4451
S'Discussion'
p4452
asg10
I3402
sg11
(lp4453
S'The test in `BackpressureTests.testMergeAsync` failed. The test is non-deterministic because a small hiccup in one of the threads may produce way more values than the assertion expects.'
p4454
asg14
S'akarnokd:ErrorHandlerPromote'
p4455
sbsI3403
(iPull
Pull
p4456
(dp4457
g3
S'Based on votes, Subscribers.wrap can now be part of the public API.'
p4458
sg5
S'1.1.0: promote subscribers.wrap to be part of the public api'
p4459
sg7
(lp4460
S'Discussion'
p4461
asg10
I3403
sg11
(lp4462
sg14
S'akarnokd:SubscribersWrapPromote'
p4463
sbsI3404
(iPull
Pull
p4464
(dp4465
g3
S'Based on unanimous votes, Subscriptions.unsubscribed can now be part of\r\nthe public API.'
p4466
sg5
S'1.1.0: promote subscriptions.unsubscribed to be part of the public api'
p4467
sg7
(lp4468
S'Discussion'
p4469
asg10
I3404
sg11
(lp4470
sg14
S'akarnokd:SubscriptionsUnsubscribedPromote'
p4471
sbsI3405
(iPull
Pull
p4472
(dp4473
g3
S'Based on the majority of votes, doOnRequest can now be part of the\r\npublic API.'
p4474
sg5
S'1.1.0: promote doonrequest to be part of the public api'
p4475
sg7
(lp4476
S'Discussion'
p4477
asg10
I3405
sg11
(lp4478
S'This issue is also being discussed in #3386.'
p4479
asg14
S'akarnokd:DoOnRequestPromote'
p4480
sbsI3407
(iPull
Pull
p4481
(dp4482
g3
S'This should give users one release to prepare for the class structure\r\nchanges.'
p4483
sg5
S'1.0.15. beta/deprecation of subject state peeking methods.'
p4484
sg7
(lp4485
S'Discussion'
p4486
asg10
I3407
sg11
(lp4487
S'replaced by #3415'
p4488
asg14
S'akarnokd:SubjectDeprecation'
p4489
sbsI3408
(iPull
Pull
p4490
(dp4491
g3
S"This came up in a [Stackoverflow](http://stackoverflow.com/questions/32889008/do-operators-instead-of-a-whole-subscriber) answer. If the `doOnError`'s callback or the `doOnEach`'s `onError` method throws, any non-fatal exception replaced the original error which got lost. This PR will wrap them both into a `CompositeException`.\r\n\r\n2.x note: since Java 8 supports `addSuppressed` all callbacks in this situation either attach to the original exception or the original exception is attached to the callback's exception."
p4492
sg5
S'dooneach: report both original exception and callback exception.'
p4493
sg7
(lp4494
S'Bug'
p4495
asg10
I3408
sg11
(lp4496
S':+1: '
p4497
aS'Is there a way to avoid this wrapping?\r\nI want to throw a specific exception in my `doOnError`, which then gets handled in a certain way.'
p4498
aS'No, but you can unwrap via onErrorResumeNext:\r\n\r\n```java\r\nsource.doOnError(e -> { throw new RuntimeException(); })\r\n.onErrorResumeNext(e -> {\r\n    if (e instanceof CompositeException) {\r\n       return Observable.error(((CompositeException)e).getExceptions().get(1));\r\n    }\r\n    return Observable.error(e);\r\n});\r\n```'
p4499
aS'@akarnokd -- ah, thanks!'
p4500
asg14
S'akarnokd:DoOnErrorReportBoth'
p4501
sbsI3410
(iPull
Pull
p4502
(dp4503
g3
S"This PR adds over 900 new null checks. Null checks are essential because RS doesn't allow null values and sometimes a missed null check may lead to operator hangs as well."
p4504
sg5
S'2.x: null safety checks and fixes'
p4505
sg7
(lp4506
S'Bug'
p4507
aS'Test'
p4508
asg10
I3410
sg11
(lp4509
S':+1: this will also give much nicer stack traces!\r\n\r\nHave you considered making them even nicer by using the [overload with a String](http://docs.oracle.com/javase/8/docs/api/java/util/Objects.html#requireNonNull-T-java.lang.String-)? E.g. in `fromFuture`:\r\n\r\n```java\r\n        Objects.requireNonNull(future, "future");\r\n        Objects.requireNonNull(unit, "unit");\r\n```'
p4510
aS'Sounds good. Would you like to post a PR based on this PR?'
p4511
aS'Sure, here you go: https://github.com/akarnokd/RxJava/pull/3'
p4512
aS'Thanks @robinst. Merged in and squashed commits.'
p4513
aS'Closing, will be included in the complete backport PR.'
p4514
asg14
S'akarnokd:NullSafetyChecks2x'
p4515
sbsI3413
(iPull
Pull
p4516
(dp4517
g3
S'The subject tries to avoid the request reduction via addAndGet by re-reading the requested amount and continuing the loop as long as possible. The bug was in ignoring the total emission amount and thus a single request(1) from the child ended up replaying all values.'
p4518
sg5
S'2.x: fix to replaysubject not properly accounting for emitted events.'
p4519
sg7
(lp4520
S'Bug'
p4521
asg10
I3413
sg11
(lp4522
S'Closing, will be included in the complete backport PR.'
p4523
asg14
S'akarnokd:ReplaySubjectBackpressureFix'
p4524
sbsI3414
(iPull
Pull
p4525
(dp4526
g3
S'Discovered while reviewing the operator for my blog post.'
p4527
sg5
S'2.x: fix operator amb eager cancellation and request validation'
p4528
sg7
(lp4529
S'Bug'
p4530
asg10
I3414
sg11
(lp4531
S'Closing, will be included in the complete backport PR.'
p4532
asg14
S'akarnokd:AmbWinnerCancelsOthers2x'
p4533
sbsI3415
(iPull
Pull
p4534
(dp4535
g3
S'Squashed commits:\r\n[c6e43fc] 1.0.15. Beta/Deprecation of Subject state peeking methods.\r\n\r\nThis should give users one release to prepare for the class structure\r\nchanges.'
p4536
sg5
S'deprecate the experimental/beta method that will be deleted until 1.1.x'
p4537
sg7
(lp4538
sg10
I3415
sg11
(lp4539
S':+1: '
p4540
aS'to replace #3407'
p4541
asg14
S'abersnaze:SubjectDeprecation'
p4542
sbsI3416
(iPull
Pull
p4543
(dp4544
g3
S'Closes #3252.'
p4545
sg5
S'add single.toblocking()'
p4546
sg7
(lp4547
S'Enhancement'
p4548
asg10
I3416
sg11
(lp4549
S"Damn, just saw in the issue that @hyleung already implemented it in #3286.\r\n\r\nFeel free to close this PR. Though in my impl I've moved common code from `BlockingObservable` and `BlockingSingle` into `UtilityFunctions` and covered it with tests. Also, I've used `value()` instead of `get()`, `value()` looks more consistent with the `next()`, `first()`, etc in the `BlockingObservable`.\r\n\r\nI don't mind if @hyleung will reuse my code in his PR :)"
p4550
aS'> Damn, just saw in the issue that @hyleung already implemented it in #3286.\r\nYep.\r\n\r\n> Feel free to close this PR.\r\n\r\nThis looks cleaner although misses a `toFuture` method.'
p4551
aS'@hyleung could you review this PR and offer a resolution to the conflict between these two PRs.'
p4552
aS'@hyleung you want me to finish this PR or you would like to improve your PR? :) I am okay with any option.'
p4553
aS"@artem-zinnatullin I'm happy to finish it off on my PR, unless folks feel that it's better to continue with this PR."
p4554
aS'@hyleung sure! Be ready for my comments on your PR then! :smile:'
p4555
asg14
S'artem-zinnatullin:single-to-blocking'
p4556
sbsI3417
(iPull
Pull
p4557
(dp4558
g3
S'Closes #3385.'
p4559
sg5
S'add single.doonsuccess()'
p4560
sg7
(lp4561
S'Enhancement'
p4562
asg10
I3417
sg11
(lp4563
S':+1:'
p4564
aS'@artem-zinnatullin rebase please.'
p4565
aS'@abersnaze rebased!'
p4566
asg14
S'artem-zinnatullin:single-do-on-success'
p4567
sbsI3418
(iPull
Pull
p4568
(dp4569
g3
S"Second part of #3154.\r\n\r\n@akarnokd I'd like to reuse `Observable.fromCallable()` but didn't find apropriate way to do it: `Observable.fromCallable().toSingle()` is not best option, if you have some thoughts on this \xe2\x80\x94 please share them."
p4570
sg5
S'add single.fromcallable()'
p4571
sg7
(lp4572
S'Enhancement'
p4573
asg10
I3418
sg11
(lp4574
S":+1: I'm not too keen on reusing but the most complicated operators for `Single`."
p4575
aS'@artem-zinnatullin rebase please.'
p4576
aS"@abersnaze rebased, I'll rebase one PR at a time, since they're all conflict with each other."
p4577
asg14
S'artem-zinnatullin:single-from-callable'
p4578
sbsI3419
(iPull
Pull
p4579
(dp4580
g3
g57
sg5
S'add single.doonerror()'
p4581
sg7
(lp4582
S'Enhancement'
p4583
asg10
I3419
sg11
(lp4584
S':+1:'
p4585
aS':+1: '
p4586
asg14
S'artem-zinnatullin:single-do-on-error'
p4587
sbsI3422
(iPull
Pull
p4588
(dp4589
g3
S'Slight change to make the distinction between `@Beta` and `@Experimental` explicit and meaningful.'
p4590
sg5
S'update readme.md'
p4591
sg7
(lp4592
S'Documentation'
p4593
asg10
I3422
sg11
(lp4594
S':+1:'
p4595
aS':+1: '
p4596
asg14
S'ReactiveX:annotation-rules'
p4597
sbsI3423
(iPull
Pull
p4598
(dp4599
g3
g57
sg5
S'renaming observable#x to observable#extend'
p4600
sg7
(lp4601
sg10
I3423
sg11
(lp4602
S':+1: '
p4603
aS"Correct me if I'm wrong but the merge policy requires two non-author likes, right?"
p4604
aS"I thought it was two committers and if the auth was a committer that opening the PR was an implicit vote.  I'll post some by laws so we can all agree on what the rules are."
p4605
aS'That was my understanding as well. I thought it was the releases that required more votes. '
p4606
aS'Oh, I see. Checking my PRs again...'
p4607
asg14
S'stealthcode:rename-extend'
p4608
sbsI3424
(iPull
Pull
p4609
(dp4610
g3
g57
sg5
S'added runnable interface to blockingobservable'
p4611
sg7
(lp4612
sg10
I3424
sg11
(lp4613
S'Why did you add that interface? The `run()` method was never intended to represent a Runnable BlockingObservable.'
p4614
aS'But I thought you added `run()` for discoverability. I felt that this PR was just the logical conclusion to adding that method. Can we pick between both or neither before we release 1.0.15?'
p4615
aS"If you have a `Runnable` class, that implies to the developer it has to be submitted to an `ExecutorService`. This isn't the case with `BlockingObservable` because it is meant to block in the current thread, mostly because of the side effects. Submitting it to an `Executor` and awaiting the future is pointless. You want the `BlockingObservable` *to run to completion* so you'll find the method `run()`."
p4616
aS'I believe having the `run()` method implies that `BlockingObservable` should be submittable to an `ExecutorService`.  The implementing of `Runnable` only makes it possible do to so in Java.\r\n[If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.](https://en.wikipedia.org/wiki/Duck_test)'
p4617
aS'In that case, the run() method should be removed.'
p4618
aS"I could see that users may wish to submit a blocking observable to an ExecutorService simply because the interface they have available takes a Runnable. I do not think it's pointless. But I would prefer for users to deliberately create a Runnable wrapper for executing subscribe and we delete the erroneous run method. "
p4619
aS"Both keeping it and removing it is fine with me. If this PR is to stay, I'd suggest adding `@Override` to runnable as well."
p4620
aS"I'm closing this PR. For 1.0.15 I'd rather delete it and avoid making a decision about how Runnable would interact with `BlockingObservable`"
p4621
asg14
S'stealthcode:blocking-runnable'
p4622
sbsI3426
(iPull
Pull
p4623
(dp4624
g3
S'The problem with GroupBy is that a request(1) from the main source may\r\nresult in a new group, a value for another group or value for the\r\nintended group. The latter two is handled by unicasting but the former\r\nwas not properly handled.'
p4625
sg5
S'2.x: fix groupby missingbackpressureexception due to main/group overflow'
p4626
sg7
(lp4627
S'Bug'
p4628
asg10
I3426
sg11
(lp4629
S"I've  changed the code a bit to handle another request pattern besides the fix for #3425 ."
p4630
aS"I've also fixed the subscriber of the group becoming visible before the Subscription is set (similar bug as in #3381)."
p4631
aS'Closing, will be included in the complete backport PR.'
p4632
asg14
S'akarnokd:GroupByOverrequestFix'
p4633
sbsI3428
(iPull
Pull
p4634
(dp4635
g3
S'This is a backport of the 2.x GroupBy operator which solves #3425.\r\n\r\nOne unit test in OperatorRetryTest had to be altered a bit. I believe\r\nthe original code relied on a GroupBy behavior which caused the bug in\r\n#3425.'
p4636
sg5
S'groupby backpressure fix'
p4637
sg7
(lp4638
S'Bug'
p4639
asg10
I3428
sg11
(lp4640
S'The following test starts breaking with this branch. It prints out 1 to 128 then stops and does not print anything else (apparently no progress is made). In branch 1.x this continues to print past 128. \r\n\r\n```java\r\nrange(1, RxRingBuffer.SIZE *4).repeat()\r\n    .groupBy((d) -> d)\r\n    .flatMap((go) ->\r\n        go.doOnNext(System.out::println)\r\n            .subscribeOn(Schedulers.io())\r\n    )\r\n    .subscribe();\r\n```\r\n'
p4641
aS'This is because the lack of horizontal unboundedness of flatMap and the bug in groupBy together made it work in 1.0.14. If I run this code with the 2.x fix and add 1024 as the max concurrency value, it prints lots of values indefinitely.'
p4642
aS"I've updated the comments."
p4643
aS':+1: '
p4644
asg14
S'akarnokd:GroupByBackpressureFix1x'
p4645
sbsI3429
(iPull
Pull
p4646
(dp4647
g3
g57
sg5
S'removed the alias blockingobservable#run'
p4648
sg7
(lp4649
sg10
I3429
sg11
(lp4650
S'You forgot to alter the tests depending on `run()`.'
p4651
aS':+1:'
p4652
aS'Thank you'
p4653
asg14
S'stealthcode:blocking-subscribe'
p4654
sbsI3430
(iPull
Pull
p4655
(dp4656
g3
S'As discussed in issue #3037, the primary use of these operators is to be applied to `Observable<Void>` so that they can be merged and concatenated with an Observable of a different type.\r\n\r\nBoth these operators raise an error if the source Observable emits any item.'
p4657
sg5
S'new operators: `concatemptywith` and `mergeemptywith`'
p4658
sg7
(lp4659
S'Enhancement'
p4660
asg10
I3430
sg11
(lp4661
S'This is a replacement for #3060 '
p4662
aS':+1:'
p4663
aS"I've been thinking about these operators and it feels odd they have to throw if the source is not empty. Regardless, do you think if it is possible to factor out this error behavior into a separate operator, let's say `none` and use `source.none().concatWith(other)` and `source.none().mergeWith(other)` instead? This would match the pattern with `single()` which throws if there are too few or too many elements in the source."
p4664
aS'The idea for these operators is to combine two streams of different types (`Void` and `T`). Since, you can not really combine two different types, it is categorized as an error, if it does so. Why do you think this is odd?\r\n\r\nWould `.none()` change the type of the stream? i.e. would it be like:\r\n\r\n```java\r\npublic <R> Observable<R> none();\r\n```'
p4665
aS"It could, although that might not help due to problems with Java type inference in various Java versions (and IDEs); I got surprised a few times. Certainly, I like the inlined nature of this PR so no pressure on `none`. There is also the proposed `Completable` which doesn't allow emitting any value and supports `endWith(Observable)` as a means of continuation. What do you think?"
p4666
aS'`Completable` is what I was intending in a contrived way via `VoidObservable` in the [initial issue](https://github.com/ReactiveX/RxJava/issues/3037) which led to this PR. The existence of `Completable` will make these operators redundant and I think that is a better abstraction for this usecase.'
p4667
aS'Great. (If you wish, you can try `Completable` without juggling with its PR.)'
p4668
aS'Could we also close this PR if we add `none()` and change `ignoreElements()` to return `<R> Observable<R>`?'
p4669
aS"That might not be binary compatible. I've checked it and changing the type parameter creates a compilation error in `OperatorIgnoreElementsTest.testDoesNotHangAndProcessesAllUsingBackpressure`, which means there could be type-expectancies out there that are require the same type as the source."
p4670
aS'I add :+1: to @akarnokd solution ``source.none().concatWith(other)``/``source.none().mergeWith(other)`` but changing concatWith/mergeWith by then/flat which force cast the ignoreElement (which is safe) to the other type (see https://github.com/ReactiveX/RxJava/issues/3037#issuecomment-148822728, sorry for commenting on the other thread, but is where @NiteshKant describes its originar problem).'
p4671
aS'Closing this PR in favor of converting an `Observable` to a `Completable`\r\n\r\n```java\r\nobs.doOnNext(this::blowUp).toCompletable().endsWith(nextObservable);\r\n```\r\n\r\nNote that the operator names in Completable are subject to change as it has not yet been released. See #3570. \r\n\r\nIf you think this case is not handled then feel free to re-open. '
p4672
asg14
S'NiteshKant:ConcatMergeEmpty'
p4673
sbsI3433
(iPull
Pull
p4674
(dp4675
g3
g57
sg5
S'add single.defer()'
p4676
sg7
(lp4677
S'Enhancement'
p4678
asg10
I3433
sg11
(lp4679
S'Please add unit test for callback returning null cases.'
p4680
aS"@akarnokd added `deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryIsNull` and `deferShouldPassNullPointerExceptionToTheSubscriberIfSingleFactoryReturnsNull`.\r\n\r\nBtw, I've used `Callable` instead of `Func0` to save users from dealing with checked exception, hope it's okay :)"
p4681
aS'Func0 extends Callable so its okay.\r\n\r\n.:+1:'
p4682
aS':+1: rebase please'
p4683
aS"I'm still :+1: but please rebase."
p4684
aS'Rebased!'
p4685
aS'Thanks! Merged.'
p4686
aS'thanks'
p4687
asg14
S'artem-zinnatullin:single-defer'
p4688
sbsI3434
(iPull
Pull
p4689
(dp4690
g3
S"@akarnokd I've found a problem with `null` action, I'll create separate issue about this soon."
p4691
sg5
S'add single.finallydo()'
p4692
sg7
(lp4693
S'Enhancement'
p4694
asg10
I3434
sg11
(lp4695
S'Could you verify what happens ig the callback throws?\r\n\r\nOne should check null in assembly time (i.e. when calling Single.finallyDo.'
p4696
aS"@akarnokd unfortunately very bad thing happens \xe2\x80\x94 not only this exception will be swallowed, but also `finallyAction` executed twice\xe2\x80\xa6 I'm investigating this and will create issue soon."
p4697
aS':+1:'
p4698
aS'um... I just noticed that we `doOnTerminate` and `finallyDo` on `Observable`.\r\n\r\n![the number of methods is too damn high](https://i.imgflip.com/so2yt.jpg)\r\n\r\nCould we make this look like `doOn*()`?'
p4699
aS'`doOnTerminate` happens before subscriber notification. `finallyDo` happens after.'
p4700
aS'Rebased'
p4701
aS"It can be called `doOnAfterComplete()` but since `finallyDo` is established, I'm not sure this rename can happen for 1.0.x."
p4702
aS"I'd rather it were called doAfterComplete. finallyDo only exists for the Observable and it doesnt follow the do* convention. We could choose to have 2 conventions (naming Single's variant similarly) or deprecate Observable#finallyDo and create Observable#doAfterComplete. I vote for the latter naming them both doAfterComplete."
p4703
aS"I think it would have to be doAfterTermination since it runs on both\ncomplete and error.\n\nOn Sat, Oct 17, 2015, 2:45 PM Aaron Tull <notifications@github.com> wrote:\n\n> I'd rather it were called doAfterComplete. finallyDo only exists for the\n> Observable and it doesnt follow the do* convention. We could choose to have\n> 2 conventions (naming Single's variant similarly) or deprecate\n> Observable#finallyDo and create Observable#doAfterComplete. I vote for the\n> latter naming them both doAfterComplete.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3434#issuecomment-148942392>.\n>\n"
p4704
aS"Does anyone have any objection to creating `Observable.doAfterTermination` as an alias for `finallyDo` and deprecating the original `finallyDo`? If that's acceptable then this PR should name it `Single.doAfterTermination`. "
p4705
aS':+1: `doAfterTermination`'
p4706
aS'A bit of consistency in tenses would be nice though.\r\n\r\nWe have \r\n```\r\ndoOnCompleted\r\ndoOnTerminate\r\ndoOnSubscribe\r\ndoOnRequest\r\n...\r\n```\r\n`doOnCompleted ` is the odd one out but may as well live with that. To be consistent call the method in question `doAfterTerminate` or `doAfterTerminated`?\r\n\r\n\r\n'
p4707
aS"I think `doAfterTerminate` sounds best to me. It's consistent with the\nonComplete of 2.x\n\nOn Sat, Dec 5, 2015, 01:53 Dave Moten <notifications@github.com> wrote:\n\n> A bit of consistency in tenses would be nice though.\n>\n> We have\n>\n> doOnCompleted\n> doOnTerminate\n> doOnSubscribe\n> doOnRequest\n> ...\n>\n> doOnCompleted is the odd one out but may as well live with that. To be\n> consistent call the method in question doAfterTerminate or\n> doAfterTerminated?\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3434#issuecomment-162168023>.\n>\n"
p4708
aS'Renamed to `doAfterTerminate` & rebased, PTAL.'
p4709
aS'> Does anyone have any objection to creating Observable.doAfterTermination as an alias for finallyDo and deprecating the original finallyDo? \r\n\r\n@artem-zinnatullin would you like to deprecate `finallyDo` -> `doAfterTerminate` in this PR?'
p4710
aS"I'd prepare a separate PR after this if you don't mind.\n\nOn Mon, Dec 7, 2015, 23:13 Aaron Tull <notifications@github.com> wrote:\n\n> Does anyone have any objection to creating Observable.doAfterTermination\n> as an alias for finallyDo and deprecating the original finallyDo?\n>\n> @artem-zinnatullin <https://github.com/artem-zinnatullin> would you like\n> to deprecate finallyDo -> doAfterTerminate in this PR?\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3434#issuecomment-162646316>.\n>\n-- \n\n@artem_zin\n"
p4711
aS'Rebase please so we can merge. '
p4712
aS'Rebased!'
p4713
aS':+1: '
p4714
aS':+1:'
p4715
aS':+1: '
p4716
asg14
S'artem-zinnatullin:single-finally'
p4717
sbsI3436
(iPull
Pull
p4718
(dp4719
g3
S"Part of #3435.\r\n\r\nPersonally, I'd also add same test to `Observable.finallyDo()` and `Single.finallyDo()` because there are no guarantees that in future they will use exact same operator as implementation and this contract is more a contract of `Observable.finallyDo()` and `Single.finallyDo()`."
p4720
sg5
S'1.x: add action != null check in operatorfinally'
p4721
sg7
(lp4722
S'Bug'
p4723
asg10
I3436
sg11
(lp4724
S':+1:'
p4725
aS':+1: '
p4726
asg14
S'artem-zinnatullin:operator-finally-null-action-check'
p4727
sbsI3438
(iPull
Pull
p4728
(dp4729
g3
S"There seems to be a tendency to send `null` values through `onError` which eventually causes repeated failures. This PR converts these `null` values into `NullPointerException`s so the error origin is can be discovered and prevents the XXXExceptions from throwing NPEs in their constructors as well.\r\n\r\nI've also added some missing javadoc."
p4730
sg5
S'better null tolerance in rx.exceptions.*exception classes.'
p4731
sg7
(lp4732
S'Bug'
p4733
asg10
I3438
sg11
(lp4734
S':+1:'
p4735
aS'Code is :+1:, but not sure I like null tolerance for exceptions\xe2\x80\xa6 `subscriber.onError(null)` is like `throw null`.'
p4736
aS'The problem is that NPEs will crash the streams further and likely end up hanging somewhere.'
p4737
aS'Yeah, I understand\xe2\x80\xa6 Okay, I guess.'
p4738
asg14
S'akarnokd:ExceptionNullSafety'
p4739
sbsI3439
(iPull
Pull
p4740
(dp4741
g3
S"I saw this mentioned in [this talk](https://www.youtube.com/watch?v=ET_SMMXkE5s) from @benjchristensen \r\n\r\nThis PR adds a new class `Completable` which allows composing events\r\nthat never want to fire `onNext`, but only `onError` or `onComplete`. It\r\nis built upon the same Reactive-Streams principles as `Single`,\r\n`NbpObservable` and `Observable`.\r\n\r\nI've added most methods that made sense and left out the others (such as\r\n`map` and `flatMap`) that would require at least a single value.\r\n\r\nDepending on whether this type is actually required, I'll add unit test to this PR or in a new PR in case this gets merged."
p4742
sg5
S'2.x: completable class for valueless event composition.'
p4743
sg7
(lp4744
S'Enhancement'
p4745
asg10
I3439
sg11
(lp4746
S"I'm adding unit tests and some fixes, stay tuned."
p4747
aS'Added 240 unit tests and fixed a few bugs.'
p4748
aS"I've added `amb`, `startWith` and `endWith` methods + their unit tests. The latter two have convenience overload that help with continuation-style flows (run the `Completable` before or after the `Observable`/`NbpObservable` delivered its values)."
p4749
aS"What is the difference between ``Completable`` vs ``Single<Void>``? It's possible to add some utility methods to Single to terminate using null values, so end up almost with the same interface than Completable. Maybe is better to improve Single as something similar to a Deferred/Promise which will handle the 1/0 items situations (been 0 a null item) which is probably the origin of both interfaces. Even Completable might be just a ``Completable extends Future<Void>``. So end up with ``Observable<T>`` (async multiple items) and ``Future<Void>`` (async single item) as main types (as puts here for some time http://reactivex.io/intro.html :astonished:).\r\n\r\nHope this helps. Just ignore me if you think that this is non sense. I see that @akarnokd are doing amazing things this days (specially rxjava v2), I'm not try to say that this pull request is bad or something similar."
p4750
aS"The difference is that, among other things, you don't have to drag around a mute type parameter. Null values are forbidden with 2.x and Reactive-Streams anyway. `Future` void is not an option because `Completable` is a deferred cold computation which runs only if one subscribes to it whereas Future is hot and is expected to be running or already completed such as `AsyncSubject`."
p4751
aS'Consider making `Completable` implement both `Publisher` and `IObservable` (an interface for `Observable` similar to `Publisher` for `Flowable`) so that `Completable` can be composed directly with either a `Flowable` or `Observable` without special method overloads. '
p4752
aS"I've started out with `Completable implements Publisher<Object>` but it didn't work with `Subscriber<T>` because `T` is not a supertype of `Object` and java doesn't have a bottom type in its type system (its top type is `Object`, however, `Void` is not a bottom type so that `Void` extends every other type). The same would be true for `IObservable`. So what's left is a bunch of `subscribe()` method with call-site variance."
p4753
aS"Well that really sucks that `Void` doesn't work properly. How about as `Publisher<?>`?"
p4754
aS"You can't have wildcards as the type parameter of the super type."
p4755
aS':( Oh well. '
p4756
aS'Is there any chance we will get this with RxJava 1.x?'
p4757
aS'The PR for 1.x has already been merged and should appear in 1.1.1'
p4758
aS'see #3444'
p4759
aS'Closing, will be included in the complete backport PR.'
p4760
asg14
S'akarnokd:Completable2x'
p4761
sbsI3443
(iPull
Pull
p4762
(dp4763
g3
S'As discussed in #3113.\r\n\r\nI also considered on a consistency basis calling it `ignoreElementsWith` but I don\'t think it carries the same clarity of meaning like `startWith` or `concatWith`. "ignore" and "then" seems to be a more natural combination in English to capture the sequential nature.'
p4764
sg5
S'1.x: observable.ignoreelementsthen'
p4765
sg7
(lp4766
S'Enhancement'
p4767
aS'Feature-Request'
p4768
asg10
I3443
sg11
(lp4769
S'Looks good but it may be confusing to users when they encounter this and `concatEmptyWith()` or `mergeEmptyWith()`, or even a backport of the `Completable` class.'
p4770
aS">Looks good but it may be confusing to users when they encounter this and concatEmptyWith() or mergeEmptyWith(), or even a backport of the Completable class.\r\n\r\nThose operators are a little bit different and even though `ignoreElementsThen` can be expressed as `.ignoreElements().concatEmptyWith()` I think we get enough questions from user land about this issue to warrant first class support (an explicit method). \r\n\r\nIn terms of using `Completable` I'm assuming that `ignoreElements` could be modified to return a `Completable` and that `Completable` would have a `concatWith` operator that did the same as `concatEmptyWith`. That would be nice though it might be a problem for API backwards compatibility in v1."
p4771
aS'Extra test has been added, thanks @akarnokd \r\n'
p4772
aS'This operates very similarly to #3430 `concatEmptyWith`. To my knowledge the functional difference between the two is that `ignoreElementsThen` will drop all onNexted data while `concatEmptyWith` will blow up if onNext is called. It seems to me that we have the following choices:\r\n\r\n1. Merge both functionality but rename one to better align the API (i.e. rename `ignoreElementsThen` to `concatEmptyWithUnchecked` and create a `mergeEmptyWithUnchecked`). \r\n2. Merge this pull request and get the unchecked functionality (auto-drop onNexted values).\r\n3. Merge #3430 and get the checked functionality (trigger an onError when onNext is called). \r\n\r\n@abersnaze @akarnokd preferences? I vote for option 3 above. '
p4773
aS'I think one thing that should drive this decision is how often the functionality of `ignoreElementsThen` is requested on question and answer sites. It is such a frequent use case that I think it deserves first class support. '
p4774
aS"Tough. I don't have any use case that would require throwing an error if the first source happens to be non-empty and even if were so, I'd use `doOnNext( crash )`. I'd go for option 2 and seriously think about a shorter method name."
p4775
aS'How about `andThen`?'
p4776
aS'Sounds good to me.'
p4777
aS"Unfortunately `andThen` doesn't carry the meaning of ignoring the emissions of the source and could be confused with `concatWith`."
p4778
aS'I vote for number 3 with the option to drop/onError when onNext is called.'
p4779
aS"I prefer #1 without a rename of `ignoreElementsThen` (haven't seen a better name yet)"
p4780
aS"So far we have 3 totally different proposals and no consensus. \r\n\r\n1. Proposed by @akarnokd - Merge this pull request with a shorter name.\r\n2. Proposed by @abersnaze - Change the operator in #3430 to have an overload to drop the values or onError. If we pick option 2 then would we merge this pull request? Would the functionality would be subsumed? \r\n3. Proposed by @davidmoten - Rename the operator in #3430 to something that better aligns with `ignoreElementsThen` and merging them both. \r\n\r\nOption 2 above gives us both behaviors with a unified name. I vote for a variation of 2... \r\n\r\n4. Rename `ignoreElementsThen` to `andThen`. Also the semantics of the concat used internally should eagerly subscribe (to prevent issues with refcounted subscribers). \r\n\r\n```java\r\npublic Observable<R> andThen(Observable<R> doNext);\r\npublic Observable<R> andThen(Values doForValues, Observable<R> doNext);\r\npublic enum Values { Ignore, Error }\r\n```\r\n\r\nexample callsite...\r\n\r\n```java\r\nreturn inputs.publish(is -> \r\n    doSomeWork(Values.Ignore, is).andThen(is).retryWhen(this::tryRetry)\r\n);\r\n```\r\n\r\nThoughts? I'd like to close the books on these 2 PRs."
p4781
aS"Or instead of an overload I'd be okay with adding a `.none()` that enforced no onNext values. "
p4782
aS"As mentioned above `andThen` suffers from this:\r\n\r\n>Unfortunately andThen doesn't carry the meaning of ignoring the emissions of the source and could be confused with concatWith."
p4783
aS"The method name sounds fine to me. I'm thinking about the API of a\nCompletable which makes sense that it's logically one step of completable\nwork and then the next.\n\nOn Fri, Dec 4, 2015, 20:05 Dave Moten <notifications@github.com> wrote:\n\n> As mentioned above andThen suffers from this:\n>\n> Unfortunately andThen doesn't carry the meaning of ignoring the emissions\n> of the source and could be confused with concatWith.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3443#issuecomment-162137400>.\n>\n"
p4784
aS"I'm sounding a bit repetitive but nothing about 'andThen' suggests that it\nsuppresses the onNext emissions of the first Observable. That's an issue\nfor readability and discoverability.\n\nOn Sun, 6 Dec 2015 09:48 Aaron Tull <notifications@github.com> wrote:\n\n> The method name sounds fine to me. I'm thinking about the API of a\n> Completable which makes sense that it's logically one step of completable\n> work and then the next.\n>\n> On Fri, Dec 4, 2015, 20:05 Dave Moten <notifications@github.com> wrote:\n>\n> > As mentioned above andThen suffers from this:\n> >\n> > Unfortunately andThen doesn't carry the meaning of ignoring the emissions\n> > of the source and could be confused with concatWith.\n> >\n> > \xe2\x80\x94\n> > Reply to this email directly or view it on GitHub\n> > <https://github.com/ReactiveX/RxJava/pull/3443#issuecomment-162137400>.\n> >\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3443#issuecomment-162254710>.\n>\n"
p4785
aS"@davidmoten I'm really not concerned with the name that much. I think that it's fairly clear. \r\n\r\nWhat I'd really like to see happen is this...\r\n\r\n1. Merge the `Completable` PR #3444. \r\n2. Add an instance method to `Observable` `public Completable none()` that ignores all values onNexted and returns a `Completable`.\r\n3. Add an instance method in `Completable`  `public Observable<T> concat(Observable<T>)`\r\n\r\nThe usage of this would look like this.\r\n\r\n```java\r\npublic Observable<T> writeData(Observable<T> inputs) {\r\n    return inputs.publish(i -> {}\r\n        Completable work = database.insert(i).doOnNext(this::logQuery).none();\r\n        return results.concat(i);\r\n    });\r\n}\r\n```\r\n\r\nThis reduces `a.ignoreElements().castAs(R.class).concatWith(b)` to `a.none().concat(b)` and it's composable. I believe that @akarnokd recommended a similar approach in #3430  \r\n\r\nNow that #3444 is merged we could add these 2 methods."
p4786
aS"That sounds ok\n\nOn Tue, 8 Dec 2015 10:05 Aaron Tull <notifications@github.com> wrote:\n\n> @davidmoten <https://github.com/davidmoten> I'm really not concerned with\n> the name that much. I think that it's fairly clear.\n>\n> What I'd really like to see happen is this...\n>\n>    1. Merge the Completable PR #3444\n>    <https://github.com/ReactiveX/RxJava/pull/3444>.\n>    2. Add a method Observable.none() that ignores all values onNexted and\n>    returns a Completable.\n>    3. Add an instance method in Completable public Observable<T>\n>    concat(Observable<T>)\n>\n> The usage of this would look like this.\n>\n> public Observable<T> writeData(Observable<T> inputs) {\n>     return inputs.publish(i -> {}\n>         Completable work = database.insert(i).doOnNext(this::logQuery).none();\n>         return results.concat(i);\n>     });\n> }\n>\n> This reduces a.ignoreElements().castAs(R.class).concatWith(b) to\n> a.none().concat(b) and it's composable. I believe that @akarnokd\n> <https://github.com/akarnokd> recommended a similar approach in #3430\n> <https://github.com/ReactiveX/RxJava/pull/3430>\n>\n> Now that #3444 <https://github.com/ReactiveX/RxJava/pull/3444> is merged\n> we could add these 2 methods.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3443#issuecomment-162699943>.\n>\n"
p4787
aS'Great. I like this better as well. @abersnaze @akarnokd - do you guys agree with this approach? '
p4788
aS"I don't particularly like `none()` maybe `toCompletable()` to match `toSingle()` otherwise a solid plan."
p4789
aS"Next step would be to implement `Completable#merge(Observable<T>)`... but I'm not convinced on naming just a thought."
p4790
aS"I opened a PR adding `Observable<T> andThen(Observable<T>)` to `Completable` #3570. Please comment. I'm open to different method name options. "
p4791
aS'@NiteshKant is this an acceptable resolution to your PR #3430? Can that PR be closed?'
p4792
aS'Since Completable now has an option to append an Observable I think this PR can be closed. Please comment if it needs to be reopened. '
p4793
asg14
S'davidmoten:ignore-elements-then'
p4794
sbsI3444
(iPull
Pull
p4795
(dp4796
g3
S'This is a backport of #3439.'
p4797
sg5
S'1.x: completable class to support valueless event composition + tests'
p4798
sg7
(lp4799
S'Enhancement'
p4800
asg10
I3444
sg11
(lp4801
S'Looks good. Should we annotate `@Experimental` on all the public methods and operators? '
p4802
aS'Now, the class annotation should indicate all methods are experimental. If individual methods get promoted, we can add direct annotations then.'
p4803
aS'Sounds good :+1:\n\nOn Sat, Dec 5, 2015, 01:38 David Karnok <notifications@github.com> wrote:\n\n> Now, the class annotation should indicate all methods are experimental. If\n> individual methods get promoted, we can add direct annotations then.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3444#issuecomment-162167535>.\n>\n'
p4804
aS"Since this adds to the API surface, I'd like to get another like before merging."
p4805
aS':+1: '
p4806
aS'Awesome. Thanks!'
p4807
asg14
S'akarnokd:Completable1x'
p4808
sbsI3447
(iPull
Pull
p4809
(dp4810
g3
S"Requested in #3445.\r\n\r\nThis is an efficient implementation as it avoids allocating the lifter object, doesn't require a function wrapper and doesn't use producer arbitration.\r\n\r\n(Bonus points to those who can recognize the similarities with #3446)."
p4811
sg5
S'1.x: delaysubscription with a plain other observable.'
p4812
sg7
(lp4813
S'Enhancement'
p4814
aS'Feature-Request'
p4815
asg10
I3447
sg11
(lp4816
S'Any thoughts about this?'
p4817
aS':+1: '
p4818
aS':+1: '
p4819
asg14
S'akarnokd:OnSubscribeDelaySubscriptionOther'
p4820
sbsI3448
(iPull
Pull
p4821
(dp4822
g3
S"Adds the `delay(long delay, TimeUnit unit, Scheduler\r\nscheduler)` and 'delay(long delay, TimeUnit unit)` operators to\r\n`rx.Single`.\r\n\r\nIncludes (in a separate commit) a refactor of `OperatorDelay`. As far as I can tell, the `source` field isn't used at all - by removing it, I was able to reuse `OperatorDelay` in `rx.Single` to implement the delay operator pretty easily."
p4823
sg5
S'single delay'
p4824
sg7
(lp4825
S'Enhancement'
p4826
asg10
I3448
sg11
(lp4827
S':+1:'
p4828
aS'LGTM'
p4829
asg14
S'hyleung:single_delay'
p4830
sbsI3449
(iPull
Pull
p4831
(dp4832
g3
S'get() throws NSE when absent and orElse(T) returns the provided value when absent.'
p4833
sg5
S'2.x: remove duplication of optional api behavior.'
p4834
sg7
(lp4835
S'Enhancement'
p4836
asg10
I3449
sg11
(lp4837
S':+1:'
p4838
aS'Friendly ping! Just need a second collaborator to review.'
p4839
aS':+1: '
p4840
asg14
S'JakeWharton:jw/delete-code'
p4841
sbsI3451
(iPull
Pull
p4842
(dp4843
g3
S"to remove the need for mergeWithEmpty and concatWithEmpty in #3430.  I'm pretty sure that this doesn't count as a breaking change because of type erasure."
p4844
sg5
S'1.x: change the signature of ignoreelements is also an implicit cast to whatever type you want.'
p4845
sg7
(lp4846
S'Enhancement'
p4847
asg10
I3451
sg11
(lp4848
S"ah that's great @abersnaze, so simple!"
p4849
aS"So we need a decision on the importance of source compatibility specifically in the category of generic types, right?\r\n\r\nI'm happy to add a generic type to `ignoreElements` where necessary to my codebases when I update to the next release because for a Java only codebase static typing will show me where things went wrong at compile time. Does anyone know if this change would bring about runtime grief for one of the dynamic languages that use RxJava?"
p4850
aS'Could this changed be done in a minor release? '
p4851
aS'closing in favor of #3567'
p4852
asg14
S'abersnaze:ignore-cast'
p4853
sbsI3454
(iPull
Pull
p4854
(dp4855
g3
S"Fixes the bug reported in #3452.\r\n\r\nThe fix involves 3 changes:\r\n\r\n  - First, each node in the bounded buffer receives an incrementing index whenever they are created. The root node starts with 0, the first value's index will be 1 and so on.\r\n  - In the replay logic, the very first time the current node is captured, the node's index is added to the totalRequested amount of the subscriber. Since this is always one less than the max requested that far, there is no point in calling `manageRequests()` at this point.\r\n  - Third, the pinning of the current node has to happen before the child requests, otherwise the difference would manifest before the compensation and some elements may get missed.\r\n\r\nIn addition, there was a missing `r--` in the emission loop and thus the operator could have overflown its child subscriber."
p4856
sg5
S'1.x: fix: bounded replay() not requesting enough for latecommers'
p4857
sg7
(lp4858
S'Bug'
p4859
asg10
I3454
sg11
(lp4860
S"Don't have the time to fully grok this, but the changes look okay and I trust @akarnokd on this. So :+1: "
p4861
aS"Thank you @benjchristensen. Since `replay()` is one of the most complicated operators, I'd like @abersnaze or @stealthcode to look at it before it ends up in 1.0.15."
p4862
aS':+1: '
p4863
asg14
S'akarnokd:ReplayRequestCoordinationFix'
p4864
sbsI3455
(iPull
Pull
p4865
(dp4866
g3
S'https://github.com/ReactiveX/RxJava/issues/2998'
p4867
sg5
S'onerrorfailedexception fix'
p4868
sg7
(lp4869
S'Bug'
p4870
aS'Enhancement'
p4871
asg10
I3455
sg11
(lp4872
S'Looks good to me. :+1:'
p4873
aS'Could you also fix the similar issues in `Observable.subscribe` and `Observable.unsubscribe`? Here are tests to reproduce them:\r\n\r\n```\r\n    @Test(expected = OnErrorFailedException.class)\r\n    public void testOnErrorExceptionIsThrownFromSubscribe() {\r\n        Observable.<Integer>create(s1 ->\r\n                        Observable.<Integer>create(s2 -> {\r\n                            throw new IllegalArgumentException("original exception");\r\n                        }).subscribe(s1)\r\n        ).subscribe(System.out::println, e -> {\r\n            throw new RuntimeException();\r\n        });\r\n    }\r\n\r\n    @Test(expected = OnErrorFailedException.class)\r\n    public void testOnErrorExceptionIsThrownFromUnsafeSubscribe() {\r\n        Observable.<Integer>create(s1 ->\r\n                        Observable.<Integer>create(s2 -> {\r\n                            throw new IllegalArgumentException("original exception");\r\n                        }).unsafeSubscribe(s1)\r\n        ).subscribe(System.out::println, e -> {\r\n            throw new RuntimeException();\r\n        });\r\n    }\r\n\r\n```'
p4874
aS"I would replace error handling in both of these methods with simple\r\n\r\n        } catch (Throwable e) {\r\n            Exceptions.throwIfFatal(e);\r\n            try {\r\n                subscriber.onError(hook.onSubscribeError(e));\r\n            } catch (Throwable e2) {\r\n                throw new OnErrorFailedException(e2);\r\n            }\r\n            return Subscriptions.unsubscribed();\r\n        }\r\n\r\nHowever, I think that the problem should be handled more generally. \r\nThe entire error handling policy should be reviewed and enforced.\r\nOtherwise we will always see swallowed exceptions here and there.\r\nUnfortunately, I don't have time right now to investigate the issue, I've just fixed what creates troubles for my current project."
p4875
aS'Thanks for digging in to help with this. I thought we had squashed all of these swallowing of errors! Apparently not :-('
p4876
aS":+1: Go ahead with this @akarnokd if you're still good with it. "
p4877
aS'It is good as it is. Merging. The thing @zsxwing asked for can be done in a separate PR.'
p4878
asg14
S'konmik:on-error-failed-exception-fix'
p4879
sbsI3456
(iPull
Pull
p4880
(dp4881
g3
S'Can get two more :+1: from the committers.'
p4882
sg5
S'begin the steps to release 1.0.15'
p4883
sg7
(lp4884
S'Discussion'
p4885
asg10
I3456
sg11
(lp4886
S'It would be great to get these PRs in as well:\r\n\r\n#3458 : CompositeSubscription javadoc change\r\n#3455 : [Bug] OnErrorFailedException propagation fix\r\n#3454 : [Bug] Fix bounded replay() request behavior\r\n#3438 : Better null tolerance, although this may need rebase due to #3455\r\n'
p4887
aS":+1: for getting this release out. I provided some non-essential feedback on suggestions for things I would change or not include in the release notes based on how I've done it in thus far. With or without those changes (except the one I thing has a misleading title), I'm good with the release going out. "
p4888
aS"Agreed that we should get the items @akarnokd mentioned into this release. Some are already merged and just need to be put in the release notes. I've looked at the others and think they are all okay for merging before release."
p4889
aS"Great, these are already merged in:\r\n\r\n#3458 : CompositeSubscription javadoc change\r\n#3455 : [Bug] OnErrorFailedException propagation fix\r\n#3438 : Better null tolerance, although this may need rebase due to #3455\r\n\r\nI feel this one can be merged but would like someone to review it in more detail:\r\n\r\n#3454 : [Bug] Fix bounded replay() request behavior\r\n\r\nI don't know how urgent are these as they were reported by Netflix:\r\n\r\n#3428 [bug] GroupBy request fix\r\n#3169 Merge support for horizontally unbounded mode"
p4890
aS':+1: '
p4891
aS"I think I'd prefer to cut a release of 1.0.15 asap and get the changes like #3454, #3428, and #3169 in a subsequent 1.0.16 release. \r\n\r\nCan I get a +1 to initiate the 1.0.15 release?"
p4892
aS':+1: (not a "collaborator" though). Let\'s finally release 1.0.15, a lot of good stuff for Rx users!\r\n\r\n@abersnaze can you please squash commits in this PR?'
p4893
aS'+1 for release of what is already merged. '
p4894
aS':+1:'
p4895
aS'I was getting lazy. thanks @artem-zinnatullin.'
p4896
aS':+1: '
p4897
asg14
S'abersnaze:1.0.15'
p4898
sbsI3458
(iPull
Pull
p4899
(dp4900
g3
S"Current state of `CompositeSubscription`'s javadoc \xe2\x80\x94 totally misleading :smile: \r\n\r\nEvery time we need to store some subscriptions in it then clear them and leave `CompositeSubscription` in an operable state we have to read its sources because its actual behavior is not consistent with the javadoc.\r\n\r\n`CompositeSubscription.clear()` leaves `CompositeSubscription` in operable state, when on the other hand `CompositeSubscription.unsubscribe()` sets `isUnsubscribed = true` and `CompositeSubscription` is not able to manage new subscriptions."
p4901
sg5
S'clarify contracts of compositesubscription in its javadoc'
p4902
sg7
(lp4903
S'Documentation'
p4904
asg10
I3458
sg11
(lp4905
S':+1:'
p4906
aS':+1: '
p4907
aS'Excellent!'
p4908
asg14
S'artem-zinnatullin:CompositeSubscription-javadoc'
p4909
sbsI3460
(iPull
Pull
p4910
(dp4911
g3
S'This PR adds the `SchedulerPoolHelper` class which manages creating\r\n`ScheduledExecutorService`s for the standard schedulers and wires them\r\nup to work properly with JDK 6 `purge` or JDK 7 `removeOnCancelPolicy`,\r\ndepending on if the platform supports it or not.\r\n\r\nSince the 2.0 is aimed at desktop and will be automatically backported\r\nto JDK 6 level, the desktop (JDK 8) test have to verify both modes.'
p4912
sg5
S'2.x: platform-aware purge/removeoncancelpolicy management.'
p4913
sg7
(lp4914
S'Enhancement'
p4915
asg10
I3460
sg11
(lp4916
S'Closing, will be included in the complete backport PR.'
p4917
asg14
S'akarnokd:PlatformSchedulerPurge2x'
p4918
sbsI3462
(iPull
Pull
p4919
(dp4920
g3
g57
sg5
S'1.x: a minor doc fix for `interval`'
p4921
sg7
(lp4922
S'Documentation'
p4923
asg10
I3462
sg11
(lp4924
S':+1:'
p4925
aS':+1: '
p4926
asg14
S'zsxwing:fix-doc'
p4927
sbsI3465
(iPull
Pull
p4928
(dp4929
g3
S'I forgot to request Long.MAX_VALUE in 3 of the `Subscribers.create`\r\noverloads.'
p4930
sg5
S'2.x: fix subscribers.create not requesting anything'
p4931
sg7
(lp4932
S'Bug'
p4933
asg10
I3465
sg11
(lp4934
S'Closing, will be included in the complete backport PR.'
p4935
asg14
S'akarnokd:SubscribersHelperFix2x'
p4936
sbsI3467
(iPull
Pull
p4937
(dp4938
g3
S'There is a problem, reported in #3461 and #2943, in which if the system clock drifts, the periodic calculation inside Scheduler.Worker gets off and either taking a longer time for the next invocation of the task or doing "catching-up" with all the lost invocations.\r\n\r\nThe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly, it rebases the timer period and schedules the next execution relative to now.\r\n\r\nIf the clock goes back, the original code scheduled the next invocation way into the future. This PR will schedule it after the period.\r\n\r\nIf the clock goes forward, the original code scheduled executions for all the missed time between the last run and the new time immediately, yielding a bunch of 0 delays. This PR will simply schedule the next invocation after the period.\r\n\r\nThe algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along. The subsequent invocations will be scheduled at a fixed rate again.\r\n\r\nI\'ve added the system parameter `rx.scheduler.drift-tolerance` (unit: minutes, default: 15 minutes), which is used to determine if the clock drifted too far between invocations of the periodic task.'
p4939
sg5
S'1.x: compensation for significant clock drifts in scheduleperiodically'
p4940
sg7
(lp4941
S'Bug'
p4942
asg10
I3467
sg11
(lp4943
S'Time drift is pretty nasty. We spent a lot of time on this in Rx.NET http://blogs.msdn.com/b/rxteam/archive/2012/06/20/reactive-extensions-v2-0-release-candidate-available-now.aspx'
p4944
aS"I've updated the code with the suggestion of @stealthcode "
p4945
aS':+1: LGTM'
p4946
aS'Do you need additional changes? If not, feel free to merge this PR.'
p4947
aS':+1: '
p4948
aS'Yay! This was important issue.\r\n\r\nSo, I did test (similar to #3530):\r\n\r\n```java\r\nObservable\r\n  .interval(5, 10, SECONDS)\r\n  .subscribe(aLong -> logger.d("Interval: %d", aLong));\r\n```\r\n\r\nAnd then changed system clock to +2 hours at runtime of the app.\r\n\r\n**Before fix**\r\nAs expected computation scheduler gone crazy and fired about 700 events during one second.\r\n\r\n<img width="1160" alt="screen shot 2015-12-15 at 08 44 57" src="https://cloud.githubusercontent.com/assets/967132/11803559/1d2e29ee-a30d-11e5-960d-1489b3b0fb1c.png">\r\n<img width="944" alt="screen shot 2015-12-15 at 08 43 54" src="https://cloud.githubusercontent.com/assets/967132/11803560/1d678ac2-a30d-11e5-888d-88d397767339.png">\r\n\r\n**After fix**\r\nEverything was just fine! No incorrect events, no CPU consuming\r\n\r\n<img width="1165" alt="screen shot 2015-12-15 at 09 01 06" src="https://cloud.githubusercontent.com/assets/967132/11803561/1d73136a-a30d-11e5-9304-f25050ad4f58.png">\r\n<img width="1006" alt="screen shot 2015-12-15 at 09 00 42" src="https://cloud.githubusercontent.com/assets/967132/11803562/1d7628a2-a30d-11e5-8c20-77a3b3c222fa.png">\r\n\r\n---\r\n\r\nSo, I think #3461 and #3530 can be closed now!\r\n\r\nThanks, @akarnokd!\r\n'
p4949
asg14
S'akarnokd:SchedulePeriodicallyClockShiftFix'
p4950
sbsI3468
(iPull
Pull
p4951
(dp4952
g3
S'Reviewed all usages of `OnErrorNotImplementedException` and fixed issues similar to #3455.'
p4953
sg5
S'1.x: fix other places that may swallow onerrorfailedexception'
p4954
sg7
(lp4955
S'Bug'
p4956
asg10
I3468
sg11
(lp4957
S':+1: '
p4958
aS':+1:'
p4959
asg14
S'zsxwing:fix-for-OnErrorFailedException'
p4960
sbsI3470
(iPull
Pull
p4961
(dp4962
g3
S"Reported in #3469.\r\n\r\nThis change will make sure whenever a new subscriber arrives, the\r\nrequest coordination doesn't scan every other subscriber unnecessary.\r\n(They will trigger a manageRequests individually anyway).\r\n\r\nUnfortunately, I can't make the subscription registration constant (via a HashSet) because that would slow down the dispatching loop (which is quite expensive to for-each over compared to a plain array).\r\n\r\nNote also that this will likely conflict with #3454.\r\n\r\nI get the following numbers with the program in #3469.\r\n\r\n```\r\nsubscribing...\r\nsubscribed so far 10000; took 54ms to subscribe last 10000 at rate: 185185 per sec...\r\nsubscribed so far 20000; took 110ms to subscribe last 10000 at rate: 90909 per sec...\r\nsubscribed so far 30000; took 157ms to subscribe last 10000 at rate: 63694 per sec...\r\nsubscribed so far 40000; took 267ms to subscribe last 10000 at rate: 37453 per sec...\r\nsubscribed so far 50000; took 211ms to subscribe last 10000 at rate: 47393 per sec...\r\nsubscribed so far 60000; took 320ms to subscribe last 10000 at rate: 31250 per sec...\r\nsubscribed so far 70000; took 331ms to subscribe last 10000 at rate: 30211 per sec...\r\nsubscribed so far 80000; took 369ms to subscribe last 10000 at rate: 27100 per sec...\r\nsubscribed so far 90000; took 415ms to subscribe last 10000 at rate: 24096 per sec...\r\nsubscribed so far 100000; took 462ms to subscribe last 10000 at rate: 21645 per sec...\r\nsubscribed so far 110000; took 516ms to subscribe last 10000 at rate: 19379 per sec...\r\nsubscribed so far 120000; took 547ms to subscribe last 10000 at rate: 18281 per sec...\r\nsubscribed so far 130000; took 647ms to subscribe last 10000 at rate: 15455 per sec...\r\nsubscribed so far 140000; took 720ms to subscribe last 10000 at rate: 13888 per sec...\r\nsubscribed so far 150000; took 811ms to subscribe last 10000 at rate: 12330 per sec...\r\nsubscribed so far 160000; took 806ms to subscribe last 10000 at rate: 12406 per sec...\r\nsubscribed so far 170000; took 873ms to subscribe last 10000 at rate: 11454 per sec...\r\nsubscribed so far 180000; took 911ms to subscribe last 10000 at rate: 10976 per sec...\r\nsubscribed so far 190000; took 986ms to subscribe last 10000 at rate: 10141 per sec...\r\nsubscribed so far 200000; took 1003ms to subscribe last 10000 at rate: 9970 per sec...\r\nsubscribed so far 210000; took 1168ms to subscribe last 10000 at rate: 8561 per sec...\r\nsubscribed so far 220000; took 1213ms to subscribe last 10000 at rate: 8244 per sec...\r\nsubscribed so far 230000; took 1340ms to subscribe last 10000 at rate: 7462 per sec...\r\nsubscribed so far 240000; took 1314ms to subscribe last 10000 at rate: 7610 per sec...\r\nsubscribed so far 250000; took 1548ms to subscribe last 10000 at rate: 6459 per sec...\r\nsubscribed so far 260000; took 1372ms to subscribe last 10000 at rate: 7288 per sec...\r\nsubscribed so far 270000; took 1835ms to subscribe last 10000 at rate: 5449 per sec...\r\nsubscribed so far 280000; took 2087ms to subscribe last 10000 at rate: 4791 per sec...\r\nsubscribed so far 290000; took 1910ms to subscribe last 10000 at rate: 5235 per sec...\r\nsubscribed so far 300000; took 1966ms to subscribe last 10000 at rate: 5086 per sec...\r\nunsubscribing...\r\nunsubscribed so far 10000; took 1910ms to unsubscribe last 10000 at rate: 5235 per sec...\r\nunsubscribed so far 20000; took 1782ms to unsubscribe last 10000 at rate: 5611 per sec...\r\nunsubscribed so far 30000; took 1730ms to unsubscribe last 10000 at rate: 5780 per sec...\r\nunsubscribed so far 40000; took 1593ms to unsubscribe last 10000 at rate: 6277 per sec...\r\nunsubscribed so far 50000; took 1514ms to unsubscribe last 10000 at rate: 6605 per sec...\r\nunsubscribed so far 60000; took 1468ms to unsubscribe last 10000 at rate: 6811 per sec...\r\nunsubscribed so far 70000; took 1188ms to unsubscribe last 10000 at rate: 8417 per sec...\r\nunsubscribed so far 80000; took 1234ms to unsubscribe last 10000 at rate: 8103 per sec...\r\nunsubscribed so far 90000; took 1271ms to unsubscribe last 10000 at rate: 7867 per sec...\r\nunsubscribed so far 100000; took 1358ms to unsubscribe last 10000 at rate: 7363 per sec...\r\nunsubscribed so far 110000; took 1103ms to unsubscribe last 10000 at rate: 9066 per sec...\r\nunsubscribed so far 120000; took 1100ms to unsubscribe last 10000 at rate: 9090 per sec...\r\nunsubscribed so far 130000; took 990ms to unsubscribe last 10000 at rate: 10101 per sec...\r\nunsubscribed so far 140000; took 953ms to unsubscribe last 10000 at rate: 10493 per sec...\r\nunsubscribed so far 150000; took 854ms to unsubscribe last 10000 at rate: 11709 per sec...\r\nunsubscribed so far 160000; took 789ms to unsubscribe last 10000 at rate: 12674 per sec...\r\nunsubscribed so far 170000; took 779ms to unsubscribe last 10000 at rate: 12836 per sec...\r\nunsubscribed so far 180000; took 624ms to unsubscribe last 10000 at rate: 16025 per sec...\r\nunsubscribed so far 190000; took 634ms to unsubscribe last 10000 at rate: 15772 per sec...\r\nunsubscribed so far 200000; took 514ms to unsubscribe last 10000 at rate: 19455 per sec...\r\nunsubscribed so far 210000; took 411ms to unsubscribe last 10000 at rate: 24330 per sec...\r\nunsubscribed so far 220000; took 373ms to unsubscribe last 10000 at rate: 26809 per sec...\r\nunsubscribed so far 230000; took 337ms to unsubscribe last 10000 at rate: 29673 per sec...\r\nunsubscribed so far 240000; took 286ms to unsubscribe last 10000 at rate: 34965 per sec...\r\nunsubscribed so far 250000; took 234ms to unsubscribe last 10000 at rate: 42735 per sec...\r\nunsubscribed so far 260000; took 222ms to unsubscribe last 10000 at rate: 45045 per sec...\r\nunsubscribed so far 270000; took 159ms to unsubscribe last 10000 at rate: 62893 per sec...\r\nunsubscribed so far 280000; took 96ms to unsubscribe last 10000 at rate: 104166 per sec...\r\nunsubscribed so far 290000; took 63ms to unsubscribe last 10000 at rate: 158730 per sec...\r\nunsubscribed so far 300000; took 31ms to unsubscribe last 10000 at rate: 322580 per sec...\r\n```"
p4963
sg5
S'1.x: replay request coordination reduce overhead'
p4964
sg7
(lp4965
S'Performance'
p4966
asg10
I3470
sg11
(lp4967
S"I've updated the code to have O(1) subscription/unsubscription cost as well. The program from #3469 now produces stunning results:\r\n\r\n```\r\nsubscribing...\r\nsubscribed so far 10000; took 32ms to subscribe last 10000 at rate: 312500 per sec...\r\nsubscribed so far 20000; took 12ms to subscribe last 10000 at rate: 833333 per sec...\r\nsubscribed so far 30000; took 14ms to subscribe last 10000 at rate: 714285 per sec...\r\nsubscribed so far 40000; took 6ms to subscribe last 10000 at rate: 1666666 per sec...\r\nsubscribed so far 50000; took 12ms to subscribe last 10000 at rate: 833333 per sec...\r\nsubscribed so far 60000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 70000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 80000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 90000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 100000; took 13ms to subscribe last 10000 at rate: 769230 per sec...\r\nsubscribed so far 110000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 120000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 130000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 140000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 150000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 160000; took 6ms to subscribe last 10000 at rate: 1666666 per sec...\r\nsubscribed so far 170000; took 41ms to subscribe last 10000 at rate: 243902 per sec...\r\nsubscribed so far 180000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 190000; took 5ms to subscribe last 10000 at rate: 2000000 per sec...\r\nsubscribed so far 200000; took 19ms to subscribe last 10000 at rate: 526315 per sec...\r\nsubscribed so far 210000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 220000; took 3ms to subscribe last 10000 at rate: 3333333 per sec...\r\nsubscribed so far 230000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 240000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 250000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 260000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 270000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 280000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 290000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nsubscribed so far 300000; took 4ms to subscribe last 10000 at rate: 2500000 per sec...\r\nunsubscribing...\r\nunsubscribed so far 10000; took 13ms to unsubscribe last 10000 at rate: 769230 per sec...\r\nunsubscribed so far 20000; took 8ms to unsubscribe last 10000 at rate: 1250000 per sec...\r\nunsubscribed so far 30000; took 7ms to unsubscribe last 10000 at rate: 1428571 per sec...\r\nunsubscribed so far 40000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 50000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 60000; took 5ms to unsubscribe last 10000 at rate: 2000000 per sec...\r\nunsubscribed so far 70000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 80000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 90000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 100000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 110000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 120000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 130000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 140000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 150000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 160000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 170000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 180000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 190000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\nunsubscribed so far 200000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 210000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 220000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 230000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 240000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 250000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 260000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 270000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 280000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 290000; took 2ms to unsubscribe last 10000 at rate: 5000000 per sec...\r\nunsubscribed so far 300000; took 3ms to unsubscribe last 10000 at rate: 3333333 per sec...\r\n```\r\n\r\n(The numbers could be actually higher but Windows' timer resolution is about 3ms at best)."
p4968
aS"I've updated the code to avoid the synchronized block on each replay attempt in case the cached version of the InnerProducers is still the same as the set's version."
p4969
aS"I haven't reviewed the changes in detail yet but I do notice that OpenHashSet doesn't have any dedicated unit tests."
p4970
aS"I've added a unit test for `OpenHashSet`."
p4971
aS"Strangely, the test doesn't crash with Java 8. Must be some difference between what type for-each extracts."
p4972
aS'@akarnokd needs rebase on latest `1.x`'
p4973
aS'Thanks. Working on it.'
p4974
aS'Rebased.'
p4975
aS'I like this a lot, and the results are really impressive. Code looks good to me, cleaner than the previous implementation too. \xf0\x9f\x91\x8d '
p4976
aS'I finally find some time to review this one, sorry for the delay.\r\n\xf0\x9f\x91\x8d '
p4977
asg14
S'akarnokd:ReplayRequestCoordinationPerfFix'
p4978
sbsI3474
(iPull
Pull
p4979
(dp4980
g3
g57
sg5
S'fix indentation'
p4981
sg7
(lp4982
S'Cleanup'
p4983
asg10
I3474
sg11
(lp4984
S':+1:'
p4985
aS":+1:\r\n\r\n// I'd also add `{}` to the `if`s.  "
p4986
aS':+1:'
p4987
aS'Great, thanks for contributing.'
p4988
asg14
S'eug:patch-1'
p4989
sbsI3475
(iPull
Pull
p4990
(dp4991
g3
S'The current baseline on i7 4770K, Windows 7 x64, Java 8u66:\r\n\r\n```\r\nBenchmark           (times)   Mode   Samples        Score  Score error    Units\r\nrangeFlatMapJust          1  thrpt         5 24242025,899  2299703,654    ops/s\r\nrangeFlatMapJust         10  thrpt         5  2536987,139   153629,364    ops/s\r\nrangeFlatMapJust       1000  thrpt         5    54154,325     4014,598    ops/s\r\nrangeFlatMapJust    1000000  thrpt         5       48,638        7,591    ops/s\r\nrangeFlatMapRange         1  thrpt         5  9331777,291   531241,251    ops/s\r\nrangeFlatMapRange        10  thrpt         5   388606,708    22875,097    ops/s\r\nrangeFlatMapRange      1000  thrpt         5     4164,424      266,850    ops/s\r\nrangeFlatMapRange   1000000  thrpt         5        4,354        0,575    ops/s\r\n```'
p4992
sg5
S'1.x: benchmark range + flatmap throughput.'
p4993
sg7
(lp4994
S'Performance'
p4995
asg10
I3475
sg11
(lp4996
S"I'm merging this to enable performance work. No need for additional likes as it doesn't affect the main."
p4997
asg14
S'akarnokd:FlatMapRangePerf1x'
p4998
sbsI3476
(iPull
Pull
p4999
(dp5000
g3
S"Changes to the scalar fast-path was inspired by the Project Reactor's `flatMap` which was in turn inspired by RxJava 2.x's implementation of `flatMap`.\r\n\r\n**Naturally, this will conflict with #3169 .**\r\n\r\nBenchmark for comparison (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10799061/27b6ff8a-7dab-11e5-8580-6dbbacadf430.png)\r\n\r\nJust by applying the scalar re-batching, the operator gained a massive 45% throughput increase, from **48 MOps/s** to **71 MOps/s**.\r\n\r\nWhen the range optimization is also applied, the improvement is even more impressive:  +60% throughput, from **48 MOps/s** to **79 MOps/s**.\r\n\r\nThe optimization doesn't really affect `rangeFlatMapRange`, it has a larger run-to-run variance due to GC.\r\n\r\nI'm experimenting with the 2.x branch as well and by applying these two optimizations, the throughput increasd from **40 MOps/s** to **58 MOps/s**. I'm investigating if switching to synchronized would help with the remaining overhead gap.\r\n\r\nNote also that the perf tests measure the operator overhead only."
p5001
sg5
S'1.x: overhead reduction for merge and flatmap'
p5002
sg7
(lp5003
S'Enhancement'
p5004
aS'Performance'
p5005
asg10
I3476
sg11
(lp5006
S'Rebasing...'
p5007
aS'... rebased, sort of.'
p5008
aS":+1:/2, I was able to understand what you did for `Merge`, but completely lost in tries of understanding what's going on in `Range`\xe2\x80\xa6 Those one-lettered variables make code totally unreadable :(\r\n\r\n@akarnokd can you please somehow improve readability of `slowPath` in `OnSubscribeRange`?\r\n\r\nPerformance improvement looks awesome, thank you for doing that!"
p5009
aS'For me, it is the opposite; reading long variable names and methods drains my focus. You can always post a cleanup PR.'
p5010
aS"@akarnokd there might be some happy medium here. Write your code using one\nletter variables. Finish up refactoring some names so more readable. These\nterse PRs are harder to evaluate and part of the evaluation is judging the\nauthor's intent based on variable naming.\n\nOn 11 November 2015 at 20:00, David Karnok <notifications@github.com> wrote:\n\n> For me, it is the opposite; reading long variable names and methods drains\n> my focus. You can always post a cleanup PR.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3476#issuecomment-155708962>.\n>\n"
p5011
aS"Fine, I've renamed the variables. Now it doesn't fit on my screen and I can't tell what is what because all variable names look the same at glance. Distinguishing between `e`, `n`, `r`, `i`, `o` is much easier; a performance optimization for the mind."
p5012
aS'Rebased onto main.'
p5013
aS':+1: '
p5014
asg14
S'akarnokd:FlatMapRangePerfFix1x'
p5015
sbsI3477
(iPull
Pull
p5016
(dp5017
g3
S'This specialized OnSubscribe performs ~33% better on longer streams.\r\n\r\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10802983/1ef4027a-7dc0-11e5-996a-9e9cf7033ed3.png)\r\n\r\nThe `slowpath` requests the available amount + 1 to trigger a slow path, `slowpath2` requests in batches of 128 and replenishes only after all were received.'
p5018
sg5
S'1.x: add a source onsubscribe which works from an array directly'
p5019
sg7
(lp5020
S'Enhancement'
p5021
aS'Performance'
p5022
asg10
I3477
sg11
(lp5023
S':+1: '
p5024
asg14
S'akarnokd:FromArray1x'
p5025
sbsI3478
(iPull
Pull
p5026
(dp5027
g3
S'This PR adds a perf test that measures what it takes to subscribe to a\r\nnon-backpressured and backpressured source and what is the effect of the\r\nmini-arbitration inside Subscriber.\r\n\r\nThis should enable investigations into why generally 1.x subscriptions have more overhead than 2.x.\r\n\r\nBenchmark (i7 4770K, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10804298/023f5772-7dc7-11e5-8cf4-abe03c1ab725.png)\r\n\r\nDirect overrides `setProducer` and requests directly. Started requests in the `onStart` method and Usual requests in the constructor.\r\n'
p5028
sg5
S'1.x: perf benchmark for the cost of subscribing'
p5029
sg7
(lp5030
S'Performance'
p5031
asg10
I3478
sg11
(lp5032
sg14
S'akarnokd:SubscribingPerf1x'
p5033
sbsI3479
(iPull
Pull
p5034
(dp5035
g3
S"This PR changes the internals of the `Subscriber` class to reduce its creation overhead by deferring the creation of the SubscriptionList until it is actually needed.\r\n\r\nBenchmark (i7 4770K, Windows 7 x64, Java 8u66)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10806351/14e6567e-7dd5-11e5-8c06-3716454ccbc7.png)\r\n\r\nFor no-backpressure sources, the throughput is now doubled for the safe case and improved by ~20% for the unsafe case. For a backpressuring source, the improvement is between 3-10% but the error ranges overlap.\r\n\r\nThere is one case where the the throughput halved for some reason. Since JITs are smart, my best guess is that generally the benchmark method gets stack-allocated instead of heap allocated, hence the very large amounts relative to a range(1, 1) benchmark (which tops at 24 MOps/s). \r\n\r\nHowever, the justStart case is worse than the baseline. My guess is that the `this` looks like it escaped and thus a regular heap allocation is required. I'll test this theory in the morning by blackholing the test `Subscriber`s before subscription thus forcing a heap allocation in each case.\r\n\r\nNote that `Subscriber` has now more synchronization which combined with the synchronization in `SubscriptionList` may increase the overhead elsewhere; I plan to run more benchmarks in the morning. The solution would be to inline the logic of `SubscriptionList` into `Subscriber` directly. \r\n\r\nNote also the recursive call to `add` and `unsubscribe` in case the `Subscriber` was created in sharing mode. In RxJava 1.x, operators like to share a single underlying `SubscriptionList` and if the chain is very long, that may prevent some JIT optimizations due to stack dept. The upside is that generally only a few resources are added to a `Subscriber`, especially in async operators, whose overhead may be shadowed by other things and thus not really a problem."
p5036
sg5
S"1.x: reduce subscriber's creation overhead"
p5037
sg7
(lp5038
S'Enhancement'
p5039
aS'Performance'
p5040
asg10
I3479
sg11
(lp5041
S"I've updated the `SubscribingPerf` to see what effect the isUnsubscribed implementation has and its not good: the throughput is generally reduced by ~20% due to the additional indirections:\r\n\r\nBenchmark comparison (i7 **4790**, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10813524/18512e74-7e20-11e5-9ac7-a38d3fe10431.png)\r\n\r\nI've run out of ideas; due to the structure of the 1.x classes and the mandatory resource management of `Subscriber` I don't believe subscribing can be improved any further without endangering the streaming performance."
p5042
asg14
S'akarnokd:SubscribingPerfFix1x'
p5043
sbsI3480
(iPull
Pull
p5044
(dp5045
g3
S"Note: this doesn't change any main class, just a perf class.\r\n\r\n  - Two of the tests used the wrong subscriber type.\r\n  - The benchmark layout allowed stack allocation instead of heap allocation and thus showing less overhead than expected. By letting consuming the `Subscriber`s via blackhole, this JIT optimization is negated as it should be.\r\n  - Added a benchmark which should help verify the overhead of checking `isUnsubscribed` within range in #3479 because I suspect that will get worse there.\r\n\r\nBenchmark values: (i7 **4790**, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10813246/16cbe7e4-7e1e-11e5-8de6-5bc1ffdb2739.png)\r\n"
p5046
sg5
S'1.x: update and bugfix to subscribingperf'
p5047
sg7
(lp5048
S'Bug'
p5049
aS'Performance'
p5050
asg10
I3480
sg11
(lp5051
sg14
S'akarnokd:SubscribingPerfUpdate'
p5052
sbsI3485
(iPull
Pull
p5053
(dp5054
g3
S'I forgot a NotificationLite conversion in the constructor. Note that\r\nthere were no tests verifying null behavior at all.'
p5055
sg5
S'1.x: fix scan() not accepting a null initial value'
p5056
sg7
(lp5057
S'Bug'
p5058
asg10
I3485
sg11
(lp5059
S':+1: '
p5060
asg14
S'akarnokd:ScanAllowNull1x'
p5061
sbsI3486
(iPull
Pull
p5062
(dp5063
g3
g57
sg5
S'1.x: remove unused imports'
p5064
sg7
(lp5065
S'Cleanup'
p5066
asg10
I3486
sg11
(lp5067
S':+1:'
p5068
aS':+1: '
p5069
aS':+1: '
p5070
aS"Let's merge this?"
p5071
aS'Thanks for the contribution.'
p5072
asg14
S'shoma2da:remove-unused-imports'
p5073
sbsI3487
(iPull
Pull
p5074
(dp5075
g3
S'Introduce a new interface BackpressureOverflowStrategy that allows implementing different handlers for an overflow situation.  This patch adds three implementations, reachable via OverflowStrategy:\r\n\r\n    static class OverflowStrategy {\r\n        static final BackpressureOverflowStrategy DEFAULT = Error.INSTANCE;\r\n        static final Error ERROR = Error.INSTANCE;\r\n        static final DropOldest DROP_OLDEST = DropOldest.INSTANCE;\r\n        static final DropLatest DROP_LATEST = DropLatest.INSTANCE;\r\n    }\r\n\r\nThe behavior for each is the following:\r\n\r\n- ERROR remains the default as the existing implementation.\r\n- DROP_LATEST will drop newly produced items after the buffer fills up.\r\n- DROP_OLDEST will drop the oldest elements in the buffer, making room for\r\n  newer ones.\r\n\r\nIn all cases, a drop will result in a notification to the producer by invoking the onOverflow callback.\r\n\r\nNone of the two new behaviours (DROP_*) will unsubscribe from the source nor onError.'
p5076
sg5
S'1.x: onbackpressurebuffer: drop_latest and drop_oldest'
p5077
sg7
(lp5078
S'Enhancement'
p5079
aS'Feature-Request'
p5080
asg10
I3487
sg11
(lp5081
S'Otherwise, it looks okay. :+1:'
p5082
aS'Thanks for the review @akarnokd'
p5083
aS'Rebased - @akarnokd let me know if there are any fixes pending.'
p5084
aS"Excellent. :+1:. I don't think there are conflicting PRs right now."
p5085
aS'Great :+1:, just a few nits.'
p5086
aS"Thanks @artem-zinnatullin & @akarnokd. Addressed Artem's comments."
p5087
aS':+1:'
p5088
aS'@abersnaze can you take a look and verify that it solves the issue raised in #3233?'
p5089
aS'Rebased on 1.x'
p5090
aS"The only concern that @abersnaze and I have had with this is that this uses enums to determine the strategy of operator functionality. This pattern hasn't been used much in the public API as of yet. @akarnokd @zsxwing do you guys have any opinion? We could just convert the strategies to instance methods (for consistency) or is this an emerging case that should be encouraged?"
p5091
aS"I wouldn't turn a the whole set of `onBackpressureXXX` into enums of Drop|Buffer|Latest because the pattern doesn't allow parametrizing just the Buffer variant. In this case, however, having 3-9 new overload feels unnecessary expansion of the public API. I'm in for the use of enums here, but we should store them in a reasonable subpackage."
p5092
aS"@akarnokd @stealthcode I don't love using enums in this way, but I agree with @akarnokd that this can lead to excessive API expansion.  But happy to move to methods if you guys prefer.  Ditto for moving the enums package from rx to rx.strategies or some similar alternative."
p5093
aS'Agree with @akarnokd \r\n\r\nI prefer to add a new interface `BackpressureOverflowStrategy` instead of `enum`.'
p5094
aS'I agree with @zsxwing on the use of an empty interface and impls to compare `instanceof` instead of using an enum. Eventually they might be usable to generalize the strategies. '
p5095
aS"Sounds good, I'll update the patch soon. Any suggestion on the package for the strategy?"
p5096
aS'Rebased'
p5097
aS"@stealthcode I've been busy these days, just returned to this. I had the same doubt re. BufferSubscribe reference, @akarnokd mind to clarify where it happens?\r\n\r\nI've fixed the visibility of OverflowStrategy members (new commit on the way)"
p5098
aS'Thanks for the addition.\r\nCould you also update the PR description?'
p5099
aS'@stevegury thanks for the review. PR fixed.'
p5100
aS"If I'm right the only missing thing is the header in `BackpressureOverflowStrategy.java`.\r\n@srvaroa could you add that?\r\n:+1: "
p5101
aS'Wait, it has still the problem of exposing internal classes and types into the public API:\r\n\r\n```java\r\nboolean triggerOn(rx.internal.util.BackpressureDrainManager.BackpressureQueueCallback buffer) throws MissingBackpressureException;\r\n```\r\n\r\nIn addition, for a proper instance of BackpressureOverflowStrategy, you have to reach into \r\n\r\n```java\r\nrx.internal.operators.OperatorOnBackpressureBuffer.ON_OVERFLOW_DEFAULT\r\n```\r\n\r\nfor example.'
p5102
aS"Thanks @akarnokd @stevegury \r\n\r\nI'm submitting a patch that eliminates the internal API leak. \r\n\r\nWhile doing it I'm starting to realize that without exposing the buffer or callback the motivation for a strategy vs a plain enum practically dissapears.  The point of using a strategy was to give users ability to implement their own strategies, this led me to expose the internal buffer (which is bad, obviously). However, without it, we're basically doing the same as an enum as the real overflow behaviour is not really in the Strategy.  It actually feels redundant with the onOverflow callback.\r\n\r\nTo make the strategy worth the extra code we'd need to make BufferSubscriber implement some public API interface defined by BackpressureOverflow through which we allow the user to actually interact with the buffer without leaking the internal API. Something like:\r\n\r\n```\r\nBPBuffer {\r\n  boolean dropOldest()\r\n  ...\r\n}\r\n```\r\nAnd then:\r\n\r\n```\r\nBPStrategy {\r\n  boolean triggerOn(BPBuffer buffer)  \r\n}\r\n```\r\nThis would become similar to my current patch (https://github.com/srvaroa/RxJava/commit/b09061048f34f539bbc022e846e7361ae6e38606) and enable meaningful strategies without leaking APIs. That said, I think that would be overengineering this patch.\r\n\r\nOptions I see:\r\n\r\na) revert to enums (problem: we're introducing an enum-based public API).\r\nb) leave the patch I'm submitting next (problem: we're committing to a public API based on a Strategy that doesn't really define any behaviour).\r\nc) define BPBuffer and BPStrategy for the sake of introducing a meaningful strategy-based API. I ca call triggerOn() with a null for now (so it effectively behaves as -b-) and proceed with making BufferSubscriber extend BPBuffer in a later patch.\r\n\r\nI'm leaning for (a), but let me know what you prefer."
p5103
aS'The current API looks good enough to me, only some small visibility and annotation issues.'
p5104
aS'Thanks for the reviews, I updated the patch.'
p5105
aS':+1:'
p5106
aS'Thanks @srvaroa for taking the time of writing a good PR!\r\n:+1:'
p5107
aS':+1: thanks!'
p5108
asg14
S'srvaroa:1.x'
p5109
sbsI3488
(iPull
Pull
p5110
(dp5111
g3
S'Replace them all with their respective Atomic* counterparts\r\nFor example AtomicLongFieldUpdater -> AtomicLong\r\nAddresses https://github.com/ReactiveX/RxJava/issues/3459'
p5112
sg5
S'1.x remove all instances of atomic*fieldupdater'
p5113
sg7
(lp5114
S'Bug'
p5115
aS'Performance'
p5116
aS'Question'
p5117
asg10
I3488
sg11
(lp5118
S"There is a reason for `AtomicFieldUpdater` + `volatile` value \xe2\x80\x94 lower memory consumption (cc @akarnokd), but personally, I'd like to switch to `Atomic` fields too to get rid of reflection in such hot code.\r\n\r\n#3459 is Samsung's problem. Even though we see it in our apps (somebody told me that it's about 5% of Samsung devices of our users) I don't think that such platform specific bugs should be solved on library side."
p5119
aS'As @artem-zinnatullin mentioned, field updaters were introduced to reduce number of allocations and runtime size of the library; especially for the Android platform.\r\n\r\nAlthough field updaters have 1-5% overhead compared to Unsafe, the same overhead may manifest with Atomic instances due to the one level indirection, plus usually the surrounding logic forces a re-read of the AtomicXXX field all the time if not done with care.\r\n\r\nSee my other comments in the code.'
p5120
aS"I've finished my review."
p5121
aS'Thanks for the quick review'
p5122
aS'@akarnokd I think I addressed all your feedback'
p5123
aS'Generally looks okay now. Could you squash your commits into a single commit?'
p5124
aS'Sure thing. Squashed'
p5125
aS'Thanks.'
p5126
aS'The changes look okay. Could you do a comparison benchmark of OperatorObserveOnPerf mainly (and post the comparison image made via [JMH-Compare-GUI](https://github.com/akarnokd/jmh-compare-gui) ) ?'
p5127
aS"I started a run on this branch now using `./gradlew benchmarks '-Pjmh=.*OperatorObserveOnPerf.*'`. The ETA for that is in over 2 hours. Does that seem right?"
p5128
aS"I ran JMH yesterday for this commit and the preceding one. The results are on my computer at home, and I'm at work now. I'll post them when I get back"
p5129
aS"Here is the screenshot. The first result is from 51527b7d17652a493e2c73f8724ebc62253a7e4b, the second one is from after the changes in this pull request:\r\n![image](https://cloud.githubusercontent.com/assets/964550/11078097/88f7d050-87b8-11e5-8f0e-a2c909688a79.png)\r\n\r\n@akarnokd I'm not sure if I used the GUI right. I can't get it to use something as a baseline. I pasted the result from 51527b7d17652a493e2c73f8724ebc62253a7e4b first, and then the result from this pull request. Do I need to do something else?"
p5130
aS'Right click in a cell and you get a popup menu with options.'
p5131
aS'Otherwise, no performance regression. :+1:'
p5132
aS':+1: '
p5133
aS':+1:, few nits. Looks like @akarnokd wants local copies of `final` references, but I don\'t, though I\'m ok with having them \xe2\x80\x94 you can just fix `@SuppressWarnings("unused")`. \r\n\r\n@akarnokd can you please give a link or describe how local copy of `final` reference will help? I mean, JIT will ~100% won\'t make re-reads of `final` references until it detect change of the reference via reflection. Or I\'m wrong?'
p5134
aS'Keep the locals as I suggested. JIT re-reads them unfortunately. I read and experienced this myself with JCTools queries and range().'
p5135
aS"That's sad. Okay, then just SuppressWarnings need to be fixed.\n\nNetflix team: can we expect 1.0.16 soon? As mentioned in the original issue\nthis PR would prevent crashes in many apps.\n\nOn Wed, Nov 11, 2015, 11:24 David Karnok <notifications@github.com> wrote:\n\n> Keep the locals as I suggested. JIT re-reads them unfortunately. I read\n> and experienced this myself with JCTools queries and range().\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3488#issuecomment-155701813>.\n>\n-- \n\n@artem_zin\n"
p5136
aS'@artem-zinnatullin I removed the erroneous annotations'
p5137
aS':+1:, thanks!'
p5138
aS'Please squash this again.'
p5139
aS'Done'
p5140
aS'Thanks for contributing.'
p5141
asg14
S'markrietveld:1.x'
p5142
sbsI3491
(iPull
Pull
p5143
(dp5144
g3
S"It turns out serializing `request()` calls with regular `onXXX()` calls can be problematic because a `request()` may trigger an emission of events which then end up being queued (since `emitting == true`). If the request is large and the queue otherwise unbounded, this will likely cause OOME.\r\n\r\nIn case of `scan`, the fix was to make the missing request accounting and arrival of the `Producer` independent of the event's emitter loop; there is no need for them to be serialized in respect to each other.\r\n\r\nIn case of the `ProducerObserverArbiter` where the request accounting and producer swapping has to be serialized with the value emission, the solution is to call `request()` outside the emitter-loop.\r\n\r\nThere shouldn't be any issue with 2.x `scan()` because in 2.x, scan receives the `Subscription` before it allows the downstream to request anything so there is no missing requested to be handled.\r\n\r\nThis should resolve #3490. As far as I can remember, no other operator should have such problems because all others use `ProducerArbiter` which is independent of `onXXX` emission serializations."
p5145
sg5
S"1.x: make scan's delayed producer independent of event serialization"
p5146
sg7
(lp5147
S'Bug'
p5148
asg10
I3491
sg11
(lp5149
S"Can we get this one reviewed and in a release soon please? This is a blocker for me and precludes me using 1.0.15 and 1.0.16. It's a serious bug with `scan` and I'm nervous for others too that this is out there in another release (1.0.16)."
p5150
aS'Is `ProducerObserverArbiter` used in the public API? It appears to only be in use in the tests. '
p5151
aS'It was added as a tool for building operators but I usually inline the algorithm.'
p5152
aS"Okay. So it's more like a pattern that gets pasted into operators. Do you usually inline for performance reasons or for custom functionality? "
p5153
aS':+1: '
p5154
asg14
S'akarnokd:ScanUnboundedRequestFix1x'
p5155
sbsI3493
(iPull
Pull
p5156
(dp5157
g3
S'Reported in #3492.'
p5158
sg5
S'1.x: fix for zip(obs<obs<t>>) backpressure problem'
p5159
sg7
(lp5160
S'Bug'
p5161
asg10
I3493
sg11
(lp5162
S':+1: '
p5163
asg14
S'akarnokd:ZipBackpressureFix1x'
p5164
sbsI3495
(iPull
Pull
p5165
(dp5166
g3
S"This add a perf class that benchmarks just() and optimizations it allows. I'll use this as a baseline to compare the upcoming backpressure-aware version against.\r\n\r\nBenchmark results of throughput (ops/s) (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10963349/0d15c6e8-83a0-11e5-9f28-646b57d08879.png)\r\n"
p5167
sg5
S'1.x: benchmark just() and its optimizations.'
p5168
sg7
(lp5169
S'Performance'
p5170
asg10
I3495
sg11
(lp5171
sg14
S'akarnokd:JustPerf1x'
p5172
sbsI3496
(iPull
Pull
p5173
(dp5174
g3
S'One does not simply add backpressure support to `just()`.\r\n\r\nFixes\r\n------\r\nThe reason for this is the bugs hidden by the lack of backpressure support of just(): the overwriting of a previous Producer by `timeout`, `zip` and `subscribeOn`. I\'ve fixed up `timeout` with a proper `ProducerArbiter`, had to apply the bugfix from #3493 to `zip` (may conflict) and had to rewrite `subscribeOn` from scratch and have it an `OnSubscribe`. This change required that `Single.subscribeOn` to be rewritten as well.\r\n\r\nBenchmark\r\n----\r\nLet\'s see the benchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/10972989/ec1eb288-83db-11e5-951c-48840b165b7e.png)\r\n\r\nThere are two ways to implement backpressure: with strong atomics or with plain field accesses. The latter tries to exploit the high chance that there won\'t be concurrent calls to `request()` ever and thus saves on the atomics. As far as I can tell, there is nothing in RxJava 1.x or 2.x that would violate this assumption. However, I added an escape hatch in case of rogue requesters: set the `rx.just.strong-mode` system parameter to "true" and `just` will run with strong atomics.\r\n\r\nAs seen in the table, the weak version is just slightly better (+3-+10%) in some cases and slightly worse (up to -3%) in other cases. Note, however, the original cases have 2x-5x less overhead. \r\n\r\nMaybe the most revealing are the `simple`, `simpleEscape` and `simpleEscapeAll` comparison between and within version. What\'s seen there is that with the original version, the JIT converted the test into a pure stack-allocation and thus saving on overhead in the `simple` case. As the other tests add escapes, it forces the JIT to do regular allocations. Interesting that with this PR, the escape doesn\'t really matter: this is due to how `Subscriber.setProducer` makes the JIT believe the producer escapes.\r\n\r\nIn the `simpleEscapeAll` (which should be the most restrictive for JIT), the overhead is still 2 - 2.3 times bigger: this is due to the extra allocation of a `Producer` instance when subscribing.\r\n\r\nIf one remembers my recent [blog post](http://akarnokd.blogspot.hu/2015/10/comparison-of-reactive-streams.html), it can be seen that RxJava 2.x does quite well, about 30 Mops/s in the range-1 test (which is equivalent to `simple`). \r\n\r\nWhere does the overhead come from? `SubscriptionList`. In 1.x, the `Subscriber` creates a `SubscriptionList` whether or not it is ever required. (I\'ve tried my best several times to defer the creation of this list to no success: the performance improved for some cases while worsened for others, see #3479.)\r\n\r\nThe strong/weak optimization is not applied to `scalarScheduleOn`. I haven\'t benchmarked it but I guess the scheduling overhead overshadows it anyways.\r\n\r\nConclusion\r\n------\r\n\r\nI believe the correctness of `just` is more important than its performance, but the increased overhead bothers me nonetheless. Given the architecture of 2.x, I\'ll look into ways to get rid of the mandatory `SubscriptionList` allocation without breaking public API classes such as `Subscriber`.'
p5175
sg5
S'1.x: make just() support backpressure'
p5176
sg7
(lp5177
S'Bug'
p5178
aS'Enhancement'
p5179
aS'Performance'
p5180
asg10
I3496
sg11
(lp5181
S'Rebased.'
p5182
aS'Interesting. Thanks! :+1: '
p5183
aS'This should probably be checked out by @benjchristensen before merging'
p5184
aS'Just to check, you are fine with the overhead, right?'
p5185
aS'@akarnokd yes. I think consistent behavior is worth the hit. '
p5186
aS':+1: '
p5187
aS'Any plans to merge this one?'
p5188
aS'We are waiting for Ben but I have to fix the merge conflict as well now I see.'
p5189
aS"Sorry, I'll redo this entire PR, everything is messed up."
p5190
aS'Replaced by #3614 '
p5191
asg14
S'akarnokd:JustBackpressure1x'
p5192
sbsI3497
(iPull
Pull
p5193
(dp5194
g3
S"The internal queue has to be trimmed while the source is active and the\r\nbackpressured-replay shouldn't drop values in case the requests are\r\ndelayed relative to each other."
p5195
sg5
S'2.x: fix takelast(time) replay behavior causing discontinuity'
p5196
sg7
(lp5197
S'Bug'
p5198
asg10
I3497
sg11
(lp5199
S'Closing, will be included in the complete backport PR.'
p5200
asg14
S'akarnokd:TakeLastTimedFix2x'
p5201
sbsI3498
(iPull
Pull
p5202
(dp5203
g3
S'~~The parameter is a capacity hint, but more frequently confused with a\r\nbuffer size like replay(int) than it is correctly understood. It also\r\noffers no guarantees, only the weak hope of optimization.~~\r\n\r\nThe parameter is a capacity hint, but more frequently confused with a buffer size like replay(int) than it is correctly understood. It also offers no guarantees, only the weak hope of optimization.\r\n\r\nThis change renames the method, deprecating the old name. It also adds javadoc calling out that the parameter is not a bound and referencing replay(int).autoConnect() as a way to achieve that behavior.\r\n\r\n'
p5204
sg5
S'1.x: rename cache(int) to cachewithinitialcapacity(int)'
p5205
sg7
(lp5206
S'Discussion'
p5207
asg10
I3498
sg11
(lp5208
S"Hi. It is part of the public API and can't be just removed. In addition, why did you modify the underlying internal class?"
p5209
aS"How about `@Deprecated`?\r\n\r\nI modified the internal class because the only use of that constructor parameter was in the removed operator.  If you'd prefer to deprecate, of course I'll revert that modification."
p5210
aS'We are kind of set for 1.1 in terms of API visibility. How about updating the javadoc and list alternatives?'
p5211
aS"I've pointed developers directly at that javadoc, and they've still misunderstood the parameter.  And that's best case!  Any developer who just looks at the signature, which is most of them, misunderstands the parameter. Everyone assumes it's a bound on the buffer size, and it's so obvious that why would you read the javadoc?\r\n\r\nIt'd be great to get this resolved in the 1.x series.\r\n"
p5212
aS"Huge +1 to `@Deprecated` + simlink like `cacheWithInitialBufferSize`/etc, `cache(int)` is very, very misleading (every member of our team had problems with understanding that `int` is not a size of the cache's buffer)."
p5213
aS'Updated with rename, deprecation, and javadoc.'
p5214
aS':+1: '
p5215
aS'You can post a PR against 2.x where you can simply rename and no need for deprecation.'
p5216
aS"@stealthcode, @abersnaze what's the situation among Netflix devs regarding this?"
p5217
aS'ping Netflix team'
p5218
aS"From what I can tell, this is a change to an existing public facing method name and that's a no-no for 1.x. @abersnaze is committing a change to the contributors.md that explains what changes are allowed in patch release, minor releases, and major releases. Method signatures of non-beta and non-experimental methods are only accepted in major version releases. \r\n\r\nYou could mark both as deprecated and add a new method `cacheWithCapacityHint(int)`."
p5219
aS"Well, that's what @loganj did in his PR :) No breaking changes, deprecation\nand new method.\n\nOn Thu, Nov 19, 2015, 00:27 Aaron Tull <notifications@github.com> wrote:\n\n> From what I can tell, this is a change to an existing public facing method\n> name and that's a no-no for 1.x. @abersnaze <https://github.com/abersnaze>\n> is committing a change to the contributors.md that explains what changes\n> are allowed in patch release, minor releases, and major releases. Method\n> signatures of non-beta and non-experimental methods are only accepted in\n> major version releases.\n>\n> You could mark both as deprecated and add a new method\n> cacheWithCapacityHint(int).\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3498#issuecomment-157869687>.\n>\n-- \n\n@artem_zin\n"
p5220
aS'Oh, I see. I misread the pull request. '
p5221
aS"I don't see the source of the confusion. `java.util.ArrayList` follows a similar convention in the constructor `public ArrayList(int initialCapacity)` and that is sufficient for me to understand it's usage. The array backed data type can be reallocated but it's better to tune it with an appropriate initial value. \r\n\r\nI suggest that we leave it alone in 1.x and rename it to `cacheUnbounded(int initialCapacity)` in 2.x. Also we should improve the javadocs to indicate the intended usage since there still seems to be confusion around this. "
p5222
aS'A list is a data structure designed to grow. When you see `cache(4)` you do not think of a list, but of a fixed size cache, as most will be bounded by some supplied value.\r\n\r\nAdditionally, an initial size is not required to create an array list and it\'s a constructor parameter. Not only do you have to opt-in to using this non-default constructor overload, you would have to look at the documentation for any idea what the value is for. This is _very_ different in that the size is required and it\'s a named method which should describe behavior but is misleading because of prior assumptions around the word "cache".'
p5223
aS'@JakeWharton the `cache` operator does not use a fixed size cache. I think that you are saying that the operator name should be enough to to convey the semantic meaning of an unbounded growing cache. I think that by renaming it to `cacheUnbounded(int initialCapacity)` that the usage will be made more clear and it would be discoverable by users who know to look for the `cache` operator. \r\n\r\nIf the term "cache" is not sufficient to indicate the contract then we should probably consider changing the name to one that does. What would be a better term for an operator that holds an ordered list of all events emitted from an observable to be replayed to all subscribers after the first?'
p5224
aS"@stealthcode Hence the name `cacheWithInitialCapacity`, introduced in this PR.  That name implies it's unbounded _and_ describes the integer parameter."
p5225
aS"To clarify: I don't really care what it's called in 2.x, as long as it's reasonably unambiguous (i.e., not `cache(int)`)."
p5226
aS"@JakeWharton I think @stealthcode was agreeing that a new method name would make it clearer but not that `cacheWithInitialCapacity` or that it should be done on the 1.x branch.\r\n\r\nI'm not very interested in spending a lot of energy bike shedding over the name so can we just have a vote for we want to do: (vote for as many options as you want in the order or preference)\r\n\r\nA) do nothing\r\nB) deprecate `cache(int)` and make `cacheWithInitialCapacity(int)` in 1.x\r\nC) deprecate `cache(int)` and make `cacheUnbounded(int)` in 1.x\r\nD) remove `cache(int)` and make `cacheWithInitialCapacity(int)` in 2.x\r\nE) remove `cache(int)` and make `cacheUnbounded(int)` in 2.x\r\n\r\nMy vote is A, E, C, D, B.\r\n\r\n@loganj @stealthcode @akarnokd @JakeWharton @artem-zinnatullin.  We'll [tabulate](https://en.wikipedia.org/wiki/Single_transferable_vote) the votes on Monday."
p5227
aS'My vote is A, E'
p5228
aS'I vote E, A, C'
p5229
aS'I vote B, D, A'
p5230
aS"B.\n\nFor 2.x I'd prefer to get rid of cache or replay and leave only one\noperator with different settings without autoconnection by default:\ncacheWithLimit/replayWithLimit, cacheUnbounded /replayUnbounded, etc.\n\nOn Sat, Nov 21, 2015, 00:26 David Karnok <notifications@github.com> wrote:\n\n> My vote is A, E\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3498#issuecomment-158528544>.\n>\n-- \n\n@artem_zin\n"
p5231
aS'I would like @JakeWharton votes but so far the A is the winner.'
p5232
aS'B, C, D, E.  presuming a change in 1.x means also making the change in 2.x.\r\n\r\nWe have empirical evidence that the name and parameter are confusing to users. I can\'t imagine why we\'d ignore that evidence based on our own lack of confusion.\r\n\r\nI also think it\'s funny that this balloting gives a single "do nothing" equal weight to four "do something" options.  By my count, "do something" is winning even before my vote.'
p5233
aS"B, C myself.\r\n\r\nI think it's just confusing and have been bitten by `cache(int)` before."
p5234
aS'I vote B'
p5235
aS'E&C then D&B then A\n\nOn Fri, Nov 20, 2015, 7:16 PM Michael Bailey <notifications@github.com>\nwrote:\n\n> I vote B\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3498#issuecomment-158565037>.\n>\n'
p5236
aS'I think that E&C equate to to just C... (assuming that all api changes made in 1.x are carried over). '
p5237
aS"B won and I'm fine with that. @loganj could do the honors of changing this PR to match. Just to be clear that means that `Observable` will have the methods, `cache()`, `@Deprecated cache(int)` and `cacheWithInitialCapacity(int)` rebased to one commit off of the 1.x branch."
p5238
aS"Ping @loganj, let's do it!"
p5239
aS'Updated to specified naming. Apologies for the delay, was traveling on vacation.'
p5240
aS':+1:'
p5241
aS':+1: '
p5242
asg14
S'loganj:remove_capacity_hint'
p5243
sbsI3499
(iPull
Pull
p5244
(dp5245
g3
S'It comes up quite frequently that one wants to map values and throw exceptions from within the same function (for example, when dealing with blocking IO that may throw `IOException`). It can be inconvenient to use try-catch and gift-wrap the checked exception into a `RuntimeException`.\r\n\r\nThis PR adds a `Func1E` functional interface which has a generic exception parameter as well and the operator `mapIO` that accepts it. Changing the existing `map` is out of question because of binary compatibility.'
p5246
sg5
S'1.x: operator mapio which is like map but allows checked exceptions'
p5247
sg7
(lp5248
S'Discussion'
p5249
aS'Enhancement'
p5250
aS'Feature-Request'
p5251
asg10
I3499
sg11
(lp5252
S"Why `mapIO` if it's agnostic to any checked exception? I realize that's the motivating use case, but it's not the implementation (nor does it have anything to do with IO)."
p5253
aS"The operator naming is up for discussion, I suggested `mapIO` because this is the shortest one that made sense to me. We can't overload `map()` due to dynamic languages and problems with arity-based lambda disambiguation in compilers."
p5254
aS"Perhaps `mapChecked`. \r\n\r\nBy the way in v2 have we considered designing `Func*` so it throws `Exception ` (generic or otherwise)?  It strikes me as quite a drawback of v1 that when say an `IOException` is thrown by a `Func1` that that exact exception isn't the one that arrives at the subscriber. Instead we are forced to throw a `RuntimeException` of some kind which though it might wrap the `IOException` is not it! Of course there would be the added benefit of no try catch blocks as well.\r\n\r\nIncidentally for Java 8 purposes I use a utility class I call [`Checked`](https://github.com/davidmoten/rxjava-extras/blob/master/src/main/java/com/github/davidmoten/rx/Checked.java) like below which wraps Actions and Funcs with RuntimeExceptions:\r\n\r\n```java\r\nsource.doOnNext(Checked.a1(s -> os.write(s.getBytes())))\r\n```\r\n\r\nThough `Checked` is reasonably convenient I would still prefer that the exact Exception thrown arrived at the subscriber in general. This is presumably doable in v2 (and @abersnaze  had some nifty ideas for v1 ages ago in #1305)."
p5255
aS"In current v2, I'm using as much Java 8 as possible and unfortunately, Java 8 doesn't have standard functional interfaces that specify throws. I know that `map` is a common pain point. Given `mapIO`, you can replace the sideeffecting `doOnNext` with it so we can avoid drastic API expansion.\r\n\r\nI've been also thinking about a `mapAction` operator where the lambda function has options to return a value, skip a value, throw/complete with an error and complete the sequence. Like fusing `mapIO`, `filter` and `takeWhile` into a single access point.\r\n\r\n```java\r\ninterface MapActions<T, R, E extends Exception> {\r\n    T input();\r\n    void output(R r);\r\n    void error(E e);\r\n    void skip();\r\n    void stop();\r\n}\r\n\r\npublic <R, E extends Exception> Observable<R> mapAction(\r\n    Action1E<MapActions<T, R, E>, E> mapper);\r\n```"
p5256
aS"I'm not to fond of a more functions on rx.Observable, operator implementation code, and test for implementation. I guess I would be ok with @davidmoten [`Checked`](https://github.com/davidmoten/rxjava-extras/blob/master/src/main/java/com/github/davidmoten/rx/Checked.java) but would've preferred #1305."
p5257
aS"I would also prefer the changes in #1305. Cursory tests of the solution in @abersnaze's pull request show that it's simple to use either a checked interface or unchecked. \r\n\r\n```java\r\npublic interface Action1Checked<T1> extends Action {\r\n    public void call(T1 t1) throws Exception;\r\n}\r\npublic interface Action1<T1> extends Action1Checked<T1> {\r\n    public void call(T1 t1);\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    bar(o->{});\r\n    foo(o->{throw new Exception();});\r\n}\r\n\r\npublic static void foo(Action1Checked<Object> a) {\r\n    try {\r\n        a.call(new Object());\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n\r\npublic static void bar(Action1<Object> a) {\r\n    a.call(new Object());\r\n}\r\n```\r\n\r\n@benjchristensen @headinthebox @akarnokd how should this operate in 2.x? \r\n\r\na) support throwing checked exceptions\r\nb) have both checked and unchecked variant of each operator that's popular enough to warrant one\r\nc) current support model of just funcs/actions that throw only runtime exceptions\r\n\r\nI think we should support this case first class instead of fight against the language feature. We can't force users to write funcs and actions where all exceptions are appropriately caught and handled so the code to handle any runtime exception must be written and maintained."
p5258
aS"Maybe this would just confuse people using 1.x so let's stick to utility wrappers (or perhaps sneaky throwers?).\r\n\r\nAs for 2.x, `fromCallable` already allows a throwing lambda and me may go for custom `FunctionE` for `map` and `flatMap` as these seem to be the main targets for checked-exception requiring operations."
p5259
aS"I'm afraid that if we will start adding exception-tolerant versions of operators we will end up 1.5-2xing amount of operators in RxJava 1.x.\r\n\r\n@akarnokd, others: what if we will make all or as much as possible operators exception-tolerant in RxJava 2.x and leave 1.x as is?"
p5260
aS"I'm closing this and we can revisit the problem in 2.x later on."
p5261
asg14
S'akarnokd:MapIO1x'
p5262
sbsI3500
(iPull
Pull
p5263
(dp5264
g3
S'Nothing that could change logic or application flow, just minor refactors to be consistent with good practices and clean code.\r\nTo sum up changes:\r\n- Simplified some conditions\r\n- Changed small l to L in long number, as l tends to look like 1 and might confuse\r\n- Removed "return" statements where those are not necessary (last instruction in function)\r\n- Inlined returns where there were no need for creating new variable (easier to read)\r\n- Deleted unnecessary colons'
p5265
sg5
S'some code clean ups.'
p5266
sg7
(lp5267
S'Cleanup'
p5268
asg10
I3500
sg11
(lp5269
S'Could you also squash the commits?'
p5270
aS'Squashed :)'
p5271
aS':+1:'
p5272
aS':+1: '
p5273
aS'looks good.'
p5274
asg14
S'dromato:1.x'
p5275
sbsI3501
(iPull
Pull
p5276
(dp5277
g3
S"// Actually, I am slowly preparing RxJava for running tests on Android during CI.\r\n\r\nNetflix team: PTAL, hope you're ok with new rxjava-project plugin."
p5278
sg5
S'1.x: gradle wrapper 2.8, rxjava project plugin 3.0.0'
p5279
sg7
(lp5280
S'Build'
p5281
asg10
I3501
sg11
(lp5282
S':+1:'
p5283
aS'Out of curiosity, what happened to this?'
p5284
aS"Sad story :( \r\n\r\nPR was not merged for 2 months and I decided to close it because Gradle shipped two releases after 2.8. \r\n\r\nNetflix team didn't show any interest. \r\n\r\nI guess Gradle 2.11 will be released sooner than your PR with 2.10 will be merged, though I wish you good luck! "
p5285
aS'@akarnokd can you provide any insight?'
p5286
aS'See #3659. I use 2.8 without Netflix plugin in my other projects, RxJava breaks from time to time.'
p5287
asg14
S'artem-zinnatullin:gradle-2.8-rxjava-project-3.0.0'
p5288
sbsI3504
(iPull
Pull
p5289
(dp5290
g3
S'These changes may help in reducing problems when the tests are run on an Android emulation:\r\n\r\n  - set an uncaught exception handler because the native error handler crashes the entire test run.\r\n  - reduce memory usage by some tests by doing fewer loops or items.\r\n  - fix a missing backpressure case as Android starts threads much slower (100ms?).'
p5291
sg5
S'1.x: test adjustments to reduce problems when tests run on android'
p5292
sg7
(lp5293
S'Test'
p5294
asg10
I3504
sg11
(lp5295
S'Adjusted tests as requested.'
p5296
aS'@akarnokd now `testErrorThrownIssue1685` fails on CI'
p5297
aS"I've increased the wait to 1s, let's hope that's enough waiting time. Travis tends to have some strange thread delays."
p5298
aS':+1: '
p5299
aS'Can we merge this, please? Required for running tests on Android during the CI #3503.'
p5300
aS':+1: '
p5301
aS':+1: '
p5302
asg14
S'akarnokd:AndroidTestFixes'
p5303
sbsI3506
(iPull
Pull
p5304
(dp5305
g3
S"This change factors out the body of `lift()` into a named class that gives access to the operator and source parameters. By using this information, other operators can perform what I call **operator macro-fusion**.\r\n\r\nOne such example with this PR is the repeated use of the operator `mergeWith` which when done in the classical way creates a long linked-list of sources merged in pairs, often leading to stack overflows\r\nand degraded performance. However, if `mergeWith` can see that it is applied to an existing mergeWith, the two operators can use a common list of sources and then turn into a one-level merge() with n + 1\r\nsources (the previous graph will then be GC'd). Don't worry, this doesn't destroy the original assembled sequence. For example, given `c = a.mergeWith(b); d = c.mergeWith(e);` both c and d can be freely subscribed to and still do the same thing.\r\n\r\nNote also that this PR conflicts with PR #3477 since the array-based `merge(from(os))` has a different type.\r\n\r\nI didn't officially benchmarked this due to the stackoverflow with head. Given the 10002 values merged in the unit test in 34ms (i7 4790, Windows 7 x64, Java 8u66) which yields ~294 kOps/s."
p5306
sg5
S'1.x: enable operator/source fusion by named operator lifter'
p5307
sg7
(lp5308
S'Performance'
p5309
asg10
I3506
sg11
(lp5310
sg14
S'akarnokd:OnSubscribeLift'
p5311
sbsI3507
(iPull
Pull
p5312
(dp5313
g3
S"This PR is a backport of the 2.x `combineLatest` with `null` support and let's the programmer combine more than 128 sources at once. Note that 2.x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment; I kept these in case such features are required by 1.x some day.\r\n\r\nThe original had this 128 limit due to using a single and non-parametric RxRingBuffer to store values from sources. In addition, the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the buffer.\r\n\r\nThis PR uses an unbounded-linked SPSC queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary).\r\n\r\nThe algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream, that source subscriber gets the request() replenishment call that generated the row."
p5314
sg5
S'1.x: combinelatest can now combine arbitrary number of sources'
p5315
sg7
(lp5316
S'Enhancement'
p5317
asg10
I3507
sg11
(lp5318
S"@artem-zinnatullin  I didn't bother but now I'm more sensitive to Android reflection issues."
p5319
aS'Rebasing...'
p5320
aS"... rebased. (Did I mention rebase doesn't really work with the latest Eclipse; there is no continue/abort menu option and the branch gets stuck and needs to be manually deleted as switching is also disabled)."
p5321
aS"You can use IntelliJ IDEA community edition, it's free and awesome.\n\nOn Wed, Nov 11, 2015, 13:30 David Karnok <notifications@github.com> wrote:\n\n> ... rebased. (Did I mention rebase doesn't really work with the latest\n> Eclipse; there is no continue/abort menu option and the branch gets stuck\n> and needs to be manually deleted as switching is also disabled).\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3507#issuecomment-155729338>.\n>\n-- \n\n@artem_zin\n"
p5322
aS"I've tried it a few times and it is too alien for me. I can't find features and its internal compiler plays tricks with me sometimes."
p5323
aS'we need this one, pls merge'
p5324
aS':+1: from me (test needs a fix), @zsxwing can you please take a look?'
p5325
aS'Closing out, some unknown merge conflicts appeared, maybe due to age.'
p5326
aS'See #3661'
p5327
asg14
S'akarnokd:CombineLatestManySources1x'
p5328
sbsI3509
(iPull
Pull
p5329
(dp5330
g3
S"It seems some Samsung devices running 5.x mess with field names so\r\nreflection can't find them.\r\n\r\nIf the `PlatformDependent.resolveAndroidApiVersion` logic throws due to\r\nthe missing field (but not the class), the original code considered it\r\nto be a non-Android platform and went ahead with `Unsafe` stuff which\r\ncauses NPEs at many places.\r\n\r\nThe change splits the class check and the version check. If the version\r\ncheck fails, it returns a default version (7) value so the `Unsafe`\r\npaths are not triggered."
p5331
sg5
S'1.x: split android detection and version detection'
p5332
sg7
(lp5333
S'Bug'
p5334
asg10
I3509
sg11
(lp5335
S"If Samsung runtime renames fields in all classes (even `android.os.Build`)  it would break way more libraries that use reflection on fields, especially JSON parsers/serializers and we will have tons of crashes on such devices. \r\n\r\nI mean, this workaround will probably never work.\r\n\r\ncc other Android devs, maybe I'm missing something, but I don't think that this PR will fix Samsung problem."
p5336
aS'Yes. This class and field can never be renamed or the entire phone would fail to work.'
p5337
aS"Is there a chance Samsung uses some whitelist that doesn't touch most common libraries but messes with others?"
p5338
aS"Highly unlikely. It seems like a simple reflection bug as people have\nconfirmed the field is named correctly at runtime.\n\nOn Mon, Nov 9, 2015, 1:25 PM David Karnok <notifications@github.com> wrote:\n\n> Is there a chance Samsung uses some whitelist that doesn't touch most\n> common libraries but messes with others?\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3509#issuecomment-155147020>.\n>\n"
p5339
asg14
S'akarnokd:RobustAndroidVersionCheck'
p5340
sbsI3510
(iPull
Pull
p5341
(dp5342
g3
S"I forgot to add the choice because 2.x `SpscArrayQueue` doesn't use Unsafe. I copied the `SpscAtomicArrayQueue` from #3169 and I hope it won't conflict. This is the drawback of long trail of unmerged fixes and enhancements...\r\n\r\nReported in #3508 . "
p5343
sg5
S'1.x: eager concatmap to choose safe or unsafe queue based on platform.'
p5344
sg7
(lp5345
S'Bug'
p5346
asg10
I3510
sg11
(lp5347
S':+1: '
p5348
asg14
S'akarnokd:EagerConcatMapUnsafeFix'
p5349
sbsI3511
(iPull
Pull
p5350
(dp5351
g3
S'Use the standard CompositeSubscription instead.\r\n\r\nRelated issue: #3105'
p5352
sg5
S'1.x: remove unused and inefficient subscriptionrandomlist.'
p5353
sg7
(lp5354
S'Cleanup'
p5355
asg10
I3511
sg11
(lp5356
S':+1: '
p5357
asg14
S'akarnokd:CleanupSRL1x'
p5358
sbsI3512
(iPull
Pull
p5359
(dp5360
g3
S"The documentation was wrong in two points: unsubscription doesn't call` onCompleted` and unsubscription doesn't directly prevent delivery of `onXXX` events since the implementation doesn't even check isUnsubscribed: (it is the responsibility of the upstream to do that).\r\n\r\nRelated issue: #3059."
p5361
sg5
S'1.x: fix safesubscriber documentation regarding unsubscribe'
p5362
sg7
(lp5363
S'Documentation'
p5364
asg10
I3512
sg11
(lp5365
S':+1: '
p5366
aS':+1: '
p5367
asg14
S'akarnokd:SafeSubscriberDocFix'
p5368
sbsI3513
(iPull
Pull
p5369
(dp5370
g3
S"This adds a new pattern and lookup method that let's the developer specify the custom plugins with shorter system property keys. Android is quite restrictive and allows only 31 characters.\r\n\r\nThe new pattern splits the target simple class name and its implementation into two separate system properties:\r\n\r\n```\r\nrxjava.plugin.1.class=SimpleClassName\r\nrxjava.plugin.1.impl=path.to.impl.Class\r\n```\r\n\r\nThe index tag (`1`) can be any string of your chosing:\r\n\r\n```\r\nrxjava.plugin.mykey.class=SimpleClassName\r\nrxjava.plugin.mykey.impl=path.to.impl.Class\r\n```\r\n\r\nbut make sure they are paired, otherwise nothing will happen.\r\n\r\nIf there are multiple `class` entries with the same `SimpleClassName` one of them will be chosen (depending on the walk order in `java.util.Properties`).\r\n\r\nRelated issue #2835."
p5371
sg5
S'1.x: add shorter rxjavaplugin class lookup approach.'
p5372
sg7
(lp5373
S'Enhancement'
p5374
asg10
I3513
sg11
(lp5375
S':+1: '
p5376
aS'Updated: made strings local constants and using `length`\xcb\x99instead of magic numbers. Plus, if the default keying matches, the properties is not traversed for an alternate specification.'
p5377
aS'An alternative pattern could be this:\r\n\r\n```\r\nrxjava.plugin.1=SimpleClassName,org.package.naming.ActualClass\r\n```\r\n'
p5378
aS'I agree that if the plugin cannot be found we should crash the app. '
p5379
aS'Updated the code to crash if the plugin implementation is missing.'
p5380
aS'Thanks!'
p5381
asg14
S'akarnokd:ShorterPluginNames'
p5382
sbsI3514
(iPull
Pull
p5383
(dp5384
g3
S'The test failed on Travis and locally if my machine was under heavy load without interacting with the mock. This change gives more time in the inner await and reports the exception instead of itself throwing.'
p5385
sg5
S'1.x: synconsubscribetest.testconcurrentrequests give more time.'
p5386
sg7
(lp5387
S'Test-Failures'
p5388
asg10
I3514
sg11
(lp5389
S"Okay :+1: do you think it'd be a good idea to change this to use the test scheduler?"
p5390
aS'The request has to happen between while the execution is inside the function. Perhaps if `TestSubscriber` is created before the `Func2`, the body can reference it and issue a `requestMore` synchronously.'
p5391
aS':+1: '
p5392
aS"I'm merging this so PRs won't break on it."
p5393
asg14
S'akarnokd:SyncOnSubscribeFix'
p5394
sbsI3515
(iPull
Pull
p5395
(dp5396
g3
S'For some strange reason, the interrupted flag is sometimes still set when the next JUnit test method runs and `await` will throw immediately.'
p5397
sg5
S'1.x: blockingutils test: clear interrupted flag before/after'
p5398
sg7
(lp5399
S'Test-Failures'
p5400
asg10
I3515
sg11
(lp5401
S':+1: '
p5402
aS':+1: '
p5403
asg14
S'akarnokd:BlockingUtilsInterruptedFix'
p5404
sbsI3517
(iPull
Pull
p5405
(dp5406
g3
g57
sg5
S'update changes.md for v1.0.16'
p5407
sg7
(lp5408
sg10
I3517
sg11
(lp5409
S':+1: '
p5410
aS'@abersnaze @benjchristensen @akarnokd @zsxwing @stevegury '
p5411
aS'Can we get #3493 in as well?'
p5412
aS'Merged #3493 and updated.'
p5413
aS':+1:'
p5414
aS'LGTM :+1: '
p5415
aS'Thanks @akarnokd @abersnaze @JakeWharton @artem-zinnatullin '
p5416
aS'No. Thanks to you maintainers for pushing these along!\r\n\r\nedit: punctuation matters\r\n\r\nOn Wed, Nov 11, 2015 at 4:03 PM Aaron Tull <notifications@github.com> wrote:\r\n\r\n> Thanks @akarnokd <https://github.com/akarnokd> @abersnaze\r\n> <https://github.com/abersnaze> @JakeWharton\r\n> <https://github.com/JakeWharton> @artem-zinnatullin\r\n> <https://github.com/artem-zinnatullin>\r\n>\r\n> \xe2\x80\x94\r\n> Reply to this email directly or view it on GitHub\r\n> <https://github.com/ReactiveX/RxJava/pull/3517#issuecomment-155909252>.\r\n>\r\n'
p5417
asg14
S'ReactiveX:changesmd-v1.0.16'
p5418
sbsI3519
(iPull
Pull
p5419
(dp5420
g3
S'Closes #3503.\r\n\r\nIn short:\r\n\r\n* Created `rxjava` gradle module and moved `src` to `rxjava/src`.\r\n* Created `android-tests` module and configured it to run tests from `rxjava/src/test` on Android.\r\n* Tuned build scripts so we can run builds on Android/JDK concurrently.\r\n* Changed `MemoryMXBean` to `Runtime` in `ExecutorSchedulerTest` because `MemoryMXBean` is not presented on Android.\r\n\r\nTODO:\r\n\r\n* Fix all failing tests Android (usually timeout problems since Android emulator is :snail:): #3504, cc @akarnokd.\r\n* Decide which Android APIs we want to run tests on, I suggest at least one API with Dalvik VM (with Java 6 and Java 7) and one with ART, for example 18, 19 and 22.\r\n\r\n@JakeWharton PTAL'
p5421
sg5
S'1.x: run tests on android!'
p5422
sg7
(lp5423
S'Test'
p5424
asg10
I3519
sg11
(lp5425
S'Can we do this without moving any files?'
p5426
aS">Can we do this without moving any files?\r\n\r\nNot sure, unfortunately. `src` is default source root it will probably be bound to the root Gradle project and I'm not sure that I'll be able to detach it from root project.\r\n\r\nThough I'll try it today, if somebody already done this \xe2\x80\x94 please comment."
p5427
aS'@akarnokd done!'
p5428
aS"Generally, I'm not against testing on Android but I'm afraid it will hinder progress on RxJava due to platform nuances. I remember when RxJava had every other Rx language and tool under the same main project and a change for Java caused build failures because something didn't compile in RxScala or some test failed in RxClojure. Would it be possible to have this as a separate project where Gradle/travis checks out the RxJava code from github and runs the tests on the emulator?"
p5429
aS"Android is just another Runtime, see it as different JVM (though it's not J-VM, but it does not matter in this case). Scala, Clojure, etc run on the JVM too, so your example is not directly applicable to the intention of running tests on Android. Your example is more about RxAndroid and I agree that it should be separate project and it is in .\r\n\r\nThousands of Android apps use RxJava, millions of Android devices run RxJava code every minute. And RxJava has some Platform-dependent code. Would be great to check that it works as expected :smile: \r\n\r\n>Would it be possible to have this as a separate project where Gradle/travis checks out the RxJava code from github and runs the tests on the emulator?\r\n\r\nIt's possible, but it will be very hard since it requires changes of the tests (timeouts, etc). Also, it won't give immediate feedback to PRs in the RxJava.\r\n\r\nI'm sorry for the delay with this PR, I'm very busy this week, will try to finish it soon."
p5430
aS"> It's possible, but it will be very hard since it requires changes of the tests (timeouts, etc). Also, it won't give immediate feedback to PRs in the RxJava.\r\n\r\nWith appropriate privileging, a secondary RxJava test runner outside of this repo could still post status checks to PRs -- it probably couldn't easily use Travis, but a custom runner on Jenkins would have enough flexibility to do that. Concerns about changes to tests would still remain."
p5431
aS"I'd still prefer to run tests on Android as part of current RxJava CI, actually there're just few tests fail with timeouts because Android emulator is slow as hell, we can write custom test runner or JUnit rule and add `AndroidTimeout` annotation to fix that and not touch regular tests runs.\r\n\r\nPlease feel free (anyone) to work on this, hopefully I'll do it at some point, but I don't have much time right now."
p5432
aS"I'm still not in favor of running the tests for Android in the same CI process.\r\n\r\nThe alternative I see is to somehow package up the unit tests as well and have a separate project run it it, or if a gradle script could be written to checkout the RxJava sources and run the tests in that way."
p5433
aS"Let's close it for now, I have a task to run RxJava tests on Android as part of [CI of RxJavaProGuardRules project](https://github.com/artem-zinnatullin/RxJavaProGuardRules/issues/4).\r\n\r\nHope I'll find some time to work on it in the summer."
p5434
asg14
S'artem-zinnatullin:run-tests-on-android'
p5435
sbsI3524
(iPull
Pull
p5436
(dp5437
g3
S'fix for javadoc issue #3523 '
p5438
sg5
S'fix subscribe() javadoc '
p5439
sg7
(lp5440
S'Documentation'
p5441
asg10
I3524
sg11
(lp5442
S':+1:'
p5443
aS':+1: '
p5444
aS':+1: '
p5445
aS'Thanks!'
p5446
asg14
S'davidmoten:subscribe-javadoc-fix'
p5447
sbsI3526
(iPull
Pull
p5448
(dp5449
g3
g57
sg5
S'2.x: reduse verbosity with varargs [wip]'
p5450
sg7
(lp5451
S'Enhancement'
p5452
asg10
I3526
sg11
(lp5453
S"Hi and thanks for the PR, but unfortunately, the Java 6 target makes varargs inconvenient. This is why we have that many overloads for the most common operators so small usages, 2 - 9 data sources, don't force the caller to add `@SuppressWarnings`."
p5454
aS"@akarnokd Thank you for so fast reply. But I saw java8's constructions in the class I changed. If it is ok fo java8, it is ok for varargs. And code have pased travis tests. And there is, already, varargs in the Single.java, for example in the amb() method. Am I wrong?\r\n"
p5455
aS"Oh sorry, didn't look at the targed branch. Indeed, this shouldn't be much of a problem with Java 7+ if you add the `@SafeVarargs`, however, javac sometimes finds ambiguity with such methods for some reason whereas Eclipse's compiler is fine. This is the main reason I've named the same method you are proposing `concatArray`. So could you do the following?\r\n\r\n  - rename the method to `concatArray`,\r\n  - add `@SafeVarargs` to it, and\r\n  - squash the commits.\r\n\r\nIn addition, note that since this will conflict with #3410, it is likely you'll have to rebase/redo this work."
p5456
aS'@akarnokd Ok. I will do it. For a while this PR will have [WIP] prefix.\r\nI will inform you, when everithing is done.'
p5457
aS'Thanks for your contribution. This PR is quite old, plus, the decision has been made 2.x has to be Java 6 where suppressing varargs is still a problem. '
p5458
asg14
S'alexVengrovsk:polis-0-0-1'
p5459
sbsI3528
(iPull
Pull
p5460
(dp5461
g3
S'`delay` delays the `onCompleted` event and `unsubscribe` is called when `onCompleted` finishes. So if we put a `o.zipWith(Iterable, func)` before `delay`, such as `o.zipWith(Iterable, func).delay(...)`, `o` may keep emitting items even if `zipWith` emits an `onCompleted` event. This PR just fixed `OperatorZipIterable` to handle this case.\r\n\r\nFixes https://github.com/ReactiveX/RxScala/issues/180'
p5462
sg5
S'1.x: avoid to call next when iterator is drained'
p5463
sg7
(lp5464
S'Bug'
p5465
asg10
I3528
sg11
(lp5466
S':+1:'
p5467
asg14
S'zsxwing:zipIter-delay'
p5468
sbsI3529
(iPull
Pull
p5469
(dp5470
g3
S'As a result of #3527 discussion I noticed that `throttleFirst` does not comply with behaviour described in javadocs. Time windows used for emissions were supposed to be of constant duration yet could be effectively lengthened because the next time window always started at the time of the emission to downstream plus the window duration.\r\n\r\nTo demonstrate:\r\n\r\nConsider  `source.throttleWithFirst(1000, TimeUnit.MILLISECONDS)` where source emits \r\n\r\n```\r\nTime   Value    \r\n0       "a"\r\n1200    "b"\r\n2100    "c"\r\n```\r\n\r\nDesired result is:\r\n\r\n`a, b, c`\r\n\r\nyet previous version produced\r\n\r\n`a, b`\r\n\r\nA unit test has been added that failed with the previous version.\r\n'
p5471
sg5
S'1.x: fix time windows in throttlefirst'
p5472
sg7
(lp5473
S'Discussion'
p5474
asg10
I3529
sg11
(lp5475
S'In 2.x, this operator uses a scheduler, blocks emissions in the given time window and re-enables it once the time runs out. The window is emission relative and not periodic. The javadoc reads "passage of time" which could mean emission-relative blocking. @zsxwing what was the original intention? Is this implemented somewhere else?'
p5476
aS'You are right that there is ambiguity in the javadoc:\r\n\r\n>Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.\r\n\r\nand \r\n\r\n>@ param windowDuration  time to wait before emitting another item after emitting the last item'
p5477
aS'ping @headinthebox @benjchristensen for you comments on the semantics of `throttleFirst`.'
p5478
aS"Just found this: http://www.introtorx.com/content/v1.0.10621.0/13_TimeShiftedSequences.html#Throttle\r\n\r\n> Unlike Sample though, Throttle's period is a sliding window. Each time Throttle receives a value, the window is reset."
p5479
aS'So I think we only need to fix the javadoc and add a unit test to test this behavior as well.'
p5480
aS"@zsxwing thanks for finding that. That definition seems as good as any and I can accept that one. I'll see what I can do for the javadoc on throttle/sample in another PR to make this difference clear and consistent. \r\n\r\nGiven that the operator as I've rewritten it in this PR has the semantics of `sample` perhaps it could be a useful contribution as `sampleFirst`?"
p5481
aS'My understanding is that this operator has the purpose of blocking out subsequent onNext events for a specified duration. If an event comes 1.5x the duration after the last, that event can be immediately emitted and a new window starts.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/16143341/64960892-346c-11e6-831d-5e0507c42b60.png)\r\n\r\nDo you want to pursue this further?'
p5482
aS"I'm closing this for now. If you want, you can post a PR with the parameter validation."
p5483
asg14
S'davidmoten:throttle-first-fix'
p5484
sbsI3535
(iPull
Pull
p5485
(dp5486
g3
S'A follow up PR for #3528'
p5487
sg5
S"1.x: don't swallow fatal errors in operatorzipiterable"
p5488
sg7
(lp5489
S'Bug'
p5490
asg10
I3535
sg11
(lp5491
S':+1: '
p5492
aS':+1:'
p5493
asg14
S'zsxwing:pr3528-follow-up'
p5494
sbsI3536
(iPull
Pull
p5495
(dp5496
g3
S'The test checks if onUnSubscribe is called but that happens after\r\nonCompleted is sent and as such, may run concurrently with the main\r\nthread where the mock is verified. The change switches to CountDownLatch\r\nto properly await the call to onUnsubscribe.'
p5497
sg5
S'1.x: fix synconsubscribetest.testconcurrentrequests non-determinism'
p5498
sg7
(lp5499
S'Test-Failures'
p5500
asg10
I3536
sg11
(lp5501
S':+1: '
p5502
aS':+1: '
p5503
asg14
S'akarnokd:SyncOnSubscribeTestFix'
p5504
sbsI3539
(iPull
Pull
p5505
(dp5506
g3
g57
sg5
S'add single.zip() for iterable of singles'
p5507
sg7
(lp5508
S'Feature-Request'
p5509
asg10
I3539
sg11
(lp5510
S'Did you consider adding `zip(Single[], FuncN)` overload as well?\r\n\r\nOtherwise, looks good. :+1:'
p5511
aS"I'll add `zin(Single[], FuncN)` and `zipWith()` in separate PRs if you don't mind.\r\n\r\nBtw, idk if @benjchristensen remembers how I was arguing against adding `Single` to the RxJava. My apologies \xf0\x9f\x98\x85. I'm starting loving `Single` in our codebase! "
p5512
aS'Here is an implementation that avoids conversion to `Observable`:\r\n```java\r\n@SuppressWarnings("unchecked")\r\npublic static <T, R> Single<R> zip(\r\n        Iterable<? extends Single<? extends T>> singles, \r\n                FuncN<? extends R> zipper) {\r\n    return Single.create(f -> {\r\n        Single<? extends T>[] sa;\r\n        int count;\r\n        if (singles instanceof List) {\r\n            List<? extends Single<? extends T>> list = \r\n                    (List<? extends Single<? extends T>>)singles;\r\n            count = list.size();\r\n            sa = list.toArray(new Single[count]);\r\n        } else {\r\n            sa = new Single[8];\r\n            count = 0;\r\n            for (Single<? extends T> s : singles) {\r\n                if (count == sa.length) {\r\n                    Single<? extends T>[] sb = new Single[count + (count >> 2)];\r\n                    System.arraycopy(sa, 0, sb, 0, count);\r\n                    sa = sb;\r\n                }\r\n                sa[count] = s;\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        final AtomicInteger wip = new AtomicInteger(count);\r\n        final AtomicBoolean once = new AtomicBoolean();\r\n        final Object[] values = new Object[count];\r\n        \r\n        CompositeSubscription csub = new CompositeSubscription();\r\n        f.add(csub);\r\n        \r\n        for (int i = 0; i < count; i++) {\r\n            if (csub.isUnsubscribed() || once.get()) {\r\n                break;\r\n            }\r\n            \r\n            final int j = i;\r\n            SingleSubscriber<T> te = new SingleSubscriber<T>() {\r\n                @Override\r\n                public void onSuccess(T value) {\r\n                    values[j] = value;\r\n                    if (wip.decrementAndGet() == 0) {\r\n                        R r;\r\n                        \r\n                        try {\r\n                            r = zipper.call(values);\r\n                        } catch (Throwable e) {\r\n                            Exceptions.throwIfFatal(e);\r\n                            f.onError(e);\r\n                            return;\r\n                        }\r\n                        \r\n                        f.onSuccess(r);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onError(Throwable error) {\r\n                    if (once.compareAndSet(false, true)) {\r\n                        f.onError(error);\r\n                    } else {\r\n                        RxJavaPlugins.getInstance()\r\n                        .getErrorHandler().handleError(error);\r\n                    }\r\n                }\r\n            };\r\n            csub.add(te);\r\n            if (csub.isUnsubscribed() || once.get()) {\r\n                break;\r\n            }\r\n            sa[i].subscribe(te);\r\n        }\r\n    });\r\n}\r\n```'
p5513
aS"@akarnokd I've used your code (rewrote some parts and fixed one bug) and now we don't have to convert `Single`s to `Observable`s! \r\n\r\nLater we can switch other `Single.zip` overloads to `SingleOperatorZip`."
p5514
aS'@akarnokd changed `instanceof List` to `instanceof Collection` so we are now really efficient for all collections and fall back to slightly less fast code for other `Iterable`s, rebased. \r\n\r\nPTAL'
p5515
aS'Rebased!'
p5516
aS'Blocked by #3569.'
p5517
aS'This needs to be rebased again.'
p5518
aS':+1:'
p5519
aS':+1: '
p5520
aS':+1: (for posterity)'
p5521
asg14
S'artem-zinnatullin:single-zip-iterable'
p5522
sbsI3544
(iPull
Pull
p5523
(dp5524
g3
S'This PR fixes the "messing around" reported in #3002 and adds an overload to `observeOn` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports).\r\n\r\nIn addition, this PR adds a proper override of the `isEmpty` method to simply compare the two indexes for emptiness directly instead of `size() == 0` to avoid looping, multi-reading and casting.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10.png)\r\n\r\nNote that the benchmark is generally quite noisy, yielding hectic results (i.e., firing up a thread with newThread may take quite some random microseconds). For example, `observeOnImmediate` shouldn\'t be affected by any of the changes yet the run-to-run variance is +/- 10%. I\'m fine with the results of the benchmark.'
p5525
sg5
S'1.x: fix observeon resource handling, add delayerror capability'
p5526
sg7
(lp5527
S'Enhancement'
p5528
asg10
I3544
sg11
(lp5529
S"I like the change, but can't we ship this behavior as default? Yes, it's a breaking change, but in a good way. I mean, I'm just not sure that a lot of users will even know about this operator and even less will understand the difference and situations when they'll need to use one instead of another."
p5530
aS'@akarnokd are you concerned by the performance impacts of this PR? '
p5531
aS'No concerns.'
p5532
aS':+1: '
p5533
aS'Since this adds to the API surface, can I have another +1? (Also feel free to merge this.)'
p5534
aS'Closing and reposting again with proper rebase.'
p5535
asg14
S'akarnokd:ObserveOnCleanup1x'
p5536
sbsI3549
(iPull
Pull
p5537
(dp5538
g3
S'Just found them while walking through the source code trying to get a better overview of the Rx internals. '
p5539
sg5
S'remove double whitespace in if conditions'
p5540
sg7
(lp5541
S'Cleanup'
p5542
asg10
I3549
sg11
(lp5543
S":+1:, you'll find a lot of such issues\xe2\x80\xa6\r\n\r\n@akarnokd checkstyle one day maybe?"
p5544
aS'I actually found only the one in `TestSubscriber`. After that I ran `ack "if  "` over the entire project and found also the other one.\r\n\r\nIf you guys want, I can add checkstyle in a separate PR.'
p5545
aS"I'd be happy to see checkstyle in RxJava, but my previous attempts to add it failed: #2807, #3147 and other comments."
p5546
aS"It's hard to agree on some styles, i.e. always use blocks with ifs and such."
p5547
aS"Yes I get that, though I don't see what the problem is fixing once they are made.\r\n\r\nMaybe we could agree on some very basic checkstyle rules, like don't use double whitespaces (if there's a rule for that). Tab indention etc"
p5548
aS'Is there anything against this being merged?'
p5549
aS'We usually require two likes from collaborators.\r\n\r\n:+1:\r\n\r\n'
p5550
aS':+1: '
p5551
asg14
S'vanniktech:clean_up'
p5552
sbsI3550
(iPull
Pull
p5553
(dp5554
g3
g57
sg5
S'public api changes for 1.1.0 release'
p5555
sg7
(lp5556
S'Enhancement'
p5557
asg10
I3550
sg11
(lp5558
S'This should be merged immediately after the next minor release (1.0.17). The plan is to have a minor release that is identical to the following major release except for changes to the public api (which should not substantially change functionality). '
p5559
aS':+1:'
p5560
aS':+1: '
p5561
aS"Now we need to update the CHANGES.md to reflect the public api changes... That might have been easier in the old format of 1 PR per change. I'll probably do sub-bullets under the PR."
p5562
aS'So Release Notes for 1.1.0 state that Single has been promoted out of Beta, but it looks like it is not actually out of beta.'
p5563
asg14
S'stealthcode:release-1.1.0'
p5564
sbsI3551
(iPull
Pull
p5565
(dp5566
g3
g57
sg5
S'update changes.md for v1.0.17'
p5567
sg7
(lp5568
S'Discussion'
p5569
asg10
I3551
sg11
(lp5570
S'Is there anything else not yet merged that is urgent or high priority that we should consider before cutting this release? '
p5571
aS"Well, I hoped to add some `rx.Single` operators, but looks like I won't be able to do it this week. Can we expect 1.1.1 this month?"
p5572
aS"@artem-zinnatullin there isn't a release schedule so I really couldn't tell you. "
p5573
aS'okay, LGTM :+1: '
p5574
aS'#3491'
p5575
aS':+1: '
p5576
aS'#3491 from me too. We really need this bug fix in.'
p5577
aS"I'm looking at #3491"
p5578
aS"I've gone ahead and merged #3491. Sorry for the delay. "
p5579
aS':+1:'
p5580
asg14
S'stealthcode:changesmd-v1.0.17'
p5581
sbsI3553
(iPull
Pull
p5582
(dp5583
g3
g57
sg5
S'update changes.md for v1.1.0'
p5584
sg7
(lp5585
S'Discussion'
p5586
asg10
I3553
sg11
(lp5587
S'@akarnokd @stevegury @abersnaze @benjchristensen @zsxwing '
p5588
aS':+1:'
p5589
aS':+1: '
p5590
asg14
S'stealthcode:changesmd-v1.1.0'
p5591
sbsI3556
(iPull
Pull
p5592
(dp5593
g3
S'This PR adds the usual try-catch around callback invocations in `toMap`\r\nand `toMultimap`.\r\n\r\nRelated #3555.'
p5594
sg5
S'1.x: fix tomap and tomultimap not handling exceptions of the callbacks'
p5595
sg7
(lp5596
S'Bug'
p5597
asg10
I3556
sg11
(lp5598
S':+1: '
p5599
aS':+1: '
p5600
aS':+1: '
p5601
asg14
S'akarnokd:ToMapErrorPropagation1x'
p5602
sbsI3559
(iPull
Pull
p5603
(dp5604
g3
g57
sg5
S'rewording 1.1.0 release notes in changes.md'
p5605
sg7
(lp5606
sg10
I3559
sg11
(lp5607
S':+1: '
p5608
aS':+1:'
p5609
asg14
S'stealthcode:changesmd-v1.1.0'
p5610
sbsI3561
(iPull
Pull
p5611
(dp5612
g3
S'#3560\r\n'
p5613
sg5
S'corrected buffer operator onerror behaviour documentation'
p5614
sg7
(lp5615
S'Documentation'
p5616
asg10
I3561
sg11
(lp5617
S'Applied @akarnokd suggestion.'
p5618
aS':+1: '
p5619
aS':+1:'
p5620
asg14
S'mariusznet:master'
p5621
sbsI3562
(iPull
Pull
p5622
(dp5623
g3
S'As promised, adding more operators to `Single`. This one is very useful for releasing resources if task can be cancelled externally via `subscription.unsubscribe()` and subscriber may not receive the result. '
p5624
sg5
S'add single.doonunsubscribe()'
p5625
sg7
(lp5626
S'Enhancement'
p5627
asg10
I3562
sg11
(lp5628
S':+1:'
p5629
aS':+1: '
p5630
asg14
S'artem-zinnatullin:single-do-on-unsubscribe'
p5631
sbsI3563
(iPull
Pull
p5632
(dp5633
g3
g57
sg5
S'fix typo in documentation'
p5634
sg7
(lp5635
S'Documentation'
p5636
asg10
I3563
sg11
(lp5637
S':+1: '
p5638
aS':+1:'
p5639
aS':+1: '
p5640
asg14
S'sebaslogen:patch-1'
p5641
sbsI3565
(iPull
Pull
p5642
(dp5643
g3
S"Advantage is that we verify that there's no interaction at all so also something that we might not expect is not going to happen."
p5644
sg5
S'replace never() calls in behaviorsubjecttest with verifynomoreinteractions'
p5645
sg7
(lp5646
S'Cleanup'
p5647
asg10
I3565
sg11
(lp5648
S':+1:'
p5649
aS':+1: '
p5650
asg14
S'vanniktech:master_behavioursubject_test_cleanup'
p5651
sbsI3566
(iPull
Pull
p5652
(dp5653
g3
S'#3434 but for `Observable`.'
p5654
sg5
S'deprecate observable.finallydo() and add observable.doafterterminate() instead'
p5655
sg7
(lp5656
sg10
I3566
sg11
(lp5657
S':+1:'
p5658
aS':+1: '
p5659
aS':+1: '
p5660
asg14
S'artem-zinnatullin:observable-doAfterTerminate'
p5661
sbsI3567
(iPull
Pull
p5662
(dp5663
g3
g57
sg5
S'implemented observable#tocompletable'
p5664
sg7
(lp5665
S'Enhancement'
p5666
asg10
I3567
sg11
(lp5667
S'Addresses part of #3443'
p5668
aS'```\r\nrx.internal.operators.OnSubscribeCompletableTest > testShouldUseUnsafeSubscribeInternallyNotSubscribe FAILED\r\n    java.lang.AssertionError\r\n        at org.junit.Assert.fail(Assert.java:92)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertFalse(Assert.java:68)\r\n        at org.junit.Assert.assertFalse(Assert.java:79)\r\n        at rx.internal.operators.OnSubscribeCompletableTest.testShouldUseUnsafeSubscribeInternallyNotSubscribe(OnSubscribeCompletableTest.java:96)\r\n```\r\n\r\nThe `Completable.fromObservable` needs to change to `unsafeSubscribe`.'
p5669
aS'Thanks @akarnokd'
p5670
aS':+1:'
p5671
aS':+1: '
p5672
asg14
S'stealthcode:ToCompletable'
p5673
sbsI3568
(iPull
Pull
p5674
(dp5675
g3
S'Renames as part of #3434 for the recently added Completable.'
p5676
sg5
S'renamed completable#finallydo to #doafterterminate'
p5677
sg7
(lp5678
S'Cleanup'
p5679
asg10
I3568
sg11
(lp5680
S':+1: '
p5681
aS':+1:'
p5682
aS':+1: '
p5683
asg14
S'stealthcode:RenameCompletableFinallyDo'
p5684
sbsI3569
(iPull
Pull
p5685
(dp5686
g3
S'There was a cross dependency between two PRs yielding a broken\r\ncompilation in main.'
p5687
sg5
S'1.x: fix renamed operator in single.'
p5688
sg7
(lp5689
S'Cleanup'
p5690
asg10
I3569
sg11
(lp5691
S'Yup, noticed that too, git\xe2\x80\xa6 :+1: '
p5692
aS"I'm merging this to unblock other PRs."
p5693
aS':+1: '
p5694
asg14
S'akarnokd:SingleFixDoAfterTerminate'
p5695
sbsI3570
(iPull
Pull
p5696
(dp5697
g3
S'I expect some discussion around the method name. '
p5698
sg5
S'implemented completable#andthen(observable)'
p5699
sg7
(lp5700
S'Discussion'
p5701
aS'Enhancement'
p5702
asg10
I3570
sg11
(lp5703
S'Adding unit tests and pushing shortly.'
p5704
aS':+1:'
p5705
asg14
S'stealthcode:CompletableAndThen'
p5706
sbsI3573
(iPull
Pull
p5707
(dp5708
g3
g57
sg5
S'test pr'
p5709
sg7
(lp5710
sg10
I3573
sg11
(lp5711
sg14
S'None'
p5712
sbsI3575
(iPull
Pull
p5713
(dp5714
g3
g57
sg5
S'fix typo in compositeexception documentation'
p5715
sg7
(lp5716
S'Cleanup'
p5717
asg10
I3575
sg11
(lp5718
S':+1:'
p5719
aS':+1: '
p5720
aS':+1:'
p5721
asg14
S'ItsPriyesh:Fix-typo-in-CompositeException-documentation'
p5722
sbsI3579
(iPull
Pull
p5723
(dp5724
g3
S'PTAL'
p5725
sg5
S'1.x: no more need to convert singles to observables for single.zip()'
p5726
sg7
(lp5727
S'Enhancement'
p5728
asg10
I3579
sg11
(lp5729
S':+1:'
p5730
aS'Could you add `final` back for all these methods? Otherwise, LGTM'
p5731
aS'Sorry, was busy\xe2\x80\xa6 @zsxwing added `final` back, will send separate PR to remove them everywhere once this merged.'
p5732
aS':+1: '
p5733
asg14
S'artem-zinnatullin:single-zip-no-more-as-observable'
p5734
sbsI3582
(iPull
Pull
p5735
(dp5736
g3
g57
sg5
S'1.x: update replaysubjectperf.java'
p5737
sg7
(lp5738
S'Cleanup'
p5739
asg10
I3582
sg11
(lp5740
S':+1: although not sure about the location of those empty lines.'
p5741
asg14
S'achinthagunasekara:patch-1'
p5742
sbsI3584
(iPull
Pull
p5743
(dp5744
g3
S"As discussed in #3411, some clarification of the behaviour of `groupBy` looks necessary re its behaviour when the `GroupedObservable` terminates early (for example has `.first()` applied to it). See also  #3581.\r\n\r\nI also took the liberty of recommending `ignoreElements` instead of `take(0)` for the section in the javadoc that recommends how to ignore emissions because the `take(0)` approach would have more overhead (every emission from source would prompt the emission of a new `GroupedObservable`) than the `ignoreElements` approach.\r\n\r\nOnce this is accepted I'll look to submit a PR with `groupByOnce` (mentioned in #3411)."
p5745
sg5
S'clarify behaviour of groupby in javadoc'
p5746
sg7
(lp5747
S'Documentation'
p5748
asg10
I3584
sg11
(lp5749
S'Corrected the documentation that said resubscription occurs when it is rather a new GroupedObservable is emittted for a group.'
p5750
aS'Incorporated @akarnokd suggestion'
p5751
aS':+1:'
p5752
aS":+1: \r\n\r\n> I also took the liberty of recommending ignoreElements instead of take(0) for the section in the javadoc that recommends how to ignore emissions because the take(0) approach would have more overhead (every emission from source would prompt the emission of a new GroupedObservable) than the ignoreElements approach.\r\n\r\nBy the way, `ignoreElements` has a drawback: It keeps all group `Observable`s in memory even some of them won't emit items."
p5753
asg14
S'davidmoten:group-by-javadoc'
p5754
sbsI3585
(iPull
Pull
p5755
(dp5756
g3
S'This PR fixes the cases when the Completable factory throws an exception\r\nor returns null and the resource is not disposed before reporting error\r\nto the subscriber.'
p5757
sg5
S'1.x: fix completable.using not disposing the resource if the factory crashes during the subscription phase.'
p5758
sg7
(lp5759
S'Bug'
p5760
asg10
I3585
sg11
(lp5761
S':+1: '
p5762
aS':+1:'
p5763
asg14
S'akarnokd:UsingDisposeFix'
p5764
sbsI3586
(iPull
Pull
p5765
(dp5766
g3
g57
sg5
S'fixed typo'
p5767
sg7
(lp5768
S'Cleanup'
p5769
asg10
I3586
sg11
(lp5770
S':+1:'
p5771
aS':+1: '
p5772
aS'Thanks a lot, @mariusznet '
p5773
asg14
S'mariusznet:1.x'
p5774
sbsI3587
(iPull
Pull
p5775
(dp5776
g3
S"Outer classes accessing inner class private fields and methods (and vise versa) causes javac to generate package-scoped trampolines. These bloat the class files, adds overhead to the inliner analysis, and for Android create needless method that eat away at our fixed limit of methods in an application. By simply promoting the private interactions to package scope directly, the synthetic methods do not need generated.\r\n\r\n2.5% of RxJava's methods were these needless generated trampolines accounting for 1.2% of jar size and 1.4% of dex size.\r\n\r\n```\r\n$ dex-method-count before.dex\r\n5005\r\n\r\n$ dex-method-count after.dex\r\n4875\r\n```\r\n```\r\n-rw-r--r--   1 jw  jw   699K Dec 25 03:08 after.dex\r\n-rw-r--r--   1 jw  jw   952K Dec 25 03:08 after.jar\r\n-rw-r--r--   1 jw  jw   709K Dec 25 03:06 before.dex\r\n-rw-r--r--   1 jw  jw   964K Dec 25 03:06 before.jar\r\n```"
p5777
sg5
S'remove the need for javac to generate synthetic methods.'
p5778
sg7
(lp5779
S'Cleanup'
p5780
asg10
I3587
sg11
(lp5781
S':+1:'
p5782
aS':+1: '
p5783
asg14
S'JakeWharton:jw/remove-synthetic-methods'
p5784
sbsI3588
(iPull
Pull
p5785
(dp5786
g3
S"The static `GenericScheduledExecutorService.None` should be initialized before creating any GenericScheduledExecutorService instance. Although the previous codes happen to work, it's sill worth to fix it."
p5787
sg5
S'fix the initialization order in genericscheduledexecutorservice'
p5788
sg7
(lp5789
S'Cleanup'
p5790
asg10
I3588
sg11
(lp5791
S"The situation can't happen because class initialization locks out callers.\r\n\r\nOtherwise, the cleanup never hurts.\r\n\r\n:+1:"
p5792
asg14
S'zsxwing:init-order'
p5793
sbsI3589
(iPull
Pull
p5794
(dp5795
g3
S"This PR reduces the request tracking overhead of `concat` by tracking the produced item count in a plain field and subtracting it from the arbiter and requested values only before the inner source completes. So instead of N decrementAndGet call, we have 1 addAndGet(-N) per source. \r\n\r\nI've added a perf class to measure the difference.\r\n\r\n(Intel Celeron 1005M @ 2GHz, Windows 7 x64, Java 8u66)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12010270/d8af1660-ac9f-11e5-933c-ee96da7deda5.png)\r\n\r\nThe throughput increased considerably, although I would have expected more, especially in the 1M case where the subscription overhead doesn't matter.\r\n\r\nI'll do further investigation on it and post a follow-up PR if this gets merged in the meantime."
p5796
sg5
S'1.x: concat reduce overhead when streaming a source'
p5797
sg7
(lp5798
S'Performance'
p5799
asg10
I3589
sg11
(lp5800
S':+1: '
p5801
aS'There is a non-zero chance there, but it is very small. If it happens, all the effect it will have is to make the operator decrement the requested amount from then on, which adds ~40 cycle overhead after each source completes.\r\n\r\nUpdated the PR anyway to do a CAS loop on production to remove all worries about the case.'
p5802
aS':+1: '
p5803
aS'@zsxwing, @davidmoten are you satisfied with the name `BackpressureUtils.produced`?'
p5804
aS'Just a few comments, otherwise :+1:.'
p5805
aS'Changed to AtomicBoolean and moved c != 0 into parent because the parent was used for completing the inner anyway, I overlooked it at first.'
p5806
aS':+1:'
p5807
asg14
S'akarnokd:ConcatPerf1x'
p5808
sbsI3590
(iPull
Pull
p5809
(dp5810
g3
S'change hasOnNext to !hasOnNext'
p5811
sg5
S'update abstractonsubscribe.java'
p5812
sg7
(lp5813
sg10
I3590
sg11
(lp5814
S'The `AbstractOnSubscribe` has been deprecated in 1.0.17 and removed in 1.1.0.\r\n\r\nBesides, the code contained `hasOnNext` because it wanted to prevent calling onNext twice.'
p5815
aS'okey,I got it .  thanks'
p5816
asg14
S'kaoree:1.x'
p5817
sbsI3592
(iPull
Pull
p5818
(dp5819
g3
S'This PR complete the never assert in PublishSubjectTest.'
p5820
sg5
S'1.x: add never test for  publishsubjecttest'
p5821
sg7
(lp5822
S'Cleanup'
p5823
aS'Test'
p5824
asg10
I3592
sg11
(lp5825
S':+1:'
p5826
aS'In every test method that is using `verifyNoMoreInteractions` you can remove the `verify(observer, never()).*`'
p5827
aS'> In every test method that is using verifyNoMoreInteractions you can remove the verify(observer, never()).*\r\n\r\nYour are right, but I think adding these verifies can make tests more clearly.'
p5828
aS'Fair enough. I just thought you forgot to delete them and wanted to point it out.\r\nIn any case the deletion decision is something the repo owners have to do.\r\n\r\nPersonally the less test code the preciser it is. Especially since `verifyNoMoreInteractions` clearly states it purpose.'
p5829
aS':+1:'
p5830
aS':+1: '
p5831
asg14
S'Chaoba:1.x'
p5832
sbsI3597
(iPull
Pull
p5833
(dp5834
g3
S"This PR fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changes.\r\n\r\nThe main issue lies when `count > skip` in the operators, yielding overlapping buffers/windows. \r\n\r\nFor `buffer`, when the upstream completed, the logic emitted all remaining partial buffers even if there was no request for new buffers, which can result in `MissingBackpressureException` somewhere. The proper handling of the final buffers required a new backpressure management algorithm which is now part of the `BackpressureUtils` class and consists of two new methods: `postCompleteDone` called from onComplete to take over the emission of queued values and `postCompleteRequest` which manages requests before and after the completed state.\r\n\r\nFor `window`, the new window opened was emitted regardless of requests which was common due to request-amplification (i.e., requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront. To avoid the overflow, the individual windows have to go through the usual queue/drain logic as well. I've also updated the Javadoc to reflect the backpressure behavior along with parameter validation.\r\n\r\nIn addition, the window case didn't manage cancellation properly. When the outer observable is unsubscribed, the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. Instead, the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e., count reaches zero), the upstream is unsubscribed. To accomplish this, the `UnicastSubject` had to be retrofitted with a new optional callback `Action0` which gets called at most once whenever either `onError` or `onCompleted` is called or when the single `Subscriber` unsubscribes.\r\n\r\nA secondary issue was with the `TestSubscriber`'s initial request; some upstream operators could get triggered with `Long.MAX_VALUE` despite the initial request amount was set. This PR changes it to be set at construction time instead of in `onStart`."
p5835
sg5
S"1.x: fix counted buffer and window operators' backpressure behavior"
p5836
sg7
(lp5837
S'Bug'
p5838
asg10
I3597
sg11
(lp5839
S'Fresh version in #3678.'
p5840
asg14
S'akarnokd:BufferWindowBackpressureFix1x'
p5841
sbsI3609
(iPull
Pull
p5842
(dp5843
g3
S'It subscribes to the upstream `Observable` on the emitting thread of the other `Observable` obtained from the `Func0`.'
p5844
sg5
S'delaysubscription(func0) does not use a scheduler'
p5845
sg7
(lp5846
S'Documentation'
p5847
asg10
I3609
sg11
(lp5848
S':+1:'
p5849
aS':+1: '
p5850
asg14
S'JakeWharton:patch-1'
p5851
sbsI3614
(iPull
Pull
p5852
(dp5853
g3
S'Updated `just()` to fully support backpressure.\r\n\r\nThis is a repost of #3496 due to merge and rebase problems.'
p5854
sg5
S'1.x: just() now supports backpressure (+ related fixes/changes)'
p5855
sg7
(lp5856
S'Bug'
p5857
aS'Enhancement'
p5858
asg10
I3614
sg11
(lp5859
S'We were waiting to hear from @benjchristensen on this one I think. Any news?'
p5860
aS'+1 for correctness despite my hesitance due to perf impact. '
p5861
asg14
S'akarnokd:JustBackpressure1xV2'
p5862
sbsI3619
(iPull
Pull
p5863
(dp5864
g3
S"I've created the solution for issue #3618."
p5865
sg5
S'solution for 3618'
p5866
sg7
(lp5867
sg10
I3619
sg11
(lp5868
sg14
S'adam-arold:solution-for-3618'
p5869
sbsI3620
(iPull
Pull
p5870
(dp5871
g3
S'possible solution :)'
p5872
sg5
S'1.x: fix npe in compositeexception when nested throws on initcause'
p5873
sg7
(lp5874
S'Bug'
p5875
asg10
I3620
sg11
(lp5876
S':+1:'
p5877
aS':+1: \r\n\r\n@msavitskiy can you please squash commits in your PR into one?'
p5878
aS'@artem-zinnatullin  I make squash commits. I did the right thing?'
p5879
aS"@msavitskiy mm, nope\xe2\x80\xa6\r\n\r\nBasically you should have one commit after squash done right. I'd suggest to read documentation and some examples (maybe even videos) about `git rebase`.\r\n\r\nIf it'll be blocker for merge I can squash your PR and resubmit it (you'll still be author of the commit!)"
p5880
aS'@artem-zinnatullin Now everything is fine?'
p5881
aS'@msavitskiy yes, thanks!'
p5882
aS':+1: '
p5883
asg14
S'msavitskiy:1.x'
p5884
sbsI3622
(iPull
Pull
p5885
(dp5886
g3
S'This PR add similar optimization as ScalarSynchronousObservable to Single.just method.'
p5887
sg5
S'1.x: optimizate single just'
p5888
sg7
(lp5889
S'Performance'
p5890
asg10
I3622
sg11
(lp5891
S'Nice PR! @Chaoba can you please remove merge commit from the PR (rebase should help)?'
p5892
aS'@akarnokd and @artem-zinnatullin  please review on  #3642'
p5893
asg14
S'Chaoba:optimizate_single_just'
p5894
sbsI3623
(iPull
Pull
p5895
(dp5896
g3
S'Solution for issue #3618.'
p5897
sg5
S'1.x: adding source links for @beta and @experimental'
p5898
sg7
(lp5899
S'Documentation'
p5900
asg10
I3623
sg11
(lp5901
S':+1:'
p5902
aS':+1: '
p5903
aS"Let's merge this? Looks trivial and useful."
p5904
aS':+1:'
p5905
aS'@adam-arold could you also submit a PR again 1.x branch? Thanks!'
p5906
aS'Okay, will do tomorrow!'
p5907
asg14
S'adam-arold:2.x'
p5908
sbsI3624
(iPull
Pull
p5909
(dp5910
g3
S'See #3621'
p5911
sg5
S'1.x: implement operatordoonempty, with observable.doonempty() operator'
p5912
sg7
(lp5913
S'Feature-Request'
p5914
asg10
I3624
sg11
(lp5915
S'I saw there was an `OperatorDoOnEach` which was being paired with an `Observer`, so I went ahead and scrapped `OperatorDoOnEmpty` in favor of using that pattern.'
p5916
aS'Okay two questions:\r\n\r\n1) What exactly am I testing for with unsubscription? That `Subscription.isUnsubscribed()` is true after calling `Subscription.unsubscribe()`? That items are no longer emitting? Do I have to test for hot and cold sources? \r\n\r\n2) Can you point me to another unit test that does the backpressure test you have in mind?'
p5917
aS'1) unsubscription test:\r\n\r\nuse a `PublishSubject`, this operator and `take`, push through values up to the limit and check `hasObservers` on the subject\r\n\r\n2) backpressure\r\n\r\nuse a `range`, this operator and subscribe a `TestSubscriber` which has been created with 0 as an initial value. Use `requestMore(1)` and assert the testsubscriber received only a single value, no error and no completion'
p5918
aS'@akarnokd Done. The unsubscription test made sense to me. Not too familiar with the `TestSubscriber`. Regardless, I implemented what I think you meant and the tests passed.'
p5919
aS'@akarnokd Might help if I actually used the operator in question. One second...\r\n'
p5920
aS'Okay unit tests are complete.'
p5921
aS"Hey Thomas, for your convenience what you normally do is make a branch of 1.x say `doOnEmpty`, do your change in that branch and submit your PR from that branch rather than from 1.x. This PR doesn't have to be changed though."
p5922
aS"Okay, thanks @davidmoten. I'll branch the feature separately next time. "
p5923
aS'Dang it IDEA, sorry my habits have caused Observable to have irrelevant changes. One moment.'
p5924
aS'There are too many, probably irrelevant, changes in `Observable.java`. Could you start from a clean file?\r\n\r\nIn addition, your reuse of `doOnEach` may not work because were sharing the empty flag across subscriptions whose source may not be always empty. For example,\r\n\r\n```java\r\nObservable<Integer> o = Observable.defer(\r\n    () -> Observable.range(1, counter.getAndIncrement() % 2))\r\n.doOnEmpty(() -> System.out.println("Empty!"));\r\n\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\no.subscribe(System.out::println);\r\n```\r\n\r\nThis should print 3 `Empty!` but only prints 1.'
p5925
aS"That seems like a deliberate side effect almost... so what would the expected behavior be? Because I don't really see how it is much different from `onCompleted()` other than it has a condition before performing the action. I'll try to reason through what you're showing..."
p5926
aS'Oh shoot, I think I see what you are saying. I was sharing state *between* the subscriptions. Let me figure out how to do this...'
p5927
aS'Alright, I started over on the implementation and placed that `Observable.defer()` case as an additional test. All five unit tests passed. '
p5928
aS"Question. Why is it the policy that `doOnXXX()` operators won't emit an exception that occurs in the supplied side effect function?  Is the idea that it is up to the client to deal with the exception that occurs in _their _function since it is after all a side-effect? And it is not part of the `Observable`?\r\n\r\n**EDIT**\r\n\r\nLet me rephrase that. Should exceptions in the side-effect function be emitted to the child's `onError()`? Because I don't think I'm doing that here..."
p5929
aS"Okay it's done, @davidmoten. Please let me know if I missed anything else..."
p5930
aS"It looks like a test failed. I don't think it has to do with this feature, but I'll confirm tomorrow after I update my fork and see if that rids it."
p5931
aS'I think this operator was about done so I chucked it into [https://github.com/davidmoten/rxjava-extras](rxjava-extras). That ok with you @thomasnield?'
p5932
aS"@davidmoten That sounds great! I'm glad you did, thanks!"
p5933
asg14
S'thomasnield:1.x'
p5934
sbsI3626
(iPull
Pull
p5935
(dp5936
g3
S"This PR simplifies error handling by making use of existing `Exceptions.throwOrError` overloads.\r\n\r\nA number of classes are touched by this one PR but I'm assuming review will be easy enough that merge can happen soon."
p5937
sg5
S'use exceptions.throworerror to simplify error handling'
p5938
sg7
(lp5939
S'Cleanup'
p5940
asg10
I3626
sg11
(lp5941
S"It looks like my optimize imports messed up the imports on `Observable.java`. I'll restore them to what they were originally. "
p5942
aS':+1:'
p5943
aS'Oops sorry wrong PR'
p5944
aS':+1:'
p5945
asg14
S'davidmoten:simplify-throw'
p5946
sbsI3627
(iPull
Pull
p5947
(dp5948
g3
S'PR for issue #3577'
p5949
sg5
S'1.x: added mergedelay operators for iterable of observables'
p5950
sg7
(lp5951
S'Enhancement'
p5952
asg10
I3627
sg11
(lp5953
S':+1:'
p5954
aS'Just few things about code style, otherwise LGTM :+1: '
p5955
aS':+1: once you fix the style issue'
p5956
aS':+1: after renaming the `mergeIterable` method.'
p5957
aS':+1: @JohnWowUs can you please squash commits in your PR into one?'
p5958
aS'@JohnWowUs could you squash commits? Thanks!'
p5959
aS'@zsxwing \r\n\r\nDone.'
p5960
aS':+1: '
p5961
asg14
S'JohnWowUs:mergeDelayIterable'
p5962
sbsI3630
(iPull
Pull
p5963
(dp5964
g3
S'The operator was not allowing `null`s in the inner Observables.\r\n\r\nRelated: #3629.'
p5965
sg5
S'1.x: concatmapeager allow nulls from inner observables.'
p5966
sg7
(lp5967
S'Bug'
p5968
asg10
I3630
sg11
(lp5969
S':+1: '
p5970
asg14
S'akarnokd:ConcatMapEagerInnerNPEFix1x'
p5971
sbsI3631
(iPull
Pull
p5972
(dp5973
g3
S"Preparation for release 1.1.1.\r\n\r\nThere are, however, quite a few PRs open which could be also included with 1.1.1 (ignoring documentation and cleanup):\r\n\r\n## Bugfixes\r\n\r\n  - #3597 fix counted buffer and window operators' backpressure behavior\r\n  - #3614 ~~just() now supports backpressure (+ related fixes/changes)~~ merged\r\n  - #3620 Fix NPE in CompositeException when nested throws on initCause\r\n\r\n## Enhancements\r\n\r\n  - #3476 overhead reduction for merge and flatMap \r\n  - #3507 combineLatest can now combine arbitrary number of sources\r\n  - #3544 fix observeOn resource handling, add delayError capability\r\n  - #3579 ~~No more need to convert Singles to Observables for Single.zip()~~ merged\r\n  - #3589 concat reduce overhead when streaming a source\r\n  - #3627 Added MergeDelay operators for Iterable of Observables"
p5974
sg5
S'release 1.1.1 changes.md preparation'
p5975
sg7
(lp5976
S'Discussion'
p5977
asg10
I3631
sg11
(lp5978
S':+1:'
p5979
aS"It's a bit tedious the repost this all the time. Instead, I've created a draft release and once decided, will copy the final markdown from there to a new PR."
p5980
asg14
S'akarnokd:Release1_1_1'
p5981
sbsI3634
(iPull
Pull
p5982
(dp5983
g3
S'This PR adds a perf test to measure the redo-based operators: repeat, repeatWhen, retry, retryWhen.\r\n\r\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\r\n```\r\nBenchmark                     (params)        Score  Score error\r\nr.o.RedoPerf.baseline              1,1  9507538,496   384265,883\r\nr.o.RedoPerf.baseline           1,1000   127236,123     6322,513\r\nr.o.RedoPerf.baseline        1,1000000      131,491        7,443\r\nr.o.RedoPerf.baseline           1000,1   126830,429     8161,593\r\nr.o.RedoPerf.baseline        1000,1000      130,795        8,571\r\nr.o.RedoPerf.baseline        1000000,1      130,097        0,936\r\nr.o.RedoPerf.repeatCounted         1,1   473245,445    16574,938\r\nr.o.RedoPerf.repeatCounted      1,1000     2039,161       64,254\r\nr.o.RedoPerf.repeatCounted   1,1000000        2,304        0,376\r\nr.o.RedoPerf.repeatCounted      1000,1    28622,433     2896,427\r\nr.o.RedoPerf.repeatCounted   1000,1000       35,208        2,312\r\nr.o.RedoPerf.repeatCounted   1000000,1       56,978        7,278\r\nr.o.RedoPerf.repeatWhen            1,1   452640,724     5506,024\r\nr.o.RedoPerf.repeatWhen         1,1000     2151,821      352,059\r\nr.o.RedoPerf.repeatWhen      1,1000000        2,159        0,066\r\nr.o.RedoPerf.repeatWhen         1000,1    23919,436      217,644\r\nr.o.RedoPerf.repeatWhen      1000,1000       20,947        1,615\r\nr.o.RedoPerf.repeatWhen      1000000,1       25,316        0,970\r\nr.o.RedoPerf.retryCounted          1,1   176470,291     4570,641\r\nr.o.RedoPerf.retryCounted       1,1000      588,985       38,103\r\nr.o.RedoPerf.retryCounted    1,1000000        0,589        0,037\r\nr.o.RedoPerf.retryCounted       1000,1     7178,699      123,423\r\nr.o.RedoPerf.retryCounted    1000,1000       14,470        0,699\r\nr.o.RedoPerf.retryCounted    1000000,1        7,842        0,252\r\nr.o.RedoPerf.retryWhen             1,1   310407,136     8052,067\r\nr.o.RedoPerf.retryWhen          1,1000      567,338       13,511\r\nr.o.RedoPerf.retryWhen       1,1000000        0,587        0,036\r\nr.o.RedoPerf.retryWhen          1000,1    10388,639      269,817\r\nr.o.RedoPerf.retryWhen       1000,1000       10,657        1,471\r\nr.o.RedoPerf.retryWhen       1000000,1       11,550        0,287\r\n```\r\n\r\nThe `params` is a composite of number of elements and number of repetitions.'
p5984
sg5
S'1.x: redo performance checker'
p5985
sg7
(lp5986
S'Performance'
p5987
asg10
I3634
sg11
(lp5988
sg14
S'akarnokd:RedoPerf'
p5989
sbsI3635
(iPull
Pull
p5990
(dp5991
g3
S'Performance measurement of `zip` and upgrade to JMH 1.11.3.\r\n\r\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\r\n\r\nOverall throughput values:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523444/3e1893fc-c157-11e5-81bd-353031db4a91.png)\r\n\r\nComparing fully sync and fully async dual sources:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523464/5cc23074-c157-11e5-8231-5954eafd7d0e.png)\r\n\r\nComparing when either the first or the second is an async source:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12523485/7bdf951e-c157-11e5-9f3c-f2f3b156ba03.png)\r\n\r\nSo the order of sources matter, having the async first allows it to start early and not after the synchronous source completes its prefetch run.\r\n'
p5992
sg5
S'1.x: zip performance measure'
p5993
sg7
(lp5994
S'Performance'
p5995
asg10
I3635
sg11
(lp5996
S'One comment, otherwise looks good :+1: '
p5997
asg14
S'akarnokd:ZipPerf1x'
p5998
sbsI3637
(iPull
Pull
p5999
(dp6000
g3
S"A non-fatal exception thrown by `predicate.call()` in `OperatorSkipWhile` could result in the error being reported by an upstream operator. This PR ensures that the error is reported by the operator in which it occurs.\r\n\r\nI've added a unit test for this scenario that failed with the original code, and a couple of other tests.\r\n\r\nThere are a few more of these floating around that I'll submit PRs for as well."
p6001
sg5
S'handle predicate exceptions properly in skipwhile'
p6002
sg7
(lp6003
S'Bug'
p6004
asg10
I3637
sg11
(lp6005
S'unrelated unit test failure `BackpressureTests.testMergeAsync`'
p6006
aS':+1:'
p6007
aS':+1: '
p6008
asg14
S'davidmoten:skipWhile-exception-handling'
p6009
sbsI3638
(iPull
Pull
p6010
(dp6011
g3
S'As per #3637, `keySelector.call()` was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p6012
sg5
S'fix error handling in operatordistinctuntilchanged'
p6013
sg7
(lp6014
S'Bug'
p6015
asg10
I3638
sg11
(lp6016
S':+1:'
p6017
aS':+1: '
p6018
aS'Thanks @zsxwing, it was supposed to have been used and now is. Also made stuff private and static that could be. Commits squashed.'
p6019
aS':+1: '
p6020
asg14
S'davidmoten:fix-distinctUntilChanged-error-handling'
p6021
sbsI3639
(iPull
Pull
p6022
(dp6023
g3
S'`onOverflow.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p6024
sg5
S'fix error handling in onbackpressurebuffer'
p6025
sg7
(lp6026
S'Bug'
p6027
asg10
I3639
sg11
(lp6028
S':+1:'
p6029
aS':+1: '
p6030
aS':+1: '
p6031
asg14
S'davidmoten:fix-onBackpressureBuffer-error-handling'
p6032
sbsI3640
(iPull
Pull
p6033
(dp6034
g3
S'`onDrop.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p6035
sg5
S'fix error handling in onbackpressuredrop'
p6036
sg7
(lp6037
S'Bug'
p6038
asg10
I3640
sg11
(lp6039
S':+1: '
p6040
aS':+1: '
p6041
asg14
S'davidmoten:fix-onBackpressureDrop-error-handling'
p6042
sbsI3641
(iPull
Pull
p6043
(dp6044
g3
S'`combinator.call()` was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\r\n\r\nThis PR includes a unit test that failed on the original code.'
p6045
sg5
S'fix error handling in combinelatest'
p6046
sg7
(lp6047
S'Bug'
p6048
asg10
I3641
sg11
(lp6049
S'#3507 already takes care of this as well, but thanks.'
p6050
aS"Ah good, thanks @akarnokd. I guess we can leave this open if it's possible that #3507 doesn't make the next release.  By the way, the unit test in here would probably be nice to have in whichever PR makes it in first."
p6051
aS"I've updated #3507 with your test method."
p6052
aS'#3661 merged'
p6053
asg14
S'davidmoten:fix-combineLatest-error-handling'
p6054
sbsI3642
(iPull
Pull
p6055
(dp6056
g3
S'This PR add similar optimization as ScalarSynchronousObservable to Single.just method.'
p6057
sg5
S'1.x: optimizate single just'
p6058
sg7
(lp6059
S'Enhancement'
p6060
aS'Performance'
p6061
asg10
I3642
sg11
(lp6062
S'Could you also squash the commits?'
p6063
aS'In the master, there is a new class `SingleSourcePerf`. Could you run it before and after to see how well the optimizations work?'
p6064
aS'Ok, I will try to do it.'
p6065
aS"@akarnokd I can't find class SingleSourcePerf in master, do you mean SinglePerfBaseline?"
p6066
aS'https://github.com/ReactiveX/RxJava/blob/1.x/src/perf/java/rx/SingleSourcePerf.java'
p6067
aS'\r\nI have run the benchmark on 1.x and this PR(Intel Core i5-2400 @3.10GHz, Windows 7 x64, Java 1.8.0_45-b15), the results are as follows:\r\n### 1.x\r\n![20160126163611](https://cloud.githubusercontent.com/assets/8577318/12576495/13c41d74-c44f-11e5-9178-cb707fae2703.png)\r\n### this PR\r\n![20160126163953](https://cloud.githubusercontent.com/assets/8577318/12576496/13c60bac-c44f-11e5-82ca-683dc8c88728.png)\r\n\r\nThe results show that most of scores in this PR is higher than 1.x, especially that flatmap and flatmapConnst have a great ascension.\r\n\r\n\r\n'
p6068
aS':+1:'
p6069
aS'rebased'
p6070
aS'@Chaoba could you rebase against the master and fix the minor subscription issue? Thanks!'
p6071
aS'@zsxwing Thanks for your comment. Should I squash the commits?'
p6072
aS'> @zsxwing Thanks for your comment. Should I squash the commits?\r\n\r\n@Chaoba yes, please.'
p6073
aS'The commits has been squashed'
p6074
aS':+1: ping @akarnokd to take a final look and pull in :)'
p6075
aS":+1:\r\n\r\n@artem-zinnatullin I'd like your opinion on this `Single` matter."
p6076
aS'@Chaoba please add tests for: `scalarMerge`, `scalarObserveOn` and `scalarSubscribeOn` and squash PR into one commit.\r\n\r\nOtherwise looks great, will be happy to see it in next release!'
p6077
aS'add some new testcases, now the coverage is as follows:\r\n![20160202112639](https://cloud.githubusercontent.com/assets/8577318/12738855/8b25ff04-c99f-11e5-806b-18b3b02e0598.png)\r\n\r\n'
p6078
aS':+1:'
p6079
aS'Great set of tests! Just few comments left, @Chaoba please ping again once you fix them! (you can squash commits right away so we could merge it ASAP)'
p6080
aS'ping @artem-zinnatullin to review again please.\r\n'
p6081
aS':+1: thanks a lot, @Chaoba! (Looks like we can merge it now)'
p6082
aS':+1:\r\n'
p6083
asg14
S'Chaoba:optimizate_single_just'
p6084
sbsI3643
(iPull
Pull
p6085
(dp6086
g3
S"Benchmark `Single`'s behavior with `flatMap`, `subscribeOn` and `observeOn`.\r\n\r\nResults: (i7 4790, Windows 7 x64, Java 8u72)\r\n\r\n```\r\nBenchmark                   Score       Error  Units\r\ndirect                9054864,731  189403,130  ops/s\r\nflatmap               2761060,187   40953,148  ops/s\r\nflatmapConst          2763238,776   34372,376  ops/s\r\nobserveOn              300489,044   27461,361  ops/s\r\nobserveOnExec          333838,535    9098,275  ops/s\r\nobserveOnFJ            402261,384    9467,060  ops/s\r\nobserveOnSchExec       342714,377    8624,188  ops/s\r\nsubscribeOn            311487,902    8986,858  ops/s\r\nsubscribeOnExec        257315,361   29967,833  ops/s\r\nsubscribeOnFJ          383189,863   12596,397  ops/s\r\nsubscribeOnSchExec     290880,185   45773,862  ops/s\r\n```\r\n\r\nHere is a side-by-side comparison of throughput on various schedulers:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/12547224/5dc0b5aa-c34f-11e5-889f-f77bca708997.png)\r\n"
p6087
sg5
S'1.x: single performance measurements'
p6088
sg7
(lp6089
S'Performance'
p6090
asg10
I3643
sg11
(lp6091
sg14
S'akarnokd:ScalarPerf1x'
p6092
sbsI3644
(iPull
Pull
p6093
(dp6094
g3
S'Discovered in a [stackoverflow](http://stackoverflow.com/questions/35001387/how-to-handle-error-in-generatestate-in-synconsubscribe-rxjava) question.'
p6095
sg5
S'1.x: fix synconsubscribe not signalling onerror if the generator crashes'
p6096
sg7
(lp6097
S'Bug'
p6098
asg10
I3644
sg11
(lp6099
S':+1:'
p6100
aS':+1: '
p6101
aS'@stealthcode Do you have time to review #3631, see what else can be included into 1.1.1 and hopefully release it this week?'
p6102
aS"Sure I'll see what we can do."
p6103
asg14
S'akarnokd:SyncOnSubscribeErrorMgmt1x'
p6104
sbsI3645
(iPull
Pull
p6105
(dp6106
g3
S'The OnSubscribeAmb shared the choice variable among all of its subscribers which prevented reusing the same Observable.'
p6107
sg5
S'1.x: fix amb sharing the choice among all subscribers'
p6108
sg7
(lp6109
S'Bug'
p6110
asg10
I3645
sg11
(lp6111
S':+1: '
p6112
asg14
S'akarnokd:AmbStateFix1x'
p6113
sbsI3647
(iPull
Pull
p6114
(dp6115
g3
S'This change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler'
p6116
sg5
S'adding support for concurrently inserting actions while advancing time'
p6117
sg7
(lp6118
sg10
I3647
sg11
(lp6119
S'Hi. Why do you need this feature? TestScheduler is for single-threaded testing.'
p6120
aS"In fact, TestScheduler is also a very nice tool to use in integration tests. I'm using it in some automated integration tests where the time of the day is important and need to be controlled. These tests are moving the time progressively, checking the output of the software is coherent with the simulated time."
p6121
asg14
S'bcorne:2.x'
p6122
sbsI3648
(iPull
Pull
p6123
(dp6124
g3
S'\r\n\r\nThis change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler'
p6125
sg5
S'2.x: add support for concurrently inserting actions while advancing time'
p6126
sg7
(lp6127
S'Feature-Request'
p6128
asg10
I3648
sg11
(lp6129
S"I'm in for this small change. Could you rebase/redo this for the current 2.x branch?"
p6130
aS'Sure, will do that today'
p6131
aS'Thanks.'
p6132
asg14
S'bcorne:2.x'
p6133
sbsI3651
(iPull
Pull
p6134
(dp6135
g3
S'As promised in #3579.'
p6136
sg5
S'1.x: remove redundant "final" modifiers'
p6137
sg7
(lp6138
S'Cleanup'
p6139
asg10
I3651
sg11
(lp6140
S':+1:'
p6141
aS':+1:'
p6142
asg14
S'artem-zinnatullin:remove-redundant-final'
p6143
sbsI3653
(iPull
Pull
p6144
(dp6145
g3
S'Reported on the rxjava discussion group.\r\n\r\nSample has to disconnect itself from the Producer chain and request Long.MAX_VALUE instead of whatever the downstream requests.'
p6146
sg5
S'1.x: fix sample(observable) not requesting long.max_value'
p6147
sg7
(lp6148
S'Bug'
p6149
asg10
I3653
sg11
(lp6150
S':+1: '
p6151
aS':+1: '
p6152
asg14
S'akarnokd:SampleUnboundedFix1x'
p6153
sbsI3655
(iPull
Pull
p6154
(dp6155
g3
S'Part of #3652, will submit a PR for `onErrorResumeNext(Func1<Throwable, Single>)` later.'
p6156
sg5
S'1.x: add single.onerrorresumenext(single)'
p6157
sg7
(lp6158
S'Enhancement'
p6159
asg10
I3655
sg11
(lp6160
S'@akarnokd changed to `implements Single.OnSubscribe`! PTAL'
p6161
aS':+1:'
p6162
aS'@zsxwing PTAL :)'
p6163
aS':+1: '
p6164
aS':+1: '
p6165
asg14
S'artem-zinnatullin:single-onErrorResumeNextViaSingle'
p6166
sbsI3658
(iPull
Pull
p6167
(dp6168
g3
S'This PR fixes 2 bugs with `sample`\r\n\r\n- Termination of the main or sampler subscriber unsubscribed the child subscriber which is not allowed.\r\n- The sampler wrapped the child subscriber and thus it allowed setting a producer on the child (thus sampling based on request with some sources).\r\n\r\nIn addition, #3657 wants to emit the very last item on completion to which I marked the required changes in comments (to be uncommented in a separate PR if needed).'
p6169
sg5
S'1.x: fix unsubscription and producer issues in sample(other)'
p6170
sg7
(lp6171
S'Bug'
p6172
asg10
I3658
sg11
(lp6173
S'Restored original completion-unsubscription order + verification'
p6174
aS':+1: '
p6175
aS':+1: '
p6176
asg14
S'akarnokd:SampleOtherMoreFixes1x'
p6177
sbsI3659
(iPull
Pull
p6178
(dp6179
g3
S'Was using a pretty old version of gradle. Tests all run normally for me locally with this'
p6180
sg5
S'add wrapper task and update to gradle 2.10'
p6181
sg7
(lp6182
sg10
I3659
sg11
(lp6183
S"You can rarely update Gradle when you use Netflix's Nebula plugins. They are violently linked to implementation details because reasons."
p6184
aS"Ah, guess that explains why there haven't been any updates lately. Should I close this then?"
p6185
aS"Or step the version backwards until it works. It's a shame since the speed\nimprovements in 2.4 and 2.9+ are great. For RxAndroid we purged all the\nNebula plugins because they held the project back.\n\nOn Sun, Jan 31, 2016 at 7:20 PM Zac Sweers <notifications@github.com> wrote:\n\n> Ah, guess that explains why there haven't been any updates lately. Should\n> I close this then?\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3659#issuecomment-177669412>.\n>\n"
p6186
aS'eesh, yeah not even 2.3 will work. I was misled locally since the `wrapper` task worked the first time, but that made sense since `2.2.1` worked fine. Closing for now then. Wonder what the status is, came across #3501 after digging a bit more and seems it was closed without explanation.'
p6187
asg14
S'hzsweers:z/gradle'
p6188
sbsI3660
(iPull
Pull
p6189
(dp6190
g3
S"2.x already uses `Iterable`, but that's a very drastic change compared to just `Collection`.\r\n\r\nMotivation here is that I'm using set bindings to create observables in a dependency injector and I want to skip the current `new ArrayList<>(sources)` that I have to do on the set."
p6191
sg5
S'add combinelatest overload for collection'
p6192
sg7
(lp6193
S'Feature-Request'
p6194
asg10
I3660
sg11
(lp6195
S'Can we revisit this once #3507 is merged?'
p6196
aS'Yep. That allows exposing `Iterable` as well which is even better.'
p6197
aS":+1: \r\n\r\nDon't you want to add tests for your new `Observable.combineLatest()`? `OnSubscribeCombineLatest.java` is internal, will be great to cover public API as well for possible changes in future implementation and to test operator from user's point of view."
p6198
aS"The tests were modified to use it.\n\nOn Mon, Feb 1, 2016 at 10:27 AM Artem Zinnatullin <notifications@github.com>\nwrote:\n\n> [image: :+1:]\n>\n> Don't you want to add tests for your new Observable.combineLatest()?\n> OnSubscribeCombineLatest.java is internal, will be great to cover public\n> API as well for possible changes in future implementation and to test\n> operator from user's point of view.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3660#issuecomment-178019743>.\n>\n"
p6199
aS"Tests for `OnSubscribeCombineLatest` were modified, but I'm talking about tests for `Observable.combineLatest(Collection, FuncN)`."
p6200
aS'They use that API.'
p6201
asg14
S'JakeWharton:jw/collection'
p6202
sbsI3661
(iPull
Pull
p6203
(dp6204
g3
S"This PR is a backport of the 2.x `combineLatest` with `null` support and let's the programmer combine more than 128 sources at once. Note that 2.x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment; I kept these in case such features are required by 1.x some day.\r\n\r\nThe original had this 128 limit due to using a single and non-parametric RxRingBuffer to store values from sources. In addition, the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the buffer.\r\n\r\nThis PR uses an unbounded-linked SPSC queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary).\r\n\r\nThe algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream, that source subscriber gets the request() replenishment call that generated the row.\r\n\r\nIn addition, I've added an Iterator overload from #3660 as well."
p6205
sg5
S'1.x: combinelatest now supports any number of sources'
p6206
sg7
(lp6207
S'Bug'
p6208
aS'Enhancement'
p6209
asg10
I3661
sg11
(lp6210
S'Thanks!'
p6211
aS':+1:\r\n'
p6212
asg14
S'akarnokd:CombineLatestManyV3'
p6213
sbsI3662
(iPull
Pull
p6214
(dp6215
g3
S"When the operator is assembled and it sets the producer on the child, if the child doesn't request until the assembly is complete, `doOnRequest` requested the default Long.MAX_VALUE."
p6216
sg5
S'1.x: fix doonrequest premature requesting.'
p6217
sg7
(lp6218
S'Bug'
p6219
asg10
I3662
sg11
(lp6220
S'Good find thanks @akarnokd'
p6221
aS'Done.'
p6222
aS':+1: '
p6223
aS':+1:'
p6224
asg14
S'akarnokd:DoOnRequestFix'
p6225
sbsI3665
(iPull
Pull
p6226
(dp6227
g3
S'fix for https://github.com/ReactiveX/RxJava/issues/3664'
p6228
sg5
S'update javadoc for subscribers.empty()'
p6229
sg7
(lp6230
S'Documentation'
p6231
asg10
I3665
sg11
(lp6232
S':+1: '
p6233
aS':+1:'
p6234
aS'I\'ll squash in a few when I get to work.\nOn Feb 3, 2016 10:18 AM, "David Karnok" <notifications@github.com> wrote:\n\n> [image: :+1:]\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3665#issuecomment-179288608>.\n>\n'
p6235
aS':+1:\r\n'
p6236
aS':+1: '
p6237
asg14
S'digitalbuddha:bug/javadoc_update'
p6238
sbsI3668
(iPull
Pull
p6239
(dp6240
g3
S'Due to the issue with AtomicXFieldUpdaters on certain Android devices, I had to manually replace all of them with regular AtomicX classes.'
p6241
sg5
S'2.x: full jdk 6 compatible backport + including bugfixes up to today'
p6242
sg7
(lp6243
S'Enhancement'
p6244
asg10
I3668
sg11
(lp6245
S"This is basically unreviewable, so I vote that it is just merged. People can go through the code base passively and bring up any issues/questions/etc. as they're discovered."
p6246
aS"It's not possible incrementally anyway, i.e., by using our own Function, it affects all operators that take Function."
p6247
aS':+1: Agree'
p6248
aS"I'm ok for merging it as is. \r\nLet's review it incrementally.\r\n:+1:"
p6249
aS':+1: for all of this'
p6250
aS'Merged. Happy reviewing!'
p6251
asg14
S'akarnokd:Java6Backport'
p6252
sbsI3670
(iPull
Pull
p6253
(dp6254
g3
S'fix for javadoc issue #3669'
p6255
sg5
S'1.x: fix subscribers.create(onnext) javadoc'
p6256
sg7
(lp6257
S'Documentation'
p6258
asg10
I3670
sg11
(lp6259
S':+1:'
p6260
aS'oh, what a mistake in javadoc. :+1: thanks!'
p6261
aS':+1: '
p6262
aS':+1: '
p6263
asg14
S'oguzbabaoglu:subscribers_javadoc_fix'
p6264
sbsI3671
(iPull
Pull
p6265
(dp6266
g3
S'I forgot that RxCached threads can get evicted during the test. The new logic makes sure no new threads appeared.'
p6267
sg5
S'2.x: fix schedulerlifecycle.teststartidempotence vs cached threads dying'
p6268
sg7
(lp6269
S'Test-Failures'
p6270
asg10
I3671
sg11
(lp6271
S'Looks good to me.'
p6272
aS':+1: '
p6273
aS':+1: '
p6274
aS':+1: '
p6275
asg14
S'akarnokd:SchedulerTestFix2x'
p6276
sbsI3672
(iPull
Pull
p6277
(dp6278
g3
S'Since it has become standard to have everything about how to contribute on CONTRIBUTING.md file, I think   it would be really helpful and good to have link to How-to-Contribute wiki page.'
p6279
sg5
S'add how to contribute wiki link'
p6280
sg7
(lp6281
S'Documentation'
p6282
asg10
I3672
sg11
(lp6283
S':+1: '
p6284
aS':+1: '
p6285
aS':+1:'
p6286
asg14
S'harunurhan:1.x'
p6287
sbsI3675
(iPull
Pull
p6288
(dp6289
g3
S"Originally, only 0 was checked which resulted in `onCompleted()` but negative values weren't. When the downstream requested, c became -1 and was requested from the source. `range` ignores negative requests but other sources may throw IAE in that case.\r\n\r\nWith the fix, the operator will throw IAE in assembly time."
p6290
sg5
S'1.x: fix take(-1) not completing'
p6291
sg7
(lp6292
S'Bug'
p6293
asg10
I3675
sg11
(lp6294
S':+1: '
p6295
aS'Why not IAE on negative values for the operator? This seems like it could hide errors in math-based `take` values.'
p6296
aS"I don't know, could be some historical reasons from the early days of RxJava."
p6297
aS"Just checked Rx.Net and RxJS. Both them throw an error for negative values:\r\n\r\nhttps://github.com/Reactive-Extensions/Rx.NET/blob/859e6159cb07be67fd36b18c2ae2b9a62979cb6d/Rx.NET/Source/System.Reactive.Linq/Reactive/Linq/Observable.StandardSequenceOperators.cs#L1279\r\nhttps://github.com/Reactive-Extensions/RxJS/blob/master/src/modular/observable/take.js#L47\r\n\r\nSo I suggest let's throw IAE."
p6298
aS'Could you also check `skip`?'
p6299
aS"skip(0) and skip(-1) just returns the source without applying the operator to it.\r\n\r\nFor 2.x, definitely, but I'm not certain about 1.x, sounds like an API change."
p6300
aS'cc @ReactiveX/rxjava-committers thoughts about this?'
p6301
aS"For invalid inputs we've typically blown up as early as possible. "
p6302
aS'I think we need to throw exception. We can highlight this in changelog and call it a bug fix because it actually is, I guess. '
p6303
aS"I vote for throwing IAE.\r\nI don't consider it's an API change, more a bug fix."
p6304
aS'Changed the fix to throw.'
p6305
aS'Any reason for not using [`ExpectedException`](http://junit.org/javadoc/latest/org/junit/rules/ExpectedException.html), that way the exception message can also be verified plus it can be nailed down where the Exception is thrown (the moment you call `take(-1)`).'
p6306
aS'Because it is irrelevant in this case, what matters is the type IAE.'
p6307
aS':+1: '
p6308
asg14
S'akarnokd:TakeMinusNFix1x'
p6309
sbsI3677
(iPull
Pull
p6310
(dp6311
g3
S"As per #3675, we should also check the `count` argument of `skip`. Also added the missing check for `merge`'s `maxConcurrent`."
p6312
sg5
S"1.x: negative argument check for skip's count and merge's maxconcurrent"
p6313
sg7
(lp6314
sg10
I3677
sg11
(lp6315
S"I'd suggest to check exception message here and in the other tests, otherwise :+1: "
p6316
aS"> I'd suggest to check exception message here and in the other tests, otherwise\r\n\r\nDone"
p6317
aS'Thanks, @zsxwing! :+1: :+1: '
p6318
aS':+1: '
p6319
aS':+1: '
p6320
asg14
S'zsxwing:negative-check'
p6321
sbsI3678
(iPull
Pull
p6322
(dp6323
g3
S"This PR fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changes.\r\n\r\nThe main issue lies when `count > skip` in the operators, yielding overlapping buffers/windows. \r\n\r\nFor `buffer`, when the upstream completed, the logic emitted all remaining partial buffers even if there was no request for new buffers, which can result in `MissingBackpressureException` somewhere. The proper handling of the final buffers required a new backpressure management algorithm which is now part of the `BackpressureUtils` class and consists of two new methods: `postCompleteDone` called from onComplete to take over the emission of queued values and `postCompleteRequest` which manages requests before and after the completed state.\r\n\r\nFor `window`, the new window opened was emitted regardless of requests which was common due to request-amplification (i.e., requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront. To avoid the overflow, the individual windows have to go through the usual queue/drain logic as well. I've also updated the Javadoc to reflect the backpressure behavior along with parameter validation.\r\n\r\nIn addition, the window case didn't manage cancellation properly. When the outer observable is unsubscribed, the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. Instead, the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e., count reaches zero), the upstream is unsubscribed. To accomplish this, the `UnicastSubject` had to be retrofitted with a new optional callback `Action0` which gets called at most once whenever either `onError` or `onCompleted` is called or when the single `Subscriber` unsubscribes.\r\n\r\nA secondary issue was with the `TestSubscriber`'s initial request; some upstream operators could get triggered with `Long.MAX_VALUE` despite the initial request amount was set. This PR changes it to be set at construction time instead of in `onStart`."
p6324
sg5
S'1.x: fix counted buffer and window backpressure'
p6325
sg7
(lp6326
S'Bug'
p6327
asg10
I3678
sg11
(lp6328
S'Ping @stevegury @stealthcode @zsxwing '
p6329
aS"@iNoles I think that's GitHub's fault. You can see [here](https://raw.githubusercontent.com/akarnokd/RxJava/e9c6d49b0bb816c40483b4df2a580e5e1ad80c25/src/main/java/rx/Observable.java) that the line is fine. "
p6330
aS'Fixed all 3 sites of `new ArrayList`'
p6331
aS':+1: '
p6332
aS':+1: '
p6333
asg14
S'akarnokd:BufferWindowRequestFix1x'
p6334
sbsI3680
(iPull
Pull
p6335
(dp6336
g3
S'No code change.'
p6337
sg5
S'fix various misspellings in operatorpublish'
p6338
sg7
(lp6339
S'Cleanup'
p6340
asg10
I3680
sg11
(lp6341
S':+1:'
p6342
asg14
S'ReactiveX:stevegury-operatorpublish-misspellings'
p6343
sbsI3681
(iPull
Pull
p6344
(dp6345
g3
S'Solves the problems #3673 and #3674 by introducing a new subject-like dispatcher class `OnSubscribePublishMulticast` that does support backpressure, pauses when there are no subscribers and signals the terminal event for late subscribers; all ideal for the multicasting `publish(Func1)` overload.'
p6346
sg5
S'1.x: change publish(func1) to use a dedicated subject-like dispatcher'
p6347
sg7
(lp6348
S'Enhancement'
p6349
asg10
I3681
sg11
(lp6350
S'Updated with more unit tests and behavior clarification/validation (`publish(Func1)` had almost no tests).'
p6351
aS'Other than this minor comment, :+1: '
p6352
asg14
S'akarnokd:PublishMulticast1x'
p6353
sbsI3682
(iPull
Pull
p6354
(dp6355
g3
S'This PR fixes the "messing around" reported in #3002 and adds an overload to `observeOn` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports).\r\n\r\nIn addition, this PR adds a proper override of the `isEmpty` method to simply compare the two indexes for emptiness directly instead of `size() == 0` to avoid looping, multi-reading and casting.\r\n\r\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10.png)\r\n\r\nNote that the benchmark is generally quite noisy, yielding hectic results (i.e., firing up a thread with newThread may take quite some random microseconds). For example, `observeOnImmediate` shouldn\'t be affected by any of the changes yet the run-to-run variance is +/- 10%. I\'m fine with the results of the benchmark.'
p6356
sg5
S'1.x: fix observeon resource handling, add delayerror capability'
p6357
sg7
(lp6358
S'Enhancement'
p6359
asg10
I3682
sg11
(lp6360
S':+1:'
p6361
asg14
S'akarnokd:ObserveOnCleanup1xV2'
p6362
sbsI3683
(iPull
Pull
p6363
(dp6364
g3
S'See #1508'
p6365
sg5
S'1.x: javadoc for rx.exceptions.exceptions'
p6366
sg7
(lp6367
S'Documentation'
p6368
asg10
I3683
sg11
(lp6369
S':+1: '
p6370
aS':+1: '
p6371
aS':+1: '
p6372
asg14
S'akarnokd:ExceptionsJavadoc1x'
p6373
sbsI3684
(iPull
Pull
p6374
(dp6375
g3
S'See #1511. '
p6376
sg5
S'1.x: javadoc for producer'
p6377
sg7
(lp6378
S'Documentation'
p6379
asg10
I3684
sg11
(lp6380
S':+1: '
p6381
aS':+1: '
p6382
asg14
S'akarnokd:ProducerJavadoc1x'
p6383
sbsI3685
(iPull
Pull
p6384
(dp6385
g3
S'When the operator switches to the other, that counts as a handled error. \r\n\r\nSee also #3347.'
p6386
sg5
S'1.x: onerrorresumenext(func1) should not call plugin handler there'
p6387
sg7
(lp6388
S'Bug'
p6389
asg10
I3685
sg11
(lp6390
S'There are similar patterns in the other `onError*` operators, namely `OperatorOnErrorResumeNextViaObservable` and `OperatorOnErrorReturn` - do those need changing as well?'
p6391
aS"Yes, I'll update this PR."
p6392
aS'Updated, although all of these classes have backpressure bugs in them.'
p6393
aS'Replaced by #3689'
p6394
asg14
S'akarnokd:PublinErrorHandlerCallFix1x'
p6395
sbsI3686
(iPull
Pull
p6396
(dp6397
g3
g57
sg5
S'added retry and retrywhen support for single'
p6398
sg7
(lp6399
S'Enhancement'
p6400
asg10
I3686
sg11
(lp6401
S"Please don't unroll `import *` because it creates merge conflicts all the time."
p6402
aS'My codestyle settings messed everything a bit. Is there a exported codestyle.xml file or something similar so I could import into my IDE?'
p6403
aS'Not really. Also please squash your commits.'
p6404
aS'Could you also fix those 1 spaces removed everywhere?'
p6405
aS'I have fixed all reported problems.'
p6406
aS'Something went really wrong. I merged latest changes from upstream 1.x to my 1.x branch.'
p6407
aS"In this case, I'd just start from a clean branch of master and reapply/merge my customizations."
p6408
aS'I managed to fix it. Now I just need to sort out the missing spaces.'
p6409
aS'This looks much better.\r\n\r\n:+1:'
p6410
aS':+1:'
p6411
asg14
S'klemzy:1.x'
p6412
sbsI3688
(iPull
Pull
p6413
(dp6414
g3
S'Reported in #3687.\r\n\r\nBy the way, I see several other small problems with zip: it is implemented as an `Operator` and even though one can know the number of sources upfront, this indirection hides the fact. In addition, it uses SpMc queue but could just use Spsc because there is only one drain thread at a time.'
p6415
sg5
S'1.x: fix zip() - observer array becoming visible too early and causing npe'
p6416
sg7
(lp6417
S'Bug'
p6418
asg10
I3688
sg11
(lp6419
S'Few small things, otherwise lgtm :+1:'
p6420
aS'Updated.'
p6421
aS':+1:'
p6422
asg14
S'akarnokd:ZipStartBarrierFix'
p6423
sbsI3689
(iPull
Pull
p6424
(dp6425
g3
S"The operators didn't honor backpressure when they switched over to the other Observable.\r\n\r\nThis PR also includes the fix #3685."
p6426
sg5
S'1.x: unified onerrorx and onexceptionresumenext and fixed backpressure'
p6427
sg7
(lp6428
S'Bug'
p6429
asg10
I3689
sg11
(lp6430
S"There was a test failure in BackpressureTests.testMergeAsync, run before any of the changes of this PR and shouldn't have any effect. Overloaded servers?"
p6431
aS':+1: '
p6432
asg14
S'akarnokd:OnErrorDoXFix1x'
p6433
sbsI3690
(iPull
Pull
p6434
(dp6435
g3
S'Update the gradle-rxjava-project-plugin to the latest version.\r\nUpdate gradle to version 2.10 as well.'
p6436
sg5
S'update nebula gradle plugin'
p6437
sg7
(lp6438
S'Build'
p6439
asg10
I3690
sg11
(lp6440
S'Gradle 2.11 is out, can you not use that?'
p6441
aS"@hzsweers I didn't check recently, it has just been released!\r\nI've updated the version to 2.11."
p6442
aS':+1:'
p6443
aS':+1:'
p6444
aS'Also cherry-pick to 2.x?'
p6445
aS'Done -> #3693'
p6446
asg14
S'stevegury:nebula-gradle-update'
p6447
sbsI3692
(iPull
Pull
p6448
(dp6449
g3
S'The upgraded gradle switched my IDE to use a JDK 6 library I have installed all along and these popped up immediately.'
p6450
sg5
S'1.x: fix completable using jdk 7 suppressed exceptions feature'
p6451
sg7
(lp6452
S'Bug'
p6453
asg10
I3692
sg11
(lp6454
S':+1: '
p6455
aS':+1: '
p6456
aS"Although nebula gradle plugin requires Java 7, I'm still wondering if we can setup a build to compile codes with Java 6 to avoid such issue. E.g., I can just use `find src/main/java/* -name *.java | xargs javac` to compile them using Java 6 and see if any error."
p6457
asg14
S'akarnokd:CompletableJDK6Fix'
p6458
sbsI3693
(iPull
Pull
p6459
(dp6460
g3
S'Cherry-pick of the gradle nebula plugin upgrade in 1.x branch.'
p6461
sg5
S'update nebula gradle plugin'
p6462
sg7
(lp6463
sg10
I3693
sg11
(lp6464
S':+1: '
p6465
aS':+1: '
p6466
asg14
S'stevegury:2.x'
p6467
sbsI3694
(iPull
Pull
p6468
(dp6469
g3
S'cherry-pick #3623 to 1.x'
p6470
sg5
S'1.x: #3618 adding source links for @beta and @experimental'
p6471
sg7
(lp6472
sg10
I3694
sg11
(lp6473
S'cc @adam-arold'
p6474
aS':+1: \r\n'
p6475
asg14
S'zsxwing:readme'
p6476
sbsI3695
(iPull
Pull
p6477
(dp6478
g3
S'Preparation for 1.1.1'
p6479
sg5
S'release 1.1.1 changes.md'
p6480
sg7
(lp6481
S'Information'
p6482
asg10
I3695
sg11
(lp6483
S':+1: '
p6484
aS':+1: '
p6485
aS'Fixed typo.'
p6486
aS'@stevegury Feel free to merge and make the release also happen.'
p6487
asg14
S'akarnokd:Release1_1_1'
p6488
sbsI3696
(iPull
Pull
p6489
(dp6490
g3
S'Resolves #3595'
p6491
sg5
S'1.x: added single execution hooks'
p6492
sg7
(lp6493
S'Enhancement'
p6494
asg10
I3696
sg11
(lp6495
S'Would you also apply these plugin methods in Single?\r\n\r\n  - onSubscribeStart\r\n  - onSubscribeReturn\r\n  - onSubscribeError\r\n  - onLift'
p6496
aS'Below hooks are already called (I replaced previous calls of `RxJavaObservableExecutionHook` by `RxJavaSingleExecutionHook` calls).\r\n- onSubscribeReturn\r\n- onSubscribeError\r\n- onLift\r\n\r\nHowever there is problem with `onSubscribeStart`. This hook should be called in `onSubscribe` and `unsafeSubscribe`. Unfortunately, in `Single` `onSubscribe` and `unsafeSubscribe` methods get `Subscriber` type as parameter instead of `SingleSubscriber`. I will make a commit to cover it soon.'
p6497
aS'There is something wrong, a bunch of Single test failed.'
p6498
aS':+1:'
p6499
aS'As far I see that failing test is not related with my changes. Is `rx.schedulers.CachedThreadSchedulerTest > testUnSubscribeForScheduler` some kind of flaky test?'
p6500
aS'More tests would be appreciated, but otherwise LGTM.\r\n'
p6501
aS'Could you squash the commits and rebase this PR?'
p6502
aS':+1: (after you rebase/squash the commits)'
p6503
aS':+1:'
p6504
asg14
S'phajduk:SingleHooks'
p6505
sbsI3697
(iPull
Pull
p6506
(dp6507
g3
S"Schedulers.computation()\r\n\r\nWhen one installs a scheduler hook which makes Schedulers.computation() return a different scheduler, the constant function in ScalarSynchronousObservable crashes if that hasn't been initialized."
p6508
sg5
S'1.x: fix scalarsynchronousobservable expects eventloopsscheduler from'
p6509
sg7
(lp6510
S'Bug'
p6511
asg10
I3697
sg11
(lp6512
S':+1:'
p6513
asg14
S'akarnokd:JustFixScheduler'
p6514
sbsI3699
(iPull
Pull
p6515
(dp6516
g3
S'This is passing against 1.1.1 with the back-ported OperatorGroupBy, but would be good to have it in as a regression test.\r\n\r\nSee also: #3698'
p6517
sg5
S'1.x: groupby regression test case'
p6518
sg7
(lp6519
S'Test'
p6520
asg10
I3699
sg11
(lp6521
S'Could you please squash the commits?'
p6522
asg14
S'duncani:1.x_#3698'
p6523
sbsI3701
(iPull
Pull
p6524
(dp6525
g3
S'Closes #3700.'
p6526
sg5
S'1.x: add completable.dooncompleted and deprecate completable.dooncomplete'
p6527
sg7
(lp6528
S'Cleanup'
p6529
asg10
I3701
sg11
(lp6530
S"Wait, what? I thought you wanted to add `Completable.doOnCompleted()`. I see no reason to change the established naming of `Observable.doOnCompleted()`. In fact, for consistency, I'd rather prefer adding `Completable.doOnCompleted`."
p6531
aS'That makes sense. The only reason I did it this way is because on the 2.x branch both [Observable](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Observable.java#L1714) and [Completable](https://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/Completable.java#L1230) use `doOnComplete()`.'
p6532
aS"Yes, those follow the reactive-streams convention and Completable started out as a 2.x addition. In the meantime, I'll fix that test failure."
p6533
aS'Changed `Completable` instead, updated tests to match.'
p6534
aS':+1:'
p6535
aS'@zach-klippenstein Thanks! Just updated the title. :+1: '
p6536
aS':+1: '
p6537
asg14
S'zach-klippenstein:ObservableDoOnComplete1x'
p6538
sbsI3702
(iPull
Pull
p6539
(dp6540
g3
S"The previous algorithm used a 2 element queue but it was possible the drain loop got captured and the queue wasn't enough, causing `MissingBackpressureException`.\r\n\r\nThe new algorithm uses the requested field's most significant bit to indicate a completed state. If the terminal events reach it with non-zero request or a post-terminal request finds a zero request amount, the last item is emitted.\r\n\r\nIn addition, the upstream's producer may arrive after the first request thus the class includes the usual arbitration logic inlined. If the upstream doesn't set a `Producer` but just emits values, the production/backpressure checks are bypassed.\r\n\r\n```\r\nrx.internal.operators.OperatorFlatMapTest > testFlatMapTransformsMaxConcurrentNormalLoop FAILED\r\n    java.lang.AssertionError: Unexpected onError events: 1\r\n        at rx.observers.TestSubscriber.assertNoErrors(TestSubscriber.java:309)\r\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:419)\r\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormalLoop(OperatorFlatMapTest.java:395)\r\n        Caused by:\r\n        rx.exceptions.MissingBackpressureException\r\n            at rx.internal.operators.OperatorMapNotification$SingleEmitter.offerAndComplete(OperatorMapNotification.java:173)\r\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted(OperatorMapNotification.java:80)\r\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.slowpath(OnSubscribeFromIterable.java:101)\r\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.request(OnSubscribeFromIterable.java:73)\r\n            at rx.internal.producers.ProducerArbiter.emitLoop(ProducerArbiter.java:186)\r\n            at rx.internal.producers.ProducerArbiter.setProducer(ProducerArbiter.java:129)\r\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.setProducer(OperatorMapNotification.java:74)\r\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:49)\r\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:32)\r\n            at rx.Observable$2.call(Observable.java:162)\r\n            at rx.Observable$2.call(Observable.java:154)\r\n            at rx.Observable$2.call(Observable.java:162)\r\n            at rx.Observable$2.call(Observable.java:154)\r\n            at rx.Observable.subscribe(Observable.java:8426)\r\n            at rx.Observable.subscribe(Observable.java:8393)\r\n            at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:416)\r\n            ... 1 more\r\n```"
p6541
sg5
S"1.x: fix mapnotification's last item backpressure handling"
p6542
sg7
(lp6543
S'Bug'
p6544
asg10
I3702
sg11
(lp6545
S':+1: '
p6546
asg14
S'akarnokd:MapNotificationFix1x'
p6547
sbsI3704
(iPull
Pull
p6548
(dp6549
g3
S'This PR modified the javadoc task to make it generate the same format of http://reactivex.io/RxJava/javadoc/index.html. `gradle/stylesheet.css` is copied from https://github.com/ReactiveX/RxJava/blob/gh-pages/javadoc/stylesheet.css\r\n\r\nThis supports both Java 7 and Java 8. However, docs generated by Java 8 have a totally different style. Hence we should use Java 7 to generate javadoc and publish it to http://reactivex.io/RxJava/javadoc/index.html.'
p6550
sg5
S'1.x: make the javadoc task generate correct docs'
p6551
sg7
(lp6552
S'Build'
p6553
aS'Documentation'
p6554
asg10
I3704
sg11
(lp6555
S':+1: '
p6556
aS':+1: '
p6557
aS':+1:'
p6558
asg14
S'zsxwing:javadoc'
p6559
sbsI3705
(iPull
Pull
p6560
(dp6561
g3
S'Generated by `./gradlew -Prelease.version=1.1.1 clean javadoc` using Java 7 after applying #3704'
p6562
sg5
S'update rxjava javadoc to 1.1.1'
p6563
sg7
(lp6564
S'Documentation'
p6565
asg10
I3705
sg11
(lp6566
S':+1:'
p6567
aS':+1: '
p6568
asg14
S'zsxwing:gh-pages'
p6569
sbsI3707
(iPull
Pull
p6570
(dp6571
g3
S'The empty and lambda-based `Completable.subscribe()` returns a `Subscription` whose `isUnsubscribed` should be consistent with the rest of the reactive objects by returning true if the sequence terminated (not just when one truly cancelled it).'
p6572
sg5
S'1.x: make completable.subscribe() report isunsubscribed consistently'
p6573
sg7
(lp6574
S'Bug'
p6575
asg10
I3707
sg11
(lp6576
S'Updated.'
p6577
aS'I see. :+1: '
p6578
asg14
S'akarnokd:CompletableLambdaIsUnsubscribed1x'
p6579
sbsI3712
(iPull
Pull
p6580
(dp6581
g3
S"As discussed in #3708\r\n\r\nThis adds `takeUntil(Observable)` and `takeUntil(Single)` support in `Single`. It was mostly just adapting the logic from the existing `OperatorTakeUntil` and adjusting it for accepting a `Single` and sending a `CancelattionException` in the event of a submission from `other` prior to a terminal event in the source `Single`.\r\n\r\nAny feedback is appreciated it, this is my first time contributing an implementation to this project. Particularly wondering if it's worth keeping both overloads or if the user should just coerce their `other` to one type or ther other. Also particularly looking for feedback on what information to include in the `CancellationException`."
p6582
sg5
S'add takeuntil support in single'
p6583
sg7
(lp6584
S'Enhancement'
p6585
asg10
I3712
sg11
(lp6586
S'Just noticed my IDE swapped the wildcard imports for explicit ones. Let me know if I should revert that.'
p6587
aS'Yes please.'
p6588
aS'Just style issues, otherwise LGTM :+1:'
p6589
aS'CC @akarnokd @artem-zinnatullin \r\n\r\nFor the tests, most of them are adapted from `OperatorTakeUntilTest`.  It looks like these tests have two different styles (one with `TestObservable` and the other with `Subject`). I reused both of them here, but would we maybe want to stick with one or the other? Especially with Single, I think some now overlap.\r\n\r\nAlso, if we stick with one style here, should we update the style in `OperatorTakeUntilTest` as well to match? \r\n'
p6590
aS"I'm not too keen on how the tests are named or what test framework objects you use.\r\n\r\nPlease squash your commits."
p6591
aS'Squashed'
p6592
aS':+1:'
p6593
aS"@zsxwing @stevegury any input? Need another collaborator review\r\n\r\nMain points I'm wondering about:\r\n- Should we only support one overload? If we support more than one, should it support all three (including `Completable`?)\r\n- Should `takeUntil` test styles formalized, looks like there are two styles right now judging by `OperatorTakeUntilTest`: subject-based and `TestObservable`-based."
p6594
aS":+1: \r\nYes, I think it makes sense to had an override for `Completable`.\r\nRegarding test styles, I don't think it's a big deal. The best thing to do slowly convert all the tests to the new convention (ideally in separated commits that don't change the behavior)."
p6595
aS'> sending a CancelattionException in the event of a submission from other prior to a terminal event in the source Single.\r\n\r\nThis behavior is really confusing. Why not be same as Observable? Am I missing anything?'
p6596
aS'@akarnokd and I discussed it in #3708. `Single` currently emits a `NoSuchElementException` if the stream is terminated prior to any event emission. By signaling a `CancellationException`, we can at least signal to the subscriber if the error was due to `takeUntil` unsubscribing it or normal missing emissions.'
p6597
aS'@hzsweers Thanks for clarifying. However, I would expect `Single.takeUntil` returns something that contains 0 or 1 item. How about returning Observable instead? Then the semantics of `Single.takeUntil` is `onNext{0, 1} (onCompleted | onError)`, which is consistent with `Observable.takeUntil` (`onNext{0, N} (onCompleted | onError)`)'
p6598
aS"The operators should stay in the same type as long as they can and there are operators that simply can't behave the same as their counterpart in other reactive types. If one wishes the `Observable.takeUntil` behavior, one can use toObservable().takeUntil() and get that behavior"
p6599
aS"> The operators should stay in the same type as long as they can and there are operators that simply can't behave the same as their counterpart in other reactive types. If one wishes the Observable.takeUntil behavior, one can use toObservable().takeUntil() and get that behavior\r\n\r\nIf so, I vote for `NoSuchElementException` as `CancellationException` seems counterintuitive to me. `CancellationException` looks some codes cancel Single (e.g., I call `unsubscribe` in some place). But here the error is that `Single.takeUntil` returns something that is not `Single`. Hence, I would expect `NoSuchElementException`."
p6600
aS'That\'s fair, but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved? I was of the impression that `onError` was primarily for serious, unexpected errors, whereas this seems like not unexpected or serious.\r\n\r\nConsider the following\r\n\r\nWith `NoSuchElementException`:\r\n```java\r\nPublishSubject<Integer> source = PublishSubject.create();\r\nPublishSubject<Integer> until = PublishSubject.create();\r\n\r\nsource.take(1).toSingle()\r\n        .takeUntil(until.take(1).toSingle())\r\n        .subscribe(\r\n                new Action1<Integer>() {\r\n                    @Override\r\n                    public void call(Integer integer) {\r\n                        System.out.println("Success");\r\n                    }\r\n                },\r\n                new Action1<Throwable>() {\r\n                    @Override\r\n                    public void call(Throwable throwable) {\r\n                        System.out.println("I don\'t know if it was due to unsubscribing or the source is misbehaving");\r\n                    }\r\n                });\r\n\r\nuntil.onNext(1);\r\n```\r\n\r\nvs. with `CancellationException`\r\n\r\n```java\r\nPublishSubject<Integer> source = PublishSubject.create();\r\nPublishSubject<Integer> until = PublishSubject.create();\r\n\r\nsource.take(1).toSingle()\r\n        .takeUntil(until.take(1).toSingle())\r\n        .subscribe(\r\n                new Action1<Integer>() {\r\n                    @Override\r\n                    public void call(Integer integer) {\r\n                        System.out.println("Success");\r\n                    }\r\n                },\r\n                new Action1<Throwable>() {\r\n                    @Override\r\n                    public void call(Throwable throwable) {\r\n                        if (throwable instanceof CancellationException) {\r\n                            System.out.println("It was canceled.");\r\n                        } else {\r\n                            System.out.println("Source didn\'t emit.");\r\n                        }\r\n                    }\r\n                });\r\n\r\nuntil.onNext(1);\r\n```\r\n\r\nThe example I gave in the issue is probably the best example for me. We use something similar to this for lifecycle binding in android. When the lifecycle ends, it might unsubscribe this in the middle. For a normal error, we might show a generic "an error occurred" message. In the event that it\'s just the lifecycle ending, we don\'t want to react that way, and rather likely just want to do nothing at all or clean up resources. I\'m fine with not using `CancellationException`, but I think it would be useful to add a means of being able to differentiate between unsubscription reasons. \r\n\r\nI thought about just specifying a message, but felt that @akarnokd\'s `CancellationException` suggestion made it more clear.'
p6601
aS'I\'ll add an overload for `Completable` as well, and remove the old test style in the new tests here for now. @stevegury just to be clear, the "new" style would be the `Subject`-based approach right?'
p6602
aS'@hzsweers I actually typed "it\'s a big deal" but I was willing to say "it\'s **not** a big deal" (I corrected my previous comment). I prefer the Subject based approach, but I am not strongly opinionated about that.\r\nI still :+1: on the current implementation.'
p6603
aS"> That's fair, but is there something we could do to at least indicate whether the source was just unsubscribed or actually misbehaved?\r\n\r\nMy point here is if Single.takeUntil(...) returns a Single that emits nothing, it should be `misbehaved` rather than `unsubscribed`."
p6604
aS'I think "CancellationException" is the clearer reaction here. Remember the problems around the Observable.single() and how it is a source of problem to find out exactly who didn\'t signal? Here, you know that if takeUntil is tripped and not some upstream machinery ends up being empty.'
p6605
aS'> I think "CancellationException" is the clearer reaction here. Remember the problems around the Observable.single() and how it is a source of problem to find out exactly who didn\'t signal? Here, you know that if takeUntil is tripped and not some upstream machinery ends up being empty.\r\n\r\nWhat if we want to add other operator that may return something doesn\'t signal? If it also emits `CancellationException`, then we still cannot find out exactly who didn\'t signal. So why not use `NoSuchElementException` to indicate all cases that didn\'t signal?'
p6606
aS"What about a subclass of `NoSuchElementException`? A `CanceledNoSuchElementException`, so to speak. Wouldn't break the downstream APIs but still allows for the subscriber to differentiate."
p6607
aS"> What about a subclass of NoSuchElementException? A CanceledNoSuchElementException, so to speak. Wouldn't break the downstream APIs but still allows for the subscriber to differentiate.\r\n\r\nMaybe a more general question, should we add special exceptions for different operators, or we just use a general exception to indicate the same error?\r\n\r\n"
p6608
aS'I think people should be aware of the implications of operators they use. Would `CompositeException` possibly be precedent for this?'
p6609
aS"> I think people should be aware of the implications of operators they use. Would CompositeException possibly be precedent for this?\r\n\r\nCompositeException is fine and clear. It indicates there are multiple errors thrown. All classes in rx.exceptions are well defined, and it's very easy to connect them with the bad cases. I can just read the exception name and tell what my codes violate. But for `CancellationException`, it's hard to connect it with `takeUntil`, especially people use some library that calls `takeUntil` internally. In addition, IMO, if I see `CancellationException`, my first thought is `Future.cancel` is called somewhere.\r\n\r\nIf we can define clearly that when should throw CancellationException/CanceledNoSuchElementException(or whatever you propose), when should throw NoSuchElementException, I won't be against that. For now, the confusing thing for me is that if a Single doesn't signal, I may receive CancellationException or NoSuchElementException."
p6610
aS"I'm fine with either. I think we could be clear in the documentation, and subclassing would still allow downstream subscribers to treat it as a `NoSuchElementException`. @akarnokd @stevegury thoughts?"
p6611
aS'Added `takeUntil(Completable)` support and standardized tests. Updated with a separate commit for easier reviewing, let me know if you want me to squash again.\r\n\r\nping @akarnokd @stevegury'
p6612
aS':+1:'
p6613
aS':+1: '
p6614
asg14
S'hzsweers:z/single_takeuntil'
p6615
sbsI3714
(iPull
Pull
p6616
(dp6617
g3
S'Relevant issue #3710 '
p6618
sg5
S'1.x: add maxconcurrent parameter to concatmapeager'
p6619
sg7
(lp6620
S'Enhancement'
p6621
asg10
I3714
sg11
(lp6622
S'Will you update this PR?'
p6623
aS'Yes, on it !'
p6624
aS'I submitted a commit with your proposed changes, sorry for the delay. \r\nFeel free to give me more comments/changes, also I can squash if needed.'
p6625
aS":+1:\r\n\r\nDon't squash this time. Github has now a new feature for the merge button where it offers squashing. I'd like to test if it really squashes everything and the main just gets 1 commit."
p6626
aS"Nothing critical, :+1: \r\n\r\n// @akarnokd squashing on GitHub works, and it works especially great when author of the PR just commits on top of previous commits because GitHub now remembers what code you've checked and what not and you can continue reviewing from previous point (doesn't work for me when PR is always squashed)."
p6627
aS'I have updated the PR. Do PR commits trigger github notifications ? (Should I comment after I do an update ? )'
p6628
aS'Unfortunately, no notification.'
p6629
aS'\xf0\x9f\x91\x8d \r\n'
p6630
asg14
S'adi1133:1.x'
p6631
sbsI3717
(iPull
Pull
p6632
(dp6633
g3
S'The latest version of rxjava is 978K long.'
p6634
sg5
S'update information about jar size in readme.md'
p6635
sg7
(lp6636
S'Information'
p6637
asg10
I3717
sg11
(lp6638
S':+1: '
p6639
asg14
S'korniltsev:ak/update_jar_size_in_readme'
p6640
sbsI3718
(iPull
Pull
p6641
(dp6642
g3
S'new method concatMapIterable #3713'
p6643
sg5
S'new method concatmapiterable #3713'
p6644
sg7
(lp6645
S'Enhancement'
p6646
asg10
I3718
sg11
(lp6647
S'Thanks @ginbalin for the addition, could you also add a test please?'
p6648
aS'Added a simple test. Is this enough?'
p6649
aS':+1: '
p6650
aS'Please squash your commits.'
p6651
aS'Done'
p6652
aS':+1:'
p6653
asg14
S'ginbalin:1.x'
p6654
sbsI3719
(iPull
Pull
p6655
(dp6656
g3
g57
sg5
S'documentation fix.'
p6657
sg7
(lp6658
S'Documentation'
p6659
asg10
I3719
sg11
(lp6660
S':+1:'
p6661
aS':+1: '
p6662
aS':+1: '
p6663
asg14
S'tasomaniac:patch-1'
p6664
sbsI3720
(iPull
Pull
p6665
(dp6666
g3
g57
sg5
S'1.x: add vararg of subscriptions to compositesubscription.'
p6667
sg7
(lp6668
S'Enhancement'
p6669
asg10
I3720
sg11
(lp6670
S"Could you make sure you don't have that many space changes?"
p6671
aS'Sure, I will fix it.'
p6672
aS'I have fixed formatting not to add indents on empty lines.'
p6673
aS"+ squash your commit when you're done."
p6674
aS'Please rebase and squash.'
p6675
aS"This PR is a bit old. I'm :+1: with the API change but the test worries me too.\r\n\r\nI'm merging this and will post a PR that hardens that test (+ renames them for @artem-zinnatullin sake :)."
p6676
asg14
S'klemzy:MultipleSubscriptionCompositeSubscription1x'
p6677
sbsI3722
(iPull
Pull
p6678
(dp6679
g3
S'Refs #3711. Should these new overloaded functions be annotated with `@Beta`?'
p6680
sg5
S'add maxconcurrent parameter to flatmapiterable'
p6681
sg7
(lp6682
S'Enhancement'
p6683
asg10
I3722
sg11
(lp6684
S'The failing test (`testNoMoreRequestsAfterUnsubscribe`) seems unrelated. All tests pass locally.'
p6685
aS'If you could add one unit test for each method that verifies maxConcurrent is honored, that would be great.'
p6686
aS'While writing the test I figured you might have been right when commenting on issue #2627. If I am not mistaken all the observables created with `OperatorMapPair.convertSelector` use the same scheduler (there is no way to subscribe them to different schedulers) and thus are run sequentially and until completion. Would adding a Scheduler parameter make sense?'
p6687
aS'There is no scheduler involved here so no.'
p6688
aS':+1: as it is now'
p6689
aS':+1: '
p6690
asg14
S'lukaciko:flatMapIterable-maxConcurrent'
p6691
sbsI3727
(iPull
Pull
p6692
(dp6693
g3
S"Changes in 1.1.1. for the `scan` operator introduced a bug in requesting where when the initial request was for max value the `scan` operator requested one less than that value of upstream (which affects fast-path producers).\r\n\r\nI believe this bug only affects 1.1.1 (haven't looked at 2.x).\r\n\r\nThis PR includes a test that failed on the original code."
p6694
sg5
S'scan should pass upstream a request of long.max_value'
p6695
sg7
(lp6696
S'Bug'
p6697
asg10
I3727
sg11
(lp6698
S'2.x is not affected because it does a full queue-drain where the initial value is in the queue already and requests are forwarded to the upstream as they are.\r\n\r\n:+1:'
p6699
aS'>2.x is not affected\r\n\r\nThanks @akarnokd '
p6700
aS':+1:'
p6701
asg14
S'davidmoten:scan-request-bug'
p6702
sbsI3733
(iPull
Pull
p6703
(dp6704
g3
S"Instead, deliver them up to the thread's uncaught exception handler.\r\n\r\nFixes reactivex/rxjava#3726"
p6705
sg5
S'avoid swallowing errors in completable'
p6706
sg7
(lp6707
sg10
I3733
sg11
(lp6708
S'What happened to `CompletableTest`?'
p6709
aS'@akarnokd sorry, IJ formatted it.  Will clean up and push again.'
p6710
aS':+1:'
p6711
aS'just a nit about `timeout` in tests, otherwise :+1: '
p6712
aS'removed timeouts'
p6713
aS':+1:'
p6714
asg14
S'loganj:completable-errors'
p6715
sbsI3738
(iPull
Pull
p6716
(dp6717
g3
S'This is to facilitate the discovery of methods for creating observables that respect back pressure semantics. Currently the `Observable#create(OnSubscribe)` static method is the easiest method to discover for creating an observable which does not provide clear facilities for managing back pressure. '
p6718
sg5
S'creating observable#create overloads for synconsubscribe and asynconsubscribe'
p6719
sg7
(lp6720
S'Enhancement'
p6721
asg10
I3738
sg11
(lp6722
S"I like this addition. It makes it far more discoverable to do 'create' in a safer way. \r\n\r\n+1"
p6723
aS"I'm worried that having the same name will cause method resolution problems with other not so strict JVM languages."
p6724
aS"Looks good. @abersnaze what's an example?"
p6725
aS"Sure these two methods point to the classes, but I'd prefer those `createStateful` and such methods added to `Observable` instead."
p6726
aS"@akarnokd so you would prefer to have the static create methods explicitly listed out? This is how that would look when in an IDE (i.e. in Eclipse with `Observable.create` then hitting CTRL+Space).\r\n\r\nOne static method per concrete option:\r\n\r\n```java\r\ncreate(OnSubscribe<T> f)\r\ncreateAsyncSingleState(Func0<? extends S> generator, Action3<? super S, Long, ? super Observer<Observable<? extends T>>> next)\r\ncreateAsyncSingleState(Func0<? extends S> generator, Action3<? super S, Long, ? super Observer<Observable<? extends T>>> next, final Action1<? super S> onUnsubscribe)\r\ncreateAsyncStateful(Func0<? extends S> generator, Func3<? super S, Long, ? super Observer<Observable<? extends T>>, ? extends S> next, Action1<? super S> onUnsubscribe)\r\ncreateAsyncStateless(Action2<Long, ? super Observer<Observable<? extends T>>> next)\r\ncreateAsyncStateless(Action2<Long, ? super Observer<Observable<? extends T>>> next, Action0 onUnsubscribe)\r\ncreateSyncSingleState(Func0<? extends S> generator, Action2<? super S, ? super Observer<? super T>> next)\r\ncreateSyncSingleState(Func0<? extends S> generator, Action2<? super S, ? super Observer<? super T>> next, Action1<? super S> onUnsubscribe)\r\ncreateSyncStateful(Func0<? extends S> generator, Func2<? super S, ? super Observer<? super T>, ? extends S> next, Action1<? super S> onUnsubscribe)\r\ncreateSyncStateful(Func0<? extends S> generator, Func2<? super S, ? super Observer<? super T>, ? extends S> next)\r\ncreateSyncStateless(Action1<? super Observer<? super T>> next)\r\ncreateSyncStateless(Action1<? super Observer<? super T>> next, Action0 onUnsubscribe)\r\n```\r\n\r\nOne overload per highlevel category (Sync, Async)\r\n\r\n```java\r\ncreate(OnSubscribe<T> f)\r\ncreate(SyncOnSubscribe<S, T> syncOnSubscribe)\r\ncreate(AsyncOnSubscribe<S, T> asyncOnSubscribe)\r\n```\r\n\r\nThis isn't exactly a direct apples-to-apples representation as you'd have to use the `SyncOnSubscribe` static methods. e.g.\r\n\r\n```java\r\ncreate(SyncOnSubscribe.createStateless(Action1<? super Observer<? super T>> next))\r\n```\r\n\r\nI think I prefer the latter because the surface area of the Observable is constrained to two (three-ish) high level categories of creation options. "
p6727
aS"I've added more explanation to the javadoc. "
p6728
aS'I prefer current version (with overload per high-level category).\r\n:+1: '
p6729
aS"The test seems to be a flaky unit test. \r\n\r\n```\r\nrx.ObservableTests > testErrorThrownIssue1685 FAILED\r\n    java.lang.AssertionError: UncaughtExceptionHandler didn't get anything.\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.assertTrue(Assert.java:43)\r\n        at org.junit.Assert.assertNotNull(Assert.java:526)\r\n        at rx.ObservableTests.testErrorThrownIssue1685(ObservableTests.java:1113)\r\n```\r\n\r\nI have added `@Experimental` to these overloads (to mirror the status of the underlying Sync/Async O.S.). Is this otherwise an acceptable API addition or are there concerns? @akarnokd @abersnaze "
p6730
aS'Travis sometimes seems to slow down drastically; that 1 second wait in that test is like 1000x more than usually needed to verify the behavior. Just rerun the test in this case.\r\n\r\nWe can start with your two methods and add the rest later.'
p6731
aS'I would prefer not to have both styles personally as redundancy makes for a cluttered and confusing api. Is it a personal preference for listing all variants?  '
p6732
aS'Only the sync ones, the async ones can be hidden behind that create overload.'
p6733
aS"I'm fine discussing that when the time comes. "
p6734
aS"@davidmoten I can't remember the exact instances of the issue but I'm not as familiar with scala, clojure, groovy, or kotlin.  I did a simple test in groovy, that worked, just because I had a REPL handy.  it would be nice have a lowest common denominator for method signatures so we don't make it unnecessarily difficult in any of those languages."
p6735
aS"Kotlin handles the overloads fine :+1:\n\nOn Thu, Mar 3, 2016 at 7:26 PM George Campbell <notifications@github.com>\nwrote:\n\n> @davidmoten <https://github.com/davidmoten> I can't remember the exact\n> instances of the issue but I'm not as familiar with scala, clojure, groovy,\n> or kotlin. I did a simple test in groovy, that worked, just because I had a\n> REPL handy. it would be nice have a lowest common denominator for method\n> signatures so we don't make it unnecessarily difficult in any of those\n> languages.\n>\n> \xe2\x80\x94\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3738#issuecomment-192034656>.\n>\n"
p6736
asg14
S'stealthcode:generator-return-types'
p6737
sbsI3741
(iPull
Pull
p6738
(dp6739
g3
S"Ref #3740.\r\n\r\nI didn't write much unit tests for `doOnSubscribe` because it internally uses `OperatorDoOnSubscribe` which is well covered.\r\n\r\n \r\n"
p6740
sg5
S'add doonsubscribe for single'
p6741
sg7
(lp6742
S'Enhancement'
p6743
asg10
I3741
sg11
(lp6744
S':+1: '
p6745
aS':+1:'
p6746
aS':+1: '
p6747
aS'Thanks, @aaronhe42! '
p6748
asg14
S'aaronhe42:single.doOnSubscribe'
p6749
sbsI3744
(iPull
Pull
p6750
(dp6751
g3
S"The need for a buffer operator that splits the source sequence into continuous non-overlapping buffers based on the values in the sequence comes up from time to time. For, me, it reached the point where I'd consider adding operator(s) with this functionality into RxJava.\r\n\r\nThere are two variants of the required functionality: split before the element is added to the buffer: `bufferWhile`; and split after the element has been added to the buffer: `bufferUntil`.  Both cases, the predicate has to return `true` to trigger a split and emission of the current buffer.\r\n\r\nI've added 2-2 overloads of these methods to `Observable` where the second overloads allow specifying the expected capacity use of the buffers (for performance reasons). These operators don't support backpressure and go unbounded, just like `buffer(Observable)` and others.\r\n\r\nIn the operator itself, I've added backpressured versions of `bufferWhile` and `bufferUntil`, which use a prefetch queue and a request-dependent queue-drain approach. It is up for a discussion what to do with these (provided this PR is of interest at all): 1) use them as the basis for the methods instead, 2) expose them through a different name and 3) drop them.\r\n\r\n"
p6752
sg5
S'1.x: new operators buffer(while/until) with predicate-based boundary'
p6753
sg7
(lp6754
S'Discussion'
p6755
aS'Enhancement'
p6756
asg10
I3744
sg11
(lp6757
S'w.r.t. your question, I would prefer having the backpressure-aware operator be the default implementation.'
p6758
aS"Updated:\r\n- Using backpressure and a standard prefetch of RxRingBuffer.SIZE\r\n- BufferWhile won't emit an empty initial buffer in case the first value triggers a new buffer\r\n- Added `@Experimental` tags\r\n- Added backpressure-tests and and explicit tests with empty or error sources.\r\n- renamed local variables"
p6759
aS':+1: '
p6760
aS'/cc @davidmoten @artem-zinnatullin '
p6761
aS"LGTM except operators names.\r\n\r\n* `bufferWhile(func)` sounds like it will buffer *while* you're returning `true` from `func` and it'll stop_buffering/will_split when you'll return `false`.\r\n* `bufferUntil(func)` sounds like it will buffer *until* you're returning `false` and it'll stop_buffering/will_split when you'll return `true`.\r\n\r\nMaybe something like:\r\n\r\n* `bufferAndSplitWhen(func)`\r\n* `bufferAndSplitAfter(func)`\r\n\r\nnot a great names too, but at least more obvious (to me).\r\n\r\nPing others: what do you think about operators names?"
p6762
aS"I prefer the `bufferWhile` `bufferUntil` version, it's idiomatic in functional languages like Scala and other to use those words."
p6763
aS"Well, for me it sounds like `takeWhile()`/`takeUntil()` and `skipWhile()`/`skipUntil()`.\r\n\r\nCompare:\r\n\r\n```java\r\nObservable\r\n  .range(1, 1000000)\r\n  .bufferWhile(number -> number % 10 == 0)\r\n  .subscribe(numbers -> System.out.println(numbers));\r\n\r\n// Here I'll think that it'll buffer numbers by some unknown mechanism \r\n// and then stop on first number that % 10 == 0. \r\n// Subscriber will receive not complete set of items.\r\n```\r\n\r\nAnd:\r\n\r\n```java\r\nObservable\r\n  .range(1, 1000000)\r\n  .bufferAndSplitWhen(number -> number % 10 == 0)\r\n  .subscribe(numbers -> System.out.println(numbers));\r\n\r\n// Here I clearly see that subscriber will receive all items.\r\n// And that lambda specifies split points, not the end of the stream.\r\n```\r\n\r\nidk about others but I'll have to read javadoc each time to understand what to expect with current operators names."
p6764
aS"I'll get back to reviewing the code in a bit but in terms of names an alternative is `toListWhile` and `toListUntil` that could also exist as aliases to the `buffer` versions. This is the api method I went with in *rxjava-extras* that implements this functionality ([Transformers.java](https://github.com/davidmoten/rxjava-extras/blob/a4edc924477b063586cee00be96412db2f444f95/src/main/java/com/github/davidmoten/rx/Transformers.java)). I had a dedicated operator for this stuff till I knocked up `Transformers.stateMachine` (discussion in #3442 that hasn't got any interest seemingly) and `toListWhile` and `toListUntil` goes through that (via `collectWhile/Until`).  I'll be interested to compare performance with the dedicated operator by @akarnokd in this PR. \r\n\r\nA natural extension to this PR that could be incorporated now is using `collectWhile` and `collectUntil` which `bufferWhile` and `bufferUntil` would be built on top of so that we aren't just list focused but can use arbitrary collection types."
p6765
aS'I could rename it to `bufferSplit`, change the parameters to include an isBefore boolean and only have 2 overloads.'
p6766
aS"Updated the PR:\r\n\r\n- removed that magic number, wasn't really relevant in the current setup\r\n- combined the operators into `bufferSplitWhen` and an `checkAfter` flag to express the time the predicate should be checked.\r\n"
p6767
aS'`testErrorThrownIssue1685` keeps failing for some reason on CI (but never locally).'
p6768
aS':+1: \r\nI also noticed recently that `testErrorThrownIssue1685` started failing more frequently on TravisCI.'
p6769
aS':+1: '
p6770
aS'I see that the predicate is based only on the latest emission from upstream. If the predicate was a `Func2<List<T>,T, Boolean>` then the operator would even more useful and with little change to the existing operator.'
p6771
aS'I prefer `bufferUntil/While` over `bufferSplit(predicate, true/false)`. The second version is not as readable as the first.'
p6772
aS"+1 on `bufferUntil`/`bufferWhile` but I'm not strongly opinionated about that."
p6773
aS"What's the verdict? bufferWhile/bufferUntil where until's function has to emit false?"
p6774
aS'Restored the original naming. In both operators, the predicate has to return true to trigger the next buffer. Let me know if you want some other rule.'
p6775
aS":+1: I'm with @davidmoten about the naming.\r\nPing @stealthcode @abersnaze for their input."
p6776
aS'\xf0\x9f\x91\x8d . Could see this having a lot of applications for something like batching and analytics when you want to wait for certain conditions.'
p6777
asg14
S'akarnokd:BufferWhile1x'
p6778
sbsI3745
(iPull
Pull
p6779
(dp6780
g3
S'The tests started regularly failing on travis. This PR increases the waiting time to 2 seconds in total.'
p6781
sg5
S'1.x: fix the test issue1685 not waiting long enough.'
p6782
sg7
(lp6783
S'Test-Failures'
p6784
asg10
I3745
sg11
(lp6785
sg14
S'akarnokd:Issue1685Fix'
p6786
sbsI3752
(iPull
Pull
p6787
(dp6788
g3
S"This PR adds the factory method `using()` +1 overload to `Single` as requested in #3732.\r\n\r\nFor convenience, I've also added `Single.subscribe(Observer)`."
p6789
sg5
S'1.x: single.using()'
p6790
sg7
(lp6791
S'Enhancement'
p6792
asg10
I3752
sg11
(lp6793
S':+1: '
p6794
aS'LGTM\r\n:+1: '
p6795
asg14
S'akarnokd:SingleUsing1x'
p6796
sbsI3753
(iPull
Pull
p6797
(dp6798
g3
S"This PR fixes the `SerializedObserverTest.testNotificationDelay` test to use reentrancy to verify the buffer in `SerializedObserver` is properly drained. For now, it loops 10,000 times to see if the CI brings up the issue again. Takes 400ms on my machine but I'll probably reduce it to 1,000 times.\r\n\r\n(The previous version was a bit convoluted with all those countdowns that didn't properly lock out the other thread).\r\n\r\nReported in issue #1389"
p6799
sg5
S'1.x: fix serializedobservertest.testnotificationdelay'
p6800
sg7
(lp6801
S'Test'
p6802
aS'Test-Failures'
p6803
asg10
I3753
sg11
(lp6804
S':+1: \r\n\r\n// Took me awhile to understand what are you doing in the test'
p6805
aS':+1: '
p6806
asg14
S'akarnokd:TestNotificationDelayFix1x'
p6807
sbsI3754
(iPull
Pull
p6808
(dp6809
g3
S'This PR adds a perf class to measure the overhead of using `empty()` when the `flatMap`/`concatMap` emulates `filter`.\r\n\r\nThis will establish the comparison baseline for `flatMap`/`concatMap` optimization as requested in #1653.\r\n\r\nThe baseline [numbers](https://gist.github.com/akarnokd/243a09e28edfc27aeb0d) (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13731994/629ce62c-e977-11e5-9f32-82dc404c792f.png)\r\n\r\nComparing `flatMap` against `concatMap`:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13731998/a15586b2-e977-11e5-82c5-b33e458cb5a9.png)\r\n\r\nHere, mask indicates the and-mask that makes emitting `empty` less frequent: 0 = always, 1 = every other, 3 = every fourth, 7 = every eighth. This also means that `rangeEmpty` starts emitting more and more values with higher mask value hence the different throughput values.\r\n'
p6810
sg5
S'1.x: measure flatmap/concatmap performance when used as filter'
p6811
sg7
(lp6812
S'Performance'
p6813
asg10
I3754
sg11
(lp6814
S"Thanks @akarnokd, very good of you. I'll set up a PR to use it."
p6815
asg14
S'akarnokd:FlatMapAsFilterPerf'
p6816
sbsI3755
(iPull
Pull
p6817
(dp6818
g3
S'I hope this fixes the test once and for all.'
p6819
sg5
S'1.x: fix attempt 2 for testerrorthrownissue1685'
p6820
sg7
(lp6821
S'Test-Failures'
p6822
asg10
I3755
sg11
(lp6823
sg14
S'akarnokd:FixtestErrorThrownIssue1685Again'
p6824
sbsI3756
(iPull
Pull
p6825
(dp6826
g3
S'Original issue: #3616.'
p6827
sg5
S'1.x: clarify join/groupjoin no ordering guarantees'
p6828
sg7
(lp6829
S'Documentation'
p6830
asg10
I3756
sg11
(lp6831
S':+1: '
p6832
aS':+1: '
p6833
aS':+1: '
p6834
asg14
S'akarnokd:JoinNoOrder1x'
p6835
sbsI3757
(iPull
Pull
p6836
(dp6837
g3
S'Changes:\r\n- `OperatorSampleWithTime` emits last stored value if it is set before `onCompleted`\r\n- `OperatorSampleWithObservable` emits last sampled value if source or sample complete.\r\n\r\nAs discussed in https://github.com/ReactiveX/RxJava/issues/3657.'
p6838
sg5
S'1.x: operator sample emits last sampled value before termination.'
p6839
sg7
(lp6840
S'Enhancement'
p6841
asg10
I3757
sg11
(lp6842
S':+1:'
p6843
aS':+1: '
p6844
asg14
S'kboyarshinov:sample_operator_termination'
p6845
sbsI3759
(iPull
Pull
p6846
(dp6847
g3
S"This is a full rewrite of the `concat`/`concatMap` operator with the following properties:\r\n\r\n  - using `OnSubscribe` to save on the allocation of `lift`\r\n  - `concatDelayError` and `concatMapDelayError` to delay errors to the very end\r\n  - new trampolining logic that also subscribes to the next source even if requested is zero\r\n  - using `concatMap` or `concatMapDelayError` on a scalar source now bypasses the operator completely and uses `ScalarSynchronousObservable.scalarFlatMap` as well.\r\n  - the operator now detects `just` and `empty` sources and bypasses subscribing accordingly\r\n  - added `ExceptionsUtils` to work with composite exceptions and terminal state; useful for other similar delaying operators later on.\r\n  - `concat` is now implemented as `concatMap(v -> v)` which saves on the allocation of an entire `map` operator\r\n  - `OperatorWindowWithSizeTest.testBackpressureOuterInexact` had to be ignored because `window` doesn't honor backpressure properly and it is fixed in #3678; once it has been resolved, the test can be reenabled\r\n  - Added varargs constructor to `CompositeException` for convenience; avoids creating a list when the number of initial exceptions are known upfront.\r\n\r\nPerformance comparison to baseline (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13744915/603866a8-e9eb-11e5-8711-8feb24fbb872.png)"
p6848
sg5
S'1.x: concatmap full rewrite + delayerror + performance'
p6849
sg7
(lp6850
S'Enhancement'
p6851
aS'Performance'
p6852
asg10
I3759
sg11
(lp6853
S'This is the benchmark comparison against Rsc:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13758467/dffef0e4-ea29-11e5-9713-334fbca491cd.png)'
p6854
aS'LGTM :+1: '
p6855
asg14
S'akarnokd:OnSubscribeConcatMap1x'
p6856
sbsI3760
(iPull
Pull
p6857
(dp6858
g3
S'This PR relates to the failure of `errorThrownIssue1685`.\r\n\r\nThe underlying problem was with the `GenericScheduledExecutorService`. By being multi-threaded, tasks scheduled from the same thread one after the other may get reordered because different worker threads inside the pool could pick them up at the same time. In this case, there is no guarantee they keep their FIFO order.\r\n\r\n*(I currently have no idea how one can use trampolining for this case; subsequent tasks may have any relative delays in respect to each other.)*\r\n\r\nThe solution creates N single threaded `ScheduledExecutorService`s and getInstance() hands one of them out. In turn `ExecutorService` takes one in its worker upfront.\r\n\r\nHowever, there is still the problem when the programmer uses a multi-threaded `ScheduledExecutorService` with `Schedulers.from()` when the same issue comes back. A solution to that problem would be to always use the new `GenericScheduledExecutorService` for delaying timed tasks.'
p6859
sg5
S'1.x: fix executorscheduler and genericscheduledexecutorservice reorder bug'
p6860
sg7
(lp6861
S'Bug'
p6862
aS'Test-Failures'
p6863
asg10
I3760
sg11
(lp6864
S'I have trouble understanding how this solve the problem, could you please elaborate?\r\nThe only thing I see that we could do to force the FIFO order is to cap the thread number to 1, right?'
p6865
aS"Yes, ExecutorScheduler's worker needs a helper ScheduledExecutorService with a single thread only. But we don't want all ExecutorSchedulers to wait in a single thread for their time to run. This change, similar to how computation scheduler works, hands out single hreaded ScheduledExecutorServices on demand."
p6866
aS"Nice catch.\r\n\r\n> However, there is still the problem when the programmer uses a multi-threaded ScheduledExecutorService with Schedulers.from() when the same issue comes back. A solution to that problem would be to always use the new GenericScheduledExecutorService for delaying timed tasks.\r\n\r\nI vote for `always use the new GenericScheduledExecutorService for delaying timed tasks.`. Correctness is more important than performance. Moreover, when people use `schedule(action, time)`, they usually don't want the codes to run as fast as possible, so the performance lost doesn't really matter."
p6867
aS'Agree with @zsxwing that correctness is more important than performance.'
p6868
aS"Right, I'll fix them shortly."
p6869
aS'Updated.'
p6870
aS':+1: '
p6871
aS':+1:'
p6872
asg14
S'akarnokd:ErrorThrownIssue1685Again2'
p6873
sbsI3761
(iPull
Pull
p6874
(dp6875
g3
S'This PR improves the overhead when one merges/flatMaps `empty()` sequences.\r\n\r\nBenchmark results: (i7 4770K, Windows 7 x64, Java 8u72):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13749421/a04a35c6-ea01-11e5-8b02-53ad07517453.png)\r\n\r\nFor rare `empty()`, the overhead seems to be around the noise level.\r\n'
p6876
sg5
S'1.x: optimize merge/flatmap for empty sources'
p6877
sg7
(lp6878
S'Enhancement'
p6879
aS'Performance'
p6880
asg10
I3761
sg11
(lp6881
S'This is the comparison with Rsc:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/13758598/818052a0-ea2a-11e5-89fc-918fb45980d1.png)\r\n'
p6882
aS"Just a general question about perf testing... in the development of SyncOnSubscribe we wrote a perf test that used the `Blackhole.consumeCPU(int)` method ([see perf test](https://github.com/ReactiveX/RxJava/blob/1.x/src/perf/java/rx/jmh/InputWithIncrementingInteger.java#L71)) because this would simulate the execution of some business logic causing registers and caches to clear. In a very short src code scan I didn't find where `FlatMapAsFilterPerf` does this. I can see that it uses the blackhole to consume the data (clearly this is necessary). Do you think it would be valuable to add some simulated business logic to each flatmap Func1 definition?"
p6883
aS"My perfs measure the overhead of the infrastructure where the subscriber does nothing else. This is like an upper bound for the throughput you can achieve. Clearly, if you have `sleep(100)` in the consumer, almost none of the optimization will show up as a gain. Same goes for `consumeCPU` but on a nanosecond-scale. Therefore, I don't see the value but you can always experiment."
p6884
aS'I hear what you are saying, however sleep is very different than consuming cpu cycles. I completely agree that testing the lower bounds of performance is valuable. Right now we are testing very common use cases. However another common use case is where other work is done on business logic. Using the `Blackhole.consumeCPU()`  api in some tests could level the playing field between two implementations when one implementation disproportionately favors cache locality. '
p6885
aS"Also there is the matter of the JIT-er. I am not entirely sure but wouldn't this prevent inlining the Func1? This surely is a common use case that we are missing in these perf tests. "
p6886
aS"Our infrastructure is full of atomic operators that take 21-45 cycles on a good day and cause write buffer flushes even with synchronous code. I think the `consumeCPU` comes in handy when one benchmarks queues concurrently as it can help offset the sides just enough to not step on each other.\r\n\r\nPrimarily, call depth/stack depth is the limiting factory for JIT, the fewer layers there are and the smaller the methods are, JIT can do more. This is why I advocate for flatMap() instead of merge() because merge(map()) allocates more and pushes through more layers than flatMap() which has the function call and result use right next to each other. JIT inlines such Func1 quite nicely and with such barebone perfs, failures of inline also show up as a throughput loss. \r\n\r\nHowever, just by looking at the code, only JIT experts can tell what happens. There is the JITWatch tool that does a better job but requires some nasty DLLs to be built for Windows and thus I don't use it."
p6887
aS"I think that what @stealthcode is referring to is the fact that most microbenchmarks test a tiny piece of code in a contented way. AFAIK `consumeCPU` can help removing the contention without impacting the measure.\r\n\r\nRegarding the JIT, as you mentioned call depth is a limiting factor, but AFAIK the main one is the byte-code size of the method. Thus, a big method is less likely to be inlined, and then it's less likely that beneficial optimizations will take place (dead-code elimination, escape-analysis, ...).\r\nBy optimizing a piece code by adding a special case, you're always at risk of making the code big enough to prevent inlining. My rule of thumb is to check if the special case is actually seen in a production system (vs. a microbenchmark).\r\n\r\nThat being said, the modification you proposed is relatively minimal (1 test, 1 method call), and the impact on the byte-code size is small. So :+1: for this change.\r\n\r\nPS: JITWatch is a very good tool, especially when you want to learn what the JVM is doing."
p6888
aS':+1: // comparison looks fantastic'
p6889
aS'Just to be clear, my previous comment was a \xf0\x9f\x91\x8d '
p6890
asg14
S'akarnokd:FlatMapEmpty1x'
p6891
sbsI3762
(iPull
Pull
p6892
(dp6893
g3
S"Before this PR messagePrefix was never used :dancer: \r\n\r\nIf you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it' be nicer.\r\n\r\nAbout the message is there any reason for having a space after the dot?"
p6894
sg5
S'1.x: deprecate compositeexception constructor with message prefix'
p6895
sg7
(lp6896
S'Cleanup'
p6897
asg10
I3762
sg11
(lp6898
S"We don't really use that constructor or the message, so I'd prefer removing it altogether."
p6899
aS'Yeah I also realized that later since no test broke after that change. So do you want me to remove it?'
p6900
aS"Yes, but don't rush it as there is another, much heavier PR #3759 that also changed this class."
p6901
aS'Alright just ping me once #3759 is in'
p6902
aS'@akarnokd I updated the PR again and changed the commit message and the title. I hope the changes are okay now. If the removal of whitespace bugs you just let me know.'
p6903
aS'Yes, please revert those space changes. (Are you using IntelliJ?)'
p6904
aS'Those changes I did in Sublime and I set it up in a way that it should remove trailing whitespace ;)\r\n\r\nAlso updated the PR and removed the spaces'
p6905
aS"Almost, but forgot that its a public API component thus can't just remove the constructors. Could you instead deprecate `CompositeException(String message, List<Throwable> errors)`?"
p6906
aS'@akarnokd like this?'
p6907
aS'Yes.\r\n\r\n:+1:'
p6908
aS':+1: '
p6909
aS':+1: '
p6910
asg14
S'vanniktech:dev_fix_composite_exception_message_prefix'
p6911
sbsI3763
(iPull
Pull
p6912
(dp6913
g3
S'This PR exposes the `delayError` option in `combineLatest` as `combineLatestDelayError`.\r\n\r\n(Note that we have convenience overloads with 2-9 sources that could also use an overload, but that just expands the API surface drastically.)'
p6914
sg5
S'1.x: combinelatestdelayerror'
p6915
sg7
(lp6916
S'Enhancement'
p6917
asg10
I3763
sg11
(lp6918
S":+1: \r\n\r\n(I'm starting feeling bad for guy who asked for Map with indexes, since his request we added so many overloads of other operators\xe2\x80\xa6)"
p6919
aS':+1: '
p6920
aS':+1: '
p6921
asg14
S'akarnokd:CombineLatestDelayError1x'
p6922
sbsI3764
(iPull
Pull
p6923
(dp6924
g3
S"Since #3668 was merged we should now be able to build a separate artifact for Java 6, while continuing to maintain the main project using Java 8. This splits the project into 'rxjava' and 'rxjava-java6', which compiles the same source code using retrolambda, and uses the animalsniffer plugin to ensure that we are not inadvertently using APIs introduced after Java 6."
p6925
sg5
S'added java6 project using retrolambda'
p6926
sg7
(lp6927
S'Build'
p6928
asg10
I3764
sg11
(lp6929
S"I don't think it's worth it. RxJava 2.x will be Java 6 based and the Stream-API interoperation has to go into a separate project; or just use somebody else's Stream -> Publisher wrapper."
p6930
aS'Vote for closing as unnecessary. RxJava 2.x targets Java 6 and we can live with the small inconvenience of using inner classes.'
p6931
aS"@akarnokd @artem-zinnatullin: I'm not sure if it is only for convenience. Wouldn't there be a performance improvement by being able to use invoke dynamic internally?\r\n\r\n@rdegnan: Would it publish the jvm version in the classifier part of the artifact (rxjava-2.0.0-java8.jar)?"
p6932
aS"Most or probably all use cases for `invokedynamic` in RxJava will be lambdas. \r\n\r\nSuch usage of `invokedynamic` is currently implemented (in the HotSpot at least, afaik) pretty much the same as compiling to anonymous class but at runtime: both from performance point of view and implementation (afaik it generates same anonymous class but at runtime).\r\n\r\n(Afaik) `invokedynamic` gives noticeable performance improvements for cases when you need to do some dynamic dispatch widely used in dynamic JVM languages like Groovy, but I don't think we need it in RxJava.\r\n\r\n// Will try to invite some engineers with better knowledge of JVM/JDK to discussion."
p6933
aS'Internally, we have many context-capturing inner classes so I think lambdas would end up as object instances anyway and the runtime JIT is mostly capable of inlining through regular inner classes.'
p6934
aS'@akarnokd could you try running your JMH test suite with java6 and java8?'
p6935
aS"We can set it up to use classifiers, that would be better \xe2\x80\x94 right now it\xe2\x80\x99s just appending \xe2\x80\x98-java6\xe2\x80\x99 to the name.\n\nIn addition to removing thousands of lines of Java boilerplate, I think there are advantages to having a build that targets Java 8 in addition to a build that targets Java 6 via retrolambda. One problem is that methods like BlockingObservable.forEach are inconvenient to use in Java 8 because BlockingObservable also inherits forEach(java.util.function.Consumer) from Iterable, so using a lambda is not possible because it is ambiguous whether it should implement java.util.function.Consumer or io.reactivex.functions.Consumer. In the Java 8 build io.reactivex.functions.Consumer extends java.util.function.Consumer so this is not an issue. In addition we would be able to take advantage of things like default methods on io.reactivex.functions.* which can make functional programming in Java a lot more convenient (see https://github.com/javaslang/javaslang <https://github.com/javaslang/javaslang>).\n\nI\xe2\x80\x99m also curious about the performance improvement in practice, though I\xe2\x80\x99m not sure which perf test would best reflect the difference.\n\n> On Mar 23, 2016, at 4:13 PM, George Campbell <notifications@github.com> wrote:\n> \n> @akarnokd <https://github.com/akarnokd> @artem-zinnatullin <https://github.com/artem-zinnatullin>: I'm not sure if it is only for convenience. Wouldn't there be a performance improvement by being able to use invoke dynamic internally?\n> \n> @rdegnan <https://github.com/rdegnan>: Would it publish the jvm version in the classifier part of the artifact (rxjava-2.0.0-java8.jar)?\n> \n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200577953>\n\n"
p6936
aS"Those sound like binary incompatible features between the hypothetical\nclassified artifacts which would destroy the Rx ecosystem's crossover with\nAndroid rendering the elaborate setup mostly meaningless.\n\nOn Wed, Mar 23, 2016, 7:44 PM Ryland Degnan <notifications@github.com>\nwrote:\n\n> We can set it up to use classifiers, that would be better \xe2\x80\x94 right now it\xe2\x80\x99s\n> just appending \xe2\x80\x98-java6\xe2\x80\x99 to the name.\n>\n> In addition to removing thousands of lines of Java boilerplate, I think\n> there are advantages to having a build that targets Java 8 in addition to a\n> build that targets Java 6 via retrolambda. One problem is that methods like\n> BlockingObservable.forEach are inconvenient to use in Java 8 because\n> BlockingObservable also inherits forEach(java.util.function.Consumer) from\n> Iterable, so using a lambda is not possible because it is ambiguous whether\n> it should implement java.util.function.Consumer or\n> io.reactivex.functions.Consumer. In the Java 8 build\n> io.reactivex.functions.Consumer extends java.util.function.Consumer so this\n> is not an issue. In addition we would be able to take advantage of things\n> like default methods on io.reactivex.functions.* which can make functional\n> programming in Java a lot more convenient (see\n> https://github.com/javaslang/javaslang <\n> https://github.com/javaslang/javaslang>).\n>\n> I\xe2\x80\x99m also curious about the performance improvement in practice, though I\xe2\x80\x99m\n> not sure which perf test would best reflect the difference.\n>\n> > On Mar 23, 2016, at 4:13 PM, George Campbell <notifications@github.com>\n> wrote:\n> >\n> > @akarnokd <https://github.com/akarnokd> @artem-zinnatullin <\n> https://github.com/artem-zinnatullin>: I'm not sure if it is only for\n> convenience. Wouldn't there be a performance improvement by being able to\n> use invoke dynamic internally?\n> >\n> > @rdegnan <https://github.com/rdegnan>: Would it publish the jvm version\n> in the classifier part of the artifact (rxjava-2.0.0-java8.jar)?\n> >\n> > \xe2\x80\x94\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly or view it on GitHub <\n> https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200577953>\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200585165>\n>\n"
p6937
aS"Sorry, I don't have the capacity to experiment with various runtime versions right now. Most inner classes get instantiated during the assembly time thus you'd only see differences with trivial functions on short sequences.\r\n\r\nIn addition, 2.x started out as a native Java 8 code and I didn't really need any Java 8 features inside the operators. It was more of a convenience in unit tests but Eclipse can turn a lambda into an inner class in a JDK 6 targeted project most of the time.\r\n\r\n`BlockingObservable.forEach` could be renamed to something non-conflicting, but I think who uses `BlockingObservable` should pay the price of manual casting to disambiguate."
p6938
aS'@JakeWharton the purpose of this is to have a single source code that generates 2 different artifacts. Android users would (by default) get the java6 compatible version. For those who want to use the java8 version they could change the dependency to point to java8 classifier. \r\n\r\n@akarnokd you want to close this PR without looking at performance metrics? '
p6939
aS'@stealthcode but how other libraries will depend on RxJava then if we will have 2 artifacts\xe2\x80\xa6?'
p6940
aS"Right. The artifacts need to be binary compatible for libraries to work\nagainst both. And if binary compatibility is broken there's no point in\nmaking two artifacts because they effectively become two separate,\nincompatible libraries.\n\nOn Wed, Mar 23, 2016, 8:06 PM Artem Zinnatullin <notifications@github.com>\nwrote:\n\n> @stealthcode <https://github.com/stealthcode> but how other libraries\n> will depend on RxJava then if we will have 2 artifacts\xe2\x80\xa6?\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200588998>\n>\n"
p6941
aS"@artem-zinnatullin here is a gradle example of how dependencies would be expressed. \r\n\r\nJava6 Project build.gradle\r\n\r\n```groovy\r\ncompile 'io.reactivex:rxjava:1.1.2' // java 1.6 compatible\r\n```\r\n\r\nJava8 Project build.gradle\r\n\r\n```groovy\r\ncompile 'io.reactivex:rxjava:1.1.2:jdk18' // java 1.8 compatible\r\n\r\n// alternate\r\ncompile group: 'io.reactivex', name: 'rxjava', version: '1.1.2', classifier: 'jdk18'\r\n```"
p6942
aS"@JakeWharton if a library depends on the RxJava java8 version then it's runtime should be 1.8 and thus all usages of that library should also be running on 1.8. Why would a library need to be binary compatible with both versions? "
p6943
aS"@stealthcode please clarify if end user project will be able to specify which RxJava artifact it'll need: jdk8 or jdk6 even if some library that it depends on needs artifact with another `classifier` (until they're binary compatible, of course). \r\n\r\nExample: \r\n* `lib1` depends on `RxJava-2-jdk8`\r\n* `proj1` depends on `RxJava-2-jdk6` and `lib1`"
p6944
aS"@artem-zinnatullin in that situation the build would include both artifacts on the classpath and `proj1` would of course not compile. So as an owner of `proj1` it would not make sense to use a library designed for use with java8. However ultimately it's up to the library owner if they chose to depend on the binary incompatible version of rxjava. IMO a library author in the public domain should publish their artifact building against the standard 1.6 compatible rxjava or if they really want to they could publish 2 versions with a classifier or separate artifacts. \r\n\r\nHowever if you can predict that all users of your library specifies `targetCompatibility = 1.8` then the library author could make that decision safely. E.g. a library for consumption in a companies infrastructure where they know that all consuming projects will be running on java8 could safely publish with a dependency on the `jdk18` classifier."
p6945
aS"Retrofit needs to be compatible with both because it works on both Android\nand Java 8. Along with hundreds of other libraries targeting both.\n\nOn Wed, Mar 23, 2016, 9:03 PM Aaron Tull <notifications@github.com> wrote:\n\n> @artem-zinnatullin <https://github.com/artem-zinnatullin> in that\n> situation the build would include both artifacts on the classpath and\n> proj1 would of course not compile. So as an owner of proj1 it would not\n> make sense to use a library designed for use with java8. However ultimately\n> it's up to the library owner if they chose to depend on the binary\n> incompatible version of rxjava. IMO a library author in the public domain\n> should publish their artifact building against the standard 1.6 compatible\n> rxjava or if they really want to they could publish 2 versions with a\n> classifier or separate artifacts.\n>\n> However if you can predict that all users of your library specifies targetCompatibility\n> = 1.8 then the library author could make that decision safely. E.g. a\n> library for consumption in a companies infrastructure where they know that\n> all consuming projects will be running on java8 could safely publish with a\n> dependency on the jdk18 classifier.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200603052>\n>\n"
p6946
aS"You actually are actively making things worse by using the same package\nname and Maven coordinates for two binary incompatible artifacts. If you\nare breaking binary compatibility which I am violently against then change\nthe package name and artifactId.\n\nOn Wed, Mar 23, 2016, 9:12 PM Jake Wharton <jakewharton@gmail.com> wrote:\n\n> Retrofit needs to be compatible with both because it works on both Android\n> and Java 8. Along with hundreds of other libraries targeting both.\n>\n> On Wed, Mar 23, 2016, 9:03 PM Aaron Tull <notifications@github.com> wrote:\n>\n>> @artem-zinnatullin <https://github.com/artem-zinnatullin> in that\n>> situation the build would include both artifacts on the classpath and\n>> proj1 would of course not compile. So as an owner of proj1 it would not\n>> make sense to use a library designed for use with java8. However ultimately\n>> it's up to the library owner if they chose to depend on the binary\n>> incompatible version of rxjava. IMO a library author in the public domain\n>> should publish their artifact building against the standard 1.6 compatible\n>> rxjava or if they really want to they could publish 2 versions with a\n>> classifier or separate artifacts.\n>>\n>> However if you can predict that all users of your library specifies targetCompatibility\n>> = 1.8 then the library author could make that decision safely. E.g. a\n>> library for consumption in a companies infrastructure where they know that\n>> all consuming projects will be running on java8 could safely publish with a\n>> dependency on the jdk18 classifier.\n>>\n>> \xe2\x80\x94\n>> You are receiving this because you were mentioned.\n>>\n>> Reply to this email directly or view it on GitHub\n>> <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200603052>\n>>\n>\n"
p6947
aS"Another option which would avoid having to use classifiers is to build rxandroid as a subproject alongside rxjava. As I have done here, it would compile the same sourceset plus the additional code that currently lives in the rxandroid repo, targeting java 6. RxAndroid would have no dependency on RxJava, the artifacts would be different and there is no reason people would want both. We would also know instantly if any changes to RxJava break android.\n\n> On Mar 23, 2016, at 6:16 PM, Jake Wharton <notifications@github.com> wrote:\n> \n> You actually are actively making things worse by using the same package\n> name and Maven coordinates for two binary incompatible artifacts. If you\n> are breaking binary compatibility which I am violently against then change\n> the package name and artifactId.\n> \n> On Wed, Mar 23, 2016, 9:12 PM Jake Wharton <jakewharton@gmail.com> wrote:\n> \n> > Retrofit needs to be compatible with both because it works on both Android\n> > and Java 8. Along with hundreds of other libraries targeting both.\n> >\n> > On Wed, Mar 23, 2016, 9:03 PM Aaron Tull <notifications@github.com> wrote:\n> >\n> >> @artem-zinnatullin <https://github.com/artem-zinnatullin> in that\n> >> situation the build would include both artifacts on the classpath and\n> >> proj1 would of course not compile. So as an owner of proj1 it would not\n> >> make sense to use a library designed for use with java8. However ultimately\n> >> it's up to the library owner if they chose to depend on the binary\n> >> incompatible version of rxjava. IMO a library author in the public domain\n> >> should publish their artifact building against the standard 1.6 compatible\n> >> rxjava or if they really want to they could publish 2 versions with a\n> >> classifier or separate artifacts.\n> >>\n> >> However if you can predict that all users of your library specifies targetCompatibility\n> >> = 1.8 then the library author could make that decision safely. E.g. a\n> >> library for consumption in a companies infrastructure where they know that\n> >> all consuming projects will be running on java8 could safely publish with a\n> >> dependency on the jdk18 classifier.\n> >>\n> >> \xe2\x80\x94\n> >> You are receiving this because you were mentioned.\n> >>\n> >> Reply to this email directly or view it on GitHub\n> >> <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200603052>\n> >>\n> >\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub <https://github.com/ReactiveX/RxJava/pull/3764#issuecomment-200604706>\n\n"
p6948
aS"> the artifacts would be different and there is no reason people would want both\r\n\r\nExcept, again, the libraries that support both. You've basically just pushed the problem and burden of making two versions of every library or having two integrations on the hundreds of libraries that want to support both.\r\n\r\nThis isn't acceptable."
p6949
aS"@stealthcode then it I'll basically kill development of generic libraries around RxJava that target both java 6 and java 6+ like `rxjava-async-util`, `Retrofit`,  many db drivers and so on. \r\n\r\nWhole community will be confused and everybody will blame us for such decision. \r\n\r\nI'm sorry, but I'm voting against splitting library into two artifacts. "
p6950
aS'I\'m not an expert on how and when lambdas are converted to instances, but I\'d expect whenever a lambda ends up in a field, it has to be instantiated.\r\n\r\nI did a search for "new Function" and they are only in the base classes mostly part of the convenience overloads:\r\n\r\n**Flowable**:\r\n  - `zip(Publisher<Publisher>>, Function)` - depends on an outer parameter\r\n  - `cast(Class)` - alias for map with function that casts\r\n  - `concatMapIterable(Function)` - delegates to `concatMap` with an inner function depending on the outer parameter\r\n  - `delay(Function)` uses flatMap and complex inner function depending on the outer parameter + some inner capture of a variable\r\n  - `delaySubscription(time)` uses flatMap and a capturing lambda for the outer `this`\r\n  - `delaySubscription(Flowable)` similar to the previous\r\n  - `flatMap(Function, BiFunction)` two functions depending on different levels one up\r\n  - `flatMapIterable(Function)` delegates to `flatMap` with an inner function depending on the outer parameter\r\n  - `onErrorResumeNext(Flowable)` uses the function variant with a function returning the Flowable\r\n  - `onErrorReturnValue` uses `onErrorReturn` with a function returning the value\r\n  - `onExceptionResumeNext(Flowable)` uses the function variant with a function returning the Flowable\r\n  - `repeatWhen` one function depending on the handler and a deeper function which is constant (can be factored out)\r\n  - `replay(Function, int, Scheduler)` calls another replay with functions capturing the outer parameters\r\n  - `repeatWhen` a function depending on the outer parameter and two pure functions (can be factored out)\r\n  - `timestamp` function depends on the outer parameters\r\n  - `toMultimap` variants with pure functions (can be factored out)\r\n  - `toSortedList(Comparator)` with a function depending on the comparator\r\n\r\n**Functions**\r\nConversions 2-9 parameter functions to `Function<Object[], R>` wrapper that end up in a field.\r\n\r\n**Observable**\r\nRoughly the same as with Flowable\r\n\r\n**Single**\r\n  - `concat` delegates to `concatMap` with a pure function (can be factored out)\r\n  - `merge` delegates to `flatMap` with a pure function (can be factored out)\r\n\r\nBesides, I remember the time when we had all sorts of subprojects and changing some Java bits ended up breaking the compilation or tests of the other subprojects with no one around to help fix those. It is already cumbersome to keep track the features and tests in both 1.x and 2.x and I don\'t want to do more maintenance than necessary. I also agree with @JakeWharton and @artem-zinnatullin.\r\n\r\n'
p6951
aS"I've recently read about `invokedynamic` to understand more about the problem, and if my understanding is correct, here are my thoughts:\r\n\r\nThe main advantage of targeting java 8 (i.e. ByteCode v52) is the ability to use the `invokedynamic` instruction. On Java 8, the jvm defers the translation of lambdas at runtime (thanks to `invokedynamic`), it can translate the lambda into something like an anonymous class, a method reference [or other](http://cr.openjdk.java.net/~briangoetz/lambda/lambda-translation.html). This can lead to more efficient code and save allocations.\r\n\r\nNote that `invokedynamic` is used in the code that creates the lambda, but not where the lambda is invoked. Most of the usage of `new Func*` that I saw in Observable.java don't capture anything and would benefit from indy.\r\n\r\nI agree with @JakeWharton that if we decide to have to artifacts, the binary compatibility MUST be respected (and tested). Otherwise, multiple transitive dependencies may cause `NoSuchMethodException`.\r\n\r\nI think that if the build tool is properly setup, it shouldn't cause any problem to anyone. Worst case would be, having two transitive dependencies on RxJava 2, one jdk6 and one jdk8, depending on the classpath order, the jvm would either load the jdk6 bytecode (and not benefit from indy) or load jdk8 bytecode (and benefit from indy)."
p6952
aS"> Otherwise, multiple transitive dependencies may cause `NoSuchMethodException`.\r\n\r\nThe artifacts would be based on the same source code. I don't think that you could get a `NoSuchMethodException` or a `ClassNotFoundException`. I'm also pretty sure that byte code call sites from user code (or library code) to RxJava would not need to recompile if they depended on 1.8 or 1.6. For example\r\n\r\n`proj_library` depends on `RxJava:jdk18`\r\n`proj1` depends on `RxJava` (the default 1.6 + Retrolambda build) and `proj_library`\r\n\r\nIf `proj1` excluded `RxJava:jdk18` in the build script then both `proj_library` and `proj1` would be running against the 1.6 compatible code. This should still function as the call sites from both should not have to be recompiled. "
p6953
aS'I strongly feel that there should be a single artifact. With Java 9 (which is not *that* far off) we can then use [multi-version JARs](http://openjdk.java.net/jeps/238) to target Java 9+ enhancements on top of the Java 6+ base (such as adding support for all the Java 8+ and 9+ APIs). \r\n\r\nAs for the performance improvements lambdas can offer, I\'m pretty certain that if we have code where the perf benefits from a lambda, we can stop using anonymous inner classes and define static inner classes, or use static functions instead and get the same improvements.\r\n\r\nIf we are "newing" up an Object such as a `Func`, then it has instance state and a lambda is not going to dramatically improve anything if at all. Lambdas are dramatically better than anonymous inner classes when it can be determined that they are static and only get instantiated once and invoked many times ... just like we can do manually with statics.'
p6954
aS'Thanks for the contribution.\r\n\r\nSince the decision has been made to go for Java 6, I don\'t see any need or value doing Java 8 sources and cross-compiling it. Certainly, some unit tests would love the simplified lambda syntax but the IDEs can usually fix the "syntax error" of a lambda expression.\r\n\r\nJava 9 is a bit far out and until the usual tools get updated, I can\'t comment on how the multi-versioned jars would work (out).\r\n\r\nWhat I definitely want is separate id for the 2.x. Let\'s discuss that further in #3170'
p6955
asg14
S'rdegnan:2.x'
p6956
sbsI3765
(iPull
Pull
p6957
(dp6958
g3
S'This PR adds a delayError version to the `switchOnNext` / `switchMap` operators.'
p6959
sg5
S'1.x: switchonnextdelayerror and switchmapdelayerror'
p6960
sg7
(lp6961
S'Enhancement'
p6962
asg10
I3765
sg11
(lp6963
S'LGM :+1: '
p6964
asg14
S'akarnokd:SwitchOnNextDelayError1'
p6965
sbsI3766
(iPull
Pull
p6966
(dp6967
g3
S'Closes #3440, closes #3731, closes #3472 (whoa, 3 issues at a time!)'
p6968
sg5
S'1.x: add single.onerrorresumenext(func)'
p6969
sg7
(lp6970
S'Enhancement'
p6971
asg10
I3766
sg11
(lp6972
S'@akarnokd fixed your comments, btw, should I add `@Experimental` to these operators?'
p6973
aS'Yes, and copy over the experimental and since tags into the javadoc.'
p6974
aS':+1: There is this new like option but do you get a notification for them?'
p6975
aS'No\n\nOn Mon, Mar 14, 2016, 8:10 PM David Karnok <notifications@github.com> wrote:\n\n> [image: :+1:] There is this new like option but do you get a notification\n> for them?\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n>\n> Reply to this email directly or view it on GitHub:\n> https://github.com/ReactiveX/RxJava/pull/3766#issuecomment-196578174\n>\n'
p6976
aS':+1: '
p6977
aS':+1: '
p6978
asg14
S'artem-zinnatullin:single-on-error-resume-next-with-function'
p6979
sbsI3767
(iPull
Pull
p6980
(dp6981
g3
S'Release notes https://docs.gradle.org/2.12/release-notes\r\n\r\n>Gradle 2.12 has the fastest build script compilation speeds of any Gradle version to date.'
p6982
sg5
S'1.x: update gradle wrapper to 2.12'
p6983
sg7
(lp6984
S'Build'
p6985
asg10
I3767
sg11
(lp6986
S"You should also check that there isn't any breaking changes in the [gradle plugin](https://github.com/nebula-plugins/gradle-rxjava-project-plugin). Some of the plugins expect specific version of gradle.\r\n\r\nIn your case, I think it's fine: :+1: "
p6987
aS':+1:'
p6988
asg14
S'artem-zinnatullin:gradle-wrapper-2.12'
p6989
sbsI3768
(iPull
Pull
p6990
(dp6991
g3
S"This fixes `observeOn` not completing immediately if the downstream requested exactly the remaining amount. The original version required a new request from downstream to trigger the delivery of the terminal event.\r\n\r\nThis also fixes the rare failure in `testNoMoreRequestsAfterUnsubscribe` because the unsubscription is now checked in-sequence and doesn't trigger the unwanted replenishment request."
p6992
sg5
S'1.x: observeon - fix in-sequence termination/unsubscription'
p6993
sg7
(lp6994
S'Bug'
p6995
aS'Test-Failures'
p6996
asg10
I3768
sg11
(lp6997
S':+1: for changes, not sure about test'
p6998
aS':+1:'
p6999
aS':+1:'
p7000
asg14
S'akarnokd:ObserveOnRequestBoundaryCompletionFix'
p7001
sbsI3772
(iPull
Pull
p7002
(dp7003
g3
S'Second part of #3652, follow-up to #3655.'
p7004
sg5
S'add single.onerrorresumenext(func1<throwable, single>)'
p7005
sg7
(lp7006
sg10
I3772
sg11
(lp7007
S'Duplicates #3766\xe2\x80\xa6'
p7008
aS"Wow, that's coincidence ;)"
p7009
aS'Sorry!'
p7010
asg14
S'twz123:single-onErrorResumeNextViaFunction'
p7011
sbsI3777
(iPull
Pull
p7012
(dp7013
g3
S'The observeOn operator is backed by a small queue of 128 slots that may\r\noverflow quickly on slow producers.  This could only be avoided by\r\nadding a backpressure operator before the observeOn (not only\r\ninconvenient, but also taking a perf. hit as it forces hops between two\r\nqueues).\r\n\r\nThis patch allows modifying the default queue size on the observeOn\r\noperator.\r\n\r\nFixes: #3751\r\nSigned-off-by: Galo Navarro <anglorvaroa@gmail.com>'
p7014
sg5
S'observeon: allow configurable buffer size'
p7015
sg7
(lp7016
S'Enhancement'
p7017
asg10
I3777
sg11
(lp7018
S':+1:'
p7019
aS":+1: though i'd leave old test for default buffer size and just add a new one "
p7020
aS"Rebased, fixed the javadoc link, and a spelling mistake.\r\n\r\n@artem-zinnatullin I reused this one to avoid redundancy as the code path is virtually the same, and there are tests (the ones referenced in the @link) which use the default size. Let me know if you still prefer the 2 cases and I'll fix that."
p7021
aS"Yeah, I understand, just afraid that one may change linked  tests and we won't cover overload. \r\n\r\n// one day we'll setup code coverage, I hope"
p7022
aS"Agh thanks @akarnokd, I didn't notice I changed computers so I was back on the 1st patch and lost the overload. Resubmitted based on the one with all overloads, and added the extra test instead of rewriting it. Hopefully fine now."
p7023
aS':+1:'
p7024
aS"I've seen some failures on the test locally and there is also a bug in the test (the loop should start at 2, not 1). I can't look into it right now but will take a look asap."
p7025
aS':+1: '
p7026
aS"I'm merging this. The changes are algorithmically solid so I'm not sure what failures you see locally."
p7027
aS"Thanks @akarnokd. The failure was no error notifications emitted at random sizes, but I did notice Travis didn't complain. Ping me if it surfaces."
p7028
asg14
S'srvaroa:1.x'
p7029
sbsI3778
(iPull
Pull
p7030
(dp7031
g3
S'Preparing for release 1.1.2.'
p7032
sg5
S'1.x: release 1.1.2 changes.md update'
p7033
sg7
(lp7034
S'Information'
p7035
asg10
I3778
sg11
(lp7036
S':+1: '
p7037
aS':+1: '
p7038
aS':+1: '
p7039
asg14
S'akarnokd:Release1_1_2'
p7040
sbsI3780
(iPull
Pull
p7041
(dp7042
g3
g57
sg5
S'upgrading synconsubscribe from experimental to beta'
p7043
sg7
(lp7044
S'API promotion'
p7045
asg10
I3780
sg11
(lp7046
S':+1: '
p7047
aS'@akarnokd is this alright with you?'
p7048
aS"I'm not seeing why the change before 1.2?"
p7049
aS'I think at Netflix we are comfortable using these going forward. Is there any reason to wait? This only communicates our comfort level with this api slightly more strongly. '
p7050
aS"I see the value of `SyncOnSubscribe` but I'd like some user opinion about `AsyncOnSubscribe` outside Netflix. "
p7051
aS'Okay, fair. I would also like to see some usage and feedback on `AsyncOnSubscribe` as well. However I would prefer both of these apis to be in beta so people can reliably attempt to adopt them. I am comfortable (eventually) upgrading SyncOnSubscribe to part of the standard api but have Async in Beta. Is this fair?'
p7052
aS"Fine, but since this is a promotion, I'd like a majority vote just like before 1.1.\r\n\r\nI personally would :+1: for SyncOnSubscribe promotion but I'm still not convinced about `AsyncOnSubscribe`'s usability because the unpredictable request count if chained with any reasonable prefetching/replenishing operator (observeOn, flatMap, etc.)."
p7053
aS'Okay. I still would like it if we cleaned up the prefetching behavior so the request 1 patterns which we know are detrimental to performance are resolved. '
p7054
aS'@abersnaze @zsxwing @benjchristensen any concerns with this api upgrade from experimental to beta?'
p7055
aS'Could you open a separate issue with the problem description and example code so we can discuss it and not clutter this PR?'
p7056
aS'Do you mean the prefetching/batching behavior of observeOn and flatMap? \r\n\r\nTo confirm, you are in agreement that Experimental to Beta is acceptable for both?'
p7057
aS'>  I still would like it if we cleaned up the prefetching behavior so the request 1 patterns which we know are detrimental to performance are resolved.'
p7058
aS'Cool, Yes will do!'
p7059
aS'So to confirm you do not up vote this PR as is?'
p7060
aS"> So to confirm you do not up vote this PR as is?\r\n\r\n:+1: for `SyncOnSubscribe`, :-1: for `AsyncOnSubscribe`. You'd better split the PR."
p7061
aS"I've used AsyncOnSubcribe in a couple of places with success. One of which made integrating Elasticsearch's pagination api play nicely with Rx while allowing backpressure semantics to just work. Maybe one can use the following real code as an example of AsyncOnSubscribe usage:\r\n\r\n```java\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport org.elasticsearch.action.ActionRequestBuilder;\r\nimport org.elasticsearch.action.search.SearchRequestBuilder;\r\nimport org.elasticsearch.action.search.SearchResponse;\r\nimport org.elasticsearch.action.search.SearchScrollRequestBuilder;\r\nimport org.elasticsearch.client.Client;\r\nimport org.elasticsearch.common.unit.TimeValue;\r\n\r\nimport rx.Observable;\r\nimport rx.Observable.OnSubscribe;\r\nimport rx.observables.AsyncOnSubscribe;\r\n\r\npublic class ScrollObservable {\r\n\tprivate static class ElasticsearchRequestState {\r\n\t\tprivate final Client client;\r\n\t\tprivate final ActionRequestBuilder<?, SearchResponse, ?, ?> request;\r\n\t\tprivate final int pageNumber;\r\n\t\tprivate final long hitCount;\r\n\t\tprivate final TimeValue timeout;\r\n\t\tprivate ElasticsearchRequestState nextState;\r\n\r\n\t\tprivate ElasticsearchRequestState(Client client, SearchRequestBuilder request, TimeValue timeout) {\r\n\t\t\tthis.client = client;\r\n\t\t\tthis.request = request.setScroll(timeout);\r\n\t\t\tthis.timeout = timeout;\r\n\t\t\tthis.pageNumber = 0;\r\n\t\t\tthis.hitCount = 0;\r\n\t\t}\r\n\r\n\t\tprivate ElasticsearchRequestState(Client client, SearchScrollRequestBuilder request, TimeValue timeout, int pageNumber, long hitCount) {\r\n\t\t\tthis.client = client;\r\n\t\t\tthis.request = request.setScroll(timeout);\r\n\t\t\tthis.timeout = timeout;\r\n\t\t\tthis.pageNumber = pageNumber;\r\n\t\t\tthis.hitCount = hitCount;\r\n\t\t}\r\n\r\n\t\tpublic Observable<SearchResponse> getResponse() {\r\n\t\t\treturn Observable.defer(() -> Observable.just(request.execute().actionGet()))\r\n\t\t\t\t\t.retryWhen(errors -> errors.flatMap(error -> {\r\n\t\t\t\t\t\tif (error instanceof InterruptedException || error.getCause() instanceof InterruptedException) {\r\n\t\t\t\t\t\t\treturn Observable.just(null);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn Observable.error(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}))\r\n\t\t\t\t\t.doOnNext(r -> {\r\n\t\t\t\t\t\tlong currentCount = hitCount + r.getHits().getHits().length;\r\n\t\t\t\t\t\tif (r.getHits().getHits().length > 0 && currentCount < r.getHits().getTotalHits()) {\r\n\t\t\t\t\t\t\tnextState = new ElasticsearchRequestState(client, client.prepareSearchScroll(r.getScrollId()), timeout, pageNumber + 1, currentCount);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tpublic boolean hasNext() {\r\n\t\t\treturn nextState != null;\r\n\t\t}\r\n\r\n\t\tpublic ElasticsearchRequestState next() {\r\n\t\t\treturn nextState;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(final Client client, final SearchRequestBuilder request, final TimeValue timeout) {\r\n\t\tOnSubscribe<SearchResponse> os = AsyncOnSubscribe.createStateful(() ->\r\n\t\t\t\tnew ElasticsearchRequestState(client, request, timeout),\r\n\t\t\t\t(state, requested, observer) -> {\r\n\t\t\t\t\tobserver.onNext(state.getResponse());\r\n\t\t\t\t\tif (state.hasNext()) {\r\n\t\t\t\t\t\treturn state.next();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tobserver.onCompleted();\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\treturn Observable.create(os);\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(Client client, SearchRequestBuilder request, long duration, TimeUnit timeUnit) {\r\n\t\treturn from(client, request, new TimeValue(duration, timeUnit));\r\n\t}\r\n\r\n\tpublic static Observable<SearchResponse> from(Client client, SearchRequestBuilder request) {\r\n\t\treturn from(client, request, new TimeValue(1, TimeUnit.MINUTES));\r\n\t}\r\n}\r\n\r\n```"
p7062
aS"@kurzweil interesting. It seems like you don't actually use the requested amount in producing an observable to return. I'd recommend changing `state.getResponse()` to take the `long requested` and limit the upper bounds of the data events. "
p7063
aS"@stealthcode It was some time ago, but last time I checked I couldn't find a detailed documentation on how to use these onSubscribe, other than the javadoc, after a quick search. Can you suggest a pointer to such resources if they exist? If they don't exist, could promoting these to BETA include some detailed piece of documentation, like a wiki page giving examples on how and when to use the `AsyncOnSubscribe` and `SyncOnSubscribe`?"
p7064
aS"@simonbasle Right now the documentation is pretty sparse on these topics. I would certainly welcome more documentation but don't currently have the time myself. @DavidMGross would you have some cycles to work on detailed documentation for the `SyncOnSubscribe` and `AsyncOnSubscribe`? \r\n\r\nHere is one relevant [SO post](http://stackoverflow.com/questions/32723315/is-unsubscribe-thread-safe-in-rxjava)."
p7065
aS'thanks @stealthcode '
p7066
aS"To add some color here, there's currently no stable APIs for creating observables that do backpressure-aware work deferring. Even just for wrapping a synchronous method that returns a scalar value.\r\n\r\nThis make RxJava use in libraries very challenging since `fromCallable` and the helpers herein are unavailable."
p7067
aS'What do you mean by\r\n\r\n> that do backpressure-aware work deferring\r\n\r\n?'
p7068
aS"A common pattern for deferring work is `defer(() -> just(someMethod()))`, but if the subscriber has requested 0 the defer func is still called immediately on subscription, not on the first non-zero request. `fromCallable` doesn't suffer from this problem and the heavyweight hitters in this PR don't either, but all of those are non-stable APIs. As a workaround you can do things like `empty().startWith(defer(() -> just(someMethod())))` or `concat(just(defer(() -> just(someMethod()))))` but that's a bit nuts."
p7069
aS"@JakeWharton would be nice to support this strict deferral of work formally in the API and `defer` seems like a good place to put this support (so that subscription doesn't happen till first non-zero request). I'd be happy to see this happen in the existing `defer` operator but it could happen in an overload or elsewhere. Would you like to raise an issue to discuss this one?"
p7070
aS"Sure!\n\nOn Thu, Mar 31, 2016 at 3:35 PM Dave Moten <notifications@github.com> wrote:\n\n> @JakeWharton <https://github.com/JakeWharton> would be nice to support\n> this strict deferral of work formally in the API and defer seems like a\n> good place to put this support (so that subscription doesn't happen till\n> first non-zero request). I'd be happy to see this happen in the existing\n> defer operator but it could happen in an overload or elsewhere. Would you\n> like to raise an issue to discuss this one?\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3780#issuecomment-204093038>\n>\n"
p7071
aS'I have taken out `AsyncOnSubscribe` @akarnokd '
p7072
aS':+1: '
p7073
aS':+1:'
p7074
aS"I'm currently in a holding pattern waiting to see where Netflix wants me to\napply my hours for them this season (they've been picking up the tab for my\ndocumentation work thusfar), but I've filed a documentation issue so that I\nor someone else can pick up the trail at some point: ReactiveX/\nreactivex.github.io#221\n\nOn Mon, Mar 28, 2016 at 4:28 PM, Aaron Tull <notifications@github.com>\nwrote:\n\n> @simonbasle <https://github.com/simonbasle> Right now the documentation\n> is pretty sparse on these topics. I would certainly welcome more\n> documentation but don't currently have the time myself. @DavidMGross\n> <https://github.com/DavidMGross> would you have some cycles to work on\n> detailed documentation for the SyncOnSubscribe and AsyncOnSubscribe?\n>\n> Here is one SO post\n> <http://stackoverflow.com/questions/32723315/is-unsubscribe-thread-safe-in-rxjava>\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3780#issuecomment-202624276>\n>\n\n\n\n-- \nDavid M. Gross\nPLP Consulting\n"
p7075
asg14
S'stealthcode:onsubscribe-upgrade'
p7076
sbsI3781
(iPull
Pull
p7077
(dp7078
g3
S'Came across an interesting use case where someone needed a way to get an external signal (unknown to the subscriber) to throttle the data going through an observable chain.'
p7079
sg5
S'1.x: add an operator to throttle data via controlling the requests going upstream'
p7080
sg7
(lp7081
S'Enhancement'
p7082
asg10
I3781
sg11
(lp7083
S'FYI: https://gist.github.com/akarnokd/1c54e5a4f64f9b1e46bdcf62b4222f08'
p7084
aS'Do you want to pursue this further?'
p7085
aS"I'm in support for this functionality but the PR has test issues. Will you have time to fix it before 1.1.7? If not, would you want me to propose [my take on it](https://gist.github.com/akarnokd/1c54e5a4f64f9b1e46bdcf62b4222f08)?\r\n\r\nMy first month goal is to have 0 open 1.x PRs as we reach 1.1.7."
p7086
aS"Not in its current form. I was thinking that this could be made much simpler if this was composed with the rebatch operator since most of the code was batching the initial MAX_LONG request.\r\n\r\nBecause this rebatch doesn't have any queuing it makes it difficult to come up with invariants to test."
p7087
aS"Okay then, closing this for now. Don't hesitate to post a follow-up PR once you are ready."
p7088
aS"I kind of attempted the inverse of this and was going to release it separately. Rather than throttling requests to the provider, it throttles emissions from the stream and buffers them. Been busy with work but here's what it looked like - https://gist.github.com/hzsweers/91de6e2b87fa2542dd38034c4cee198c. Could open a separate PR here if you think it's something you'd want here."
p7089
aS'@hzsweers is it like a "burster", i.e., collect a window of values and then burst them out? Not sure about its general use. In addition, it has race conditions and potentially missed signals.'
p7090
aS'It wouldn\'t "burst" them out, per se. It just ensures a minimum time between emissions, normalizing a flow. I even attempted a marble diagram for it, hope this makes sense. Note that the first three emissions after normalizing are all equally spaced by a minimum window of time. It\'s admittedly a niche use case, but figured I\'d mention it after seeing this discussion.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1361086/16295628/cc114148-38dc-11e6-8787-9df024d9a8b5.png)\r\n'
p7091
aS"There is a potential for missed signals, but only in the event of backpressure (which I don't really know how to account for) or unsubscribing before the normalizer has been able to finish draining its queue."
p7092
aS"Yeah, this came up on Stackoverflow a couple of times. I can't find it but I answered such questions."
p7093
aS"This is an interesting one @hzsweers. I have a use case somewhat similar in that I have an archived timestamped stream and I'd like to replay it sped up by a factor. \r\n\r\nIf you do want to make a *Normalize*  operator like this check out @akarnokd's blog Advanced RxJava and check out operators like `OperatorObserveOn` and `OperatorOnBackpressureBuffer`.  I'd be happy to have a go at this operator but also happy to assist your PR. @akarnokd has always been very helpful when I've attempted this sort of thing and I'm sure he'd chip in (actually he'd knock it up in 5 mins but there'd be no fun for the rest of us).\r\n\r\nActually @hzsweers couldn't the `Normalize` use case be sorted by zipping with `Observable.interval`?"
p7094
asg14
S'abersnaze:valve'
p7095
sbsI3782
(iPull
Pull
p7096
(dp7097
g3
S'This is a first draft of the design document for the 2.x branch.\r\nWe are interested in collecting any feedback from the community (implementers but also pure users).\r\n\r\nThis present document is the collaborative work of @abersnaze, @benjchristensen, @stealthcode, and @stevegury. But we encourage anyone to propose improvements/clarifications via pull-request.\r\n'
p7098
sg5
S'2.x design decisions'
p7099
sg7
(lp7100
S'Discussion'
p7101
aS'Information'
p7102
asg10
I3782
sg11
(lp7103
S"### General observations\r\n\r\n#### Class structure\r\nI didn't see any mention of the architecture of the base objects and how one adds operators to it. As I suggested in my [design retrospect](http://akarnokd.blogspot.hu/2016/03/rxjava-design-retrospect.html) post, we can save a lot of allocations by extending the base class instead of using create/lift internally all the time.\r\n\r\n#### Error handling\r\nIn addition, I don't see any mention of requiring operators to call `RxJavaPlugins.onError` with exceptions that can't be delivered because of the RS contract. For example, if 2 sources on a regular flatMap signal an error, only the first can be delivered reliably and the other has nowhere to go.\r\n\r\nConsequently, since RS subscribers shoudn't really throw in their `onXXX` methods but end-subscribers tend to (as evidenced by many issue list reports), we'll need a `safeSubscribe()` method as well. As a result, we can no longer throw `OnErrorNotImplementedException` with `subscribe()` and `subscribe(Consumer)` because a) we don't know where it will bubble up and b) if it reaches the  scheduled action root, it still will end up in `RxJavaPlugins.onError`.\r\n\r\n#### Default Subscriber implementations\r\n\r\nSince cancelling and disposing is now potentially racy, we can't really expect end-subscribers to implement logic for them in their `onSubscribe()` calls. We need standard subscriber classes that do any internal exposure (access to `Subscription.request` conveniently) or external exposure (a cancellable `AsyncObserver` and `AsyncSubscriber`)\r\n\r\n### Operator fusion\r\n\r\nMacro-fusion relies on the property that operator classes can be identified in some way. For example, `just()` optimizations work in 1.x because it was implemented as a class extending `Observable` instead of hidden behind `create()`. However, as long as the Observable returned by `create()` can be unwrapped to look at the real `OnSubscribe` class, the fusion can still work, albeit with more (unnecessary) overhead. Using lambdas or anonymous inner classes defeats it.\r\n\r\nMicro-fusion requires a library-internal protocol to work amongst operators. One day, it would be great to have standard fusion protocol library that all RS libraries can implement and do cross-library fusion with it.\r\n\r\n### Changes to 2.x master\r\n\r\nI see the following changes required in current 2.x master:\r\n\r\n1. rename `Observable` to `Flowable`, including operators prefixed\r\n2. rename `NbpObservable` to `Observable`, including operators prefixed\r\n3. change `Observer` to interface, fix the depending sites\r\n4. make `PublishSubject` and `BehaviorSubject` extend `Observable` instead of `Flowable`\r\n5. remove operators from `Flowable` that would signal onError if the downstream can't keep up\r\n6. rewrite lifted operators to class-extension form\r\n7. add missing operators and overloads from 1.x,\r\n8. add missing unit tests from 1.x\r\n9. remove unnecessary operators or overloads\r\n10. add JavaDoc\r\n11. define interfaces and protocol for fusion, start applying operator-fusion to `Flowable`\r\n12. define interfaces and protocol for non-backpressured fusion, start applying operator-fusion to `Observable`\r\n\r\n"
p7104
aS"@akarnokd \r\n\r\n> we can save a lot of allocations by extending the base class instead of using create/lift internally all the time.\r\n\r\n> I don't see any mention of requiring operators to call RxJavaPlugins.onError with exceptions that can't be delivered because of the RS contract. \r\n\r\n> disposing is now potentially racy\r\n\r\n> Macro-fusion relies on the property that operator classes can be identified in some way.\r\n\r\nThese sound like additive changes to the existing design revision. Would it be okay if you make a revision to the DESIGN.md document and open a PR with proposals to address these items? \r\n\r\n> I see the following changes required in current 2.x master:\r\n\r\nCan you hold off on opening PRs until the DESIGN.md changes have been merged into 2.x? This should serve as a sign that the decisions have been reviewed and commitment has been reached by the RxJava committers. You are of course welcome to play around with code for your own understanding and demonstration purposes. "
p7105
aS'> Would it be okay if you make a revision to the DESIGN.md document and open a PR with proposals to address these items?\r\n\r\nSure.\r\n\r\nCan you hold off on opening PRs until the DESIGN.md changes have been merged into 2.x?\r\n\r\nYep.'
p7106
aS'I suggest merging this document so we can start modifying portions of it via PRs. There appear to be no general disputes, but valid changes to individual items that should be done.'
p7107
aS"It's been a week. Can we merge?"
p7108
aS"Fine, :+1:, let's use it as a starting point."
p7109
aS"Merged. Let's start making changes via small pull requests on the various details that were discussed above. "
p7110
aS"It's unfortunately been a month and nothing new has been contributed to the 2.x branch. Netflix folks,  @akarnokd, and others: would it be useful create a slack group for reactivex/RxJava to facilitate discussions amongst each other and the community rather than strictly GitHub correspondence? It seems like the latter is adding unnecessary friction to discussions since it doesn't scale well to many people discussing at once, let alone its inherent slowness conpared to chat. Could help improve organization and planning amongst contributors as well. Would be happy to help organize this, and I know many other developers have wished there was a resource like it having similar ones for other platforms and frameworks."
p7111
aS"My latest refactor PR is still not merged so I can't really start pushing other things. If you want, you can set up a chat somewhere, but note I'm at GMT+2."
p7112
asg14
S'stevegury:stevegury/2.x-design'
p7113
sbsI3783
(iPull
Pull
p7114
(dp7115
g3
S"This PR renames and moves classes around to match the design document.\r\n\r\nIn addition, JMH version is updated to 1.11.3 and Gradle to 2.12.\r\n\r\nInternal classes haven't been renamed yet and I plan to do it after this PR is merged.\r\n\r\nThis PR can't be effectively reviewed on GitHub. I suggest a clean checkout to your local IDE and see the proposed structure there."
p7116
sg5
S'2.x: rename and refactor classes to match the design document'
p7117
sg7
(lp7118
S'Cleanup'
p7119
asg10
I3783
sg11
(lp7120
S'Great stuff :100: '
p7121
aS"I'm going to trust you on this one, I didn't checkout the branch.\r\n:+1: "
p7122
asg14
S'akarnokd:DesignRefactorMain2x'
p7123
sbsI3787
(iPull
Pull
p7124
(dp7125
g3
S"In 1.1.1, `groupBy` was fixed to properly honor backpressure on the outer `Observable`. The change included a drain loop that emitted `onCompleted()` to the groups only when all `GroupedObservable`s were drained from the main queue. This delayed the group's completion unnecessarily causing the `concat` operator to hang in some source-consumer cases such as #3775.\r\n\r\nThis PR fixes the behavior by signalling `onCompleted()` to the groups the moment the main completes. \r\n\r\nNote, however, that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes, thus `concat` can't switch to the next source. One should use `flatMap` or `concatMapEager` instead."
p7126
sg5
S'1.x: fix groupby delaying group completion till all groups were emitted'
p7127
sg7
(lp7128
S'Bug'
p7129
asg10
I3787
sg11
(lp7130
S':+1: '
p7131
aS':+1: '
p7132
asg14
S'akarnokd:GroupByComplete1x'
p7133
sbsI3789
(iPull
Pull
p7134
(dp7135
g3
S'Closes #3784.'
p7136
sg5
S'1.x: prevent single.zip() of zero singles'
p7137
sg7
(lp7138
S'Bug'
p7139
asg10
I3789
sg11
(lp7140
S':+1:'
p7141
aS':+1: '
p7142
asg14
S'artem-zinnatullin:single-zip-empty'
p7143
sbsI3790
(iPull
Pull
p7144
(dp7145
g3
S'Closes #3161.'
p7146
sg5
S'1.x: expose single.lift()'
p7147
sg7
(lp7148
S'API promotion'
p7149
asg10
I3790
sg11
(lp7150
S':+1:'
p7151
aS':+1: '
p7152
asg14
S'artem-zinnatullin:single-expose-lift'
p7153
sbsI3791
(iPull
Pull
p7154
(dp7155
g3
g57
sg5
S'1.x: fix observable delay methods typos in documenation'
p7156
sg7
(lp7157
S'Cleanup'
p7158
aS'Documentation'
p7159
asg10
I3791
sg11
(lp7160
S'Great, thanks!\r\n\r\n:+1:'
p7161
aS':+1:'
p7162
aS"@neoranga55 there's also one [here](https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Single.java#L2365)"
p7163
aS'@vanniktech do you suggest adding the fix for Single to this current PR or opening a new one?'
p7164
aS'Maybe its easier to search for that typo in all files and fix them in a single PR.'
p7165
aS"@akarnokd that's exactly what I did `ack compuation` and it returned me the two places he already fixed it and then the other one in Single"
p7166
aS'Okay, to be clear, please fix the type on Single as well in this PR.'
p7167
aS"Ok, added the fix for Single, I'm not familiar with the branching flow here so I did the one I'm familiar with: rebase to collapse both changes into a single commit."
p7168
aS'Looking good now :+1: '
p7169
aS'We prefer single commit PRs so you did right by squashing the commits.'
p7170
aS':+1: '
p7171
asg14
S'sebaslogen:patch-2'
p7172
sbsI3795
(iPull
Pull
p7173
(dp7174
g3
S'This PR makes sure `observeOn` requests replenishments in a fixed and predictable quantity of 75% of the `bufferSize`, that is, if an emission counter reaches `0.75 * bufferSize`, that amount is requested and the emission counter is reset to zero. This requires saving the emission count between drain runs. If the bufferSize is 1 or 2, the replenishment will trigger after every 1 or 2 items.\r\n\r\nNote that there is only one sensitive operator-builder, `AsyncOnSubscribe`, which is mostly affected by the request pattern as it facilitates user code to respond with an Observable sequence of the requested amount.\r\n\r\nIn addition, since `observeOn` now supports setting the buffer size, it can act as a rebatching operator via the help of `Schedulers.immediate()`.'
p7175
sg5
S'1.x: observeon now replenishes with constant rate'
p7176
sg7
(lp7177
S'Enhancement'
p7178
asg10
I3795
sg11
(lp7179
S':+1: '
p7180
aS'Other than the previous comment, \xf0\x9f\x91\x8d '
p7181
aS"That formula doesn't work if calculatedSize == 1. I've updated the PR with a comment on the calculation."
p7182
aS'\xf0\x9f\x91\x8d '
p7183
asg14
S'akarnokd:ObserveOnStableFetch'
p7184
sbsI3797
(iPull
Pull
p7185
(dp7186
g3
S'This PR factors out the `XSubscriber` types, makes sure the base types implement `ConsumableX`\r\nand methods accepting X in some way now accept `ConsumableX` type.\r\n\r\nWrapping into the base types are not yet eliminated.'
p7187
sg5
S'2.x: add consumablex to the base types, update method signatures'
p7188
sg7
(lp7189
S'Cleanup'
p7190
aS'Enhancement'
p7191
asg10
I3797
sg11
(lp7192
S"PR updated with the few places where I forgot to replace with the nw interfaces. In addition, I'm no longer convinced that they should cross-implement each other's base interface because it causes overload ambiguity."
p7193
aS"> I'm no longer convinced that they should cross-implement\r\n\r\nI think I agree with that statement. Do you mean that `Completable` should not implement the `ConsumableObservable`? I did not intend that in my POC."
p7194
aS'`Flowable` looks like it could do both `ConsumableObservable` and `Publisher` or `Singe` could also implement `Publisher`, but some methods become ambiguous.'
p7195
aS"Yeah, since `Flowable`'s subscribe takes a `Subscriber` and both `ConsumableSubscriber` and `Publisher` both agree on the subscriber type then we should make Flowable implement both Consumable and Publisher. The others are difficult."
p7196
aS"Added `ConsumableFlowable`. I had trouble with typing extend, using `Function<? super ConsumableFlowable<T>, R>` is too restrictive and gives no access to `Flowable's methods` and having `U extends ConsumableFlowable<T>>, Function<? super U, R>` has a type-bounce of ? super ? extends ConsumableFlowable."
p7197
aS'I got extend to work with this.\r\n\r\n```java\r\npublic class Flowable<T> implements Consumable<Subscriber<? super T>> {\r\n@Override\r\n    public <S2, X extends Consumable<S2>> X extend(Function<Consumer<Subscriber<? super T>>, X> convertion) {\r\n        return convertion.apply(onSubscribe);\r\n    }\r\n}\r\n```\r\n\r\nSo you could probably implement it similarly. '
p7198
aS"I'll try it out locally and see what works (and what doesn't). "
p7199
aS"I got it to work but the `Publisher<T> onSubscribe` is not a `Consumer<Subscriber<? super T>` so it'd require a wrapper.\r\n\r\n```java\r\n@Override\r\npublic <S2, X extends Consumable<S2>> X extend(Function<Consumer<Subscriber<? super T>>, X> conversion) {\r\n    return conversion.apply(new Consumer<Subscriber<? super T>>() {\r\n        @Override\r\n        public void accept(Subscriber<? super T> subscriber) {\r\n            onSubscribe.subscribe(subscriber);\r\n        }});\r\n}\r\n```\r\n\r\nThis required a base interface for `ConsumableFlowable`. \r\n\r\n```java\r\npublic interface Consumable<S> {\r\n    void subscribe(S subscriber);\r\n    public <S2, X extends Consumable<S2>> X extend(Function<Consumer<S>, X> conversion);\r\n}\r\n\r\npublic interface ConsumableFlowable<T> extends Consumable<Subscriber<? super T>> {\r\n}\r\n\r\npublic class Flowable<T> implements Publisher<T>, ConsumableFlowable<T> {\r\n    // ...\r\n}\r\n```"
p7200
aS"Let's experiment with that in a separate PR; also, I'd wait until the Flowable isn't a wrapper anymore but a base class that gets extended by all internal operators that were create/lift before."
p7201
aS"Why do we need a separate PR? Extend is part one 1.x and with the\nConsumable it's even more necessary to switch between types. Sure you can\ncreate custom instance operators for converting between them or subscribe\nbut this interface is explicitly for converting between and chaining\ntogether different streams. So it's useful to convert between types that do\nnot necessarily have a direct relationship (I.e. in 2 unrelated library\njars) So I am very disinclined to leave it out.\n\nOn Sat, Mar 26, 2016, 12:48 David Karnok <notifications@github.com> wrote:\n\n> Let's experiment with that in a separate PR; also, I'd wait until the\n> Flowable isn't a wrapper anymore but a base class that gets extended by all\n> internal operators that were create/lift before.\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3797#issuecomment-201919256>\n>\n"
p7202
aS'Why do you want this single PR to host every modification? There is a lot to do with 2.x and some of them, like extend, can be incremental.'
p7203
aS"I can see that it could be implemented incrementally. This PR didn't say\nanything to that effect. I think that as a team the RxJava committers\nshould come to discuss and agree on the 2.0 Design doc. This process should\nor may include additional elaboration or amendments to areas that do not\nyet have team commitment. This would include items like extend (which you\nseem to be uncertain in your support of). And in that process team members\nwould commit to and merge their  commitments incrementally in the design\ndoc on the 2.x branch before PRs of the uncommitted features are opened.\n\nIf any of us have concerns, suggestions, or alternatives or require\nelaboration on the design doc then we should comment or open an issue/pr to\nthe design. I think we should wait until the Consumable and/or extend are\ncommitted and merged to 2.x in the design doc so others have had a chance\nto review and commit to it before continuing our work on this PR.\n\nOn Sun, Mar 27, 2016, 01:18 David Karnok <notifications@github.com> wrote:\n\n> Why do you want this single PR to host every modification? There is a lot\n> to do with 2.x and some of them, like extend, can be incremental.\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3797#issuecomment-202014747>\n>\n"
p7204
aS'@stealthcode the design doc PR is merged, is there anything preventing this PR from proceeding?'
p7205
aS"@hzsweers Nope. Apologies for the delay but I won't be getting back to this until next week. Thanks for the reminder. "
p7206
aS'@stealthcode ping'
p7207
aS"I'll redo this PR in multiple phases."
p7208
asg14
S'akarnokd:BaseTypeRefactor2x'
p7209
sbsI3798
(iPull
Pull
p7210
(dp7211
g3
S'Just functions in Observable class were overloaded unnecessarily with increasing arguments from 1 to 10.\r\nMarked all those methods as deprecated and defined one more overloaded just function with varargs as:\r\n`@SuppressWarnings("unchecked")\r\n    public static <T> Observable<T> just(T... t) {\r\n        return from(t);\r\n    }`\r\n\r\nThis will reduce the code redundancy and make it more elegant.'
p7212
sg5
S'changed just() function in observable class to varargs.'
p7213
sg7
(lp7214
sg10
I3798
sg11
(lp7215
S'@princebansal please take a look at #686 for previous discussion about varargs'
p7216
aS'@zsxwing Actually I was facing some build errors before. But now I have modified the code and using varargs. I think varargs is the better option to use rather than Iterator or multiple arguments.'
p7217
aS":-1:\r\n\r\nThe arity versions bind more highly in overload resolution so you will make every usage of `just` below 11 values (which is surely 100% of them) now display as deprecated at every call site\xe2\x80\x93presumably without a way to select the correct overload.\r\n\r\nThat aside, arity overloads traditionally exist for a two reasons: to provide specific implementations which are more performant for the common cases and to avoid the `Object[]` allocation of calling a varargs method. RxJava is an allocation party already so the latter isn't _too_ big of a deal (plus the 2+ versions allocate the `Object[]` explicitly anyway). The single arity overload, however, provides an optimized implementation which you would not want to replace with the unsized iterator version."
p7218
aS"I'm sorry, but this is PR is no good. There are several problems:\r\n\r\n  - Android studio file\r\n  - large amounts of space changes that make it difficult to review `Observable`\r\n  - space changes in other files\r\n  - varargs now conflict with 2-9 arg just which is bad; you had to change tests which is also an indication of problems to come to others.\r\n  - varargs usually requires SuppressWarnings in JDK 6 code which was not required with the 2-9 arg common use cases.\r\n  - you can now have an empty `just()` which is odd.\r\n\r\n:-1:"
p7219
aS"I think keeping such high arity overloaded methods is not needed and appears unprofessional. Varargs with generics though displays warnings but is friendly for developers to code using IDE as it doesn't show all methods in predictions. Also an amount of code can be cut down. The warning can be Suppressed at user side or even if not, it is not going to cause any errors. \r\n@JakeWharton @zsxwing Just think and give a final verdict. If appears unsuitable, I'll close the PR."
p7220
aS"Guava and JDK 9's factory methods disagree with you. Individual arity\nmethods are a sign of experienced, performance-minded developers behind an\nAPI.\n\nOn Sat, Mar 26, 2016, 2:49 PM Prince Bansal <notifications@github.com>\nwrote:\n\n> I think keeping such high arity overloaded methods is not needed and\n> appears unprofessional. Varargs with generics though displays warnings but\n> is friendly for developers to code using IDE as it doesn't show all methods\n> in predictions. Also an amount of code can be cut down. The warning can be\n> Suppressed at user side or even if not, it is not going to cause any\n> errors.\n> @JakeWharton <https://github.com/JakeWharton> @zsxwing\n> <https://github.com/zsxwing> Just think and give a final verdict. If\n> appears unsuitable, I'll close the PR.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3798#issuecomment-201911231>\n>\n"
p7221
aS'Okay. As per experts guidance I am closing this PR and will surely contribute to this project in future with better enhancements.'
p7222
asg14
S'princebansal:1.x'
p7223
sbsI3799
(iPull
Pull
p7224
(dp7225
g3
S'https://github.com/ReactiveX/RxJava/issues/3730'
p7226
sg5
S'1.x: add completable.andthen(single)'
p7227
sg7
(lp7228
S'Enhancement'
p7229
asg10
I3799
sg11
(lp7230
S'thanks for your review. fixed'
p7231
aS'Looks good! :+1: Just few small things to fix.'
p7232
aS"@artem-zinnatullin @akarnokd thanks for your review. i'll update this soon."
p7233
aS'Updated and rebased.'
p7234
aS':+1:'
p7235
aS':+1: '
p7236
asg14
S'prt2121:pt/andThenSingle'
p7237
sbsI3803
(iPull
Pull
p7238
(dp7239
g3
g57
sg5
S'1.x: fix typos in documentation and some code'
p7240
sg7
(lp7241
S'Cleanup'
p7242
asg10
I3803
sg11
(lp7243
S':+1:'
p7244
aS':+1: '
p7245
asg14
S'sebaslogen:fix-documentation-typos'
p7246
sbsI3809
(iPull
Pull
p7247
(dp7248
g3
S"This crash happens on contention where a scalar null value has to go through the scalar-queue which doesn't support nulls and requires NotificationLite transformations. (The drain side had the proper `getValue` in place already.)\r\n\r\nReported in #3808."
p7249
sg5
S'1.x: fix merge/flatmap crashing on an inner scalar of null'
p7250
sg7
(lp7251
S'Bug'
p7252
asg10
I3809
sg11
(lp7253
S':+1: '
p7254
aS"Wrong test, didn't trigger the code path that goes into the queue. Updated."
p7255
aS':+1: \r\n\r\n// New rule: check all PRs locally\xe2\x80\xa6'
p7256
aS':+1: '
p7257
aS':+1: '
p7258
asg14
S'akarnokd:MergeNullScalarFix1x'
p7259
sbsI3814
(iPull
Pull
p7260
(dp7261
g3
S"There are two cases when the operator `switchOnNext` / `switchMap` retained parts of an earlier source through its `Producer` via the arbiter structure:\r\n\r\n  - when a backpressure-supporting source was followed by a unsupporting source which never sets a new Producer, keeping the old one there indefinitely\r\n  - when a backpressure-supporting source terminated but was not followed by any other source for longer period of time\r\n\r\nThe fix swaps in a null-producer when a new source is encountered and when an old source terminates. The swap is guarded by the current index so outdated events won't interfere with newer sequences.\r\n\r\n**Edit**\r\n\r\nFixed a `ConcurrentModificationException` because the `queue` wasn't nulled out after assigning it to `localQueue`. Plus, I've added a test to check the async-source and async-inner doesn't cause backpressure exceptions."
p7262
sg5
S'1.x: fix prolonged producer retention in switchonnext'
p7263
sg7
(lp7264
S'Bug'
p7265
asg10
I3814
sg11
(lp7266
S'Updated with another fix + test.'
p7267
aS'Closing this and will post a fresh PR with a completely rewritten operator as it has backpressure problems as well (overflow/hang).'
p7268
asg14
S'akarnokd:SwitchMapArbiterRetentionFix'
p7269
sbsI3815
(iPull
Pull
p7270
(dp7271
g3
S'Motivation: save some nanoseconds on JVM and a little bit more on Android, new construction will also be easier for JIT.'
p7272
sg5
S'1.x provide public constant instead of unsafeaccess.isunsafeavailable()'
p7273
sg7
(lp7274
S'Cleanup'
p7275
asg10
I3815
sg11
(lp7276
S'I guess this single line should be inlined by JIT. Are you worrying about some old Android versions without JIT?'
p7277
aS"RxJava doesn't support Android devices which lacked a JIT because they only\nhave Java 5 APIs.\n\nOn Thu, Mar 31, 2016 at 3:14 PM Shixiong Zhu <notifications@github.com>\nwrote:\n\n> I guess this single line should be inlined by JIT. Are you worrying about\n> some old Android versions without JIT?\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3815#issuecomment-204085567>\n>\n"
p7278
aS"Yes, `if (UnsafeAccess.isUnsafeAvailable())` should be interpreted and inlined in places, but it won't be immediate and JIT will have to figure that out. Also, I think it'll have to do it again for every place where we use this method, but not sure.\r\n\r\nRegarding Android afaik: from Android 2.3 to 4.4 it has Dalvik VM that has JIT, from Android 5 to 6 it has ART without JIT, upcoming Android N release will have ART with JIT.\r\n\r\nIdea is: if we can do something a little bit more efficiently and it doesn't make code much worse, why not."
p7279
aS"I don't know."
p7280
aS"Totally up to you, it's nanooptimization in `internal` package, very easy to go back, basically CTRL + R one to another.\r\n\r\n// -1 method for Android BTW haha"
p7281
aS"I think the reason for this should be that it's just a bit cleaner, inlined, and one less method. Perf isn't really a good or measurable heuristic for this. Maybe there's an argument for keeping the method for testing purposes, but I doubt people are mocking this."
p7282
aS'We have trouble with Samsung devices again. Could you include a check for a system property named `rx.unsafe-disable` (content value irrelevant) and thus force IS_UNSAFE_AVAILABLE to be false?'
p7283
aS"@akarnokd to not mix refactoring with new logic I've opened separate PR for system property #3829.\r\n\r\nFeel free to merge in any order.\r\n\r\n@hzsweers at the moment I don't see any profit in using method, and I'm not sure that somebody is mocking static method (PowerMock?), if I'll need it I'll rewrite value of `UNSAFE` field via reflection."
p7284
aS'Was just chiming in, I doubt anyone us mocking it and it is cleaner so I say go for it.'
p7285
aS"In term of performance, I don't think the impact will be measurable (even in interpreted mode), the method will be under the default threshold for Trivial Method (=6 for Hotspot), and will be inlined as soon as the caller is compiled, [reference code in OpenJDK](http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/opto/bytecodeInfo.cpp#l301).\r\n\r\nThe only remaining question is, what is cleaner:\r\n`UnsafeAccess.isUnsafeAvailable()` or `UnsafeAccess.IS_UNSAFE_AVAILABLE` ?\r\nI prefer the method call."
p7286
aS'As we may add other logic into `isUnsafeAvailable` in future (E.g., #3829), I prefer the method call too.'
p7287
aS"I'd keep this as a method as well."
p7288
aS'ok'
p7289
asg14
S'artem-zinnatullin:unsafeaccess-isUnsafeAvailable'
p7290
sbsI3817
(iPull
Pull
p7291
(dp7292
g3
g57
sg5
S'1.x: upgrading asynconsubscribe from experimental to beta'
p7293
sg7
(lp7294
S'API promotion'
p7295
asg10
I3817
sg11
(lp7296
S'see #3780 for context.'
p7297
aS'The goals for the `AsyncOnSubscribe` was motivated in part by asynchronous paginated streaming processes. An example is fulfilling a stream of data via RPC with a minimal amount of buffering on the consuming client. Buffering operators (such as `observeOn`) will issue subsequent requests upstream and when the algorithms governing these semantics are inefficient (i.e. request 1 - fulfill 1 loops) the `AsyncOnSubscribe` may be called multiple times. \r\n\r\nHowever sever _or_ trivial this impact, I do not see this as a problem with `AsyncOnSubscribe`. That is a bug with the buffering operators that needs to be fixed. Any observable which fulfills request from an async process (i.e. any RPC) will be impacted by this inefficient request behavior. This will necessitate user implementations which buffer and/or reorder the stream of data. \r\n\r\nThe `AsyncOnSubscribe` is being used inside Netflix in such a way as described above by @kurzweil (see [comment](https://github.com/ReactiveX/RxJava/pull/3780#issuecomment-199518103)). I see that this functionality provides a safe way to get around the problems of inefficient request semantics and once these problems are resolved this a good API to stream asynchronous data for precisely the amount requested by the consumer. \r\n\r\n@akarnokd you are the committer who has been most vocally against this upgrade. Can you please post your concerns with the API? '
p7298
aS"You want to rely on the request pattern which now has to be changed almost everywhere and become part of the public API to satisfy this operator. Any third party lifted operator and the whole thing may be broken again. You need tight control of the request amount which only happens reliably with a same-thread consumer (so no observeOn, etc.).\r\n\r\nIn addition, the operator can't ensure the specified amount is honored by the source it generates (i.e., last page may shorter than the page size); overproduction can shift the whole output-paging and underproduction triggers a new round to generate the missing amount. The only alternative for handling bad sources is to signal error in either case. (Btw., @kurzweil 's example doesn't use the `requested` parameter with the response).\r\n\r\nYou quoted RPC and paging as the main target for AsyncOnSubscribe. RPC requires bi-di streaming and paging requires streaming+backpressure over a network boundary, both beyond RxJava."
p7299
aS"None of your points has anything to do with the API of `AsyncOnSubscribe`. Those problems exist. But they do not impact whether we have the correct API for the use case. That is why this should be upgraded and the usage of `request(1)` should be improved. \r\n\r\n> RPC requires bi-di streaming and paging requires streaming+backpressure over a network boundary, both beyond RxJava.\r\n\r\nThe purpose of the `AsyncOnSubscribe` is to provide a safe way for a consumer of an RPC to stream data. The goal is _not_ to provide streaming over network boundaries. That is the goal of [ReactiveSocket](http://reactivesocket.io/). \r\n\r\nSo I'm still at a loss for why you argue against an API that is clearly not accounted for in RxJava. Can you give me any alternative to solving the consumer driven RPC with minimal buffering that maintains ordering?"
p7300
aS'Yes, swing around the request parameter into a `PublishSubject` that gets `flatMapped` and observed on at will:\r\n\r\n```\r\nPublishSubject<Request> req = PublishSubject.create();\r\n\r\nreq.flatMap(r -> service(r)).observeOn(Schedulers.computation()).subscribe(v -> {\r\n   process(v);\r\n   if (i++ % 20 == 0) {\r\n       req.onNext(nextPage);\r\n   }\r\n});\r\n\r\nreq.onNext(initialRequest);\r\n```\r\n'
p7301
aS'Okay, thanks. This looks interesting but could you please explain your code example a little bit? What is `nextPage`? The recursive subscription of `req` is confusing me. Why do you call `req.onNext` from within the subscribe of `req`? '
p7302
aS'To start the next round of values with different parameters for service().'
p7303
aS"I'm sorry but I don't understand it. Can you show some usage? Is this supposed to be implemented in a `Subscriber`? \r\n\r\nI'm still not seeing any necessary change to the API. There is still a need to have direct control over providing data for the precise amount requested by the consumer. This seems like implementation to buffer/collect requests to be fulfilled at sometime in the future. If so this could be used as a stop gap solution with `AsyncOnSubscribe` until the request behaviors are corrected. "
p7304
aS'You try to reinterpret the request() call which only works if the producer and the consumer are next to each other without any intermediate operators. It\'s the same problem when people try to interpret the request amount as the number of bytes to return when the sequence type is byte[]. It won\'t work properly.\r\n\r\nBy using the PublishSubject above, you have the option to control the parameters to the service\r\nand then consume the resulting data at your will. Then, signal the next set of parameters through the subject that calls the service which then creates another Observable sequence. This setup doesn\'t repurpose the backpressure-request amount and can be freely tranformed further.\r\n\r\n```java\r\npublic class ServicePaging {\r\n    static Observable<Integer> service(int start, int size) {\r\n        return Observable.range(start, size);\r\n    }\r\n    \r\n    static Pair<Observer<Integer>, Observable<Integer>> repeatingService() {\r\n        \r\n        Subject<Integer, Integer> ps = PublishSubject.<Integer>create().toSerialized();\r\n        \r\n        return Pair.of(ps, ps.concatMap(v -> service(v, 20)));\r\n    }\r\n    \r\n    public static void main(String[] args) {\r\n        \r\n        Pair<Observer<Integer>, Observable<Integer>> pair = repeatingService();\r\n        \r\n        pair.second.subscribe(new Subscriber<Integer>() {\r\n            int totalReceived;\r\n            int received;\r\n            \r\n            int index;\r\n\r\n            @Override\r\n            public void onNext(Integer t) {\r\n                System.out.println(index + " - " + t);\r\n\r\n                if (++received == 20) {\r\n                    index += 20;\r\n                    received = 0;\r\n                    pair.first.onNext(index);\r\n                }\r\n\r\n                if (++totalReceived == 120) {\r\n                    pair.first.onCompleted();\r\n                }\r\n            }\r\n            \r\n            @Override\r\n            public void onError(Throwable e) {\r\n                e.printStackTrace();\r\n            }\r\n            \r\n            @Override\r\n            public void onCompleted() {\r\n                System.out.println("Done");\r\n            }\r\n        });\r\n        \r\n        pair.first.onNext(0);\r\n    }\r\n}\r\n```'
p7305
aS"Your code example shows a way that you can protect a producer from the `request-1--produce-1` problem of `observeOn` by buffering onNext and mapping a batch of onNexts and mapping a batch to a call to a service. I don't see how this actually relates. The purpose of the `AsyncOnSubscribe` is to provide a way that users can create observables that support back pressure  over asynchronous boundaries with as little buffering as possible. Your code example does not monitor the request amount so the number of elements produced by `service` cannot be constrained to the downstream operator buffer sizes. Also this example offers no capability of pre-fetching (i.e. buffers are draining and we request more data from the service eagerly). And one more thing that I think is slightly trivial to fix but still a jagged edge to consider... when there is a slow producer of `onNext` values then you may have an interim (i.e. between 0 and 20) request value for a long time without fulfilling that request. \r\n\r\nI still don't see what is the hold up. Why not use request values for what they are intended? "
p7306
aS'I just want to clarify. I don\'t think its absolutely necessary to fix all cases of this request behavior _right now_. I\'m not talking about promoting into public (i.e. non-`@Beta`) immediately. I think that we should make it safe for use before its made public. What I\'m really looking for from you @akarnokd is just some sort of agreement that this is a desirable direction. If so then we can change the conversation from it\'s API and move on to more productive "fix the request pattern" work. If you disagree with this API\'s usage or existence then we can argue it\'s existence and maybe there\'s no point in moving forward at all. So could please tell me where you stand regarding using back-pressure for negotiating data over an async boundary using the AsyncOnSubscribe? '
p7307
aS"Backpressure amounts are established between subsequent producer and consumer pairs in the operator chain, depending on the efficiency of moving data across a potential (i.e., flatMap) or actual (i.e., observeOn) async boundary. It is not there to propagate a specific request amount from the end consumer up to the main source; that requires a different protocol (i.e., bi-di streams).\r\n\r\nBut let's assume for a second it were so. The consequence would be that unless the end-consumer's request amount is constant, operators such as observeOn and flatMap can't work with a fixed capacity queue anymore. (Even if they go unbounded, a request with `Long.MAX_VALUE` puts us back to pre-backpressure era.) With that, having a `flatMap` mapping multiple values into `AsyncOnSubscribe` sources, what request amount should they receive? The original request going to each? Uniformly distributed, even if the number of sources is unknown? One by one?\r\n\r\n> The purpose of the AsyncOnSubscribe is to provide a way that users can create observables that support back pressure over asynchronous boundaries with as little buffering as possible.\r\n\r\nIn the current setup, this only works if the source and consumer are right next to each other since they reinterpret the request amount, making it a synchronous operator.\r\n\r\n> Your code example does not monitor the request amount so the number of elements produced by service cannot be constrained to the downstream operator buffer sizes.\r\n\r\nGenerally, you should be able to tell the service how many elements you'd like to receive before getting an Observable back; it is a constant 20 in my example.\r\n\r\n> Also this example offers no capability of pre-fetching (i.e. buffers are draining and we request more data from the service eagerly)\r\n\r\nIn my example, I didn't add `observeOn` to make things simple. Since nothing depends on the backpressure-request size in the example, an `observeOn` would prefetch as usual.\r\n\r\nIn addition, the prefetch you want is contradictory to your request N from service where comes from the end consumer. If the requesting is left as is now in RxJava, you get prefetch and on-demand delivery.\r\n\r\nBottom line is that sources such as `AsyncOnSubscribe` trying to repurpose the backpressure requresting can't work with async intermediate operators that change request amounts between upstream and downstream. "
p7308
aS'> It is not there to propagate a specific request amount from the end consumer up to the main source; that requires a different protocol (i.e., bi-di streams).\r\n\r\nI don\'t think I have ever said that this is how back pressure works. Many times the request amounts are forwarded (i.e. trivial back pressure for operators like scan, etc). Your definition sounds precisely like what I am trying to say. However if your consumer chain has a buffer in place (i.e. a take, observeOn, flatMap, etc) then the consuming operator will now have a constraint on it\'s request amount. So in general the consumer observable chain will have some finite but dynamic request amount. \r\n\r\n> But let\'s assume for a second it were so. The consequence would be that unless the end-consumer\'s request amount is constant, operators such as observeOn and flatMap can\'t work with a fixed capacity queue anymore. (Even if they go unbounded, a request with Long.MAX_VALUE puts us back to pre-backpressure era.) \r\n\r\nI am not sure what any of this has to do with our discussion since I am not talking about constant request amounts. \r\n\r\n> what request amount should they receive?\r\n\r\nThe `AsyncOnSubscribe` should fulfill data from their producer in exactly the amount requested. This should be however much is requested by the downstream consumer. \r\n\r\n> observeOn would prefetch as usual\r\n\r\nIn your example there was no ordering of multiple concurrent fulfilling requests. For example, the consuming subscriber requests a batch of 5000 (which has a buffer size of 5000). While the provider is busy producing the 5000 the buffer in the consumer drains 2000 entries and can then request 2000 more (total 7000). However the original 5000 have not finished draining from the producer. Concurrent batches and order preserving. There is nothing in your example that can handle this. \r\n\r\n> In the current setup, this only works if the source and consumer are right next to each other since they reinterpret the request amount, making it a synchronous operator.\r\n\r\nWhat do you mean by a synchronous operator and why is this significant? Operators are synchronous in that there cannot be interleaving onNexts so I am not sure if you understand what the goal is. \r\n\r\nThe goal of AsyncOnSubscribe is for a consumer to request arbitrary amounts of data and for the producer to provide exactly that amount. It does not matter how big or small these amounts are nor should it matter when those requests are made. This is useful when integrating a system that cannot provide an Rx Observable interface. For instance, a message passing system like activeMQ or SQS which receives data and must buffer or risk violating back pressure rules. In a naive implementation one might wrap the message stream via a listener and observe the datasource directly. This will clearly not satisfy back pressure when there is a slow consumer. The next iteration one could use `Observable.create(...)` and try your best at implementing an OnSubscribe that provides a `Publisher` and reads from the data source while respecting back pressure. In this implementation you have to worry about interleaving requests. \r\n\r\nThe purpose of this is to integrate producers which have no concept of back pressure (i.e. sampling from mouse events or paginating over data services) and request ONLY the requisite amount at a time. This seems like exactly the purpose behind back pressure. \r\n\r\n> Bottom line is that sources such as AsyncOnSubscribe trying to repurpose the backpressure requresting can\'t work with async intermediate operators that change request amounts between upstream and downstream.\r\n\r\nCan you tell me how the AsyncOnSubscribe changes the request amounts? They should be exactly the amounts requested from the consumer. Also this is not a "repurposing" of back pressure. The purpose of back pressure was to minimize the unbounded buffers between a producer and consumer. The AsyncOnSubscribe does exactly this while preserving ordering of data. '
p7309
aS'I simply can\'t understand what you were trying to accomplish. All I see is mixed concepts and interpretations of request, backpressure, RPC-like behavior, bi-directional value passing. If you want to Rx-ify a pull-like data source, `SyncOnSubscribe` does the job. If you want to Rx-ify a source that just pushes out values, you have buffer/drop/sample/block to make it stop. If you can tell a source outside RxJava to produce N items, make it like this:\r\n\r\n```java\r\nObservable<GroupedObservable<Request, T>> service(Observable<Request> parameters);\r\n```\r\n\r\nwhere `Request` can hold the number of items you want a once from the paired `GroupedObservable`. Then you can concat/merge/concatEager the outer Observable to get a single stream of Ts. If the parameters is a `PublishSubject` or `UnicastSubject`, your consuming end `Subscriber` only has to call `onNext` on it (instead of its request(n)) method whenever it needs the next "batch".'
p7310
aS'I have no other way to try to tell you that we need a way to convert `request(n)` to a streaming batch of potentially concurrent `Observable<T>`. \r\n\r\n@benjchristensen this functionality was your vision. Perhaps you can communicate it best. '
p7311
aS"@akarnokd I was just talking with @kurzweil about this and it got me thinking about you're last comment. Could we invert the `service` method you mentioned to something like\r\n\r\n`public static <T> Observable<T> create(final Transformer<Long, T> requestsToValues)`\r\n\r\nIt would be a lot like `retryWhen` where the author of the transformer would have to compose together operators like `scan` to maintain a state across requests and `merge`, `concat` or `concatEager` to combine the values from multiple requests back into one stream of values."
p7312
aS"If you mean `rx.Observable.Transformer`? That requires a source `Observable` which is available in `Observable.compose` as `this`.\r\n\r\nI can't think of a version based on the retryWhen/repeatWhen signature. It seems you want the end-subscriber to be in charge of the amount to be generated in one batch, thus it has to know about the front to signal the generator.\r\n\r\nThere is an alternative signature to my method:\r\n\r\n```java\r\nSubject<Long, T> service(Func1<Long, Observable<T>> generator, JoinMode mode);\r\n```\r\n\r\nBut this may also require a special boundary indicator T for the Subscriber to know when to call onNext on the subject."
p7313
aS"> If you mean rx.Observable.Transformer? That requires a source Observable which is available in Observable.compose as this.\r\n\r\nEclipse doesn't seem to mind that I don't have an instance of Observable. Maybe because it is an inner interface?\r\n\r\n> I can't think of a version based on the retryWhen/repeatWhen signature.\r\n\r\nNot literally. The retryWhen operator takes a `Func1<Observable<Throwable>, Observable<?>>` which could be rewritten to `Transformer<Throwable, ?>`.\r\n\r\n> It seems you want the end-subscriber to be in charge of the amount to be generated in one batch, thus it has to know about the front to signal the generator.\r\n\r\nNot really no. The values emitted to the `Observable<Long>` onNext would correspond 1:1 to the with `request(n)` to the producer.\r\n\r\n> There is an alternative signature to my method:\r\n> `Subject<Long, T> service(Func1<Long, Observable<T>> generator, JoinMode mode);`\r\n\r\nI guess but it seem strange to have a new type to describe something that can be done by applying an existing operator. It also limits the user to only things that we've thought of. Like in a bazar world where someone wants to use `switchMap` to cancel the previous batch and start a new one on each request.\r\n\r\nThe place where my idea gets awkward is how does the returned observable terminate.  The requests `Observable<Long>` isn't going to terminate so the transform author is going to have to find some way to have an inner observable complete the outer observable.\r\n\r\n```java\r\n    public static <T> Observable<T> create(final Transformer<Long, T> requestsToValues) {\r\n        return create((subscriber) -> {\r\n                PublishSubject<Long> requestsSubject = PublishSubject.create();\r\n                t.setProducer(requestsSubject::onNext);\r\n                requestsToValues.call(requestsSubject).subscribe(subscriber);\r\n            }\r\n        });\r\n    }\r\n```\r\n\r\nHere is a proof of concept of what it may look like to use it.\r\n\r\n```java\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Observable.createAsync(requests ->\r\n            getCount().flatMap(max ->\r\n                requests\r\n                    .scan(State::new, State::next)\r\n                    .takeWhile(state -> state.start < max)\r\n                    .concatMap(Main::getPage)));\r\n    }\r\n\r\n    private static class State {\r\n        long start;\r\n        long amount;\r\n\r\n        public State next(long n) {\r\n            State next = new State();\r\n            next.start = this.start + amount;\r\n            next.amount = n;\r\n            return next;\r\n        }\r\n    }\r\n\r\n    private static Observable<? extends Long> getCount() {\r\n        return null;\r\n    }\r\n\r\n    private static Observable<? extends String> getPage(State request) {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nanyway if you think this API has any merit we should probably move this off to another issue or PR."
p7314
aS'@benjchristensen Can you comment?'
p7315
aS'I find this API valuable, and it allows batch size and request(n) size to differ, which is exactly what is needed and wanted. Here is example code showing this behavior:\r\n\r\n```java\r\npackage scratch;\r\n\r\nimport rx.Observable;\r\nimport rx.Observer;\r\nimport rx.observables.AsyncOnSubscribe;\r\nimport rx.schedulers.Schedulers;\r\n\r\npublic class TestAsyncOnSubscribe {\r\n\r\n  public static void main(String[] args) {\r\n\r\n    Observable<String> obs = Observable.create(new AsyncOnSubscribe<Integer, String>() {\r\n\r\n      final int batchSize = 50;\r\n\r\n      @Override\r\n      protected Integer generateState() {\r\n        return 1;\r\n      }\r\n\r\n      @Override\r\n      protected Integer\r\n          next(Integer state, long requested, Observer<Observable<? extends String>> observer) {\r\n        System.out.println("new async batch starting at: " + state + " requested: " + requested);\r\n        observer.onNext(Observable\r\n            .range(state, batchSize)\r\n            .doOnSubscribe(() -> System.out.println("Subscribing to batch starting at: " + state))\r\n            .map(i -> "value_" + i)\r\n            .subscribeOn(Schedulers.computation()));\r\n        return state + batchSize;\r\n      }\r\n\r\n    });\r\n\r\n    //obs.take(15).toBlocking().forEach(v -> System.out.println(v));\r\n\r\n    obs.observeOn(Schedulers.computation()).take(250).toBlocking().forEach(\r\n        v -> System.out.println(v));\r\n\r\n  }\r\n}\r\n```\r\n\r\nHere is the output:\r\n\r\n```\r\nnew async batch starting at: 1 requested: 128\r\nSubscribing to batch starting at: 1\r\nvalue_1\r\nvalue_2\r\nvalue_3\r\nvalue_4\r\nvalue_5\r\nvalue_6\r\nvalue_7\r\nvalue_8\r\nvalue_9\r\nvalue_10\r\nvalue_11\r\nvalue_12\r\nvalue_13\r\nvalue_14\r\nvalue_15\r\nvalue_16\r\nvalue_17\r\nvalue_18\r\nvalue_19\r\nvalue_20\r\nvalue_21\r\nvalue_22\r\nvalue_23\r\nvalue_24\r\nvalue_25\r\nvalue_26\r\nvalue_27\r\nnew async batch starting at: 51 requested: 78\r\nvalue_28\r\nvalue_29\r\nvalue_30\r\nvalue_31\r\nvalue_32\r\nvalue_33\r\nvalue_34\r\nvalue_35\r\nvalue_36\r\nvalue_37\r\nvalue_38\r\nvalue_39\r\nvalue_40\r\nvalue_41\r\nvalue_42\r\nvalue_43\r\nvalue_44\r\nvalue_45\r\nvalue_46\r\nvalue_47\r\nvalue_48\r\nvalue_49\r\nvalue_50\r\nSubscribing to batch starting at: 51\r\nvalue_51\r\nvalue_52\r\nvalue_53\r\nvalue_54\r\nvalue_55\r\nvalue_56\r\nvalue_57\r\nvalue_58\r\nvalue_59\r\nvalue_60\r\nvalue_61\r\nvalue_62\r\nvalue_63\r\nvalue_64\r\nvalue_65\r\nvalue_66\r\nvalue_67\r\nnew async batch starting at: 101 requested: 28\r\nvalue_68\r\nvalue_69\r\nvalue_70\r\nvalue_71\r\nvalue_72\r\nvalue_73\r\nvalue_74\r\nvalue_75\r\nvalue_76\r\nvalue_77\r\nvalue_78\r\nvalue_79\r\nvalue_80\r\nvalue_81\r\nvalue_82\r\nvalue_83\r\nSubscribing to batch starting at: 101\r\nvalue_84\r\nvalue_85\r\nvalue_86\r\nvalue_87\r\nvalue_88\r\nvalue_89\r\nvalue_90\r\nvalue_91\r\nvalue_92\r\nvalue_93\r\nvalue_94\r\nvalue_95\r\nvalue_96\r\nnew async batch starting at: 151 requested: 96\r\nvalue_97\r\nvalue_98\r\nvalue_99\r\nvalue_100\r\nvalue_101\r\nvalue_102\r\nvalue_103\r\nvalue_104\r\nvalue_105\r\nvalue_106\r\nvalue_107\r\nvalue_108\r\nvalue_109\r\nvalue_110\r\nvalue_111\r\nvalue_112\r\nvalue_113\r\nvalue_114\r\nvalue_115\r\nvalue_116\r\nvalue_117\r\nvalue_118\r\nvalue_119\r\nvalue_120\r\nvalue_121\r\nvalue_122\r\nvalue_123\r\nvalue_124\r\nvalue_125\r\nvalue_126\r\nvalue_127\r\nvalue_128\r\nvalue_129\r\nvalue_130\r\nvalue_131\r\nvalue_132\r\nvalue_133\r\nvalue_134\r\nvalue_135\r\nvalue_136\r\nvalue_137\r\nvalue_138\r\nvalue_139\r\nvalue_140\r\nvalue_141\r\nvalue_142\r\nvalue_143\r\nvalue_144\r\nvalue_145\r\nvalue_146\r\nvalue_147\r\nvalue_148\r\nvalue_149\r\nvalue_150\r\nSubscribing to batch starting at: 151\r\nnew async batch starting at: 201 requested: 46\r\nvalue_151\r\nvalue_152\r\nvalue_153\r\nvalue_154\r\nvalue_155\r\nvalue_156\r\nvalue_157\r\nvalue_158\r\nvalue_159\r\nvalue_160\r\nvalue_161\r\nvalue_162\r\nvalue_163\r\nvalue_164\r\nvalue_165\r\nvalue_166\r\nvalue_167\r\nvalue_168\r\nvalue_169\r\nvalue_170\r\nvalue_171\r\nvalue_172\r\nvalue_173\r\nvalue_174\r\nvalue_175\r\nvalue_176\r\nvalue_177\r\nvalue_178\r\nvalue_179\r\nvalue_180\r\nvalue_181\r\nvalue_182\r\nvalue_183\r\nvalue_184\r\nvalue_185\r\nvalue_186\r\nvalue_187\r\nvalue_188\r\nvalue_189\r\nvalue_190\r\nvalue_191\r\nvalue_192\r\nnew async batch starting at: 251 requested: 96\r\nvalue_193\r\nvalue_194\r\nvalue_195\r\nvalue_196\r\nvalue_197\r\nvalue_198\r\nvalue_199\r\nvalue_200\r\nSubscribing to batch starting at: 201\r\nSubscribing to batch starting at: 251\r\nnew async batch starting at: 301 requested: 46\r\nvalue_201\r\nvalue_202\r\nvalue_203\r\nvalue_204\r\nvalue_205\r\nvalue_206\r\nvalue_207\r\nvalue_208\r\nvalue_209\r\nvalue_210\r\nvalue_211\r\nvalue_212\r\nvalue_213\r\nvalue_214\r\nvalue_215\r\nvalue_216\r\nvalue_217\r\nvalue_218\r\nvalue_219\r\nvalue_220\r\nvalue_221\r\nvalue_222\r\nvalue_223\r\nvalue_224\r\nvalue_225\r\nvalue_226\r\nvalue_227\r\nSubscribing to batch starting at: 301\r\nvalue_228\r\nvalue_229\r\nvalue_230\r\nvalue_231\r\nvalue_232\r\nvalue_233\r\nvalue_234\r\nvalue_235\r\nvalue_236\r\nvalue_237\r\nvalue_238\r\nvalue_239\r\nvalue_240\r\nvalue_241\r\nvalue_242\r\nvalue_243\r\nvalue_244\r\nvalue_245\r\nvalue_246\r\nvalue_247\r\nvalue_248\r\nvalue_249\r\nvalue_250\r\n```\r\n\r\n\r\nI\'m using 250 even though it makes the output longer so that it is beyond the 128 that `observeOn` defaults to. \r\n\r\nNote how this correctly does the following:\r\n\r\n- batch size is at 50 so each async call is a fixed size as per the developer requirements\r\n- request(n) size is independent of batch size (128, and different over time as observeOn invokes it)\r\n- it correctly shows when `next` is invoked to create a new batch, but it doesn\'t actually subscribe to it until the correct time when the previous batch is completed, thereby decoupling the request(n) and batch production\r\n- it guarantees ordering across async batches\r\n\r\nOne possible change would be to not invoke `next` eagerly whenever `request(n)` occurs, though in some use cases that may be wanted. I can argue it both ways. \r\n\r\nAnd if LONG.MAX_VALUE is requested? It correctly behaves by executing batches of 50 repeatedly after each other:\r\n\r\n```\r\nnew async batch starting at: 60051 requested: 9223372036854715757\r\nSubscribing to batch starting at: 60051\r\n```\r\n\r\nThis API is useful and very powerful when composing `request(n)` against a batched data source, and I support promoting it to `@Beta`.'
p7316
aS"What if page responded has different size than requested? Like request(50) is called, and you decided to load data in a chunks of 20 items, but your RPC call responds with 10.\r\nReal life use case is that you're reading a dataset with offset/limit set on the internal SQL query, while grouping it outside. It means that every page has <=N values, and you can define the dataset is over only when page is zero.\r\n\r\nThis is one of the reasons I created https://github.com/Rabajaba/rx-utils PortionObservable. (may be it will be helpful here)"
p7317
aS"Why does it return 10 when 20 is requested? If it's because it's the end, that's fine, as it should then cause termination. If the server can't actually respond deterministically, then it seems that using offset/limit is the wrong approach. \r\n\r\nYour PortionObservable solution looks interesting. I browsed the code briefly, but not enough to grok the tradeoffs. Would be interesting for you and @stealthcode to compare solutions and see if AsyncOnSubscribe should change in any way before promoting it. "
p7318
aS'@benjchristensen Thanks for the feedback. \r\nIt return 10 and not 20 with a real life use case. Imagine a large RDMS table, where you should read data grouped on some field. If you do select... `group by <some set of colums> limit 100 offset 100` you may not hit indexes, because "group by" clause may be complex (like having several fields from different tables). That\'s why it\'s much more faster to do limit/offset initial datable, and do grouping after - causing lesser amounts of data to be responded.\r\nThis use case is pretty rare, but it took me few months, to properly code it in PortionObservable, that\'s why I\'m asking whether this use case will be fulfilled anyhow.\r\n\r\n@stealthcode One feature I didn\'t yet implemented: parallel load of pages, while results would be still emitted in a correct order. Use case: you have external slow API, which responds data not faster than 10 seconds, no matter to your request parameters. Doing parallel pages loading will significantly improve performance.\r\n\r\nLet me create another implementation of PortionObservable using AsyncOnSubscribe and see whether my unit tests would still complete.'
p7319
aS"Ben's use case, which disregards the request amount in the generator callback, can be written with `SyncOnSubscribe` and `flatMap` limited to `maxConcurrency == 1`:\r\n\r\n```java\r\nObservable.create(\r\n    SyncOnSubscribe.<...>createSingleState(\r\n        () -> 1, \r\n        (s, o) -> o.onNext(Observable.range(1, 50))\r\n    )\r\n)\r\n.flatMap(o -> o, 1)\r\n.subscribe(...)\r\n```\r\n\r\nFlatmap will request 1 and request another only after the previously generated inner Observable completes.\r\n\r\nIf you want to pre-generate these sources, use `concatMap`. If you want to prefetch the inner sources as well but keep their total order, use `concatMapEager`. Also apply `observeOn`, `doOnNext`, etc. as you see fit."
p7320
aS"If I remember correctly, API promotion happened after voting before the minor version has changed (0.x -> 1.0, 1.0 -> 1.1). \r\n\r\nIf you wish, we can vote now @ReactiveX/rxjava-committers or just before 1.2. If voted for now, after a rebase, this can be merged and won't cause you problems with the ongoing cleanup work. If this can wait till 1.2, you can close the PR."
p7321
aS"Closing as not mergeable. If you have further input on the issue, don't hesitate to reopen this issue or post a new one."
p7322
asg14
S'stealthcode:upgrade-asynconsubscribe'
p7323
sbsI3818
(iPull
Pull
p7324
(dp7325
g3
S'Part of #3816'
p7326
sg5
S'1.x fromcallable() @experimental -> @beta'
p7327
sg7
(lp7328
S'API promotion'
p7329
asg10
I3818
sg11
(lp7330
S'`testQueueFullEmitsErrorWithVaryingBufferSize` is an unreliable test I already fixed in #3795\r\n\r\n:+1:'
p7331
aS':+1: '
p7332
aS'\xf0\x9f\x91\x8d '
p7333
asg14
S'artem-zinnatullin:fromCallable-no-more-experimental'
p7334
sbsI3820
(iPull
Pull
p7335
(dp7336
g3
S'Discussions found here: https://github.com/ReactiveX/RxJava/issues/2297'
p7337
sg5
S'making rxplugins reset() public'
p7338
sg7
(lp7339
S'Enhancement'
p7340
asg10
I3820
sg11
(lp7341
S':+1:'
p7342
aS"Based on the discussion, it's definitely helpful, but also dangerous.\r\nCould you add a comment indicating that it's dangerous?\r\n\r\nOtherwise \xf0\x9f\x91\x8d "
p7343
aS'Yeah, same concern about dangerous that this method may add. \r\n\r\nIt looks like an easy way to do testing but in multithreaded environment (integrational or functional tests for example) it may break a lot of things in "random" manner.\r\n\r\n@stevegury @akarnokd let\'s also mark it as `@Experimental` so we\'ll be able to remove it if community will have more issues than benefits?'
p7344
aS'Yeah, good idea for the `@Experimental` flag'
p7345
aS'Thanks for the feedback @stevegury , @artem-zinnatullin. Just added the `@experimental` tag. Comments in the PR + commit message. '
p7346
aS"Please add a javadoc block, and explicitly mention that resetting the plugins is dangerous/unsafe during application runtime (I suspect most people won't check the link), keep the link at the end."
p7347
aS'@shivangshah Friendly ping. Please update with Javadoc.'
p7348
aS'@JakeWharton yes .. thanks for the reminder this totally slipped my mind .. Let me do it now .. '
p7349
aS'@JakeWharton : Done ! Let me know if we need to add anything else as a part of the documentation. '
p7350
aS':+1:'
p7351
aS'\xf0\x9f\x91\x8d '
p7352
asg14
S'shivangshah:rxplugins-reset-public'
p7353
sbsI3821
(iPull
Pull
p7354
(dp7355
g3
S'`assertUnsubscribed()` exists, `assertSubscribed()` was missing'
p7356
sg5
S'1.x: add assertsubscribed() to testsubscriber analog to assertunsubscribed()'
p7357
sg7
(lp7358
S'Enhancement'
p7359
asg10
I3821
sg11
(lp7360
S'The name is confusing (a freshly created `TestSubscriber` will return false for `isUnsubscribed()` even if it never was used with `Observable.subscribe()`) and not sure we need a `!isUnsubscribed()` assertion.'
p7361
aS'I had the feeling it is missing when I wrote this test:\r\n\r\n```java\r\n        final RxProperty<String> prop = new RxProperty<>("myValue");\r\n        final Observable<String> observable = prop.asObservable();\r\n\r\n        final TestSubscriber<String> testSubscriber1 = new TestSubscriber<>();\r\n        final Subscription subscription1 = observable.subscribe(testSubscriber1);\r\n\r\n        final TestSubscriber<String> testSubscriber2 = new TestSubscriber<>();\r\n        observable.subscribe(testSubscriber2);\r\n\r\n        subscription1.unsubscribe();\r\n        prop.set("otherValue");\r\n\r\n        testSubscriber1.assertValue("myValue");\r\n        testSubscriber1.assertUnsubscribed();\r\n\r\n        testSubscriber2.assertValues("myValue", "otherValue");\r\n        assertThat(testSubscriber2.isUnsubscribed()).isFalse(); // looks bad\r\n        testSubscriber2.assertSubscribed(); // what I really want\r\n```'
p7362
aS'I also feel `assertSubscribed` is confusing. It sounds like verifying if `Observable.subscribe is called`. But the meaning in your PR is `Observable.subscribe is called but unsubscribe is not yet called`.'
p7363
aS'I would be ok with it if naming could be agreed upon. Maybe something more to the effect of `assertIsSubscribed()` and `assertIsUnsubscribed()` for clarity? Agreed with @zsxwing that the naming sounds ambiguous in the original suggestion.'
p7364
aS"> `assertThat(testSubscriber2.isUnsubscribed()).isFalse(); // looks bad`\r\n\r\nI think `assertNoTerminalEvent()` is for this use case. I'm leaning towards closing this PR."
p7365
aS"Thanks for the contribution. I'm closing this due to inactivity, plus I think this change would cause confusion. If you have a different suggestion, please don't hesitate to post another PR."
p7366
aS'agree'
p7367
asg14
S'passsy:add_assert_subscribed'
p7368
sbsI3822
(iPull
Pull
p7369
(dp7370
g3
S'Possible solution to #3749.'
p7371
sg5
S'1.x: make defensive copy of the properties in rxjavaplugins'
p7372
sg7
(lp7373
S'Bug'
p7374
asg10
I3822
sg11
(lp7375
S':+1: '
p7376
asg14
S'akarnokd:PluginCopyProperties'
p7377
sbsI3823
(iPull
Pull
p7378
(dp7379
g3
S'Fixes the bug reported in #3435.'
p7380
sg5
S'1.x: doafterterminate handle if action throws'
p7381
sg7
(lp7382
S'Bug'
p7383
asg10
I3823
sg11
(lp7384
S':+1:'
p7385
aS':+1: '
p7386
asg14
S'akarnokd:DoAfterTerminateFix'
p7387
sbsI3824
(iPull
Pull
p7388
(dp7389
g3
S'The type inference of javac in JDK 9 has been changed in an incompatible way, marking many generics-related code invalid.\r\n\r\nThe most common problems:\r\n\r\n  - The inference calculates `Observable<? extends T>` but from its perspective, a call to `subscribe()` with a `Subscriber<T>` is ambiguous as it matches `subscribe(Observer<? super T>)` and `subscribe(Subscriber<? super T>)`. Somehow, the more specific class is not considered as a valid choice. Downcasting to `Observable<T>` fixes the error.\r\n  - `A<?>[]` no longer accepts `A<Ti>` elements, requires the use of raw types to get around\r\n\r\nThe tests appear to compile fine.\r\n\r\nNote that I couldn\'t find a working IDE for JDK 9 and had to revert to command line trickery:\r\n\r\n```\r\n@echo off\r\n\r\ndir /s /B src\\main\\java\\rx\\*.java > sources.txt\r\ndir /s /B src\\test\\java\\rx\\*.java >> sources.txt\r\n\r\n"c:\\program files\\java\\jdk-9\\bin\\javac.exe" -cp C:/temp/rx/junit.jar;C:/temp/rx/mockito.jar @sources.txt \r\n\r\ndel sources.txt\r\n```'
p7390
sg5
S'1.x: javac 9 compatibility fixes'
p7391
sg7
(lp7392
S'Build'
p7393
asg10
I3824
sg11
(lp7394
S':+1: \r\n\r\n// @akarnokd maybe report "incorrect" behavior of JDK9 compiler to OpenJDK issue tracker?'
p7395
aS'There were reports such as [this](https://bugs.openjdk.java.net/browse/JDK-8075793?focusedCommentId=13865850) before. Bottom line is that they are fine with their breaking change.'
p7396
aS':+1: '
p7397
asg14
S'akarnokd:JDK9Fixes'
p7398
sbsI3825
(iPull
Pull
p7399
(dp7400
g3
S'The test had some non-deterministic machinery to trigger the failure.'
p7401
sg5
S'1.x: fix observeontest. testqueuefullemitserrorwithvaryingbuffersize'
p7402
sg7
(lp7403
S'Test-Failures'
p7404
asg10
I3825
sg11
(lp7405
sg14
S'akarnokd:ObserveOnTestFix'
p7406
sbsI3826
(iPull
Pull
p7407
(dp7408
g3
S'the docs of TestSubscriber.create(Subscriber) and TestSubscriber.create(Observer) got mixed up.\r\nI just swapped them.'
p7409
sg5
S'1.x: fix testsubscriber.create doc'
p7410
sg7
(lp7411
S'Cleanup'
p7412
asg10
I3826
sg11
(lp7413
S':+1: '
p7414
aS':+1:'
p7415
aS':+1: '
p7416
asg14
S'prt2121:pt/testSubscriber-doc'
p7417
sbsI3827
(iPull
Pull
p7418
(dp7419
g3
S"This is a minor simplification in `OperatorObserveOn` where a temporary variable was created to avoid unnecessary additional reads of what used to be the volatile field `error`.  The field was changed to be non-volatile a while back so the temporary variable is no longer required. \r\n\r\nI assume it would have very minor perf impact (I haven't run them).  "
p7420
sg5
S'simplify operatorobserveon now that error is a non-volatile field'
p7421
sg7
(lp7422
sg10
I3827
sg11
(lp7423
S'Why do you want to read fields multiple times? '
p7424
aS"It's not about performance, but code habits. By reading things into local variables, you establish a pattern that won't bite you with volatile variables later on."
p7425
aS'Plus, if the decision is made to clear the `error` field to avoid retention of the exception for too long, this would have to be reverted.'
p7426
aS"Fair enough, I'll close."
p7427
asg14
S'davidmoten:simplify-observe-on'
p7428
sbsI3828
(iPull
Pull
p7429
(dp7430
g3
S'`AsyncSubject` can trivially support backpressure when it emits a single item by setting the `SingleProducer` on the child `Subscriber` instead of calling `onNext` immediately.'
p7431
sg5
S'1.x: asyncsubject now supports backpressure'
p7432
sg7
(lp7433
S'Enhancement'
p7434
asg10
I3828
sg11
(lp7435
S':+1:'
p7436
asg14
S'akarnokd:AsyncSubjectBackpressure'
p7437
sbsI3829
(iPull
Pull
p7438
(dp7439
g3
S'Part of #3459, related to #3815.'
p7440
sg5
S'1.x: add system property for disabling usage of unsafe api'
p7441
sg7
(lp7442
S'Enhancement'
p7443
asg10
I3829
sg11
(lp7444
S':+1:'
p7445
aS':+1:'
p7446
aS':+1: '
p7447
asg14
S'artem-zinnatullin:unsafe-enable-disable-system-property'
p7448
sbsI3832
(iPull
Pull
p7449
(dp7450
g3
g57
sg5
S'testscheduler: fix race condition in queue'
p7451
sg7
(lp7452
sg10
I3832
sg11
(lp7453
S'TestScheduler is a synchronous Scheduler that has to run on a single thread and its main purpose is to force async operators to execute synchronously as well.\r\n\r\nIs there a reason you wanted this change?'
p7454
aS"Humm. This is the crash I was trying to fix, looked like a race but perhaps I'm using the testscheduler incorrectly somehow.\r\n\r\njava.lang.NullPointerException\r\n\tat rx.schedulers.TestScheduler$TimedAction.access$200(TestScheduler.java:37)\r\n\tat rx.schedulers.TestScheduler.triggerActions(TestScheduler.java:111)\r\n\tat rx.schedulers.TestScheduler.advanceTimeTo(TestScheduler.java:97)\r\n\tat rx.schedulers.TestScheduler.advanceTimeBy(TestScheduler.java:84)"
p7455
aS"My class under test is subscribing to the scheduler asynchronously, I guess you're saying TestScheduler wasn't designed to operate list this?\r\n\r\n  Observable.interval(mPollTimeMinutes, TimeUnit.MINUTES, mScheduler)\r\n                             .subscribeOn(Schedulers.newThread()).subscribe(v -> {\r\n                    getMyUpgrade();\r\n                }, v -> {\r\n                });"
p7456
aS"It won't work with regular schedulers, for example:\r\n\r\n```java\r\nObservable.interval(1, TimeUnit.MILLISECONDS) // <-- note: it uses the default computation() scheduler\r\n.observeOn(testScheduler)\r\n.subscribe();\r\n```\r\n\r\nis prone to concurrency issues.\r\n\r\nIf you use `TestScheduler`, it has to be applied everywhere."
p7457
aS"Thanks for helping - is this how it's intended to be used?\r\n\r\nObservable.interval(1, TimeUnit.MILLISECONDS, test ? testScheduler : Schedulers.computation())\r\n.observeOn(test ? testScheduler : Schedulers.newThread())\r\n.subscribe();"
p7458
aS'Yes.'
p7459
aS'Awesome, thanks.'
p7460
asg14
S'nerd2:1.x'
p7461
sbsI3834
(iPull
Pull
p7462
(dp7463
g3
S'https://github.com/ReactiveX/RxJava/issues/3785'
p7464
sg5
S'1.x: add testsinglesubscriber'
p7465
sg7
(lp7466
S'Enhancement'
p7467
asg10
I3834
sg11
(lp7468
sg14
S'prt2121:pt/testSingleSubscriber'
p7469
sbsI3836
(iPull
Pull
p7470
(dp7471
g3
S"This PR fixes the producer retention problem and backpressure problem in `switchMap`/`switchOnNext`.\r\n\r\nIn the original, when an inner source completed, its producer was still referenced after it. If there was no new inner source or the next inner source didn't set a new producer, the operator leaked the previous inner source's internals. The fix involves nulling out the producer field when the inner source completes (and is still the current one).\r\n\r\nThe original had an additional bug due to a race condition between the request arbitration and switching inner sources. In some cases, the switch didn't properly forward the remaining request amount to the new inner source, causing hangs. In some other cases, both the old and new inner sources were able to emit, causing overflow. The fix involves a new queue-drain loop with some emitter-loop help to work out the state transitions."
p7472
sg5
S'1.x: fix switchmap/switchonnext producer retention and backpressure'
p7473
sg7
(lp7474
S'Bug'
p7475
asg10
I3836
sg11
(lp7476
S'\xf0\x9f\x91\x8d '
p7477
asg14
S'akarnokd:SwitchMapRewrite1x'
p7478
sbsI3839
(iPull
Pull
p7479
(dp7480
g3
S"The counted and timed versions of `takeLast` had a concurrency bug which allowed concurrent emission from the underlying queue that holds onto the values till the upstream completes. When timed correctly, both an `onCompleted()` and a `request()` that went from 0 to n could enter the emit() method and break the internal state of the non-concurrent queue. Note that this queue doesn't have to be concurrent by nature because the operator can emit only *after* the upstream completes (`offer()` never runs concurrently with `poll()` unlike in `observeOn`).\r\n\r\nIn addition, the emission didn't immediately complete if the queue was emptied and requested == 0. In this operator, the fact that the queue became empty is the indicator of completion.\r\n\r\nBoth issues can be fixed with the `postCompleteXXX` mechanics in `BackpressureUtils`.\r\n\r\nSince the operator has to store `null` values, the `postCompleteXXX` had to be extended with an exit transform overload to allow converting the `NotificationLite` values back to regular `T`/`null`."
p7481
sg5
S'1.x: fix takelast() backpressure'
p7482
sg7
(lp7483
S'Bug'
p7484
asg10
I3839
sg11
(lp7485
S'\xf0\x9f\x91\x8d '
p7486
asg14
S'akarnokd:TakeLastBackpressurFix'
p7487
sbsI3840
(iPull
Pull
p7488
(dp7489
g3
S"There were two tiny problems with the rewritten `concatMap` operator, mainly due to copy-paste error:\r\n\r\n   - When a scalar was concatenated, the `active` field was not set and thus the next prefetched source overwrote it.\r\n   - When the scalar was set on the arbiter, its custom producer didn't check for n > 0 zero causing instant emission always. Generally Producer.request(0) is allowed and should be no-op (unlike RS).\r\n   - When an empty() was encountered as a last source, the it didn't trigger the check for completion afterwards."
p7490
sg5
S'1.x: fix concatmap scalar/empty source behavior'
p7491
sg7
(lp7492
S'Bug'
p7493
asg10
I3840
sg11
(lp7494
S':+1: '
p7495
aS'\xf0\x9f\x91\x8d '
p7496
asg14
S'akarnokd:ConcatMapFix'
p7497
sbsI3841
(iPull
Pull
p7498
(dp7499
g3
g57
sg5
S'2.x'
p7500
sg7
(lp7501
sg10
I3841
sg11
(lp7502
S'Whoa, this PR is wrongly configured. What was the intent?'
p7503
aS"I'm closing this as being unintelligible."
p7504
asg14
S'ReactiveX:2.x'
p7505
sbsI3842
(iPull
Pull
p7506
(dp7507
g3
S"I noticed that when a worker built from `Schedulers.from(Executors.newFixedThread(1))` is unsubscribed the use of a `CompositeSubscription` to track task subscriptions means that the tasks may be unsubscribed in any old order (`CompositeSubscription` holds its subscriptions in a `HashSet`).  This means that if the worker is given task A and task B then the race can prevent A from running but allow B to run! I've included a unit test in this PR that demos it. Fails every time on my machine on the first loop.\r\n\r\nThis  PR is really for discussion about the problem and possible fixes.\r\n\r\nI have included a possible fix which is to track overall subscription using a volatile boolean and check that boolean before running any task. If this was considered the way to go some further simplification would take place in the operator (might not need to check individual task subscriptions).\r\n\r\nI haven't checked other schedulers for this sort of problem yet.\r\n\r\n\r\n"
p7508
sg5
S'1.x: improve executorscheduler worker unsubscription'
p7509
sg7
(lp7510
S'Cleanup'
p7511
aS'Enhancement'
p7512
asg10
I3842
sg11
(lp7513
S'Do you have a real case that the order does matter? I think this affects all CompositeSubscription usages.\r\n'
p7514
aS'I see this as an eager cancellation matter than a race. There is no need for the flag but just check tasks.isUnsubscribed() before and run some cleanup:\r\n\r\n```java\r\ndo {\r\n    if (tasks.isUnsubscribed()) {\r\n        queue.clear();\r\n        return;\r\n    }\r\n\r\n    ScheduledAction sa = queue.poll();\r\n\r\n    if (tasks.isUnsubscribed()) {\r\n        queue.clear();\r\n        return;\r\n    }\r\n    if (!sa.isUnsubscribed()) {\r\n        sa.run();\r\n    }\r\n} while (wip.decrementAndGet() != 0);\r\n    '
p7515
aS"@zsxwing I'm confusing the issue talking about `CompositeSubscription`, it's really about subscription management in `ExecutorScheduler`. I don't have a problem with `CompositeSubscription` in general.\r\n\r\n@akarnokd thanks, that looks good, I'll amend the PR.  It's interesting you don't classify it as a bug but I guess we haven't documented our expectations of `Scheduler`s in this area. Do you think `Scheduler.unsubscribe()` should offer stronger guarantees, similar to the guarantee offered by `ExecutorService.shutdownNow()`?\r\n\r\n>Attempts to stop all actively executing tasks, halts the\r\nprocessing of waiting tasks, and returns a list of the tasks\r\nthat were awaiting execution.\r\n\r\nThe relevant bit I suppose is *halts the processing of waiting tasks*.\r\n"
p7516
aS'@davidmoten  Gotcha. `EventLoopWorker` has the same issue. You can try `Schedulers.computation()` or `Schedulers.io()` to reproduce it in your test.'
p7517
aS'@zsxwing `computation()` and `io()` both fail too, thanks. '
p7518
aS"@akarnokd Don't you think that second check of `tasks.isUnsubscribed()` in your snippet is overkill? Can I remove?\r\n\r\nI'm also wondering if `unsubscribe()` can look like this:\r\n\r\n```java\r\n    @Override\r\n    public void unsubscribe() {\r\n        queue.clear();\r\n        tasks.unsubscribe();\r\n    }\r\n```\r\n\r\n and then `run()` would be: \r\n```java\r\n        @Override\r\n        public void run() {\r\n            do {\r\n                if (tasks.isUnsubscribed()) {\r\n                    return;\r\n                }\r\n\r\n                ScheduledAction sa = queue.poll();\r\n                if (sa == null) {\r\n                    return;\r\n                }\r\n                if (!sa.isUnsubscribed()) {\r\n                    sa.run();\r\n                }\r\n            } while (wip.decrementAndGet() != 0);\r\n        }\r\n```"
p7519
aS"No need for stronger guarantees.\r\n\r\nThat `unsubscribe` you are suggesting delays the `tasks.unsubscribe()` and the queue could still be in use; swap the two lines. In addition, you'd still need a clear in the drain loop because it could be still scheduled with a non-empty queue."
p7520
aS'Thanks @akarnokd . In terms of guarantees I was going to suggest that the javadoc of `Scheduler` at the class level be supplemented with a statement similar to that of `ExecutorService.shutdownNow()` once all schedulers had been enhanced like this PR.'
p7521
aS'Updated PR, squashed commits.'
p7522
aS':+1:'
p7523
aS':+1: '
p7524
aS'@davidmoten mind thinking about how to fix `EventLoopWorker`? :)'
p7525
aS"@zsxwing sure, I'll have a look at `EventLoopWorker`\r\n\r\nI think there is an outstanding race with this PR:\r\n\r\n```java\r\nif (!sa.isUnsubscribed()) {\r\n    sa.run();\r\n}\r\n```\r\nmight have to be:\r\n```java\r\nif (!tasks.isUnsubscribed()) {\r\n    sa.run();\r\n}\r\n```\r\nI'll have a look a bit later today and I'll submit another PR if needed.\r\n"
p7526
aS'`if (!sa.isUnsubscribed()) {` is necessary.  `sa` may be unsubscribed by the user.'
p7527
aS'Yep I just noticed that myself, ta.'
p7528
aS'@zsxwing I think it should look like this:\r\n\r\n```java\r\n        @Override\r\n        public void run() {\r\n            do {\r\n                if (tasks.isUnsubscribed()) {\r\n                    queue.clear();\r\n                    return;\r\n                }\r\n                ScheduledAction sa = queue.poll();\r\n                if (sa == null) {\r\n                    return;\r\n                }\r\n                if (!sa.isUnsubscribed()) {\r\n                \tif (!tasks.isUnsubscribed()) {\r\n                        sa.run();\r\n                \t} else {\r\n                \t\tqueue.clear();\r\n                \t\treturn;\r\n                \t}\r\n                }\r\n            } while (wip.decrementAndGet() != 0);\r\n        }\r\n```'
p7529
asg14
S'davidmoten:scheduler-unsub-order'
p7530
sbsI3845
(iPull
Pull
p7531
(dp7532
g3
S"The serial subscription in the `delaySubscription(Observable)` operator was not chained properly and thus an unsubscription before any events by the other didn't prevent the subscription to the main source.\r\n\r\nReported in #3844"
p7533
sg5
S'1.x: fix delaysubscription(observable) unsubscription before triggered'
p7534
sg7
(lp7535
S'Bug'
p7536
asg10
I3845
sg11
(lp7537
S'\xf0\x9f\x91\x8d '
p7538
asg14
S'akarnokd:DelaySubscriptionFix'
p7539
sbsI3846
(iPull
Pull
p7540
(dp7541
g3
S'Update to the CHANGES.md file.\r\n\r\n(Without the flatMap and replay perf enhancements.)'
p7542
sg5
S'1.x: release 1.1.3 changes.md update'
p7543
sg7
(lp7544
S'Information'
p7545
asg10
I3846
sg11
(lp7546
S':+1: for release with this content'
p7547
aS'\xf0\x9f\x91\x8d '
p7548
aS':+1: '
p7549
asg14
S'akarnokd:Release_1_1_3_changes'
p7550
sbsI3848
(iPull
Pull
p7551
(dp7552
g3
S'This PR factors out many anonymous inner classes into named classes and moves them outside `Observable`.\r\n\r\nThis cleanup makes the `Observable` more compact and helps debugging by showing more meaningful names in stacktraces.'
p7553
sg5
S'1.x: deanonymize observable inner classes'
p7554
sg7
(lp7555
S'Cleanup'
p7556
asg10
I3848
sg11
(lp7557
S'Great change. Observable class is a beast so readability and stacktrace improvements are always a :+1:'
p7558
aS'Thanks @JakeWharton ! Updated PR based on your suggestions.'
p7559
aS'\xf0\x9f\x91\x8d '
p7560
asg14
S'akarnokd:ObservableNoAnonym'
p7561
sbsI3849
(iPull
Pull
p7562
(dp7563
g3
g57
sg5
S'remove unused local.'
p7564
sg7
(lp7565
S'Cleanup'
p7566
asg10
I3849
sg11
(lp7567
S':+1:'
p7568
aS':+1: '
p7569
asg14
S'JakeWharton:jw/unused-local'
p7570
sbsI3853
(iPull
Pull
p7571
(dp7572
g3
S'This PR adds a perf class to measure the difference between `concatMap()` and `concatMapIterable()` to support performance work\r\n\r\n[Results](https://gist.github.com/akarnokd/86f5507ba4dec6a19fdf5b4bf7d7578f) on my machine (i7 4770K, Windows 7 x64, Java 8u77):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14477915/8206a302-0111-11e6-82dd-d0e3cf70b8b8.png)\r\n'
p7573
sg5
S'1.x: concatmap vs concatmapiterable perf'
p7574
sg7
(lp7575
S'Performance'
p7576
asg10
I3853
sg11
(lp7577
sg14
S'akarnokd:ConcatMapIterablePerf'
p7578
sbsI3856
(iPull
Pull
p7579
(dp7580
g3
S"Unlike other hooks, the `RxJavaSchedulersHook` has no access to the real `Scheduler` instances in order to do wrapping/delegation. With these factory methods, a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulers.\r\n\r\nFor Android this wrapping/delegation use-case is important for UI testing. We have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when they're empty. This is easy to do currently, but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under test.\r\n\r\nThese three methods are referenced in #3724, and I think providing the defaults is useful as well as eventually adding overloads which take `ThreadFactory` instances for each."
p7581
sg5
S'provide factories for creating the default scheduler instances.'
p7582
sg7
(lp7583
S'Enhancement'
p7584
asg10
I3856
sg11
(lp7585
S"Please correct me if I'm wrong but looks like as soon as you access one of the new methods, `static final Schedulers.INSTANCE` will be instantiated which will make impossible to use `RxJavaSchedulersHook` as you described. Have you checked described use case? Maybe add such tests as example if possible?\r\n\r\n>We have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when they're empty.\r\n\r\nJust wanted to say for those who may find this PR later: empty/non-empty state of schedulers is not 100% source of truth for ui tests, you may have some background or time related (periodic/etc) code that does not affect the ui directly and may even freeze tests."
p7586
aS"You are accessing the methods from the hook which was called from the static initializer of this class on first reference to `Schedulers.io()` or the like. I'll add a test."
p7587
aS'Yup, but there is still potential problem if somebody will try to create schedulers using these methods outside of the hook, for example in `@BeforeClass`/etc or probably even just for non-test needs -> may result in hours of trying to understand why hook is not overriding schedulers\xe2\x80\xa6\r\n\r\nMaybe move these methods to `RxJavaSchedulersHook`?'
p7588
aS'That prevents package scoped methods from being used in the factory.'
p7589
aS'>That prevents package scoped methods from being used in the factory.\r\n\r\nWe can move schedulers to `internal.schedulers` to "defend" from that (otherwise somebody can always use reflection to break package scope) and make constructors public.\r\n\r\nIdeal solution would be to return schedulers in `RxJavaSchedulersHook` by default instead of returning `null` like it does now, so calling `super.getSomeScheduler()` will give original instance that you can wrap/etc as you wish. Though, we\'ll have to handle `null` as default too.\r\n\r\n// sorry, I\'m very tired and want to sleep, so I may come to wrong conclusions.'
p7590
aS'The factories were moved to the hook.'
p7591
aS':+1:'
p7592
aS":+1: now, but let me ask again, what about this:\r\n\r\n>Ideal solution would be to return schedulers in `RxJavaSchedulersHook` by default instead of returning `null` like it does now, so calling `super.getSomeScheduler()` will give original instance that you can wrap/etc as you wish. Though, we'll have to handle `null` as default too.\r\n\r\nNo need for new methods, no need to fight with instantiation order and package scope visibility. Yes, user won't be able to instantiate new scheduler of required type outside of the hook, but it's not possible at the moment, so nobody loses nothing."
p7593
aS'\xf0\x9f\x91\x8d '
p7594
asg14
S'JakeWharton:jw/scheduler-factories'
p7595
sbsI3862
(iPull
Pull
p7596
(dp7597
g3
S"The `from(Iterable)` ignored non-fatal exceptions thrown by the `Iterable` and `Iterator`.\r\n\r\nApart from wrapping the calls into `try-catch`, the overal emission algorithm has been changed:\r\n\r\n  - It calls `hasNext` only once for each available value. Since the subscribe() checks for an outright empty `Iterable`, the drain loop runs only if it wasn't empty and does another `hasNext` check immediately to complete immediately if possible.\r\n  - It uses what I call a fast-flow algorithm to avoid decrementing the requested amount (this) if there were more requests issued during the emission."
p7598
sg5
S'1.x: fix from(iterable) error handling of iterable/iterator'
p7599
sg7
(lp7600
S'Bug'
p7601
asg10
I3862
sg11
(lp7602
S'\xf0\x9f\x91\x8d '
p7603
aS'L93 no longer needs parameter `n`:\r\n```java\r\nvoid slowpath(long n) {\r\n```'
p7604
aS':+1:  once last comment dealt with'
p7605
aS'Actually, it should be using `n`. Fixed.'
p7606
aS'Yep I see, nice.'
p7607
aS'\xf0\x9f\x91\x8d '
p7608
asg14
S'akarnokd:FromIterableErrorHandling'
p7609
sbsI3864
(iPull
Pull
p7610
(dp7611
g3
S"This PR reduces the overhead of `concatMapIterable`/`flatMapIterable` by not wrapping them into `Observable.from` sources but handling the generated `Iterable`s directly.\r\n\r\nSince `Iterable`s are inherently synchronous, there is no difference between the two operators that now use the common underlying operator (i.e., flatMap can't chose a different source because it can't tell if an `Iterable` source is not ready or not; `hasNext()` is for indicating completion, not temporary lack of data).\r\n\r\nBenchmark (i7 4790, Window 7 x64, Java 8u77):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14599483/e3c72978-0557-11e6-8a3e-833381399646.png)\r\n\r\n`Iterable-M` is the current master, `Plain` is using `concatMap(Observable::from)` as a reference.\r\n\r\nThe `count=1` cases are bit slower because there is no good way of detecting if an `Iterable` holds only a single element, unlike with `just()`, and have to instantiate the full infrastructure even for a single element.\r\n\r\nThe same table using the master as baseline:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/14599552/5258f7e0-0558-11e6-8d1d-4eacca60805b.png)\r\n\r\n"
p7612
sg5
S'1.x: optimize concatmapiterable/flatmapiterable'
p7613
sg7
(lp7614
S'Performance'
p7615
asg10
I3864
sg11
(lp7616
S'Other that my previous comment, \xf0\x9f\x91\x8d.'
p7617
asg14
S'akarnokd:FlattenIterable1x'
p7618
sbsI3866
(iPull
Pull
p7619
(dp7620
g3
S'Closes #3865.'
p7621
sg5
S'1.x: add single.tocompletable()'
p7622
sg7
(lp7623
S'Enhancement'
p7624
asg10
I3866
sg11
(lp7625
S':+1:'
p7626
aS'\xf0\x9f\x91\x8d '
p7627
aS"Seems GitHub doesn't add the PR description to the commit message automatically when squashing a PR. I added it manually."
p7628
asg14
S'artem-zinnatullin:1.x-single-to-completable'
p7629
sbsI3867
(iPull
Pull
p7630
(dp7631
g3
S"As per discussion in #3842, there was an outstanding possibility that unsubscription of a `Worker` would not cancel all tasks waiting in the queue. This PR addresses that possibility. I attempted to provoke the condition in a unit test but didn't manage it. Nethertheless I think this change completes the protection desired in #3842.\r\n\r\nI do have mixed feelings about the possible double calling of `queue.clear()` (once in the `run()` method and once in the `unsubscribe()` method. Any preferences?\r\n\r\n"
p7632
sg5
S'1.x: improve executorscheduler worker unsubscription some more'
p7633
sg7
(lp7634
S'Cleanup'
p7635
asg10
I3867
sg11
(lp7636
S'> there was an outstanding possibility that unsubscription of a Worker would not cancel all tasks waiting in the queue.\r\n\r\nTasks are tracked in a separate structure for cancellation, which always happens but maybe not that eagerly and not the same order they were submitted.\r\n\r\nYou should also keep the original up-front `clear()` part.\r\n'
p7637
aS"Thanks @akarnokd, I've updated the PR and squashed commits."
p7638
aS':+1:'
p7639
aS'> there was an outstanding possibility that unsubscription of a Worker would not cancel all tasks waiting in the queue\r\n\r\n@davidmoten Could you explain how this will happen and why adding `if (!tasks.isUnsubscribed()) {` could help? Even if `tasks.isUnsubscribed` returns `false`, it may become `true` after you just check it.\r\n'
p7640
aS"@zsxwing sure, you're right that that is possible but that scenario doesn't worry me in that I just consider that as not being able to stop work in progress as opposed to work that is queued. So I guess that's all that is happening here because the check of `tasks.isUnsubscribed()` at the start of of the loop is all that's required to prevent the issue that I was worried about in #3842. This additional check just firms up not running queued work that has been cancelled.\r\n\r\n\r\n"
p7641
aS'> This additional check just firms up not running queued work that has been cancelled.\r\n\r\nSounds like adding `isUnsubscribed` in an operator?'
p7642
aS'Yep, analagous to that'
p7643
aS':+1:'
p7644
asg14
S'davidmoten:unsub-scheduled-tasks'
p7645
sbsI3868
(iPull
Pull
p7646
(dp7647
g3
S"There is an unsubscribe race condition similar to #3842 in `CachedThreadScheduler.EventLoopWorker` and `EventLoopsScheduler.EventLoopWorker`. Image the following execution order:\r\n\r\n| Execution Order  | thread 1 | thread 2 |\r\n| ------------- | ------------- | ------------- |\r\n| 1 |  | submit task A |\r\n| 2 |  | submit task B |\r\n| 3 | unsubscribe Worker  |  |\r\n| 4 | unsubscribe task A |   |\r\n| 5 | | task A won't run as it's unsubscribed |\r\n| 6 | | run task B |\r\n| 7 | unsubscribe task B |  |\r\n\r\nSo task B will run but its previous task A will be skipped.\r\n\r\nThis PR adds a check before running an action and moves `workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace` to `AbstractSchedulerConcurrencyTests` to test all concurrent schedulers.\r\n\r\n"
p7648
sg5
S'fix an unsubscribe race in eventloopworker'
p7649
sg7
(lp7650
S'Cleanup'
p7651
asg10
I3868
sg11
(lp7652
S':+1:'
p7653
aS':+1:  Thanks @zsxwing '
p7654
asg14
S'zsxwing:event-loop-race'
p7655
sbsI3871
(iPull
Pull
p7656
(dp7657
g3
S'A continuation of some work done in #3856 of removing uninstantiable types from the public API (via deprecation).'
p7658
sg5
S'deprecate remaining public scheduler types.'
p7659
sg7
(lp7660
S'Cleanup'
p7661
asg10
I3871
sg11
(lp7662
S':+1:'
p7663
aS':+1:'
p7664
asg14
S'JakeWharton:jw/deprecate-public-schedulers'
p7665
sbsI3874
(iPull
Pull
p7666
(dp7667
g3
S'as per title'
p7668
sg5
S'remove unused field basecapacity from onbackpressurebuffer'
p7669
sg7
(lp7670
S'Cleanup'
p7671
asg10
I3874
sg11
(lp7672
S':+1:'
p7673
aS'\xf0\x9f\x91\x8d '
p7674
asg14
S'davidmoten:remove-unused-field-on-backpressure-buffer'
p7675
sbsI3879
(iPull
Pull
p7676
(dp7677
g3
S'This allows hooks to create schedulers whose threads have different priorities.\r\n\r\nCloses #3724.'
p7678
sg5
S'expose scheduler factories which accept thread factories.'
p7679
sg7
(lp7680
S'Enhancement'
p7681
asg10
I3879
sg11
(lp7682
S'\xf0\x9f\x91\x8d '
p7683
aS'Thanks!\n\nOn Fri, Apr 29, 2016 at 2:13 PM David Karnok <notifications@github.com>\nwrote:\n\n> Merged #3879 <https://github.com/ReactiveX/RxJava/pull/3879>.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3879#event-646033852>\n>\n'
p7684
asg14
S'JakeWharton:jw/thread-factory-scheduler-factories'
p7685
sbsI3880
(iPull
Pull
p7686
(dp7687
g3
S'Otherwise you have to manually print/debug values if test failed.'
p7688
sg5
S"1.x: testsubscriber/testobserver print values if number of items doesn't match"
p7689
sg7
(lp7690
S'Enhancement'
p7691
aS'Test'
p7692
asg10
I3880
sg11
(lp7693
S':+1:'
p7694
aS'\xf0\x9f\x91\x8d '
p7695
aS'\xf0\x9f\x91\x8d '
p7696
asg14
S'artem-zinnatullin:1.x-test-subscriber-assert-value-tostring'
p7697
sbsI3883
(iPull
Pull
p7698
(dp7699
g3
S"Resolves #3881.\r\n\r\nThe bug is caused by the impedance mismatch between `Observable`'s `Subscriber` and `Single`'s `SingleSubscriber`. The original code called `onNext()` which immediately signalled an `onSuccess` but also caused an unsubscription, preventing a delivery of `onCompleted()` in the inner Single.\r\n\r\nThe fix keeps `onSuccess`/`onError` rails intact  throughout the chain."
p7700
sg5
S'1.x: fix multiple chained single.doafterterminate not calling actions'
p7701
sg7
(lp7702
S'Bug'
p7703
asg10
I3883
sg11
(lp7704
S'\xf0\x9f\x91\x8d '
p7705
asg14
S'akarnokd:SingleDoAfterTerminateFix'
p7706
sbsI3886
(iPull
Pull
p7707
(dp7708
g3
S"Otherwise, if there's an error in onCompleted, the exception is\r\nswallowed and unreported.\r\n\r\nFixes #3885"
p7709
sg5
S'throwiffatal() now throws oncompletedfailedexception'
p7710
sg7
(lp7711
S'Bug'
p7712
asg10
I3886
sg11
(lp7713
S':+1:'
p7714
aS'\xf0\x9f\x91\x8d '
p7715
asg14
S'dlew:dlew/propagate-on-completed-exception'
p7716
sbsI3887
(iPull
Pull
p7717
(dp7718
g3
S"This change will make sure if the `Subscriber` has unsubscribed, the non-fatal error is sent to the plugin error handler at least. I.e.,\r\n\r\n```java\r\nObservable.create(s -> {\r\n    s.onError(new RuntimeException());\r\n    throw new IllegalArgumentException();\r\n}).subscribe();\r\n```\r\n\r\nIn addition, if the original code threw `RuntimeException` in case the `subscriber.onError()` threw. I've changed this to `OnErrorFailedException` but not sure the original type was intentional or just left out."
p7719
sg5
S'have undeliverable errors on subscribe() sent to plugin error handler.'
p7720
sg7
(lp7721
S'Cleanup'
p7722
asg10
I3887
sg11
(lp7723
S'\xf0\x9f\x91\x8d '
p7724
asg14
S'akarnokd:OnSubscribeNoSwallow'
p7725
sbsI3888
(iPull
Pull
p7726
(dp7727
g3
S"By default, operators have final link to their child Subscriber and they never clear the upstream's Producer. If the end subscriber is referenced, for example in a `CompositeSubscription`, that keeps an entire chain of objects alive and can cause memory leaks (a use case common on Android).\r\n\r\nThis proposed operator detaches the structures and nulls out references if the sequence terminates or the downstream unsubscribes - at the cost of atomic operations and mandatory volatile read for each onNext(). \r\n\r\nI know this issue has been brought up several times, but instead of adding the overhead to every operator, I propose an operator that can be applied when the developer really needs it (i.e., could be part of the usual compose(subscribeOn/observeOn) setup).\r\n\r\nOn the implementation side, this requires deferred `Producer`/`request()` handling because requests from downstream may appear even before the upstream calls `setProducer` (if at all) and we can't use the base class' behavior for this."
p7728
sg5
S'1.x: proposal: onterminatedetach - detach upstream/downstream for gc'
p7729
sg7
(lp7730
S'Enhancement'
p7731
asg10
I3888
sg11
(lp7732
S'\xf0\x9f\x91\x8d '
p7733
aS"Doesn't proper `Subscription` nulling and/or `CompositionException` clearing solve this? I haven't seen a lot of people complaining about leaks recently. Is something motivating this?"
p7734
aS"What I've seen in Android examples, is that you add to a composite on creation and clear() the composite on destroy, but haven't seen the subscriber removed from the composite when it finishes normally but still while the activity is active."
p7735
aS"Ah, I see. And that leaks the observable itself, not the activity.\n\nOn Tue, May 3, 2016 at 4:18 PM David Karnok <notifications@github.com>\nwrote:\n\n> What I've seen in Android examples, is that you add to a composite on\n> creation and clear() the composite on destroy, but haven't seen the\n> subscriber removed from the composite when it finishes normally but still\n> while the activity is active.\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3888#issuecomment-216652329>\n>\n"
p7736
asg14
S'akarnokd:OnTerminateDetach'
p7737
sbsI3890
(iPull
Pull
p7738
(dp7739
g3
S'In current master, when the function in `map` or `filter` crashes, the error is propagated but the upstream is not immediately unsubscribed but expected to happen eventually due to some other operator or `SafeSubscriber`.\r\n\r\nThe fix, and also the restructuring of the unsubscription chain, makes sure the crash also unsubscribes immediately (unless a fatal one).\r\n\r\nRelated: [StackOverflow question](http://stackoverflow.com/questions/35343474/why-does-it-need-onbackpressure-here-for-click-events)'
p7740
sg5
S'1.x: map() and filter() should unsubscribe on crash eagerly'
p7741
sg7
(lp7742
S'Bug'
p7743
asg10
I3890
sg11
(lp7744
S'\xf0\x9f\x91\x8d '
p7745
asg14
S'akarnokd:MapFilterCrashHandling'
p7746
sbsI3893
(iPull
Pull
p7747
(dp7748
g3
S'The `from(Future)` operator was not refitted for backpressure.\r\n\r\nReported in: #3892.'
p7749
sg5
S'1.x: enable backpressure with from(future).'
p7750
sg7
(lp7751
S'Bug'
p7752
asg10
I3893
sg11
(lp7753
S'LGTM :+1:'
p7754
aS'\xf0\x9f\x91\x8d '
p7755
asg14
S'akarnokd:FromFutureBackpressureFix'
p7756
sbsI3895
(iPull
Pull
p7757
(dp7758
g3
S'Similar issue as in #3890.'
p7759
sg5
S'1.x: cast() should unsubscribe on crash eagerly'
p7760
sg7
(lp7761
S'Bug'
p7762
asg10
I3895
sg11
(lp7763
S'LGTM :+1:'
p7764
aS'\xf0\x9f\x91\x8d '
p7765
asg14
S'akarnokd:CastEagerUnsubscribeFix'
p7766
sbsI3896
(iPull
Pull
p7767
(dp7768
g3
S'Found another one.'
p7769
sg5
S'1.x: operatormappair should unsubscribe on crash eagerly'
p7770
sg7
(lp7771
S'Bug'
p7772
asg10
I3896
sg11
(lp7773
S'\xf0\x9f\x91\x8d '
p7774
asg14
S'akarnokd:MapPairEagerUnsubscribeFix'
p7775
sbsI3897
(iPull
Pull
p7776
(dp7777
g3
S"`OperatorSwitchTest.switchAsyncHeavily` sometimes times out. Could be due to Travis or an actual bug which doesn't deliver the last few elements."
p7778
sg5
S'1.x: give more time to operatorswitchtest.switchasyncheavily'
p7779
sg7
(lp7780
S'Test-Failures'
p7781
asg10
I3897
sg11
(lp7782
sg14
S'akarnokd:OperatorSwitchTestFix'
p7783
sbsI3898
(iPull
Pull
p7784
(dp7785
g3
S'This PR simply adds missing license header to main and test files.'
p7786
sg5
S'1.x: add missing license headers'
p7787
sg7
(lp7788
S'Cleanup'
p7789
asg10
I3898
sg11
(lp7790
S'\xf0\x9f\x91\x8d '
p7791
aS'Was always curious if this really required if repo has `LICENSE` file and it referenced in the `pom.xml`?'
p7792
aS"99% of people copy/pasting code from this project aren't going to look at\neither those things to retain the correct license.\n\nOn Fri, Apr 29, 2016 at 4:04 PM Artem Zinnatullin <notifications@github.com>\nwrote:\n\n> Was always curious if this really required if repo has LICENSE file and\n> it referenced in the pom.xml?\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3898#issuecomment-215865907>\n>\n"
p7793
asg14
S'akarnokd:LicenseHeaders'
p7794
sbsI3899
(iPull
Pull
p7795
(dp7796
g3
S'Many test frameworks throw an `AssertionError` to indicate a failure.  For example, mock objects created using EasyMock will throw an `AssertionError` immediately if the mock receives an unexpected method call.  When using `onErrorResumeNext()`, this error may be silently swallowed.  And since this type of exception is not a part of normal program flow (it is only used in tests), it should not be up to the application to handle these errors specifically.\r\n\r\nAccording to the Java documentation on throwables, I would actually expect RxJava to treat all `Error` subclasses as fatal, but perhaps there are other reasons not to do so.  My first thought was to register a global error handling plugin which would rethrow `AssertionError`s, but `onErrorResumeNext()` prevents the error from reaching the plugin.  '
p7797
sg5
S'assertionerror should be treated as fatal'
p7798
sg7
(lp7799
S'Feature-Request'
p7800
asg10
I3899
sg11
(lp7801
S"I'm not sure about this, I certainly never had the need for it but let's hear the others' thoughts on this."
p7802
aS"I have thrown AE in tests or used fail() which throws AE. While I've never\ncoupled these with error-resuming operators, I have a hard time seeing when\nthis would ever be an error you would want to recover from in normal\noperation.\n\nOn Sun, May 1, 2016, 3:07 PM David Karnok <notifications@github.com> wrote:\n\n> I'm not sure about this, I certainly never had the need for it but let's\n> hear the others' thoughts on this.\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3899#issuecomment-216064774>\n>\n"
p7803
aS"Are there any other errors that skip past onError or any of the catching operators? Seems like it would be kind of unexpected behavior and a little too much of a special case. In the use case described, I would suggest that you should be using RxJava's test utility classes to check the error events as part of your test."
p7804
aS"Same thoughts as @hzsweers ^.\r\n\r\n>When using onErrorResumeNext(), this error may be silently swallowed.\r\n\r\n@brianvanderwal It means that your test is not good enough and it probably won't detect other kind of errors from the upstream too.\r\n\r\n// I'd suggest to read about mutation testing: [1](https://en.wikipedia.org/wiki/Mutation_testing), [2](http://www.tutorialspoint.com/software_testing_dictionary/mutation_testing.htm) and see how you can improve your tests. TL;TR: any change of the code under the test should break the tests (ideally)."
p7805
aS"Thank you for your contribution but it seems the other participants didn't see any compelling case to support its inclusion into the library."
p7806
asg14
S'brianvanderwal:assertion-error-as-fatal'
p7807
sbsI3901
(iPull
Pull
p7808
(dp7809
g3
S'Handling the case of 0 requests with the same code style as SingleDelayedProducer and SingleProducer.'
p7810
sg5
S'small code style consistency fix for weaksingleproducer'
p7811
sg7
(lp7812
S'Cleanup'
p7813
asg10
I3901
sg11
(lp7814
S':+1:'
p7815
aS'\xf0\x9f\x91\x8d '
p7816
asg14
S'rzsombor:SingleProducerConsistency'
p7817
sbsI3903
(iPull
Pull
p7818
(dp7819
g3
S'\xe2\x80\xa6delay value\r\n\r\n- Remove redundant outer conditional.\r\n- Skip calling into System.currentTimeMillis(), which could potentially result in different values.'
p7820
sg5
S'spare a few redundant calls in sleepingaction around determining the \xe2\x80\xa6'
p7821
sg7
(lp7822
S'Cleanup'
p7823
asg10
I3903
sg11
(lp7824
S':+1:'
p7825
aS'\xf0\x9f\x91\x8d '
p7826
asg14
S'rzsombor:SleepingActionPolish'
p7827
sbsI3904
(iPull
Pull
p7828
(dp7829
g3
S'Fixed https://github.com/ReactiveX/RxJava/issues/3860'
p7830
sg5
S'1.x: fix completable swallows onerrornotimplementedexception'
p7831
sg7
(lp7832
S'Bug'
p7833
asg10
I3904
sg11
(lp7834
S"Looks good, :+1:\r\n\r\nI wonder, shouldn't we switch to `Exceptions.throwIfFatal` as in `Observable`? Of course, the whole `Completable` needs rechecking.\r\n"
p7835
aS'Updated to use `Exceptions.throwIfFatal`. Thanks!'
p7836
aS'\xf0\x9f\x91\x8d '
p7837
asg14
S'prt2121:pt/completable-exception'
p7838
sbsI3905
(iPull
Pull
p7839
(dp7840
g3
S'Issue #3892 is a goldmine for missing backpressure problems. This PR fixes the case when `singleOrDefault` encounters an empty source and has to emit some default value. Fixed via setting the `SingleProducer` on the child on termination.'
p7841
sg5
S'1.x: fix singleordefault() backpressure if source is empty'
p7842
sg7
(lp7843
S'Bug'
p7844
asg10
I3905
sg11
(lp7845
S'\xf0\x9f\x91\x8d '
p7846
aS'\xf0\x9f\x91\x8d '
p7847
asg14
S'akarnokd:SingleOrDefaultFix'
p7848
sbsI3906
(iPull
Pull
p7849
(dp7850
g3
S'Release 1.1.4 CHANGES.md update.\r\n\r\n:+1: for the release.'
p7851
sg5
S'1.x: release 1.1.4 changes.md update'
p7852
sg7
(lp7853
S'Information'
p7854
asg10
I3906
sg11
(lp7855
S'\xf0\x9f\x91\x8d '
p7856
aS'\xf0\x9f\x91\x8d '
p7857
aS'Excellent, @stevegury would you do the release?'
p7858
aS"@akarnokd I've published the release, Travis is currently building/publishing the jars..."
p7859
aS'Fantastic!'
p7860
asg14
S'akarnokd:Release_1_1_4'
p7861
sbsI3907
(iPull
Pull
p7862
(dp7863
g3
S'See #3877'
p7864
sg5
S'1.x: doonunsubscribe javadoc clarifications'
p7865
sg7
(lp7866
S'Documentation'
p7867
asg10
I3907
sg11
(lp7868
S'\xf0\x9f\x91\x8d '
p7869
asg14
S'akarnokd:DocDoOnUnsubscribe'
p7870
sbsI3909
(iPull
Pull
p7871
(dp7872
g3
S'See #3774'
p7873
sg5
S'1.x: single.retrywhen javadoc clarifications'
p7874
sg7
(lp7875
S'Documentation'
p7876
asg10
I3909
sg11
(lp7877
S'\xf0\x9f\x91\x8d '
p7878
asg14
S'akarnokd:DocSingleRetryWhen'
p7879
sbsI3912
(iPull
Pull
p7880
(dp7881
g3
S"Forgot that `Subscriber` defaults to requesting `Long.MAX_VALUE` unless suppressed and apparently there was no verification of filter's backpressure behavior; the two existing tests didn't really check for the delivery pattern."
p7882
sg5
S'1.x: fix filter() default-requesting and thus going unbounded'
p7883
sg7
(lp7884
S'Bug'
p7885
asg10
I3912
sg11
(lp7886
S'\xf0\x9f\x91\x8d \r\nI think the bug is serious enough that we should release a new version ASAP.'
p7887
aS'Agree. Not sure if you can release with 1.1.4.1 or you have to  roll to 1.1.5.'
p7888
aS'Does `map` need the same change?'
p7889
aS"No. Map doesn't set the Producer on `this` so no default-request happens."
p7890
aS"Ah, that's right. I think I made the same mistake on the first PR, too.\n\nOn Thu, May 5, 2016 at 3:32 PM David Karnok <notifications@github.com>\nwrote:\n\n> No. Map doesn't set the Producer on this so no default-request happens.\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3912#issuecomment-217253734>\n>\n"
p7891
asg14
S'akarnokd:FilterDefaultRequestFix'
p7892
sbsI3913
(iPull
Pull
p7893
(dp7894
g3
S'Emergency release.'
p7895
sg5
S'release 1.1.5 changes.md update'
p7896
sg7
(lp7897
S'Information'
p7898
asg10
I3913
sg11
(lp7899
S'\xf0\x9f\x91\x8d '
p7900
aS'\xf0\x9f\x91\x8d '
p7901
aS'@stevegury If the version number is right, feel free to merge & release.'
p7902
aS'\xf0\x9f\x91\x8d It feels ok to me.\r\nMerging/Releasing now.'
p7903
asg14
S'akarnokd:Release_1.1.5'
p7904
sbsI3918
(iPull
Pull
p7905
(dp7906
g3
S'In addition, the behavior of time-limited mode has been changed. Late subscribers will now skip stale data.\r\n\r\nRelated issue: #3917'
p7907
sg5
S'1.x: replaysubject now supports backpressure'
p7908
sg7
(lp7909
S'Enhancement'
p7910
asg10
I3918
sg11
(lp7911
S"Would it be possible to split this up into a couple commits? GitHub won't show the diff in its current state and says to view locally"
p7912
aS"No, ReplaySubject has simply too many expected features: unbounded, size bounded and size+time bounded modes, each adding 100s of lines. It is fully rewritten so comparison wouldn't do much help."
p7913
aS'This makes it very difficult to review. What do you propose @akarnokd ?'
p7914
aS'Check out and have your IDE compare this PR against the master version.'
p7915
aS'> Late subscribers will now skip stale data.\r\n\r\nDoes this mean that subscribers were not skipping stale data? This change sounds like fixing a bug?'
p7916
aS'In the original, once the source completed, the current elements in the bounded buffers were frozen in time. Late subscribers would get all the data, including those who have become older by the time these subscriptions happen. Same was true for live, but inactive replays where a subscriber would start from an outdated element. These were expected by the unit tests but #3917 expected only fresh data.'
p7917
aS'\xf0\x9f\x91\x8d '
p7918
asg14
S'akarnokd:ReplayBackpressure'
p7919
sbsI3919
(iPull
Pull
p7920
(dp7921
g3
S'Somehow, Subscriber.NOT_SET was object `Long` instead of primitive `long`.'
p7922
sg5
S'1.x: subscriber.not_set long -> long, saves an unboxing per instance'
p7923
sg7
(lp7924
S'Cleanup'
p7925
asg10
I3919
sg11
(lp7926
S'A tiny win, but a win no less :+1:'
p7927
aS'It bothered me for some time now, seeing the Long there. This is not just about the unboxing, but remove the indication that `NOT_SET` can be null for meaningful reasons.'
p7928
aS'\xf0\x9f\x91\x8d '
p7929
aS'Looks like my bad from last year, thanks :+1: '
p7930
aS'\xf0\x9f\x91\x8d '
p7931
asg14
S'akarnokd:SubscriberCleanup0509'
p7932
sbsI3922
(iPull
Pull
p7933
(dp7934
g3
S"The operator `using` didn't call the resource cleanup code if the `observableFactory.call()` code crashed. In addition, a non-eager using didn't call the resource cleanup if one subscribed with `unsafeSubscribe` or the subscription to the generated `Observable` crashed.\r\n\r\nRelated: #3921 "
p7935
sg5
S'1.x: fix using() resource cleanup when factory throws or being non-eager'
p7936
sg7
(lp7937
S'Bug'
p7938
asg10
I3922
sg11
(lp7939
S'Changes applied.'
p7940
aS'\xf0\x9f\x91\x8d '
p7941
asg14
S'akarnokd:UsingCleanupFix'
p7942
sbsI3924
(iPull
Pull
p7943
(dp7944
g3
S"This PR fixed the `ObjectPool` dependency on the `Schedulers.computation()` which can be replaced via plugin hooks causing unexpected and long sleeps (i.e., when `computation()` is replaced by `immediate()`).\r\n\r\nSee #3923.\r\n\r\nI'd also consider removing the `RxRingBuffer` entirely."
p7945
sg5
S'1.x: fix rxringbuffer-pool depending on the computation scheduler'
p7946
sg7
(lp7947
S'Bug'
p7948
asg10
I3924
sg11
(lp7949
S'\xf0\x9f\x91\x8d '
p7950
asg14
S'akarnokd:ObjectPoolDifferentScheduler'
p7951
sbsI3928
(iPull
Pull
p7952
(dp7953
g3
S'Closes #3925'
p7954
sg5
S'update rxjava javadoc to  1.1.5'
p7955
sg7
(lp7956
S'Documentation'
p7957
asg10
I3928
sg11
(lp7958
S':+1:'
p7959
aS'\xf0\x9f\x91\x8d '
p7960
aS'\xf0\x9f\x91\x8d'
p7961
asg14
S'zsxwing:gh-pages'
p7962
sbsI3931
(iPull
Pull
p7963
(dp7964
g3
S"I have a long running stream using `groupBy` that over time will accumulate 10s of millions of keys. If I can specify an evicting map to `groupBy` then I'll be able to keep it down to ~10,000 keys. \r\n\r\nThis PR supports this use case and could be used with Guava's `CacheBuilder` like this:\r\n\r\n```java\r\nFunc1<Action1<K>, Map<K, Object>> mapFactory = \r\n    action -> CacheBuilder.newBuilder()\r\n              .maximumSize(1000)\r\n              .expireAfterAccess(12, TimeUnit.HOUR)\r\n              .removalListener(key -> action.call(key))\r\n              .<K, Object> build().asMap();\r\nobservable\r\n    .groupBy(keySelector, elementSelector, mapFactory)\r\n    ...\r\n```\r\nI'll enhance this PR with more unit tests if this looks a good direction.\r\n\r\n"
p7965
sg5
S'1.x: add groupby overload with evictingmapfactory'
p7966
sg7
(lp7967
S'Feature-Request'
p7968
asg10
I3931
sg11
(lp7969
S"This PR may be useful still but I've realised I can get what I want with more control using `defer`, `PublishSubject` and `takeUntil` on the grouped observables.\r\n"
p7970
aS"Yes, you can `timeout` or `takeUntil` on each group to get it removed from the internal map. I'm not sure about the map factory because we need something concurrently modifiable."
p7971
aS"Yep you're right but I put that requirement in the javadoc and the example\nmap from cachebuilder is threadsafe.\n\nOn Fri, 13 May 2016 03:24 David Karnok <notifications@github.com> wrote:\n\n> Yes, you can timeout or takeUntil on each group to get it removed from\n> the internal map. I'm not sure about the map factory because we need\n> something concurrently modifiable.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3931#issuecomment-218826638>\n>\n"
p7972
aS"I'm happy using `timeout` with my use case now but I'll leave this PR up for a few days to see if anyone else has a use case."
p7973
aS"@akarnokd  I think there's a catch with `timeout`. I'm using it as below but I believe I could lose an emission due to timeout cutting in on say the processing occurring in `operator1`:\r\n\r\n```java\r\no.groupBy(...)\r\n  .flatMap(\r\n    g -> \r\n        g.operator1()\r\n         .timeout(10, TimeUnit.SECONDS)\r\n         .onErrorResumeNext(completeOnTimeoutException))\r\n)\r\n```\r\nI guess I'll have to use `timeout` or `timer` in a different way so it doesn't shortcut an in-flight emission. Have I got this right?"
p7974
aS"Yes, there  is  chance values get dropped when an emission and group unsubscribe happens at the same time. You can't know the value made it or not. If your value has its own lifecycle, that's going to be a problem. Rx is not designed for that and it's the next challenge of the field - especially since reactive-io is full of life-cycle managed buffers."
p7975
aS">If your value has its own lifecycle, that's going to be a problem. Rx is not designed for that and it's the next challenge of the field - especially since reactive-io is full of life-cycle managed buffers.\r\n\r\nYour absolutely right that my use case has some special lifecycle that I'm trying to manage with `groupBy`. It's an event sourcing/cqrs  use case where emissions upstream of `groupBy` are persisted (you knew io was part of the scenario you perceptive fellow) and whenever a `groupBy` emitted `GroupedObservable` is subscribed to (or resubscribed to) the stream starts with the events already recorded for that key (read from disk) before processing the incoming event from upstream. \r\n\r\nIt does seem to me now that if I don't want to lose emissions for my use case (and want to keep the `groupBy` keys down in numbers) then I have to record information about groups upstream of `groupBy` and possibly modify the upstream to include some sort of keyed sentinel to tell the `GroupedObservable` to complete based on last access time for a key for instance. **OR** I just use the modified `groupBy` in this PR.\r\n\r\nI'll progress the implementation of the use case and see what else turns up.\r\n"
p7976
aS'If you want to pursue this further, please rebase it.'
p7977
aS"Yep I'd like to pursue this one. This PR is not great to put in an external library because it is so coupled to the groupBy implementation and its tests. I'll fix the API and I realize I may also need to put try-catch on `mapFactory.call` and `map.get` and `map.put` calls with some specific error handling (catching fatal errors, calling onError etc). I'll have a look at it.\r\n\r\nI'd also like to use the Guava `CacheBuilder` in unit tests. Can I add that test dependency?"
p7978
aS"I'm not against adding `testCompile` entries. Hopefully, Guava doesn't drag in too many other libraries."
p7979
aS"Guava only has a few optional dependencies that I wouldn't include and the current version 19.0 still supports java 6."
p7980
aS'Great!'
p7981
aS'## [Current coverage][cc-pull] is **80.32%**\n> Merging [#3931][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.06%**\n\n```diff\n@@                1.x      #3931   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16853    +32   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2561     +7   \n==========================================\n+ Hits          13500      13537    +37   \n+ Misses         2408       2402     -6   \n- Partials        913        914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...2e2bdb6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...2e2bdb65c7b67ec2aaa02636b3972f37947f34de\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/3931?src=pr'
p7982
aS':+1:'
p7983
aS'Oops, merged in a `build.gradle` change and broke this. Could you rebase again?\r\n\r\n/cc @artem-zinnatullin @stevegury for review on this'
p7984
aS"Thanks for the review @artem-zinnatullin.\r\nI've addressed your comments and there's one little addition which is the rename of one of the test methods to use camel case and a number to differentiate from `testGroupByBackpressure` (`testgroupByBackpressure` -> `testGroupByBackpressure2`)."
p7985
aS'\xf0\x9f\x91\x8d '
p7986
aS'I take it that being an API enhancement this PR still requires one more collaborator approval?'
p7987
aS'oh and thanks @stevegury for giving it a look!'
p7988
aS'Thanks @davidmoten for the contribution!'
p7989
asg14
S'davidmoten:groupby-eviction2'
p7990
sbsI3934
(iPull
Pull
p7991
(dp7992
g3
S"This PR adds extra information to assertion failure messages on `TestSubscriber` and `TestObserver`, indicating:\r\n\r\n  - the listener didn't receive any `onCompleted` calls, which is an indication of hung or skipping operation,\r\n  - there were errors received, indicating a failure in the event generation process.\r\n\r\nPreviously, if there was something wrong with the sequence, the order and type of assertions were mostly unhelpful: if `assertValues` was first, the lack of values failure could hide a revealing onError call. If the `assertNoErrors()` was first, the error is visible but no way of knowing how far the sequence got.\r\n\r\nNow, it is generally okay to use `assertValues` first, which along the difference, will print the lack of completion and the number of exceptions received, plus, the `AssertionError` will have its cause initialized to the actual or composited exception. The message format thus changes:\r\n\r\n```\r\noriginal assertion message with details (0 completions) (+1 error)\r\n...\r\ncaused by\r\n...\r\n```\r\n\r\nThis extra information saved me a lot of time in 2.x and Rsc development.\r\n\r\nNote that this change doesn't make the `assertXXX`s also assert for completion or error at all. If the values match, but there is an additional error instead of completion, one has to assert that separately, just like now."
p7993
sg5
S'1.x: testsubscriber extra info on assertion failures'
p7994
sg7
(lp7995
S'Enhancement'
p7996
aS'Test'
p7997
asg10
I3934
sg11
(lp7998
S'This is great!'
p7999
aS'Added newline and plural/singular form.'
p8000
aS'\xf0\x9f\x91\x8d this is really awesome.'
p8001
asg14
S'akarnokd:TestSubscriberMoreDetails'
p8002
sbsI3935
(iPull
Pull
p8003
(dp8004
g3
S"I went through all the pending comments that weren't addressed."
p8005
sg5
S'clean-up of the 2.x design.md document'
p8006
sg7
(lp8007
S'Discussion'
p8008
aS'Documentation'
p8009
asg10
I3935
sg11
(lp8010
S'\xf0\x9f\x91\x8d '
p8011
aS':+1:\r\n\r\nDo you want me to write a distilled version of the operator-fusion in a follow-up PR?'
p8012
aS'I\'d also like to change the extension points:\r\n\r\nUnlike RxJava 1.x, 2.x base classes are abstract and stateless and generally no longer wrap an `OnSubscribe` callback - this saves allocation in assembly time without limiting the expressiveness. Operator methods and standard factories still live as final on the base classes. \r\n\r\nSince Java still doesn\'t have extension methods, "adding" more operators can only happen through helper methods such as `lift(C -> C)` and `compose(R -> P)` where `C` is the default consumer type (i.e., `rs.Subscriber`), `R` is the base type (i.e., `Flowable`) and `P` is the base interface (i.e., `rs.Publisher`). As before, the library itself may gain or lose standard operators and/or overloads through the same community process.\r\n\r\nIn concert, `create(OnSubscribe)` will not be available; standard operators extend the base types directly. The conversion of other RS-based libraries will happen through the `Flowable.wrap()` static method. \r\n\r\n(*The unfortunate effect of `create` in 1.x was the ignorance of the Observable contract and beginner\'s first choice as an entry point. We can\'t eliminate this path since `rs.Publisher` is a single method functional interface that can be implemented just as badly.*)\r\n\r\nTherefore, new standard factory methods will try to address the common entry point requirements: \r\n  - `create(SyncOnSubscribe)` to safe, synchronous generation of signals, one-by-one\r\n  - `create(AsyncOnSubscribe)` to batch-create signals based on request patterns (I\'m still not convinced)\r\n  - `create(SingleEmitter)` to relay a single value or error from other reactive sources (i.e., addListener callbacks)\r\n  -  `create(FlowEmitter)` to relay multiple values or error from multi-valued reactive-sources (i.e., button-clicks) while also give flow control options right there (buffer, drop, error, etc.).\r\n\r\nBy extending the base classes, operator implementations would loose the tracking/wrapping features of 1.x. To avoid this, the methods `subscribe(C)` will be final and operators have to implement a protected `subscribeActual` (or any other reasonable name).\r\n\r\n```java\r\n@Override\r\npublic final void subscribe(Subscriber<? super T> s) {\r\n   subscribeActual(hook.onSubscribe(s));\r\n} \r\n\r\nprotected abstract void subscribeActual(Subscriber<? super T> s);\r\n```\r\n\r\nAssembly-time hooks will be moved into the individual standard methods on the base types:\r\n\r\n```java\r\npublic final Flowable<R> map(Function<? super T, ? extends R> mapper) {\r\n    return hook.onAssembly(new FlowableMap<T, R>(this, mapper));\r\n}\r\n```'
p8013
aS'> "adding" more operators can only happen through helper methods\r\n\r\nI do not necessarily agree with this. Yes they provide a very easy way to lift in custom operators. However as I have shown with the `Consumable` API, the `Consumable<S2> Consumable<S1>#extend` method provides a way to switch context to a different kind of consumable. This can be used to isolate various different special case operators that someone can switch to as necessary for their use case. '
p8014
aS'Unless there are any controversial points, I would like to merge this as is.\r\n@akarnokd please add a little something about fusion.'
p8015
aS'#### Fusion\r\n\r\nOperator fusion exploits the declarative nature of building flows; the developer specifies the "what", "where" and "when", the library then tries to optimize the "how".\r\n\r\nThere are two main levels of operator fusion: *macro* and *micro*.\r\n\r\n##### Macro-fusion\r\n\r\nMacro fusion deals with the higher level view of the operators, their identity and their combination (mostly in the form of subsequence). This is partially an internal affair of the operators, triggered by the downstream operator and may work with several cases. Given an operator application pair `a().b()` where `a` could be a source or an intermediate operator itself, when the application of `b` happens in assembly time, the following can happen:\r\n\r\n  - `b` identifies `a` and decides to not apply itself. Example: `empty().flatMap()` is functionally a no-op\r\n  - `b` identifies `a` and decides to apply a different, conventional operator. Example: `just().subscribeOn()` is turned into `just().observeOn()`.\r\n  - `b` decides to apply a new custom operator, combining and inlining existing behavior. Example: `just().subscribeOn()` internally goes to `ScalarScheduledPublisher`.\r\n  - `a` is `b` and the two operator\'s parameter set can be combined into a single application. Example: `filter(p1).filter(p2)` combined into `filter(p1 && p2)`\r\n\r\nParticipating in the macro-fusion externally is possible by implementing a marker interface when extending `Flowable`. Two kinds of interfaces are available: \r\n\r\n  - `java.util.Callable`: the Java standard, throwing interface, indicating the single value has to be extracted in subscription time (or later).\r\n  - `ScalarCallable`: to indicate the single value can be safely extracted during assembly time and used/inlined in other operators:\r\n\r\n```java\r\ninterface ScalarCallable<T> extends java.util.Callable<T> {\r\n    @Override\r\n    T call();\r\n}\r\n```\r\n\r\n`ScalarCallable` is also `Callable` and thus its value can be extracted practically anytime. For convenience (and for sense), `ScalarCallable` overrides and hides the superclass\' `throws Exception` clause - throwing during assembly time is likely unreasonable for scalars.\r\n\r\nSince Reactive-Streams doesn\'t allow `null`s in the value flow, we have the opportunity to define `ScalarCallable`s and `Callable`s returning `null` should be considered as an empty source - allowing operators to dispatch on the type `Callable` first then branch on the nullness of `call()`.\r\n\r\nInteroperating with other libraries, at this level is possible. Reactor-Core uses the same pattern and the two libraries can work with each other\'s `Publisher+Callable` types. Unfortunately, this means subscription-time only fusion as `ScalarCallable`s live locally in each library.\r\n\r\n##### Micro-fusion\r\n\r\nMicro-fusion goes a step deeper and tries to reuse internal structures, mostly queues, in operator pairs, saving on allocation and sometimes on atomic operations. It\'s property is that, in a way, subverts the standard Reactive-Streams protocol between subsequent operators that both support fusion. However, from the outside world\'s view, they still work according to the RS protocol.\r\n\r\nCurrently, two main kinds of micro-fusion opportunities are available.\r\n\r\n###### 1) Conditional Subscriber\r\n\r\nThis extends the RS `Subscriber`interface with an extra method: `boolean tryOnNext(T value)` and can help avoiding small request amounts in case an operator didn\'t forward but dropped the value. The canonical use is for the `filter()` operator where if the predicate returns false, the operator has to request 1 from upstream (since the downstream doesn\'t know there was a value dropped and thus not request itself). Operators wanting to participate in this fusion have to implement and subscribe with an extended Subscriber interface:\r\n\r\n```java\r\ninterface ConditionalSubscriber<T> {\r\n   boolean tryOnNext(T value);\r\n}\r\n\r\n//...\r\n@Override\r\nprotected void subscribeActual(Subscriber<? super T> s) {\r\n    if (s instanceof ConditionalSubscriber) {\r\n        source.subscribe(new FilterConditionalSubscriber<>(s, predicate));\r\n    } else {\r\n        source.subscribe(new FilterRegularSubscriber<>(s, predicate));\r\n    }\r\n}\r\n```\r\n\r\n(Note that this may lead to extra case-implementations in operators that have some kind of queue-drain emission model.)\r\n\r\n###### 2) Queue-fusion\r\n\r\nThe second category is when two (or more) operators share the same underlying queue and each append activity at the exit point (i.e., poll()) of the queue. This can work in two modes: synchronous and asynchronous.\r\n\r\nIn synchronous mode, the elements of the sequence is already available (i.e., a fixed `range()` or `fromArray()`, or can be synchronously calculated in a pull fashion in `fromIterable`. In this mode, the requesting and regular onError-path is bypassed and is forbidden. Sources have to return null from `pull()` and false from `isEmpty()` if they have no more values and throw from these methods if they want to indicate an exceptional case.\r\n\r\nIn asynchronous mode, elements may become available at any time, therefore, `pull` returning null, as with regular queue-drain, is just the indication of temporary lack of source values. Completion and error still has to go through `onComplete` and `onError` as usual, requesting still happens as usual but when a value is available in the shared queue, it is indicated by an `onNext(null)` call. This can trigger a chain of `drain` calls without moving values in or out of different queues.\r\n\r\nIn both modes, `cancel` works and behaves as usual.\r\n\r\nSince this fusion mode is an optional extension, the mode switch has to be negotiated and the shared queue interface established. Operators already working with internal queues then can, mostly, keep their current `drain()` algorithm. Queue-fusion has its own interface and protocol built on top of the existing `onSubscribe`-`Subscription` rail:\r\n\r\n```java\r\ninterface QueueSubscription<T> implements Queue<T>, Subscription {\r\n    int NONE = 0;\r\n    int SYNC = 1;\r\n    int ASYNC = 2;\r\n    int ANY = SYNC | ASYNC;\r\n    int BOUNDARY = 4;\r\n\r\n    int requestFusion(int mode);\r\n}\r\n```\r\n\r\nFor performance, the mode is an integer bitflags setup, called early during subscription time, and allows negotiating the fusion mode. Usually, producers can do only one mode and consumers can do both mode. Because fused, intermediate operators attach logic (which is many times user-callback) to the exit point of the queue interface (poll()), it may change the computation location of those callbacks in an unwanted way. The flag `BOUNDARY` is added by consumers indicating that they will consume the queue over an async boundary. Intermediate operators, such as `map` and `filter` then can reject the fusion in such sequences.\r\n\r\nSince RxJava 2.x is still JDK 6 compatible, the `QueueSubscription` can\'t itself default unnecessary methods and implementations are required to throw `UnsupportedOperationException` for `Queue` methods other than the following:\r\n\r\n  - `poll()`\r\n  - `isEmpty()`\r\n  - `clear()`\r\n  - `size()`\r\n\r\nEven though other modern libraries also define this interface, they live in local packages and thus non-reusable without dragging in the whole library. Therefore, until externalized and standardized, cross-library micro-fusion won\'t happen.\r\n\r\nA consequence of the extension of the `onSubscribe`-`Subscription` rail is that intermediate operators are no longer allowed to pass an upstream `Subscription` directly to its downstream `Subscriber.onSubscribe`. Doing so is likely to have the fused sequence skip the operator completely, losing behavior or causing runtime exceptions. Since RS `Subscriber` is an interface, operators can simply implement both `Subscriber` and `Subscription` on themselves, delegating the `request` and `cancel` calls to the upstream and calling `child.onSubscribe(this)`.'
p8016
aS'It is to be noted that since Reactor 2.5 uses the fusion described above [1] [2], it would be interesting to envision a cross library fusion contract , as part of RS directly or separately. We already benefit from small cross-library optimization thanks to @akarnokd (the first of this kind,  scalar rx.Single to scalar reactor Mono).\r\n\r\n[1] A quick example with range : https://github.com/reactor/reactor-core/blob/master/src/main/java/reactor/core/publisher/FluxRange.java#L80\r\n[2] The core contract, without reactor noise : https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/flow/Fuseable.java'
p8017
aS'@stevegury do you want to include my text in this PR or merge it as is?'
p8018
aS':+1:'
p8019
aS"Thanks for merging this in @akarnokd.\r\nSorry for the lack of activity, I've been pretty busy lately on other topics."
p8020
asg14
S'stevegury:stevegury/2.x-design'
p8021
sbsI3936
(iPull
Pull
p8022
(dp8023
g3
S'Plus, the unsubscribe indirection has been inlined, making `State` implement `Subscription` directly (instead of `Action0` + `Subscriptions.create`).'
p8024
sg5
S'1.x: promote unicastsubject to be a standard+experimental subject'
p8025
sg7
(lp8026
S'API promotion'
p8027
asg10
I3936
sg11
(lp8028
S':+1:'
p8029
aS'\xf0\x9f\x91\x8d \r\n'
p8030
asg14
S'akarnokd:UnicastSubjectPromote'
p8031
sbsI3937
(iPull
Pull
p8032
(dp8033
g3
S'Watched @dlew presentation of the pit falls of debugging RxJava https://www.youtube.com/watch?v=QdmkXL7XikQ&feature=youtu.be&t=38m12s\r\n\r\nThis change is to create an exception when a thread based `Scheduler.Worker` is constructed and reused it for all subsequent scheduled actions to increase the readability of uncaught and fatal exceptions that bubble up to the schedulers but spread the cost out across many scheduled actions.\r\n\r\nA future improvement to spread the cost out even more, that I didn\'t want to do in the first attempt, would to create the exception when `Scheduler.io()` is called and reuse the exception across multiple `Worker`s.\r\n\r\nThe example from the presentation\r\n```\r\nimport rx.Observable;\r\nimport rx.schedulers.Schedulers;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        Observable.empty()\r\n                .first()\r\n                .subscribeOn(Schedulers.io())\r\n                .subscribe();\r\n\r\n        Thread.sleep(100);\r\n    }\r\n}\r\n```\r\n\r\nUsed to print this just this exception with no mention the Main class.\r\n```\r\nException in thread "RxIoScheduler-2" java.lang.IllegalStateException: Exception thrown on Scheduler.Worker thread. Add `onError` handling.\r\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:65)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: rx.exceptions.OnErrorNotImplementedException: Sequence contains no elements\r\n\tat rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction.call(InternalObservableUtils.java:374)\r\n\tat rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction.call(InternalObservableUtils.java:1)\r\n\tat rx.internal.util.ActionSubscriber.onError(ActionSubscriber.java:44)\r\n\tat rx.observers.SafeSubscriber._onError(SafeSubscriber.java:157)\r\n\tat rx.observers.SafeSubscriber.onError(SafeSubscriber.java:120)\r\n\tat rx.internal.operators.OperatorSubscribeOn$1$1.onError(OperatorSubscribeOn.java:59)\r\n\tat rx.internal.operators.OperatorSingle$ParentSubscriber.onCompleted(OperatorSingle.java:116)\r\n\tat rx.internal.operators.OperatorTake$1.onCompleted(OperatorTake.java:56)\r\n\tat rx.internal.operators.EmptyObservableHolder.call(EmptyObservableHolder.java:44)\r\n\tat rx.internal.operators.EmptyObservableHolder.call(EmptyObservableHolder.java:1)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:1)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\r\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:1)\r\n\tat rx.Observable.unsafeSubscribe(Observable.java:8460)\r\n\tat rx.internal.operators.OperatorSubscribeOn$1.call(OperatorSubscribeOn.java:94)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker$1.call(CachedThreadScheduler.java:222)\r\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:60)\r\n\t... 7 more\r\nCaused by: java.util.NoSuchElementException: Sequence contains no elements\r\n\t... 19 more\r\n```\r\n\r\nBut will now print the exception above but with an additional caused by\r\n```\r\nCaused by: rx.internal.schedulers.SchedulerContextException: Asynchronous work scheduled at\r\n\tat rx.internal.schedulers.NewThreadWorker.<init>(NewThreadWorker.java:36)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$ThreadWorker.<init>(CachedThreadScheduler.java:235)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$CachedWorkerPool.get(CachedThreadScheduler.java:86)\r\n\tat rx.internal.schedulers.CachedThreadScheduler$EventLoopWorker.<init>(CachedThreadScheduler.java:187)\r\n\tat rx.internal.schedulers.CachedThreadScheduler.createWorker(CachedThreadScheduler.java:173)\r\n\tat rx.internal.operators.OperatorSubscribeOn.call(OperatorSubscribeOn.java:42)\r\n\tat rx.internal.operators.OperatorSubscribeOn.call(OperatorSubscribeOn.java:1)\r\n\tat rx.Observable.subscribe(Observable.java:8553)\r\n\tat rx.Observable.subscribe(Observable.java:8520)\r\n\tat rx.Observable.subscribe(Observable.java:8316)\r\n\tat rx.schedulers.Main.main(Main.java:10)\r\n```'
p8034
sg5
S'1.x: change the workers to capture the stack trace'
p8035
sg7
(lp8036
S'Enhancement'
p8037
asg10
I3937
sg11
(lp8038
S'No. At least make it conditional to a system parameter / global boolean variable.'
p8039
aS'\xf0\x9f\x91\x8d  as is. The cost is very low and the benefit is very high. '
p8040
aS'@akarnokd added a system property to make if off by default.'
p8041
aS'I would like this to be default behavior. Learning Rx is hard and we are making it harder by default. Let users opt into over-optimizations.'
p8042
aS'You have a lot of test failures.'
p8043
aS'RXJava is hard to debug - lots of people agree on this. I know of large non-trivial projects that avoided using RXJava because it hard to debug. Non-trivial projects do I/O, and serialization - those are the performance problems, not micro-optimizations. Users will care more about it being easier to debug than being micro-optimized. This should be default to make it less hard.'
p8044
aS"I've changed it back to always getting the value from the system properties because makes a fine public API and it makes the tests work again.  I've added some code to mitigate the overhead of doing the check multiple times."
p8045
aS'Still failing...'
p8046
aS'Found it the test worked if run in isolation but failed if they were run en masse because of caching. Added pooled work resets in two places seems to fix the issue.'
p8047
aS"I want to increase debug support in RxJava, but I'd think, based on the feedback on #3965, that such capture is not enough.\r\n\r\nI suggest closing this PR, unless you can spend some time with it before 1.1.7. Also I'd like your feedback on #4007. It's tracking grabs the stacktrace for `observeOn` as well (the triggerer of the Scheduled actions) and should help with non-fatal crashes over async boundaries.\r\n\r\nA more elaborate solution would be that in case of a crash, the operator graph could be walked and dumped in a consumable format. Unfortunately, to support this, the `Subscriber` class has to be extended with methods to peek into the upstream and all operators have to set a `Producer` on their child subscribers to have the bidirectional link for the graph. Since `Subscriber` is public API, adding methods to it may not be a compatible change. For 2.x, there is no problem."
p8048
aS"I'm closing this for now due to test failures and merge conflicts.\r\n\r\nIn addition, I suggest extending #4007, once merged, by adding `Scheduler` wrappers - similar to the OnAssembly wrappers, via the hooks to capture and signal the stacks.\r\n\r\nIf you have further input on the issue, don't hesitate to reopen this issue or post a new one."
p8049
asg14
S'abersnaze:stacks'
p8050
sbsI3938
(iPull
Pull
p8051
(dp8052
g3
g57
sg5
S'1.x: add missing error handler call in completable'
p8053
sg7
(lp8054
S'Discussion'
p8055
asg10
I3938
sg11
(lp8056
S"Why do you think it's missing? In operators, only undeliverable exceptions are supposed to be sent to the global handler."
p8057
aS"I'm not pretty sure if this call to the handler goes there. But it arises from using the Retrofit's RxJava adapter, and realizing that Completable's endpoints errors are not caught by an error handler, while Observable's and Single's are."
p8058
aS"Interesting, could be that Completable doesn't use SafeSubscriber, which is responsible to deliver some errors thrown by onXXX methods. To be sure, could you add a unit test that demonstrates how Single gets your exception and how Completable isn't?"
p8059
aS'Okey'
p8060
aS"I think this comment is related: [Completable.java#L1968](https://github.com/ReactiveX/RxJava/blob/1.x/src/main/java/rx/Completable.java#L1968). From what I see, `Completable`, in a different way to `Observable` and `Single`, does calls to the error handler plugin by itself, instead of delegating it to a `SafeCompletableSubscriber` (which btw doesn't exist). Why there is no safe subscriber for `Completable` and why is this done this way?\r\n\r\nThe call to the handler is missing from `onError` in `subscribe(Action1<? super Throwable>, Action0)`, `subscribe(CompletableSubscriber)` and `subscribe(Subscriber)` methods, but `subscribe()` and `subscribe(Action0)` have it. This should be refactored to have just one place for calling the handler, as in `Observable` and `Single`."
p8061
aS'Completable was designed with a modern mindset where end-CompletableSubscribers are not expected to throw from the onXXX methods, but apparently, there was no safeSubscribe() added to the API. The current 1.x convention is to have subscribe() do additional safeguards and have an unsafeSubscribe() as direct as possible.'
p8062
aS'See #3942 for other forms of handling errors.'
p8063
aS'Closing via #3942'
p8064
asg14
S'bryant1410:patch-1'
p8065
sbsI3941
(iPull
Pull
p8066
(dp8067
g3
S'See #3940.'
p8068
sg5
S'1.x: fix single.flatmap not composing subscription through'
p8069
sg7
(lp8070
S'Bug'
p8071
asg10
I3941
sg11
(lp8072
S'\xf0\x9f\x91\x8d '
p8073
aS':+1:'
p8074
asg14
S'akarnokd:SingleUnsubscribeComposition'
p8075
sbsI3942
(iPull
Pull
p8076
(dp8077
g3
S'Add option to safely subscribe a `CompletableSubscriber` / regular `Subscriber` and handle `onXXX` failures.\r\n\r\nSee also: #3938\r\n\r\nNaming and whether or not the safe wrapping should be the default is open to discussion.'
p8078
sg5
S'1.x: add completable.safesubscribe option + rxjavaplugins hook support'
p8079
sg7
(lp8080
S'Enhancement'
p8081
asg10
I3942
sg11
(lp8082
S"In my opinion safe wrapping should be the default as it's the default in `Observable` and `Single`. At least the 3 should behave the same way. When using them, one should expect them to have a difference in their essential semantics, and not in these kind of things."
p8083
aS'Should the tests about error handling plugin in #3938 be here? Or we leave it in that PR?'
p8084
aS'@bryant1410 Your PR has a test failure:\r\n\r\n```\r\nrx.plugins.RxJavaPluginsTest > testOnErrorWhenUsingCompletable FAILED\r\n    java.lang.AssertionError: expected:<java.lang.RuntimeException: test onError> but was:<null>\r\n        at org.junit.Assert.fail(Assert.java:93)\r\n        at org.junit.Assert.failNotEquals(Assert.java:647)\r\n        at org.junit.Assert.assertEquals(Assert.java:128)\r\n        at org.junit.Assert.assertEquals(Assert.java:147)\r\n        at rx.plugins.RxJavaPluginsTest.testOnErrorWhenUsingCompletable(RxJavaPluginsTest.java:314)\r\n```'
p8085
aS'Fixed typo, renamed methods'
p8086
aS"@akarnokd They fail on purpose because I made the test but didn't fix the problem (Completable is not calling the error handling plugin)."
p8087
aS'The methods should be the other way around. Following `Single` and `Observable`, there should be a single `unsafeSubscribe` method, which accepts a parameter of type `CompletableSubscriber`. And `subscribe` should be present in the following ways: `subscribe()`, `subscribe(Action0)`, `subscribe(Action1<? super Throwable>, Action0)`, `subscribe(Subscriber)` and `subscribe(CompletableSubscriber)`.'
p8088
aS'The `subscribe()` methods wrap with `SafeComletableSubscriber` similar to how Observable.subscribe wraps with `SafeSubscriber`. subscribe(Subscriber) is there to allow conversion and cross-type APIs to bypass the safety overhead.'
p8089
aS'Updated with plugin support.'
p8090
aS'Can you cherry-pick the [commit that adds tests for the error handling plugn in `Completable` and `Single`](https://github.com/bryant1410/RxJava/commit/4cc57dcce8603496136d1e24173ce5ff36b7715b) from #3938?'
p8091
aS'Sure.'
p8092
aS'Done.'
p8093
aS'The comment `// TODO plugin wrapping onSubscribe` in `Completable#create` can be deleted, as the constructor is already calling the hook now. '
p8094
aS'Removed comment, changed to reuse methods, added onStart call.'
p8095
aS'Please add the missing `@Experimental`. Otherwise \xf0\x9f\x91\x8d '
p8096
aS'Added missing annotations'
p8097
aS'\xf0\x9f\x91\x8d '
p8098
asg14
S'akarnokd:CompletableSafeSubscribe'
p8099
sbsI3943
(iPull
Pull
p8100
(dp8101
g3
g57
sg5
S'update branches names in contributing:md'
p8102
sg7
(lp8103
S'Documentation'
p8104
asg10
I3943
sg11
(lp8105
S':+1:'
p8106
aS'\xf0\x9f\x91\x8d '
p8107
aS':+1:'
p8108
asg14
S'bryant1410:patch-2'
p8109
sbsI3944
(iPull
Pull
p8110
(dp8111
g3
g57
sg5
S'fix exception message from observer to subscriber'
p8112
sg7
(lp8113
S'Cleanup'
p8114
asg10
I3944
sg11
(lp8115
S':+1:'
p8116
aS'\xf0\x9f\x91\x8d '
p8117
aS'\xf0\x9f\x91\x8d '
p8118
asg14
S'loveyoupeng:master'
p8119
sbsI3948
(iPull
Pull
p8120
(dp8121
g3
S'See #3947 '
p8122
sg5
S'add completable.andthen(completable), deprecate endwith()'
p8123
sg7
(lp8124
S'Cleanup'
p8125
asg10
I3948
sg11
(lp8126
S'Please update unit tests that use these deprecated methods.'
p8127
aS'Done.'
p8128
aS':+1:'
p8129
aS"\xf0\x9f\x91\x8d but I'd either duplicate tests or make universal test functions and test both `endWith` and `andThen` to make sure that we don't break old behavior of public api. "
p8130
aS'The question is also since Completable is still `@Experimental` we could if this is wanted go the hard way and remove the deprecated methods and make everyone force to use the standard (new) methods since there are already quite a few deprecated / duplicated methods.'
p8131
aS"\xf0\x9f\x91\x8d \r\n\r\n> but I'd either duplicate tests or make universal test functions and test both endWith and andThen to make sure that we don't break old behavior of public api.\r\n\r\n@artem-zinnatullin I'm not against it but this is really minor as `andThen` just calls `endWith`. I'm going to merge this. Feel free to add tests in a separate PR if you wish."
p8132
asg14
S'vanniktech:1.x_completable_and_then'
p8133
sbsI3949
(iPull
Pull
p8134
(dp8135
g3
S'My Eclipse warned me about several hundred javac and javadoc errors which could hide other significant warnings. This PR is the first part to fix those warnings. Note that `Observable` and `Single` itself is full of those as well (several hundred in each).'
p8136
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 1'
p8137
sg7
(lp8138
S'Cleanup'
p8139
asg10
I3949
sg11
(lp8140
S':+1:\r\nThanks for getting this done.'
p8141
asg14
S'akarnokd:Cleanup0518'
p8142
sbsI3950
(iPull
Pull
p8143
(dp8144
g3
S'This PR clears the cast warnings introduced by the need to be JDK 9 compilable.'
p8145
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 2 final'
p8146
sg7
(lp8147
S'Cleanup'
p8148
asg10
I3950
sg11
(lp8149
S'I missed a bunch of javadoc problems.'
p8150
asg14
S'akarnokd:Cleanup0518_2'
p8151
sbsI3951
(iPull
Pull
p8152
(dp8153
g3
S'Next round of cleanup, still about 100 cases remain in `Completable` and `Observable`, but those will most likely conflict with open PRs.'
p8154
sg5
S'1.x: javac- and javadoc-related cleanup in components, part 2'
p8155
sg7
(lp8156
S'Cleanup'
p8157
asg10
I3951
sg11
(lp8158
S'\xf0\x9f\x91\x8d '
p8159
aS'\xf0\x9f\x91\x8d '
p8160
asg14
S'akarnokd:Cleanup0518_2_1'
p8161
sbsI3958
(iPull
Pull
p8162
(dp8163
g3
S'This PR adds the call to `RxJavaObservableExecutionHook.onCreate()` to the `just()` - `ScalarSynchronousObservable` construction.\r\n\r\nRelated: #2656.'
p8164
sg5
S'1.x: just() construction to call the oncreate execution hook'
p8165
sg7
(lp8166
S'Bug'
p8167
asg10
I3958
sg11
(lp8168
S'Updated javadoc and test.'
p8169
aS':+1:'
p8170
aS'\xf0\x9f\x91\x8d '
p8171
aS':+1:'
p8172
asg14
S'akarnokd:JustHook'
p8173
sbsI3959
(iPull
Pull
p8174
(dp8175
g3
S"This PR adds an overload to `scan` which allows specifying an initial value factory. The initial value factory is invoked for each incoming Subscriber individually and provides a non-shared starting point for the `scan` operation.\r\n\r\nI propose the `scan(Func2 accumulator, Func0 initialFactory)` parameter order because some Java 8+ compilers can't properly disambiguate with `scan(R initialValue, Func2 accumulator)`, thinking that R can be made `Func0`. \r\n\r\nRelated: #3667"
p8176
sg5
S'1.x: scan with an initial factory callback'
p8177
sg7
(lp8178
S'Enhancement'
p8179
asg10
I3959
sg11
(lp8180
S'Why add the overload if it can be done with defer and scan then?'
p8181
aS'Yep, it can be done. A decision has to be made if this convenience should make it into the library or not, and notify @NiteshKant the outcome in #3667.'
p8182
aS"I'd like to see this overload in, thanks."
p8183
aS"I'm not strong against adding it but not like the idea of the new parameter order. I would give +1 if giving it a better name instead of changing the parameter order. By the way, there is already a `OperatorScan(Func0<R> initialValueFactory, Func2<R, ? super T, R> accumulator)` for this overload so you don't need to use `defer`.\r\n\r\nProbably @benjchristensen should take a look since you removed it before."
p8184
aS"It was removed due to ambiguity as shown in https://github.com/ReactiveX/RxJava/issues/1881#issue-48878398\r\n\r\nAs long as that issue is not recreated, I have nothing against the functionality pursued here. I too don't like solving the overload ambiguity by moving parameter order around. But there is no good solution, it's either that or a new name. "
p8185
aS"As an alternative, I suggest extending `scan`'s javadoc with the example of the defer trick."
p8186
aS"The argument order bothers me as well. I'll close this and post a javadoc update instead."
p8187
asg14
S'akarnokd:ScanInitialFactory'
p8188
sbsI3963
(iPull
Pull
p8189
(dp8190
g3
S'Fixes https://github.com/ReactiveX/RxJava/issues/3679 '
p8191
sg5
S"composite exception should update cause to match the correct throwable that's first in the chain"
p8192
sg7
(lp8193
S'Bug'
p8194
asg10
I3963
sg11
(lp8195
S'Please add an unit test that shows verifies the expected behavior.'
p8196
aS'Updated'
p8197
aS'@premnirmal This is not correct. I just sent #3977 to fix it. Thanks anyway!'
p8198
aS'Thanks for the contribution. Could you check #3977 and verify it fixes your issue?'
p8199
aS'Thanks @zsxwing , closing'
p8200
asg14
S'premnirmal:composite_exception_cause_fix'
p8201
sbsI3964
(iPull
Pull
p8202
(dp8203
g3
S'This PR removes the `immediate()` scheduler "optimization" from `observeOn` and treats it as a common scheduler. Since `observeOn` has a stable request pattern, this turns it into a rebatching operator. No matter what the downstream requests, the upstream will requests of the specified size (with 25% as low water mark; i.e., replenishment after 75%). Since `immediate` is synchronous, this will run the drain loop, non-reentrant, on the caller thread.\r\n\r\nI found this mode of operation very handy in my Reactive-RPC prototype and a simple streaming echo RPC call; it prevents going unbounded and bloating the message sender threads:\r\n\r\n```java\r\n// remote\r\npublic Observable<Integer> echo(RpcStreamContext<?> ctx, Observable<Integer> in) {\r\n   return in.observeOn(Schedulers.immediate(), 16);\r\n}\r\n\r\n// client\r\napi.echo(Observable.range(1, 100_000)).observeOn(Schedulers.immediate(), 32)\r\n.subscribe(System.out::println, Throwable::printStackTrace);\r\n```\r\n\r\n'
p8204
sg5
S'1.x: observeon + immediate scheduler to be a request rebatcher'
p8205
sg7
(lp8206
S'Enhancement'
p8207
asg10
I3964
sg11
(lp8208
S'Great! What about adding a method to `Observable` that calls it so this functionality is discoverable? Say `Observable.batchRequests(n)`?'
p8209
aS'That could be a follow-up PR if this gets accepted.'
p8210
aS"Why not just adding a `batchRequests` operator instead of changing the existing behavior? This probably affects some users' applications if they depends on the optimization.\r\n\r\nSecondly, using `observeOn(Schedulers.immediate(), 16)` and assuming how it implements is not reliable. This is not an API contract and it could be changed in any time."
p8211
aS'The alternative requires duplicating code, which triggers more outcry usually...'
p8212
aS'I think you can add a flag (e.g., disallowOptimization) to `OperatorObserveOn` and use it for `batchRequests`.'
p8213
asg14
S'akarnokd:ObserveOnRebatcher'
p8214
sbsI3965
(iPull
Pull
p8215
(dp8216
g3
S'This is an alternative to #3937 to capture worker creation sites for `computation`, `io` and `newThread` schedulers.'
p8217
sg5
S'1.x: add optional tracking of worker creation sites + report it on error'
p8218
sg7
(lp8219
S'Enhancement'
p8220
asg10
I3965
sg11
(lp8221
S"I see potential problem with this solution: if I jump between threads in the Rx chain it looks like I'll loose stacktrace of `subscribe()` call.\r\n\r\n```java\r\nObservable\r\n  .just(value)\r\n  .observeOn(scheduler1)\r\n  .map(funcA())\r\n  .observeOn(scheduler2)\r\n  .map(funcB())\r\n  .subscribe()\r\n```\r\n\r\nIf exception happens in `map(funcB())`, we will have stacktrace pointing to observeOn(scheduler2), not to `observeOn(scheduler1)`.\r\n\r\nLooks like we need to have `ThreadLocal<Throwable>` and use it's value if it exists in `createWorker()` to keep stacktrace while jumping between threads."
p8222
aS'What you are describing is value-origin tracking, not what this and #3937: if a scheduled task crashes, show where the worker has been created, possibly pointing to the assembly site of the sequence.'
p8223
aS"Then this solution won't cover major percentage of cases when chain jumps between threads and then unexpected exception happens.\r\n\r\nFor now I vote for keeping initial stacktrace through threads, so \xf0\x9f\x91\x8e, sorry."
p8224
aS"> If exception happens in map(funcB()), we will have stacktrace pointing to observeOn(scheduler2), not to observeOn(scheduler1).\r\n\r\nThe `scheduler2` site is only reported if `funcB` crashes fatally, which is detected only on the `scheduler2`'s thread. Why would it have to report `scheduler1`?"
p8225
asg14
S'akarnokd:WorkerCreationStacktrace'
p8226
sbsI3966
(iPull
Pull
p8227
(dp8228
g3
S'Add `withLatestFrom` operator version that can take 2 to N other sources and combine them with the main source.\r\n\r\nRelated: #3779.'
p8229
sg5
S'1.x: add multi-other withlatestfrom operators'
p8230
sg7
(lp8231
S'Enhancement'
p8232
asg10
I3966
sg11
(lp8233
S'\xf0\x9f\x91\x8d '
p8234
asg14
S'akarnokd:WithLatestFromMany'
p8235
sbsI3969
(iPull
Pull
p8236
(dp8237
g3
S'This PR fixes the case when operators of pattern `xWith` chained into a long sequence causes `StackOverflowError` because the subscription call-stack gets deep.\r\n\r\nOperators affected and fixes:\r\n\r\n  - `Observable.ambWith()`\r\n  - `Observable.mergeWith()`\r\n  - `Observable.concatWith()`\r\n  - `Observable.startWith()`\r\n  - `Observable.zipWith()`\r\n  - `Completable.ambWith()`\r\n  - `Completable.mergeWith()`\r\n  - `Completable.concatWith()`\r\n  - `Completable.startWith()`\r\n  - `Single.zipWith()`\r\n\r\nThe PR contains some tidy-up of existing functionality and introducing short operators that delegate to the "big" operators for the purpose of identification.\r\n'
p8238
sg5
S'1.x fix long-chained xwith() operator stack overflow'
p8239
sg7
(lp8240
S'Bug'
p8241
asg10
I3969
sg11
(lp8242
S'Long running, unrelated tests fail on travis for hours now.'
p8243
aS"Not sure if this is worth to fix (Hundreds of codes to fix a rare case). For merging tons of Observable, I would expect that the user uses the static array version instead of writing a for-loop. In addition, this won't fix this issue totally. E.g., people can add an operator like this and will still get StackOverflowError.\r\n\r\n```\r\n        Observable<Integer> source = Observable.just(1);\r\n        Observable<Integer> result = source;\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            result = result.mergeWith(source).map(x -> x + 1);\r\n        }\r\n```"
p8244
asg14
S'akarnokd:xWithStackoverflowFix'
p8245
sbsI3971
(iPull
Pull
p8246
(dp8247
g3
S'This is a follow-up on #3964 but with a separate operator on `Observable`.\r\n\r\n'
p8248
sg5
S'1.x: request rebatch operator'
p8249
sg7
(lp8250
S'Enhancement'
p8251
asg10
I3971
sg11
(lp8252
S'\xf0\x9f\x91\x8d '
p8253
aS'@abersnaze, @stealthcode you had some use cases for this, any objections?'
p8254
aS"the reuse of the observeOn is interesting but couldn't it be done without the allocation of a queue?"
p8255
aS"If the downstream request is unbounded and the downstream has caught up then the queue can be skipped. In this case, `observeOn` can't be reused anymore and a custom drain logic has to be implemented.\r\n\r\nOtherwise, the upstream emissions have to be stored temporarily for an underrequesting downstream."
p8256
aS'\xf0\x9f\x91\x8d '
p8257
aS'I know that @abersnaze still had reservations about this. I think that this should not be using `observeOn`.'
p8258
aS"My concern is this - If @abersnaze implemented the batching functionality then why wouldn't we use that? The queue in observeOn scheduling creates a layer of indirection that seems unnecessary. "
p8259
aS'Remember, this started out as a change to `observeOn` to not ignore the `immediate` scheduler but people wanted this behavior exposed behind a proper name.'
p8260
aS'Thanks for reminding me of the context of this work. It seems like we have 2 implementations for the same functionality. I think @abersnaze and I agree that the 2 features of request batching and request valve type functionality could be composed. However I think that using `observeOn` for this functionality is not necessarily the best way to accomplish this. '
p8261
aS"I personally would be okay with either implementation. I think `observeOn` is a nice choice because of the request management but would prefer it more if there wasn't a queue. But realistically I think the choice is fine. \r\n\r\nAlso it's interesting to note that users are gravitating more and more to taking direct control over the `requester-producer` interactions. "
p8262
aS'For example this PR does something similar but exactly n (could be modified to have optional 25%) and without a queue #3781. '
p8263
asg14
S'akarnokd:OperatorRebatch'
p8264
sbsI3974
(iPull
Pull
p8265
(dp8266
g3
S'See #3576 .'
p8267
sg5
S'1.x: add terminal clarification to switchmap operators'
p8268
sg7
(lp8269
S'Documentation'
p8270
asg10
I3974
sg11
(lp8271
S'\xf0\x9f\x91\x8d '
p8272
asg14
S'akarnokd:SwitchOnNextJavadoc'
p8273
sbsI3975
(iPull
Pull
p8274
(dp8275
g3
S"See #2458.\r\n\r\nThis PR shows a way to implement lifting into a Subject. It is possible to lift on the front and the back side. The main idea is to add behavior to a Subject while presenting it to the outside world still as a Subject.\r\n\r\nI'm not 100% certain the value of this because one has to write operators for this to work (relying on the `rx.internal.operators` is not recommended). The front-side operator can be simpler since it doesn't have to deal with unsubscription and backpressure as the wrapped Subjects don't have that capability on their front anyway."
p8276
sg5
S'1.x: lift into subject'
p8277
sg7
(lp8278
S'Enhancement'
p8279
asg10
I3975
sg11
(lp8280
S"I'm not convinced either by its value, do you have a example in mind?"
p8281
aS"This was @abersnaze 's long lasting dream from #2458. I thought I give an implementation to see if we want it or #2458 can be closed for good."
p8282
aS"I wouldn't go as far as saying it was a dream of my but it has always bugged me that the type `Subject<T, R>` clearly has an `R` that can be different but there isn't a practical way to change it.  If subject is never intended to be used like that then we should change it to `Subject<T>` in 2.0."
p8283
asg14
S'akarnokd:LiftIntoSubject'
p8284
sbsI3977
(iPull
Pull
p8285
(dp8286
g3
S"The cause of #3679 is we use a wrong Throwable (its cause has been set) to set the cause and `initCause` will throw an exception. Hence, the cause chain is not created correctly. In this PR, it searches the root cause (which doesn't have a cause) and use it to call `initCause`."
p8287
sg5
S'1.x: use the correct throwable to set the cause for compositeexception'
p8288
sg7
(lp8289
S'Bug'
p8290
asg10
I3977
sg11
(lp8291
S':+1:'
p8292
aS'\xf0\x9f\x91\x8d '
p8293
asg14
S'zsxwing:fix-3679'
p8294
sbsI3979
(iPull
Pull
p8295
(dp8296
g3
S'This PR removes the remaining `AtomicXFieldUpdater`s from the library because reflection is somewhat problematic on Android.\r\n\r\nThis also deprecates the internal `BackpressureUtils.getAndAddRequest` to indicate `requested` field updater should not be used anymore.'
p8297
sg5
S'1.x: remove remaining field updaters'
p8298
sg7
(lp8299
S'Cleanup'
p8300
asg10
I3979
sg11
(lp8301
S'> BackpressureUtils.getAndAddRequest\r\n\r\nThis is an internal API. Nobody is supposed to use it. Why not just remove it?'
p8302
aS'External, custom operators may still depend on this utility method.'
p8303
aS"> External, custom operators may still depend on this utility method.\r\n\r\nOkey, let's remove it later. :+1:\r\n"
p8304
aS'\xf0\x9f\x91\x8d '
p8305
asg14
S'akarnokd:FieldUpdaterRemove'
p8306
sbsI3980
(iPull
Pull
p8307
(dp8308
g3
S'Added sections from #3935.'
p8309
sg5
S'2.x: design.md +extension +fusion'
p8310
sg7
(lp8311
S'Documentation'
p8312
asg10
I3980
sg11
(lp8313
S'@akarnokd since the edits are causing all in-line comments to be hidden I\'m posting our discussion on "extension" functionality here. \r\n\r\n> compose() is different from extend because it gives the full base type to the function. Substituting R with Flowable<T> the signature looks like this:\r\n> \r\n> ```java\r\n> public final <U> Flowable<U> compose(Function<? super Flowable<T>, ? extends Publisher<U>> composer);\r\n> ```\r\n\r\nOkay, I would rather only have one method for "extending" functionality? Is that also your goal? In which case we should discuss the merits of compose as a replacement for extend. \r\n\r\nFor comparison I\'m including the signature of extend.\r\n\r\n```java\r\n<O2, X extends Consumable<O2>> X extend(Function<Consumer<O>, X> f)\r\n```\r\n\r\nWhich in the case of a Flowable would be as follows (note that I have replaced the `Consumable<O2>` with `Publisher<U>`)\r\n\r\n```java\r\n<O2, X extends<Publisher<U>> X extend(Function<Consumer<Subscriber<? super T>>, X> f)\r\n```\r\n\r\nSo the only substantial difference between compose and extend is that with compose the function consumes a concrete Flowable type and with extend it consumes an OnSubscribe. \r\n\r\nI think my concern is that the `compose` functions _must_ know the absolute type of the thing that you are converting from (or at least a base class/interface). This makes it more restrictive than what `extend` allows, converting from any variation of a `Flowable` by virtue of unwrapping and accessing the internal callback. So composition functions would be case specific, and would not be reusable for different types of flowable, observable, single, or completable. \r\n\r\nNote that I am **NOT** proposing making conversion functions from a flowable that also work on an observable for instance. What I am proposing is that if you have different variations of an Observable that the same logic could be use to convert it to a different thing. I think that there is the potential for better code reuse with `extend`. Also my intent is that extending functions for the core RxJava types (i.e. the `Flowable`, `Observable`, `Single`, `Completable` and all of there variants which implement their respective `Consumable<S>` for their subscriber/observer type) be written and packaged with RxJava. But this would not be limited to just internal apis as the pattern could be useful for libraries which write their own `Consumable`. '
p8314
aS"My take away from this pull request is that @akarnokd has decided on a plan without communicating it to the other contributors on the project. I would like to hear _much_ more details on how this is to be implemented and I don't think that this PR is the right way to do so. I would prefer to have much better communication with the RxJava Core Committers so that we can try to reach some sort of understanding of our motivations and goals in design. \r\n\r\nWe at Netflix have tried to communicate with a proof of concept and many conversations over PRs and issues to no avail. It seems to me that there are a very significant misalignments in the goals and rationale behind design decisions. \r\n\r\nFor example, I personally do not see a significant benefit in complicating the code to avoid a minority of memory allocations. I am not considering removing the `Operator` interface to save a 1 time allocation. The chances are very good that the JVM will optimize the runtime anyway so multiple allocations wouldn't be a significant overhead. "
p8315
aS"The last 9+ months was quite tedious for me regarding this project and Netflix' behavior: extended periods of inactivity, delayed decision making, extensive gating of contributions and being stuck in local design/thinking choices expressed repeatedly (or argued endlessly) by some. In addition, I simply don't have the capacity give tailored explanations to everybody.\r\n\r\nSuch local thinking is the negligence of allocation count. It might not be an issue on multi-gigabyte Amazon cloud servers, but RxJava has to run on millions of Android devices where memory footprint and allocation does matter.\r\n\r\nThe proof-of-concepts Netflix provided in this regard were too small to be conclusive; they lacked some non-trivial operators and usage examples, with which the compiler ambiguities or coding inconveniences could have been discovered - apparently, me pointing them out is not enough.\r\n\r\nNote that there has been a working RxJava 2.x implementation available as developer preview since September 2015 in the 2.x branch here. Its review never progressed even before this design document was posted by Netflix.\r\n\r\nAs the primary contributor and maintainer of RxJava, I had to start making decisions on my own due to these. The basis for it is the fact that I've been developing *complete* reactive libraries before and during my time with RxJava and accumulated considerable amount experience with all things reactive.\r\n\r\nThe design choices I made for RxJava 2.x are proven in the research project [Reactive-Streams-Commons](https://github.com/reactor/reactive-streams-commons) and in fact forms the basis for the competing library [Reactor-Core](https://github.com/reactor/reactor-core) of Pivotal. Textual descriptions on why can be found in my blog: [RxJava Design Retrospect](http://akarnokd.blogspot.hu/2016/03/rxjava-design-retrospect.html), [Operator Fusion, part 1](http://akarnokd.blogspot.hu/2016/03/operator-fusion-part-1.html) and [part 2](http://akarnokd.blogspot.hu/2016/04/operator-fusion-part-2-final.html).\r\n\r\nThere are two reasons I'm still contributing to RxJava: 1) it's the only proper reactive library for Android and 2) Reactor-Core decided to provide only a subset of operators. However, any of this can change.\r\n\r\nIn conclusion, all I can say is to take this PR, propose alterations to it in a separate PR or leave it."
p8316
aS"I think RxJava core committers team has a lack of cohesion on 2.x designs because there is a lack of communication. @akarnokd we have proposed changes in our comments but you have no patience with our concerns. We have tried reaching out to you by email, instant message, and video chat in the past but you don't seem interested in direct communication outside of Github. Being a part of a team does require a higher level of coordination and communication however I suspect that you have no intention of working with us. \r\n\r\n> run on millions of Android devices where memory footprint and allocation does matter.\r\n\r\nOur goal is to develop a generally applicable library that can be safely and productively used by Android as well as other platforms. @stevegury and I believe that the JVM runtime (even on Android) would optimize the code such that there is little to no difference between the source code optimized implementation and our proposed designs. I think its in the best interest of the RxJava community for the contributors to evaluate different options. \r\n\r\nMy professional work at Netflix uses and depends heavily on RxJava. I _try_ to contribute my professional expertise to RxJava however when I read responses from @akarnokd I perceive a tone of hostility and a lack of interest. Many others at Netflix choose not to contribute to RxJava because it is too difficult to make progress on pull requests. I have not found an efficient way to collaborate with @akarnokd in design or implementation. RxJava is not benefiting in significant ways from Netflix contributions as many of our pull requests are deadlocked in debate or discouraged.\r\n\r\nThere are aspects that we don't understand about this approach and when we reach out to him we are met with what I interpret as avoidance and hostility. I can only conclude that @akarnokd is trying to implement what he thinks is best for the community while avoiding any contribution from Netflix."
p8317
aS"Since this is a design document change only, I'm merging this as is, allowing progress on the code side as well as enabling PRs for further clarifications if necessary.\r\n\r\nI encourage contributors with architectural ideas to make sure their suggested changes actually work out in the context of the entire 2.x codebase. The current 2.x branch contains a working (although outdated) variant and let's anyone experiment within his/her own environment."
p8318
asg14
S'akarnokd:DesignPlus'
p8319
sbsI3981
(iPull
Pull
p8320
(dp8321
g3
S'See #3960 and #3124.'
p8322
sg5
S'1.x: document zip() eagerness'
p8323
sg7
(lp8324
S'Documentation'
p8325
asg10
I3981
sg11
(lp8326
S'\xf0\x9f\x91\x8d '
p8327
aS'\xf0\x9f\x91\x8d '
p8328
asg14
S'akarnokd:ZipEagerness'
p8329
sbsI3982
(iPull
Pull
p8330
(dp8331
g3
S'This PR adds a comparison benchmark for working with `Observable.just` and `Single.just`.\r\n\r\nResults: (i7 4790, Win 7 x64, Java 8u92)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/15705865/476ebcd2-27f1-11e6-8468-4cd02962f31a.png)\r\n\r\n  - `one`: custom Observable emitting a single item with backpressure\r\n  - `scalar`: `Observable.just(1)`\r\n  - `scalarHidden`: `just(1).asObservable()`\r\n  - `single`: `Single.just(1)`\r\n  - `singleHidden`: wrapping with `Single.create`\r\n  - `plain`: just subscribe\r\n  - `Concat`: use `concatMap` to map it to a scalar (operator not available in Single)\r\n  - `Merge` : use `flatMap` to map it to a scalar/singe\r\n  - `Switch` : use `switchMap` to map it to a scalar (operator not available in Single)\r\n\r\nMy guess is that single is slower because that `Observable.OnSubscribe` vs `Single.OnSubscribe` wrapping game.'
p8332
sg5
S'1.x: benchmark just and single'
p8333
sg7
(lp8334
S'Performance'
p8335
asg10
I3982
sg11
(lp8336
sg14
S'akarnokd:OneItemPerf'
p8337
sbsI3986
(iPull
Pull
p8338
(dp8339
g3
S"Resolves #3985\r\n\r\nThis adds a `reset()` method to `Schedulers`, with the main benefit being improved testing support. This does slightly tweak the internal API of `Schedulers` to use a `getInstance()` approach to allow lazy init. This way we don't have to replace the singleton instance during `reset()` and allow it to lazily re-evaluate upon next usage. Otherwise, if you change your scheduler hook, you'd always have to make sure you set it before you call `Schedulers.reset()`.\r\n\r\nWill run perf tests overnight in case, I'm not sure how much of a tradeoff moving to an internal `getInstance()` approach costs, if anything.\r\n\r\nCC @zsxwing"
p8340
sg5
S'add schedulers.reset() for better testing'
p8341
sg7
(lp8342
S'Enhancement'
p8343
asg10
I3986
sg11
(lp8344
S"I think the failing test might be flaky, it doesn't fail for me locally. "
p8345
aS':+1:'
p8346
aS"Thanks! I don't suppose this could be squeezed into the `requires review` of #3970 could it?"
p8347
aS"That test doesn't fail for me locally, I'm not really sure what do do about it. Any ideas?"
p8348
aS"I've extended the timeout in some tests in PR #3987. Once it appears it was enough, I'll merge that and this PR should work."
p8349
aS"Cool, I'll rebase after that's merged then \xf0\x9f\x91\x8d "
p8350
aS'Non need to rebase but to rerun the travis job. Did it for you.'
p8351
aS'Ah I pushed the rebase as you commented. Oh well \xc2\xaf\\\\\\_(\xe3\x83\x84)_/\xc2\xaf'
p8352
aS'Cool, looks like the timeout tweaks worked'
p8353
aS"Code is ok, so \xf0\x9f\x91\x8d \r\n\r\nBut\r\n\r\n>Resetting the schedulers is dangerous\r\n>    during application runtime and also bad code could invoke it in\r\n>    the middle of an application life-cycle and really break applications\r\n>    if not used cautiously.\r\n\r\nWhy we're adding more and more APIs to break things and allow people use bad practices?"
p8354
aS"It's two, and they're largely targeted at testing. I don't think having a reset is bad practice and, like most code, only breaks things if you make poor decisions with it. I could just as easily add a bad scheduling hook or buggy global error handler.\r\n\r\nHaving to otherwise use DI to inject schedulers everywhere gets tedious fast, and inadvertantly discourages people from actually using the conventional static APIs. With this, it can be wrapped up in a nice test rule and enforces a clean state before and after tests. Using the plugins API also allows you to control the schedulers used across modules and 3rd party libraries as well.\r\n\r\nFor me, it's a missing and much needed API. I don't think requiring DI everywhere you use a scheduler just to test is a scalable approach considering how ubiquitous they are. Could you imagine injecting, say, `Timber` everywhere you wanted to use it?\r\n\r\nThat's my speel for why I think this is useful."
p8355
aS'I wonder why people with such testing needs don\'t roll their own global "MySchedulers" class which let\'s them easily switch scheduler types and use that like `observeOn(MySchedulers.forComputation())`. Of course this means you have to remember to use the `Scheduler`-overloaded operators everywhere.'
p8356
aS"I also just copied that doc from the other reset. I don't know that it's as dangerous though, it just forces a re-init. If it's dangerous, it's because resetting rx plugins is dangerous. Since they're not explicitly bound, I wouldn't mind making the doc warning a little less... Severe? :P"
p8357
aS"3rd party libraries don't use your app's global class :/. Plus that case still requires you to hook in a delegate scheduler in tests early enough. We're adding a global scheduler of sorts for background work and still planning to have a reset on the schedulers."
p8358
aS"Libraries should expose the option to customize the `Scheduler` they run on. Do you know a library that doesn't allow such customization?"
p8359
aS"Most, actually. They just use the built-in Schedulers.whatever() or AndroidSchedulers.mainThread(). I don't see how a wrapper with static methods solves this either, you still need some mechanism of resetting the underlying scheduler.\r\n\r\nIs there any harm in allowing reset here to facilitate just having developers go through the standard API?"
p8360
aS"But here's a quick example off the top of my head: https://github.com/mcharmas/Android-ReactiveLocation"
p8361
aS"Otherwise, I think the whole plugin system in RxJava 1.x is getting cumbersome. In 2.x, I did a much simpler and direct approach for overriding stuff.\r\n\r\nFor example, this is how the schedulers get initialized:\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java#L47\r\n\r\nThis is where they are returned:\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/schedulers/Schedulers.java#L57\r\n\r\nChanging what scheduler is returned from Schedulers is easy via\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/src/main/java/io/reactivex/plugins/RxJavaPlugins.java#L305\r\n\r\nby adding a function that can wrap or completely replace the scheduler.\r\n\r\nI don't know if Netflix wants 1.2 at all, but if so, I'd be glad to rewrite the plugin system."
p8362
aS"> But here's a quick example off the top of my head: https://github.com/mcharmas/Android-ReactiveLocation\r\n\r\nBut where does it use RxJava schedulers forcefully?"
p8363
aS'Found one: [ReverseGeocodeObservable.java](https://github.com/mcharmas/Android-ReactiveLocation/blob/a82d0ebfc0ccd1acf9667ef82bd2beb2630d41da/android-reactive-location/src/main/java/pl/charmas/android/reactivelocation/observables/geocode/ReverseGeocodeObservable.java)\r\n\r\nThey should have provided a way to customize that scheduler anyway.'
p8364
aS'100% agreed with David. That should be the direction RxJava should go to:\nteach users how to do either DI for schedulers or own MySchedulers class\nwith resetting API and teach library developers to accept Schedulers from\nuser.\n\nOtherwise we\'ll stuck in a loop like this where we\'re adding one API that\naffects different parts of the library and then we need to add another API\nto "fix" problems of previous one.\n\nOn Fri, 3 Jun 2016, 15:35 David Karnok, <notifications@github.com> wrote:\n\n> Libraries should expose the option to customize the Scheduler they run\n> on. Do you know a library that doesn\'t allow such customization?\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3986#issuecomment-223567232>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3IWb3BPQqz2qWzwylStcZG7flV4Nks5qIB-igaJpZM4ItOcB>\n> .\n>\n'
p8365
aS"Not disagreeing that it would be preferable for libraries to expose a way, but in practice I've seen that most do not.\r\n\r\nThe 2.x plugin approach looks nice, though the lockdown bit seems like it imposed the same restrictions that 1.x plugins have. I don't know what the 1.2 plans are, but between having something like this now and waiting for a 1.2 or 2.x release, I'd much rather have a necessary evil now with an eye toward the future. I don't really subscribe to the slippery slope worry considering this is part of what the last one was supposed to help improve.\r\n\r\nIt's not a matter of people not understanding DI, it's that DI is not a scalable solution for this. It's unnecessary tedium and boilerplate, why even have the static API at all if it's not going to be used? Are you going to add DI to rx util libraries?\r\n\r\nBetween getting all library developers to update, waiting for 2.x, rewriting the plugin system, or doing this in a safe way now and banking on 2.x long term, I'd rather have the last option. It works for all cases now and has fairly minimal impact/safety concerns."
p8366
aS'Well let me know what you guys want to do. I feel like this is breaking down over the current plugins API, which we all agree is not perfect. The way I see it, any "`MyPlugins`" approach would still face the same issue in that you\'d need to implement some way of internally delegating. \r\n\r\nTo me, this is a reasonable short-term solution for right now considering 1.2 and 2.x are far off and I think the framework should facilitate use of whatever patterns developers prefer rather than impose them. Would you be agreeable to doing this for now with the long term goal being to revamp the plugins API in the future?\r\n\r\nI\'ve updated the doc as well, since it\'s actually not that dangerous and only causes behavioral changes if the plugin hook has changed (which *is* already documented as such).'
p8367
aS'Also @zsxwing seemed in favor of this change in the issue, do you want to maybe chime in here?'
p8368
aS"While I do agree with Artem/David that a better long term solution here would be to pass in Scheduler objects where needed (setting things up for DI where developers choose it - the scalability of DI isn't the question here) rather than relying on static methods to get them, this PR seems like the best way forward for how things currently work in Rx. There has been lots of discussion elsewhere about how replacing a Scheduler for testing is very painful if you make use of the standard Schedulers static methods to get your Scheduler instances, and the reset methods for the plugin hook only work halfway because of the current static caching behavior. Because the current reset-for-testing functionality is fundamentally broken, I strongly recommend accepting this PR to fix it, and take this discussion into account for the design of upcoming versions of plugins or developer usage recommendations."
p8369
aS'> Because the current reset-for-testing functionality is fundamentally broken, I strongly recommend accepting this PR to fix it\r\n\r\nAgreed. This PR is pretty useful for unit tests. \xf0\x9f\x91\x8d for merging this one.\r\n'
p8370
aS'May sound crazy, but what about marking `reset()` as `@Deprecated` with explanation of better ways?'
p8371
aS"I think `@Experimental` with a doc explaining that the API will be revamped in the future would make more sense. I don't have strong feelings for or against `@Deprecated` though and can switch to that if others want. Anything to help move this PR along :)"
p8372
aS"`@Deprecated` will produce compile warning and will be visible in IDE, pretty sure most of the people who will use `Schedulers.reset()` will copy-paste from SO or some blog post which will arrive as soon as we merge/release this and won't even know that it's `@Experimental`.\r\n\r\n// I'm not blocking PR if that matters."
p8373
aS"Fair point. @akarnokd any thoughts? It seems like this has the requisite \xf0\x9f\x91\x8d's to move forward, can add deprecated if you think it's worthwhile."
p8374
aS"Do we really expect people to accidentally use this and be surprised?\nDeprecating the method sounds like it punishes those who want to use it.\nI'd deprecate create() and others long before this method.\n\nOn Mon, Jun 6, 2016, 5:19 PM Zac Sweers <notifications@github.com> wrote:\n\n> Fair point. @akarnokd <https://github.com/akarnokd> any thoughts? It\n> seems like this has the requisite \xf0\x9f\x91\x8d's to move forward, can add\n> deprecated if you think it's worthwhile.\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/3986#issuecomment-224091875>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AAEEEahh6igqbI7KuZYAgrNavXgcEkqWks5qJI7wgaJpZM4ItOcB>\n> .\n>\n"
p8375
aS'When you put it that way, I think I agree.'
p8376
aS"Don't deprecate it."
p8377
aS">Do we really expect people to accidentally use this and be surprised?\r\n\r\nHave seen/helped people asking how to solve problems after applying scheduler hooks for testing, they didn't realize (mostly) how it can break things.\r\n\r\n`create()` is local evil, it doesn't break global state. \r\n\r\nAlternative solution would be to move APIs like `create()`, `reset()` and so on to `rx.Unsafe`, like Java, Rust and so on, it's there but use it at your own risk."
p8378
asg14
S'hzsweers:z/reset'
p8379
sbsI3987
(iPull
Pull
p8380
(dp8381
g3
S'Sometimes, the heavy Travis CI load (or throttling) makes a few tests fail with timeout. This increases the timeout for some of them to reduce the likelihood.'
p8382
sg5
S'add more time to certain tests that failed under heavy ci load'
p8383
sg7
(lp8384
S'Test-Failures'
p8385
asg10
I3987
sg11
(lp8386
S'\xf0\x9f\x91\x8d '
p8387
asg14
S'akarnokd:MoreTimeToTests'
p8388
sbsI3991
(iPull
Pull
p8389
(dp8390
g3
S'Hi,\r\n\r\nBased on the PR #3488 and the issue #3459 \r\nI thought all the instance of Atomic*FieldUpdater has been removed and replaced.'
p8391
sg5
S'remove instance of atomic*fieldupdater'
p8392
sg7
(lp8393
sg10
I3991
sg11
(lp8394
S'This was already changed in #3979.'
p8395
asg14
S'lucas34:pr_atomicfieldupdater'
p8396
sbsI3994
(iPull
Pull
p8397
(dp8398
g3
g57
sg5
S'dummy commit'
p8399
sg7
(lp8400
sg10
I3994
sg11
(lp8401
S'Sorry opened this in the wrong place'
p8402
asg14
S'hzsweers:z/travistest'
p8403
sbsI3996
(iPull
Pull
p8404
(dp8405
g3
S'The reset shut down all the main schedulers and the helper pools, causing the failure in #3993 .\r\n\r\n@hzsweers, you were right with the need for the instance-shutdown method.'
p8406
sg5
S'1.x: fix reset() shutting down everything other than the schedulers'
p8407
sg7
(lp8408
S'Bug'
p8409
asg10
I3996
sg11
(lp8410
S'Minor nit, rest of the code looks good \xf0\x9f\x91\x8d \r\n\r\nNice catch, sorry for the inadvertent bug and glad it was a relatively simple fix'
p8411
aS'\xf0\x9f\x91\x8d '
p8412
aS'\xf0\x9f\x91\x8d '
p8413
asg14
S'akarnokd:Lifecyclefix'
p8414
sbsI4001
(iPull
Pull
p8415
(dp8416
g3
S"For some cases, `Observable.distinctUntilChanged(keySelector)` isn't enough. For example, when data consists of 2+ objects with ID, you cannot simply summarize them and use it as a key. Also often there are stream of arrays of data which can't be distincted easily and generically.\r\nSo I think `Observable.distinctUntilChanged(comparator)` would be helpful. I use kinda tricky implementation, but think, it is okey. Firstly I tried to add ctor to OperatorDistinctUntilChanged(), but it was... too bad.\r\n\r\n**p.s.** I was really confused by \r\n\r\n> If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request (on a branch other than master, 1.x, 2.x, or gh-pages).\r\n\r\nand spent some time trying to create some sort of temporal branch here (newbie me). But finally looked up into PRs and so that it is okey to PR into 1.x. Is it an error in .md-file?"
p8417
sg5
S'1.x: added distinctuntilchanged(comparator)'
p8418
sg7
(lp8419
S'Feature-Request'
p8420
asg10
I4001
sg11
(lp8421
S'Please add unit tests that verify the behavior.'
p8422
aS'How about this one?'
p8423
aS"Sorry for the delay. I remembered there was a discussion about this overload a while ago in #395.\r\n\r\nThe verdict was to not have them and you have to create your own wrapper class with custom `equals` and use it as a keySelector.\r\n\r\nThe decision may be revised, depending on the other's opinions.\r\n\r\n(Otherwise, I would have done it differently, not with that subscriberProvider)."
p8424
aS"See #4034 about how I'd implement this instead (easier shown in code than as a comment). Let me know if you want to adjust your PR."
p8425
aS'By `adjust your PR` you mean copy-paste your implementation as successive commit to existed ones?'
p8426
aS"> By adjust your PR you mean copy-paste your implementation as successive commit to existed ones?\r\n\r\nIf you think that my PR doesn't cover everything you wanted then yes. Otherwise, I leave it to you."
p8427
aS"> If you think that my PR doesn't cover everything you wanted then yes\r\n\r\nNo, I think your PR is just okay and do what I wanted and do it better than mine own :+1: \r\nSo I guess I need to close this PR now?"
p8428
aS"Yes, you can close this. Thanks for your contribution anyway! If you have any further improvement suggestions / PRs for the library don't hesitate to post them. (If you need some hints about operator coding styles and structure, try looking at the common and simpler operators implementations.)"
p8429
asg14
S'Nexen23:OperatorDistinctUntilChanged(comparator)'
p8430
sbsI4005
(iPull
Pull
p8431
(dp8432
g3
S'In the spsc queues, the indexes were written before the actual elements and thus a concurrent `isEmpty` check would report a non-empty queue but a `poll` would still return `null`. The fix swaps the two writes.\r\n\r\nNote that this an inconsistency in the original JCTools code and not the lack of keeping up with it.'
p8433
sg5
S'1.x: fix spsc queues reporting not empty but then poll() returns null'
p8434
sg7
(lp8435
S'Bug'
p8436
asg10
I4005
sg11
(lp8437
S'\xf0\x9f\x91\x8d '
p8438
aS'\xf0\x9f\x91\x8d '
p8439
asg14
S'akarnokd:SpscQueueFixes'
p8440
sbsI4007
(iPull
Pull
p8441
(dp8442
g3
S'This PR adds a new, in-between, hook manager class, `RxJavaHooks` that allows runtime hooking of `Observable`, `Single`, `Completable` and `Schedulers` components and is aimed to be more versatile than the `RxJavaPlugins`.\r\n\r\nSince `RxJavaPlugins` is public API, it can\'t be just removed, therefore, `RxJavaHooks` by default delegates to it but that delegation can be completely disabled via `clear()`.\r\n\r\n#### Usage\r\n\r\nCall the `setOn` methods with an appropriate function to manipulate the object being hooked:\r\n\r\n```java\r\nRxJavaHooks.setOnComputationScheduler(s -> Schedulers.immediate());\r\n\r\nRxJavaHooks.setObservableCreate(o -> { System.out.println("Creating: " + o); return o; });\r\n```\r\n\r\nYou can also get the current hooks via the `getOn` methods, allowing chaining multiple hooks if necessary. Changing and retrieving the hooks are thread safe, although it is recommended you change them in quiet times.\r\n\r\nOperator writers should usually not call the `onXXX` methods on `RxJavaHooks` except `RxJavaHooks.onError()`; It is useful when they have to signal a `Throwable` that can\'t be delivered to a `Subscriber`.\r\n\r\nCalling `reset()` will restore the original delegation hooks.\r\n\r\nThis PR also features a way of tracking the assembly locations, that is where `Observable.create()` was invoked internally or externally, via `enableAssemblyTracking`. It changes the creation hooks of all 3 base types by adding an `OnSubscribeOnAssemblyX` wrapper. This operator will replace the Throwable flowing through `onError` and wraps it via the new `AssemblyStackTraceException`. \r\n\r\nBoth the wrapper and the exception contain a string representation of the captured stacktrace, this helps "printing" out that information in a debugging session by simply viewing the field contents.\r\n\r\nThis tracking can be enabled at any time and affects sequences created afterwards. To stop the tracking, use `resetAssemblyTracking` to restore the default delegate callbacks to `RxJavaPlugins` or `clearAssemblyTracking` to restore the empty hooks (only affecting the `onCreate` hooks).\r\n\r\nFor frameworks, the `RxJavaHooks` can be locked down, preventing changing the hooks.\r\n\r\nIf you are using `RxJavaPlugins` existing features, you don\'t have to do anything; tests will work as before.\r\n\r\n#### Performance impact\r\n\r\nA default `RxJavaHooks` incurs a 2-4 level indirection in method calls. `onNext` calls are not affected.\r\n\r\nA clear `RxJavaHooks` incurs a volatile read (very cheap) followed by a branch (predictable). `onNext` calls are not affected.\r\n\r\nA tracking-enabled RxJavaHooks incurs an estimated 1000-3000 cycles overhead for each source creation and operator application. The `AssemblyStackTraceException` itself doesn\'t fill in its own stacktrace but takes only the captured stacktrace string and has mostly the cost of an object allocation. Due to the in-between nature of tracking, `onXXX` calls get through another indirection at each operator. For example, `range(1, 5).map(v -> v).filter(v -> true).subscribe()` will have 3 extra layers (one for each `.`). I believe these are acceptable overheads because the tracking feature is for tracking down crashes and not performance problems.\r\n\r\n#### Discussion\r\n\r\nNot all hook methods have been replicated completely on `RxJavaHooks`. For one, I wanted a minimal working prototype that passes existing tests. Second, those that are left out are not even tested (`onSubscribeError`, `onLift`). If the **concept** of this PR is accepted, those can be added along with their unit tests. Also further Javadoc will be added in the same case.\r\n\r\nNames and structure are not set in stone.'
p8443
sg5
S'1.x: new hook management proposal'
p8444
sg7
(lp8445
S'Discussion'
p8446
aS'Enhancement'
p8447
asg10
I4007
sg11
(lp8448
S'\xf0\x9f\x91\x8d // More tests would be great, especially for removing parts of stacktrace, but otherwise LGTM.'
p8449
aS'> // More tests would be great, especially for removing parts of stacktrace, but otherwise LGTM.\r\n\r\nDo you have tips how to fake stacktrace for `Thread.currentThread().getStacktrace()` ? Otherwise, there might be other common frameworks that could be filtered, such as Android stuff.'
p8450
aS'Accept `StackTraceElement[]` in the function and pass fake `StackTraceElement[]` in tests?'
p8451
aS"If this PR gets a go ahead, I'll do that."
p8452
aS'@hzsweers PTAL'
p8453
aS"Will look when I can, but probably won't be until next week due to work projects."
p8454
aS'Also it is possible to merge RxJavaHooks into RxJavaPlugins. It would avoid some confusion when switching to 2.x plugins API.'
p8455
aS">Also it is possible to merge RxJavaHooks into RxJavaPlugins. It would avoid some confusion when switching to 2.x plugins API.\r\n\r\nDon't you afraid that it'll make API of `RxJavaPlugins` too confusing?"
p8456
aS'How would it make it more confusing?'
p8457
aS"Either we'll need to break current API or add very similar methods to\nexisting which will make it confusing.\n\nOn Wed, 22 Jun 2016, 12:22 Zac Sweers, <notifications@github.com> wrote:\n\n> How would it make it more confusing?\n>\n> \xe2\x80\x94\n> You are receiving this because you commented.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4007#issuecomment-227689274>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA7B3LHg08TP9iNMUuP_9AD1Zhl2Y2e7ks5qOP67gaJpZM4I1YE9>\n> .\n>\n"
p8458
aS"It's an odd class either way. Plus, I've seen mentioned that few tests actually extend `RxJavaPlugins`. I'm leaning towards having `RxJavaHooks` separate and clearly marked `@Experimental`."
p8459
aS'Updated with more Javadoc.'
p8460
aS'## [Current coverage][cc-pull] is **80.26%**\n\n\n> No coverage report found for **1.x** at 08a2130.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [08a2130...99b256c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/08a2130d3eeee0ec12b9dd496e99c57fc668a496...99b256c05e3a2dd5a5bd22280ac4b294b5189baf\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4007?src=pr'
p8461
aS"I'd like to merge this so we can make progress on the coverage/PMD front (which will indicate what tests are needed for this). Any objections?"
p8462
aS"I'll take a good look at it today if you don't mind waiting a few hours"
p8463
aS'Sure, take your time.'
p8464
aS'Could you include an example of what the output from `AssemblyStackTraceException` looks like, for posterity? Doc might be a bit overkill, but it would be nice to see what it looks like'
p8465
aS"In the IDE, this is what it looks like when watching the exception (its message):\r\n```\r\nrx.exceptions.AssemblyStackTraceException: Assembly trace:\r\n at rx.Observable.create(Observable.java:92)\r\n at rx.Observable.lift(Observable.java:239)\r\n at rx.Observable.map(Observable.java:6321)\r\n at rx.plugins.RxJavaHooksTest.createObservable(RxJavaHooksTest.java:31)\r\n at rx.plugins.RxJavaHooksTest.assemblyTrackingObservable(RxJavaHooksTest.java:45)\r\n at java.lang.reflect.Method.invoke(Method.java:498)\r\nOriginal exception:\r\n```\r\n\r\nIf a test fails, Eclipse's JUnit window can nicely jump to these sources."
p8466
aS'If necessary, we can remove more lines (such as Observable.xxx()) but they might be helpful while diagnosing problems in RxJava itself.'
p8467
aS"I think the trace is fine as it is. Good to see it can pick it up as sources that are jumpable as well. We've been using a sort of `TaggedObserver` pattern to help distinguish traces where something bubbles up from an `OnErrorNotImplementedException` and it looks like this could help a lot in tracing the actual assembly.\r\n\r\n\xf0\x9f\x91\x8d  for me as long as setting schedulers dynamically still works."
p8468
aS'All the old hooks and reset still work as this delegates to those by default (their original unit tests still pass).'
p8469
aS'Would it be possible to use this new API for the same effect though? (changing schedulers on the fly, mainly for testing purposes)'
p8470
aS'You can change the schedulers on the fly via `setOnComputationScheduler()`, etc.'
p8471
aS'Sounds good :+1:'
p8472
aS'Thanks for the reviews!'
p8473
asg14
S'akarnokd:RxJavaHooks'
p8474
sbsI4008
(iPull
Pull
p8475
(dp8476
g3
S'Release 1.1.6 CHANGES.md\r\n\r\n:+1: for the full release.'
p8477
sg5
S'1.x: release 1.1.6 changes.md'
p8478
sg7
(lp8479
S'Information'
p8480
asg10
I4008
sg11
(lp8481
S'\xf0\x9f\x91\x8d '
p8482
aS':+1:'
p8483
aS'\xf0\x9f\x91\x8d '
p8484
asg14
S'akarnokd:Release_1.1.6_Changes'
p8485
sbsI4011
(iPull
Pull
p8486
(dp8487
g3
S'This PR deprecates `TestObserver` in favor of the richer `TestSubscriber`.\r\n\r\nIn addition, `TestSubscriber` gets 3 new methods and 1 deprecation:\r\n\r\n  - `getCompletions()` to return the onCompleted count as int instead of Notifications\r\n  - `getValueCount()` returns the committed number of onNext events for thread-safe checking of values up to this count\r\n  - `awaitValueCount` repeatedly sleeps up to a timeout and waits till the committed onNext count reaches/passes the expected amount.'
p8488
sg5
S'1.x: deprecate testobserver, enhance testsubscriber a bit'
p8489
sg7
(lp8490
S'Enhancement'
p8491
aS'Test'
p8492
asg10
I4011
sg11
(lp8493
S'Other than that suggestion, LGTM \xf0\x9f\x91\x8d '
p8494
aS"Thanks for the feedback. I'm merging this as is and I'm open for PRs if you think `awaitValueCount` should use a different wait strategy."
p8495
asg14
S'akarnokd:TestObserverDeprecate'
p8496
sbsI4014
(iPull
Pull
p8497
(dp8498
g3
S'This documentation answers questions I had while reading it.'
p8499
sg5
S'add specificity to documentation for asyncsubject'
p8500
sg7
(lp8501
S'Documentation'
p8502
asg10
I4014
sg11
(lp8503
S"I'd also add if the source terminated with an `onError` (with or without prior `onNext`s) all current and future `Subscriber`s will receive only the error."
p8504
aS':+1:'
p8505
aS'What is the protocol from here on out?'
p8506
aS"Thanks for the contribution. I'll merge this as is. I'll write up my intentions as a lead developer including cases such as this as an example."
p8507
aS"There's an additional marble diagram you could add that illustrates this,\nif you think that would help:\nhttp://reactivex.io/documentation/operators/images/S.AsyncSubject.e.png\n\nOn Fri, Jun 17, 2016 at 12:00 AM, David Karnok <notifications@github.com>\nwrote:\n\n> I'd also add if the source terminated with an onError (with or without\n> prior onNexts) all current and future Subscribers will receive only the\n> error.\n>\n> \xe2\x80\x94\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226695444>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AESHoCEyPX_KJDrLy48kFDKbxRi3133Kks5qMkX_gaJpZM4I4DMC>\n> .\n>\n\n\n\n-- \nDavid M. Gross\nPLP Consulting\n"
p8508
aS'Thanks @DavidMGross ! @hospitalitarian would you like to submit another PR?'
p8509
aS'Yes, I will.  How do you generate marble diagrams?  There are a few more cases that I would like to add.'
p8510
aS"OmniGraffle is the tool we're using to create the diagrams. You can check\nout the diagram set from the RxJava wiki here:\nhttps://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators.graffle\n\n(Though by ReactiveX/reactivex.github.io#223 this file may get moved over\nto that repo at some point as it makes more sense to have it there.)\n\nOn Fri, Jun 17, 2016 at 10:02 AM, David Andrews <notifications@github.com>\nwrote:\n\n> Yes, I will. How do you generate marble diagrams? There are a few more\n> cases that I would like to add.\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226824595>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AESHoEHo26mfko7SMJ_LS_jhChngBIh8ks5qMtM1gaJpZM4I4DMC>\n> .\n>\n\n\n\n-- \nDavid M. Gross\nPLP Consulting\n"
p8511
aS"Should I wait for that file to be moved?  Otherwise, how do I go about\nediting the wiki file?\n\nOn Fri, Jun 17, 2016 at 3:08 PM, David Gross <notifications@github.com>\nwrote:\n\n> OmniGraffle is the tool we're using to create the diagrams. You can check\n> out the diagram set from the RxJava wiki here:\n>\n> https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators.graffle\n>\n> (Though by ReactiveX/reactivex.github.io#223 this file may get moved over\n> to that repo at some point as it makes more sense to have it there.)\n>\n> On Fri, Jun 17, 2016 at 10:02 AM, David Andrews <notifications@github.com>\n> wrote:\n>\n> > Yes, I will. How do you generate marble diagrams? There are a few more\n> > cases that I would like to add.\n> >\n> > \xe2\x80\x94\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226824595>,\n> > or mute the thread\n> > <\n> https://github.com/notifications/unsubscribe/AESHoEHo26mfko7SMJ_LS_jhChngBIh8ks5qMtM1gaJpZM4I4DMC\n> >\n> > .\n> >\n>\n>\n>\n> --\n> David M. Gross\n> PLP Consulting\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226855431>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AA-Ue7U2qdN9jKjpXXsFyTfrTpV_eij1ks5qMvDHgaJpZM4I4DMC>\n> .\n>\n"
p8512
aS"I've got other things on my plate, so probably won't be moving the graffle\nfile soon. You can check it out from the repo at\nhttps://github.com/Netflix/RxJava.wiki.git to make changes. Let me know if\nyou've got questions about how the file is organized, how to generate .png\nimages from it and check those in, etc.\n\n\nOn Fri, Jun 17, 2016 at 12:16 PM, David Andrews <notifications@github.com>\nwrote:\n\n> Should I wait for that file to be moved? Otherwise, how do I go about\n> editing the wiki file?\n>\n> On Fri, Jun 17, 2016 at 3:08 PM, David Gross <notifications@github.com>\n> wrote:\n>\n> > OmniGraffle is the tool we're using to create the diagrams. You can check\n> > out the diagram set from the RxJava wiki here:\n> >\n> >\n> https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators.graffle\n> >\n> > (Though by ReactiveX/reactivex.github.io#223 this file may get moved\n> over\n> > to that repo at some point as it makes more sense to have it there.)\n> >\n> > On Fri, Jun 17, 2016 at 10:02 AM, David Andrews <\n> notifications@github.com>\n> > wrote:\n> >\n> > > Yes, I will. How do you generate marble diagrams? There are a few more\n> > > cases that I would like to add.\n> > >\n> > > \xe2\x80\x94\n> > > You are receiving this because you were mentioned.\n> > > Reply to this email directly, view it on GitHub\n> > > <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226824595\n> >,\n> > > or mute the thread\n> > > <\n> >\n> https://github.com/notifications/unsubscribe/AESHoEHo26mfko7SMJ_LS_jhChngBIh8ks5qMtM1gaJpZM4I4DMC\n> > >\n> > > .\n> > >\n> >\n> >\n> >\n> > --\n> > David M. Gross\n> > PLP Consulting\n> >\n> > \xe2\x80\x94\n> > You are receiving this because you were mentioned.\n> > Reply to this email directly, view it on GitHub\n> > <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226855431>,\n> > or mute the thread\n> > <\n> https://github.com/notifications/unsubscribe/AA-Ue7U2qdN9jKjpXXsFyTfrTpV_eij1ks5qMvDHgaJpZM4I4DMC\n> >\n> > .\n> >\n>\n> \xe2\x80\x94\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4014#issuecomment-226857431>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AESHoBEmPjKGjWYKYjtxgGPszxdjtdXOks5qMvKSgaJpZM4I4DMC>\n> .\n>\n\n\n\n-- \nDavid M. Gross\nPLP Consulting\n"
p8513
asg14
S'hospitalitarian:patch-1'
p8514
sbsI4018
(iPull
Pull
p8515
(dp8516
g3
S'Release notes: https://docs.gradle.org/2.14/release-notes'
p8517
sg5
S'1.x: update gradle to 2.14'
p8518
sg7
(lp8519
S'Build'
p8520
asg10
I4018
sg11
(lp8521
S':+1:'
p8522
aS'\xf0\x9f\x91\x8d '
p8523
aS"Be careful with this, 2.14 is causing some major problems for Android - https://code.google.com/p/android/issues/detail?id=213413\r\n\r\nThey said it's a problem on Gradle's end, so I'd be weary of this update in java projects too."
p8524
asg14
S'artem-zinnatullin:az/gradle-2.14'
p8525
sbsI4019
(iPull
Pull
p8526
(dp8527
g3
S'Make sure there is enough time for the test and the latch is always counted down.\r\n\r\n/cc @artem-zinnatullin '
p8528
sg5
S'1.x: make the latest compositesubscription test more robust.'
p8529
sg7
(lp8530
S'Test'
p8531
asg10
I4019
sg11
(lp8532
S'\xf0\x9f\x91\x8d '
p8533
aS'\xf0\x9f\x91\x8d '
p8534
asg14
S'akarnokd:CompositeSubscriptionTest'
p8535
sbsI4020
(iPull
Pull
p8536
(dp8537
g3
S"This PR adds a default, abstract base class with unsubscription support for `Completable`'s `CompletableSubscriber`.\r\n\r\nPros: direct, slim class\r\n\r\nCons: people probably used `subscriber(Action0)` or `subscribe(Subscriber)` so far.\r\n\r\nRelated: #4017 "
p8538
sg5
S'1.x: add asynccompletablesubscriber that exposes unsubscribe()'
p8539
sg7
(lp8540
S'Enhancement'
p8541
asg10
I4020
sg11
(lp8542
S'\xf0\x9f\x91\x8d '
p8543
asg14
S'akarnokd:AsyncCompletableSubscriber'
p8544
sbsI4021
(iPull
Pull
p8545
(dp8546
g3
g57
sg5
S'improve unit test for `publish()`'
p8547
sg7
(lp8548
S'Test'
p8549
asg10
I4021
sg11
(lp8550
S"You changed logic but you didn't explain why this is an improvement. Could you elaborate?"
p8551
aS'Publish should only subscribe to the underlying observable once, no matter how many subscribers it has.  This ensures that both subscriptions have taken place when verifying that only one subscription to the underlying observable has happened.'
p8552
aS'Thanks @hospitalitarian, for the explanation as well.'
p8553
asg14
S'hospitalitarian:patch-2'
p8554
sbsI4023
(iPull
Pull
p8555
(dp8556
g3
S'In the current master, `replay` only trucates its buffer if an event is received. This means if a subscriber subscribes between two events, the operator may replay old events. This PR skips those events. The operator is now consistent with the recently updated `ReplaySubject`.\r\n\r\nThe old behavior was somewhat expected by a few unit tests that have been updated.\r\n\r\nRelated: #3917, #3918. '
p8557
sg5
S'1.x: fix timed replay() replaying old data for late subscribers'
p8558
sg7
(lp8559
S'Bug'
p8560
asg10
I4023
sg11
(lp8561
S'\xf0\x9f\x91\x8d \r\nWe should mention this change in the next changelog.'
p8562
aS'Definitely. \r\n\r\n@zsxwing Thoughts?'
p8563
aS':+1: Agreed that this is a bug fix instead of a broken change.'
p8564
aS'Thanks @zsxwing !'
p8565
asg14
S'akarnokd:ReplayNoOldData'
p8566
sbsI4024
(iPull
Pull
p8567
(dp8568
g3
S'Fixes the documentation problem reported in #3721.'
p8569
sg5
S'1.x: update dooneach(observer) javadoc'
p8570
sg7
(lp8571
S'Documentation'
p8572
asg10
I4024
sg11
(lp8573
S'Nice improvement :+1:'
p8574
asg14
S'akarnokd:DoOnEachDoc'
p8575
sbsI4026
(iPull
Pull
p8576
(dp8577
g3
S'This PR rephrases the `cache` documentation a bit and adds workaround for stopping and forgetting the cached values.\r\n\r\nRelated: #3007.'
p8578
sg5
S'1.x: expand and explain cache() in more detail'
p8579
sg7
(lp8580
S'Documentation'
p8581
asg10
I4026
sg11
(lp8582
S"\xf0\x9f\x91\x8d \r\nThis obviously isn't related to that, but `testReplaySubjectConcurrentSubscriptions` failed in CI."
p8583
aS'Thanks, will look into it before merging this; could be a bug due a pattern they share.'
p8584
aS'Nothing obvious so far, the test passes for me locally when run 1000 times. Will investigate it further through #4028'
p8585
asg14
S'akarnokd:CacheDocFix'
p8586
sbsI4027
(iPull
Pull
p8587
(dp8588
g3
S"The catch around the predicate didn't actually signal the CompositeException.\r\n\r\nDiscovered in #4025"
p8589
sg5
S'1.x: fix completable.onerrorcomplete(func1) not relaying function crash'
p8590
sg7
(lp8591
S'Bug'
p8592
asg10
I4027
sg11
(lp8593
S':+1:'
p8594
aS'\xf0\x9f\x91\x8d '
p8595
asg14
S'akarnokd:CompletableOnErrorCompleteFix'
p8596
sbsI4030
(iPull
Pull
p8597
(dp8598
g3
S'This is the first step towards the new architecture where operator implementations are themselves of the base type instead of a 2-3 layer indirection as in 1.x.\r\n\r\nThis PR removes the instance field `onSubscribe` from the base reactive classes and introduces `subscribeActual` to be overridden with the custom operator logic now on. Existing operators are still working through the classical OnSubscribe/Lift indirection and will be updated in subsequent PRs.\r\n\r\nNaming and existence of `subscribeActual` is up for (post-merge) discussion. To recap, the method is needed so that the default `subscribe` method can be made final and ensure plugin hooks can be called (once available). The method is protected and only affects operator implementors that chose to extend the base reactive classes directly. \r\n\r\nThe alternative is to leave `subscribe` abstract and add a hook to every operator method (for example, see [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L50) and [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L162).'
p8599
sg5
S'2.x: first step switching to the reduced-allocation architecture'
p8600
sg7
(lp8601
S'Enhancement'
p8602
asg10
I4030
sg11
(lp8603
S'lgtm :+1:'
p8604
asg14
S'akarnokd:ArchitectureChange'
p8605
sbsI4031
(iPull
Pull
p8606
(dp8607
g3
S"This PR updates the readme and changes the group ID.\r\n\r\nI'm going to merge this and hope the new group id shows up at https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/ (may take several attempts, depending on how cooperative the nebula plugin is.)"
p8608
sg5
S'2.x: update groupid and readme.md'
p8609
sg7
(lp8610
S'Build'
p8611
asg10
I4031
sg11
(lp8612
S'Seems to work: https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/rxjava2/rxjava/'
p8613
asg14
S'akarnokd:NewGroupID'
p8614
sbsI4034
(iPull
Pull
p8615
(dp8616
g3
S'Alternative implementation to #4001.'
p8617
sg5
S'1.x: distinctuntilchanged with direct value comparator - alternative'
p8618
sg7
(lp8619
S'Feature-Request'
p8620
asg10
I4034
sg11
(lp8621
S'lgtm :+1:'
p8622
aS'Thanks Jake for the review!'
p8623
aS'\xf0\x9f\x91\x8d '
p8624
asg14
S'akarnokd:DistinctUntilChangedComparator'
p8625
sbsI4036
(iPull
Pull
p8626
(dp8627
g3
S'As discussed in #4035 with @akarnokd '
p8628
sg5
S'1.x: added zip function with observable array.'
p8629
sg7
(lp8630
S'Feature-Request'
p8631
asg10
I4036
sg11
(lp8632
S'Thanks! Almost forgot, please also add a unit test that verifies this overload works with 0, 1, or a couple of sources. (You can add a unit test that, for example, loops from 0 to 31, generates an array with that many simple sources and checks if all source values actually zipped into the final value.)'
p8633
aS"@akarnokd Sorry for the delay, I just added tests for 0, 1 and multiple array sizes, let me know if that's ok."
p8634
aS':+1:'
p8635
aS'\xf0\x9f\x91\x8d '
p8636
asg14
S'Shyish:4035_zip_of_observable_array'
p8637
sbsI4038
(iPull
Pull
p8638
(dp8639
g3
g57
sg5
S'fix typos in nullfunction javadoc'
p8640
sg7
(lp8641
S'Documentation'
p8642
asg10
I4038
sg11
(lp8643
S'Thanks!'
p8644
asg14
S'bgogetap:typos'
p8645
sbsI4039
(iPull
Pull
p8646
(dp8647
g3
S'  - Fixes to Javadoc warnings\r\n  - Type arguments\r\n  - Missing descriptions'
p8648
sg5
S'1.x: add missing javadoc elements, fix some descriptions'
p8649
sg7
(lp8650
S'Documentation'
p8651
asg10
I4039
sg11
(lp8652
S'Fixed, @artem-zinnatullin .'
p8653
aS'\xf0\x9f\x91\x8d '
p8654
aS'\xf0\x9f\x91\x8d '
p8655
aS'Thanks @stevegury & @artem-zinnatullin \r\n\r\n@DavidMGross let me know if you are okay with the update.'
p8656
aS'\xf0\x9f\x91\x8d Love it. Nice to see those &#64;warn messages going away.'
p8657
asg14
S'akarnokd:Cleanup0620'
p8658
sbsI4041
(iPull
Pull
p8659
(dp8660
g3
S"This PR updates the `Observable` method signatures to accept `ObservableConsumable`, similar to how `Flowable` methods accept `Publisher`.\r\n\r\nThe architecture switch may take a couple of more PRs. I'll try to limit the change amount in each."
p8661
sg5
S"2.x: update observable's ops to work with observableconsumable"
p8662
sg7
(lp8663
S'Information'
p8664
asg10
I4041
sg11
(lp8665
sg14
S'akarnokd:ConsumableIn'
p8666
sbsI4042
(iPull
Pull
p8667
(dp8668
g3
S'Update to `Completable` and `Single` to use `CompletableConsumable` and `SingleConsumable` as input.'
p8669
sg5
S'2.x: use xconsumable in completable and single'
p8670
sg7
(lp8671
S'Information'
p8672
asg10
I4042
sg11
(lp8673
sg14
S'akarnokd:SingleCompletableUseBaseType'
p8674
sbsI4043
(iPull
Pull
p8675
(dp8676
g3
S'  - Moved the operators of Completable into their respective classes. Updated them to extend `Completable` directly.\r\n  - Fixed a large set of inconsistend `Disposable` management among the `Observable` operators.'
p8677
sg5
S'2.x: factor out completable ops, unify disposed markers'
p8678
sg7
(lp8679
S'Information'
p8680
asg10
I4043
sg11
(lp8681
sg14
S'akarnokd:SingleCompletableDirect'
p8682
sbsI4045
(iPull
Pull
p8683
(dp8684
g3
S'`Single` operators factored out and made them extend `Single` directly. Added missing headers.'
p8685
sg5
S'2.x: single operators factored out, headers added'
p8686
sg7
(lp8687
S'Information'
p8688
asg10
I4045
sg11
(lp8689
sg14
S'akarnokd:SingleFactoredOutOps'
p8690
sbsI4046
(iPull
Pull
p8691
(dp8692
g3
S'This is an example built in my repo: https://codecov.io/gh/zsxwing/RxJava/'
p8693
sg5
S'1.x: publish code coverage results to codecov.io'
p8694
sg7
(lp8695
S'Build'
p8696
asg10
I4046
sg11
(lp8697
S"Yes! I actually [started the same in my fork](https://github.com/artem-zinnatullin/RxJava/pull/1) previous week \xf0\x9f\x98\xb8.\r\n\r\n@akarnokd: 2 most important things that codecov gives:\r\n\r\n1. Code coverage for each PR and configurable commit status check, it'll report that some changes in files from PR are not covered and how overall coverage of the project was affected by PR.\r\n2. At any time you can check coverage of particular file, take a look https://codecov.io/gh/zsxwing/RxJava/tree/1.x/src/main/java/rx .\r\n\r\nWe use it in several projects: [StorIO](https://codecov.io/github/pushtorefresh/storio?branch=master), [qualitymatters](https://codecov.io/github/artem-zinnatullin/qualitymatters?branch=master) and others, it makes testing more fun and improves quality of the project."
p8698
aS'## [Current coverage][cc-pull] is **80.32%**\n\n\n> No coverage report found for **1.x** at b8bccd9.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [b8bccd9...af876b9][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/b8bccd981cf663ba14238839c39a92ebdb0b1233...af876b998608bc487d7ce9072fc7ef7748511357\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4046?src=pr'
p8699
aS':+1:'
p8700
aS'\xf0\x9f\x91\x8d yay, so happy about it, thx @zsxwing!'
p8701
aS'PR for 2.x is on the way :)'
p8702
asg14
S'zsxwing:code-coverage'
p8703
sbsI4048
(iPull
Pull
p8704
(dp8705
g3
S'Same as #4046 except the badge link.'
p8706
sg5
S'2.x: publish code coverage results to codecov.io'
p8707
sg7
(lp8708
S'Build'
p8709
asg10
I4048
sg11
(lp8710
S'## [Current coverage][cc-pull] is **69.61%**\n\n\n> No coverage report found for **2.x** at 95febf4.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [95febf4...94274ba][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/95febf4a68da221ded321669e95aa619c6a40b27...94274ba1c534e8d7dff1c867621ded32addeed03\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4048?src=pr'
p8711
aS':+1:'
p8712
aS'\xf0\x9f\x91\x8d @zsxwing can you also enable commits status check in codecov settings?'
p8713
aS'@artem-zinnatullin which button is for commits status check?'
p8714
aS"@zsxwing they've recently made major update and moved most of the settings to `codecov.yml`, looks like commit status check is now also lives there: https://codecov.io/docs#yaml_default_commit_status"
p8715
aS"> Codecov will enable three unique commit statuses by default\r\n\r\n@artem-zinnatullin I think it's enabled already."
p8716
aS"@zsxwing hm, but I don't see status checks from Codecov on GitHub, only report from Travis. Did you give required permissions to Codecov on GitHub? Probably configuration of ReactiveX organization does not allow transparent access to repos for apps authorized by its members."
p8717
aS'@artem-zinnatullin Figured it out. Need some admin to click the `Create New Webhook` button in this page: https://codecov.io/gh/ReactiveX/RxJava/settings. @benjchristensen or @abersnaze can do it.'
p8718
aS'Yeah, thanks @zsxwing.\r\n\r\n@abersnaze can you please allow Codecov to post commit statuses to the project like Travis is doing now? https://codecov.io/gh/ReactiveX/RxJava/settings\r\n\r\nThis will ensure that coverage fail (significant decrease/etc) is visible on the [Pull Requests list page](https://github.com/ReactiveX/RxJava/pulls) and will block/mark_as_yellow the merge button.'
p8719
asg14
S'zsxwing:code-coverage-2.x'
p8720
sbsI4049
(iPull
Pull
p8721
(dp8722
g3
S'Relatively straightforward, although manual an tedious, refactoring of the Flowable operators. The number of files is this large because for consistency, the tests have been renamed as well.'
p8723
sg5
S'2.x: make flowable operators extend flowable directly to reduce allocation'
p8724
sg7
(lp8725
S'Information'
p8726
asg10
I4049
sg11
(lp8727
S'## [Current coverage][cc-pull] is **69.51%**\n> Merging [#4049][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.05%**\n\n```diff\n@@                2.x      #4049   diff @@\n==========================================\n  Files           386        386          \n  Lines         27334      27579   +245   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4440       4476    +36   \n==========================================\n+ Hits          19015      19171   +156   \n- Misses         6335       6413    +78   \n- Partials       1984       1995    +11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [c566054...d6725c4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/c566054c6ab90491cefa4f10cbff3624141ce170...d6725c40e834ff298f231c954bab5ae74d263989\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4049?src=pr'
p8728
asg14
S'akarnokd:FlowableDirect'
p8729
sbsI4050
(iPull
Pull
p8730
(dp8731
g3
S"  - update to JUnit 4.12\r\n  - remove deprecated use of `junit.framework.Assert`\r\n  - update to Mockito 1.10.19\r\n  - Notification.accept() now uses switch (note that Jacoco can't properly cover enum switches as it only sees the default and impossible path is not taken).\r\n  - in `Scheduler.schedulePeriodically`, move the unsubscribe check after the action to prevent unnecessary schedule of the next iteration.\r\n  - remove the inner counted loop from `SerializedObserver` as being unnecessary\r\n  - increate timeout in `OperatorSwitchTest`\r\n  - add `CompletableSubscriberTest`\r\n  - extend `Scheduler`, `SerializedObserver`, "
p8732
sg5
S'1.x: fixes and coverage improvements'
p8733
sg7
(lp8734
S'Cleanup'
p8735
aS'Test'
p8736
asg10
I4050
sg11
(lp8737
S'## [Current coverage][cc-pull] is **80.55%**\n> Merging [#4050][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.17%**\n\n```diff\n@@                1.x      #4050   diff @@\n==========================================\n  Files           253        253          \n  Lines         16478      16476     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2500       2495     -5   \n==========================================\n+ Hits          13244      13272    +28   \n+ Misses         2341       2321    -20   \n+ Partials        893        883    -10   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [535fb75...0daa9f7][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b...0daa9f78c98d87c1206491f1ce1f3d516835e1ab\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4050?src=pr'
p8738
asg14
S'akarnokd:Coverage0620_1'
p8739
sbsI4051
(iPull
Pull
p8740
(dp8741
g3
S"Adding the backpressure support to `ReplaySubject` exposed a race condition around the `caughtUp` optimization.\r\n\r\nThe problem occurs when the source thread has caught up after `drain()` returned true but at the same time, a concurrent `drain()` starts running (due to a subscribe() process finishing or requesting on top of the previous `Long.MAX_VALUE`). This concurrent drain may think the replay hasn't started yet (by finding `rp.node` null) or seeing that the buffer has more elements (that may get double emitted).\r\n\r\nThe current solution is to remove this optimization until we come up with a correct optimization.\r\n\r\nRelated: #4028."
p8742
sg5
S'1.x: fix replaysubject anomaly around caughtup by removing that optimization'
p8743
sg7
(lp8744
S'Bug'
p8745
asg10
I4051
sg11
(lp8746
S'## [Current coverage][cc-pull] is **80.49%**\n> Merging [#4051][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.11%**\n\n```diff\n@@                1.x      #4051   diff @@\n==========================================\n  Files           253        253          \n  Lines         16478      16469     -9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2500       2491     -9   \n==========================================\n+ Hits          13244      13256    +12   \n+ Misses         2341       2331    -10   \n+ Partials        893        882    -11   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [535fb75...788f3bd][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/535fb75901bda3ba26edf5c79b0cbfef7a05580b...788f3bd94a7756187ec32a870b6900d6c784454f\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4051?src=pr'
p8747
asg14
S'akarnokd:ReplaySubjectCaughtUpFix'
p8748
sbsI4053
(iPull
Pull
p8749
(dp8750
g3
S'Closes #4052.'
p8751
sg5
S'2.x: convert schedulersupport annotation to accept a string value.'
p8752
sg7
(lp8753
S'Enhancement'
p8754
asg10
I4053
sg11
(lp8755
S'## [Current coverage][cc-pull] is **69.58%**\n> Merging [#4053][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.14%**\n\n```diff\n@@                2.x      #4053   diff @@\n==========================================\n  Files           386        385     -1   \n  Lines         27579      27571     -8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4476       4476          \n==========================================\n+ Hits          19151      19186    +35   \n+ Misses         6424       6381    -43   \n  Partials       2004       2004          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [113eeeb...90dc0e6][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/113eeeb2c3e732fce96945304b8a3e27cc3ea7cc...90dc0e64f68c924870cc6bac9995405664b85c72\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4053?src=pr'
p8756
aS"I meant to include in the PR description that I removed the `SINGLE` value. It was unused and the Javadoc didn't make it clear as to what the exact usage would be anyway."
p8757
aS'No problem. Can be added later if necessary, although `SingleScheduler` is not (planned to be) a default for any operators right now.'
p8758
asg14
S'JakeWharton:jw/scheduler-support-string'
p8759
sbsI4055
(iPull
Pull
p8760
(dp8761
g3
g57
sg5
S'2.x: update conversion method name to reflect new base type names.'
p8762
sg7
(lp8763
S'Cleanup'
p8764
asg10
I4055
sg11
(lp8765
S'## [Current coverage][cc-pull] is **69.53%**\n\n\n> No coverage report found for **2.x** at 287286e.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [287286e...b59fb93][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/287286e39fcdda7198d91b38184203537e794a9b...b59fb93c43840b2d8ea60e9cfb247c2153d1856a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4055?src=pr'
p8766
asg14
S'JakeWharton:jw/to-flowable'
p8767
sbsI4058
(iPull
Pull
p8768
(dp8769
g3
S'A lot of operators contained their own marker instance and class definition of Disposable or Subscription. This changes almost all of them to use the shared instance provided by their respective helper class. Some duplication still exists but can be cleaned up in a subsequent change.'
p8770
sg5
S'use disposablehelper and subscriptionhelper to reduce duplication.'
p8771
sg7
(lp8772
S'Bug'
p8773
aS'Enhancement'
p8774
asg10
I4058
sg11
(lp8775
S"There's some actual bug fixes in here too. More than once an AtomicReference was being compared against a Disposable/Subscription using identity without calling get()."
p8776
aS'## [Current coverage][cc-pull] is **69.70%**\n> Merging [#4058][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.13%**\n\n```diff\n@@                2.x      #4058   diff @@\n==========================================\n  Files           385        384     -1   \n  Lines         27571      27148   -423   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4476       4355   -121   \n==========================================\n- Hits          19182      18924   -258   \n+ Misses         6388       6293    -95   \n+ Partials       2001       1931    -70   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [287286e...fa6d9e4][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/287286e39fcdda7198d91b38184203537e794a9b...fa6d9e4529f8d824c710410f3a1a5924f82fd5e6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4058?src=pr'
p8777
aS"Maybe I made that up. I can't see them now. It's late..."
p8778
aS':+1: Thanks for this heroic work!'
p8779
asg14
S'JakeWharton:jw/helpers'
p8780
sbsI4059
(iPull
Pull
p8781
(dp8782
g3
S'Follow up to #4058 .'
p8783
sg5
S'2.x: cleanup a few additional subscriptionhelper locations'
p8784
sg7
(lp8785
S'Cleanup'
p8786
asg10
I4059
sg11
(lp8787
S'## [Current coverage][cc-pull] is **69.89%**\n> Merging [#4059][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.04%**\n\n```diff\n@@                2.x      #4059   diff @@\n==========================================\n  Files           384        384          \n  Lines         27148      27143     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4355       4354     -1   \n==========================================\n+ Hits          18963      18972     +9   \n+ Misses         6272       6251    -21   \n- Partials       1913       1920     +7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [e84651e...fc39286][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/e84651e5289a43872ba5c64a5ca705102851da92...fc39286c8b870ceb118dcb0db0848a6f1119cce1\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4059?src=pr'
p8788
asg14
S'akarnokd:SubscriptionCleanup'
p8789
sbsI4060
(iPull
Pull
p8790
(dp8791
g3
S"  - update to JUnit 4.12\r\n  - remove deprecated use of `junit.framework.Assert`\r\n  - update to Mockito 1.10.19\r\n  - Notification.accept() now uses switch (note that Jacoco can't properly cover enum switches as it only sees the default and impossible path is not taken).\r\n  - in `Scheduler.schedulePeriodically`, move the unsubscribe check after the action to prevent unnecessary schedule of the next iteration.\r\n  - remove the inner counted loop from `SerializedObserver` as being unnecessary\r\n  - increate timeout in `OperatorSwitchTest`\r\n  - add `CompletableSubscriberTest`\r\n  - extend `Scheduler`, `SerializedObserver`, "
p8792
sg5
S'1.x: coverage improvements, small adjustments'
p8793
sg7
(lp8794
S'Cleanup'
p8795
asg10
I4060
sg11
(lp8796
S'## [Current coverage][cc-pull] is **80.62%**\n> Merging [#4060][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4060   diff @@\n==========================================\n  Files           254        254          \n  Lines         16499      16497     -2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2497       2492     -5   \n==========================================\n+ Hits          13290      13300    +10   \n+ Misses         2325       2316     -9   \n+ Partials        884        881     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [161dbef...a86d9db][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/161dbef61abc57aed43ef1b09737e9dfc8340d3c...a86d9dbe223053cf4b8abeefb578719de68b22c4\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4060?src=pr'
p8797
asg14
S'akarnokd:Coverage0622'
p8798
sbsI4062
(iPull
Pull
p8799
(dp8800
g3
S'This PR adds the missing `package-info.java` files to the public packages.\r\n\r\n(http://reactivex.io/RxJava/javadoc/ looks awkward with all those empty descriptions).'
p8801
sg5
S'1.x: add package-info.java to the public packages'
p8802
sg7
(lp8803
S'Documentation'
p8804
asg10
I4062
sg11
(lp8805
S'## [Current coverage][cc-pull] is **80.52%**\n> Merging [#4062][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4062   diff @@\n==========================================\n  Files           254        254          \n  Lines         16499      16538    +39   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2497       2510    +13   \n==========================================\n+ Hits          13290      13318    +28   \n- Misses         2325       2333     +8   \n- Partials        884        887     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [161dbef...13bbc5c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/161dbef61abc57aed43ef1b09737e9dfc8340d3c...13bbc5c530729facaf6878a2428a076f7ddb4988\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4062?src=pr'
p8806
aS'\xf0\x9f\x91\x8d '
p8807
aS'Updated.'
p8808
aS'Merging. Let me know if the text needs some other fixes.'
p8809
asg14
S'akarnokd:PackageInfos'
p8810
sbsI4063
(iPull
Pull
p8811
(dp8812
g3
S'Replacement for #3959.'
p8813
sg5
S'1.x: scan & reduce give javadoc about unsharing the initialvalue'
p8814
sg7
(lp8815
S'Documentation'
p8816
asg10
I4063
sg11
(lp8817
S'## [Current coverage][cc-pull] is **80.52%**\n> Merging [#4063][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                1.x      #4063   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13323      13317     -6   \n- Misses         2329       2334     +5   \n- Partials        886        887     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [54eeaca...1374d68][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/54eeaca04c8b36785971a9a573cb4c185ab0c974...1374d68edd24b8d46d157637aa2843ae64ac714d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4063?src=pr'
p8818
aS'Merging this to not get in conflict with other PRs targeting `Observable`.'
p8819
asg14
S'akarnokd:ScanDefer'
p8820
sbsI4064
(iPull
Pull
p8821
(dp8822
g3
S'As discussed in #3164\r\n\r\nRight now there are 10243 PMD rule violations. \r\n\r\nFor now I activated all checks though it is recommend to disable some of them.'
p8823
sg5
S'1.x: add pmd'
p8824
sg7
(lp8825
S'Build'
p8826
asg10
I4064
sg11
(lp8827
S"I'm not against adding these checks, however, I see these problems:\r\n\r\n  - rule violations doesn't allow running the tests\r\n  - the build report is on the Travis server and thus not accessible\r\n\r\nI don't want the rule violations to block merging the PRs but rather consider them as warnings, just like the coverage tests"
p8828
aS"+1 to not fail the build for now, @vanniktech let's try to apply only useful warnings and remove all false-positives/non-needed.\r\n\r\n"
p8829
aS"Rules to disable:\r\n\r\n  - CommentSize\r\n  - CommentRequired - other tools will take care of this\r\n  - LocalVariableCouldBeFinal\r\n  - MethodArgumentCouldBeFinal\r\n  - LawOfDemeter\r\n  - BeanMembersShouldSerialize\r\n  - AbstractNaming\r\n  - AtLeastOneConstructor\r\n  - ShortVariable\r\n  - LongVariable\r\n  - EmptyMethodInAbstractClassShouldBeAbstract\r\n  - AvoidFieldNameMatchingTypeName\r\n  - ConfusingTernary\r\n  - CollapsibleIfStatements (maybe leave?)\r\n  - AvoidUsingVolatile - this is a concurrency library after all\r\n  - DefaultPackage\r\n  - AvoidCatchingThrowable we have an error handling convention of throwIfFatal + signal otherwise\r\n  - AvoidInstantiatingObjectsInLoops\r\n  - OnlyOneReturn\r\n  - TooManyMethods\r\n  - AvoidReassigningParameters - oddly, reassigning avoids JIT problems around register allocation\r\n  - GodClass\r\n  - CompareObjectsWithEquals - we have reference equality checks deliberately\r\n  - NullAssignment - ours are there for GC support\r\n  - UseVarargs - Java 6 target\r\n  - AvoidFieldNameMatchingMethodName\r\n  - CyclomaticComplexity - unavoidable\r\n  - AssignmentInOperand - looks concise and rarely ambiguous\r\n  - StdCyclomaticComplexity\r\n  - CallSuperInConstructor\r\n  - ModifiedCyclomaticComplexity\r\n  - AvoidLiteralsInIfCondition - to many false positives, such as checking a special array.length\r\n  - NPathComplexity\r\n  - AvoidDuplicateLiterals - reports arguments to `@SuppressWarnings`!\r\n  - ExcessivePublicCount\r\n  - ExcessiveClassLength\r\n  - ShortClassName\r\n  - UselessParentheses - I'd rather have these to avoid first-look ambiguity\r\n  - GenericsNaming\r\n  - DontImportSun - affects only UnsafeAccess though\r\n  - AvoidDeeplyNestedIfStmts\r\n  - ExcessiveMethodLength\r\n  - ArrayIsStoredDirectly - few places, all acceptable\r\n  - TooManyFields\r\n  - AvoidThrowingNullPointerException - established convention\r\n  - ExcessiveParameterList\r\n  - DoNotUseThreads\r\n\r\nWith these disabled, I have around 500 violations that can be managed.\r\n  "
p8830
aS'Exported: https://gist.github.com/akarnokd/29e988794cb821452ff0fca8edb34c3d'
p8831
aS'@akarnokd should I manually disable them or use the configuration from the file you uploaded?'
p8832
aS"I guess you don't want to walk through my list when you could just use the config file."
p8833
aS'True. I updated it. \xf0\x9f\x91\x8d '
p8834
aS"This PMD doesn't like the rule:\r\n\r\n```\r\n[ant:pmd] net.sourceforge.pmd.RuleSetNotFoundException: Can't find resource 'rulesets/ecmascript/basic.xml' for rule 'AssignmentInOperand'.  Make sure the resource is a valid file or URL and is on the CLASSPATH. Here's the current classpath: \r\n```"
p8835
aS'Now it seems like Travis kills our gradle :('
p8836
aS'Error 137 is typically due to out-of-memory situation'
p8837
aS'Did some experiments in my own: #4068. Should print some of the violations into the build log.'
p8838
aS'Yeah also yours seems to be running on Travis. If you want you can close this one in favor of #4068'
p8839
aS'Sure, thanks for your experiments!'
p8840
asg14
S'vanniktech:1.x_pmd'
p8841
sbsI4065
(iPull
Pull
p8842
(dp8843
g3
S'The PMD tool in local IDE tends to create this custom file. Add a rule to ignore it.'
p8844
sg5
S'1.x: ignore .pmd file in root directory'
p8845
sg7
(lp8846
S'Cleanup'
p8847
asg10
I4065
sg11
(lp8848
S'How about also adding `local.properties`?'
p8849
aS"Isn't that Android specific?"
p8850
aS"I get it when I'm opening the project via AS so yes could be."
p8851
aS"Sure. I'm merging this so please post a separate PR as I'm into something else right now."
p8852
asg14
S'akarnokd:GitIgnorePMD'
p8853
sbsI4066
(iPull
Pull
p8854
(dp8855
g3
g57
sg5
S'1.x: ignore local.properties file'
p8856
sg7
(lp8857
S'Cleanup'
p8858
asg10
I4066
sg11
(lp8859
S':+1:'
p8860
aS'## [Current coverage][cc-pull] is **80.49%**\n> Merging [#4066][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.09%**\n\n```diff\n@@                1.x      #4066   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13328      13312    -16   \n- Misses         2324       2336    +12   \n- Partials        886        890     +4   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [829a0ed...6e4b168][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/829a0eda6647b4b64b53918110c2b5d5c3b2f1ec...6e4b168a8eea33e0949da342e674231bd6bb0cd5\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4066?src=pr'
p8861
asg14
S'vanniktech:1.x_ignore_localproperties'
p8862
sbsI4068
(iPull
Pull
p8863
(dp8864
g3
S"This PR adds a PMD plugin to the build process to check a set of coding rules.\r\n\r\nAt this point, I don't think rule violations should fail the build.\r\n\r\nUnfortunately, I don't know about a service, like codecov-io, that could post the check results as comments under a PR, therefore, the current build just prints the first ~100 violations into the build log:\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L240\r\n\r\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L5508\r\n"
p8865
sg5
S'1.x: add pmd code checking tool to the build process'
p8866
sg7
(lp8867
S'Build'
p8868
asg10
I4068
sg11
(lp8869
S'## [Current coverage][cc-pull] is **80.62%**\n> Merging [#4068][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                1.x      #4068   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n+ Hits          13322      13334    +12   \n+ Misses         2332       2323     -9   \n+ Partials        884        881     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d477f9c...b67b5c8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d477f9c392d90960671dc883679f2ebeaed86acb...b67b5c8fb01ad08b8d5c9fa2d6af525d487238fc\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4068?src=pr'
p8870
aS'@artem-zinnatullin @zsxwing your thoughts on this?'
p8871
aS'\xf0\x9f\x91\x8d '
p8872
aS'Just some minor issues. Otherwise, \xf0\x9f\x91\x8d '
p8873
aS'Updated.'
p8874
aS"Should PMD also be added to the 2.x branch? The earlier it's added the earlier warnings could be fixed."
p8875
aS'Sure.'
p8876
asg14
S'akarnokd:PMD'
p8877
sbsI4069
(iPull
Pull
p8878
(dp8879
g3
S'Closes #4056.'
p8880
sg5
S'remove second type parameter from subject and flowprocessor.'
p8881
sg7
(lp8882
S'Enhancement'
p8883
asg10
I4069
sg11
(lp8884
S':+1:'
p8885
asg14
S'JakeWharton:jw/single-type-param'
p8886
sbsI4070
(iPull
Pull
p8887
(dp8888
g3
S"Closes #4057 although doesn't address the name of the class."
p8889
sg5
S'2.x: merge serialdisposable and multipleassignmentdisposable.'
p8890
sg7
(lp8891
S'Enhancement'
p8892
asg10
I4070
sg11
(lp8893
S'## [Current coverage][cc-pull] is **69.83%**\n> Merging [#4070][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                2.x      #4070   diff @@\n==========================================\n  Files           384        383     -1   \n  Lines         27143      27133    -10   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4354       4354          \n==========================================\n- Hits          18963      18948    -15   \n- Misses         6255       6267    +12   \n+ Partials       1925       1918     -7   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4925f6d...607321d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4925f6d601fc093c4f9031e2d7ce673c00af2512...607321dc505bdfd9cfc7412074717e4aa2ecb8b6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4070?src=pr'
p8894
aS"Excellent :+1:\r\n\r\n> although doesn't address the name of the class.\r\n\r\nNo problem."
p8895
asg14
S'JakeWharton:jw/merge-similar-disposable-types'
p8896
sbsI4071
(iPull
Pull
p8897
(dp8898
g3
g57
sg5
S"2.x: inline last uses of caching disposablehelper's constant."
p8899
sg7
(lp8900
S'Cleanup'
p8901
asg10
I4071
sg11
(lp8902
S'\xf0\x9f\x91\x8d '
p8903
aS':+1:'
p8904
asg14
S'JakeWharton:jw/disposable-helper'
p8905
sbsI4072
(iPull
Pull
p8906
(dp8907
g3
S'This returns false 100% of the time otherwise.'
p8908
sg5
S'2.x: dereference atomic ref before identity comparison.'
p8909
sg7
(lp8910
S'Bug'
p8911
asg10
I4072
sg11
(lp8912
S'\xf0\x9f\x91\x8d '
p8913
aS'## [Current coverage][cc-pull] is **69.82%**\n> Merging [#4072][cc-pull] into [2.x][cc-base-branch] will decrease coverage by **0.03%**\n\n```diff\n@@                2.x      #4072   diff @@\n==========================================\n  Files           384        384          \n  Lines         27143      27143          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4354       4354          \n==========================================\n- Hits          18963      18953    -10   \n- Misses         6255       6271    +16   \n+ Partials       1925       1919     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [4925f6d...455e27e][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/4925f6d601fc093c4f9031e2d7ce673c00af2512...455e27ec11379ccc112fdb6f47aedb3528996ea6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4072?src=pr'
p8914
aS':+1:'
p8915
asg14
S'JakeWharton:jw/dereference'
p8916
sbsI4074
(iPull
Pull
p8917
(dp8918
g3
g57
sg5
S'2.x: use more disposablehelper and subscriptionhelper in operators.'
p8919
sg7
(lp8920
S'Cleanup'
p8921
asg10
I4074
sg11
(lp8922
S':+1:'
p8923
asg14
S'JakeWharton:jw/more-helpers'
p8924
sbsI4076
(iPull
Pull
p8925
(dp8926
g3
S'* Use BooleanDisposable for Runnables.\r\n* Change BooleanDisposable to use null for disposed instead of keeping a marker instance.\r\n* Eliminate static factory for CompositeDisposable since its constructors are already public.'
p8927
sg5
S'2.x: some small tweaks to disposables.'
p8928
sg7
(lp8929
S'Enhancement'
p8930
asg10
I4076
sg11
(lp8931
S':+1:'
p8932
asg14
S'JakeWharton:jw/small-disposable-tweaks'
p8933
sbsI4077
(iPull
Pull
p8934
(dp8935
g3
S'The links for `@Beta` and `@Experimental` in the `README.md` point to the master branch. These URLs yield 404 not found when clicked. '
p8936
sg5
S'annotation links in readme.md yield 404 error'
p8937
sg7
(lp8938
S'Documentation'
p8939
asg10
I4077
sg11
(lp8940
S':+1:'
p8941
aS'## [Current coverage][cc-pull] is **80.53%**\n> Merging [#4077][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.01%**\n\n```diff\n@@                1.x      #4077   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13322      13319     -3   \n- Misses         2332       2333     +1   \n- Partials        884        886     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [d477f9c...fd266ae][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/d477f9c392d90960671dc883679f2ebeaed86acb...fd266aed9712763ac2c6298e9d3b9c856a23eaf3\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4077?src=pr'
p8942
asg14
S'maxthomas:README-annotation-fix'
p8943
sbsI4078
(iPull
Pull
p8944
(dp8945
g3
g57
sg5
S'2.x: re-use the single empty disposable instance everywhere.'
p8946
sg7
(lp8947
S'Cleanup'
p8948
asg10
I4078
sg11
(lp8949
S':+1:'
p8950
aS'## [Current coverage][cc-pull] is **69.93%**\n> Merging [#4078][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4078   diff @@\n==========================================\n  Files           383        383          \n  Lines         27082      27078     -4   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18927      18938    +11   \n+ Misses         6237       6216    -21   \n- Partials       1918       1924     +6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [5f7b2e1...241f765][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/5f7b2e1ad82ce96feace440156c314bd068b3376...241f7655f6073faaa53437d0155e07f7c6a4e75c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4078?src=pr'
p8951
asg14
S'JakeWharton:jw/one-empty-disposable'
p8952
sbsI4080
(iPull
Pull
p8953
(dp8954
g3
S'I keep thinking I found all of these and then more crop up...'
p8955
sg5
S'2.x: replace custom empty disposables with global instance.'
p8956
sg7
(lp8957
S'Cleanup'
p8958
asg10
I4080
sg11
(lp8959
S'\xf0\x9f\x91\x8d '
p8960
aS'There are still some empty Disposable objects in those files:\r\n\r\nFlowableThrottleFirstTimed.java\r\nFlowableTimeoutTimed.java\r\nNbpOperatorThrottleFirstTimed.java\r\nNbpOperatorTimeoutTimed.java\r\n\r\nShould they also be replaced with EmptyDisposable.INSTANCE?'
p8961
aS'No. Those are marker instances that must be discernable from empty.\n\nOn Fri, Jun 24, 2016, 5:12 AM Niklas Baudy <notifications@github.com> wrote:\n\n> There are still some empty Disposable objects in those files:\n>\n> FlowableThrottleFirstTimed.java\n> FlowableTimeoutTimed.java\n> NbpOperatorThrottleFirstTimed.java\n> NbpOperatorTimeoutTimed.java\n>\n> Should they also be replaced with EmptyDisposable.INSTANCE?\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4080#issuecomment-228296732>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe/AAEEEWuefuELgwE0_bPyFYZcB0y1xKTOks5qO593gaJpZM4I8NPy>\n> .\n>\n'
p8962
asg14
S'JakeWharton:jw/last-one'
p8963
sbsI4081
(iPull
Pull
p8964
(dp8965
g3
S"If this were to be used by public code it could have have Very Bad\xe2\x84\xa2 effects by causing operators to think that they already disposed resources when they actually had not. Since `Disposable` is stateless it's safe for `disposed()` and `empty()` to be synonymous, although that might change in the future so both methods are retained."
p8966
sg5
S'2.x: do not leak the disposed marker instance into public api.'
p8967
sg7
(lp8968
S'Cleanup'
p8969
asg10
I4081
sg11
(lp8970
S'## [Current coverage][cc-pull] is **69.94%**\n> Merging [#4081][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.01%**\n\n```diff\n@@                2.x      #4081   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27074          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18931      18936     +5   \n+ Misses         6230       6225     -5   \n  Partials       1913       1913          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...15c771b][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...15c771b1056dbb69783d9615c5cb547d66931ce8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4081?src=pr'
p8971
aS':+1:'
p8972
asg14
S'JakeWharton:jw/disposed-public'
p8973
sbsI4083
(iPull
Pull
p8974
(dp8975
g3
g57
sg5
S'2.x: merge cancelledsubscriber into emptysubscriber.'
p8976
sg7
(lp8977
S'Cleanup'
p8978
asg10
I4083
sg11
(lp8979
S'## [Current coverage][cc-pull] is **70.00%**\n> Merging [#4083][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.07%**\n\n```diff\n@@                2.x      #4083   diff @@\n==========================================\n  Files           383        382     -1   \n  Lines         27074      27069     -5   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4343     +1   \n==========================================\n+ Hits          18931      18949    +18   \n+ Misses         6230       6204    -26   \n- Partials       1913       1916     +3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...19ded55][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...19ded5582a4019c594dfac7bbc39e9322f6d695a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4083?src=pr'
p8980
aS'I think we could remove the two entirely as they are no longer needed by operators (previously, CancelledSubscriber was needed due to lift).\r\n\r\nEmptySubscribe -> TestSubscriber (make a local copy)\r\n\r\nCancelledSubscriber -> FlowableRefCountTest (make a local copy)\r\n\r\nSubscribers -> remove both'
p8981
aS'Merging this for now and work out their existence later.'
p8982
asg14
S'JakeWharton:jw/consolidate-subscribers'
p8983
sbsI4084
(iPull
Pull
p8984
(dp8985
g3
g57
sg5
S'2.x: more uses of subscriptionhelper.'
p8986
sg7
(lp8987
S'Cleanup'
p8988
asg10
I4084
sg11
(lp8989
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4084][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4084   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27056    -18   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4335     -7   \n==========================================\n- Hits          18931      18927     -4   \n+ Misses         6230       6222     -8   \n+ Partials       1913       1907     -6   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...fcd4fa2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...fcd4fa230761a8869147867d26d47e7815666551\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4084?src=pr'
p8990
aS':+1:'
p8991
asg14
S'JakeWharton:jw/more-helper'
p8992
sbsI4085
(iPull
Pull
p8993
(dp8994
g3
S'The NBP version of #4083.'
p8995
sg5
S'2.x: merge nbpcancelledsubscriber into nbpemptysubscriber.'
p8996
sg7
(lp8997
S'Cleanup'
p8998
asg10
I4085
sg11
(lp8999
S'## [Current coverage][cc-pull] is **69.95%**\n> Merging [#4085][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.03%**\n\n```diff\n@@                2.x      #4085   diff @@\n==========================================\n  Files           383        382     -1   \n  Lines         27074      27065     -9   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4341     -1   \n==========================================\n+ Hits          18931      18933     +2   \n+ Misses         6230       6222     -8   \n+ Partials       1913       1910     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...e956210][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...e956210f6a00f41b9776e6757b1d05e4870f3dac\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4085?src=pr'
p9000
aS"I haven't switched the Nbp stuff to direct-create yet so these have dependencies, but should be removed the same way #4083. I'm merging this to avoid conflicts in Nbp till then. :+1: Thanks! "
p9001
asg14
S'JakeWharton:jw/consolidate-nbp-subscribers'
p9002
sbsI4086
(iPull
Pull
p9003
(dp9004
g3
g57
sg5
S'1.x: remove unnecessary dependency in build.gradle'
p9005
sg7
(lp9006
S'Build'
p9007
asg10
I4086
sg11
(lp9008
S'Failure is flake #4047. '
p9009
aS'## [Current coverage][cc-pull] is **80.57%**\n> Merging [#4086][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.02%**\n\n```diff\n@@                1.x      #4086   diff @@\n==========================================\n  Files           254        254          \n  Lines         16538      16538          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2510       2510          \n==========================================\n- Hits          13330      13326     -4   \n- Misses         2321       2327     +6   \n+ Partials        887        885     -2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [544690b...79f445f][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/544690b4d45aedee8f0880f28442262faadc9f97...79f445f149c80269556b3c9dec9829f5128e7ae6\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4086?src=pr'
p9010
aS':+1:'
p9011
asg14
S'zsxwing:minor'
p9012
sbsI4087
(iPull
Pull
p9013
(dp9014
g3
g57
sg5
S'2.x: normalize request validation using subscriptionhelper.'
p9015
sg7
(lp9016
S'Cleanup'
p9017
asg10
I4087
sg11
(lp9018
S'This method is super weird with `true` indicating _invalid_ and `false` indicating _valid_.'
p9019
aS'## [Current coverage][cc-pull] is **69.97%**\n> Merging [#4087][cc-pull] into [2.x][cc-base-branch] will increase coverage by **0.05%**\n\n```diff\n@@                2.x      #4087   diff @@\n==========================================\n  Files           383        383          \n  Lines         27074      27057    -17   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4342       4342          \n==========================================\n+ Hits          18931      18933     +2   \n+ Misses         6230       6216    -14   \n+ Partials       1913       1908     -5   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [66ce4d5...c092119][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/66ce4d52181c3e36fbfd07bbb6781c389b6bd49e...c092119ec7dc65359697bc7bb295ffeb6ced1ab8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4087?src=pr'
p9020
aS'I agree, looked like a good idea back then to flip. I think it should be straight: true means valid. Would you like to do the flip?'
p9021
aS"Yep. I'll add it to my list.\n\nOn Thu, Jun 23, 2016 at 3:04 AM David Karnok <notifications@github.com>\nwrote:\n\n> Merged #4087 <https://github.com/ReactiveX/RxJava/pull/4087>.\n>\n> \xe2\x80\x94\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/ReactiveX/RxJava/pull/4087#event-701484438>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe/AAEEEdQ8kWZzmmsrGSOiZ7L4IJ-QwGSdks5qOi_4gaJpZM4I8d58>\n> .\n>\n"
p9022
asg14
S'JakeWharton:jw/request-validation'
p9023
sbsI4088
(iPull
Pull
p9024
(dp9025
g3
S'Some tests are sensitive to Travis hiccups. This adds more timeout to some and reduces heavyness on others.'
p9026
sg5
S'1.x: fix some flaky tests, add more timeout to others'
p9027
sg7
(lp9028
S'Test-Failures'
p9029
asg10
I4088
sg11
(lp9030
S'Nit: Maybe worth pulling this out to a constant rather than having to update all the locations each time?\r\n\r\nOtherwise \xf0\x9f\x91\x8d '
p9031
aS'@hzsweers sure, your PR is welcome at any time.'
p9032
aS'## [Current coverage][cc-pull] is **80.31%**\n\n\n> No coverage report found for **1.x** at 90e4204.\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [90e4204...46da54a][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/90e4204f751a5d0b74061e3ae33bff59b93de410...46da54a5c9b68b2c188ccde4dd86d10bc6a3292c\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4088?src=pr'
p9033
asg14
S'akarnokd:UnflakyTests'
p9034
sbsI4090
(iPull
Pull
p9035
(dp9036
g3
S"- Exception extends Throwable so it's incorrect to generalize the Throwable as `exception`"
p9037
sg5
S'rename throwable parameter from exception to throwable'
p9038
sg7
(lp9039
S'Cleanup'
p9040
asg10
I4090
sg11
(lp9041
S'There are a lot more of those cases:\r\n\r\n```\r\nsrc/main/java/rx/Completable.java\r\n458:     * Creates a Completable instance that emits the given Throwable exception to subscribers.\r\n\r\nsrc/main/java/rx/exceptions/OnErrorThrowable.java\r\n37:    private OnErrorThrowable(Throwable exception) {\r\n43:    private OnErrorThrowable(Throwable exception, Object value) {\r\n\r\nsrc/main/java/rx/internal/operators/OnSubscribeThrow.java\r\n30:    private final Throwable exception;\r\n32:    public OnSubscribeThrow(Throwable exception) {\r\n\r\nsrc/main/java/rx/internal/operators/OperatorOnBackpressureBuffer.java\r\n163:        public void complete(Throwable exception) {\r\n\r\nsrc/main/java/rx/internal/util/BackpressureDrainManager.java\r\n65:        void complete(Throwable exception);\r\n73:    protected Throwable exception;\r\n\r\nsrc/main/java/rx/Observable.java\r\n1379:    public static <T> Observable<T> error(Throwable exception) {\r\n\r\nsrc/main/java/rx/Single.java\r\n506:    public static <T> Single<T> error(final Throwable exception) {\r\n\r\nsrc/test/java/rx/internal/operators/OperatorDematerializeTest.java\r\n53:        Throwable exception = new Throwable("test");\r\n\r\nsrc/test/java/rx/internal/operators/OperatorMergeTest.java\r\n1048:        Throwable exception = new Throwable();\r\n1061:        Throwable exception = new Throwable();\r\n1085:        Throwable exception = new Throwable();\r\n1099:        Throwable exception = new Throwable();\r\n\r\nsrc/test/java/rx/SingleTest.java\r\n888:        Throwable exceptionFromOnErrorAction = new IllegalStateException();\r\n1012:        Throwable exceptionFromAction = new IllegalStateException();\r\n```'
p9042
aS'See the discussion in #1353. Renaming such public parameters may cause problems in other languages.'
p9043
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4090][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4090   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n+ Hits          13500      13504     +4   \n+ Misses         2408       2403     -5   \n- Partials        913        914     +1   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...7eccbd8][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...7eccbd8c6fa589ac49b509ed3c5cc1b28b906894\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4090?src=pr'
p9044
aS"@akarnokd Thanks for the link.\r\n\r\nIt seems the discussion there ended saying that it's ok to start renaming:\r\n\r\n>that in terms of Java we are not breaking anything and this is RxJava, not RxKotlin or RxScala\xe2\x80\xa6\r\n\r\nand you mentioned it will be tackled before RC1 of 2.x:\r\n\r\n>Let's rename parameters based on @DavidMGross suggestions then.\r\n\r\nShould they all be done in the same PR?"
p9045
aS'If you are just renaming, we can review it in large batches; plus, saves you the administration cost of setting up PRs. So it would be great you followed the suggestions #1353.'
p9046
aS"Sounds good, let me close this PR and I'll open one when I have more time this week."
p9047
asg14
S'ataulm:patch-1'
p9048
sbsI4091
(iPull
Pull
p9049
(dp9050
g3
S'Some notable changes:\r\n\r\n  - move fields to the beginning of a class\r\n  - remove unnecessary modifiers and initializers\r\n  - avoid creating objects to early\r\n  - update most drain algorithm to use the (more modern) `while (e != r)` pattern\r\n  - PMD has a few incorrect checks: complaining about a final local that gets used in an inner class\r\n  - adding braces to ifs\r\n  - documenting deliberately empty methods\r\n  - fix internal field and method namings\r\n  - delegate to `Exceptions.propagate`'
p9051
sg5
S'1.x: apply fixes based on pmd suggestions'
p9052
sg7
(lp9053
S'Cleanup'
p9054
asg10
I4091
sg11
(lp9055
S"Travis doesn't pick up this one for some reason. Reopening."
p9056
aS'## [Current coverage][cc-pull] is **80.16%**\n> Merging [#4091][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **0.08%**\n\n```diff\n@@                1.x      #4091   diff @@\n==========================================\n  Files           259        257     -2   \n  Lines         16821      16771    -50   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2541    -13   \n==========================================\n- Hits          13500      13445    -55   \n- Misses         2408       2416     +8   \n+ Partials        913        910     -3   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...52b026d][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...52b026dfb0411167daf31284768e1cea472ec75a\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4091?src=pr'
p9057
aS'/cc @hzsweers @artem-zinnatullin Let me know if you want to review this and need some time.'
p9058
aS'https://travis-ci.org/ReactiveX/RxJava/builds/139734219#L240'
p9059
aS"I'll review it in 24 hours if you don't mind"
p9060
aS"Sure. I'll return to 2.x till then."
p9061
aS"Some of these I really like. Some I don't. Documenting empty methods seems like pure noise."
p9062
aS'Updated.'
p9063
aS'@JakeWharton we can iterate on the ruleset after this gets merged.'
p9064
aS"\xf0\x9f\x91\x8d \r\nI agree with @JakeWharton, adding a one-word comment to empty methods does not add substantial information. We should disable this warning, which doesn't prevent us to document empty methods where it makes sense."
p9065
aS"Okay then. If you don't mind, let's have the comments in this PR as is and have a separate PR disable the rule."
p9066
aS'\xf0\x9f\x91\x8d Sound good!'
p9067
aS'Updated: removed my name, swapped the BackpressureStategy constants, disabled empty method/constructor/catch block rules.'
p9068
aS'\xf0\x9f\x91\x8d '
p9069
aS'Some minor nits, LGTM \xf0\x9f\x91\x8d '
p9070
aS'Thanks @hzsweers!'
p9071
asg14
S'akarnokd:PMDFixes623'
p9072
sbsI4092
(iPull
Pull
p9073
(dp9074
g3
S'This PR adds the AnimalSniffer plugin to check for Java 6 API violations.\r\n\r\nRelated issue: #4067.'
p9075
sg5
S'1.x: add animalsniffer to the build process, fix and suppress violations'
p9076
sg7
(lp9077
S'Build'
p9078
asg10
I4092
sg11
(lp9079
S'/cc @artem-zinnatullin @zsxwing @JakeWharton '
p9080
aS'Flaky tests:\r\n```\r\nrx.observers.TestSubscriberTest > testOnErrorCrashCountsDownLatch FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds\r\n        at java.lang.ClassLoader.defineClass1(Native Method)\r\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:800)\r\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\r\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)\r\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:71)\r\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\r\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:355)\r\n        at java.security.AccessController.doPrivileged(Native Method)\r\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:354)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:425)\r\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)\r\n        at rx.observers.TestSubscriberTest.testOnErrorCrashCountsDownLatch(TestSubscriberTest.java:595)\r\n```\r\n\r\n```\r\nrx.plugins.RxJavaPluginsTest > testOnNextValueCallsPlugin FAILED\r\n    java.lang.RuntimeException: java.util.concurrent.TimeoutException\r\n        at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)\r\n        at rx.observables.BlockingObservable.first(BlockingObservable.java:163)\r\n        at rx.plugins.RxJavaPluginsTest.testOnNextValueCallsPlugin(RxJavaPluginsTest.java:228)\r\n        Caused by:\r\n        java.util.concurrent.TimeoutException\r\n```\r\n\r\n```\r\nrx.subjects.BehaviorSubjectTest > testUnsubscriptionCase FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds\r\n        at java.lang.ClassLoader.findBootstrapClass(Native Method)\r\n        at java.lang.ClassLoader.findBootstrapClassOrNull(ClassLoader.java:1070)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:414)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:412)\r\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\r\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:358)\r\n        at java.lang.Class.forName0(Native Method)\r\n        at java.lang.Class.forName(Class.java:191)\r\n        at org.mockito.internal.configuration.ClassPathLoader.loadConfiguration(ClassPathLoader.java:68)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.createConfig(GlobalConfiguration.java:38)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.<init>(GlobalConfiguration.java:32)\r\n        at org.mockito.internal.configuration.GlobalConfiguration.validate(GlobalConfiguration.java:47)\r\n        at org.mockito.internal.progress.MockingProgressImpl.validateMostStuff(MockingProgressImpl.java:81)\r\n        at org.mockito.internal.progress.MockingProgressImpl.mockingStarted(MockingProgressImpl.java:116)\r\n        at org.mockito.internal.progress.ThreadSafeMockingProgress.mockingStarted(ThreadSafeMockingProgress.java:72)\r\n        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:60)\r\n        at org.mockito.Mockito.mock(Mockito.java:1285)\r\n        at org.mockito.Mockito.mock(Mockito.java:1163)\r\n        at rx.subjects.BehaviorSubjectTest.testUnsubscriptionCase(BehaviorSubjectTest.java:249)\r\n```'
p9081
aS'To be merged after #4091 in case there is a conflict.'
p9082
aS'## [Current coverage][cc-pull] is **80.28%**\n> Merging [#4092][cc-pull] into [1.x][cc-base-branch] will increase coverage by **0.02%**\n\n```diff\n@@                1.x      #4092   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n+ Hits          13500      13504     +4   \n+ Misses         2408       2402     -6   \n- Partials        913        915     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...7da62c2][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...7da62c28b3f5139a9f792e362efc8185e10309de\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4092?src=pr'
p9083
aS'Does it really fail the build if you try to use Java7+ APIs?'
p9084
aS"That AssertionError initialization did fail locally, but can't really post a PR that demonstrates failure, right?"
p9085
aS'Sure sure, I mean have you checked that it really fails build that we perform on CI in case of using Java7+ APIs? (you can execute commands from [buildViaTravis.sh](https://github.com/ReactiveX/RxJava/blob/1.x/gradle/buildViaTravis.sh) locally to check that).'
p9086
aS'https://travis-ci.org/ReactiveX/RxJava/builds/139755352#L209'
p9087
aS"That's annoying, we seem to get shot down by out-of-memory checkers, maybe due to extensive thread usage? Or we have a leak somewhere."
p9088
aS"\xf0\x9f\x91\x8d \r\n\r\nI see ~similar instability of CI regarding memory usage in other projects I work on, solution I currently stick to is to divide build into separate steps like:\r\n\r\n```bash\r\n./gradlew --no-daemon clean\r\n./gradlew --no-daemon assemble\r\n./gradlew --no-daemon test\r\n// etc\r\n```\r\n\r\nEither it's leak in Gradle (or some plugin) or CI under load gives us less memory."
p9089
aS'\xf0\x9f\x91\x8d '
p9090
asg14
S'akarnokd:AnimalSniffer'
p9091
sbsI4093
(iPull
Pull
p9092
(dp9093
g3
S'By default, the `license` plugin warns about MDs and text files. In addition, this excluded the JCTools queues and the beta/experimental annotations because they kept their original license header.'
p9094
sg5
S'1.x: exclude some text files from license checks'
p9095
sg7
(lp9096
S'Build'
p9097
asg10
I4093
sg11
(lp9098
S'## [Current coverage][cc-pull] is **80.25%**\n> Merging [#4093][cc-pull] into [1.x][cc-base-branch] will decrease coverage by **<.01%**\n\n```diff\n@@                1.x      #4093   diff @@\n==========================================\n  Files           259        259          \n  Lines         16821      16821          \n  Methods           0          0          \n  Messages          0          0          \n  Branches       2554       2554          \n==========================================\n- Hits          13500      13499     -1   \n+ Misses         2408       2407     -1   \n- Partials        913        915     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [afe3cb0...330192c][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/1.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/afe3cb0b90ae4bb87760bce85048717926862993...330192c640357409299344ce0c5f7593be1d977d\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4093?src=pr'
p9099
aS"Can we configure it to fail build if some file doesn't have license so we won't forget to add it? \r\n\r\n// As far as I understand it's [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin)."
p9100
aS'Yes, but not now as it will fail 2 classes I fixed in another PR.'
p9101
aS'ok, \xf0\x9f\x91\x8d '
p9102
asg14
S'akarnokd:LicenseExcludes'
p9103
sbsI4094
(iPull
Pull
p9104
(dp9105
g3
S'Follow up from comments in #4083 and #4085.'
p9106
sg5
S'2.x: remove emptysubscriber, start to remove nbpemptysubscriber.'
p9107
sg7
(lp9108
S'Cleanup'
p9109
asg10
I4094
sg11
(lp9110
S'## [Current coverage][cc-pull] is **70.01%**\n> Merging [#4094][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4094   diff @@\n==========================================\n  Files           381        380     -1   \n  Lines         27025      27014    -11   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4335       4332     -3   \n==========================================\n- Hits          18921      18914     -7   \n+ Misses         6197       6191     -6   \n- Partials       1907       1909     +2   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [573401d...971f653][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/573401d3ab9554c34b704d9ca755d5e6287d871d...971f653343f93b6780188251850ec2e74010af76\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4094?src=pr'
p9111
aS'\xf0\x9f\x91\x8d '
p9112
aS':+1:'
p9113
asg14
S'JakeWharton:jw/remove-empty-cancelled'
p9114
sbsI4095
(iPull
Pull
p9115
(dp9116
g3
g57
sg5
S'2.x: invert request validation return type for better semantics.'
p9117
sg7
(lp9118
S'Cleanup'
p9119
asg10
I4095
sg11
(lp9120
S'## [Current coverage][cc-pull] is **70.07%**\n> Merging [#4095][cc-pull] into [2.x][cc-base-branch] will increase coverage by **<.01%**\n\n```diff\n@@                2.x      #4095   diff @@\n==========================================\n  Files           380        380          \n  Lines         27014      26985    -29   \n  Methods           0          0          \n  Messages          0          0          \n  Branches       4332       4331     -1   \n==========================================\n- Hits          18931      18911    -20   \n+ Misses         6183       6166    -17   \n- Partials       1900       1908     +8   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last updated by [28cd5e3...6ee9e20][cc-compare]\n[cc-base-branch]: https://codecov.io/gh/ReactiveX/RxJava/branch/2.x?src=pr\n[cc-compare]: https://codecov.io/gh/ReactiveX/RxJava/compare/28cd5e300c3d6e25cf9946568bb069dddb2eeaba...6ee9e20ae16aea3c23e30de5c78f295dba3b15a8\n[cc-pull]: https://codecov.io/gh/ReactiveX/RxJava/pull/4095?src=pr'
p9121
aS':+1:'
p9122
asg14
S'JakeWharton:jw/invert-return-type'
p9123
sbs.